/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://conversations.twilio.com",
	};
    /**
	 * CREATE_CONFIGURATION_ADDRESS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_CONFIGURATION_ADDRESS_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * CREATE_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * CREATE_CONVERSATION_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_CONVERSATION_MESSAGE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * CREATE_CONVERSATION_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_CONVERSATION_PARTICIPANT_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * CREATE_CONVERSATION_SCOPED_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_CONVERSATION_SCOPED_WEBHOOK_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * CREATE_CREDENTIAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_CREDENTIAL_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * CREATE_ROLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_ROLE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * CREATE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SERVICE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * CREATE_SERVICE_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SERVICE_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * CREATE_SERVICE_CONVERSATION_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SERVICE_CONVERSATION_MESSAGE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * CREATE_SERVICE_CONVERSATION_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SERVICE_CONVERSATION_PARTICIPANT_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * CREATE_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * CREATE_SERVICE_ROLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SERVICE_ROLE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * CREATE_SERVICE_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SERVICE_USER_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * CREATE_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_USER_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_CONFIGURATION_ADDRESS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_CONFIGURATION_ADDRESS_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_CONVERSATION_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_CONVERSATION_MESSAGE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_CONVERSATION_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_CONVERSATION_PARTICIPANT_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_CONVERSATION_SCOPED_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_CONVERSATION_SCOPED_WEBHOOK_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_CREDENTIAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_CREDENTIAL_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_ROLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_ROLE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SERVICE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_SERVICE_BINDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SERVICE_BINDING_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_SERVICE_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SERVICE_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_SERVICE_CONVERSATION_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SERVICE_CONVERSATION_MESSAGE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_SERVICE_CONVERSATION_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SERVICE_CONVERSATION_PARTICIPANT_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_SERVICE_ROLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SERVICE_ROLE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_SERVICE_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SERVICE_USER_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_SERVICE_USER_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SERVICE_USER_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_USER_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_USER_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_USER_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_CONFIGURATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CONFIGURATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_CONFIGURATION_ADDRESS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CONFIGURATION_ADDRESS_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_CONFIGURATION_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CONFIGURATION_WEBHOOK_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_CONVERSATION_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CONVERSATION_MESSAGE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_CONVERSATION_MESSAGE_RECEIPT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CONVERSATION_MESSAGE_RECEIPT_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_CONVERSATION_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CONVERSATION_PARTICIPANT_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_CONVERSATION_SCOPED_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CONVERSATION_SCOPED_WEBHOOK_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_CREDENTIAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CREDENTIAL_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_ROLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ROLE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_BINDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_BINDING_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_CONFIGURATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_CONFIGURATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_CONVERSATION_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_CONVERSATION_MESSAGE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_CONVERSATION_MESSAGE_RECEIPT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_CONVERSATION_MESSAGE_RECEIPT_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_CONVERSATION_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_CONVERSATION_PARTICIPANT_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_NOTIFICATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_NOTIFICATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_ROLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_ROLE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_USER_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_USER_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_USER_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_WEBHOOK_CONFIGURATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_WEBHOOK_CONFIGURATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_USER_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_USER_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_USER_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_CONFIGURATION_ADDRESS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CONFIGURATION_ADDRESS_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_CONVERSATION_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CONVERSATION_MESSAGE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_CONVERSATION_MESSAGE_RECEIPT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CONVERSATION_MESSAGE_RECEIPT_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_CONVERSATION_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CONVERSATION_PARTICIPANT_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_CONVERSATION_SCOPED_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CONVERSATION_SCOPED_WEBHOOK_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_CREDENTIAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CREDENTIAL_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_PARTICIPANT_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_PARTICIPANT_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_ROLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_ROLE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_BINDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_BINDING_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_CONVERSATION_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_CONVERSATION_MESSAGE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_CONVERSATION_MESSAGE_RECEIPT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_CONVERSATION_MESSAGE_RECEIPT_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_CONVERSATION_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_CONVERSATION_PARTICIPANT_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_PARTICIPANT_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_PARTICIPANT_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_ROLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_ROLE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_USER_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_USER_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_USER_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_USER_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_USER_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_USER_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_CONFIGURATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CONFIGURATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_CONFIGURATION_ADDRESS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CONFIGURATION_ADDRESS_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_CONFIGURATION_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CONFIGURATION_WEBHOOK_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_CONVERSATION_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CONVERSATION_MESSAGE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_CONVERSATION_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CONVERSATION_PARTICIPANT_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_CONVERSATION_SCOPED_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CONVERSATION_SCOPED_WEBHOOK_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_CREDENTIAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CREDENTIAL_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_ROLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_ROLE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_SERVICE_CONFIGURATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SERVICE_CONFIGURATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_SERVICE_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SERVICE_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_SERVICE_CONVERSATION_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SERVICE_CONVERSATION_MESSAGE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_SERVICE_CONVERSATION_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SERVICE_CONVERSATION_PARTICIPANT_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_SERVICE_NOTIFICATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SERVICE_NOTIFICATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_SERVICE_ROLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SERVICE_ROLE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_SERVICE_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SERVICE_USER_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_SERVICE_USER_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SERVICE_USER_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_SERVICE_WEBHOOK_CONFIGURATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SERVICE_WEBHOOK_CONFIGURATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_USER_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_USER_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_USER_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
	}

    /**
     * Create a new address configuration
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateConfigurationAddressResponse createConfigurationAddress(org.openapis.openapi.models.operations.CreateConfigurationAddressCreateConfigurationAddressRequest request, org.openapis.openapi.models.operations.CreateConfigurationAddressSecurity security) throws Exception {
        return this.createConfigurationAddress(request, security, null);
    }

    /**
     * Create a new address configuration
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateConfigurationAddressResponse createConfigurationAddress(org.openapis.openapi.models.operations.CreateConfigurationAddressCreateConfigurationAddressRequest request, org.openapis.openapi.models.operations.CreateConfigurationAddressSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_CONFIGURATION_ADDRESS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Configuration/Addresses");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateConfigurationAddressResponse res = new org.openapis.openapi.models.operations.CreateConfigurationAddressResponse() {{
            conversationsV1ConfigurationAddress = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConfigurationAddress out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConfigurationAddress.class);
                res.conversationsV1ConfigurationAddress = out;
            }
        }

        return res;
    }

    /**
     * Create a new conversation in your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateConversationResponse createConversation(org.openapis.openapi.models.operations.CreateConversationRequest request, org.openapis.openapi.models.operations.CreateConversationSecurity security) throws Exception {
        return this.createConversation(request, security, null);
    }

    /**
     * Create a new conversation in your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateConversationResponse createConversation(org.openapis.openapi.models.operations.CreateConversationRequest request, org.openapis.openapi.models.operations.CreateConversationSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_CONVERSATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Conversations");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateConversationResponse res = new org.openapis.openapi.models.operations.CreateConversationResponse() {{
            conversationsV1Conversation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1Conversation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1Conversation.class);
                res.conversationsV1Conversation = out;
            }
        }

        return res;
    }

    /**
     * Add a new message to the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateConversationMessageResponse createConversationMessage(org.openapis.openapi.models.operations.CreateConversationMessageRequest request, org.openapis.openapi.models.operations.CreateConversationMessageSecurity security) throws Exception {
        return this.createConversationMessage(request, security, null);
    }

    /**
     * Add a new message to the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateConversationMessageResponse createConversationMessage(org.openapis.openapi.models.operations.CreateConversationMessageRequest request, org.openapis.openapi.models.operations.CreateConversationMessageSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_CONVERSATION_MESSAGE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateConversationMessageRequest.class, baseUrl, "/v1/Conversations/{ConversationSid}/Messages", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateConversationMessageResponse res = new org.openapis.openapi.models.operations.CreateConversationMessageResponse() {{
            conversationsV1ConversationConversationMessage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConversationConversationMessage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConversationConversationMessage.class);
                res.conversationsV1ConversationConversationMessage = out;
            }
        }

        return res;
    }

    /**
     * Add a new participant to the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateConversationParticipantResponse createConversationParticipant(org.openapis.openapi.models.operations.CreateConversationParticipantRequest request, org.openapis.openapi.models.operations.CreateConversationParticipantSecurity security) throws Exception {
        return this.createConversationParticipant(request, security, null);
    }

    /**
     * Add a new participant to the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateConversationParticipantResponse createConversationParticipant(org.openapis.openapi.models.operations.CreateConversationParticipantRequest request, org.openapis.openapi.models.operations.CreateConversationParticipantSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateConversationParticipantRequest.class, baseUrl, "/v1/Conversations/{ConversationSid}/Participants", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateConversationParticipantResponse res = new org.openapis.openapi.models.operations.CreateConversationParticipantResponse() {{
            conversationsV1ConversationConversationParticipant = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConversationConversationParticipant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConversationConversationParticipant.class);
                res.conversationsV1ConversationConversationParticipant = out;
            }
        }

        return res;
    }

    /**
     * Create a new webhook scoped to the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateConversationScopedWebhookResponse createConversationScopedWebhook(org.openapis.openapi.models.operations.CreateConversationScopedWebhookRequest request, org.openapis.openapi.models.operations.CreateConversationScopedWebhookSecurity security) throws Exception {
        return this.createConversationScopedWebhook(request, security, null);
    }

    /**
     * Create a new webhook scoped to the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateConversationScopedWebhookResponse createConversationScopedWebhook(org.openapis.openapi.models.operations.CreateConversationScopedWebhookRequest request, org.openapis.openapi.models.operations.CreateConversationScopedWebhookSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateConversationScopedWebhookRequest.class, baseUrl, "/v1/Conversations/{ConversationSid}/Webhooks", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateConversationScopedWebhookResponse res = new org.openapis.openapi.models.operations.CreateConversationScopedWebhookResponse() {{
            conversationsV1ConversationConversationScopedWebhook = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConversationConversationScopedWebhook out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConversationConversationScopedWebhook.class);
                res.conversationsV1ConversationConversationScopedWebhook = out;
            }
        }

        return res;
    }

    /**
     * Add a new push notification credential to your account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateCredentialResponse createCredential(org.openapis.openapi.models.operations.CreateCredentialCreateCredentialRequest request, org.openapis.openapi.models.operations.CreateCredentialSecurity security) throws Exception {
        return this.createCredential(request, security, null);
    }

    /**
     * Add a new push notification credential to your account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateCredentialResponse createCredential(org.openapis.openapi.models.operations.CreateCredentialCreateCredentialRequest request, org.openapis.openapi.models.operations.CreateCredentialSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_CREDENTIAL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Credentials");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateCredentialResponse res = new org.openapis.openapi.models.operations.CreateCredentialResponse() {{
            conversationsV1Credential = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1Credential out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1Credential.class);
                res.conversationsV1Credential = out;
            }
        }

        return res;
    }

    /**
     * Create a new user role in your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateRoleResponse createRole(org.openapis.openapi.models.operations.CreateRoleCreateRoleRequest request, org.openapis.openapi.models.operations.CreateRoleSecurity security) throws Exception {
        return this.createRole(request, security, null);
    }

    /**
     * Create a new user role in your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateRoleResponse createRole(org.openapis.openapi.models.operations.CreateRoleCreateRoleRequest request, org.openapis.openapi.models.operations.CreateRoleSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_ROLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Roles");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateRoleResponse res = new org.openapis.openapi.models.operations.CreateRoleResponse() {{
            conversationsV1Role = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1Role out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1Role.class);
                res.conversationsV1Role = out;
            }
        }

        return res;
    }

    /**
     * Create a new conversation service on your account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateServiceResponse createService(org.openapis.openapi.models.operations.CreateServiceCreateServiceRequest request, org.openapis.openapi.models.operations.CreateServiceSecurity security) throws Exception {
        return this.createService(request, security, null);
    }

    /**
     * Create a new conversation service on your account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateServiceResponse createService(org.openapis.openapi.models.operations.CreateServiceCreateServiceRequest request, org.openapis.openapi.models.operations.CreateServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Services");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateServiceResponse res = new org.openapis.openapi.models.operations.CreateServiceResponse() {{
            conversationsV1Service = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1Service.class);
                res.conversationsV1Service = out;
            }
        }

        return res;
    }

    /**
     * Create a new conversation in your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateServiceConversationResponse createServiceConversation(org.openapis.openapi.models.operations.CreateServiceConversationRequest request, org.openapis.openapi.models.operations.CreateServiceConversationSecurity security) throws Exception {
        return this.createServiceConversation(request, security, null);
    }

    /**
     * Create a new conversation in your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateServiceConversationResponse createServiceConversation(org.openapis.openapi.models.operations.CreateServiceConversationRequest request, org.openapis.openapi.models.operations.CreateServiceConversationSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_SERVICE_CONVERSATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateServiceConversationRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateServiceConversationResponse res = new org.openapis.openapi.models.operations.CreateServiceConversationResponse() {{
            conversationsV1ServiceServiceConversation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversation.class);
                res.conversationsV1ServiceServiceConversation = out;
            }
        }

        return res;
    }

    /**
     * Add a new message to the conversation in a specific service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateServiceConversationMessageResponse createServiceConversationMessage(org.openapis.openapi.models.operations.CreateServiceConversationMessageRequest request, org.openapis.openapi.models.operations.CreateServiceConversationMessageSecurity security) throws Exception {
        return this.createServiceConversationMessage(request, security, null);
    }

    /**
     * Add a new message to the conversation in a specific service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateServiceConversationMessageResponse createServiceConversationMessage(org.openapis.openapi.models.operations.CreateServiceConversationMessageRequest request, org.openapis.openapi.models.operations.CreateServiceConversationMessageSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_SERVICE_CONVERSATION_MESSAGE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateServiceConversationMessageRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateServiceConversationMessageResponse res = new org.openapis.openapi.models.operations.CreateServiceConversationMessageResponse() {{
            conversationsV1ServiceServiceConversationServiceConversationMessage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationMessage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationMessage.class);
                res.conversationsV1ServiceServiceConversationServiceConversationMessage = out;
            }
        }

        return res;
    }

    /**
     * Add a new participant to the conversation in a specific service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateServiceConversationParticipantResponse createServiceConversationParticipant(org.openapis.openapi.models.operations.CreateServiceConversationParticipantRequest request, org.openapis.openapi.models.operations.CreateServiceConversationParticipantSecurity security) throws Exception {
        return this.createServiceConversationParticipant(request, security, null);
    }

    /**
     * Add a new participant to the conversation in a specific service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateServiceConversationParticipantResponse createServiceConversationParticipant(org.openapis.openapi.models.operations.CreateServiceConversationParticipantRequest request, org.openapis.openapi.models.operations.CreateServiceConversationParticipantSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_SERVICE_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateServiceConversationParticipantRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateServiceConversationParticipantResponse res = new org.openapis.openapi.models.operations.CreateServiceConversationParticipantResponse() {{
            conversationsV1ServiceServiceConversationServiceConversationParticipant = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationParticipant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationParticipant.class);
                res.conversationsV1ServiceServiceConversationServiceConversationParticipant = out;
            }
        }

        return res;
    }

    /**
     * Create a new webhook scoped to the conversation in a specific service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateServiceConversationScopedWebhookResponse createServiceConversationScopedWebhook(org.openapis.openapi.models.operations.CreateServiceConversationScopedWebhookRequest request, org.openapis.openapi.models.operations.CreateServiceConversationScopedWebhookSecurity security) throws Exception {
        return this.createServiceConversationScopedWebhook(request, security, null);
    }

    /**
     * Create a new webhook scoped to the conversation in a specific service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateServiceConversationScopedWebhookResponse createServiceConversationScopedWebhook(org.openapis.openapi.models.operations.CreateServiceConversationScopedWebhookRequest request, org.openapis.openapi.models.operations.CreateServiceConversationScopedWebhookSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateServiceConversationScopedWebhookRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateServiceConversationScopedWebhookResponse res = new org.openapis.openapi.models.operations.CreateServiceConversationScopedWebhookResponse() {{
            conversationsV1ServiceServiceConversationServiceConversationScopedWebhook = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook.class);
                res.conversationsV1ServiceServiceConversationServiceConversationScopedWebhook = out;
            }
        }

        return res;
    }

    /**
     * Create a new user role in your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateServiceRoleResponse createServiceRole(org.openapis.openapi.models.operations.CreateServiceRoleRequest request, org.openapis.openapi.models.operations.CreateServiceRoleSecurity security) throws Exception {
        return this.createServiceRole(request, security, null);
    }

    /**
     * Create a new user role in your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateServiceRoleResponse createServiceRole(org.openapis.openapi.models.operations.CreateServiceRoleRequest request, org.openapis.openapi.models.operations.CreateServiceRoleSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_SERVICE_ROLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateServiceRoleRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Roles", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateServiceRoleResponse res = new org.openapis.openapi.models.operations.CreateServiceRoleResponse() {{
            conversationsV1ServiceServiceRole = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceRole out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceRole.class);
                res.conversationsV1ServiceServiceRole = out;
            }
        }

        return res;
    }

    /**
     * Add a new conversation user to your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateServiceUserResponse createServiceUser(org.openapis.openapi.models.operations.CreateServiceUserRequest request, org.openapis.openapi.models.operations.CreateServiceUserSecurity security) throws Exception {
        return this.createServiceUser(request, security, null);
    }

    /**
     * Add a new conversation user to your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateServiceUserResponse createServiceUser(org.openapis.openapi.models.operations.CreateServiceUserRequest request, org.openapis.openapi.models.operations.CreateServiceUserSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_SERVICE_USER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateServiceUserRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Users", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateServiceUserResponse res = new org.openapis.openapi.models.operations.CreateServiceUserResponse() {{
            conversationsV1ServiceServiceUser = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceUser out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceUser.class);
                res.conversationsV1ServiceServiceUser = out;
            }
        }

        return res;
    }

    /**
     * Add a new conversation user to your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateUserResponse createUser(org.openapis.openapi.models.operations.CreateUserRequest request, org.openapis.openapi.models.operations.CreateUserSecurity security) throws Exception {
        return this.createUser(request, security, null);
    }

    /**
     * Add a new conversation user to your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateUserResponse createUser(org.openapis.openapi.models.operations.CreateUserRequest request, org.openapis.openapi.models.operations.CreateUserSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_USER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Users");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateUserResponse res = new org.openapis.openapi.models.operations.CreateUserResponse() {{
            conversationsV1User = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1User out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1User.class);
                res.conversationsV1User = out;
            }
        }

        return res;
    }

    /**
     * Remove an existing address configuration
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteConfigurationAddressResponse deleteConfigurationAddress(org.openapis.openapi.models.operations.DeleteConfigurationAddressRequest request, org.openapis.openapi.models.operations.DeleteConfigurationAddressSecurity security) throws Exception {
        return this.deleteConfigurationAddress(request, security, null);
    }

    /**
     * Remove an existing address configuration
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteConfigurationAddressResponse deleteConfigurationAddress(org.openapis.openapi.models.operations.DeleteConfigurationAddressRequest request, org.openapis.openapi.models.operations.DeleteConfigurationAddressSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_CONFIGURATION_ADDRESS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteConfigurationAddressRequest.class, baseUrl, "/v1/Configuration/Addresses/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteConfigurationAddressResponse res = new org.openapis.openapi.models.operations.DeleteConfigurationAddressResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove a conversation from your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteConversationResponse deleteConversation(org.openapis.openapi.models.operations.DeleteConversationRequest request, org.openapis.openapi.models.operations.DeleteConversationSecurity security) throws Exception {
        return this.deleteConversation(request, security, null);
    }

    /**
     * Remove a conversation from your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteConversationResponse deleteConversation(org.openapis.openapi.models.operations.DeleteConversationRequest request, org.openapis.openapi.models.operations.DeleteConversationSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_CONVERSATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteConversationRequest.class, baseUrl, "/v1/Conversations/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteConversationResponse res = new org.openapis.openapi.models.operations.DeleteConversationResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove a message from the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteConversationMessageResponse deleteConversationMessage(org.openapis.openapi.models.operations.DeleteConversationMessageRequest request, org.openapis.openapi.models.operations.DeleteConversationMessageSecurity security) throws Exception {
        return this.deleteConversationMessage(request, security, null);
    }

    /**
     * Remove a message from the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteConversationMessageResponse deleteConversationMessage(org.openapis.openapi.models.operations.DeleteConversationMessageRequest request, org.openapis.openapi.models.operations.DeleteConversationMessageSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_CONVERSATION_MESSAGE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteConversationMessageRequest.class, baseUrl, "/v1/Conversations/{ConversationSid}/Messages/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteConversationMessageResponse res = new org.openapis.openapi.models.operations.DeleteConversationMessageResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove a participant from the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteConversationParticipantResponse deleteConversationParticipant(org.openapis.openapi.models.operations.DeleteConversationParticipantRequest request, org.openapis.openapi.models.operations.DeleteConversationParticipantSecurity security) throws Exception {
        return this.deleteConversationParticipant(request, security, null);
    }

    /**
     * Remove a participant from the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteConversationParticipantResponse deleteConversationParticipant(org.openapis.openapi.models.operations.DeleteConversationParticipantRequest request, org.openapis.openapi.models.operations.DeleteConversationParticipantSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteConversationParticipantRequest.class, baseUrl, "/v1/Conversations/{ConversationSid}/Participants/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteConversationParticipantResponse res = new org.openapis.openapi.models.operations.DeleteConversationParticipantResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove an existing webhook scoped to the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteConversationScopedWebhookResponse deleteConversationScopedWebhook(org.openapis.openapi.models.operations.DeleteConversationScopedWebhookRequest request, org.openapis.openapi.models.operations.DeleteConversationScopedWebhookSecurity security) throws Exception {
        return this.deleteConversationScopedWebhook(request, security, null);
    }

    /**
     * Remove an existing webhook scoped to the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteConversationScopedWebhookResponse deleteConversationScopedWebhook(org.openapis.openapi.models.operations.DeleteConversationScopedWebhookRequest request, org.openapis.openapi.models.operations.DeleteConversationScopedWebhookSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteConversationScopedWebhookRequest.class, baseUrl, "/v1/Conversations/{ConversationSid}/Webhooks/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteConversationScopedWebhookResponse res = new org.openapis.openapi.models.operations.DeleteConversationScopedWebhookResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove a push notification credential from your account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteCredentialResponse deleteCredential(org.openapis.openapi.models.operations.DeleteCredentialRequest request, org.openapis.openapi.models.operations.DeleteCredentialSecurity security) throws Exception {
        return this.deleteCredential(request, security, null);
    }

    /**
     * Remove a push notification credential from your account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteCredentialResponse deleteCredential(org.openapis.openapi.models.operations.DeleteCredentialRequest request, org.openapis.openapi.models.operations.DeleteCredentialSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_CREDENTIAL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteCredentialRequest.class, baseUrl, "/v1/Credentials/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteCredentialResponse res = new org.openapis.openapi.models.operations.DeleteCredentialResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove a user role from your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRoleResponse deleteRole(org.openapis.openapi.models.operations.DeleteRoleRequest request, org.openapis.openapi.models.operations.DeleteRoleSecurity security) throws Exception {
        return this.deleteRole(request, security, null);
    }

    /**
     * Remove a user role from your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRoleResponse deleteRole(org.openapis.openapi.models.operations.DeleteRoleRequest request, org.openapis.openapi.models.operations.DeleteRoleSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_ROLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRoleRequest.class, baseUrl, "/v1/Roles/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRoleResponse res = new org.openapis.openapi.models.operations.DeleteRoleResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove a conversation service with all its nested resources from your account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceResponse deleteService(org.openapis.openapi.models.operations.DeleteServiceRequest request, org.openapis.openapi.models.operations.DeleteServiceSecurity security) throws Exception {
        return this.deleteService(request, security, null);
    }

    /**
     * Remove a conversation service with all its nested resources from your account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceResponse deleteService(org.openapis.openapi.models.operations.DeleteServiceRequest request, org.openapis.openapi.models.operations.DeleteServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteServiceRequest.class, baseUrl, "/v1/Services/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteServiceResponse res = new org.openapis.openapi.models.operations.DeleteServiceResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove a push notification binding from the conversation service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceBindingResponse deleteServiceBinding(org.openapis.openapi.models.operations.DeleteServiceBindingRequest request, org.openapis.openapi.models.operations.DeleteServiceBindingSecurity security) throws Exception {
        return this.deleteServiceBinding(request, security, null);
    }

    /**
     * Remove a push notification binding from the conversation service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceBindingResponse deleteServiceBinding(org.openapis.openapi.models.operations.DeleteServiceBindingRequest request, org.openapis.openapi.models.operations.DeleteServiceBindingSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SERVICE_BINDING_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteServiceBindingRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Bindings/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteServiceBindingResponse res = new org.openapis.openapi.models.operations.DeleteServiceBindingResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove a conversation from your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceConversationResponse deleteServiceConversation(org.openapis.openapi.models.operations.DeleteServiceConversationRequest request, org.openapis.openapi.models.operations.DeleteServiceConversationSecurity security) throws Exception {
        return this.deleteServiceConversation(request, security, null);
    }

    /**
     * Remove a conversation from your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceConversationResponse deleteServiceConversation(org.openapis.openapi.models.operations.DeleteServiceConversationRequest request, org.openapis.openapi.models.operations.DeleteServiceConversationSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SERVICE_CONVERSATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteServiceConversationRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteServiceConversationResponse res = new org.openapis.openapi.models.operations.DeleteServiceConversationResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove a message from the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceConversationMessageResponse deleteServiceConversationMessage(org.openapis.openapi.models.operations.DeleteServiceConversationMessageRequest request, org.openapis.openapi.models.operations.DeleteServiceConversationMessageSecurity security) throws Exception {
        return this.deleteServiceConversationMessage(request, security, null);
    }

    /**
     * Remove a message from the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceConversationMessageResponse deleteServiceConversationMessage(org.openapis.openapi.models.operations.DeleteServiceConversationMessageRequest request, org.openapis.openapi.models.operations.DeleteServiceConversationMessageSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SERVICE_CONVERSATION_MESSAGE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteServiceConversationMessageRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteServiceConversationMessageResponse res = new org.openapis.openapi.models.operations.DeleteServiceConversationMessageResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove a participant from the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceConversationParticipantResponse deleteServiceConversationParticipant(org.openapis.openapi.models.operations.DeleteServiceConversationParticipantRequest request, org.openapis.openapi.models.operations.DeleteServiceConversationParticipantSecurity security) throws Exception {
        return this.deleteServiceConversationParticipant(request, security, null);
    }

    /**
     * Remove a participant from the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceConversationParticipantResponse deleteServiceConversationParticipant(org.openapis.openapi.models.operations.DeleteServiceConversationParticipantRequest request, org.openapis.openapi.models.operations.DeleteServiceConversationParticipantSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SERVICE_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteServiceConversationParticipantRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteServiceConversationParticipantResponse res = new org.openapis.openapi.models.operations.DeleteServiceConversationParticipantResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove an existing webhook scoped to the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceConversationScopedWebhookResponse deleteServiceConversationScopedWebhook(org.openapis.openapi.models.operations.DeleteServiceConversationScopedWebhookRequest request, org.openapis.openapi.models.operations.DeleteServiceConversationScopedWebhookSecurity security) throws Exception {
        return this.deleteServiceConversationScopedWebhook(request, security, null);
    }

    /**
     * Remove an existing webhook scoped to the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceConversationScopedWebhookResponse deleteServiceConversationScopedWebhook(org.openapis.openapi.models.operations.DeleteServiceConversationScopedWebhookRequest request, org.openapis.openapi.models.operations.DeleteServiceConversationScopedWebhookSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteServiceConversationScopedWebhookRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteServiceConversationScopedWebhookResponse res = new org.openapis.openapi.models.operations.DeleteServiceConversationScopedWebhookResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove a user role from your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceRoleResponse deleteServiceRole(org.openapis.openapi.models.operations.DeleteServiceRoleRequest request, org.openapis.openapi.models.operations.DeleteServiceRoleSecurity security) throws Exception {
        return this.deleteServiceRole(request, security, null);
    }

    /**
     * Remove a user role from your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceRoleResponse deleteServiceRole(org.openapis.openapi.models.operations.DeleteServiceRoleRequest request, org.openapis.openapi.models.operations.DeleteServiceRoleSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SERVICE_ROLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteServiceRoleRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Roles/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteServiceRoleResponse res = new org.openapis.openapi.models.operations.DeleteServiceRoleResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove a conversation user from your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceUserResponse deleteServiceUser(org.openapis.openapi.models.operations.DeleteServiceUserRequest request, org.openapis.openapi.models.operations.DeleteServiceUserSecurity security) throws Exception {
        return this.deleteServiceUser(request, security, null);
    }

    /**
     * Remove a conversation user from your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceUserResponse deleteServiceUser(org.openapis.openapi.models.operations.DeleteServiceUserRequest request, org.openapis.openapi.models.operations.DeleteServiceUserSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SERVICE_USER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteServiceUserRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Users/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteServiceUserResponse res = new org.openapis.openapi.models.operations.DeleteServiceUserResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific User Conversation.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceUserConversationResponse deleteServiceUserConversation(org.openapis.openapi.models.operations.DeleteServiceUserConversationRequest request, org.openapis.openapi.models.operations.DeleteServiceUserConversationSecurity security) throws Exception {
        return this.deleteServiceUserConversation(request, security, null);
    }

    /**
     * Delete a specific User Conversation.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceUserConversationResponse deleteServiceUserConversation(org.openapis.openapi.models.operations.DeleteServiceUserConversationRequest request, org.openapis.openapi.models.operations.DeleteServiceUserConversationSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SERVICE_USER_CONVERSATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteServiceUserConversationRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Users/{UserSid}/Conversations/{ConversationSid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteServiceUserConversationResponse res = new org.openapis.openapi.models.operations.DeleteServiceUserConversationResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove a conversation user from your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteUserResponse deleteUser(org.openapis.openapi.models.operations.DeleteUserRequest request, org.openapis.openapi.models.operations.DeleteUserSecurity security) throws Exception {
        return this.deleteUser(request, security, null);
    }

    /**
     * Remove a conversation user from your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteUserResponse deleteUser(org.openapis.openapi.models.operations.DeleteUserRequest request, org.openapis.openapi.models.operations.DeleteUserSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_USER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteUserRequest.class, baseUrl, "/v1/Users/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteUserResponse res = new org.openapis.openapi.models.operations.DeleteUserResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific User Conversation.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteUserConversationResponse deleteUserConversation(org.openapis.openapi.models.operations.DeleteUserConversationRequest request, org.openapis.openapi.models.operations.DeleteUserConversationSecurity security) throws Exception {
        return this.deleteUserConversation(request, security, null);
    }

    /**
     * Delete a specific User Conversation.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteUserConversationResponse deleteUserConversation(org.openapis.openapi.models.operations.DeleteUserConversationRequest request, org.openapis.openapi.models.operations.DeleteUserConversationSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_USER_CONVERSATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteUserConversationRequest.class, baseUrl, "/v1/Users/{UserSid}/Conversations/{ConversationSid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteUserConversationResponse res = new org.openapis.openapi.models.operations.DeleteUserConversationResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Fetch the global configuration of conversations on your account
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchConfigurationResponse fetchConfiguration() throws Exception {
        return this.fetchConfiguration(null);
    }

    /**
     * Fetch the global configuration of conversations on your account
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchConfigurationResponse fetchConfiguration(String serverURL) throws Exception {
        String baseUrl = FETCH_CONFIGURATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Configuration");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchConfigurationResponse res = new org.openapis.openapi.models.operations.FetchConfigurationResponse() {{
            conversationsV1Configuration = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1Configuration out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1Configuration.class);
                res.conversationsV1Configuration = out;
            }
        }

        return res;
    }

    /**
     * Fetch an address configuration 
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchConfigurationAddressResponse fetchConfigurationAddress(org.openapis.openapi.models.operations.FetchConfigurationAddressRequest request, org.openapis.openapi.models.operations.FetchConfigurationAddressSecurity security) throws Exception {
        return this.fetchConfigurationAddress(request, security, null);
    }

    /**
     * Fetch an address configuration 
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchConfigurationAddressResponse fetchConfigurationAddress(org.openapis.openapi.models.operations.FetchConfigurationAddressRequest request, org.openapis.openapi.models.operations.FetchConfigurationAddressSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_CONFIGURATION_ADDRESS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchConfigurationAddressRequest.class, baseUrl, "/v1/Configuration/Addresses/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchConfigurationAddressResponse res = new org.openapis.openapi.models.operations.FetchConfigurationAddressResponse() {{
            conversationsV1ConfigurationAddress = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConfigurationAddress out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConfigurationAddress.class);
                res.conversationsV1ConfigurationAddress = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchConfigurationWebhookResponse fetchConfigurationWebhook() throws Exception {
        return this.fetchConfigurationWebhook(null);
    }

    public org.openapis.openapi.models.operations.FetchConfigurationWebhookResponse fetchConfigurationWebhook(String serverURL) throws Exception {
        String baseUrl = FETCH_CONFIGURATION_WEBHOOK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Configuration/Webhooks");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchConfigurationWebhookResponse res = new org.openapis.openapi.models.operations.FetchConfigurationWebhookResponse() {{
            conversationsV1ConfigurationConfigurationWebhook = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConfigurationConfigurationWebhook out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConfigurationConfigurationWebhook.class);
                res.conversationsV1ConfigurationConfigurationWebhook = out;
            }
        }

        return res;
    }

    /**
     * Fetch a conversation from your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchConversationResponse fetchConversation(org.openapis.openapi.models.operations.FetchConversationRequest request, org.openapis.openapi.models.operations.FetchConversationSecurity security) throws Exception {
        return this.fetchConversation(request, security, null);
    }

    /**
     * Fetch a conversation from your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchConversationResponse fetchConversation(org.openapis.openapi.models.operations.FetchConversationRequest request, org.openapis.openapi.models.operations.FetchConversationSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_CONVERSATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchConversationRequest.class, baseUrl, "/v1/Conversations/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchConversationResponse res = new org.openapis.openapi.models.operations.FetchConversationResponse() {{
            conversationsV1Conversation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1Conversation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1Conversation.class);
                res.conversationsV1Conversation = out;
            }
        }

        return res;
    }

    /**
     * Fetch a message from the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchConversationMessageResponse fetchConversationMessage(org.openapis.openapi.models.operations.FetchConversationMessageRequest request, org.openapis.openapi.models.operations.FetchConversationMessageSecurity security) throws Exception {
        return this.fetchConversationMessage(request, security, null);
    }

    /**
     * Fetch a message from the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchConversationMessageResponse fetchConversationMessage(org.openapis.openapi.models.operations.FetchConversationMessageRequest request, org.openapis.openapi.models.operations.FetchConversationMessageSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_CONVERSATION_MESSAGE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchConversationMessageRequest.class, baseUrl, "/v1/Conversations/{ConversationSid}/Messages/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchConversationMessageResponse res = new org.openapis.openapi.models.operations.FetchConversationMessageResponse() {{
            conversationsV1ConversationConversationMessage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConversationConversationMessage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConversationConversationMessage.class);
                res.conversationsV1ConversationConversationMessage = out;
            }
        }

        return res;
    }

    /**
     * Fetch the delivery and read receipts of the conversation message
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchConversationMessageReceiptResponse fetchConversationMessageReceipt(org.openapis.openapi.models.operations.FetchConversationMessageReceiptRequest request, org.openapis.openapi.models.operations.FetchConversationMessageReceiptSecurity security) throws Exception {
        return this.fetchConversationMessageReceipt(request, security, null);
    }

    /**
     * Fetch the delivery and read receipts of the conversation message
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchConversationMessageReceiptResponse fetchConversationMessageReceipt(org.openapis.openapi.models.operations.FetchConversationMessageReceiptRequest request, org.openapis.openapi.models.operations.FetchConversationMessageReceiptSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_CONVERSATION_MESSAGE_RECEIPT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchConversationMessageReceiptRequest.class, baseUrl, "/v1/Conversations/{ConversationSid}/Messages/{MessageSid}/Receipts/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchConversationMessageReceiptResponse res = new org.openapis.openapi.models.operations.FetchConversationMessageReceiptResponse() {{
            conversationsV1ConversationConversationMessageConversationMessageReceipt = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConversationConversationMessageConversationMessageReceipt out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConversationConversationMessageConversationMessageReceipt.class);
                res.conversationsV1ConversationConversationMessageConversationMessageReceipt = out;
            }
        }

        return res;
    }

    /**
     * Fetch a participant of the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchConversationParticipantResponse fetchConversationParticipant(org.openapis.openapi.models.operations.FetchConversationParticipantRequest request, org.openapis.openapi.models.operations.FetchConversationParticipantSecurity security) throws Exception {
        return this.fetchConversationParticipant(request, security, null);
    }

    /**
     * Fetch a participant of the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchConversationParticipantResponse fetchConversationParticipant(org.openapis.openapi.models.operations.FetchConversationParticipantRequest request, org.openapis.openapi.models.operations.FetchConversationParticipantSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchConversationParticipantRequest.class, baseUrl, "/v1/Conversations/{ConversationSid}/Participants/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchConversationParticipantResponse res = new org.openapis.openapi.models.operations.FetchConversationParticipantResponse() {{
            conversationsV1ConversationConversationParticipant = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConversationConversationParticipant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConversationConversationParticipant.class);
                res.conversationsV1ConversationConversationParticipant = out;
            }
        }

        return res;
    }

    /**
     * Fetch the configuration of a conversation-scoped webhook
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchConversationScopedWebhookResponse fetchConversationScopedWebhook(org.openapis.openapi.models.operations.FetchConversationScopedWebhookRequest request, org.openapis.openapi.models.operations.FetchConversationScopedWebhookSecurity security) throws Exception {
        return this.fetchConversationScopedWebhook(request, security, null);
    }

    /**
     * Fetch the configuration of a conversation-scoped webhook
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchConversationScopedWebhookResponse fetchConversationScopedWebhook(org.openapis.openapi.models.operations.FetchConversationScopedWebhookRequest request, org.openapis.openapi.models.operations.FetchConversationScopedWebhookSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchConversationScopedWebhookRequest.class, baseUrl, "/v1/Conversations/{ConversationSid}/Webhooks/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchConversationScopedWebhookResponse res = new org.openapis.openapi.models.operations.FetchConversationScopedWebhookResponse() {{
            conversationsV1ConversationConversationScopedWebhook = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConversationConversationScopedWebhook out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConversationConversationScopedWebhook.class);
                res.conversationsV1ConversationConversationScopedWebhook = out;
            }
        }

        return res;
    }

    /**
     * Fetch a push notification credential from your account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchCredentialResponse fetchCredential(org.openapis.openapi.models.operations.FetchCredentialRequest request, org.openapis.openapi.models.operations.FetchCredentialSecurity security) throws Exception {
        return this.fetchCredential(request, security, null);
    }

    /**
     * Fetch a push notification credential from your account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchCredentialResponse fetchCredential(org.openapis.openapi.models.operations.FetchCredentialRequest request, org.openapis.openapi.models.operations.FetchCredentialSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_CREDENTIAL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchCredentialRequest.class, baseUrl, "/v1/Credentials/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchCredentialResponse res = new org.openapis.openapi.models.operations.FetchCredentialResponse() {{
            conversationsV1Credential = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1Credential out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1Credential.class);
                res.conversationsV1Credential = out;
            }
        }

        return res;
    }

    /**
     * Fetch a user role from your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchRoleResponse fetchRole(org.openapis.openapi.models.operations.FetchRoleRequest request, org.openapis.openapi.models.operations.FetchRoleSecurity security) throws Exception {
        return this.fetchRole(request, security, null);
    }

    /**
     * Fetch a user role from your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchRoleResponse fetchRole(org.openapis.openapi.models.operations.FetchRoleRequest request, org.openapis.openapi.models.operations.FetchRoleSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_ROLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchRoleRequest.class, baseUrl, "/v1/Roles/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchRoleResponse res = new org.openapis.openapi.models.operations.FetchRoleResponse() {{
            conversationsV1Role = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1Role out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1Role.class);
                res.conversationsV1Role = out;
            }
        }

        return res;
    }

    /**
     * Fetch a conversation service from your account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceResponse fetchService(org.openapis.openapi.models.operations.FetchServiceRequest request, org.openapis.openapi.models.operations.FetchServiceSecurity security) throws Exception {
        return this.fetchService(request, security, null);
    }

    /**
     * Fetch a conversation service from your account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceResponse fetchService(org.openapis.openapi.models.operations.FetchServiceRequest request, org.openapis.openapi.models.operations.FetchServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceRequest.class, baseUrl, "/v1/Services/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceResponse res = new org.openapis.openapi.models.operations.FetchServiceResponse() {{
            conversationsV1Service = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1Service.class);
                res.conversationsV1Service = out;
            }
        }

        return res;
    }

    /**
     * Fetch a push notification binding from the conversation service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceBindingResponse fetchServiceBinding(org.openapis.openapi.models.operations.FetchServiceBindingRequest request, org.openapis.openapi.models.operations.FetchServiceBindingSecurity security) throws Exception {
        return this.fetchServiceBinding(request, security, null);
    }

    /**
     * Fetch a push notification binding from the conversation service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceBindingResponse fetchServiceBinding(org.openapis.openapi.models.operations.FetchServiceBindingRequest request, org.openapis.openapi.models.operations.FetchServiceBindingSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SERVICE_BINDING_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceBindingRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Bindings/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceBindingResponse res = new org.openapis.openapi.models.operations.FetchServiceBindingResponse() {{
            conversationsV1ServiceServiceBinding = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceBinding out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceBinding.class);
                res.conversationsV1ServiceServiceBinding = out;
            }
        }

        return res;
    }

    /**
     * Fetch the configuration of a conversation service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceConfigurationResponse fetchServiceConfiguration(org.openapis.openapi.models.operations.FetchServiceConfigurationRequest request, org.openapis.openapi.models.operations.FetchServiceConfigurationSecurity security) throws Exception {
        return this.fetchServiceConfiguration(request, security, null);
    }

    /**
     * Fetch the configuration of a conversation service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceConfigurationResponse fetchServiceConfiguration(org.openapis.openapi.models.operations.FetchServiceConfigurationRequest request, org.openapis.openapi.models.operations.FetchServiceConfigurationSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SERVICE_CONFIGURATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceConfigurationRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Configuration", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceConfigurationResponse res = new org.openapis.openapi.models.operations.FetchServiceConfigurationResponse() {{
            conversationsV1ServiceServiceConfiguration = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConfiguration out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConfiguration.class);
                res.conversationsV1ServiceServiceConfiguration = out;
            }
        }

        return res;
    }

    /**
     * Fetch a conversation from your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceConversationResponse fetchServiceConversation(org.openapis.openapi.models.operations.FetchServiceConversationRequest request, org.openapis.openapi.models.operations.FetchServiceConversationSecurity security) throws Exception {
        return this.fetchServiceConversation(request, security, null);
    }

    /**
     * Fetch a conversation from your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceConversationResponse fetchServiceConversation(org.openapis.openapi.models.operations.FetchServiceConversationRequest request, org.openapis.openapi.models.operations.FetchServiceConversationSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SERVICE_CONVERSATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceConversationRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceConversationResponse res = new org.openapis.openapi.models.operations.FetchServiceConversationResponse() {{
            conversationsV1ServiceServiceConversation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversation.class);
                res.conversationsV1ServiceServiceConversation = out;
            }
        }

        return res;
    }

    /**
     * Fetch a message from the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceConversationMessageResponse fetchServiceConversationMessage(org.openapis.openapi.models.operations.FetchServiceConversationMessageRequest request, org.openapis.openapi.models.operations.FetchServiceConversationMessageSecurity security) throws Exception {
        return this.fetchServiceConversationMessage(request, security, null);
    }

    /**
     * Fetch a message from the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceConversationMessageResponse fetchServiceConversationMessage(org.openapis.openapi.models.operations.FetchServiceConversationMessageRequest request, org.openapis.openapi.models.operations.FetchServiceConversationMessageSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SERVICE_CONVERSATION_MESSAGE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceConversationMessageRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceConversationMessageResponse res = new org.openapis.openapi.models.operations.FetchServiceConversationMessageResponse() {{
            conversationsV1ServiceServiceConversationServiceConversationMessage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationMessage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationMessage.class);
                res.conversationsV1ServiceServiceConversationServiceConversationMessage = out;
            }
        }

        return res;
    }

    /**
     * Fetch the delivery and read receipts of the conversation message
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceConversationMessageReceiptResponse fetchServiceConversationMessageReceipt(org.openapis.openapi.models.operations.FetchServiceConversationMessageReceiptRequest request, org.openapis.openapi.models.operations.FetchServiceConversationMessageReceiptSecurity security) throws Exception {
        return this.fetchServiceConversationMessageReceipt(request, security, null);
    }

    /**
     * Fetch the delivery and read receipts of the conversation message
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceConversationMessageReceiptResponse fetchServiceConversationMessageReceipt(org.openapis.openapi.models.operations.FetchServiceConversationMessageReceiptRequest request, org.openapis.openapi.models.operations.FetchServiceConversationMessageReceiptSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SERVICE_CONVERSATION_MESSAGE_RECEIPT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceConversationMessageReceiptRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{MessageSid}/Receipts/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceConversationMessageReceiptResponse res = new org.openapis.openapi.models.operations.FetchServiceConversationMessageReceiptResponse() {{
            conversationsV1ServiceServiceConversationServiceConversationMessageServiceConversationMessageReceipt = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationMessageServiceConversationMessageReceipt out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationMessageServiceConversationMessageReceipt.class);
                res.conversationsV1ServiceServiceConversationServiceConversationMessageServiceConversationMessageReceipt = out;
            }
        }

        return res;
    }

    /**
     * Fetch a participant of the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceConversationParticipantResponse fetchServiceConversationParticipant(org.openapis.openapi.models.operations.FetchServiceConversationParticipantRequest request, org.openapis.openapi.models.operations.FetchServiceConversationParticipantSecurity security) throws Exception {
        return this.fetchServiceConversationParticipant(request, security, null);
    }

    /**
     * Fetch a participant of the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceConversationParticipantResponse fetchServiceConversationParticipant(org.openapis.openapi.models.operations.FetchServiceConversationParticipantRequest request, org.openapis.openapi.models.operations.FetchServiceConversationParticipantSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SERVICE_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceConversationParticipantRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceConversationParticipantResponse res = new org.openapis.openapi.models.operations.FetchServiceConversationParticipantResponse() {{
            conversationsV1ServiceServiceConversationServiceConversationParticipant = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationParticipant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationParticipant.class);
                res.conversationsV1ServiceServiceConversationServiceConversationParticipant = out;
            }
        }

        return res;
    }

    /**
     * Fetch the configuration of a conversation-scoped webhook
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceConversationScopedWebhookResponse fetchServiceConversationScopedWebhook(org.openapis.openapi.models.operations.FetchServiceConversationScopedWebhookRequest request, org.openapis.openapi.models.operations.FetchServiceConversationScopedWebhookSecurity security) throws Exception {
        return this.fetchServiceConversationScopedWebhook(request, security, null);
    }

    /**
     * Fetch the configuration of a conversation-scoped webhook
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceConversationScopedWebhookResponse fetchServiceConversationScopedWebhook(org.openapis.openapi.models.operations.FetchServiceConversationScopedWebhookRequest request, org.openapis.openapi.models.operations.FetchServiceConversationScopedWebhookSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceConversationScopedWebhookRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceConversationScopedWebhookResponse res = new org.openapis.openapi.models.operations.FetchServiceConversationScopedWebhookResponse() {{
            conversationsV1ServiceServiceConversationServiceConversationScopedWebhook = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook.class);
                res.conversationsV1ServiceServiceConversationServiceConversationScopedWebhook = out;
            }
        }

        return res;
    }

    /**
     * Fetch push notification service settings
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceNotificationResponse fetchServiceNotification(org.openapis.openapi.models.operations.FetchServiceNotificationRequest request, org.openapis.openapi.models.operations.FetchServiceNotificationSecurity security) throws Exception {
        return this.fetchServiceNotification(request, security, null);
    }

    /**
     * Fetch push notification service settings
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceNotificationResponse fetchServiceNotification(org.openapis.openapi.models.operations.FetchServiceNotificationRequest request, org.openapis.openapi.models.operations.FetchServiceNotificationSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SERVICE_NOTIFICATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceNotificationRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Configuration/Notifications", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceNotificationResponse res = new org.openapis.openapi.models.operations.FetchServiceNotificationResponse() {{
            conversationsV1ServiceServiceConfigurationServiceNotification = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConfigurationServiceNotification out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConfigurationServiceNotification.class);
                res.conversationsV1ServiceServiceConfigurationServiceNotification = out;
            }
        }

        return res;
    }

    /**
     * Fetch a user role from your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceRoleResponse fetchServiceRole(org.openapis.openapi.models.operations.FetchServiceRoleRequest request, org.openapis.openapi.models.operations.FetchServiceRoleSecurity security) throws Exception {
        return this.fetchServiceRole(request, security, null);
    }

    /**
     * Fetch a user role from your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceRoleResponse fetchServiceRole(org.openapis.openapi.models.operations.FetchServiceRoleRequest request, org.openapis.openapi.models.operations.FetchServiceRoleSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SERVICE_ROLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceRoleRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Roles/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceRoleResponse res = new org.openapis.openapi.models.operations.FetchServiceRoleResponse() {{
            conversationsV1ServiceServiceRole = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceRole out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceRole.class);
                res.conversationsV1ServiceServiceRole = out;
            }
        }

        return res;
    }

    /**
     * Fetch a conversation user from your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceUserResponse fetchServiceUser(org.openapis.openapi.models.operations.FetchServiceUserRequest request, org.openapis.openapi.models.operations.FetchServiceUserSecurity security) throws Exception {
        return this.fetchServiceUser(request, security, null);
    }

    /**
     * Fetch a conversation user from your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceUserResponse fetchServiceUser(org.openapis.openapi.models.operations.FetchServiceUserRequest request, org.openapis.openapi.models.operations.FetchServiceUserSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SERVICE_USER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceUserRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Users/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceUserResponse res = new org.openapis.openapi.models.operations.FetchServiceUserResponse() {{
            conversationsV1ServiceServiceUser = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceUser out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceUser.class);
                res.conversationsV1ServiceServiceUser = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific User Conversation.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceUserConversationResponse fetchServiceUserConversation(org.openapis.openapi.models.operations.FetchServiceUserConversationRequest request, org.openapis.openapi.models.operations.FetchServiceUserConversationSecurity security) throws Exception {
        return this.fetchServiceUserConversation(request, security, null);
    }

    /**
     * Fetch a specific User Conversation.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceUserConversationResponse fetchServiceUserConversation(org.openapis.openapi.models.operations.FetchServiceUserConversationRequest request, org.openapis.openapi.models.operations.FetchServiceUserConversationSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SERVICE_USER_CONVERSATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceUserConversationRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Users/{UserSid}/Conversations/{ConversationSid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceUserConversationResponse res = new org.openapis.openapi.models.operations.FetchServiceUserConversationResponse() {{
            conversationsV1ServiceServiceUserServiceUserConversation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceUserServiceUserConversation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceUserServiceUserConversation.class);
                res.conversationsV1ServiceServiceUserServiceUserConversation = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific service webhook configuration.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceWebhookConfigurationResponse fetchServiceWebhookConfiguration(org.openapis.openapi.models.operations.FetchServiceWebhookConfigurationRequest request, org.openapis.openapi.models.operations.FetchServiceWebhookConfigurationSecurity security) throws Exception {
        return this.fetchServiceWebhookConfiguration(request, security, null);
    }

    /**
     * Fetch a specific service webhook configuration.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceWebhookConfigurationResponse fetchServiceWebhookConfiguration(org.openapis.openapi.models.operations.FetchServiceWebhookConfigurationRequest request, org.openapis.openapi.models.operations.FetchServiceWebhookConfigurationSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SERVICE_WEBHOOK_CONFIGURATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceWebhookConfigurationRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Configuration/Webhooks", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceWebhookConfigurationResponse res = new org.openapis.openapi.models.operations.FetchServiceWebhookConfigurationResponse() {{
            conversationsV1ServiceServiceConfigurationServiceWebhookConfiguration = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration.class);
                res.conversationsV1ServiceServiceConfigurationServiceWebhookConfiguration = out;
            }
        }

        return res;
    }

    /**
     * Fetch a conversation user from your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchUserResponse fetchUser(org.openapis.openapi.models.operations.FetchUserRequest request, org.openapis.openapi.models.operations.FetchUserSecurity security) throws Exception {
        return this.fetchUser(request, security, null);
    }

    /**
     * Fetch a conversation user from your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchUserResponse fetchUser(org.openapis.openapi.models.operations.FetchUserRequest request, org.openapis.openapi.models.operations.FetchUserSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_USER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchUserRequest.class, baseUrl, "/v1/Users/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchUserResponse res = new org.openapis.openapi.models.operations.FetchUserResponse() {{
            conversationsV1User = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1User out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1User.class);
                res.conversationsV1User = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific User Conversation.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchUserConversationResponse fetchUserConversation(org.openapis.openapi.models.operations.FetchUserConversationRequest request, org.openapis.openapi.models.operations.FetchUserConversationSecurity security) throws Exception {
        return this.fetchUserConversation(request, security, null);
    }

    /**
     * Fetch a specific User Conversation.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchUserConversationResponse fetchUserConversation(org.openapis.openapi.models.operations.FetchUserConversationRequest request, org.openapis.openapi.models.operations.FetchUserConversationSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_USER_CONVERSATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchUserConversationRequest.class, baseUrl, "/v1/Users/{UserSid}/Conversations/{ConversationSid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchUserConversationResponse res = new org.openapis.openapi.models.operations.FetchUserConversationResponse() {{
            conversationsV1UserUserConversation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1UserUserConversation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1UserUserConversation.class);
                res.conversationsV1UserUserConversation = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of address configurations for an account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListConfigurationAddressResponse listConfigurationAddress(org.openapis.openapi.models.operations.ListConfigurationAddressRequest request, org.openapis.openapi.models.operations.ListConfigurationAddressSecurity security) throws Exception {
        return this.listConfigurationAddress(request, security, null);
    }

    /**
     * Retrieve a list of address configurations for an account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListConfigurationAddressResponse listConfigurationAddress(org.openapis.openapi.models.operations.ListConfigurationAddressRequest request, org.openapis.openapi.models.operations.ListConfigurationAddressSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_CONFIGURATION_ADDRESS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Configuration/Addresses");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListConfigurationAddressRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListConfigurationAddressResponse res = new org.openapis.openapi.models.operations.ListConfigurationAddressResponse() {{
            listConfigurationAddressResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListConfigurationAddressListConfigurationAddressResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListConfigurationAddressListConfigurationAddressResponse.class);
                res.listConfigurationAddressResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of conversations in your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListConversationResponse listConversation(org.openapis.openapi.models.operations.ListConversationRequest request, org.openapis.openapi.models.operations.ListConversationSecurity security) throws Exception {
        return this.listConversation(request, security, null);
    }

    /**
     * Retrieve a list of conversations in your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListConversationResponse listConversation(org.openapis.openapi.models.operations.ListConversationRequest request, org.openapis.openapi.models.operations.ListConversationSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_CONVERSATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Conversations");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListConversationRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListConversationResponse res = new org.openapis.openapi.models.operations.ListConversationResponse() {{
            listConversationResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListConversationListConversationResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListConversationListConversationResponse.class);
                res.listConversationResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all messages in the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListConversationMessageResponse listConversationMessage(org.openapis.openapi.models.operations.ListConversationMessageRequest request, org.openapis.openapi.models.operations.ListConversationMessageSecurity security) throws Exception {
        return this.listConversationMessage(request, security, null);
    }

    /**
     * Retrieve a list of all messages in the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListConversationMessageResponse listConversationMessage(org.openapis.openapi.models.operations.ListConversationMessageRequest request, org.openapis.openapi.models.operations.ListConversationMessageSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_CONVERSATION_MESSAGE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListConversationMessageRequest.class, baseUrl, "/v1/Conversations/{ConversationSid}/Messages", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListConversationMessageRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListConversationMessageResponse res = new org.openapis.openapi.models.operations.ListConversationMessageResponse() {{
            listConversationMessageResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListConversationMessageListConversationMessageResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListConversationMessageListConversationMessageResponse.class);
                res.listConversationMessageResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all delivery and read receipts of the conversation message
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListConversationMessageReceiptResponse listConversationMessageReceipt(org.openapis.openapi.models.operations.ListConversationMessageReceiptRequest request, org.openapis.openapi.models.operations.ListConversationMessageReceiptSecurity security) throws Exception {
        return this.listConversationMessageReceipt(request, security, null);
    }

    /**
     * Retrieve a list of all delivery and read receipts of the conversation message
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListConversationMessageReceiptResponse listConversationMessageReceipt(org.openapis.openapi.models.operations.ListConversationMessageReceiptRequest request, org.openapis.openapi.models.operations.ListConversationMessageReceiptSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_CONVERSATION_MESSAGE_RECEIPT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListConversationMessageReceiptRequest.class, baseUrl, "/v1/Conversations/{ConversationSid}/Messages/{MessageSid}/Receipts", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListConversationMessageReceiptRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListConversationMessageReceiptResponse res = new org.openapis.openapi.models.operations.ListConversationMessageReceiptResponse() {{
            listConversationMessageReceiptResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListConversationMessageReceiptListConversationMessageReceiptResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListConversationMessageReceiptListConversationMessageReceiptResponse.class);
                res.listConversationMessageReceiptResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all participants of the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListConversationParticipantResponse listConversationParticipant(org.openapis.openapi.models.operations.ListConversationParticipantRequest request, org.openapis.openapi.models.operations.ListConversationParticipantSecurity security) throws Exception {
        return this.listConversationParticipant(request, security, null);
    }

    /**
     * Retrieve a list of all participants of the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListConversationParticipantResponse listConversationParticipant(org.openapis.openapi.models.operations.ListConversationParticipantRequest request, org.openapis.openapi.models.operations.ListConversationParticipantSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListConversationParticipantRequest.class, baseUrl, "/v1/Conversations/{ConversationSid}/Participants", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListConversationParticipantRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListConversationParticipantResponse res = new org.openapis.openapi.models.operations.ListConversationParticipantResponse() {{
            listConversationParticipantResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListConversationParticipantListConversationParticipantResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListConversationParticipantListConversationParticipantResponse.class);
                res.listConversationParticipantResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all webhooks scoped to the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListConversationScopedWebhookResponse listConversationScopedWebhook(org.openapis.openapi.models.operations.ListConversationScopedWebhookRequest request, org.openapis.openapi.models.operations.ListConversationScopedWebhookSecurity security) throws Exception {
        return this.listConversationScopedWebhook(request, security, null);
    }

    /**
     * Retrieve a list of all webhooks scoped to the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListConversationScopedWebhookResponse listConversationScopedWebhook(org.openapis.openapi.models.operations.ListConversationScopedWebhookRequest request, org.openapis.openapi.models.operations.ListConversationScopedWebhookSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListConversationScopedWebhookRequest.class, baseUrl, "/v1/Conversations/{ConversationSid}/Webhooks", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListConversationScopedWebhookRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListConversationScopedWebhookResponse res = new org.openapis.openapi.models.operations.ListConversationScopedWebhookResponse() {{
            listConversationScopedWebhookResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListConversationScopedWebhookListConversationScopedWebhookResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListConversationScopedWebhookListConversationScopedWebhookResponse.class);
                res.listConversationScopedWebhookResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all push notification credentials on your account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListCredentialResponse listCredential(org.openapis.openapi.models.operations.ListCredentialRequest request, org.openapis.openapi.models.operations.ListCredentialSecurity security) throws Exception {
        return this.listCredential(request, security, null);
    }

    /**
     * Retrieve a list of all push notification credentials on your account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListCredentialResponse listCredential(org.openapis.openapi.models.operations.ListCredentialRequest request, org.openapis.openapi.models.operations.ListCredentialSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_CREDENTIAL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Credentials");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListCredentialRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListCredentialResponse res = new org.openapis.openapi.models.operations.ListCredentialResponse() {{
            listCredentialResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListCredentialListCredentialResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListCredentialListCredentialResponse.class);
                res.listCredentialResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Conversations that this Participant belongs to by identity or by address. Only one parameter should be specified.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListParticipantConversationResponse listParticipantConversation(org.openapis.openapi.models.operations.ListParticipantConversationRequest request, org.openapis.openapi.models.operations.ListParticipantConversationSecurity security) throws Exception {
        return this.listParticipantConversation(request, security, null);
    }

    /**
     * Retrieve a list of all Conversations that this Participant belongs to by identity or by address. Only one parameter should be specified.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListParticipantConversationResponse listParticipantConversation(org.openapis.openapi.models.operations.ListParticipantConversationRequest request, org.openapis.openapi.models.operations.ListParticipantConversationSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_PARTICIPANT_CONVERSATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/ParticipantConversations");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListParticipantConversationRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListParticipantConversationResponse res = new org.openapis.openapi.models.operations.ListParticipantConversationResponse() {{
            listParticipantConversationResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListParticipantConversationListParticipantConversationResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListParticipantConversationListParticipantConversationResponse.class);
                res.listParticipantConversationResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all user roles in your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListRoleResponse listRole(org.openapis.openapi.models.operations.ListRoleRequest request, org.openapis.openapi.models.operations.ListRoleSecurity security) throws Exception {
        return this.listRole(request, security, null);
    }

    /**
     * Retrieve a list of all user roles in your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListRoleResponse listRole(org.openapis.openapi.models.operations.ListRoleRequest request, org.openapis.openapi.models.operations.ListRoleSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_ROLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Roles");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListRoleRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListRoleResponse res = new org.openapis.openapi.models.operations.ListRoleResponse() {{
            listRoleResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListRoleListRoleResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListRoleListRoleResponse.class);
                res.listRoleResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all conversation services on your account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceResponse listService(org.openapis.openapi.models.operations.ListServiceRequest request, org.openapis.openapi.models.operations.ListServiceSecurity security) throws Exception {
        return this.listService(request, security, null);
    }

    /**
     * Retrieve a list of all conversation services on your account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceResponse listService(org.openapis.openapi.models.operations.ListServiceRequest request, org.openapis.openapi.models.operations.ListServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Services");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceResponse res = new org.openapis.openapi.models.operations.ListServiceResponse() {{
            listServiceResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceListServiceResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceListServiceResponse.class);
                res.listServiceResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all push notification bindings in the conversation service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceBindingResponse listServiceBinding(org.openapis.openapi.models.operations.ListServiceBindingRequest request, org.openapis.openapi.models.operations.ListServiceBindingSecurity security) throws Exception {
        return this.listServiceBinding(request, security, null);
    }

    /**
     * Retrieve a list of all push notification bindings in the conversation service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceBindingResponse listServiceBinding(org.openapis.openapi.models.operations.ListServiceBindingRequest request, org.openapis.openapi.models.operations.ListServiceBindingSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SERVICE_BINDING_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListServiceBindingRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Bindings", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceBindingRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceBindingResponse res = new org.openapis.openapi.models.operations.ListServiceBindingResponse() {{
            listServiceBindingResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceBindingListServiceBindingResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceBindingListServiceBindingResponse.class);
                res.listServiceBindingResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of conversations in your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceConversationResponse listServiceConversation(org.openapis.openapi.models.operations.ListServiceConversationRequest request, org.openapis.openapi.models.operations.ListServiceConversationSecurity security) throws Exception {
        return this.listServiceConversation(request, security, null);
    }

    /**
     * Retrieve a list of conversations in your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceConversationResponse listServiceConversation(org.openapis.openapi.models.operations.ListServiceConversationRequest request, org.openapis.openapi.models.operations.ListServiceConversationSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SERVICE_CONVERSATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListServiceConversationRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceConversationRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceConversationResponse res = new org.openapis.openapi.models.operations.ListServiceConversationResponse() {{
            listServiceConversationResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceConversationListServiceConversationResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceConversationListServiceConversationResponse.class);
                res.listServiceConversationResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all messages in the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceConversationMessageResponse listServiceConversationMessage(org.openapis.openapi.models.operations.ListServiceConversationMessageRequest request, org.openapis.openapi.models.operations.ListServiceConversationMessageSecurity security) throws Exception {
        return this.listServiceConversationMessage(request, security, null);
    }

    /**
     * Retrieve a list of all messages in the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceConversationMessageResponse listServiceConversationMessage(org.openapis.openapi.models.operations.ListServiceConversationMessageRequest request, org.openapis.openapi.models.operations.ListServiceConversationMessageSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SERVICE_CONVERSATION_MESSAGE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListServiceConversationMessageRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceConversationMessageRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceConversationMessageResponse res = new org.openapis.openapi.models.operations.ListServiceConversationMessageResponse() {{
            listServiceConversationMessageResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceConversationMessageListServiceConversationMessageResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceConversationMessageListServiceConversationMessageResponse.class);
                res.listServiceConversationMessageResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all delivery and read receipts of the conversation message
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceConversationMessageReceiptResponse listServiceConversationMessageReceipt(org.openapis.openapi.models.operations.ListServiceConversationMessageReceiptRequest request, org.openapis.openapi.models.operations.ListServiceConversationMessageReceiptSecurity security) throws Exception {
        return this.listServiceConversationMessageReceipt(request, security, null);
    }

    /**
     * Retrieve a list of all delivery and read receipts of the conversation message
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceConversationMessageReceiptResponse listServiceConversationMessageReceipt(org.openapis.openapi.models.operations.ListServiceConversationMessageReceiptRequest request, org.openapis.openapi.models.operations.ListServiceConversationMessageReceiptSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SERVICE_CONVERSATION_MESSAGE_RECEIPT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListServiceConversationMessageReceiptRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{MessageSid}/Receipts", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceConversationMessageReceiptRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceConversationMessageReceiptResponse res = new org.openapis.openapi.models.operations.ListServiceConversationMessageReceiptResponse() {{
            listServiceConversationMessageReceiptResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceConversationMessageReceiptListServiceConversationMessageReceiptResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceConversationMessageReceiptListServiceConversationMessageReceiptResponse.class);
                res.listServiceConversationMessageReceiptResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all participants of the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceConversationParticipantResponse listServiceConversationParticipant(org.openapis.openapi.models.operations.ListServiceConversationParticipantRequest request, org.openapis.openapi.models.operations.ListServiceConversationParticipantSecurity security) throws Exception {
        return this.listServiceConversationParticipant(request, security, null);
    }

    /**
     * Retrieve a list of all participants of the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceConversationParticipantResponse listServiceConversationParticipant(org.openapis.openapi.models.operations.ListServiceConversationParticipantRequest request, org.openapis.openapi.models.operations.ListServiceConversationParticipantSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SERVICE_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListServiceConversationParticipantRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceConversationParticipantRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceConversationParticipantResponse res = new org.openapis.openapi.models.operations.ListServiceConversationParticipantResponse() {{
            listServiceConversationParticipantResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceConversationParticipantListServiceConversationParticipantResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceConversationParticipantListServiceConversationParticipantResponse.class);
                res.listServiceConversationParticipantResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all webhooks scoped to the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceConversationScopedWebhookResponse listServiceConversationScopedWebhook(org.openapis.openapi.models.operations.ListServiceConversationScopedWebhookRequest request, org.openapis.openapi.models.operations.ListServiceConversationScopedWebhookSecurity security) throws Exception {
        return this.listServiceConversationScopedWebhook(request, security, null);
    }

    /**
     * Retrieve a list of all webhooks scoped to the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceConversationScopedWebhookResponse listServiceConversationScopedWebhook(org.openapis.openapi.models.operations.ListServiceConversationScopedWebhookRequest request, org.openapis.openapi.models.operations.ListServiceConversationScopedWebhookSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListServiceConversationScopedWebhookRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceConversationScopedWebhookRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceConversationScopedWebhookResponse res = new org.openapis.openapi.models.operations.ListServiceConversationScopedWebhookResponse() {{
            listServiceConversationScopedWebhookResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceConversationScopedWebhookListServiceConversationScopedWebhookResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceConversationScopedWebhookListServiceConversationScopedWebhookResponse.class);
                res.listServiceConversationScopedWebhookResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Conversations that this Participant belongs to by identity or by address. Only one parameter should be specified.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceParticipantConversationResponse listServiceParticipantConversation(org.openapis.openapi.models.operations.ListServiceParticipantConversationRequest request, org.openapis.openapi.models.operations.ListServiceParticipantConversationSecurity security) throws Exception {
        return this.listServiceParticipantConversation(request, security, null);
    }

    /**
     * Retrieve a list of all Conversations that this Participant belongs to by identity or by address. Only one parameter should be specified.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceParticipantConversationResponse listServiceParticipantConversation(org.openapis.openapi.models.operations.ListServiceParticipantConversationRequest request, org.openapis.openapi.models.operations.ListServiceParticipantConversationSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SERVICE_PARTICIPANT_CONVERSATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListServiceParticipantConversationRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/ParticipantConversations", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceParticipantConversationRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceParticipantConversationResponse res = new org.openapis.openapi.models.operations.ListServiceParticipantConversationResponse() {{
            listServiceParticipantConversationResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceParticipantConversationListServiceParticipantConversationResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceParticipantConversationListServiceParticipantConversationResponse.class);
                res.listServiceParticipantConversationResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all user roles in your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceRoleResponse listServiceRole(org.openapis.openapi.models.operations.ListServiceRoleRequest request, org.openapis.openapi.models.operations.ListServiceRoleSecurity security) throws Exception {
        return this.listServiceRole(request, security, null);
    }

    /**
     * Retrieve a list of all user roles in your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceRoleResponse listServiceRole(org.openapis.openapi.models.operations.ListServiceRoleRequest request, org.openapis.openapi.models.operations.ListServiceRoleSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SERVICE_ROLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListServiceRoleRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Roles", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceRoleRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceRoleResponse res = new org.openapis.openapi.models.operations.ListServiceRoleResponse() {{
            listServiceRoleResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceRoleListServiceRoleResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceRoleListServiceRoleResponse.class);
                res.listServiceRoleResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all conversation users in your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceUserResponse listServiceUser(org.openapis.openapi.models.operations.ListServiceUserRequest request, org.openapis.openapi.models.operations.ListServiceUserSecurity security) throws Exception {
        return this.listServiceUser(request, security, null);
    }

    /**
     * Retrieve a list of all conversation users in your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceUserResponse listServiceUser(org.openapis.openapi.models.operations.ListServiceUserRequest request, org.openapis.openapi.models.operations.ListServiceUserSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SERVICE_USER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListServiceUserRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Users", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceUserRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceUserResponse res = new org.openapis.openapi.models.operations.ListServiceUserResponse() {{
            listServiceUserResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceUserListServiceUserResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceUserListServiceUserResponse.class);
                res.listServiceUserResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all User Conversations for the User.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceUserConversationResponse listServiceUserConversation(org.openapis.openapi.models.operations.ListServiceUserConversationRequest request, org.openapis.openapi.models.operations.ListServiceUserConversationSecurity security) throws Exception {
        return this.listServiceUserConversation(request, security, null);
    }

    /**
     * Retrieve a list of all User Conversations for the User.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceUserConversationResponse listServiceUserConversation(org.openapis.openapi.models.operations.ListServiceUserConversationRequest request, org.openapis.openapi.models.operations.ListServiceUserConversationSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SERVICE_USER_CONVERSATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListServiceUserConversationRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Users/{UserSid}/Conversations", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceUserConversationRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceUserConversationResponse res = new org.openapis.openapi.models.operations.ListServiceUserConversationResponse() {{
            listServiceUserConversationResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceUserConversationListServiceUserConversationResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceUserConversationListServiceUserConversationResponse.class);
                res.listServiceUserConversationResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all conversation users in your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListUserResponse listUser(org.openapis.openapi.models.operations.ListUserRequest request, org.openapis.openapi.models.operations.ListUserSecurity security) throws Exception {
        return this.listUser(request, security, null);
    }

    /**
     * Retrieve a list of all conversation users in your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListUserResponse listUser(org.openapis.openapi.models.operations.ListUserRequest request, org.openapis.openapi.models.operations.ListUserSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_USER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Users");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListUserRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListUserResponse res = new org.openapis.openapi.models.operations.ListUserResponse() {{
            listUserResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListUserListUserResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListUserListUserResponse.class);
                res.listUserResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all User Conversations for the User.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListUserConversationResponse listUserConversation(org.openapis.openapi.models.operations.ListUserConversationRequest request, org.openapis.openapi.models.operations.ListUserConversationSecurity security) throws Exception {
        return this.listUserConversation(request, security, null);
    }

    /**
     * Retrieve a list of all User Conversations for the User.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListUserConversationResponse listUserConversation(org.openapis.openapi.models.operations.ListUserConversationRequest request, org.openapis.openapi.models.operations.ListUserConversationSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_USER_CONVERSATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListUserConversationRequest.class, baseUrl, "/v1/Users/{UserSid}/Conversations", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListUserConversationRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListUserConversationResponse res = new org.openapis.openapi.models.operations.ListUserConversationResponse() {{
            listUserConversationResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListUserConversationListUserConversationResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListUserConversationListUserConversationResponse.class);
                res.listUserConversationResponse = out;
            }
        }

        return res;
    }

    /**
     * Update the global configuration of conversations on your account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateConfigurationResponse updateConfiguration(org.openapis.openapi.models.operations.UpdateConfigurationUpdateConfigurationRequest request, org.openapis.openapi.models.operations.UpdateConfigurationSecurity security) throws Exception {
        return this.updateConfiguration(request, security, null);
    }

    /**
     * Update the global configuration of conversations on your account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateConfigurationResponse updateConfiguration(org.openapis.openapi.models.operations.UpdateConfigurationUpdateConfigurationRequest request, org.openapis.openapi.models.operations.UpdateConfigurationSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_CONFIGURATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Configuration");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateConfigurationResponse res = new org.openapis.openapi.models.operations.UpdateConfigurationResponse() {{
            conversationsV1Configuration = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1Configuration out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1Configuration.class);
                res.conversationsV1Configuration = out;
            }
        }

        return res;
    }

    /**
     * Update an existing address configuration
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateConfigurationAddressResponse updateConfigurationAddress(org.openapis.openapi.models.operations.UpdateConfigurationAddressRequest request, org.openapis.openapi.models.operations.UpdateConfigurationAddressSecurity security) throws Exception {
        return this.updateConfigurationAddress(request, security, null);
    }

    /**
     * Update an existing address configuration
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateConfigurationAddressResponse updateConfigurationAddress(org.openapis.openapi.models.operations.UpdateConfigurationAddressRequest request, org.openapis.openapi.models.operations.UpdateConfigurationAddressSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_CONFIGURATION_ADDRESS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateConfigurationAddressRequest.class, baseUrl, "/v1/Configuration/Addresses/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateConfigurationAddressResponse res = new org.openapis.openapi.models.operations.UpdateConfigurationAddressResponse() {{
            conversationsV1ConfigurationAddress = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConfigurationAddress out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConfigurationAddress.class);
                res.conversationsV1ConfigurationAddress = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateConfigurationWebhookResponse updateConfigurationWebhook(org.openapis.openapi.models.operations.UpdateConfigurationWebhookUpdateConfigurationWebhookRequest request, org.openapis.openapi.models.operations.UpdateConfigurationWebhookSecurity security) throws Exception {
        return this.updateConfigurationWebhook(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateConfigurationWebhookResponse updateConfigurationWebhook(org.openapis.openapi.models.operations.UpdateConfigurationWebhookUpdateConfigurationWebhookRequest request, org.openapis.openapi.models.operations.UpdateConfigurationWebhookSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_CONFIGURATION_WEBHOOK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Configuration/Webhooks");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateConfigurationWebhookResponse res = new org.openapis.openapi.models.operations.UpdateConfigurationWebhookResponse() {{
            conversationsV1ConfigurationConfigurationWebhook = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConfigurationConfigurationWebhook out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConfigurationConfigurationWebhook.class);
                res.conversationsV1ConfigurationConfigurationWebhook = out;
            }
        }

        return res;
    }

    /**
     * Update an existing conversation in your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateConversationResponse updateConversation(org.openapis.openapi.models.operations.UpdateConversationRequest request, org.openapis.openapi.models.operations.UpdateConversationSecurity security) throws Exception {
        return this.updateConversation(request, security, null);
    }

    /**
     * Update an existing conversation in your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateConversationResponse updateConversation(org.openapis.openapi.models.operations.UpdateConversationRequest request, org.openapis.openapi.models.operations.UpdateConversationSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_CONVERSATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateConversationRequest.class, baseUrl, "/v1/Conversations/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateConversationResponse res = new org.openapis.openapi.models.operations.UpdateConversationResponse() {{
            conversationsV1Conversation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1Conversation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1Conversation.class);
                res.conversationsV1Conversation = out;
            }
        }

        return res;
    }

    /**
     * Update an existing message in the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateConversationMessageResponse updateConversationMessage(org.openapis.openapi.models.operations.UpdateConversationMessageRequest request, org.openapis.openapi.models.operations.UpdateConversationMessageSecurity security) throws Exception {
        return this.updateConversationMessage(request, security, null);
    }

    /**
     * Update an existing message in the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateConversationMessageResponse updateConversationMessage(org.openapis.openapi.models.operations.UpdateConversationMessageRequest request, org.openapis.openapi.models.operations.UpdateConversationMessageSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_CONVERSATION_MESSAGE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateConversationMessageRequest.class, baseUrl, "/v1/Conversations/{ConversationSid}/Messages/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateConversationMessageResponse res = new org.openapis.openapi.models.operations.UpdateConversationMessageResponse() {{
            conversationsV1ConversationConversationMessage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConversationConversationMessage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConversationConversationMessage.class);
                res.conversationsV1ConversationConversationMessage = out;
            }
        }

        return res;
    }

    /**
     * Update an existing participant in the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateConversationParticipantResponse updateConversationParticipant(org.openapis.openapi.models.operations.UpdateConversationParticipantRequest request, org.openapis.openapi.models.operations.UpdateConversationParticipantSecurity security) throws Exception {
        return this.updateConversationParticipant(request, security, null);
    }

    /**
     * Update an existing participant in the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateConversationParticipantResponse updateConversationParticipant(org.openapis.openapi.models.operations.UpdateConversationParticipantRequest request, org.openapis.openapi.models.operations.UpdateConversationParticipantSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateConversationParticipantRequest.class, baseUrl, "/v1/Conversations/{ConversationSid}/Participants/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateConversationParticipantResponse res = new org.openapis.openapi.models.operations.UpdateConversationParticipantResponse() {{
            conversationsV1ConversationConversationParticipant = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConversationConversationParticipant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConversationConversationParticipant.class);
                res.conversationsV1ConversationConversationParticipant = out;
            }
        }

        return res;
    }

    /**
     * Update an existing conversation-scoped webhook
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateConversationScopedWebhookResponse updateConversationScopedWebhook(org.openapis.openapi.models.operations.UpdateConversationScopedWebhookRequest request, org.openapis.openapi.models.operations.UpdateConversationScopedWebhookSecurity security) throws Exception {
        return this.updateConversationScopedWebhook(request, security, null);
    }

    /**
     * Update an existing conversation-scoped webhook
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateConversationScopedWebhookResponse updateConversationScopedWebhook(org.openapis.openapi.models.operations.UpdateConversationScopedWebhookRequest request, org.openapis.openapi.models.operations.UpdateConversationScopedWebhookSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateConversationScopedWebhookRequest.class, baseUrl, "/v1/Conversations/{ConversationSid}/Webhooks/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateConversationScopedWebhookResponse res = new org.openapis.openapi.models.operations.UpdateConversationScopedWebhookResponse() {{
            conversationsV1ConversationConversationScopedWebhook = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConversationConversationScopedWebhook out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConversationConversationScopedWebhook.class);
                res.conversationsV1ConversationConversationScopedWebhook = out;
            }
        }

        return res;
    }

    /**
     * Update an existing push notification credential on your account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateCredentialResponse updateCredential(org.openapis.openapi.models.operations.UpdateCredentialRequest request, org.openapis.openapi.models.operations.UpdateCredentialSecurity security) throws Exception {
        return this.updateCredential(request, security, null);
    }

    /**
     * Update an existing push notification credential on your account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateCredentialResponse updateCredential(org.openapis.openapi.models.operations.UpdateCredentialRequest request, org.openapis.openapi.models.operations.UpdateCredentialSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_CREDENTIAL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateCredentialRequest.class, baseUrl, "/v1/Credentials/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateCredentialResponse res = new org.openapis.openapi.models.operations.UpdateCredentialResponse() {{
            conversationsV1Credential = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1Credential out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1Credential.class);
                res.conversationsV1Credential = out;
            }
        }

        return res;
    }

    /**
     * Update an existing user role in your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateRoleResponse updateRole(org.openapis.openapi.models.operations.UpdateRoleRequest request, org.openapis.openapi.models.operations.UpdateRoleSecurity security) throws Exception {
        return this.updateRole(request, security, null);
    }

    /**
     * Update an existing user role in your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateRoleResponse updateRole(org.openapis.openapi.models.operations.UpdateRoleRequest request, org.openapis.openapi.models.operations.UpdateRoleSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_ROLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateRoleRequest.class, baseUrl, "/v1/Roles/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateRoleResponse res = new org.openapis.openapi.models.operations.UpdateRoleResponse() {{
            conversationsV1Role = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1Role out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1Role.class);
                res.conversationsV1Role = out;
            }
        }

        return res;
    }

    /**
     * Update configuration settings of a conversation service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceConfigurationResponse updateServiceConfiguration(org.openapis.openapi.models.operations.UpdateServiceConfigurationRequest request, org.openapis.openapi.models.operations.UpdateServiceConfigurationSecurity security) throws Exception {
        return this.updateServiceConfiguration(request, security, null);
    }

    /**
     * Update configuration settings of a conversation service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceConfigurationResponse updateServiceConfiguration(org.openapis.openapi.models.operations.UpdateServiceConfigurationRequest request, org.openapis.openapi.models.operations.UpdateServiceConfigurationSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SERVICE_CONFIGURATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateServiceConfigurationRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Configuration", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateServiceConfigurationResponse res = new org.openapis.openapi.models.operations.UpdateServiceConfigurationResponse() {{
            conversationsV1ServiceServiceConfiguration = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConfiguration out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConfiguration.class);
                res.conversationsV1ServiceServiceConfiguration = out;
            }
        }

        return res;
    }

    /**
     * Update an existing conversation in your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceConversationResponse updateServiceConversation(org.openapis.openapi.models.operations.UpdateServiceConversationRequest request, org.openapis.openapi.models.operations.UpdateServiceConversationSecurity security) throws Exception {
        return this.updateServiceConversation(request, security, null);
    }

    /**
     * Update an existing conversation in your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceConversationResponse updateServiceConversation(org.openapis.openapi.models.operations.UpdateServiceConversationRequest request, org.openapis.openapi.models.operations.UpdateServiceConversationSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SERVICE_CONVERSATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateServiceConversationRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateServiceConversationResponse res = new org.openapis.openapi.models.operations.UpdateServiceConversationResponse() {{
            conversationsV1ServiceServiceConversation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversation.class);
                res.conversationsV1ServiceServiceConversation = out;
            }
        }

        return res;
    }

    /**
     * Update an existing message in the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceConversationMessageResponse updateServiceConversationMessage(org.openapis.openapi.models.operations.UpdateServiceConversationMessageRequest request, org.openapis.openapi.models.operations.UpdateServiceConversationMessageSecurity security) throws Exception {
        return this.updateServiceConversationMessage(request, security, null);
    }

    /**
     * Update an existing message in the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceConversationMessageResponse updateServiceConversationMessage(org.openapis.openapi.models.operations.UpdateServiceConversationMessageRequest request, org.openapis.openapi.models.operations.UpdateServiceConversationMessageSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SERVICE_CONVERSATION_MESSAGE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateServiceConversationMessageRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateServiceConversationMessageResponse res = new org.openapis.openapi.models.operations.UpdateServiceConversationMessageResponse() {{
            conversationsV1ServiceServiceConversationServiceConversationMessage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationMessage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationMessage.class);
                res.conversationsV1ServiceServiceConversationServiceConversationMessage = out;
            }
        }

        return res;
    }

    /**
     * Update an existing participant in the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceConversationParticipantResponse updateServiceConversationParticipant(org.openapis.openapi.models.operations.UpdateServiceConversationParticipantRequest request, org.openapis.openapi.models.operations.UpdateServiceConversationParticipantSecurity security) throws Exception {
        return this.updateServiceConversationParticipant(request, security, null);
    }

    /**
     * Update an existing participant in the conversation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceConversationParticipantResponse updateServiceConversationParticipant(org.openapis.openapi.models.operations.UpdateServiceConversationParticipantRequest request, org.openapis.openapi.models.operations.UpdateServiceConversationParticipantSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SERVICE_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateServiceConversationParticipantRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateServiceConversationParticipantResponse res = new org.openapis.openapi.models.operations.UpdateServiceConversationParticipantResponse() {{
            conversationsV1ServiceServiceConversationServiceConversationParticipant = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationParticipant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationParticipant.class);
                res.conversationsV1ServiceServiceConversationServiceConversationParticipant = out;
            }
        }

        return res;
    }

    /**
     * Update an existing conversation-scoped webhook
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceConversationScopedWebhookResponse updateServiceConversationScopedWebhook(org.openapis.openapi.models.operations.UpdateServiceConversationScopedWebhookRequest request, org.openapis.openapi.models.operations.UpdateServiceConversationScopedWebhookSecurity security) throws Exception {
        return this.updateServiceConversationScopedWebhook(request, security, null);
    }

    /**
     * Update an existing conversation-scoped webhook
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceConversationScopedWebhookResponse updateServiceConversationScopedWebhook(org.openapis.openapi.models.operations.UpdateServiceConversationScopedWebhookRequest request, org.openapis.openapi.models.operations.UpdateServiceConversationScopedWebhookSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateServiceConversationScopedWebhookRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateServiceConversationScopedWebhookResponse res = new org.openapis.openapi.models.operations.UpdateServiceConversationScopedWebhookResponse() {{
            conversationsV1ServiceServiceConversationServiceConversationScopedWebhook = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook.class);
                res.conversationsV1ServiceServiceConversationServiceConversationScopedWebhook = out;
            }
        }

        return res;
    }

    /**
     * Update push notification service settings
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceNotificationResponse updateServiceNotification(org.openapis.openapi.models.operations.UpdateServiceNotificationRequest request, org.openapis.openapi.models.operations.UpdateServiceNotificationSecurity security) throws Exception {
        return this.updateServiceNotification(request, security, null);
    }

    /**
     * Update push notification service settings
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceNotificationResponse updateServiceNotification(org.openapis.openapi.models.operations.UpdateServiceNotificationRequest request, org.openapis.openapi.models.operations.UpdateServiceNotificationSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SERVICE_NOTIFICATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateServiceNotificationRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Configuration/Notifications", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateServiceNotificationResponse res = new org.openapis.openapi.models.operations.UpdateServiceNotificationResponse() {{
            conversationsV1ServiceServiceConfigurationServiceNotification = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConfigurationServiceNotification out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConfigurationServiceNotification.class);
                res.conversationsV1ServiceServiceConfigurationServiceNotification = out;
            }
        }

        return res;
    }

    /**
     * Update an existing user role in your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceRoleResponse updateServiceRole(org.openapis.openapi.models.operations.UpdateServiceRoleRequest request, org.openapis.openapi.models.operations.UpdateServiceRoleSecurity security) throws Exception {
        return this.updateServiceRole(request, security, null);
    }

    /**
     * Update an existing user role in your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceRoleResponse updateServiceRole(org.openapis.openapi.models.operations.UpdateServiceRoleRequest request, org.openapis.openapi.models.operations.UpdateServiceRoleSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SERVICE_ROLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateServiceRoleRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Roles/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateServiceRoleResponse res = new org.openapis.openapi.models.operations.UpdateServiceRoleResponse() {{
            conversationsV1ServiceServiceRole = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceRole out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceRole.class);
                res.conversationsV1ServiceServiceRole = out;
            }
        }

        return res;
    }

    /**
     * Update an existing conversation user in your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceUserResponse updateServiceUser(org.openapis.openapi.models.operations.UpdateServiceUserRequest request, org.openapis.openapi.models.operations.UpdateServiceUserSecurity security) throws Exception {
        return this.updateServiceUser(request, security, null);
    }

    /**
     * Update an existing conversation user in your service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceUserResponse updateServiceUser(org.openapis.openapi.models.operations.UpdateServiceUserRequest request, org.openapis.openapi.models.operations.UpdateServiceUserSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SERVICE_USER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateServiceUserRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Users/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateServiceUserResponse res = new org.openapis.openapi.models.operations.UpdateServiceUserResponse() {{
            conversationsV1ServiceServiceUser = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceUser out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceUser.class);
                res.conversationsV1ServiceServiceUser = out;
            }
        }

        return res;
    }

    /**
     * Update a specific User Conversation.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceUserConversationResponse updateServiceUserConversation(org.openapis.openapi.models.operations.UpdateServiceUserConversationRequest request, org.openapis.openapi.models.operations.UpdateServiceUserConversationSecurity security) throws Exception {
        return this.updateServiceUserConversation(request, security, null);
    }

    /**
     * Update a specific User Conversation.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceUserConversationResponse updateServiceUserConversation(org.openapis.openapi.models.operations.UpdateServiceUserConversationRequest request, org.openapis.openapi.models.operations.UpdateServiceUserConversationSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SERVICE_USER_CONVERSATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateServiceUserConversationRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Users/{UserSid}/Conversations/{ConversationSid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateServiceUserConversationResponse res = new org.openapis.openapi.models.operations.UpdateServiceUserConversationResponse() {{
            conversationsV1ServiceServiceUserServiceUserConversation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceUserServiceUserConversation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceUserServiceUserConversation.class);
                res.conversationsV1ServiceServiceUserServiceUserConversation = out;
            }
        }

        return res;
    }

    /**
     * Update a specific Webhook.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceWebhookConfigurationResponse updateServiceWebhookConfiguration(org.openapis.openapi.models.operations.UpdateServiceWebhookConfigurationRequest request, org.openapis.openapi.models.operations.UpdateServiceWebhookConfigurationSecurity security) throws Exception {
        return this.updateServiceWebhookConfiguration(request, security, null);
    }

    /**
     * Update a specific Webhook.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceWebhookConfigurationResponse updateServiceWebhookConfiguration(org.openapis.openapi.models.operations.UpdateServiceWebhookConfigurationRequest request, org.openapis.openapi.models.operations.UpdateServiceWebhookConfigurationSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SERVICE_WEBHOOK_CONFIGURATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateServiceWebhookConfigurationRequest.class, baseUrl, "/v1/Services/{ChatServiceSid}/Configuration/Webhooks", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateServiceWebhookConfigurationResponse res = new org.openapis.openapi.models.operations.UpdateServiceWebhookConfigurationResponse() {{
            conversationsV1ServiceServiceConfigurationServiceWebhookConfiguration = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration.class);
                res.conversationsV1ServiceServiceConfigurationServiceWebhookConfiguration = out;
            }
        }

        return res;
    }

    /**
     * Update an existing conversation user in your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateUserResponse updateUser(org.openapis.openapi.models.operations.UpdateUserRequest request, org.openapis.openapi.models.operations.UpdateUserSecurity security) throws Exception {
        return this.updateUser(request, security, null);
    }

    /**
     * Update an existing conversation user in your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateUserResponse updateUser(org.openapis.openapi.models.operations.UpdateUserRequest request, org.openapis.openapi.models.operations.UpdateUserSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_USER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateUserRequest.class, baseUrl, "/v1/Users/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateUserResponse res = new org.openapis.openapi.models.operations.UpdateUserResponse() {{
            conversationsV1User = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1User out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1User.class);
                res.conversationsV1User = out;
            }
        }

        return res;
    }

    /**
     * Update a specific User Conversation.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateUserConversationResponse updateUserConversation(org.openapis.openapi.models.operations.UpdateUserConversationRequest request, org.openapis.openapi.models.operations.UpdateUserConversationSecurity security) throws Exception {
        return this.updateUserConversation(request, security, null);
    }

    /**
     * Update a specific User Conversation.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateUserConversationResponse updateUserConversation(org.openapis.openapi.models.operations.UpdateUserConversationRequest request, org.openapis.openapi.models.operations.UpdateUserConversationSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_USER_CONVERSATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateUserConversationRequest.class, baseUrl, "/v1/Users/{UserSid}/Conversations/{ConversationSid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateUserConversationResponse res = new org.openapis.openapi.models.operations.UpdateUserConversationResponse() {{
            conversationsV1UserUserConversation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1UserUserConversation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1UserUserConversation.class);
                res.conversationsV1UserUserConversation = out;
            }
        }

        return res;
    }
}