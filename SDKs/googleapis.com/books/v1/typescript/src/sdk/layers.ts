/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Layers {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Gets the annotation data.
   */
  booksLayersAnnotationDataGet(
    req: operations.BooksLayersAnnotationDataGetRequest,
    security: operations.BooksLayersAnnotationDataGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksLayersAnnotationDataGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksLayersAnnotationDataGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/books/v1/volumes/{volumeId}/layers/{layerId}/data/{annotationDataId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksLayersAnnotationDataGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksLayersAnnotationDataGetResponse =
        new operations.BooksLayersAnnotationDataGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dictionaryAnnotationdata = utils.objectToClass(
              httpRes?.data,
              shared.DictionaryAnnotationdata
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the annotation data for a volume and layer.
   */
  booksLayersAnnotationDataList(
    req: operations.BooksLayersAnnotationDataListRequest,
    security: operations.BooksLayersAnnotationDataListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksLayersAnnotationDataListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksLayersAnnotationDataListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/books/v1/volumes/{volumeId}/layers/{layerId}/data",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksLayersAnnotationDataListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksLayersAnnotationDataListResponse =
        new operations.BooksLayersAnnotationDataListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.annotationsdata = utils.objectToClass(
              httpRes?.data,
              shared.Annotationsdata
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the layer summary for a volume.
   */
  booksLayersGet(
    req: operations.BooksLayersGetRequest,
    security: operations.BooksLayersGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksLayersGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksLayersGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/books/v1/volumes/{volumeId}/layersummary/{summaryId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksLayersGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksLayersGetResponse =
        new operations.BooksLayersGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.layersummary = utils.objectToClass(
              httpRes?.data,
              shared.Layersummary
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List the layer summaries for a volume.
   */
  booksLayersList(
    req: operations.BooksLayersListRequest,
    security: operations.BooksLayersListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksLayersListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksLayersListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/books/v1/volumes/{volumeId}/layersummary",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksLayersListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksLayersListResponse =
        new operations.BooksLayersListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.layersummaries = utils.objectToClass(
              httpRes?.data,
              shared.Layersummaries
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the volume annotation.
   */
  booksLayersVolumeAnnotationsGet(
    req: operations.BooksLayersVolumeAnnotationsGetRequest,
    security: operations.BooksLayersVolumeAnnotationsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksLayersVolumeAnnotationsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksLayersVolumeAnnotationsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/books/v1/volumes/{volumeId}/layers/{layerId}/annotations/{annotationId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksLayersVolumeAnnotationsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksLayersVolumeAnnotationsGetResponse =
        new operations.BooksLayersVolumeAnnotationsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.volumeannotation = utils.objectToClass(
              httpRes?.data,
              shared.Volumeannotation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the volume annotations for a volume and layer.
   */
  booksLayersVolumeAnnotationsList(
    req: operations.BooksLayersVolumeAnnotationsListRequest,
    security: operations.BooksLayersVolumeAnnotationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksLayersVolumeAnnotationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksLayersVolumeAnnotationsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/books/v1/volumes/{volumeId}/layers/{layerId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksLayersVolumeAnnotationsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksLayersVolumeAnnotationsListResponse =
        new operations.BooksLayersVolumeAnnotationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.volumeannotations = utils.objectToClass(
              httpRes?.data,
              shared.Volumeannotations
            );
          }
          break;
      }

      return res;
    });
  }
}
