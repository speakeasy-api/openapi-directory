"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetIpamDiscoveredResourceCidrsResult = exports.GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrs = exports.GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrsResourceTypeEnum = exports.GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrsResourceTags = void 0;
var utils_1 = require("../../../internal/utils");
/**
 * The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.
 */
var GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrsResourceTags = /** @class */ (function (_super) {
    __extends(GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrsResourceTags, _super);
    function GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrsResourceTags() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrsResourceTags.prototype, "key", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrsResourceTags.prototype, "value", void 0);
    return GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrsResourceTags;
}(utils_1.SpeakeasyBase));
exports.GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrsResourceTags = GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrsResourceTags;
/**
 * The resource type.
 */
var GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrsResourceTypeEnum;
(function (GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrsResourceTypeEnum) {
    GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrsResourceTypeEnum["Vpc"] = "vpc";
    GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrsResourceTypeEnum["Subnet"] = "subnet";
    GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrsResourceTypeEnum["Eip"] = "eip";
    GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrsResourceTypeEnum["PublicIpv4Pool"] = "public-ipv4-pool";
    GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrsResourceTypeEnum["Ipv6Pool"] = "ipv6-pool";
})(GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrsResourceTypeEnum = exports.GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrsResourceTypeEnum || (exports.GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrsResourceTypeEnum = {}));
/**
 * An IPAM discovered resource CIDR. A discovered resource is a resource CIDR monitored under a resource discovery. The following resources can be discovered: VPCs, Public IPv4 pools, VPC subnets, and Elastic IP addresses. The discovered resource CIDR is the IP address range in CIDR notation that is associated with the resource.
 */
var GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrs = /** @class */ (function (_super) {
    __extends(GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrs, _super);
    function GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrs.prototype, "ipUsage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrs.prototype, "ipamResourceDiscoveryId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrs.prototype, "resourceCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrs.prototype, "resourceId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrs.prototype, "resourceOwnerId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrs.prototype, "resourceRegion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrsResourceTags,
        }),
        __metadata("design:type", Array)
    ], GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrs.prototype, "resourceTags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrs.prototype, "resourceType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Date)
    ], GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrs.prototype, "sampleTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrs.prototype, "vpcId", void 0);
    return GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrs;
}(utils_1.SpeakeasyBase));
exports.GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrs = GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrs;
/**
 * Success
 */
var GetIpamDiscoveredResourceCidrsResult = /** @class */ (function (_super) {
    __extends(GetIpamDiscoveredResourceCidrsResult, _super);
    function GetIpamDiscoveredResourceCidrsResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: GetIpamDiscoveredResourceCidrsResultIpamDiscoveredResourceCidrs,
        }),
        __metadata("design:type", Array)
    ], GetIpamDiscoveredResourceCidrsResult.prototype, "ipamDiscoveredResourceCidrs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamDiscoveredResourceCidrsResult.prototype, "nextToken", void 0);
    return GetIpamDiscoveredResourceCidrsResult;
}(utils_1.SpeakeasyBase));
exports.GetIpamDiscoveredResourceCidrsResult = GetIpamDiscoveredResourceCidrsResult;
