<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class V1Employees 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * CreateEmployee
     * 
     *  Use the CreateEmployee endpoint to add an employee to a Square
     * account. Employees created with the Connect API have an initial status
     * of `INACTIVE`. Inactive employees cannot sign in to Square Point of Sale
     * until they are activated from the Square Dashboard. Employee status
     * cannot be changed with the Connect API.
     * 
     * Employee entities cannot be deleted. To disable employee profiles,
     * set the employee's status to <code>INACTIVE</code>
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\V1Employee $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateEmployeeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateEmployeeResponse
     */
	public function createEmployee(
        \OpenAPI\OpenAPI\Models\Shared\V1Employee $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateEmployeeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateEmployeeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/me/employees');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateEmployeeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->v1Employee = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\V1Employee', 'json');
            }
        }

        return $response;
    }
	
    /**
     * CreateEmployeeRole
     * 
     * Creates an employee role you can then assign to employees.
     * 
     * Square accounts can include any number of roles that can be assigned to
     * employees. These roles define the actions and permissions granted to an
     * employee with that role. For example, an employee with a "Shift Manager"
     * role might be able to issue refunds in Square Point of Sale, whereas an
     * employee with a "Clerk" role might not.
     * 
     * Roles are assigned with the [V1UpdateEmployee](https://developer.squareup.com/reference/square_2021-08-18/v1-employees-api/update-employee-role)
     * endpoint. An employee can have only one role at a time.
     * 
     * If an employee has no role, they have none of the permissions associated
     * with roles. All employees can accept payments with Square Point of Sale.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\V1EmployeeRole $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateEmployeeRoleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateEmployeeRoleResponse
     */
	public function createEmployeeRole(
        \OpenAPI\OpenAPI\Models\Shared\V1EmployeeRole $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateEmployeeRoleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateEmployeeRoleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/me/roles');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateEmployeeRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->v1EmployeeRole = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\V1EmployeeRole', 'json');
            }
        }

        return $response;
    }
	
    /**
     * ListEmployeeRoles
     * 
     * Provides summary information for all of a business's employee roles.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEmployeeRolesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEmployeeRolesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListEmployeeRolesResponse
     */
	public function listEmployeeRoles(
        \OpenAPI\OpenAPI\Models\Operations\ListEmployeeRolesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListEmployeeRolesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListEmployeeRolesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/me/roles');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListEmployeeRolesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListEmployeeRolesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->v1EmployeeRoles = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\V1EmployeeRole>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * ListEmployees
     * 
     * Provides summary information for all of a business's employees.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEmployeesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEmployeesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListEmployeesResponse
     */
	public function listEmployees(
        \OpenAPI\OpenAPI\Models\Operations\ListEmployeesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListEmployeesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListEmployeesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/me/employees');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListEmployeesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListEmployeesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->v1Employees = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\V1Employee>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * RetrieveEmployee
     * 
     * Provides the details for a single employee.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveEmployeeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveEmployeeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveEmployeeResponse
     */
	public function retrieveEmployee(
        \OpenAPI\OpenAPI\Models\Operations\RetrieveEmployeeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RetrieveEmployeeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveEmployeeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/me/employees/{employee_id}', \OpenAPI\OpenAPI\Models\Operations\RetrieveEmployeeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveEmployeeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->v1Employee = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\V1Employee', 'json');
            }
        }

        return $response;
    }
	
    /**
     * RetrieveEmployeeRole
     * 
     * Provides the details for a single employee role.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveEmployeeRoleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveEmployeeRoleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveEmployeeRoleResponse
     */
	public function retrieveEmployeeRole(
        \OpenAPI\OpenAPI\Models\Operations\RetrieveEmployeeRoleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RetrieveEmployeeRoleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveEmployeeRoleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/me/roles/{role_id}', \OpenAPI\OpenAPI\Models\Operations\RetrieveEmployeeRoleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveEmployeeRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->v1EmployeeRole = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\V1EmployeeRole', 'json');
            }
        }

        return $response;
    }
	
    /**
     * UpdateEmployee
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateEmployeeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateEmployeeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateEmployeeResponse
     */
	public function updateEmployee(
        \OpenAPI\OpenAPI\Models\Operations\UpdateEmployeeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateEmployeeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateEmployeeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/me/employees/{employee_id}', \OpenAPI\OpenAPI\Models\Operations\UpdateEmployeeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "v1Employee", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateEmployeeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->v1Employee = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\V1Employee', 'json');
            }
        }

        return $response;
    }
	
    /**
     * UpdateEmployeeRole
     * 
     * Modifies the details of an employee role.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateEmployeeRoleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateEmployeeRoleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateEmployeeRoleResponse
     */
	public function updateEmployeeRole(
        \OpenAPI\OpenAPI\Models\Operations\UpdateEmployeeRoleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateEmployeeRoleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateEmployeeRoleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/me/roles/{role_id}', \OpenAPI\OpenAPI\Models\Operations\UpdateEmployeeRoleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "v1EmployeeRole", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateEmployeeRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->v1EmployeeRole = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\V1EmployeeRole', 'json');
            }
        }

        return $response;
    }
}