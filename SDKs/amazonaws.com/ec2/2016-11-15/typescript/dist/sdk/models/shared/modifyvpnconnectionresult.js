"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModifyVpnConnectionResult = exports.ModifyVpnConnectionResultVpnConnection = exports.ModifyVpnConnectionResultVpnConnectionVgwTelemetry = exports.ModifyVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum = exports.ModifyVpnConnectionResultVpnConnectionTypeEnum = exports.ModifyVpnConnectionResultVpnConnectionTags = exports.ModifyVpnConnectionResultVpnConnectionStateEnum = exports.ModifyVpnConnectionResultVpnConnectionRoutes = exports.ModifyVpnConnectionResultVpnConnectionRoutesStateEnum = exports.ModifyVpnConnectionResultVpnConnectionRoutesSourceEnum = exports.ModifyVpnConnectionResultVpnConnectionOptions = exports.ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions = exports.ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms = exports.ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms = exports.ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers = exports.ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms = exports.ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms = exports.ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers = exports.ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptions = exports.ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions = exports.ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsIkeVersions = exports.ModifyVpnConnectionResultVpnConnectionOptionsTunnelInsideIpVersionEnum = exports.ModifyVpnConnectionResultVpnConnectionGatewayAssociationStateEnum = void 0;
var utils_1 = require("../../../internal/utils");
/**
 * The current state of the gateway association.
 */
var ModifyVpnConnectionResultVpnConnectionGatewayAssociationStateEnum;
(function (ModifyVpnConnectionResultVpnConnectionGatewayAssociationStateEnum) {
    ModifyVpnConnectionResultVpnConnectionGatewayAssociationStateEnum["Associated"] = "associated";
    ModifyVpnConnectionResultVpnConnectionGatewayAssociationStateEnum["NotAssociated"] = "not-associated";
    ModifyVpnConnectionResultVpnConnectionGatewayAssociationStateEnum["Associating"] = "associating";
    ModifyVpnConnectionResultVpnConnectionGatewayAssociationStateEnum["Disassociating"] = "disassociating";
})(ModifyVpnConnectionResultVpnConnectionGatewayAssociationStateEnum = exports.ModifyVpnConnectionResultVpnConnectionGatewayAssociationStateEnum || (exports.ModifyVpnConnectionResultVpnConnectionGatewayAssociationStateEnum = {}));
/**
 * Indicates whether the VPN tunnels process IPv4 or IPv6 traffic.
 */
var ModifyVpnConnectionResultVpnConnectionOptionsTunnelInsideIpVersionEnum;
(function (ModifyVpnConnectionResultVpnConnectionOptionsTunnelInsideIpVersionEnum) {
    ModifyVpnConnectionResultVpnConnectionOptionsTunnelInsideIpVersionEnum["Ipv4"] = "ipv4";
    ModifyVpnConnectionResultVpnConnectionOptionsTunnelInsideIpVersionEnum["Ipv6"] = "ipv6";
})(ModifyVpnConnectionResultVpnConnectionOptionsTunnelInsideIpVersionEnum = exports.ModifyVpnConnectionResultVpnConnectionOptionsTunnelInsideIpVersionEnum || (exports.ModifyVpnConnectionResultVpnConnectionOptionsTunnelInsideIpVersionEnum = {}));
/**
 * The internet key exchange (IKE) version permitted for the VPN tunnel.
 */
var ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsIkeVersions = /** @class */ (function (_super) {
    __extends(ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsIkeVersions, _super);
    function ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsIkeVersions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsIkeVersions.prototype, "value", void 0);
    return ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsIkeVersions;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsIkeVersions = ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsIkeVersions;
/**
 * Options for sending VPN tunnel logs to CloudWatch.
 */
var ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions = /** @class */ (function (_super) {
    __extends(ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions, _super);
    function ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions.prototype, "logEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions.prototype, "logGroupArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions.prototype, "logOutputFormat", void 0);
    return ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions = ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions;
/**
 * Options for logging VPN tunnel activity.
 */
var ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptions = /** @class */ (function (_super) {
    __extends(ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptions, _super);
    function ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptions.prototype, "cloudWatchLogOptions", void 0);
    return ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptions;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptions = ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptions;
/**
 * The Diffie-Hellmann group number for phase 1 IKE negotiations.
 */
var ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers = /** @class */ (function (_super) {
    __extends(ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers, _super);
    function ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers.prototype, "value", void 0);
    return ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers = ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers;
/**
 * The encryption algorithm for phase 1 IKE negotiations.
 */
var ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms = /** @class */ (function (_super) {
    __extends(ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms, _super);
    function ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms.prototype, "value", void 0);
    return ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms = ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms;
/**
 * The integrity algorithm for phase 1 IKE negotiations.
 */
var ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms = /** @class */ (function (_super) {
    __extends(ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms, _super);
    function ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms.prototype, "value", void 0);
    return ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms = ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms;
/**
 * The Diffie-Hellmann group number for phase 2 IKE negotiations.
 */
var ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers = /** @class */ (function (_super) {
    __extends(ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers, _super);
    function ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers.prototype, "value", void 0);
    return ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers = ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers;
/**
 * The encryption algorithm for phase 2 IKE negotiations.
 */
var ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms = /** @class */ (function (_super) {
    __extends(ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms, _super);
    function ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms.prototype, "value", void 0);
    return ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms = ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms;
/**
 * The integrity algorithm for phase 2 IKE negotiations.
 */
var ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms = /** @class */ (function (_super) {
    __extends(ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms, _super);
    function ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms.prototype, "value", void 0);
    return ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms = ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms;
/**
 * The VPN tunnel options.
 */
var ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions = /** @class */ (function (_super) {
    __extends(ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions, _super);
    function ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "dpdTimeoutAction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "dpdTimeoutSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsIkeVersions,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "ikeVersions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptions)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "logOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "outsideIpAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "phase1DHGroupNumbers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "phase1EncryptionAlgorithms", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "phase1IntegrityAlgorithms", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "phase1LifetimeSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "phase2DHGroupNumbers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "phase2EncryptionAlgorithms", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "phase2IntegrityAlgorithms", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "phase2LifetimeSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "preSharedKey", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "rekeyFuzzPercentage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "rekeyMarginTimeSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "replayWindowSize", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "startupAction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "tunnelInsideCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions.prototype, "tunnelInsideIpv6Cidr", void 0);
    return ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions = ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions;
/**
 * The VPN connection options.
 */
var ModifyVpnConnectionResultVpnConnectionOptions = /** @class */ (function (_super) {
    __extends(ModifyVpnConnectionResultVpnConnectionOptions, _super);
    function ModifyVpnConnectionResultVpnConnectionOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], ModifyVpnConnectionResultVpnConnectionOptions.prototype, "enableAcceleration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnectionOptions.prototype, "localIpv4NetworkCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnectionOptions.prototype, "localIpv6NetworkCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnectionOptions.prototype, "outsideIpAddressType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnectionOptions.prototype, "remoteIpv4NetworkCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnectionOptions.prototype, "remoteIpv6NetworkCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], ModifyVpnConnectionResultVpnConnectionOptions.prototype, "staticRoutesOnly", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnectionOptions.prototype, "transportTransitGatewayAttachmentId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnectionOptions.prototype, "tunnelInsideIpVersion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnConnectionResultVpnConnectionOptionsTunnelOptions,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnConnectionResultVpnConnectionOptions.prototype, "tunnelOptions", void 0);
    return ModifyVpnConnectionResultVpnConnectionOptions;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnConnectionResultVpnConnectionOptions = ModifyVpnConnectionResultVpnConnectionOptions;
/**
 * Indicates how the routes were provided.
 */
var ModifyVpnConnectionResultVpnConnectionRoutesSourceEnum;
(function (ModifyVpnConnectionResultVpnConnectionRoutesSourceEnum) {
    ModifyVpnConnectionResultVpnConnectionRoutesSourceEnum["Static"] = "Static";
})(ModifyVpnConnectionResultVpnConnectionRoutesSourceEnum = exports.ModifyVpnConnectionResultVpnConnectionRoutesSourceEnum || (exports.ModifyVpnConnectionResultVpnConnectionRoutesSourceEnum = {}));
/**
 * The current state of the static route.
 */
var ModifyVpnConnectionResultVpnConnectionRoutesStateEnum;
(function (ModifyVpnConnectionResultVpnConnectionRoutesStateEnum) {
    ModifyVpnConnectionResultVpnConnectionRoutesStateEnum["Pending"] = "pending";
    ModifyVpnConnectionResultVpnConnectionRoutesStateEnum["Available"] = "available";
    ModifyVpnConnectionResultVpnConnectionRoutesStateEnum["Deleting"] = "deleting";
    ModifyVpnConnectionResultVpnConnectionRoutesStateEnum["Deleted"] = "deleted";
})(ModifyVpnConnectionResultVpnConnectionRoutesStateEnum = exports.ModifyVpnConnectionResultVpnConnectionRoutesStateEnum || (exports.ModifyVpnConnectionResultVpnConnectionRoutesStateEnum = {}));
/**
 * Describes a static route for a VPN connection.
 */
var ModifyVpnConnectionResultVpnConnectionRoutes = /** @class */ (function (_super) {
    __extends(ModifyVpnConnectionResultVpnConnectionRoutes, _super);
    function ModifyVpnConnectionResultVpnConnectionRoutes() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnectionRoutes.prototype, "destinationCidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnectionRoutes.prototype, "source", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnectionRoutes.prototype, "state", void 0);
    return ModifyVpnConnectionResultVpnConnectionRoutes;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnConnectionResultVpnConnectionRoutes = ModifyVpnConnectionResultVpnConnectionRoutes;
/**
 * The current state of the VPN connection.
 */
var ModifyVpnConnectionResultVpnConnectionStateEnum;
(function (ModifyVpnConnectionResultVpnConnectionStateEnum) {
    ModifyVpnConnectionResultVpnConnectionStateEnum["Pending"] = "pending";
    ModifyVpnConnectionResultVpnConnectionStateEnum["Available"] = "available";
    ModifyVpnConnectionResultVpnConnectionStateEnum["Deleting"] = "deleting";
    ModifyVpnConnectionResultVpnConnectionStateEnum["Deleted"] = "deleted";
})(ModifyVpnConnectionResultVpnConnectionStateEnum = exports.ModifyVpnConnectionResultVpnConnectionStateEnum || (exports.ModifyVpnConnectionResultVpnConnectionStateEnum = {}));
/**
 * Describes a tag.
 */
var ModifyVpnConnectionResultVpnConnectionTags = /** @class */ (function (_super) {
    __extends(ModifyVpnConnectionResultVpnConnectionTags, _super);
    function ModifyVpnConnectionResultVpnConnectionTags() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnectionTags.prototype, "key", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnectionTags.prototype, "value", void 0);
    return ModifyVpnConnectionResultVpnConnectionTags;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnConnectionResultVpnConnectionTags = ModifyVpnConnectionResultVpnConnectionTags;
/**
 * The type of VPN connection.
 */
var ModifyVpnConnectionResultVpnConnectionTypeEnum;
(function (ModifyVpnConnectionResultVpnConnectionTypeEnum) {
    ModifyVpnConnectionResultVpnConnectionTypeEnum["Ipsec1"] = "ipsec.1";
})(ModifyVpnConnectionResultVpnConnectionTypeEnum = exports.ModifyVpnConnectionResultVpnConnectionTypeEnum || (exports.ModifyVpnConnectionResultVpnConnectionTypeEnum = {}));
/**
 * The status of the VPN tunnel.
 */
var ModifyVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum;
(function (ModifyVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum) {
    ModifyVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum["Up"] = "UP";
    ModifyVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum["Down"] = "DOWN";
})(ModifyVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum = exports.ModifyVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum || (exports.ModifyVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum = {}));
/**
 * Describes telemetry for a VPN tunnel.
 */
var ModifyVpnConnectionResultVpnConnectionVgwTelemetry = /** @class */ (function (_super) {
    __extends(ModifyVpnConnectionResultVpnConnectionVgwTelemetry, _super);
    function ModifyVpnConnectionResultVpnConnectionVgwTelemetry() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ModifyVpnConnectionResultVpnConnectionVgwTelemetry.prototype, "acceptedRouteCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnectionVgwTelemetry.prototype, "certificateArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Date)
    ], ModifyVpnConnectionResultVpnConnectionVgwTelemetry.prototype, "lastStatusChange", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnectionVgwTelemetry.prototype, "outsideIpAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnectionVgwTelemetry.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnectionVgwTelemetry.prototype, "statusMessage", void 0);
    return ModifyVpnConnectionResultVpnConnectionVgwTelemetry;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnConnectionResultVpnConnectionVgwTelemetry = ModifyVpnConnectionResultVpnConnectionVgwTelemetry;
/**
 * Information about the VPN connection.
 */
var ModifyVpnConnectionResultVpnConnection = /** @class */ (function (_super) {
    __extends(ModifyVpnConnectionResultVpnConnection, _super);
    function ModifyVpnConnectionResultVpnConnection() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnection.prototype, "category", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnection.prototype, "coreNetworkArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnection.prototype, "coreNetworkAttachmentArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnection.prototype, "customerGatewayConfiguration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnection.prototype, "customerGatewayId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnection.prototype, "gatewayAssociationState", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", ModifyVpnConnectionResultVpnConnectionOptions)
    ], ModifyVpnConnectionResultVpnConnection.prototype, "options", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: ModifyVpnConnectionResultVpnConnectionRoutes }),
        __metadata("design:type", Array)
    ], ModifyVpnConnectionResultVpnConnection.prototype, "routes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnection.prototype, "state", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: ModifyVpnConnectionResultVpnConnectionTags }),
        __metadata("design:type", Array)
    ], ModifyVpnConnectionResultVpnConnection.prototype, "tags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnection.prototype, "transitGatewayId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnection.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnConnectionResultVpnConnectionVgwTelemetry,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnConnectionResultVpnConnection.prototype, "vgwTelemetry", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnection.prototype, "vpnConnectionId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnConnectionResultVpnConnection.prototype, "vpnGatewayId", void 0);
    return ModifyVpnConnectionResultVpnConnection;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnConnectionResultVpnConnection = ModifyVpnConnectionResultVpnConnection;
/**
 * Success
 */
var ModifyVpnConnectionResult = /** @class */ (function (_super) {
    __extends(ModifyVpnConnectionResult, _super);
    function ModifyVpnConnectionResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", ModifyVpnConnectionResultVpnConnection)
    ], ModifyVpnConnectionResult.prototype, "vpnConnection", void 0);
    return ModifyVpnConnectionResult;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnConnectionResult = ModifyVpnConnectionResult;
