/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class InvoiceAdjustments {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * CRUD: Delete an invoice adjustment
   */
  objectDELETEInvoiceAdjustment(
    req: operations.ObjectDELETEInvoiceAdjustmentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ObjectDELETEInvoiceAdjustmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ObjectDELETEInvoiceAdjustmentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/object/invoice-adjustment/{id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ObjectDELETEInvoiceAdjustmentResponse =
        new operations.ObjectDELETEInvoiceAdjustmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.proxyDeleteResponse = utils.objectToClass(
              httpRes?.data,
              shared.ProxyDeleteResponse
            );
          }
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.proxyUnauthorizedResponse = utils.objectToClass(
              httpRes?.data,
              shared.ProxyUnauthorizedResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * CRUD: Retrieve an invoice adjustment
   */
  objectGETInvoiceAdjustment(
    req: operations.ObjectGETInvoiceAdjustmentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ObjectGETInvoiceAdjustmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ObjectGETInvoiceAdjustmentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/object/invoice-adjustment/{id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ObjectGETInvoiceAdjustmentResponse =
        new operations.ObjectGETInvoiceAdjustmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.proxyGetInvoiceAdjustment = utils.objectToClass(
              httpRes?.data,
              shared.ProxyGetInvoiceAdjustment
            );
          }
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.proxyUnauthorizedResponse = utils.objectToClass(
              httpRes?.data,
              shared.ProxyUnauthorizedResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.proxyNoDataResponse = utils.objectToClass(
              httpRes?.data,
              shared.ProxyNoDataResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * CRUD: Create an invoice adjustment
   */
  objectPOSTInvoiceAdjustment(
    req: operations.ObjectPOSTInvoiceAdjustmentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ObjectPOSTInvoiceAdjustmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ObjectPOSTInvoiceAdjustmentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v1/object/invoice-adjustment";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "proxyCreateInvoiceAdjustment",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ObjectPOSTInvoiceAdjustmentResponse =
        new operations.ObjectPOSTInvoiceAdjustmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.proxyCreateOrModifyResponse = utils.objectToClass(
              httpRes?.data,
              shared.ProxyCreateOrModifyResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.proxyBadRequestResponse = utils.objectToClass(
              httpRes?.data,
              shared.ProxyBadRequestResponse
            );
          }
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.proxyUnauthorizedResponse = utils.objectToClass(
              httpRes?.data,
              shared.ProxyUnauthorizedResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * CRUD: Update an invoice adjustment
   */
  objectPUTInvoiceAdjustment(
    req: operations.ObjectPUTInvoiceAdjustmentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ObjectPUTInvoiceAdjustmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ObjectPUTInvoiceAdjustmentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/object/invoice-adjustment/{id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "proxyModifyInvoiceAdjustment",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ObjectPUTInvoiceAdjustmentResponse =
        new operations.ObjectPUTInvoiceAdjustmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.proxyCreateOrModifyResponse = utils.objectToClass(
              httpRes?.data,
              shared.ProxyCreateOrModifyResponse
            );
          }
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.proxyUnauthorizedResponse = utils.objectToClass(
              httpRes?.data,
              shared.ProxyUnauthorizedResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
