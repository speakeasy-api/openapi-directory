/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * VerifyV2ServiceEntityChallengeNotification - Created
 */
public class VerifyV2ServiceEntityChallengeNotification {
    /**
     * The unique SID identifier of the Account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_sid")
    public String accountSid;

    public VerifyV2ServiceEntityChallengeNotification withAccountSid(String accountSid) {
        this.accountSid = accountSid;
        return this;
    }
    
    /**
     * The unique SID identifier of the Challenge.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("challenge_sid")
    public String challengeSid;

    public VerifyV2ServiceEntityChallengeNotification withChallengeSid(String challengeSid) {
        this.challengeSid = challengeSid;
        return this;
    }
    
    /**
     * The date that this Notification was created, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_created")
    public OffsetDateTime dateCreated;

    public VerifyV2ServiceEntityChallengeNotification withDateCreated(OffsetDateTime dateCreated) {
        this.dateCreated = dateCreated;
        return this;
    }
    
    /**
     * The unique SID identifier of the Entity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entity_sid")
    public String entitySid;

    public VerifyV2ServiceEntityChallengeNotification withEntitySid(String entitySid) {
        this.entitySid = entitySid;
        return this;
    }
    
    /**
     * Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("identity")
    public String identity;

    public VerifyV2ServiceEntityChallengeNotification withIdentity(String identity) {
        this.identity = identity;
        return this;
    }
    
    /**
     * The priority of the notification. For `push` Challenges it's always `high` which sends the notification immediately, and can wake up a sleeping device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    public String priority;

    public VerifyV2ServiceEntityChallengeNotification withPriority(String priority) {
        this.priority = priority;
        return this;
    }
    
    /**
     * The unique SID identifier of the Service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("service_sid")
    public String serviceSid;

    public VerifyV2ServiceEntityChallengeNotification withServiceSid(String serviceSid) {
        this.serviceSid = serviceSid;
        return this;
    }
    
    /**
     * A 34 character string that uniquely identifies this Notification.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sid")
    public String sid;

    public VerifyV2ServiceEntityChallengeNotification withSid(String sid) {
        this.sid = sid;
        return this;
    }
    
    /**
     * How long, in seconds, the notification is valid. Max: 5 minutes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ttl")
    public Long ttl;

    public VerifyV2ServiceEntityChallengeNotification withTtl(Long ttl) {
        this.ttl = ttl;
        return this;
    }
    
    public VerifyV2ServiceEntityChallengeNotification(){}
}
