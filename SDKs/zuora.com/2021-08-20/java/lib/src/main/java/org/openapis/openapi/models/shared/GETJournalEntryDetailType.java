/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * GETJournalEntryDetailType - Container for custom fields of a Journal Entry object.
 * 
 */
public class GETJournalEntryDetailType {
    /**
     * Name of the accounting period that the journal entry belongs to.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountingPeriodName")
    public String accountingPeriodName;
    public GETJournalEntryDetailType withAccountingPeriodName(String accountingPeriodName) {
        this.accountingPeriodName = accountingPeriodName;
        return this;
    }
    
    /**
     * Returns true if the journal entry is aggregating currencies. That is, if the journal entry was created when the `Aggregate transactions with different currencies during a Journal Run` setting was configured to `Yes`. Otherwise, returns `false`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aggregateCurrency")
    public Boolean aggregateCurrency;
    public GETJournalEntryDetailType withAggregateCurrency(Boolean aggregateCurrency) {
        this.aggregateCurrency = aggregateCurrency;
        return this;
    }
    
    /**
     * Currency used.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public String currency;
    public GETJournalEntryDetailType withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * Home currency used.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("homeCurrency")
    public String homeCurrency;
    public GETJournalEntryDetailType withHomeCurrency(String homeCurrency) {
        this.homeCurrency = homeCurrency;
        return this;
    }
    
    /**
     * Date of the journal entry.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("journalEntryDate")
    public LocalDate journalEntryDate;
    public GETJournalEntryDetailType withJournalEntryDate(LocalDate journalEntryDate) {
        this.journalEntryDate = journalEntryDate;
        return this;
    }
    
    /**
     * Key name that represents the list of journal entry items.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("journalEntryItems")
    public GETJournalEntryItemType[] journalEntryItems;
    public GETJournalEntryDetailType withJournalEntryItems(GETJournalEntryItemType[] journalEntryItems) {
        this.journalEntryItems = journalEntryItems;
        return this;
    }
    
    /**
     * Additional information about this record.
     * Character limit: 2,000
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    public String notes;
    public GETJournalEntryDetailType withNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * Journal entry number in the format JE-00000001.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    public String number;
    public GETJournalEntryDetailType withNumber(String number) {
        this.number = number;
        return this;
    }
    
    /**
     * List of segments that apply to the summary journal entry.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("segments")
    public GETJournalEntrySegmentType[] segments;
    public GETJournalEntryDetailType withSegments(GETJournalEntrySegmentType[] segments) {
        this.segments = segments;
        return this;
    }
    
    /**
     * Status of journal entry.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public GETJournalEntryDetailTypeStatusEnum status;
    public GETJournalEntryDetailType withStatus(GETJournalEntryDetailTypeStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Returns `true` if the request was processed successfully.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("success")
    public Boolean success;
    public GETJournalEntryDetailType withSuccess(Boolean success) {
        this.success = success;
        return this;
    }
    
    /**
     * End date of time period included in the journal entry.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("timePeriodEnd")
    public LocalDate timePeriodEnd;
    public GETJournalEntryDetailType withTimePeriodEnd(LocalDate timePeriodEnd) {
        this.timePeriodEnd = timePeriodEnd;
        return this;
    }
    
    /**
     * Start date of time period included in the journal entry.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("timePeriodStart")
    public LocalDate timePeriodStart;
    public GETJournalEntryDetailType withTimePeriodStart(LocalDate timePeriodStart) {
        this.timePeriodStart = timePeriodStart;
        return this;
    }
    
    /**
     * Transaction type of the transactions included in the summary journal entry.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactionType")
    public String transactionType;
    public GETJournalEntryDetailType withTransactionType(String transactionType) {
        this.transactionType = transactionType;
        return this;
    }
    
    /**
     * Date and time that transferredToAccounting was changed to `Yes`. This field is returned only when transferredToAccounting is `Yes`. Otherwise, this field is `null`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("transferDateTime")
    public OffsetDateTime transferDateTime;
    public GETJournalEntryDetailType withTransferDateTime(OffsetDateTime transferDateTime) {
        this.transferDateTime = transferDateTime;
        return this;
    }
    
    /**
     * User ID of the person who changed transferredToAccounting to `Yes`. This field is returned only when transferredToAccounting is `Yes`. Otherwise, this field is `null`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transferredBy")
    public String transferredBy;
    public GETJournalEntryDetailType withTransferredBy(String transferredBy) {
        this.transferredBy = transferredBy;
        return this;
    }
    
    /**
     * Status shows whether the journal entry has been transferred to an accounting system. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transferredToAccounting")
    public GETJournalEntryDetailTypeTransferredToAccountingEnum transferredToAccounting;
    public GETJournalEntryDetailType withTransferredToAccounting(GETJournalEntryDetailTypeTransferredToAccountingEnum transferredToAccounting) {
        this.transferredToAccounting = transferredToAccounting;
        return this;
    }
    
}
