<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class GETCreateLocalGatewayRouteRequest
{
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=Action')]
    public GETCreateLocalGatewayRouteActionEnum $action;
    
    /**
     * The CIDR range used for destination matches. Routing decisions are based on the most specific match.
     * 
     * @var ?string $destinationCidrBlock
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=DestinationCidrBlock')]
    public ?string $destinationCidrBlock = null;
    
    /**
     *  The ID of the prefix list. Use a prefix list in place of <code>DestinationCidrBlock</code>. You cannot use <code>DestinationPrefixListId</code> and <code>DestinationCidrBlock</code> in the same request. 
     * 
     * @var ?string $destinationPrefixListId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=DestinationPrefixListId')]
    public ?string $destinationPrefixListId = null;
    
    /**
     * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
     * 
     * @var ?bool $dryRun
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=DryRun')]
    public ?bool $dryRun = null;
    
    /**
     * The ID of the local gateway route table.
     * 
     * @var string $localGatewayRouteTableId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=LocalGatewayRouteTableId')]
    public string $localGatewayRouteTableId;
    
    /**
     * The ID of the virtual interface group.
     * 
     * @var ?string $localGatewayVirtualInterfaceGroupId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=LocalGatewayVirtualInterfaceGroupId')]
    public ?string $localGatewayVirtualInterfaceGroupId = null;
    
    /**
     * The ID of the network interface.
     * 
     * @var ?string $networkInterfaceId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=NetworkInterfaceId')]
    public ?string $networkInterfaceId = null;
    
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=Version')]
    public GETCreateLocalGatewayRouteVersionEnum $version;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Algorithm')]
    public ?string $xAmzAlgorithm = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Content-Sha256')]
    public ?string $xAmzContentSha256 = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Credential')]
    public ?string $xAmzCredential = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Date')]
    public ?string $xAmzDate = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Security-Token')]
    public ?string $xAmzSecurityToken = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Signature')]
    public ?string $xAmzSignature = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-SignedHeaders')]
    public ?string $xAmzSignedHeaders = null;
    
	public function __construct()
	{
		$this->action = \OpenAPI\OpenAPI\Models\Operations\GETCreateLocalGatewayRouteActionEnum::CREATE_LOCAL_GATEWAY_ROUTE;
		$this->destinationCidrBlock = null;
		$this->destinationPrefixListId = null;
		$this->dryRun = null;
		$this->localGatewayRouteTableId = "";
		$this->localGatewayVirtualInterfaceGroupId = null;
		$this->networkInterfaceId = null;
		$this->version = \OpenAPI\OpenAPI\Models\Operations\GETCreateLocalGatewayRouteVersionEnum::TWO_THOUSAND_AND_SIXTEEN1115;
		$this->xAmzAlgorithm = null;
		$this->xAmzContentSha256 = null;
		$this->xAmzCredential = null;
		$this->xAmzDate = null;
		$this->xAmzSecurityToken = null;
		$this->xAmzSignature = null;
		$this->xAmzSignedHeaders = null;
	}
}
