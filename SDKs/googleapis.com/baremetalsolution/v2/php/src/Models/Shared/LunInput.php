<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * LunInput - A storage volume logical unit number (LUN).
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class LunInput
{
    /**
     * Display if this LUN is a boot LUN.
     * 
     * @var ?bool $bootLun
     */
	#[\JMS\Serializer\Annotation\SerializedName('bootLun')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $bootLun = null;
    
    /**
     * An identifier for the LUN, generated by the backend.
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * The LUN multiprotocol type ensures the characteristics of the LUN are optimized for each operating system.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\LunMultiprotocolTypeEnum $multiprotocolType
     */
	#[\JMS\Serializer\Annotation\SerializedName('multiprotocolType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\LunMultiprotocolTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?LunMultiprotocolTypeEnum $multiprotocolType = null;
    
    /**
     * Display if this LUN can be shared between multiple physical servers.
     * 
     * @var ?bool $shareable
     */
	#[\JMS\Serializer\Annotation\SerializedName('shareable')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $shareable = null;
    
    /**
     * The size of this LUN, in gigabytes.
     * 
     * @var ?string $sizeGb
     */
	#[\JMS\Serializer\Annotation\SerializedName('sizeGb')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $sizeGb = null;
    
    /**
     * The state of this storage volume.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\LunStateEnum $state
     */
	#[\JMS\Serializer\Annotation\SerializedName('state')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\LunStateEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?LunStateEnum $state = null;
    
    /**
     * The storage type for this LUN.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\LunStorageTypeEnum $storageType
     */
	#[\JMS\Serializer\Annotation\SerializedName('storageType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\LunStorageTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?LunStorageTypeEnum $storageType = null;
    
    /**
     * Display the storage volume for this LUN.
     * 
     * @var ?string $storageVolume
     */
	#[\JMS\Serializer\Annotation\SerializedName('storageVolume')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $storageVolume = null;
    
    /**
     * The WWID for this LUN.
     * 
     * @var ?string $wwid
     */
	#[\JMS\Serializer\Annotation\SerializedName('wwid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $wwid = null;
    
	public function __construct()
	{
		$this->bootLun = null;
		$this->id = null;
		$this->multiprotocolType = null;
		$this->shareable = null;
		$this->sizeGb = null;
		$this->state = null;
		$this->storageType = null;
		$this->storageVolume = null;
		$this->wwid = null;
	}
}
