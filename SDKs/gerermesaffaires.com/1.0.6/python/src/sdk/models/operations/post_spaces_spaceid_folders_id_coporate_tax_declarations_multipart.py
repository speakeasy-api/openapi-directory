"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartSecurity:
    
    gma_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataAccountingWorkbookEnum(str, Enum):
    CUSTOMER = 'customer'
    PROVIDER = 'provider'
    BANK = 'bank'
    CASH_WOUCHER = 'cashWoucher'
    FISCAL = 'fiscal'
    INSURANCE = 'insurance'
    SOCIAL = 'social'
    OTHER = 'other'
    PERMANENT = 'permanent'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataAccounting:
    
    accounted_on: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountedOn'), 'exclude': lambda f: f is None }})  
    workbook: Optional[PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataAccountingWorkbookEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Workbook'), 'exclude': lambda f: f is None }})  
    year_month: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('YearMonth'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataFile:
    
    content: bytes = dataclasses.field(metadata={'multipart_form': { 'content': True }})  
    file: str = dataclasses.field(metadata={'multipart_form': { 'field_name': 'File' }})  
    
class PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataOrderEnum(str, Enum):
    ONEST_ADVANCE = '1st advance'
    TWOND_ADVANCE = '2nd advance'
    THREERD_ADVANCE = '3rd advance'
    FOURTH_ADVANCE = '4th advance'
    REGULARIZATION = 'regularization'


@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormData1:
    r"""Corporate tax declaration to add (either (DeclarationDate,DocumentId) either (File,Name,Content64Encoded,Title,DeclarationDate) is mandatory)"""
    
    file: PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataFile = dataclasses.field(metadata={'multipart_form': { 'file': True }})  
    title: str = dataclasses.field(metadata={'multipart_form': { 'field_name': 'Title' }})  
    accounting: Optional[PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataAccounting] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'Accounting', 'json': True }})  
    amount: Optional[float] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'Amount' }})  
    author: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'Author' }})  
    code: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'Code' }})  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'Comment' }})  
    date_: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'Date' }})  
    declaration_date: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'DeclarationDate' }})  
    order: Optional[PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataOrderEnum] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'Order' }})  
    rate: Optional[float] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'Rate' }})  
    tax_base: Optional[float] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'TaxBase' }})  
    

@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""Id of the folder result and taxation"""  
    request_body: PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormData1 = dataclasses.field(metadata={'request': { 'media_type': 'multipart/form-data' }})
    r"""Corporate tax declaration to add (either (DeclarationDate,DocumentId) either (File,Name,Content64Encoded,Title,DeclarationDate) is mandatory)"""  
    space_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'spaceId', 'style': 'simple', 'explode': False }})
    r"""Id of the space"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipart201ApplicationJSON:
    r"""Id of document created"""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    post_spaces_space_id_folders_id_coporate_tax_declarations_multipart_201_application_json_object: Optional[PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipart201ApplicationJSON] = dataclasses.field(default=None)
    r"""Id of document created"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    