/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetAuditCaseRequest {
    /**
     * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=api_key")
    public String apiKey;

    public GetAuditCaseRequest withApiKey(String apiKey) {
        this.apiKey = apiKey;
        return this;
    }
    
    /**
     * Primary/foreign key for audit tables
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=audit_case_id")
    public String[] auditCaseId;

    public GetAuditCaseRequest withAuditCaseId(String[] auditCaseId) {
        this.auditCaseId = auditCaseId;
        return this;
    }
    
    /**
     * The audit issue. Each subcategory has an unique ID
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=audit_id")
    public Integer[] auditId;

    public GetAuditCaseRequest withAuditId(Integer[] auditId) {
        this.auditId = auditId;
        return this;
    }
    
    /**
     * A unique identifier assigned to each candidate registered with the FEC.
     * If a person runs for several offices, that person will have separate candidate IDs for each office.
     * First character indicates office - [P]residential, [H]ouse, [S]enate].
     * Second character is the last digit of the two-year period the ID was created.
     * Third and fourth is the candidate state. Presidential IDs don't have state.
     * Fifth and sixth is the district when the candidate first ran. This does not change if the
     * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
     * The rest is sequence.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=candidate_id")
    public String[] candidateId;

    public GetAuditCaseRequest withCandidateId(String[] candidateId) {
        this.candidateId = candidateId;
        return this;
    }
    
    /**
     * Type of committee:
     *         - H or S - Congressional
     *         - P - Presidential
     *         - X or Y or Z - Party
     *         - N or Q - PAC
     *         - I - Independent expenditure
     *         - O - Super PAC 
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=committee_designation")
    public String committeeDesignation;

    public GetAuditCaseRequest withCommitteeDesignation(String committeeDesignation) {
        this.committeeDesignation = committeeDesignation;
        return this;
    }
    
    /**
     * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=committee_id")
    public String[] committeeId;

    public GetAuditCaseRequest withCommitteeId(String[] committeeId) {
        this.committeeId = committeeId;
        return this;
    }
    
    /**
     * The one-letter type code of the organization:
     *         - C communication cost
     *         - D delegate
     *         - E electioneering communication
     *         - H House
     *         - I independent expenditure filer (not a committee)
     *         - N PAC - nonqualified
     *         - O independent expenditure-only (super PACs)
     *         - P presidential
     *         - Q PAC - qualified
     *         - S Senate
     *         - U single candidate independent expenditure
     *         - V PAC with non-contribution account, nonqualified
     *         - W PAC with non-contribution account, qualified
     *         - X party, nonqualified
     *         - Y party, qualified
     *         - Z national party non-federal account
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=committee_type")
    public String[] committeeType;

    public GetAuditCaseRequest withCommitteeType(String[] committeeType) {
        this.committeeType = committeeType;
        return this;
    }
    
    /**
     * Filter records to only those that are applicable to a given two-year
     * period. This cycle follows the traditional House election cycle and
     * subdivides the presidential and Senate elections into comparable
     * two-year blocks. The cycle begins with an odd year and is named for its
     * ending, even year.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=cycle")
    public Integer[] cycle;

    public GetAuditCaseRequest withCycle(Integer[] cycle) {
        this.cycle = cycle;
        return this;
    }
    
    /**
     * Filter records to only those that are applicable to a given two-year
     * period. This cycle follows the traditional House election cycle and
     * subdivides the presidential and Senate elections into comparable
     * two-year blocks. The cycle begins with an odd year and is named for its
     * ending, even year.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=max_election_cycle")
    public Integer maxElectionCycle;

    public GetAuditCaseRequest withMaxElectionCycle(Integer maxElectionCycle) {
        this.maxElectionCycle = maxElectionCycle;
        return this;
    }
    
    /**
     * Filter records to only those that are applicable to a given two-year
     * period. This cycle follows the traditional House election cycle and
     * subdivides the presidential and Senate elections into comparable
     * two-year blocks. The cycle begins with an odd year and is named for its
     * ending, even year.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=min_election_cycle")
    public Integer minElectionCycle;

    public GetAuditCaseRequest withMinElectionCycle(Integer minElectionCycle) {
        this.minElectionCycle = minElectionCycle;
        return this;
    }
    
    /**
     * For paginating through results, starting at page 1
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    public Integer page;

    public GetAuditCaseRequest withPage(Integer page) {
        this.page = page;
        return this;
    }
    
    /**
     * The number of results returned per page. Defaults to 20.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=per_page")
    public Integer perPage;

    public GetAuditCaseRequest withPerPage(Integer perPage) {
        this.perPage = perPage;
        return this;
    }
    
    /**
     * Audit category ID (table PK)
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=primary_category_id")
    public String primaryCategoryId;

    public GetAuditCaseRequest withPrimaryCategoryId(String primaryCategoryId) {
        this.primaryCategoryId = primaryCategoryId;
        return this;
    }
    
    /**
     * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=q")
    public String[] q;

    public GetAuditCaseRequest withQ(String[] q) {
        this.q = q;
        return this;
    }
    
    /**
     * Name of candidate running for office
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=qq")
    public String[] qq;

    public GetAuditCaseRequest withQq(String[] qq) {
        this.qq = qq;
        return this;
    }
    
    /**
     * Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    public String[] sort;

    public GetAuditCaseRequest withSort(String[] sort) {
        this.sort = sort;
        return this;
    }
    
    /**
     * Hide null values on sorted column(s).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_hide_null")
    public Boolean sortHideNull;

    public GetAuditCaseRequest withSortHideNull(Boolean sortHideNull) {
        this.sortHideNull = sortHideNull;
        return this;
    }
    
    /**
     * Toggle that filters out all rows having sort column that is non-null
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_null_only")
    public Boolean sortNullOnly;

    public GetAuditCaseRequest withSortNullOnly(Boolean sortNullOnly) {
        this.sortNullOnly = sortNullOnly;
        return this;
    }
    
    /**
     * Toggle that sorts null values last
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_nulls_last")
    public Boolean sortNullsLast;

    public GetAuditCaseRequest withSortNullsLast(Boolean sortNullsLast) {
        this.sortNullsLast = sortNullsLast;
        return this;
    }
    
    /**
     * The finding id of an audit. Finding are a category of broader issues. Each category has an unique ID.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sub_category_id")
    public String subCategoryId;

    public GetAuditCaseRequest withSubCategoryId(String subCategoryId) {
        this.subCategoryId = subCategoryId;
        return this;
    }
    
    public GetAuditCaseRequest(@JsonProperty("api_key") String apiKey) {
        this.apiKey = apiKey;
  }
}
