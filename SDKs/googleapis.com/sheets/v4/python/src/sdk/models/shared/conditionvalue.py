"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ConditionValueRelativeDateEnum(str, Enum):
    r"""A relative date (based on the current date). Valid only if the type is DATE_BEFORE, DATE_AFTER, DATE_ON_OR_BEFORE or DATE_ON_OR_AFTER. Relative dates are not supported in data validation. They are supported only in conditional formatting and conditional filters."""
    RELATIVE_DATE_UNSPECIFIED = 'RELATIVE_DATE_UNSPECIFIED'
    PAST_YEAR = 'PAST_YEAR'
    PAST_MONTH = 'PAST_MONTH'
    PAST_WEEK = 'PAST_WEEK'
    YESTERDAY = 'YESTERDAY'
    TODAY = 'TODAY'
    TOMORROW = 'TOMORROW'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConditionValue:
    r"""The value of the condition."""
    
    relative_date: Optional[ConditionValueRelativeDateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relativeDate'), 'exclude': lambda f: f is None }})
    r"""A relative date (based on the current date). Valid only if the type is DATE_BEFORE, DATE_AFTER, DATE_ON_OR_BEFORE or DATE_ON_OR_AFTER. Relative dates are not supported in data validation. They are supported only in conditional formatting and conditional filters."""  
    user_entered_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userEnteredValue'), 'exclude': lambda f: f is None }})
    r"""A value the condition is based on. The value is parsed as if the user typed into a cell. Formulas are supported (and must begin with an `=` or a '+')."""  
    