"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class FulfillmentPolicy:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_fulfillment_policy(self, request: shared.FulfillmentPolicyRequest, security: operations.CreateFulfillmentPolicySecurity) -> operations.CreateFulfillmentPolicyResponse:
        r"""This method creates a new fulfillment policy where the policy encapsulates seller's terms for fulfilling item purchases. Fulfillment policies include the shipment options that the seller offers to buyers.  <br/><br/>Each policy targets a specific eBay marketplace and a category group type, and you can create multiple policies for each combination. <br/><br/>A successful request returns the <b>getFulfillmentPolicy</b> URI to the new policy in the <b>Location</b> response header and the ID for the new policy is returned in the response payload.  <p class=\\"tablenote\\"><b>Tip:</b> For details on creating and using the business policies supported by the Account API, see <a href=\\"/api-docs/sell/static/seller-accounts/business-policies.html\\">eBay business policies</a>.</p>  <p><b>Using the eBay standard envelope service (eSE)</b></p>  <p>The eBay standard envelope service (eSE) is a domestic envelope service with tracking through eBay. This service applies to specific Trading Cards categories (not all categories are supported), and to Coins & Paper Money, Postcards, and Stamps. See <a href=\\"/api-docs/sell/static/seller-accounts/using-the-ebay-standard-envelope-service.html\\" target=\\"_blank\\">Using the eBay standard envelope (eSE) service</a>.</p>"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/fulfillment_policy/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateFulfillmentPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SetFulfillmentPolicyResponse])
                res.set_fulfillment_policy_response = out
        elif http_res.status_code in [400, 500]:
            pass

        return res

    def delete_fulfillment_policy(self, request: operations.DeleteFulfillmentPolicyRequest, security: operations.DeleteFulfillmentPolicySecurity) -> operations.DeleteFulfillmentPolicyResponse:
        r"""This method deletes a fulfillment policy. Supply the ID of the policy you want to delete in the <b>fulfillmentPolicyId</b> path parameter."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteFulfillmentPolicyRequest, base_url, '/fulfillment_policy/{fulfillmentPolicyId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteFulfillmentPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_fulfillment_policies(self, request: operations.GetFulfillmentPoliciesRequest, security: operations.GetFulfillmentPoliciesSecurity) -> operations.GetFulfillmentPoliciesResponse:
        r"""This method retrieves all the fulfillment policies configured for the marketplace you specify using the <code>marketplace_id</code> query parameter.  <br/><br/><b>Marketplaces and locales</b>  <br/><br/>Get the correct policies for a marketplace that supports multiple locales using the <code>Content-Language</code> request header. For example, get the policies for the French locale of the Canadian marketplace by specifying <code>fr-CA</code> for the <code>Content-Language</code> header. Likewise, target the Dutch locale of the Belgium marketplace by setting <code>Content-Language: nl-BE</code>. For details on header values, see <a href=\\"/api-docs/static/rest-request-components.html#HTTP\\" target=\\"_blank\\">HTTP request headers</a>."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/fulfillment_policy'
        
        query_params = utils.get_query_params(operations.GetFulfillmentPoliciesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFulfillmentPoliciesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FulfillmentPolicyResponse])
                res.fulfillment_policy_response = out
        elif http_res.status_code in [400, 500]:
            pass

        return res

    def get_fulfillment_policy(self, request: operations.GetFulfillmentPolicyRequest, security: operations.GetFulfillmentPolicySecurity) -> operations.GetFulfillmentPolicyResponse:
        r"""This method retrieves the complete details of a fulfillment policy. Supply the ID of the policy you want to retrieve using the <b>fulfillmentPolicyId</b> path parameter."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFulfillmentPolicyRequest, base_url, '/fulfillment_policy/{fulfillmentPolicyId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFulfillmentPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FulfillmentPolicy])
                res.fulfillment_policy = out
        elif http_res.status_code in [400, 404, 500]:
            pass

        return res

    def get_fulfillment_policy_by_name(self, request: operations.GetFulfillmentPolicyByNameRequest, security: operations.GetFulfillmentPolicyByNameSecurity) -> operations.GetFulfillmentPolicyByNameResponse:
        r"""This method retrieves the details for a specific fulfillment policy. In the request, supply both the policy <code>name</code> and its associated <code>marketplace_id</code> as query parameters.   <br/><br/><b>Marketplaces and locales</b>  <br/><br/>Get the correct policy for a marketplace that supports multiple locales using the <code>Content-Language</code> request header. For example, get a policy for the French locale of the Canadian marketplace by specifying <code>fr-CA</code> for the <code>Content-Language</code> header. Likewise, target the Dutch locale of the Belgium marketplace by setting <code>Content-Language: nl-BE</code>. For details on header values, see <a href=\\"/api-docs/static/rest-request-components.html#HTTP\\">HTTP request headers</a>."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/fulfillment_policy/get_by_policy_name'
        
        query_params = utils.get_query_params(operations.GetFulfillmentPolicyByNameRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFulfillmentPolicyByNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FulfillmentPolicy])
                res.fulfillment_policy = out
        elif http_res.status_code in [400, 500]:
            pass

        return res

    def update_fulfillment_policy(self, request: operations.UpdateFulfillmentPolicyRequest, security: operations.UpdateFulfillmentPolicySecurity) -> operations.UpdateFulfillmentPolicyResponse:
        r"""This method updates an existing fulfillment policy. Specify the policy you want to update using the <b>fulfillment_policy_id</b> path parameter. Supply a complete policy payload with the updates you want to make; this call overwrites the existing policy with the new details specified in the payload."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateFulfillmentPolicyRequest, base_url, '/fulfillment_policy/{fulfillmentPolicyId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "fulfillment_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateFulfillmentPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SetFulfillmentPolicyResponse])
                res.set_fulfillment_policy_response = out
        elif http_res.status_code in [400, 404, 500]:
            pass

        return res

    