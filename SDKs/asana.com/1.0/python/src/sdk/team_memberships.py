"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class TeamMemberships:
    r"""This object determines if a user is a member of a team."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_team_membership(self, request: operations.GetTeamMembershipRequest) -> operations.GetTeamMembershipResponse:
        r"""Get a team membership
        Returns the complete team membership record for a single team membership.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamMembershipRequest, base_url, '/team_memberships/{team_membership_gid}', request)
        
        query_params = utils.get_query_params(operations.GetTeamMembershipRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamMembershipResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTeamMembership200ApplicationJSON])
                res.get_team_membership_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_team_memberships(self, request: operations.GetTeamMembershipsRequest) -> operations.GetTeamMembershipsResponse:
        r"""Get team memberships
        Returns compact team membership records.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/team_memberships'
        
        query_params = utils.get_query_params(operations.GetTeamMembershipsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamMembershipsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTeamMemberships200ApplicationJSON])
                res.get_team_memberships_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_team_memberships_for_team(self, request: operations.GetTeamMembershipsForTeamRequest) -> operations.GetTeamMembershipsForTeamResponse:
        r"""Get memberships from a team
        Returns the compact team memberships for the team.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamMembershipsForTeamRequest, base_url, '/teams/{team_gid}/team_memberships', request)
        
        query_params = utils.get_query_params(operations.GetTeamMembershipsForTeamRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamMembershipsForTeamResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTeamMembershipsForTeam200ApplicationJSON])
                res.get_team_memberships_for_team_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_team_memberships_for_user(self, request: operations.GetTeamMembershipsForUserRequest) -> operations.GetTeamMembershipsForUserResponse:
        r"""Get memberships from a user
        Returns the compact team membership records for the user.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamMembershipsForUserRequest, base_url, '/users/{user_gid}/team_memberships', request)
        
        query_params = utils.get_query_params(operations.GetTeamMembershipsForUserRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamMembershipsForUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTeamMembershipsForUser200ApplicationJSON])
                res.get_team_memberships_for_user_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    