// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListGitHubAccountTokenNamesXAmzTargetEnum
type ListGitHubAccountTokenNamesXAmzTargetEnum string

const (
	ListGitHubAccountTokenNamesXAmzTargetEnumCodeDeploy20141006ListGitHubAccountTokenNames ListGitHubAccountTokenNamesXAmzTargetEnum = "CodeDeploy_20141006.ListGitHubAccountTokenNames"
)

func (e *ListGitHubAccountTokenNamesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeDeploy_20141006.ListGitHubAccountTokenNames":
		*e = ListGitHubAccountTokenNamesXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListGitHubAccountTokenNamesXAmzTargetEnum: %s", s)
	}
}

type ListGitHubAccountTokenNamesHeaders struct {
	XAmzAlgorithm     *string                                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListGitHubAccountTokenNamesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListGitHubAccountTokenNamesRequest struct {
	Headers ListGitHubAccountTokenNamesHeaders
	Request shared.ListGitHubAccountTokenNamesInput `request:"mediaType=application/json"`
}

type ListGitHubAccountTokenNamesResponse struct {
	ContentType string
	// InvalidNextTokenException
	InvalidNextTokenException interface{}
	// Success
	ListGitHubAccountTokenNamesOutput *shared.ListGitHubAccountTokenNamesOutput
	// OperationNotSupportedException
	OperationNotSupportedException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
	// ResourceValidationException
	ResourceValidationException interface{}
}
