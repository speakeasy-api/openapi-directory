/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.time.LocalDate;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class SearchImagesQueryParams {
    /**
     * Show images added on the specified date
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=added_date")
    public LocalDate addedDate;
    public SearchImagesQueryParams withAddedDate(LocalDate addedDate) {
        this.addedDate = addedDate;
        return this;
    }
    
    /**
     * Show images added before the specified date
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=added_date_end")
    public LocalDate addedDateEnd;
    public SearchImagesQueryParams withAddedDateEnd(LocalDate addedDateEnd) {
        this.addedDateEnd = addedDateEnd;
        return this;
    }
    
    /**
     * Show images added on or after the specified date
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=added_date_start")
    public LocalDate addedDateStart;
    public SearchImagesQueryParams withAddedDateStart(LocalDate addedDateStart) {
        this.addedDateStart = addedDateStart;
        return this;
    }
    
    /**
     * For AI-powered search, specify the industry to target; requires that the `ai_search` parameter is set to true
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ai_industry")
    public SearchImagesAiIndustryEnum aiIndustry;
    public SearchImagesQueryParams withAiIndustry(SearchImagesAiIndustryEnum aiIndustry) {
        this.aiIndustry = aiIndustry;
        return this;
    }
    
    /**
     * For AI-powered search, specify the maximum number of labels to return
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ai_labels_limit")
    public Long aiLabelsLimit;
    public SearchImagesQueryParams withAiLabelsLimit(Long aiLabelsLimit) {
        this.aiLabelsLimit = aiLabelsLimit;
        return this;
    }
    
    /**
     * For AI-powered search, specify the goal of the media; requires that the `ai_search` parameter is set to true
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ai_objective")
    public SearchImagesAiObjectiveEnum aiObjective;
    public SearchImagesQueryParams withAiObjective(SearchImagesAiObjectiveEnum aiObjective) {
        this.aiObjective = aiObjective;
        return this;
    }
    
    /**
     * Set to true and specify the `ai_objective` and `ai_industry` parameters to use AI-powered search; the API returns information about how well images meet the objective for the industry 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ai_search")
    public Boolean aiSearch;
    public SearchImagesQueryParams withAiSearch(Boolean aiSearch) {
        this.aiSearch = aiSearch;
        return this;
    }
    
    /**
     * Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=aspect_ratio")
    public Double aspectRatio;
    public SearchImagesQueryParams withAspectRatio(Double aspectRatio) {
        this.aspectRatio = aspectRatio;
        return this;
    }
    
    /**
     * Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=aspect_ratio_max")
    public Double aspectRatioMax;
    public SearchImagesQueryParams withAspectRatioMax(Double aspectRatioMax) {
        this.aspectRatioMax = aspectRatioMax;
        return this;
    }
    
    /**
     * Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=aspect_ratio_min")
    public Double aspectRatioMin;
    public SearchImagesQueryParams withAspectRatioMin(Double aspectRatioMin) {
        this.aspectRatioMin = aspectRatioMin;
        return this;
    }
    
    /**
     * Show images with the specified Shutterstock-defined category; specify a category name or ID
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=category")
    public String category;
    public SearchImagesQueryParams withCategory(String category) {
        this.category = category;
        return this;
    }
    
    /**
     * Specify either a hexadecimal color in the format '4F21EA' or 'grayscale'; the API returns images that use similar colors
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=color")
    public String color;
    public SearchImagesQueryParams withColor(String color) {
        this.color = color;
        return this;
    }
    
    /**
     * Show images with the specified contributor names or IDs, allows multiple
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=contributor")
    public String[] contributor;
    public SearchImagesQueryParams withContributor(String[] contributor) {
        this.contributor = contributor;
        return this;
    }
    
    /**
     * Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=contributor_country")
    public Object contributorCountry;
    public SearchImagesQueryParams withContributorCountry(Object contributorCountry) {
        this.contributorCountry = contributorCountry;
        return this;
    }
    
    /**
     * Fields to display in the response; see the documentation for the fields parameter in the overview section
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    public String fields;
    public SearchImagesQueryParams withFields(String fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * (Deprecated; use height_from and height_to instead) Show images with the specified height
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=height")
    public Long height;
    public SearchImagesQueryParams withHeight(Long height) {
        this.height = height;
        return this;
    }
    
    /**
     * Show images with the specified height or larger, in pixels
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=height_from")
    public Long heightFrom;
    public SearchImagesQueryParams withHeightFrom(Long heightFrom) {
        this.heightFrom = heightFrom;
        return this;
    }
    
    /**
     * Show images with the specified height or smaller, in pixels
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=height_to")
    public Long heightTo;
    public SearchImagesQueryParams withHeightTo(Long heightTo) {
        this.heightTo = heightTo;
        return this;
    }
    
    /**
     * Show images of the specified type
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=image_type")
    public SearchImagesImageTypeEnum[] imageType;
    public SearchImagesQueryParams withImageType(SearchImagesImageTypeEnum[] imageType) {
        this.imageType = imageType;
        return this;
    }
    
    /**
     * Hide results with potentially unsafe keywords
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=keyword_safe_search")
    public Boolean keywordSafeSearch;
    public SearchImagesQueryParams withKeywordSafeSearch(Boolean keywordSafeSearch) {
        this.keywordSafeSearch = keywordSafeSearch;
        return this;
    }
    
    /**
     * Set query and result language (uses Accept-Language header if not set)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=language")
    public org.openapis.openapi.models.shared.LanguageEnum language;
    public SearchImagesQueryParams withLanguage(org.openapis.openapi.models.shared.LanguageEnum language) {
        this.language = language;
        return this;
    }
    
    /**
     * Show only images with the specified license
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=license")
    public SearchImagesLicenseEnum[] license;
    public SearchImagesQueryParams withLicense(SearchImagesLicenseEnum[] license) {
        this.license = license;
        return this;
    }
    
    /**
     * Show image results with the specified model IDs
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=model")
    public String[] model;
    public SearchImagesQueryParams withModel(String[] model) {
        this.model = model;
        return this;
    }
    
    /**
     * Show image results with horizontal or vertical orientation
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=orientation")
    public SearchImagesOrientationEnum orientation;
    public SearchImagesQueryParams withOrientation(SearchImagesOrientationEnum orientation) {
        this.orientation = orientation;
        return this;
    }
    
    /**
     * Page number
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    public Long page;
    public SearchImagesQueryParams withPage(Long page) {
        this.page = page;
        return this;
    }
    
    /**
     * Show images that feature people of the specified age category
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=people_age")
    public SearchImagesPeopleAgeEnum peopleAge;
    public SearchImagesQueryParams withPeopleAge(SearchImagesPeopleAgeEnum peopleAge) {
        this.peopleAge = peopleAge;
        return this;
    }
    
    /**
     * Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=people_ethnicity")
    public SearchImagesPeopleEthnicityEnum[] peopleEthnicity;
    public SearchImagesQueryParams withPeopleEthnicity(SearchImagesPeopleEthnicityEnum[] peopleEthnicity) {
        this.peopleEthnicity = peopleEthnicity;
        return this;
    }
    
    /**
     * Show images with people of the specified gender
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=people_gender")
    public SearchImagesPeopleGenderEnum peopleGender;
    public SearchImagesQueryParams withPeopleGender(SearchImagesPeopleGenderEnum peopleGender) {
        this.peopleGender = peopleGender;
        return this;
    }
    
    /**
     * Show images of people with a signed model release
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=people_model_released")
    public Boolean peopleModelReleased;
    public SearchImagesQueryParams withPeopleModelReleased(Boolean peopleModelReleased) {
        this.peopleModelReleased = peopleModelReleased;
        return this;
    }
    
    /**
     * Show images with the specified number of people
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=people_number")
    public Long peopleNumber;
    public SearchImagesQueryParams withPeopleNumber(Long peopleNumber) {
        this.peopleNumber = peopleNumber;
        return this;
    }
    
    /**
     * Number of results per page
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=per_page")
    public Long perPage;
    public SearchImagesQueryParams withPerPage(Long perPage) {
        this.perPage = perPage;
        return this;
    }
    
    /**
     * One or more search terms separated by spaces; you can use NOT to filter out images that match a term
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=query")
    public String query;
    public SearchImagesQueryParams withQuery(String query) {
        this.query = query;
        return this;
    }
    
    /**
     * Raise or lower search result rankings based on the result's relevance to a specified region; you can provide a country code or an IP address from which the API infers a country
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=region")
    public Object region;
    public SearchImagesQueryParams withRegion(Object region) {
        this.region = region;
        return this;
    }
    
    /**
     * Enable or disable safe search
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=safe")
    public Boolean safe;
    public SearchImagesQueryParams withSafe(Boolean safe) {
        this.safe = safe;
        return this;
    }
    
    /**
     * Sort by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    public SearchImagesSortEnum sort;
    public SearchImagesQueryParams withSort(SearchImagesSortEnum sort) {
        this.sort = sort;
        return this;
    }
    
    /**
     * Spellcheck the search query and return results on suggested spellings
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=spellcheck_query")
    public Boolean spellcheckQuery;
    public SearchImagesQueryParams withSpellcheckQuery(Boolean spellcheckQuery) {
        this.spellcheckQuery = spellcheckQuery;
        return this;
    }
    
    /**
     * Amount of detail to render in the response
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=view")
    public SearchImagesViewEnum view;
    public SearchImagesQueryParams withView(SearchImagesViewEnum view) {
        this.view = view;
        return this;
    }
    
    /**
     * (Deprecated; use width_from and width_to instead) Show images with the specified width
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=width")
    public Long width;
    public SearchImagesQueryParams withWidth(Long width) {
        this.width = width;
        return this;
    }
    
    /**
     * Show images with the specified width or larger, in pixels
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=width_from")
    public Long widthFrom;
    public SearchImagesQueryParams withWidthFrom(Long widthFrom) {
        this.widthFrom = widthFrom;
        return this;
    }
    
    /**
     * Show images with the specified width or smaller, in pixels
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=width_to")
    public Long widthTo;
    public SearchImagesQueryParams withWidthTo(Long widthTo) {
        this.widthTo = widthTo;
        return this;
    }
    
}
