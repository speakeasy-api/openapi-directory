/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Image - Image model to be sent as JSON.
 */
public class Image {
    /**
     * Date the image was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created")
    public OffsetDateTime created;
    public Image withCreated(OffsetDateTime created) {
        this.created = created;
        return this;
    }
    
    /**
     * Height of the image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("height")
    public Integer height;
    public Image withHeight(Integer height) {
        this.height = height;
        return this;
    }
    
    /**
     * Id of the image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Image withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The URI to the original uploaded image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originalImageUri")
    public String originalImageUri;
    public Image withOriginalImageUri(String originalImageUri) {
        this.originalImageUri = originalImageUri;
        return this;
    }
    
    /**
     * Regions associated with this image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("regions")
    public ImageRegion[] regions;
    public Image withRegions(ImageRegion[] regions) {
        this.regions = regions;
        return this;
    }
    
    /**
     * The URI to the (resized) image used for training.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resizedImageUri")
    public String resizedImageUri;
    public Image withResizedImageUri(String resizedImageUri) {
        this.resizedImageUri = resizedImageUri;
        return this;
    }
    
    /**
     * Tags associated with this image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public ImageTag[] tags;
    public Image withTags(ImageTag[] tags) {
        this.tags = tags;
        return this;
    }
    
    /**
     * The URI to the thumbnail of the original image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnailUri")
    public String thumbnailUri;
    public Image withThumbnailUri(String thumbnailUri) {
        this.thumbnailUri = thumbnailUri;
        return this;
    }
    
    /**
     * Width of the image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("width")
    public Integer width;
    public Image withWidth(Integer width) {
        this.width = width;
        return this;
    }
    
}
