"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import httprequest as shared_httprequest
from ..shared import logentryoperation as shared_logentryoperation
from ..shared import logentrysourcelocation as shared_logentrysourcelocation
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class LogEntrySeverityEnum(str, Enum):
    r"""The severity of the log entry. The default value is `LogSeverity.DEFAULT`."""
    DEFAULT = 'DEFAULT'
    DEBUG = 'DEBUG'
    INFO = 'INFO'
    NOTICE = 'NOTICE'
    WARNING = 'WARNING'
    ERROR = 'ERROR'
    CRITICAL = 'CRITICAL'
    ALERT = 'ALERT'
    EMERGENCY = 'EMERGENCY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LogEntry:
    r"""An individual log entry."""
    
    http_request: Optional[shared_httprequest.HTTPRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('httpRequest'), 'exclude': lambda f: f is None }})
    r"""A common proto for logging HTTP requests. Only contains semantics defined by the HTTP specification. Product-specific logging information MUST be defined in a separate message."""  
    insert_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insertId'), 'exclude': lambda f: f is None }})
    r"""A unique ID for the log entry used for deduplication. If omitted, the implementation will generate one based on operation_id."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""A set of user-defined (key, value) data that provides additional information about the log entry."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Required. The log to which this log entry belongs. Examples: `\\"syslog\\"`, `\\"book_log\\"`."""  
    operation: Optional[shared_logentryoperation.LogEntryOperation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operation'), 'exclude': lambda f: f is None }})
    r"""Additional information about a potentially long-running operation with which a log entry is associated."""  
    proto_payload: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protoPayload'), 'exclude': lambda f: f is None }})
    r"""The log entry payload, represented as a protocol buffer that is expressed as a JSON object. The only accepted type currently is AuditLog."""  
    severity: Optional[LogEntrySeverityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('severity'), 'exclude': lambda f: f is None }})
    r"""The severity of the log entry. The default value is `LogSeverity.DEFAULT`."""  
    source_location: Optional[shared_logentrysourcelocation.LogEntrySourceLocation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceLocation'), 'exclude': lambda f: f is None }})
    r"""Additional information about the source code location that produced the log entry."""  
    struct_payload: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('structPayload'), 'exclude': lambda f: f is None }})
    r"""The log entry payload, represented as a structure that is expressed as a JSON object."""  
    text_payload: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textPayload'), 'exclude': lambda f: f is None }})
    r"""The log entry payload, represented as a Unicode string (UTF-8)."""  
    timestamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'exclude': lambda f: f is None }})
    r"""The time the event described by the log entry occurred. If omitted, defaults to operation start time."""  
    trace: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trace'), 'exclude': lambda f: f is None }})
    r"""Optional. Resource name of the trace associated with the log entry, if any. If this field contains a relative resource name, you can assume the name is relative to `//tracing.googleapis.com`. Example: `projects/my-projectid/traces/06796866738c859f2f19b7cfb3214824`"""  
    