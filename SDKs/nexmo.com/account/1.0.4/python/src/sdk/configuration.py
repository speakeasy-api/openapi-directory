"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Configuration:
    r"""Manage the settings on your account"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def change_account_settings(self, request: operations.ChangeAccountSettingsRequest, server_url: Optional[str] = None) -> operations.ChangeAccountSettingsResponse:
        r"""Change Account Settings
        Update the default webhook URLs associated with your account:
          * Callback URL for incoming SMS messages
          * Callback URL for delivery receipts
        
        Note that the URLs you provide must be valid and active. Vonage will check that they return a 200 OK response before the setting is saved.
        """
        base_url = operations.CHANGE_ACCOUNT_SETTINGS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/account/settings'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "account_settings_request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ChangeAccountSettingsRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChangeAccountSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountSettings])
                res.account_settings = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def register_sender(self, request: operations.RegisterSenderRequest, server_url: Optional[str] = None) -> operations.RegisterSenderResponse:
        r"""Register an email sender
        Register an email sender with an API Key for using email with Verify V2.
        """
        base_url = operations.REGISTER_SENDER_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/account/register-sender'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "register_email_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.RegisterSenderRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegisterSenderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RegisterEmailResponse])
                res.register_email_response = out

        return res

    