"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import enterprisecrmeventbusprotoeventexecutiondetailseventattemptstats as shared_enterprisecrmeventbusprotoeventexecutiondetailseventattemptstats
from ..shared import enterprisecrmeventbusprotoeventexecutionsnapshot as shared_enterprisecrmeventbusprotoeventexecutionsnapshot
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class EnterpriseCrmEventbusProtoEventExecutionDetailsEventExecutionStateEnum(str, Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    ON_HOLD = 'ON_HOLD'
    IN_PROCESS = 'IN_PROCESS'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    CANCELED = 'CANCELED'
    RETRY_ON_HOLD = 'RETRY_ON_HOLD'
    SUSPENDED = 'SUSPENDED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EnterpriseCrmEventbusProtoEventExecutionDetails:
    r"""Contains the details of the execution info of this event: this includes the tasks execution details plus the event execution statistics. Next available id: 10"""
    
    event_attempt_stats: Optional[list[shared_enterprisecrmeventbusprotoeventexecutiondetailseventattemptstats.EnterpriseCrmEventbusProtoEventExecutionDetailsEventAttemptStats]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventAttemptStats'), 'exclude': lambda f: f is None }})  
    event_execution_snapshot: Optional[list[shared_enterprisecrmeventbusprotoeventexecutionsnapshot.EnterpriseCrmEventbusProtoEventExecutionSnapshot]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventExecutionSnapshot'), 'exclude': lambda f: f is None }})  
    event_execution_state: Optional[EnterpriseCrmEventbusProtoEventExecutionDetailsEventExecutionStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventExecutionState'), 'exclude': lambda f: f is None }})  
    event_retries_from_beginning_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventRetriesFromBeginningCount'), 'exclude': lambda f: f is None }})
    r"""Indicates the number of times the execution has restarted from the beginning."""  
    log_file_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logFilePath'), 'exclude': lambda f: f is None }})
    r"""The log file path (aka. cns address) for this event."""  
    network_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkAddress'), 'exclude': lambda f: f is None }})
    r"""The network address (aka. bns address) that indicates where the event executor is running."""  
    next_execution_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextExecutionTime'), 'exclude': lambda f: f is None }})
    r"""Next scheduled execution time in case the execution status was RETRY_ON_HOLD."""  
    rye_lock_unheld_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ryeLockUnheldCount'), 'exclude': lambda f: f is None }})
    r"""Used internally and shouldn't be exposed to users. A counter for the cron job to record how many times this event is in in_process state but don't have a lock consecutively/"""  
    