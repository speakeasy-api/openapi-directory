// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type SkcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type SkcerRequestBodyCertificateParameters struct {
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// Full name
	FullName string `json:"FullName"`
	// Enter Roll No
	Udf1 string `json:"UDF1"`
}

// SkcerRequestBodyFormatEnum - The format of the certificate in response.
type SkcerRequestBodyFormatEnum string

const (
	SkcerRequestBodyFormatEnumPdf SkcerRequestBodyFormatEnum = "pdf"
)

func (e SkcerRequestBodyFormatEnum) ToPointer() *SkcerRequestBodyFormatEnum {
	return &e
}

func (e *SkcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = SkcerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SkcerRequestBodyFormatEnum: %v", v)
	}
}

// SkcerRequestBody - Request format
type SkcerRequestBody struct {
	CertificateParameters *SkcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format SkcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Skcer504ApplicationJSONErrorEnum string

const (
	Skcer504ApplicationJSONErrorEnumGatewayTimeout Skcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Skcer504ApplicationJSONErrorEnum) ToPointer() *Skcer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Skcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Skcer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Skcer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Skcer504ApplicationJSONErrorDescriptionEnum string

const (
	Skcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Skcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Skcer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Skcer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Skcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Skcer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Skcer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Skcer504ApplicationJSON - Gateway timeout
type Skcer504ApplicationJSON struct {
	Error            *Skcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Skcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Skcer503ApplicationJSONErrorEnum string

const (
	Skcer503ApplicationJSONErrorEnumServiceUnavailable Skcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Skcer503ApplicationJSONErrorEnum) ToPointer() *Skcer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Skcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Skcer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Skcer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Skcer503ApplicationJSONErrorDescriptionEnum string

const (
	Skcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Skcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Skcer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Skcer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Skcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Skcer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Skcer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Skcer503ApplicationJSON - Service unavailable
type Skcer503ApplicationJSON struct {
	Error            *Skcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Skcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Skcer502ApplicationJSONErrorEnum string

const (
	Skcer502ApplicationJSONErrorEnumBadGatewy Skcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Skcer502ApplicationJSONErrorEnum) ToPointer() *Skcer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Skcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Skcer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Skcer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Skcer502ApplicationJSONErrorDescriptionEnum string

const (
	Skcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Skcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Skcer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Skcer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Skcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Skcer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Skcer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Skcer502ApplicationJSON - Bad gateway
type Skcer502ApplicationJSON struct {
	Error            *Skcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Skcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Skcer500ApplicationJSONErrorEnum string

const (
	Skcer500ApplicationJSONErrorEnumInternalServerError Skcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Skcer500ApplicationJSONErrorEnum) ToPointer() *Skcer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Skcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Skcer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Skcer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Skcer500ApplicationJSONErrorDescriptionEnum string

const (
	Skcer500ApplicationJSONErrorDescriptionEnumInternalServerError Skcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Skcer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Skcer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Skcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Skcer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Skcer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Skcer500ApplicationJSON - Internal server error
type Skcer500ApplicationJSON struct {
	Error            *Skcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Skcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Skcer404ApplicationJSONErrorEnum string

const (
	Skcer404ApplicationJSONErrorEnumRecordNotFound Skcer404ApplicationJSONErrorEnum = "record_not_found"
	Skcer404ApplicationJSONErrorEnumURLNotFound    Skcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Skcer404ApplicationJSONErrorEnum) ToPointer() *Skcer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Skcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Skcer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Skcer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Skcer404ApplicationJSONErrorDescriptionEnum string

const (
	Skcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Skcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Skcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Skcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Skcer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Skcer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Skcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Skcer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Skcer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Skcer404ApplicationJSON - No record found
type Skcer404ApplicationJSON struct {
	Error            *Skcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Skcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Skcer401ApplicationJSONErrorEnum string

const (
	Skcer401ApplicationJSONErrorEnumInvalidAuthentication Skcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Skcer401ApplicationJSONErrorEnumInvalidAuthorization  Skcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Skcer401ApplicationJSONErrorEnum) ToPointer() *Skcer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Skcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Skcer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Skcer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Skcer401ApplicationJSONErrorDescriptionEnum string

const (
	Skcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Skcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Skcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Skcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Skcer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Skcer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Skcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Skcer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Skcer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Skcer401ApplicationJSON - Unauthorized access
type Skcer401ApplicationJSON struct {
	Error            *Skcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Skcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Skcer400ApplicationJSONErrorEnum string

const (
	Skcer400ApplicationJSONErrorEnumMissingParameter Skcer400ApplicationJSONErrorEnum = "missing_parameter"
	Skcer400ApplicationJSONErrorEnumInvalidParameter Skcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Skcer400ApplicationJSONErrorEnumInvalidFormat    Skcer400ApplicationJSONErrorEnum = "invalid_format"
	Skcer400ApplicationJSONErrorEnumInvalidTxnid     Skcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Skcer400ApplicationJSONErrorEnumInvalidConsentid Skcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Skcer400ApplicationJSONErrorEnum) ToPointer() *Skcer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Skcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Skcer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Skcer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Skcer400ApplicationJSONErrorDescriptionEnum string

const (
	Skcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Skcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Skcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Skcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Skcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Skcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Skcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Skcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Skcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Skcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Skcer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Skcer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Skcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Skcer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Skcer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Skcer400ApplicationJSON - Bad request
type Skcer400ApplicationJSON struct {
	Error            *Skcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Skcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type SkcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Skcer400ApplicationJSONObject *Skcer400ApplicationJSON
	// Unauthorized access
	Skcer401ApplicationJSONObject *Skcer401ApplicationJSON
	// No record found
	Skcer404ApplicationJSONObject *Skcer404ApplicationJSON
	// Internal server error
	Skcer500ApplicationJSONObject *Skcer500ApplicationJSON
	// Bad gateway
	Skcer502ApplicationJSONObject *Skcer502ApplicationJSON
	// Service unavailable
	Skcer503ApplicationJSONObject *Skcer503ApplicationJSON
	// Gateway timeout
	Skcer504ApplicationJSONObject *Skcer504ApplicationJSON
}
