// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// DependabotCreateOrUpdateOrgSecretRequestBodyVisibilityEnum - Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
type DependabotCreateOrUpdateOrgSecretRequestBodyVisibilityEnum string

const (
	DependabotCreateOrUpdateOrgSecretRequestBodyVisibilityEnumAll      DependabotCreateOrUpdateOrgSecretRequestBodyVisibilityEnum = "all"
	DependabotCreateOrUpdateOrgSecretRequestBodyVisibilityEnumPrivate  DependabotCreateOrUpdateOrgSecretRequestBodyVisibilityEnum = "private"
	DependabotCreateOrUpdateOrgSecretRequestBodyVisibilityEnumSelected DependabotCreateOrUpdateOrgSecretRequestBodyVisibilityEnum = "selected"
)

func (e DependabotCreateOrUpdateOrgSecretRequestBodyVisibilityEnum) ToPointer() *DependabotCreateOrUpdateOrgSecretRequestBodyVisibilityEnum {
	return &e
}

func (e *DependabotCreateOrUpdateOrgSecretRequestBodyVisibilityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "private":
		fallthrough
	case "selected":
		*e = DependabotCreateOrUpdateOrgSecretRequestBodyVisibilityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DependabotCreateOrUpdateOrgSecretRequestBodyVisibilityEnum: %v", v)
	}
}

type DependabotCreateOrUpdateOrgSecretRequestBody struct {
	// Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/enterprise-server@3.8/rest/reference/dependabot#get-an-organization-public-key) endpoint.
	EncryptedValue *string `json:"encrypted_value,omitempty"`
	// ID of the key you used to encrypt the secret.
	KeyID *string `json:"key_id,omitempty"`
	// An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.8/rest/reference/dependabot#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.8/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/enterprise-server@3.8/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret) endpoints.
	SelectedRepositoryIds []string `json:"selected_repository_ids,omitempty"`
	// Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
	Visibility DependabotCreateOrUpdateOrgSecretRequestBodyVisibilityEnum `json:"visibility"`
}

type DependabotCreateOrUpdateOrgSecretRequest struct {
	RequestBody DependabotCreateOrUpdateOrgSecretRequestBody `request:"mediaType=application/json"`
	// The organization name. The name is not case sensitive.
	Org string `pathParam:"style=simple,explode=false,name=org"`
	// The name of the secret.
	SecretName string `pathParam:"style=simple,explode=false,name=secret_name"`
}

type DependabotCreateOrUpdateOrgSecretResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Response when creating a secret
	EmptyObject map[string]interface{}
}
