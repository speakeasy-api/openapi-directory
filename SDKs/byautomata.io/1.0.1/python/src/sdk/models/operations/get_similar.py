"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import inputcompany as shared_inputcompany
from ..shared import similarcompany as shared_similarcompany
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetSimilarRequest:
    
    link: str = dataclasses.field(metadata={'query_param': { 'field_name': 'link', 'style': 'form', 'explode': True }})
    r"""We'll provide information about related companies based on the site you provide. If a LinkedIn page is sent, we will try to identify the company related to the page. Ex. https://api.byautomata.io/similar?link=ibm.com"""  
    page: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number of search results. Ex. https://api.byautomata.io/similar?link=ibm.com&page=1"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSimilar200ApplicationJSON:
    r"""A successful operation"""
    
    calls_per_month: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calls_per_month'), 'exclude': lambda f: f is None }})  
    companies: Optional[list[shared_similarcompany.SimilarCompany]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('companies'), 'exclude': lambda f: f is None }})  
    count_remaining: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count_remaining'), 'exclude': lambda f: f is None }})  
    input_company: Optional[shared_inputcompany.InputCompany] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('input_company'), 'exclude': lambda f: f is None }})  
    renewal_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('renewal_date'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetSimilarResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_similar_200_application_json_object: Optional[GetSimilar200ApplicationJSON] = dataclasses.field(default=None)
    r"""A successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    