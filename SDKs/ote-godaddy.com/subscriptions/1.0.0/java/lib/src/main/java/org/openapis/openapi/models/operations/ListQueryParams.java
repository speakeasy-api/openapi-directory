/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class ListQueryParams {
    /**
     * Optional details to be included in the response
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=includes")
    public ListIncludesEnum includes;
    public ListQueryParams withIncludes(ListIncludesEnum includes) {
        this.includes = includes;
        return this;
    }
    
    /**
     * Number of Subscriptions to retrieve in this page, starting after offset
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    public Long limit;
    public ListQueryParams withLimit(Long limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * Number of Subscriptions to skip before starting to return paged results (must be a multiple of the limit)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")
    public Long offset;
    public ListQueryParams withOffset(Long offset) {
        this.offset = offset;
        return this;
    }
    
    /**
     * Only return Subscriptions with the specified product groups
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=productGroupKeys")
    public String[] productGroupKeys;
    public ListQueryParams withProductGroupKeys(String[] productGroupKeys) {
        this.productGroupKeys = productGroupKeys;
        return this;
    }
    
    /**
     * Property name that will be used to sort results. "-" indicates descending
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    public ListSortEnum sort;
    public ListQueryParams withSort(ListSortEnum sort) {
        this.sort = sort;
        return this;
    }
    
}
