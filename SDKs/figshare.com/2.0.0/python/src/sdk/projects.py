"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def private_project_article_delete(self, request: operations.PrivateProjectArticleDeleteRequest, security: operations.PrivateProjectArticleDeleteSecurity) -> operations.PrivateProjectArticleDeleteResponse:
        r"""Delete project article
        Delete project article
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PrivateProjectArticleDeleteRequest, base_url, '/account/projects/{project_id}/articles/{article_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateProjectArticleDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 400, 404, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_project_article_details(self, request: operations.PrivateProjectArticleDetailsRequest, security: operations.PrivateProjectArticleDetailsSecurity) -> operations.PrivateProjectArticleDetailsResponse:
        r"""Project article details
        Project article details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PrivateProjectArticleDetailsRequest, base_url, '/account/projects/{project_id}/articles/{article_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateProjectArticleDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProjectArticle])
                res.project_article = out
        elif http_res.status_code in [400, 404, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_project_article_file(self, request: operations.PrivateProjectArticleFileRequest, security: operations.PrivateProjectArticleFileSecurity) -> operations.PrivateProjectArticleFileResponse:
        r"""Project article file details
        Project article file details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PrivateProjectArticleFileRequest, base_url, '/account/projects/{project_id}/articles/{article_id}/files/{file_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateProjectArticleFileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PrivateFile])
                res.private_file = out
        elif http_res.status_code in [400, 404, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_project_article_files(self, request: operations.PrivateProjectArticleFilesRequest, security: operations.PrivateProjectArticleFilesSecurity) -> operations.PrivateProjectArticleFilesResponse:
        r"""Project article list files
        List article files
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PrivateProjectArticleFilesRequest, base_url, '/account/projects/{project_id}/articles/{article_id}/files', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateProjectArticleFilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PrivateFile]])
                res.private_files = out
        elif http_res.status_code in [400, 404, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_project_articles_create(self, request: operations.PrivateProjectArticlesCreateRequest, security: operations.PrivateProjectArticlesCreateSecurity) -> operations.PrivateProjectArticlesCreateResponse:
        r"""Create project article
        Create a new Article and associate it with this project
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PrivateProjectArticlesCreateRequest, base_url, '/account/projects/{project_id}/articles', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "article_project_create", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PrivateProjectArticlesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateProjectArticlesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LocationWarnings])
                res.location_warnings = out
        elif http_res.status_code in [400, 404, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_project_articles_list(self, request: operations.PrivateProjectArticlesListRequest, security: operations.PrivateProjectArticlesListSecurity) -> operations.PrivateProjectArticlesListResponse:
        r"""List project articles
        List project articles
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PrivateProjectArticlesListRequest, base_url, '/account/projects/{project_id}/articles', request)
        
        query_params = utils.get_query_params(operations.PrivateProjectArticlesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateProjectArticlesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Article]])
                res.articles = out
        elif http_res.status_code in [400, 404, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_project_collaborator_delete(self, request: operations.PrivateProjectCollaboratorDeleteRequest, security: operations.PrivateProjectCollaboratorDeleteSecurity) -> operations.PrivateProjectCollaboratorDeleteResponse:
        r"""Remove project collaborator
        Remove project collaborator
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PrivateProjectCollaboratorDeleteRequest, base_url, '/account/projects/{project_id}/collaborators/{user_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateProjectCollaboratorDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 400, 404, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_project_collaborators_invite(self, request: operations.PrivateProjectCollaboratorsInviteRequest, security: operations.PrivateProjectCollaboratorsInviteSecurity) -> operations.PrivateProjectCollaboratorsInviteResponse:
        r"""Invite project collaborators
        Invite users to collaborate on project or view the project
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PrivateProjectCollaboratorsInviteRequest, base_url, '/account/projects/{project_id}/collaborators', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "project_collaborator_invite", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateProjectCollaboratorsInviteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseMessage])
                res.response_message = out
        elif http_res.status_code in [400, 404, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_project_collaborators_list(self, request: operations.PrivateProjectCollaboratorsListRequest, security: operations.PrivateProjectCollaboratorsListSecurity) -> operations.PrivateProjectCollaboratorsListResponse:
        r"""List project collaborators
        List Project collaborators and invited users
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PrivateProjectCollaboratorsListRequest, base_url, '/account/projects/{project_id}/collaborators', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateProjectCollaboratorsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ProjectCollaborator]])
                res.project_collaborators = out
        elif http_res.status_code in [400, 404, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_project_create(self, request: shared.ProjectCreate, security: operations.PrivateProjectCreateSecurity) -> operations.PrivateProjectCreateResponse:
        r"""Create project
        Create a new project
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/projects'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateProjectCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateProjectResponse])
                res.create_project_response = out
        elif http_res.status_code in [400, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_project_delete(self, request: operations.PrivateProjectDeleteRequest, security: operations.PrivateProjectDeleteSecurity) -> operations.PrivateProjectDeleteResponse:
        r"""Delete project
        A project can be deleted only if: - it is not public - it does not have public articles.
        
        When an individual project is deleted, all the articles are moved to my data of each owner.
        
        When a group project is deleted, all the articles and files are deleted as well. Only project owner, group admin and above can delete a project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PrivateProjectDeleteRequest, base_url, '/account/projects/{project_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateProjectDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 404, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_project_details(self, request: operations.PrivateProjectDetailsRequest, security: operations.PrivateProjectDetailsSecurity) -> operations.PrivateProjectDetailsResponse:
        r"""View project details
        View a private project
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PrivateProjectDetailsRequest, base_url, '/account/projects/{project_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateProjectDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProjectCompletePrivate])
                res.project_complete_private = out
        elif http_res.status_code in [400, 404, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_project_leave(self, request: operations.PrivateProjectLeaveRequest, security: operations.PrivateProjectLeaveSecurity) -> operations.PrivateProjectLeaveResponse:
        r"""Private Project Leave
        Please note: project's owner cannot leave the project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PrivateProjectLeaveRequest, base_url, '/account/projects/{project_id}/leave', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateProjectLeaveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 400, 404, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_project_note(self, request: operations.PrivateProjectNoteRequest, security: operations.PrivateProjectNoteSecurity) -> operations.PrivateProjectNoteResponse:
        r"""Project note details"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PrivateProjectNoteRequest, base_url, '/account/projects/{project_id}/notes/{note_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateProjectNoteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProjectNotePrivate])
                res.project_note_private = out
        elif http_res.status_code in [400, 404, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_project_note_delete(self, request: operations.PrivateProjectNoteDeleteRequest, security: operations.PrivateProjectNoteDeleteSecurity) -> operations.PrivateProjectNoteDeleteResponse:
        r"""Delete project note"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PrivateProjectNoteDeleteRequest, base_url, '/account/projects/{project_id}/notes/{note_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateProjectNoteDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 404, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_project_note_update(self, request: operations.PrivateProjectNoteUpdateRequest, security: operations.PrivateProjectNoteUpdateSecurity) -> operations.PrivateProjectNoteUpdateResponse:
        r"""Update project note"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PrivateProjectNoteUpdateRequest, base_url, '/account/projects/{project_id}/notes/{note_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "project_note_create", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateProjectNoteUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 205:
            res.headers = http_res.headers
            
        elif http_res.status_code in [400, 404, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_project_notes_create(self, request: operations.PrivateProjectNotesCreateRequest, security: operations.PrivateProjectNotesCreateSecurity) -> operations.PrivateProjectNotesCreateResponse:
        r"""Create project note
        Create a new project note
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PrivateProjectNotesCreateRequest, base_url, '/account/projects/{project_id}/notes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "project_note_create", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateProjectNotesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Location])
                res.location = out
        elif http_res.status_code in [400, 404, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_project_notes_list(self, request: operations.PrivateProjectNotesListRequest, security: operations.PrivateProjectNotesListSecurity) -> operations.PrivateProjectNotesListResponse:
        r"""List project notes
        List project notes
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PrivateProjectNotesListRequest, base_url, '/account/projects/{project_id}/notes', request)
        
        query_params = utils.get_query_params(operations.PrivateProjectNotesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateProjectNotesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ProjectNote]])
                res.project_notes = out
        elif http_res.status_code in [400, 404, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_project_publish(self, request: operations.PrivateProjectPublishRequest, security: operations.PrivateProjectPublishSecurity) -> operations.PrivateProjectPublishResponse:
        r"""Private Project Publish
        Publish a project. Possible after all items inside it are public
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PrivateProjectPublishRequest, base_url, '/account/projects/{project_id}/publish', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateProjectPublishResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseMessage])
                res.response_message = out
        elif http_res.status_code in [400, 404, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_project_update(self, request: operations.PrivateProjectUpdateRequest, security: operations.PrivateProjectUpdateSecurity) -> operations.PrivateProjectUpdateResponse:
        r"""Update project
        Updating an project by passing body parameters; request can also be made with the PATCH method.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PrivateProjectUpdateRequest, base_url, '/account/projects/{project_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "project_update", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateProjectUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 205:
            res.headers = http_res.headers
            
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out
        elif http_res.status_code in [404, 500]:
            pass

        return res

    def private_projects_list(self, request: operations.PrivateProjectsListRequest, security: operations.PrivateProjectsListSecurity) -> operations.PrivateProjectsListResponse:
        r"""Private Projects
        List private projects
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/projects'
        
        query_params = utils.get_query_params(operations.PrivateProjectsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateProjectsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ProjectPrivate]])
                res.project_privates = out
        elif http_res.status_code in [400, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_projects_search(self, request: shared.ProjectsSearch) -> operations.PrivateProjectsSearchResponse:
        r"""Private Projects search
        Search inside the private projects
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/projects/search'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateProjectsSearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ProjectPrivate]])
                res.project_privates = out
        elif http_res.status_code in [400, 422, 500]:
            pass

        return res

    def project_articles(self, request: operations.ProjectArticlesRequest) -> operations.ProjectArticlesResponse:
        r"""Public Project Articles
        List articles in project
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProjectArticlesRequest, base_url, '/projects/{project_id}/articles', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProjectArticlesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Article]])
                res.articles = out
        elif http_res.status_code in [400, 404, 500]:
            pass

        return res

    def project_details(self, request: operations.ProjectDetailsRequest) -> operations.ProjectDetailsResponse:
        r"""Public Project
        View a project
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProjectDetailsRequest, base_url, '/projects/{project_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProjectDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProjectComplete])
                res.project_complete = out
        elif http_res.status_code in [400, 404, 500]:
            pass

        return res

    def projects_list(self, request: operations.ProjectsListRequest) -> operations.ProjectsListResponse:
        r"""Public Projects
        Returns a list of public projects
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/projects'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ProjectsListRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProjectsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Project]])
                res.projects = out
        elif http_res.status_code in [400, 422, 500]:
            pass

        return res

    def projects_search(self, request: operations.ProjectsSearchRequest) -> operations.ProjectsSearchResponse:
        r"""Public Projects Search
        Returns a list of public articles
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/projects/search'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "projects_search", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProjectsSearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Project]])
                res.projects = out
        elif http_res.status_code in [400, 422, 500]:
            pass

        return res

    