/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class ReportWebinarDetailsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth: string;
}

export class ReportWebinarDetailsRequest extends SpeakeasyBase {
  /**
   * The webinar ID or the webinar UUID.  If a webinar ID is provided in the request instead of a UUID, the response will be for the latest webinar instance.
   *
   * @remarks
   *
   * If a UUID starts with "/" or contains "//" (example: "/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=webinarId",
  })
  webinarId: string;
}

export class ReportWebinarDetails200ApplicationXMLCustomKeys extends SpeakeasyBase {
  /**
   * Custom key associated with the user.
   */
  @SpeakeasyMetadata()
  key?: string;

  /**
   * Value of the custom key associated with the user.
   */
  @SpeakeasyMetadata()
  value?: string;
}

export class ReportWebinarDetails200ApplicationXMLTrackingFields extends SpeakeasyBase {
  /**
   * Tracking fields type.
   */
  @SpeakeasyMetadata()
  field?: string;

  /**
   * Tracking fields value.
   */
  @SpeakeasyMetadata()
  value?: string;
}

/**
 * **HTTP Status Code:** `200`<br>
 *
 * @remarks
 * Webinar details returned.<br>
 * This is only available for paid account:{accountId}.
 */
export class ReportWebinarDetails200ApplicationXML extends SpeakeasyBase {
  /**
   * Custom keys and values assigned to the meeting.
   */
  @SpeakeasyMetadata({
    elemType: ReportWebinarDetails200ApplicationXMLCustomKeys,
  })
  customKeys?: ReportWebinarDetails200ApplicationXMLCustomKeys[];

  /**
   * Department of the host.
   */
  @SpeakeasyMetadata()
  dept?: string;

  /**
   * Meeting duration.
   */
  @SpeakeasyMetadata()
  duration?: number;

  /**
   * Meeting end time.
   */
  @SpeakeasyMetadata()
  endTime?: Date;

  /**
   * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
   */
  @SpeakeasyMetadata()
  id?: number;

  /**
   * Number of meeting participants.
   */
  @SpeakeasyMetadata()
  participantsCount?: number;

  /**
   * Meeting start time.
   */
  @SpeakeasyMetadata()
  startTime?: Date;

  /**
   * Meeting topic.
   */
  @SpeakeasyMetadata()
  topic?: string;

  /**
   * Number of Webinar minutes. This represents the total amount of Webinar minutes attended by each participant including the host, for a Webinar hosted by the user. For instance if there were one host(named A) and one participant(named B) in a Webinar, the value of total_minutes would be calculated as below:
   *
   * @remarks
   *
   * **total_minutes** = Total Webinar Attendance Minutes of A + Total Webinar Attendance Minutes of B
   */
  @SpeakeasyMetadata()
  totalMinutes?: number;

  /**
   * Tracking fields.
   */
  @SpeakeasyMetadata({
    elemType: ReportWebinarDetails200ApplicationXMLTrackingFields,
  })
  trackingFields?: ReportWebinarDetails200ApplicationXMLTrackingFields[];

  /**
   * Meeting type.
   */
  @SpeakeasyMetadata()
  type?: number;

  /**
   * User email.
   */
  @SpeakeasyMetadata()
  userEmail?: string;

  /**
   * User display name.
   */
  @SpeakeasyMetadata()
  userName?: string;

  /**
   * Webinar UUID. Each webinar instance will generate its own UUID(i.e., after a meeting ends, a new UUID will be generated when the next instance of the webinar starts). Double encode the UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
   */
  @SpeakeasyMetadata()
  uuid?: string;
}

export class ReportWebinarDetails200ApplicationJSONCustomKeys extends SpeakeasyBase {
  /**
   * Custom key associated with the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key?: string;

  /**
   * Value of the custom key associated with the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

export class ReportWebinarDetails200ApplicationJSONTrackingFields extends SpeakeasyBase {
  /**
   * Tracking fields type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "field" })
  field?: string;

  /**
   * Tracking fields value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

/**
 * **HTTP Status Code:** `200`<br>
 *
 * @remarks
 * Webinar details returned.<br>
 * This is only available for paid account:{accountId}.
 */
export class ReportWebinarDetails200ApplicationJSON extends SpeakeasyBase {
  /**
   * Custom keys and values assigned to the meeting.
   */
  @SpeakeasyMetadata({
    elemType: ReportWebinarDetails200ApplicationJSONCustomKeys,
  })
  @Expose({ name: "custom_keys" })
  @Type(() => ReportWebinarDetails200ApplicationJSONCustomKeys)
  customKeys?: ReportWebinarDetails200ApplicationJSONCustomKeys[];

  /**
   * Department of the host.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dept" })
  dept?: string;

  /**
   * Meeting duration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duration" })
  duration?: number;

  /**
   * Meeting end time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "end_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime?: Date;

  /**
   * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * Number of meeting participants.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "participants_count" })
  participantsCount?: number;

  /**
   * Meeting start time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  /**
   * Meeting topic.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "topic" })
  topic?: string;

  /**
   * Number of Webinar minutes. This represents the total amount of Webinar minutes attended by each participant including the host, for a Webinar hosted by the user. For instance if there were one host(named A) and one participant(named B) in a Webinar, the value of total_minutes would be calculated as below:
   *
   * @remarks
   *
   * **total_minutes** = Total Webinar Attendance Minutes of A + Total Webinar Attendance Minutes of B
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_minutes" })
  totalMinutes?: number;

  /**
   * Tracking fields.
   */
  @SpeakeasyMetadata({
    elemType: ReportWebinarDetails200ApplicationJSONTrackingFields,
  })
  @Expose({ name: "tracking_fields" })
  @Type(() => ReportWebinarDetails200ApplicationJSONTrackingFields)
  trackingFields?: ReportWebinarDetails200ApplicationJSONTrackingFields[];

  /**
   * Meeting type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: number;

  /**
   * User email.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_email" })
  userEmail?: string;

  /**
   * User display name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_name" })
  userName?: string;

  /**
   * Webinar UUID. Each webinar instance will generate its own UUID(i.e., after a meeting ends, a new UUID will be generated when the next instance of the webinar starts). Double encode the UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uuid" })
  uuid?: string;
}

export class ReportWebinarDetailsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * **HTTP Status Code:** `200`<br>
   *
   * @remarks
   * Webinar details returned.<br>
   * This is only available for paid account:{accountId}.
   */
  @SpeakeasyMetadata()
  reportWebinarDetails200ApplicationJSONObject?: ReportWebinarDetails200ApplicationJSON;
}
