"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import phone_number_enum_address_requirement_enum as shared_phone_number_enum_address_requirement_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional

class TrunkingV1TrunkPhoneNumberSmsFallbackMethodEnum(str, Enum):
    r"""The HTTP method we use to call `sms_fallback_url`. Can be: `GET` or `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class TrunkingV1TrunkPhoneNumberSmsMethodEnum(str, Enum):
    r"""The HTTP method we use to call `sms_url`. Can be: `GET` or `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class TrunkingV1TrunkPhoneNumberStatusCallbackMethodEnum(str, Enum):
    r"""The HTTP method we use to call `status_callback`. Can be: `GET` or `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class TrunkingV1TrunkPhoneNumberVoiceFallbackMethodEnum(str, Enum):
    r"""The HTTP method that we use to call `voice_fallback_url`. Can be: `GET` or `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class TrunkingV1TrunkPhoneNumberVoiceMethodEnum(str, Enum):
    r"""The HTTP method we use to call `voice_url`. Can be: `GET` or `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TrunkingV1TrunkPhoneNumber:
    r"""Created"""
    
    account_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_sid'), 'exclude': lambda f: f is None }})
    r"""The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the PhoneNumber resource."""  
    address_requirements: Optional[shared_phone_number_enum_address_requirement_enum.PhoneNumberEnumAddressRequirementEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address_requirements'), 'exclude': lambda f: f is None }})  
    api_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('api_version'), 'exclude': lambda f: f is None }})
    r"""The API version used to start a new TwiML session."""  
    beta: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beta'), 'exclude': lambda f: f is None }})
    r"""Whether the phone number is new to the Twilio platform. Can be: `true` or `false`."""  
    capabilities: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('capabilities'), 'exclude': lambda f: f is None }})
    r"""The set of Boolean properties that indicate whether a phone number can receive calls or messages.  Capabilities are  `Voice`, `SMS`, and `MMS` and each capability can be: `true` or `false`."""  
    date_created: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_created'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time in GMT when the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format."""  
    date_updated: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_updated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time in GMT when the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format."""  
    friendly_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('friendly_name'), 'exclude': lambda f: f is None }})
    r"""The string that you assigned to describe the resource."""  
    links: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links'), 'exclude': lambda f: f is None }})
    r"""The URLs of related resources."""  
    phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone_number'), 'exclude': lambda f: f is None }})
    r"""The phone number in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, which consists of a + followed by the country code and subscriber number."""  
    sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sid'), 'exclude': lambda f: f is None }})
    r"""The unique string that we created to identify the PhoneNumber resource."""  
    sms_application_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sms_application_sid'), 'exclude': lambda f: f is None }})
    r"""The SID of the application that handles SMS messages sent to the phone number. If an `sms_application_sid` is present, we ignore all `sms_*_url` values and use those of the application."""  
    sms_fallback_method: Optional[TrunkingV1TrunkPhoneNumberSmsFallbackMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sms_fallback_method'), 'exclude': lambda f: f is None }})
    r"""The HTTP method we use to call `sms_fallback_url`. Can be: `GET` or `POST`."""  
    sms_fallback_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sms_fallback_url'), 'exclude': lambda f: f is None }})
    r"""The URL that we call using the `sms_fallback_method` when an error occurs while retrieving or executing the TwiML from `sms_url`."""  
    sms_method: Optional[TrunkingV1TrunkPhoneNumberSmsMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sms_method'), 'exclude': lambda f: f is None }})
    r"""The HTTP method we use to call `sms_url`. Can be: `GET` or `POST`."""  
    sms_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sms_url'), 'exclude': lambda f: f is None }})
    r"""The URL we call using the `sms_method` when the phone number receives an incoming SMS message."""  
    status_callback: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status_callback'), 'exclude': lambda f: f is None }})
    r"""The URL we call using the `status_callback_method` to send status information to your application."""  
    status_callback_method: Optional[TrunkingV1TrunkPhoneNumberStatusCallbackMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status_callback_method'), 'exclude': lambda f: f is None }})
    r"""The HTTP method we use to call `status_callback`. Can be: `GET` or `POST`."""  
    trunk_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trunk_sid'), 'exclude': lambda f: f is None }})
    r"""The SID of the Trunk that handles calls to the phone number. If a `trunk_sid` is present, we ignore all of the voice URLs and voice applications and use those set on the Trunk. Setting a `trunk_sid` will automatically delete your `voice_application_sid` and vice versa."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""The absolute URL of the resource."""  
    voice_application_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voice_application_sid'), 'exclude': lambda f: f is None }})
    r"""The SID of the application that handles calls to the phone number. If a `voice_application_sid` is present, we ignore all of the voice URLs and use those set on the application. Setting a `voice_application_sid` will automatically delete your `trunk_sid` and vice versa."""  
    voice_caller_id_lookup: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voice_caller_id_lookup'), 'exclude': lambda f: f is None }})
    r"""Whether we look up the caller's caller-ID name from the CNAM database ($0.01 per look up). Can be: `true` or `false`."""  
    voice_fallback_method: Optional[TrunkingV1TrunkPhoneNumberVoiceFallbackMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voice_fallback_method'), 'exclude': lambda f: f is None }})
    r"""The HTTP method that we use to call `voice_fallback_url`. Can be: `GET` or `POST`."""  
    voice_fallback_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voice_fallback_url'), 'exclude': lambda f: f is None }})
    r"""The URL that we call using the `voice_fallback_method` when an error occurs retrieving or executing the TwiML requested by `url`."""  
    voice_method: Optional[TrunkingV1TrunkPhoneNumberVoiceMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voice_method'), 'exclude': lambda f: f is None }})
    r"""The HTTP method we use to call `voice_url`. Can be: `GET` or `POST`."""  
    voice_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voice_url'), 'exclude': lambda f: f is None }})
    r"""The URL we call using the `voice_method` when the phone number receives a call. The `voice_url` is not be used if a `voice_application_sid` or a `trunk_sid` is set."""  
    