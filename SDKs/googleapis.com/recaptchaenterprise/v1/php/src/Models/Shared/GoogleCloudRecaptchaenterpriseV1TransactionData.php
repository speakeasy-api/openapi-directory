<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * GoogleCloudRecaptchaenterpriseV1TransactionData - Transaction data associated with a payment protected by reCAPTCHA Enterprise. All fields are optional.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class GoogleCloudRecaptchaenterpriseV1TransactionData
{
    /**
     * Structured address format for billing and shipping addresses.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecaptchaenterpriseV1TransactionDataAddress $billingAddress
     */
	#[\JMS\Serializer\Annotation\SerializedName('billingAddress')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecaptchaenterpriseV1TransactionDataAddress')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GoogleCloudRecaptchaenterpriseV1TransactionDataAddress $billingAddress = null;
    
    /**
     * The Bank Identification Number - generally the first 6 or 8 digits of the card.
     * 
     * @var ?string $cardBin
     */
	#[\JMS\Serializer\Annotation\SerializedName('cardBin')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $cardBin = null;
    
    /**
     * The last four digits of the card.
     * 
     * @var ?string $cardLastFour
     */
	#[\JMS\Serializer\Annotation\SerializedName('cardLastFour')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $cardLastFour = null;
    
    /**
     * The currency code in ISO-4217 format.
     * 
     * @var ?string $currencyCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('currencyCode')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $currencyCode = null;
    
    /**
     * Details about the transaction from the gateway.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecaptchaenterpriseV1TransactionDataGatewayInfo $gatewayInfo
     */
	#[\JMS\Serializer\Annotation\SerializedName('gatewayInfo')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecaptchaenterpriseV1TransactionDataGatewayInfo')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GoogleCloudRecaptchaenterpriseV1TransactionDataGatewayInfo $gatewayInfo = null;
    
    /**
     * Items purchased in this transaction.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecaptchaenterpriseV1TransactionDataItem> $items
     */
	#[\JMS\Serializer\Annotation\SerializedName('items')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecaptchaenterpriseV1TransactionDataItem>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $items = null;
    
    /**
     * Information about the user or users fulfilling the transaction.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecaptchaenterpriseV1TransactionDataUser> $merchants
     */
	#[\JMS\Serializer\Annotation\SerializedName('merchants')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecaptchaenterpriseV1TransactionDataUser>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $merchants = null;
    
    /**
     * The payment method for the transaction. The allowed values are: * credit-card * debit-card * gift-card * processor-{name} (If a third-party is used, for example, processor-paypal) * custom-{name} (If an alternative method is used, for example, custom-crypto)
     * 
     * @var ?string $paymentMethod
     */
	#[\JMS\Serializer\Annotation\SerializedName('paymentMethod')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $paymentMethod = null;
    
    /**
     * Structured address format for billing and shipping addresses.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecaptchaenterpriseV1TransactionDataAddress $shippingAddress
     */
	#[\JMS\Serializer\Annotation\SerializedName('shippingAddress')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecaptchaenterpriseV1TransactionDataAddress')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GoogleCloudRecaptchaenterpriseV1TransactionDataAddress $shippingAddress = null;
    
    /**
     * The value of shipping in the specified currency. 0 for free or no shipping.
     * 
     * @var ?float $shippingValue
     */
	#[\JMS\Serializer\Annotation\SerializedName('shippingValue')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $shippingValue = null;
    
    /**
     * Unique identifier for the transaction. This custom identifier can be used to reference this transaction in the future, for example, labeling a refund or chargeback event. Two attempts at the same transaction should use the same transaction id.
     * 
     * @var ?string $transactionId
     */
	#[\JMS\Serializer\Annotation\SerializedName('transactionId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $transactionId = null;
    
    /**
     * Details about a user's account involved in the transaction.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecaptchaenterpriseV1TransactionDataUser $user
     */
	#[\JMS\Serializer\Annotation\SerializedName('user')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecaptchaenterpriseV1TransactionDataUser')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GoogleCloudRecaptchaenterpriseV1TransactionDataUser $user = null;
    
    /**
     * The decimal value of the transaction in the specified currency.
     * 
     * @var ?float $value
     */
	#[\JMS\Serializer\Annotation\SerializedName('value')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $value = null;
    
	public function __construct()
	{
		$this->billingAddress = null;
		$this->cardBin = null;
		$this->cardLastFour = null;
		$this->currencyCode = null;
		$this->gatewayInfo = null;
		$this->items = null;
		$this->merchants = null;
		$this->paymentMethod = null;
		$this->shippingAddress = null;
		$this->shippingValue = null;
		$this->transactionId = null;
		$this->user = null;
		$this->value = null;
	}
}
