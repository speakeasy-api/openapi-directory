<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class GlobalAddresses 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes the specified address resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesDeleteResponse
     */
	public function computeGlobalAddressesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/addresses/{address}', \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified address resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesGetResponse
     */
	public function computeGlobalAddressesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/addresses/{address}', \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->address = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Address', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an address resource in the specified project by using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesInsertResponse
     */
	public function computeGlobalAddressesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/addresses', \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "address", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of global addresses.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesListResponse
     */
	public function computeGlobalAddressesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/addresses', \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addressList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AddressList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Moves the specified address resource from one project to another project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesMoveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesMoveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesMoveResponse
     */
	public function computeGlobalAddressesMove(
        \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesMoveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesMoveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesMoveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/addresses/{address}/move', \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesMoveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "globalAddressesMoveRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesMoveRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesMoveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the labels on a GlobalAddress. To learn more about labels, read the Labeling Resources documentation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesSetLabelsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesSetLabelsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesSetLabelsResponse
     */
	public function computeGlobalAddressesSetLabels(
        \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesSetLabelsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesSetLabelsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesSetLabelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/addresses/{resource}/setLabels', \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesSetLabelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "globalSetLabelsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesSetLabelsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalAddressesSetLabelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}