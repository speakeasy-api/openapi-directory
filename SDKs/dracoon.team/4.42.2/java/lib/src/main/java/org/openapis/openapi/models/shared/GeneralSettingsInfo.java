/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GeneralSettingsInfo - General settings
 */
public class GeneralSettingsInfo {
    /**
     * Auth token restrictions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authTokenRestrictions")
    public AuthTokenRestrictions authTokenRestrictions;
    public GeneralSettingsInfo withAuthTokenRestrictions(AuthTokenRestrictions authTokenRestrictions) {
        this.authTokenRestrictions = authTokenRestrictions;
        return this;
    }
    
    /**
     * Activation status of client-side encryption.
     * 
     * Can only be enabled once; disabling is not possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cryptoEnabled")
    public Boolean cryptoEnabled;
    public GeneralSettingsInfo withCryptoEnabled(Boolean cryptoEnabled) {
        this.cryptoEnabled = cryptoEnabled;
        return this;
    }
    
    /**
     * Enable email notification button
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailNotificationButtonEnabled")
    public Boolean emailNotificationButtonEnabled;
    public GeneralSettingsInfo withEmailNotificationButtonEnabled(Boolean emailNotificationButtonEnabled) {
        this.emailNotificationButtonEnabled = emailNotificationButtonEnabled;
        return this;
    }
    
    /**
     * Each user has to confirm the EULA at first login.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eulaEnabled")
    public Boolean eulaEnabled;
    public GeneralSettingsInfo withEulaEnabled(Boolean eulaEnabled) {
        this.eulaEnabled = eulaEnabled;
        return this;
    }
    
    /**
     * &amp;#128679; Deprecated since v4.42.0
     * 
     * Defines if login fields should be hidden
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hideLoginInputFields")
    public Boolean hideLoginInputFields;
    public GeneralSettingsInfo withHideLoginInputFields(Boolean hideLoginInputFields) {
        this.hideLoginInputFields = hideLoginInputFields;
        return this;
    }
    
    /**
     * &amp;#128640; Since v4.10.0
     * 
     * Homeroom Parent ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("homeRoomParentId")
    public Long homeRoomParentId;
    public GeneralSettingsInfo withHomeRoomParentId(Long homeRoomParentId) {
        this.homeRoomParentId = homeRoomParentId;
        return this;
    }
    
    /**
     * &amp;#128640; Since v4.10.0
     * 
     * Homerooms active
     */
    @JsonProperty("homeRoomsActive")
    public Boolean homeRoomsActive;
    public GeneralSettingsInfo withHomeRoomsActive(Boolean homeRoomsActive) {
        this.homeRoomsActive = homeRoomsActive;
        return this;
    }
    
    /**
     * &amp;#128679; Deprecated since v4.12.0
     * 
     * Determines if the media server is enabled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mediaServerEnabled")
    public Boolean mediaServerEnabled;
    public GeneralSettingsInfo withMediaServerEnabled(Boolean mediaServerEnabled) {
        this.mediaServerEnabled = mediaServerEnabled;
        return this;
    }
    
    /**
     * &amp;#128640; Since v4.9.0
     * 
     * Defines if S3 tags are enabled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("s3TagsEnabled")
    public Boolean s3TagsEnabled;
    public GeneralSettingsInfo withS3TagsEnabled(Boolean s3TagsEnabled) {
        this.s3TagsEnabled = s3TagsEnabled;
        return this;
    }
    
    /**
     * Allow sending of share passwords via SMS
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sharePasswordSmsEnabled")
    public Boolean sharePasswordSmsEnabled;
    public GeneralSettingsInfo withSharePasswordSmsEnabled(Boolean sharePasswordSmsEnabled) {
        this.sharePasswordSmsEnabled = sharePasswordSmsEnabled;
        return this;
    }
    
    /**
     * &amp;#128640; Since v4.30.0
     * 
     * Subscription Plan
     */
    @JsonProperty("subscriptionPlan")
    public Integer subscriptionPlan;
    public GeneralSettingsInfo withSubscriptionPlan(Integer subscriptionPlan) {
        this.subscriptionPlan = subscriptionPlan;
        return this;
    }
    
    /**
     * Defines if S3 is used as storage backend
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("useS3Storage")
    public Boolean useS3Storage;
    public GeneralSettingsInfo withUseS3Storage(Boolean useS3Storage) {
        this.useS3Storage = useS3Storage;
        return this;
    }
    
    /**
     * &amp;#128679; Deprecated since v4.14.0
     * 
     * Allow weak password
     * 
     * * A weak password has to fulfill the following criteria:
     * 
     *    * is at least 8 characters long
     * 
     *    * contains letters and numbers
     * 
     * * A strong password has to fulfill the following criteria in addition:
     * 
     *    * contains at least one special character
     * 
     *    * contains upper and lower case characters
     * 
     * Please use `GET /system/config/policies/passwords` API to get configured password policies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weakPasswordEnabled")
    public Boolean weakPasswordEnabled;
    public GeneralSettingsInfo withWeakPasswordEnabled(Boolean weakPasswordEnabled) {
        this.weakPasswordEnabled = weakPasswordEnabled;
        return this;
    }
    
}
