"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Optional


@dataclasses.dataclass
class LHDeepLinksITCOSecurity:
    
    auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class LHDeepLinksITCORequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""http header: application/json or application/xml (Acceptable values are: \\"application/json\\", \\"application/xml\\")"""  
    catalogues: str = dataclasses.field(metadata={'query_param': { 'field_name': 'catalogues', 'style': 'form', 'explode': True }})
    r"""Carrier for which the deep link will be created (e.g. 'LH')"""  
    country: str = dataclasses.field(metadata={'query_param': { 'field_name': 'country', 'style': 'form', 'explode': True }})
    r"""2-letter ISO 3166-1 country code"""  
    destination: str = dataclasses.field(metadata={'query_param': { 'field_name': 'destination', 'style': 'form', 'explode': True }})
    r"""Journey destination. 3-letter IATA airport or city code (e.g. 'MAD')"""  
    fare: str = dataclasses.field(metadata={'query_param': { 'field_name': 'fare', 'style': 'form', 'explode': True }})
    r"""Travel fare (e.g. '1341.45')"""  
    fare_currency: str = dataclasses.field(metadata={'query_param': { 'field_name': 'fare-currency', 'style': 'form', 'explode': True }})
    r"""Fare currency (e.g. 'EUR')"""  
    lang: str = dataclasses.field(metadata={'query_param': { 'field_name': 'lang', 'style': 'form', 'explode': True }})
    r"""2-letter ISO 3166-1 language code"""  
    origin: str = dataclasses.field(metadata={'query_param': { 'field_name': 'origin', 'style': 'form', 'explode': True }})
    r"""Journey origin. 3-letter IATA airport or city code (e.g. 'FRA')"""  
    outbound_segments: str = dataclasses.field(metadata={'query_param': { 'field_name': 'outbound-segments', 'style': 'form', 'explode': True }})
    r"""Outbound flight segments in the sequence of travel (e.g. 'LH096;LH480')"""  
    trackingid: str = dataclasses.field(metadata={'query_param': { 'field_name': 'trackingid', 'style': 'form', 'explode': True }})
    r"""Deep link tracking ID"""  
    travel_date: str = dataclasses.field(metadata={'query_param': { 'field_name': 'travel-date', 'style': 'form', 'explode': True }})
    r"""Journey travel-date (YYYY-MM-DD)"""  
    cabin_class: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cabin-class', 'style': 'form', 'explode': True }})
    r"""Cabin class: 'economy', 'premium_economy', 'business', 'first' (Acceptable values are: \\"\\", \\"economy\\", \\"premium_economy\\", \\"business\\", \\"first\\")"""  
    encryption_key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'encryption-key', 'style': 'form', 'explode': True }})
    r"""Deep link encryption-key"""  
    net_fare: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'net-fare', 'style': 'form', 'explode': True }})
    r"""Travel net fare. Total fare less taxes and charges (e.g. '1140')"""  
    partnerid: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'partnerid', 'style': 'form', 'explode': True }})
    r"""Deep link partner id (e.g. '1247')"""  
    return_date: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'return-date', 'style': 'form', 'explode': True }})
    r"""Journey return-date (YYYY-MM-DD)"""  
    return_segments: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'return-segments', 'style': 'form', 'explode': True }})
    r"""Flight segments in the sequence of travel (e.g. 'LH7465;LH431')"""  
    travelers: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'travelers', 'style': 'form', 'explode': True }})
    r"""Type and number of travelers (e.g. '(adult=2;child=2;infant=1)')"""  
    

@dataclasses.dataclass
class LHDeepLinksITCOResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    lh_deep_links_itco_200_application_json_string: Optional[str] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    