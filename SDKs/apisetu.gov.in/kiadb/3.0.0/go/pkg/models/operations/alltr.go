// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type AlltrSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type AlltrRequestBodyCertificateParameters struct {
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// Full name
	FullName string `json:"FullName"`
	// Registration Number
	RegNum string `json:"RegNum"`
	// Aadhaar number
	UID string `json:"UID"`
}

// AlltrRequestBodyFormatEnum - The format of the certificate in response.
type AlltrRequestBodyFormatEnum string

const (
	AlltrRequestBodyFormatEnumPdf AlltrRequestBodyFormatEnum = "pdf"
)

func (e *AlltrRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = AlltrRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AlltrRequestBodyFormatEnum: %s", s)
	}
}

// AlltrRequestBody - Request format
type AlltrRequestBody struct {
	CertificateParameters *AlltrRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format AlltrRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type AlltrRequest struct {
	// Request format
	Request  *AlltrRequestBody `request:"mediaType=application/json"`
	Security AlltrSecurity
}

type Alltr504ApplicationJSONErrorEnum string

const (
	Alltr504ApplicationJSONErrorEnumGatewayTimeout Alltr504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Alltr504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Alltr504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Alltr504ApplicationJSONErrorEnum: %s", s)
	}
}

type Alltr504ApplicationJSONErrorDescriptionEnum string

const (
	Alltr504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Alltr504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Alltr504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Alltr504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Alltr504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Alltr504ApplicationJSON - Gateway timeout
type Alltr504ApplicationJSON struct {
	Error            *Alltr504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Alltr504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Alltr503ApplicationJSONErrorEnum string

const (
	Alltr503ApplicationJSONErrorEnumServiceUnavailable Alltr503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Alltr503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Alltr503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Alltr503ApplicationJSONErrorEnum: %s", s)
	}
}

type Alltr503ApplicationJSONErrorDescriptionEnum string

const (
	Alltr503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Alltr503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Alltr503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Alltr503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Alltr503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Alltr503ApplicationJSON - Service unavailable
type Alltr503ApplicationJSON struct {
	Error            *Alltr503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Alltr503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Alltr502ApplicationJSONErrorEnum string

const (
	Alltr502ApplicationJSONErrorEnumBadGatewy Alltr502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Alltr502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Alltr502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Alltr502ApplicationJSONErrorEnum: %s", s)
	}
}

type Alltr502ApplicationJSONErrorDescriptionEnum string

const (
	Alltr502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Alltr502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Alltr502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Alltr502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Alltr502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Alltr502ApplicationJSON - Bad gateway
type Alltr502ApplicationJSON struct {
	Error            *Alltr502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Alltr502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Alltr500ApplicationJSONErrorEnum string

const (
	Alltr500ApplicationJSONErrorEnumInternalServerError Alltr500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Alltr500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Alltr500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Alltr500ApplicationJSONErrorEnum: %s", s)
	}
}

type Alltr500ApplicationJSONErrorDescriptionEnum string

const (
	Alltr500ApplicationJSONErrorDescriptionEnumInternalServerError Alltr500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Alltr500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Alltr500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Alltr500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Alltr500ApplicationJSON - Internal server error
type Alltr500ApplicationJSON struct {
	Error            *Alltr500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Alltr500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Alltr404ApplicationJSONErrorEnum string

const (
	Alltr404ApplicationJSONErrorEnumRecordNotFound Alltr404ApplicationJSONErrorEnum = "record_not_found"
	Alltr404ApplicationJSONErrorEnumURLNotFound    Alltr404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Alltr404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Alltr404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Alltr404ApplicationJSONErrorEnum: %s", s)
	}
}

type Alltr404ApplicationJSONErrorDescriptionEnum string

const (
	Alltr404ApplicationJSONErrorDescriptionEnumNoRecordFound               Alltr404ApplicationJSONErrorDescriptionEnum = "No record found"
	Alltr404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Alltr404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Alltr404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Alltr404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Alltr404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Alltr404ApplicationJSON - No record found
type Alltr404ApplicationJSON struct {
	Error            *Alltr404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Alltr404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Alltr401ApplicationJSONErrorEnum string

const (
	Alltr401ApplicationJSONErrorEnumInvalidAuthentication Alltr401ApplicationJSONErrorEnum = "invalid_authentication"
	Alltr401ApplicationJSONErrorEnumInvalidAuthorization  Alltr401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Alltr401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Alltr401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Alltr401ApplicationJSONErrorEnum: %s", s)
	}
}

type Alltr401ApplicationJSONErrorDescriptionEnum string

const (
	Alltr401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Alltr401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Alltr401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Alltr401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Alltr401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Alltr401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Alltr401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Alltr401ApplicationJSON - Unauthorized access
type Alltr401ApplicationJSON struct {
	Error            *Alltr401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Alltr401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Alltr400ApplicationJSONErrorEnum string

const (
	Alltr400ApplicationJSONErrorEnumMissingParameter Alltr400ApplicationJSONErrorEnum = "missing_parameter"
	Alltr400ApplicationJSONErrorEnumInvalidParameter Alltr400ApplicationJSONErrorEnum = "invalid_parameter"
	Alltr400ApplicationJSONErrorEnumInvalidFormat    Alltr400ApplicationJSONErrorEnum = "invalid_format"
	Alltr400ApplicationJSONErrorEnumInvalidTxnid     Alltr400ApplicationJSONErrorEnum = "invalid_txnid"
	Alltr400ApplicationJSONErrorEnumInvalidConsentid Alltr400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Alltr400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Alltr400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Alltr400ApplicationJSONErrorEnum: %s", s)
	}
}

type Alltr400ApplicationJSONErrorDescriptionEnum string

const (
	Alltr400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Alltr400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Alltr400ApplicationJSONErrorDescriptionEnumBadRequest                              Alltr400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Alltr400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Alltr400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Alltr400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Alltr400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Alltr400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Alltr400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Alltr400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Alltr400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Alltr400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Alltr400ApplicationJSON - Bad request
type Alltr400ApplicationJSON struct {
	Error            *Alltr400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Alltr400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type AlltrResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Alltr400ApplicationJSONObject *Alltr400ApplicationJSON
	// Unauthorized access
	Alltr401ApplicationJSONObject *Alltr401ApplicationJSON
	// No record found
	Alltr404ApplicationJSONObject *Alltr404ApplicationJSON
	// Internal server error
	Alltr500ApplicationJSONObject *Alltr500ApplicationJSON
	// Bad gateway
	Alltr502ApplicationJSONObject *Alltr502ApplicationJSON
	// Service unavailable
	Alltr503ApplicationJSONObject *Alltr503ApplicationJSON
	// Gateway timeout
	Alltr504ApplicationJSONObject *Alltr504ApplicationJSON
}
