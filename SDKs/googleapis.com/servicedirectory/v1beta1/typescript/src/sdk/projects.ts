/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Lists information about the supported locations for this service.
   */
  servicedirectoryProjectsLocationsList(
    req: operations.ServicedirectoryProjectsLocationsListRequest,
    security: operations.ServicedirectoryProjectsLocationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ServicedirectoryProjectsLocationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ServicedirectoryProjectsLocationsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{name}/locations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ServicedirectoryProjectsLocationsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ServicedirectoryProjectsLocationsListResponse =
        new operations.ServicedirectoryProjectsLocationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listLocationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListLocationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a namespace, and returns the new namespace.
   */
  servicedirectoryProjectsLocationsNamespacesCreate(
    req: operations.ServicedirectoryProjectsLocationsNamespacesCreateRequest,
    security: operations.ServicedirectoryProjectsLocationsNamespacesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ServicedirectoryProjectsLocationsNamespacesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ServicedirectoryProjectsLocationsNamespacesCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/namespaces",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "namespaceInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ServicedirectoryProjectsLocationsNamespacesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ServicedirectoryProjectsLocationsNamespacesCreateResponse =
        new operations.ServicedirectoryProjectsLocationsNamespacesCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.namespace = utils.objectToClass(
              httpRes?.data,
              shared.Namespace
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all namespaces.
   */
  servicedirectoryProjectsLocationsNamespacesList(
    req: operations.ServicedirectoryProjectsLocationsNamespacesListRequest,
    security: operations.ServicedirectoryProjectsLocationsNamespacesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ServicedirectoryProjectsLocationsNamespacesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ServicedirectoryProjectsLocationsNamespacesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/namespaces",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ServicedirectoryProjectsLocationsNamespacesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ServicedirectoryProjectsLocationsNamespacesListResponse =
        new operations.ServicedirectoryProjectsLocationsNamespacesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listNamespacesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListNamespacesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a service, and returns the new service.
   */
  servicedirectoryProjectsLocationsNamespacesServicesCreate(
    req: operations.ServicedirectoryProjectsLocationsNamespacesServicesCreateRequest,
    security: operations.ServicedirectoryProjectsLocationsNamespacesServicesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ServicedirectoryProjectsLocationsNamespacesServicesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ServicedirectoryProjectsLocationsNamespacesServicesCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/services",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "serviceInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ServicedirectoryProjectsLocationsNamespacesServicesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ServicedirectoryProjectsLocationsNamespacesServicesCreateResponse =
        new operations.ServicedirectoryProjectsLocationsNamespacesServicesCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.service = utils.objectToClass(httpRes?.data, shared.Service);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates an endpoint, and returns the new endpoint.
   */
  servicedirectoryProjectsLocationsNamespacesServicesEndpointsCreate(
    req: operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsCreateRequest,
    security: operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/endpoints",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "endpointInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsCreateResponse =
        new operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.endpoint = utils.objectToClass(httpRes?.data, shared.Endpoint);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes an endpoint.
   */
  servicedirectoryProjectsLocationsNamespacesServicesEndpointsDelete(
    req: operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsDeleteRequest,
    security: operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsDeleteResponse =
        new operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsDeleteResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets an endpoint.
   */
  servicedirectoryProjectsLocationsNamespacesServicesEndpointsGet(
    req: operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsGetRequest,
    security: operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsGetRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsGetResponse =
        new operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsGetResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.endpoint = utils.objectToClass(httpRes?.data, shared.Endpoint);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all endpoints.
   */
  servicedirectoryProjectsLocationsNamespacesServicesEndpointsList(
    req: operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsListRequest,
    security: operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/endpoints",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsListResponse =
        new operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listEndpointsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListEndpointsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an endpoint.
   */
  servicedirectoryProjectsLocationsNamespacesServicesEndpointsPatch(
    req: operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsPatchRequest,
    security: operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsPatchRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "endpointInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsPatchResponse =
        new operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsPatchResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.endpoint = utils.objectToClass(httpRes?.data, shared.Endpoint);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all services belonging to a namespace.
   */
  servicedirectoryProjectsLocationsNamespacesServicesList(
    req: operations.ServicedirectoryProjectsLocationsNamespacesServicesListRequest,
    security: operations.ServicedirectoryProjectsLocationsNamespacesServicesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ServicedirectoryProjectsLocationsNamespacesServicesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ServicedirectoryProjectsLocationsNamespacesServicesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/services",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ServicedirectoryProjectsLocationsNamespacesServicesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ServicedirectoryProjectsLocationsNamespacesServicesListResponse =
        new operations.ServicedirectoryProjectsLocationsNamespacesServicesListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listServicesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListServicesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a service and its associated endpoints. Resolving a service is not considered an active developer method.
   */
  servicedirectoryProjectsLocationsNamespacesServicesResolve(
    req: operations.ServicedirectoryProjectsLocationsNamespacesServicesResolveRequest,
    security: operations.ServicedirectoryProjectsLocationsNamespacesServicesResolveSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ServicedirectoryProjectsLocationsNamespacesServicesResolveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ServicedirectoryProjectsLocationsNamespacesServicesResolveRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{name}:resolve",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "resolveServiceRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ServicedirectoryProjectsLocationsNamespacesServicesResolveSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ServicedirectoryProjectsLocationsNamespacesServicesResolveResponse =
        new operations.ServicedirectoryProjectsLocationsNamespacesServicesResolveResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resolveServiceResponse = utils.objectToClass(
              httpRes?.data,
              shared.ResolveServiceResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the IAM Policy for a resource
   */
  servicedirectoryProjectsLocationsRegistrationPoliciesGetIamPolicy(
    req: operations.ServicedirectoryProjectsLocationsRegistrationPoliciesGetIamPolicyRequest,
    security: operations.ServicedirectoryProjectsLocationsRegistrationPoliciesGetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ServicedirectoryProjectsLocationsRegistrationPoliciesGetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ServicedirectoryProjectsLocationsRegistrationPoliciesGetIamPolicyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{resource}:getIamPolicy",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "getIamPolicyRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ServicedirectoryProjectsLocationsRegistrationPoliciesGetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ServicedirectoryProjectsLocationsRegistrationPoliciesGetIamPolicyResponse =
        new operations.ServicedirectoryProjectsLocationsRegistrationPoliciesGetIamPolicyResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.policy = utils.objectToClass(httpRes?.data, shared.Policy);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sets the IAM Policy for a resource
   */
  servicedirectoryProjectsLocationsRegistrationPoliciesSetIamPolicy(
    req: operations.ServicedirectoryProjectsLocationsRegistrationPoliciesSetIamPolicyRequest,
    security: operations.ServicedirectoryProjectsLocationsRegistrationPoliciesSetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ServicedirectoryProjectsLocationsRegistrationPoliciesSetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ServicedirectoryProjectsLocationsRegistrationPoliciesSetIamPolicyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{resource}:setIamPolicy",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "setIamPolicyRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ServicedirectoryProjectsLocationsRegistrationPoliciesSetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ServicedirectoryProjectsLocationsRegistrationPoliciesSetIamPolicyResponse =
        new operations.ServicedirectoryProjectsLocationsRegistrationPoliciesSetIamPolicyResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.policy = utils.objectToClass(httpRes?.data, shared.Policy);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Tests IAM permissions for a resource (namespace, service or service workload only).
   */
  servicedirectoryProjectsLocationsRegistrationPoliciesTestIamPermissions(
    req: operations.ServicedirectoryProjectsLocationsRegistrationPoliciesTestIamPermissionsRequest,
    security: operations.ServicedirectoryProjectsLocationsRegistrationPoliciesTestIamPermissionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ServicedirectoryProjectsLocationsRegistrationPoliciesTestIamPermissionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ServicedirectoryProjectsLocationsRegistrationPoliciesTestIamPermissionsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{resource}:testIamPermissions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "testIamPermissionsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ServicedirectoryProjectsLocationsRegistrationPoliciesTestIamPermissionsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ServicedirectoryProjectsLocationsRegistrationPoliciesTestIamPermissionsResponse =
        new operations.ServicedirectoryProjectsLocationsRegistrationPoliciesTestIamPermissionsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.testIamPermissionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.TestIamPermissionsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
