// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// CreateNetworkFirmwareUpgradesStagedEventRequestBodyProductsSwitchNextUpgradeToVersion - The version to be updated to
type CreateNetworkFirmwareUpgradesStagedEventRequestBodyProductsSwitchNextUpgradeToVersion struct {
	// The version ID
	ID string `json:"id"`
}

// CreateNetworkFirmwareUpgradesStagedEventRequestBodyProductsSwitchNextUpgrade - The pending firmware upgrade if it exists
type CreateNetworkFirmwareUpgradesStagedEventRequestBodyProductsSwitchNextUpgrade struct {
	// The version to be updated to
	ToVersion *CreateNetworkFirmwareUpgradesStagedEventRequestBodyProductsSwitchNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// CreateNetworkFirmwareUpgradesStagedEventRequestBodyProductsSwitch - The network device to be updated
type CreateNetworkFirmwareUpgradesStagedEventRequestBodyProductsSwitch struct {
	// The pending firmware upgrade if it exists
	NextUpgrade *CreateNetworkFirmwareUpgradesStagedEventRequestBodyProductsSwitchNextUpgrade `json:"nextUpgrade,omitempty"`
}

// CreateNetworkFirmwareUpgradesStagedEventRequestBodyProducts - Contains information about the network to update
type CreateNetworkFirmwareUpgradesStagedEventRequestBodyProducts struct {
	// The network device to be updated
	Switch *CreateNetworkFirmwareUpgradesStagedEventRequestBodyProductsSwitch `json:"switch,omitempty"`
}

// CreateNetworkFirmwareUpgradesStagedEventRequestBodyStagesGroup - The Staged Upgrade Group containing the name and ID
type CreateNetworkFirmwareUpgradesStagedEventRequestBodyStagesGroup struct {
	// ID of the Staged Upgrade Group
	ID string `json:"id"`
}

// CreateNetworkFirmwareUpgradesStagedEventRequestBodyStagesMilestones - The Staged Upgrade Milestones for the specific stage
type CreateNetworkFirmwareUpgradesStagedEventRequestBodyStagesMilestones struct {
	// The start time of the staged upgrade stage. (In ISO-8601 format, in the time zone of the network.)
	ScheduledFor string `json:"scheduledFor"`
}

type CreateNetworkFirmwareUpgradesStagedEventRequestBodyStages struct {
	// The Staged Upgrade Group containing the name and ID
	Group *CreateNetworkFirmwareUpgradesStagedEventRequestBodyStagesGroup `json:"group,omitempty"`
	// The Staged Upgrade Milestones for the specific stage
	Milestones *CreateNetworkFirmwareUpgradesStagedEventRequestBodyStagesMilestones `json:"milestones,omitempty"`
}

type CreateNetworkFirmwareUpgradesStagedEventRequestBody struct {
	// Contains information about the network to update
	Products *CreateNetworkFirmwareUpgradesStagedEventRequestBodyProducts `json:"products,omitempty"`
	// All firmware upgrade stages in the network with their start time.
	Stages []CreateNetworkFirmwareUpgradesStagedEventRequestBodyStages `json:"stages"`
}

type CreateNetworkFirmwareUpgradesStagedEventRequest struct {
	RequestBody CreateNetworkFirmwareUpgradesStagedEventRequestBody `request:"mediaType=application/json"`
	NetworkID   string                                              `pathParam:"style=simple,explode=false,name=networkId"`
}

// CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONProductsSwitchNextUpgradeToVersion - Details of the version the device will upgrade to
type CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONProductsSwitchNextUpgradeToVersion struct {
	// Id of the Version being upgraded to
	ID *string `json:"id,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONProductsSwitchNextUpgrade - Details of the next firmware upgrade
type CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONProductsSwitchNextUpgrade struct {
	// Details of the version the device will upgrade to
	ToVersion *CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONProductsSwitchNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONProductsSwitch - The Switch network to be updated
type CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONProductsSwitch struct {
	// Details of the next firmware upgrade
	NextUpgrade *CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONProductsSwitchNextUpgrade `json:"nextUpgrade,omitempty"`
}

// CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONProducts - The network devices to be updated
type CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONProducts struct {
	// The Switch network to be updated
	Switch *CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONProductsSwitch `json:"switch,omitempty"`
}

// CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONReasonsCategoryEnum - Reason for the rollback
type CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONReasonsCategoryEnum string

const (
	CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONReasonsCategoryEnumBrokeOldFeatures         CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONReasonsCategoryEnum = "broke old features"
	CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONReasonsCategoryEnumOther                    CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONReasonsCategoryEnum = "other"
	CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONReasonsCategoryEnumPerformance              CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONReasonsCategoryEnum = "performance"
	CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONReasonsCategoryEnumStability                CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONReasonsCategoryEnum = "stability"
	CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONReasonsCategoryEnumTesting                  CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONReasonsCategoryEnum = "testing"
	CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONReasonsCategoryEnumUnifyingNetworksVersions CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONReasonsCategoryEnum = "unifying networks versions"
)

func (e *CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONReasonsCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "broke old features":
		fallthrough
	case "other":
		fallthrough
	case "performance":
		fallthrough
	case "stability":
		fallthrough
	case "testing":
		fallthrough
	case "unifying networks versions":
		*e = CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONReasonsCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONReasonsCategoryEnum: %s", s)
	}
}

type CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONReasons struct {
	// Reason for the rollback
	Category *CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONReasonsCategoryEnum `json:"category,omitempty"`
	// Additional comment about the rollback
	Comment *string `json:"comment,omitempty"`
}

// CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONStagesGroup - The staged upgrade group
type CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONStagesGroup struct {
	// Description of the Staged Upgrade Group
	Description *string `json:"description,omitempty"`
	// Id of the Staged Upgrade Group
	ID *string `json:"id,omitempty"`
	// Name of the Staged Upgrade Group
	Name *string `json:"name,omitempty"`
}

// CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONStagesMilestones - The Staged Upgrade Milestones for the stage
type CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONStagesMilestones struct {
	// Time that the group was canceled
	CanceledAt *time.Time `json:"canceledAt,omitempty"`
	// Finish time for the group
	CompletedAt *time.Time `json:"completedAt,omitempty"`
	// Scheduled start time for the group
	ScheduledFor *time.Time `json:"scheduledFor,omitempty"`
	// Start time for the group
	StartedAt *time.Time `json:"startedAt,omitempty"`
}

type CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONStages struct {
	// The staged upgrade group
	Group *CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONStagesGroup `json:"group,omitempty"`
	// The Staged Upgrade Milestones for the stage
	Milestones *CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONStagesMilestones `json:"milestones,omitempty"`
	// Current upgrade status of the group
	Status *string `json:"status,omitempty"`
}

// CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSON - Successful operation
type CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSON struct {
	// The network devices to be updated
	Products *CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONProducts `json:"products,omitempty"`
	// Reasons for the rollback
	Reasons []CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONReasons `json:"reasons,omitempty"`
	// The ordered stages in the network
	Stages []CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONStages `json:"stages,omitempty"`
}

type CreateNetworkFirmwareUpgradesStagedEventResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONObject *CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSON
}
