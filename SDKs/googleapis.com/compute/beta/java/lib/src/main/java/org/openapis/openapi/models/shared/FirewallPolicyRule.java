/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * FirewallPolicyRule - Represents a rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (allow or deny).
 */
public class FirewallPolicyRule {
    /**
     * The Action to perform when the client connection triggers the rule. Valid actions are "allow", "deny" and "goto_next".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("action")
    public String action;

    public FirewallPolicyRule withAction(String action) {
        this.action = action;
        return this;
    }
    
    /**
     * An optional description for this resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public FirewallPolicyRule withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The direction in which this rule applies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("direction")
    public FirewallPolicyRuleDirectionEnum direction;

    public FirewallPolicyRule withDirection(FirewallPolicyRuleDirectionEnum direction) {
        this.direction = direction;
        return this;
    }
    
    /**
     * Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist. If this is unspecified, the firewall policy rule will be enabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disabled")
    public Boolean disabled;

    public FirewallPolicyRule withDisabled(Boolean disabled) {
        this.disabled = disabled;
        return this;
    }
    
    /**
     * Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on "goto_next" rules.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableLogging")
    public Boolean enableLogging;

    public FirewallPolicyRule withEnableLogging(Boolean enableLogging) {
        this.enableLogging = enableLogging;
        return this;
    }
    
    /**
     * [Output only] Type of the resource. Always compute#firewallPolicyRule for firewall policy rules
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public FirewallPolicyRule withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("match")
    public FirewallPolicyRuleMatcher match;

    public FirewallPolicyRule withMatch(FirewallPolicyRuleMatcher match) {
        this.match = match;
        return this;
    }
    
    /**
     * An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    public Integer priority;

    public FirewallPolicyRule withPriority(Integer priority) {
        this.priority = priority;
        return this;
    }
    
    /**
     * An optional name for the rule. This field is not a unique identifier and can be updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ruleName")
    public String ruleName;

    public FirewallPolicyRule withRuleName(String ruleName) {
        this.ruleName = ruleName;
        return this;
    }
    
    /**
     * [Output Only] Calculation of the complexity of a single firewall policy rule.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ruleTupleCount")
    public Integer ruleTupleCount;

    public FirewallPolicyRule withRuleTupleCount(Integer ruleTupleCount) {
        this.ruleTupleCount = ruleTupleCount;
        return this;
    }
    
    /**
     * A list of network resource URLs to which this rule applies. This field allows you to control which network's VMs get this rule. If this field is left blank, all VMs within the organization will receive the rule.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetResources")
    public String[] targetResources;

    public FirewallPolicyRule withTargetResources(String[] targetResources) {
        this.targetResources = targetResources;
        return this;
    }
    
    /**
     * A list of secure tags that controls which instances the firewall rule applies to. If targetSecureTag are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the target_secure_tag are in INEFFECTIVE state, then this rule will be ignored. targetSecureTag may not be set at the same time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureTag are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetSecureTags")
    public FirewallPolicyRuleSecureTag[] targetSecureTags;

    public FirewallPolicyRule withTargetSecureTags(FirewallPolicyRuleSecureTag[] targetSecureTags) {
        this.targetSecureTags = targetSecureTags;
        return this;
    }
    
    /**
     * A list of service accounts indicating the sets of instances that are applied with this rule.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetServiceAccounts")
    public String[] targetServiceAccounts;

    public FirewallPolicyRule withTargetServiceAccounts(String[] targetServiceAccounts) {
        this.targetServiceAccounts = targetServiceAccounts;
        return this;
    }
    
    public FirewallPolicyRule(){}
}
