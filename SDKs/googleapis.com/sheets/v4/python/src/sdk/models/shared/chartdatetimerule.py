"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ChartDateTimeRuleTypeEnum(str, Enum):
    r"""The type of date-time grouping to apply."""
    CHART_DATE_TIME_RULE_TYPE_UNSPECIFIED = 'CHART_DATE_TIME_RULE_TYPE_UNSPECIFIED'
    SECOND = 'SECOND'
    MINUTE = 'MINUTE'
    HOUR = 'HOUR'
    HOUR_MINUTE = 'HOUR_MINUTE'
    HOUR_MINUTE_AMPM = 'HOUR_MINUTE_AMPM'
    DAY_OF_WEEK = 'DAY_OF_WEEK'
    DAY_OF_YEAR = 'DAY_OF_YEAR'
    DAY_OF_MONTH = 'DAY_OF_MONTH'
    DAY_MONTH = 'DAY_MONTH'
    MONTH = 'MONTH'
    QUARTER = 'QUARTER'
    YEAR = 'YEAR'
    YEAR_MONTH = 'YEAR_MONTH'
    YEAR_QUARTER = 'YEAR_QUARTER'
    YEAR_MONTH_DAY = 'YEAR_MONTH_DAY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChartDateTimeRule:
    r"""Allows you to organize the date-time values in a source data column into buckets based on selected parts of their date or time values."""
    
    type: Optional[ChartDateTimeRuleTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of date-time grouping to apply."""  
    