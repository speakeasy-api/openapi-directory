<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Route 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get the optimal path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time.
     * 
     * Represents the geometry, distance, and time of the shortest or fastest path between a start point and a series of end points which are reordered to minimize distance or time
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOptimalRouteOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOptimalRouteOutputFormatResponse
     */
	public function getOptimalRouteOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetOptimalRouteOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOptimalRouteOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/optimalRoute.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\GetOptimalRouteOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOptimalRouteOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOptimalRouteOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get the path, distance and travel time between a series of geographic points
     * 
     * Represents the geometry, distance, and time of the shortest or fastest path between given start and end points.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRouteOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRouteOutputFormatResponse
     */
	public function getRouteOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetRouteOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRouteOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/route.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\GetRouteOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRouteOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRouteOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get the optimal path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time for a commercial vehicle
     * 
     * Represents the geometry, distance, and time of the shortest or fastest path between a start point and a series of end points which are reordered to minimize distance or time for a commercial vehicle.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTruckOptimalRouteOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTruckOptimalRouteOutputFormatResponse
     */
	public function getTruckOptimalRouteOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetTruckOptimalRouteOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTruckOptimalRouteOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/truck/optimalRoute.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\GetTruckOptimalRouteOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTruckOptimalRouteOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTruckOptimalRouteOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get the path, distance and travel time between a series of geographic points for a commercial vehicle
     * 
     * Represents the geometry, distance, and time of the shortest or fastest path between given start and end points for a commercial vehicle.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTruckRouteOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTruckRouteOutputFormatResponse
     */
	public function getTruckRouteOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetTruckRouteOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTruckRouteOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/truck/route.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\GetTruckRouteOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTruckRouteOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTruckRouteOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get the path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time.
     * 
     * Represents the geometry, distance, and time of the shortest or fastest path between a start point and a series of end points which are reordered to minimize total distance or time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostOptimalRouteOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostOptimalRouteOutputFormatResponse
     */
	public function postOptimalRouteOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\PostOptimalRouteOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostOptimalRouteOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/optimalRoute.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\PostOptimalRouteOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostOptimalRouteOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostOptimalRouteOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get the path, distance and travel time between a series of geographic points
     * 
     * Represents the geometry, distance, and time of the shortest or fastest path between given start and end points.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRouteOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRouteOutputFormatResponse
     */
	public function postRouteOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\PostRouteOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRouteOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/route.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\PostRouteOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostRouteOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRouteOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get the path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time.
     * 
     * Represents the geometry, distance, and time of the shortest or fastest path between a start point and a series of end points which are reordered to minimize total distance or time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostTruckOptimalRouteOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostTruckOptimalRouteOutputFormatResponse
     */
	public function postTruckOptimalRouteOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\PostTruckOptimalRouteOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostTruckOptimalRouteOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/truck/optimalRoute.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\PostTruckOptimalRouteOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostTruckOptimalRouteOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostTruckOptimalRouteOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get the path, distance and travel time between a series of geographic points
     * 
     * Represents the geometry, distance, and time of the shortest or fastest path between given start and end points.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostTruckRouteOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostTruckRouteOutputFormatResponse
     */
	public function postTruckRouteOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\PostTruckRouteOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostTruckRouteOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/truck/route.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\PostTruckRouteOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostTruckRouteOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostTruckRouteOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}