// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDecodeAuthorizationMessageActionEnum
type GETDecodeAuthorizationMessageActionEnum string

const (
	GETDecodeAuthorizationMessageActionEnumDecodeAuthorizationMessage GETDecodeAuthorizationMessageActionEnum = "DecodeAuthorizationMessage"
)

func (e GETDecodeAuthorizationMessageActionEnum) ToPointer() *GETDecodeAuthorizationMessageActionEnum {
	return &e
}

func (e *GETDecodeAuthorizationMessageActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DecodeAuthorizationMessage":
		*e = GETDecodeAuthorizationMessageActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDecodeAuthorizationMessageActionEnum: %v", v)
	}
}

// GETDecodeAuthorizationMessageVersionEnum
type GETDecodeAuthorizationMessageVersionEnum string

const (
	GETDecodeAuthorizationMessageVersionEnumTwoThousandAndEleven0615 GETDecodeAuthorizationMessageVersionEnum = "2011-06-15"
)

func (e GETDecodeAuthorizationMessageVersionEnum) ToPointer() *GETDecodeAuthorizationMessageVersionEnum {
	return &e
}

func (e *GETDecodeAuthorizationMessageVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2011-06-15":
		*e = GETDecodeAuthorizationMessageVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDecodeAuthorizationMessageVersionEnum: %v", v)
	}
}

type GETDecodeAuthorizationMessageRequest struct {
	Action GETDecodeAuthorizationMessageActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The encoded message that was returned with the response.
	EncodedMessage    string                                   `queryParam:"style=form,explode=true,name=EncodedMessage"`
	Version           GETDecodeAuthorizationMessageVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDecodeAuthorizationMessageResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
