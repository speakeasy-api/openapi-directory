// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// RegisterConnectorRequestBodyConnectorProvisioningConfig - Contains information about the configuration of the connector being registered.
type RegisterConnectorRequestBodyConnectorProvisioningConfig struct {
	Lambda *shared.LambdaConnectorProvisioningConfig `json:"lambda,omitempty"`
}

// RegisterConnectorRequestBodyConnectorProvisioningTypeEnum - The type of provisioning that the connector supports, such as Lambda.
type RegisterConnectorRequestBodyConnectorProvisioningTypeEnum string

const (
	RegisterConnectorRequestBodyConnectorProvisioningTypeEnumLambda RegisterConnectorRequestBodyConnectorProvisioningTypeEnum = "LAMBDA"
)

func (e RegisterConnectorRequestBodyConnectorProvisioningTypeEnum) ToPointer() *RegisterConnectorRequestBodyConnectorProvisioningTypeEnum {
	return &e
}

func (e *RegisterConnectorRequestBodyConnectorProvisioningTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDA":
		*e = RegisterConnectorRequestBodyConnectorProvisioningTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RegisterConnectorRequestBodyConnectorProvisioningTypeEnum: %v", v)
	}
}

type RegisterConnectorRequestBody struct {
	// <p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>RegisterConnector</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>RegisterConnector</code>. The token is active for 8 hours.</p>
	ClientToken *string `json:"clientToken,omitempty"`
	//  The name of the connector. The name is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account.
	ConnectorLabel *string `json:"connectorLabel,omitempty"`
	// Contains information about the configuration of the connector being registered.
	ConnectorProvisioningConfig *RegisterConnectorRequestBodyConnectorProvisioningConfig `json:"connectorProvisioningConfig,omitempty"`
	// The type of provisioning that the connector supports, such as Lambda.
	ConnectorProvisioningType *RegisterConnectorRequestBodyConnectorProvisioningTypeEnum `json:"connectorProvisioningType,omitempty"`
	// A description about the connector that's being registered.
	Description *string `json:"description,omitempty"`
}

type RegisterConnectorRequest struct {
	RequestBody       RegisterConnectorRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type RegisterConnectorResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	// ConnectorAuthenticationException
	ConnectorAuthenticationException interface{}
	// ConnectorServerException
	ConnectorServerException interface{}
	ContentType              string
	// InternalServerException
	InternalServerException interface{}
	// Success
	RegisterConnectorResponse *shared.RegisterConnectorResponse
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	StatusCode                    int
	RawResponse                   *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
