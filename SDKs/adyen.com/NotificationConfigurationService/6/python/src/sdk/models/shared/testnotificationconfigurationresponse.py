"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import errorfieldtype as shared_errorfieldtype
from ..shared import exchangemessage as shared_exchangemessage
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TestNotificationConfigurationResponseEventTypesEnum(str, Enum):
    ACCOUNT_CLOSED = 'ACCOUNT_CLOSED'
    ACCOUNT_CREATED = 'ACCOUNT_CREATED'
    ACCOUNT_FUNDS_BELOW_THRESHOLD = 'ACCOUNT_FUNDS_BELOW_THRESHOLD'
    ACCOUNT_HOLDER_CREATED = 'ACCOUNT_HOLDER_CREATED'
    ACCOUNT_HOLDER_LIMIT_REACHED = 'ACCOUNT_HOLDER_LIMIT_REACHED'
    ACCOUNT_HOLDER_MIGRATED = 'ACCOUNT_HOLDER_MIGRATED'
    ACCOUNT_HOLDER_PAYOUT = 'ACCOUNT_HOLDER_PAYOUT'
    ACCOUNT_HOLDER_STATUS_CHANGE = 'ACCOUNT_HOLDER_STATUS_CHANGE'
    ACCOUNT_HOLDER_STORE_STATUS_CHANGE = 'ACCOUNT_HOLDER_STORE_STATUS_CHANGE'
    ACCOUNT_HOLDER_UPCOMING_DEADLINE = 'ACCOUNT_HOLDER_UPCOMING_DEADLINE'
    ACCOUNT_HOLDER_UPDATED = 'ACCOUNT_HOLDER_UPDATED'
    ACCOUNT_HOLDER_VERIFICATION = 'ACCOUNT_HOLDER_VERIFICATION'
    ACCOUNT_UPDATED = 'ACCOUNT_UPDATED'
    BENEFICIARY_SETUP = 'BENEFICIARY_SETUP'
    COMPENSATE_NEGATIVE_BALANCE = 'COMPENSATE_NEGATIVE_BALANCE'
    DIRECT_DEBIT_INITIATED = 'DIRECT_DEBIT_INITIATED'
    FUNDS_MIGRATED = 'FUNDS_MIGRATED'
    PAYMENT_FAILURE = 'PAYMENT_FAILURE'
    PENDING_CREDIT = 'PENDING_CREDIT'
    REFUND_FUNDS_TRANSFER = 'REFUND_FUNDS_TRANSFER'
    REPORT_AVAILABLE = 'REPORT_AVAILABLE'
    SCHEDULED_REFUNDS = 'SCHEDULED_REFUNDS'
    SCORE_SIGNAL_TRIGGERED = 'SCORE_SIGNAL_TRIGGERED'
    TRANSFER_FUNDS = 'TRANSFER_FUNDS'
    TRANSFER_NOT_PAIDOUT_TRANSFERS = 'TRANSFER_NOT_PAIDOUT_TRANSFERS'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestNotificationConfigurationResponse:
    r"""OK - the request has succeeded."""
    
    notification_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notificationId') }})
    r"""The ID of the notification subscription configuration."""  
    error_messages: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorMessages'), 'exclude': lambda f: f is None }})
    r"""Any error messages encountered."""  
    event_types: Optional[list[TestNotificationConfigurationResponseEventTypesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventTypes'), 'exclude': lambda f: f is None }})
    r"""The event types that were tested.
    >Permitted values: `ACCOUNT_HOLDER_CREATED`, `ACCOUNT_CREATED`, `ACCOUNT_UPDATED`, `ACCOUNT_HOLDER_UPDATED`, `ACCOUNT_HOLDER_STATUS_CHANGE`, `ACCOUNT_HOLDER_STORE_STATUS_CHANGE` `ACCOUNT_HOLDER_VERIFICATION`, `ACCOUNT_HOLDER_LIMIT_REACHED`, `ACCOUNT_HOLDER_PAYOUT`, `PAYMENT_FAILURE`, `SCHEDULED_REFUNDS`, `REPORT_AVAILABLE`, `TRANSFER_FUNDS`, `BENEFICIARY_SETUP`, `COMPENSATE_NEGATIVE_BALANCE`.
    """  
    exchange_messages: Optional[list[shared_exchangemessage.ExchangeMessage]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exchangeMessages'), 'exclude': lambda f: f is None }})
    r"""The notification message and related response messages."""  
    invalid_fields: Optional[list[shared_errorfieldtype.ErrorFieldType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invalidFields'), 'exclude': lambda f: f is None }})
    r"""Contains field validation errors that would prevent requests from being processed."""  
    ok_messages: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('okMessages'), 'exclude': lambda f: f is None }})
    r"""A list of messages describing the testing steps."""  
    psp_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pspReference'), 'exclude': lambda f: f is None }})
    r"""The reference of a request. Can be used to uniquely identify the request."""  
    result_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resultCode'), 'exclude': lambda f: f is None }})
    r"""The result code."""  
    