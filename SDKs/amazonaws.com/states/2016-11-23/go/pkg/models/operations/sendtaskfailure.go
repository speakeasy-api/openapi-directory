// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// SendTaskFailureXAmzTargetEnum
type SendTaskFailureXAmzTargetEnum string

const (
	SendTaskFailureXAmzTargetEnumAwsStepFunctionsSendTaskFailure SendTaskFailureXAmzTargetEnum = "AWSStepFunctions.SendTaskFailure"
)

func (e *SendTaskFailureXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWSStepFunctions.SendTaskFailure":
		*e = SendTaskFailureXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SendTaskFailureXAmzTargetEnum: %s", s)
	}
}

type SendTaskFailureHeaders struct {
	XAmzAlgorithm     *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        SendTaskFailureXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type SendTaskFailureRequest struct {
	Headers SendTaskFailureHeaders
	Request shared.SendTaskFailureInput `request:"mediaType=application/json"`
}

type SendTaskFailureResponse struct {
	ContentType string
	// InvalidToken
	InvalidToken interface{}
	// Success
	SendTaskFailureOutput map[string]interface{}
	StatusCode            int
	RawResponse           *http.Response
	// TaskDoesNotExist
	TaskDoesNotExist interface{}
	// TaskTimedOut
	TaskTimedOut interface{}
}
