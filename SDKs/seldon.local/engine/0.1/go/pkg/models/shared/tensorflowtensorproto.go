// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// TensorflowTensorProto - Protocol buffer representing a tensor.
type TensorflowTensorProto struct {
	BoolVal []bool `json:"bool_val,omitempty"`
	// DT_COMPLEX128. dcomplex_val(2*i) and dcomplex_val(2*i+1) are real and imaginary parts of i-th double precision complex.
	DcomplexVal []float64 `json:"dcomplex_val,omitempty"`
	// DT_DOUBLE.
	DoubleVal []float64 `json:"double_val,omitempty"`
	// - DT_INVALID: Not a legal value for DataType.  Used to indicate a DataType field has not been set. - DT_FLOAT: Data types that all computation devices are expected to be capable to support. - DT_FLOAT_REF: Do not use!  These are only for parameters.  Every enum above should have a corresponding value below (verified by types_test).
	Dtype *TensorflowDataTypeEnum `json:"dtype,omitempty"`
	// DT_FLOAT.
	FloatVal []float32 `json:"float_val,omitempty"`
	// DT_HALF, DT_BFLOAT16. Note that since protobuf has no int16 type, we'll have some pointless zero padding for each value here.
	HalfVal  []int    `json:"half_val,omitempty"`
	Int64Val []string `json:"int64_val,omitempty"`
	// DT_INT32, DT_INT16, DT_INT8, DT_UINT8.
	IntVal            []int                           `json:"int_val,omitempty"`
	ResourceHandleVal []TensorflowResourceHandleProto `json:"resource_handle_val,omitempty"`
	// DT_COMPLEX64. scomplex_val(2*i) and scomplex_val(2*i+1) are real and imaginary parts of i-th single precision complex.
	ScomplexVal []float32 `json:"scomplex_val,omitempty"`
	StringVal   []string  `json:"string_val,omitempty"`
	// Serialized raw tensor content from either Tensor::AsProtoTensorContent or memcpy in tensorflow::grpc::EncodeTensorToByteBuffer. This representation can be used for all tensor types. The purpose of this representation is to reduce serialization overhead during RPC call by avoiding serialization of many repeated small items.
	TensorContent *string `json:"tensor_content,omitempty"`
	// Dimensions of a tensor.
	TensorShape *TensorflowTensorShapeProto        `json:"tensor_shape,omitempty"`
	Uint32Val   []int64                            `json:"uint32_val,omitempty"`
	Uint64Val   []string                           `json:"uint64_val,omitempty"`
	VariantVal  []TensorflowVariantTensorDataProto `json:"variant_val,omitempty"`
	// Version number.
	// In version 0, if the "repeated xxx" representations contain only one element, that element is repeated to fill the shape.  This makes it easy to represent a constant Tensor with a single value.
	VersionNumber *int `json:"version_number,omitempty"`
}
