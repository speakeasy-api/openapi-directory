/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

/**
 * SmartMeDeviceConfigurationContainer - API Container class for the meter configuration
 */
public class SmartMeDeviceConfigurationContainer {
    /**
     * The encryption key used to decrypt messages received from an external meter (used only for the smart-me modules)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DeviceEncryptionKey")
    @SpeakeasyMetadata("form:name=DeviceEncryptionKey")
    public String deviceEncryptionKey;

    public SmartMeDeviceConfigurationContainer withDeviceEncryptionKey(String deviceEncryptionKey) {
        this.deviceEncryptionKey = deviceEncryptionKey;
        return this;
    }
    
    /**
     * PIN code to enter on a external meter (e.g. for the FNN meters)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DevicePinCode")
    @SpeakeasyMetadata("form:name=DevicePinCode")
    public String devicePinCode;

    public SmartMeDeviceConfigurationContainer withDevicePinCode(String devicePinCode) {
        this.devicePinCode = devicePinCode;
        return this;
    }
    
    /**
     * Configuration of the dynamic DNS service. More information: http://wiki.smart-me.com/index.php/Dynamisches_DNS
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DnsUpdateState")
    @SpeakeasyMetadata("form:name=DnsUpdateState")
    public SmartMeDeviceConfigurationContainerDnsUpdateStateEnum dnsUpdateState;

    public SmartMeDeviceConfigurationContainer withDnsUpdateState(SmartMeDeviceConfigurationContainerDnsUpdateStateEnum dnsUpdateState) {
        this.dnsUpdateState = dnsUpdateState;
        return this;
    }
    
    /**
     * Enables or disables Modbus TCP (if the meter supports it).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EnableModbusTcp")
    @SpeakeasyMetadata("form:name=EnableModbusTcp")
    public Boolean enableModbusTcp;

    public SmartMeDeviceConfigurationContainer withEnableModbusTcp(Boolean enableModbusTcp) {
        this.enableModbusTcp = enableModbusTcp;
        return this;
    }
    
    /**
     * The ID of the device
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Id")
    @SpeakeasyMetadata("form:name=Id")
    public String id;

    public SmartMeDeviceConfigurationContainer withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The configuration for the intput outputs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InputConfiguration")
    @SpeakeasyMetadata("form:name=InputConfiguration,json")
    public InputConfigurationContainer[] inputConfiguration;

    public SmartMeDeviceConfigurationContainer withInputConfiguration(InputConfigurationContainer[] inputConfiguration) {
        this.inputConfiguration = inputConfiguration;
        return this;
    }
    
    /**
     * The configuration for the external outputs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OutputConfiguration")
    @SpeakeasyMetadata("form:name=OutputConfiguration,json")
    public OutputConfigurationContainer[] outputConfiguration;

    public SmartMeDeviceConfigurationContainer withOutputConfiguration(OutputConfigurationContainer[] outputConfiguration) {
        this.outputConfiguration = outputConfiguration;
        return this;
    }
    
    /**
     * Shows the reactive energy values (if the meter supports it).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ShowReactiveEnergy")
    @SpeakeasyMetadata("form:name=ShowReactiveEnergy")
    public Boolean showReactiveEnergy;

    public SmartMeDeviceConfigurationContainer withShowReactiveEnergy(Boolean showReactiveEnergy) {
        this.showReactiveEnergy = showReactiveEnergy;
        return this;
    }
    
    /**
     * The configuration for the phase switches
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SwitchConfiguration")
    @SpeakeasyMetadata("form:name=SwitchConfiguration,json")
    public SwitchConfigurationContainer[] switchConfiguration;

    public SmartMeDeviceConfigurationContainer withSwitchConfiguration(SwitchConfigurationContainer[] switchConfiguration) {
        this.switchConfiguration = switchConfiguration;
        return this;
    }
    
    /**
     * Number of seconds the device will upload the data. For smaller values maybe a professional license is needed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UploadInterval")
    @SpeakeasyMetadata("form:name=UploadInterval")
    public SmartMeDeviceConfigurationContainerUploadIntervalEnum uploadInterval;

    public SmartMeDeviceConfigurationContainer withUploadInterval(SmartMeDeviceConfigurationContainerUploadIntervalEnum uploadInterval) {
        this.uploadInterval = uploadInterval;
        return this;
    }
    
    public SmartMeDeviceConfigurationContainer(){}
}
