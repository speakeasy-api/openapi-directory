// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PatchSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDRequestBodyOrderEnum string

const (
	PatchSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDRequestBodyOrderEnumOnestAdvance   PatchSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDRequestBodyOrderEnum = "1st advance"
	PatchSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDRequestBodyOrderEnumTwondAdvance   PatchSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDRequestBodyOrderEnum = "2nd advance"
	PatchSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDRequestBodyOrderEnumThreerdAdvance PatchSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDRequestBodyOrderEnum = "3rd advance"
	PatchSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDRequestBodyOrderEnumFourthAdvance  PatchSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDRequestBodyOrderEnum = "4th advance"
	PatchSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDRequestBodyOrderEnumRegularization PatchSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDRequestBodyOrderEnum = "regularization"
)

func (e PatchSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDRequestBodyOrderEnum) ToPointer() *PatchSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDRequestBodyOrderEnum {
	return &e
}

func (e *PatchSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDRequestBodyOrderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1st advance":
		fallthrough
	case "2nd advance":
		fallthrough
	case "3rd advance":
		fallthrough
	case "4th advance":
		fallthrough
	case "regularization":
		*e = PatchSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDRequestBodyOrderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDRequestBodyOrderEnum: %v", v)
	}
}

// PatchSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDRequestBody - A Corporate Tax Declaration to modify
type PatchSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDRequestBody struct {
	Amount          *float32                                                                                 `json:"Amount,omitempty"`
	DeclarationDate *string                                                                                  `json:"DeclarationDate,omitempty"`
	Order           *PatchSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDRequestBodyOrderEnum `json:"Order,omitempty"`
	Rate            *float32                                                                                 `json:"Rate,omitempty"`
	TaxBase         *float32                                                                                 `json:"TaxBase,omitempty"`
}

type PatchSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDRequest struct {
	// A Corporate Tax Declaration to modify
	RequestBody *PatchSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDRequestBody `request:"mediaType=application/json"`
	// Id of the document
	DocumentID string `pathParam:"style=simple,explode=false,name=documentId"`
	// Id of the folder
	FolderID string `pathParam:"style=simple,explode=false,name=folderId"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

type PatchSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
