"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import _xgafv_enum as shared__xgafv_enum
from ..shared import alt_enum as shared_alt_enum
from ..shared import googleplaydeveloperreportingv1beta1searcherrorreportsresponse as shared_googleplaydeveloperreportingv1beta1searcherrorreportsresponse
from typing import Optional


@dataclasses.dataclass
class PlaydeveloperreportingVitalsErrorsReportsSearchSecurity:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class PlaydeveloperreportingVitalsErrorsReportsSearchRequest:
    
    parent: str = dataclasses.field(metadata={'path_param': { 'field_name': 'parent', 'style': 'simple', 'explode': False }})
    r"""Required. Parent resource of the reports, indicating the application for which they were received. Format: apps/{app}"""  
    dollar_xgafv: Optional[shared__xgafv_enum.XgafvEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$.xgafv', 'style': 'form', 'explode': True }})
    r"""V1 error format."""  
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'access_token', 'style': 'form', 'explode': True }})
    r"""OAuth access token."""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for response."""  
    callback: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'callback', 'style': 'form', 'explode': True }})
    r"""JSONP"""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    filter: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter', 'style': 'form', 'explode': True }})
    r"""A selection predicate to retrieve only a subset of the reports. For filtering basics, please check [AIP-160](https://google.aip.dev/160). ** Supported field names:** * `apiLevel`: Matches error reports that occurred in the requested Android versions (specified as the numeric API level) only. Example: `apiLevel = 28 OR apiLevel = 29`. * `versionCode`: Matches error reports that occurred in the requested app version codes only. Example: `versionCode = 123 OR versionCode = 456`. * `deviceModel`: Matches error reports that occurred in the requested devices. Example: `deviceModel = \\"walleye\\" OR deviceModel = \\"marlin\\"`. * `deviceType`: Matches error reports that occurred in the requested device types. Example: `deviceType = \\"PHONE\\"`. * `errorIssueType`: Matches error reports of the requested types only. Valid candidates: `JAVA_CRASH`, `NATIVE_CRASH`, `ANR`. Example: `errorIssueType = JAVA_CRASH OR errorIssueType = NATIVE_CRASH`. * `errorIssueId`: Matches error reports belonging to the requested error issue ids only. Example: `errorIssueId = 1234 OR errorIssueId = 4567`. * `appProcessState`: Matches error reports on the process state of an app, indicating whether an app runs in the foreground (user-visible) or background. Valid candidates: `FOREGROUND`, `BACKGROUND`. Example: `appProcessState = FOREGROUND`. * `isUserPerceived`: Matches error reports that are user-perceived. It is not accompanied by any operators. Example: `isUserPerceived`. ** Supported operators:** * Comparison operators: The only supported comparison operator is equality. The filtered field must appear on the left hand side of the comparison. * Logical Operators: Logical operators `AND` and `OR` can be used to build complex filters following a conjunctive normal form (CNF), i.e., conjunctions of disjunctions. The `OR` operator takes precedence over `AND` so the use of parenthesis is not necessary when building CNF. The `OR` operator is only supported to build disjunctions that apply to the same field, e.g., `versionCode = 123 OR versionCode = ANR`. The filter expression `versionCode = 123 OR errorIssueType = ANR` is not valid. ** Examples ** Some valid filtering expressions: * `versionCode = 123 AND errorIssueType = ANR` * `versionCode = 123 AND errorIssueType = OR errorIssueType = CRASH` * `versionCode = 123 AND (errorIssueType = OR errorIssueType = CRASH)`"""  
    interval_end_time_day: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'interval.endTime.day', 'style': 'form', 'explode': True }})
    r"""Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day."""  
    interval_end_time_hours: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'interval.endTime.hours', 'style': 'form', 'explode': True }})
    r"""Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value \\"24:00:00\\" for scenarios like business closing time."""  
    interval_end_time_minutes: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'interval.endTime.minutes', 'style': 'form', 'explode': True }})
    r"""Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0."""  
    interval_end_time_month: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'interval.endTime.month', 'style': 'form', 'explode': True }})
    r"""Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month."""  
    interval_end_time_nanos: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'interval.endTime.nanos', 'style': 'form', 'explode': True }})
    r"""Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0."""  
    interval_end_time_seconds: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'interval.endTime.seconds', 'style': 'form', 'explode': True }})
    r"""Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds."""  
    interval_end_time_time_zone_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'interval.endTime.timeZone.id', 'style': 'form', 'explode': True }})
    r"""IANA Time Zone Database time zone, e.g. \\"America/New_York\\"."""  
    interval_end_time_time_zone_version: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'interval.endTime.timeZone.version', 'style': 'form', 'explode': True }})
    r"""Optional. IANA Time Zone Database version number, e.g. \\"2019a\\"."""  
    interval_end_time_utc_offset: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'interval.endTime.utcOffset', 'style': 'form', 'explode': True }})
    r"""UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }."""  
    interval_end_time_year: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'interval.endTime.year', 'style': 'form', 'explode': True }})
    r"""Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year."""  
    interval_start_time_day: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'interval.startTime.day', 'style': 'form', 'explode': True }})
    r"""Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day."""  
    interval_start_time_hours: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'interval.startTime.hours', 'style': 'form', 'explode': True }})
    r"""Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value \\"24:00:00\\" for scenarios like business closing time."""  
    interval_start_time_minutes: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'interval.startTime.minutes', 'style': 'form', 'explode': True }})
    r"""Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0."""  
    interval_start_time_month: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'interval.startTime.month', 'style': 'form', 'explode': True }})
    r"""Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month."""  
    interval_start_time_nanos: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'interval.startTime.nanos', 'style': 'form', 'explode': True }})
    r"""Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0."""  
    interval_start_time_seconds: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'interval.startTime.seconds', 'style': 'form', 'explode': True }})
    r"""Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds."""  
    interval_start_time_time_zone_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'interval.startTime.timeZone.id', 'style': 'form', 'explode': True }})
    r"""IANA Time Zone Database time zone, e.g. \\"America/New_York\\"."""  
    interval_start_time_time_zone_version: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'interval.startTime.timeZone.version', 'style': 'form', 'explode': True }})
    r"""Optional. IANA Time Zone Database version number, e.g. \\"2019a\\"."""  
    interval_start_time_utc_offset: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'interval.startTime.utcOffset', 'style': 'form', 'explode': True }})
    r"""UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }."""  
    interval_start_time_year: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'interval.startTime.year', 'style': 'form', 'explode': True }})
    r"""Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pageSize', 'style': 'form', 'explode': True }})
    r"""The maximum number of reports to return. The service may return fewer than this value. If unspecified, at most 50 reports will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000."""  
    page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pageToken', 'style': 'form', 'explode': True }})
    r"""A page token, received from a previous `SearchErrorReports` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `SearchErrorReports` must match the call that provided the page token."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."""  
    upload_protocol: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'upload_protocol', 'style': 'form', 'explode': True }})
    r"""Upload protocol for media (e.g. \\"raw\\", \\"multipart\\")."""  
    upload_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'uploadType', 'style': 'form', 'explode': True }})
    r"""Legacy upload protocol for media (e.g. \\"media\\", \\"multipart\\")."""  
    

@dataclasses.dataclass
class PlaydeveloperreportingVitalsErrorsReportsSearchResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    google_play_developer_reporting_v1beta1_search_error_reports_response: Optional[shared_googleplaydeveloperreportingv1beta1searcherrorreportsresponse.GooglePlayDeveloperReportingV1beta1SearchErrorReportsResponse] = dataclasses.field(default=None)
    r"""Successful response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    