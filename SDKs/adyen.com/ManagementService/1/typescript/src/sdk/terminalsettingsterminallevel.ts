/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class TerminalSettingsTerminalLevel {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get the terminal logo
   *
   * @remarks
   * Returns the logo that is configured for the payment terminal identified in the path.
   * The logo is returned as a Base64-encoded string. You need to Base64-decode the string to get the actual image file.
   *
   * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   * * Management API—Terminal settings read
   * * Management API—Terminal settings read and write
   */
  getTerminalsTerminalIdTerminalLogos(
    req: operations.GetTerminalsTerminalIdTerminalLogosRequest,
    security: operations.GetTerminalsTerminalIdTerminalLogosSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTerminalsTerminalIdTerminalLogosResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTerminalsTerminalIdTerminalLogosRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/terminals/{terminalId}/terminalLogos",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTerminalsTerminalIdTerminalLogosSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTerminalsTerminalIdTerminalLogosResponse =
        new operations.GetTerminalsTerminalIdTerminalLogosResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.logo = utils.objectToClass(httpRes?.data, shared.Logo);
          }
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get terminal settings
   *
   * @remarks
   * Returns the settings that are configured for the payment terminal identified in the path.
   *
   * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   * * Management API—Terminal settings read
   * * Management API—Terminal settings read and write
   */
  getTerminalsTerminalIdTerminalSettings(
    req: operations.GetTerminalsTerminalIdTerminalSettingsRequest,
    security: operations.GetTerminalsTerminalIdTerminalSettingsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTerminalsTerminalIdTerminalSettingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTerminalsTerminalIdTerminalSettingsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/terminals/{terminalId}/terminalSettings",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTerminalsTerminalIdTerminalSettingsSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTerminalsTerminalIdTerminalSettingsResponse =
        new operations.GetTerminalsTerminalIdTerminalSettingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.terminalSettings = utils.objectToClass(
              httpRes?.data,
              shared.TerminalSettings
            );
          }
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update the logo
   *
   * @remarks
   * Updates the logo for the payment terminal identified in the path.
   *
   * * To change the logo, specify the image file as a Base64-encoded string.
   * * To restore the logo inherited from a higher level (store, merchant account, or company account), specify an empty logo value.
   *
   * To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   * * Management API—Terminal settings read and write
   */
  patchTerminalsTerminalIdTerminalLogos(
    req: operations.PatchTerminalsTerminalIdTerminalLogosRequest,
    security: operations.PatchTerminalsTerminalIdTerminalLogosSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchTerminalsTerminalIdTerminalLogosResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PatchTerminalsTerminalIdTerminalLogosRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/terminals/{terminalId}/terminalLogos",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "logo",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PatchTerminalsTerminalIdTerminalLogosSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchTerminalsTerminalIdTerminalLogosResponse =
        new operations.PatchTerminalsTerminalIdTerminalLogosResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.logo = utils.objectToClass(httpRes?.data, shared.Logo);
          }
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update terminal settings
   *
   * @remarks
   * Updates the settings that are configured for the payment terminal identified in the path.
   *
   * * To change a parameter value, include the full object that contains the parameter, even if you don't want to change all parameters in the object.
   * * To restore a parameter value inherited from a higher level, include the full object that contains the parameter, and specify an empty value for the parameter or omit the parameter.
   * * Objects that are not included in the request are not updated.
   *
   * To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   * * Management API—Terminal settings read and write
   */
  patchTerminalsTerminalIdTerminalSettings(
    req: operations.PatchTerminalsTerminalIdTerminalSettingsRequest,
    security: operations.PatchTerminalsTerminalIdTerminalSettingsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchTerminalsTerminalIdTerminalSettingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PatchTerminalsTerminalIdTerminalSettingsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/terminals/{terminalId}/terminalSettings",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "terminalSettings",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.PatchTerminalsTerminalIdTerminalSettingsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchTerminalsTerminalIdTerminalSettingsResponse =
        new operations.PatchTerminalsTerminalIdTerminalSettingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.terminalSettings = utils.objectToClass(
              httpRes?.data,
              shared.TerminalSettings
            );
          }
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }
}
