"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import beezup_common_columndatatype_enum as shared_beezup_common_columndatatype_enum
from ..shared import beezup_common_columnimportance_enum as shared_beezup_common_columnimportance_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BeezUPColumnConfiguration:
    r"""Describe a BeezUP column"""
    
    beez_up_column_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beezUPColumnName') }})
    r"""The BeezUP column name"""  
    column_importance: shared_beezup_common_columnimportance_enum.BeezUPCommonColumnImportanceEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('columnImportance') }})
    r"""Importance of the column"""  
    display_group_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayGroupName') }})
    r"""Indicate the display group name where the column must be putted"""  
    can_be_truncated: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canBeTruncated'), 'exclude': lambda f: f is None }})
    r"""If the size of the value is greater than the limit we can truncate the value instead of failing..."""  
    column_data_type: Optional[shared_beezup_common_columndatatype_enum.BeezUPCommonColumnDataTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('columnDataType'), 'exclude': lambda f: f is None }})
    r"""Data type of the column, will be used for parsing and for consolidation proces"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Describe the BeezUP column"""  
    unique: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unique'), 'exclude': lambda f: f is None }})
    r"""/!\ ONLY AVAILABLE ON CATALOG COLUMN NOT ON CUSTOM COLUMNS!!
    If true, an error happen at the second occurence of the same value for this column
    This information will be used during the importation process and later for mapping proposal
    """  
    