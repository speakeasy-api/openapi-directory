/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Certificate - A certificate that can be installed on compute nodes and can be used to authenticate operations on the machine.
 */
public class Certificate {
    /**
     * An error encountered by the Batch service when deleting a certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteCertificateError")
    public DeleteCertificateError deleteCertificateError;
    public Certificate withDeleteCertificateError(DeleteCertificateError deleteCertificateError) {
        this.deleteCertificateError = deleteCertificateError;
        return this;
    }
    
    /**
     * Gets or sets the previous state of the certificate. This property is not set if the certificate is in its initial Active state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("previousState")
    public CertificatePreviousStateEnum previousState;
    public Certificate withPreviousState(CertificatePreviousStateEnum previousState) {
        this.previousState = previousState;
        return this;
    }
    
    /**
     * Gets or sets the time at which the certificate entered its previous state.  This property is not set if the certificate is in its initial Active state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("previousStateTransitionTime")
    public OffsetDateTime previousStateTransitionTime;
    public Certificate withPreviousStateTransitionTime(OffsetDateTime previousStateTransitionTime) {
        this.previousStateTransitionTime = previousStateTransitionTime;
        return this;
    }
    
    /**
     * Gets or sets the public part of the certificate as a base-64 encoded .cer file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publicData")
    public String publicData;
    public Certificate withPublicData(String publicData) {
        this.publicData = publicData;
        return this;
    }
    
    /**
     * Gets or sets the current state of the certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public CertificateStateEnum state;
    public Certificate withState(CertificateStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Gets or sets the time at which the certificate entered its current state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("stateTransitionTime")
    public OffsetDateTime stateTransitionTime;
    public Certificate withStateTransitionTime(OffsetDateTime stateTransitionTime) {
        this.stateTransitionTime = stateTransitionTime;
        return this;
    }
    
    /**
     * Get or sets the X.509 thumbprint of the certificate. This is a sequence of up to 40 hex digits (it may include spaces but these are removed).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbprint")
    public String thumbprint;
    public Certificate withThumbprint(String thumbprint) {
        this.thumbprint = thumbprint;
        return this;
    }
    
    /**
     * Gets or sets the algorithm used to derive the thumbprint. This must be sha1.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbprintAlgorithm")
    public String thumbprintAlgorithm;
    public Certificate withThumbprintAlgorithm(String thumbprintAlgorithm) {
        this.thumbprintAlgorithm = thumbprintAlgorithm;
        return this;
    }
    
    /**
     * Gets or sets the URL of the certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;
    public Certificate withUrl(String url) {
        this.url = url;
        return this;
    }
    
}
