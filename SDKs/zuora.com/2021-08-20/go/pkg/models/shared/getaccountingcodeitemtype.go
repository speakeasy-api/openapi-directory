// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// GETAccountingCodeItemTypeCategoryEnum - The category associated with the accounting code.
type GETAccountingCodeItemTypeCategoryEnum string

const (
	GETAccountingCodeItemTypeCategoryEnumAssets      GETAccountingCodeItemTypeCategoryEnum = "Assets"
	GETAccountingCodeItemTypeCategoryEnumLiabilities GETAccountingCodeItemTypeCategoryEnum = "Liabilities"
	GETAccountingCodeItemTypeCategoryEnumEquity      GETAccountingCodeItemTypeCategoryEnum = "Equity"
	GETAccountingCodeItemTypeCategoryEnumRevenue     GETAccountingCodeItemTypeCategoryEnum = "Revenue"
	GETAccountingCodeItemTypeCategoryEnumExpenses    GETAccountingCodeItemTypeCategoryEnum = "Expenses"
)

func (e *GETAccountingCodeItemTypeCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Assets":
		fallthrough
	case "Liabilities":
		fallthrough
	case "Equity":
		fallthrough
	case "Revenue":
		fallthrough
	case "Expenses":
		*e = GETAccountingCodeItemTypeCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAccountingCodeItemTypeCategoryEnum: %s", s)
	}
}

// GETAccountingCodeItemTypeStatusEnum - The accounting code status.
type GETAccountingCodeItemTypeStatusEnum string

const (
	GETAccountingCodeItemTypeStatusEnumActive   GETAccountingCodeItemTypeStatusEnum = "Active"
	GETAccountingCodeItemTypeStatusEnumInactive GETAccountingCodeItemTypeStatusEnum = "Inactive"
)

func (e *GETAccountingCodeItemTypeStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Active":
		fallthrough
	case "Inactive":
		*e = GETAccountingCodeItemTypeStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAccountingCodeItemTypeStatusEnum: %s", s)
	}
}

// GETAccountingCodeItemTypeTypeEnum - Accounting code type.
//
// Note that `On-Account Receivable` is only available if you enable the Invoice Settlement feature.
type GETAccountingCodeItemTypeTypeEnum string

const (
	GETAccountingCodeItemTypeTypeEnumAccountsReceivable    GETAccountingCodeItemTypeTypeEnum = "AccountsReceivable"
	GETAccountingCodeItemTypeTypeEnumOnAccountReceivable   GETAccountingCodeItemTypeTypeEnum = "On-Account Receivable"
	GETAccountingCodeItemTypeTypeEnumCash                  GETAccountingCodeItemTypeTypeEnum = "Cash"
	GETAccountingCodeItemTypeTypeEnumOtherAssets           GETAccountingCodeItemTypeTypeEnum = "OtherAssets"
	GETAccountingCodeItemTypeTypeEnumCustomerCashOnAccount GETAccountingCodeItemTypeTypeEnum = "CustomerCashOnAccount"
	GETAccountingCodeItemTypeTypeEnumDeferredRevenue       GETAccountingCodeItemTypeTypeEnum = "DeferredRevenue"
	GETAccountingCodeItemTypeTypeEnumSalesTaxPayable       GETAccountingCodeItemTypeTypeEnum = "SalesTaxPayable"
	GETAccountingCodeItemTypeTypeEnumOtherLiabilities      GETAccountingCodeItemTypeTypeEnum = "OtherLiabilities"
	GETAccountingCodeItemTypeTypeEnumSalesRevenue          GETAccountingCodeItemTypeTypeEnum = "SalesRevenue"
	GETAccountingCodeItemTypeTypeEnumSalesDiscounts        GETAccountingCodeItemTypeTypeEnum = "SalesDiscounts"
	GETAccountingCodeItemTypeTypeEnumOtherRevenue          GETAccountingCodeItemTypeTypeEnum = "OtherRevenue"
	GETAccountingCodeItemTypeTypeEnumOtherEquity           GETAccountingCodeItemTypeTypeEnum = "OtherEquity"
	GETAccountingCodeItemTypeTypeEnumBadDebt               GETAccountingCodeItemTypeTypeEnum = "BadDebt"
	GETAccountingCodeItemTypeTypeEnumOtherExpenses         GETAccountingCodeItemTypeTypeEnum = "OtherExpenses"
)

func (e *GETAccountingCodeItemTypeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AccountsReceivable":
		fallthrough
	case "On-Account Receivable":
		fallthrough
	case "Cash":
		fallthrough
	case "OtherAssets":
		fallthrough
	case "CustomerCashOnAccount":
		fallthrough
	case "DeferredRevenue":
		fallthrough
	case "SalesTaxPayable":
		fallthrough
	case "OtherLiabilities":
		fallthrough
	case "SalesRevenue":
		fallthrough
	case "SalesDiscounts":
		fallthrough
	case "OtherRevenue":
		fallthrough
	case "OtherEquity":
		fallthrough
	case "BadDebt":
		fallthrough
	case "OtherExpenses":
		*e = GETAccountingCodeItemTypeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAccountingCodeItemTypeTypeEnum: %s", s)
	}
}

// GETAccountingCodeItemType - Container for custom fields of an Accounting Code object.
type GETAccountingCodeItemType struct {
	// The category associated with the accounting code.
	//
	Category *GETAccountingCodeItemTypeCategoryEnum `json:"category,omitempty"`
	// The ID of the user who created the accounting code.
	//
	CreatedBy *string `json:"createdBy,omitempty"`
	// Date and time when the accounting code was created.
	//
	CreatedOn *time.Time `json:"createdOn,omitempty"`
	// Name of the account in your general ledger.
	//
	// Field only available if you have Zuora Finance enabled.
	//
	GlAccountName *string `json:"glAccountName,omitempty"`
	// Account number in your general ledger.
	//
	// Field only available if you have Zuora Finance enabled.
	//
	GlAccountNumber *string `json:"glAccountNumber,omitempty"`
	// ID of the accounting code.
	//
	ID *string `json:"id,omitempty"`
	// Name of the accounting code.
	//
	Name *string `json:"name,omitempty"`
	// Any optional notes for the accounting code.
	//
	Notes *string `json:"notes,omitempty"`
	// The accounting code status.
	//
	Status *GETAccountingCodeItemTypeStatusEnum `json:"status,omitempty"`
	// Returns `true` if the request was processed successfully.
	//
	Success *bool `json:"success,omitempty"`
	// Accounting code type.
	//
	// Note that `On-Account Receivable` is only available if you enable the Invoice Settlement feature.
	//
	Type *GETAccountingCodeItemTypeTypeEnum `json:"type,omitempty"`
	// The ID of the user who last updated the accounting code.
	//
	UpdatedBy *string `json:"updatedBy,omitempty"`
	// Date and time when the accounting code was last updated.
	//
	UpdatedOn *time.Time `json:"updatedOn,omitempty"`
}
