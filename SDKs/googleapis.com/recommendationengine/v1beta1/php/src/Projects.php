<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a catalog item.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsCreateResponse
     */
	public function recommendationengineProjectsLocationsCatalogsCatalogItemsCreate(
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/catalogItems', \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudRecommendationengineV1beta1CatalogItem", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecommendationengineV1beta1CatalogItem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecommendationengineV1beta1CatalogItem', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Bulk import of multiple catalog items. Request processing may be synchronous. No partial updating supported. Non-existing items will be created. Operation.response is of type ImportResponse. Note that it is possible for a subset of the items to be successfully updated.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsImportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsImportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsImportResponse
     */
	public function recommendationengineProjectsLocationsCatalogsCatalogItemsImport(
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsImportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsImportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsImportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/catalogItems:import', \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsImportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudRecommendationengineV1beta1ImportCatalogItemsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsImportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsImportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a list of catalog items.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsListResponse
     */
	public function recommendationengineProjectsLocationsCatalogsCatalogItemsList(
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/catalogItems', \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecommendationengineV1beta1ListCatalogItemsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecommendationengineV1beta1ListCatalogItemsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a catalog item. Partial updating is supported. Non-existing items will be created.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsPatchResponse
     */
	public function recommendationengineProjectsLocationsCatalogsCatalogItemsPatch(
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudRecommendationengineV1beta1CatalogItem", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsCatalogItemsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecommendationengineV1beta1CatalogItem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecommendationengineV1beta1CatalogItem', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Makes a recommendation prediction. If using API Key based authentication, the API Key must be registered using the PredictionApiKeyRegistry service. [Learn more](https://cloud.google.com/recommendations-ai/docs/setting-up#register-key).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPlacementsPredictRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPlacementsPredictSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPlacementsPredictResponse
     */
	public function recommendationengineProjectsLocationsCatalogsEventStoresPlacementsPredict(
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPlacementsPredictRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPlacementsPredictSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPlacementsPredictResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:predict', \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPlacementsPredictRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudRecommendationengineV1beta1PredictRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPlacementsPredictRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPlacementsPredictResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecommendationengineV1beta1PredictResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecommendationengineV1beta1PredictResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Register an API key for use with predict method.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsCreateResponse
     */
	public function recommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsCreate(
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/predictionApiKeyRegistrations', \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudRecommendationengineV1beta1CreatePredictionApiKeyRegistrationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecommendationengineV1beta1PredictionApiKeyRegistration = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecommendationengineV1beta1PredictionApiKeyRegistration', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unregister an apiKey from using for predict method.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsDeleteResponse
     */
	public function recommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the registered apiKeys for use with predict method.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsListResponse
     */
	public function recommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsList(
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/predictionApiKeyRegistrations', \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresPredictionApiKeyRegistrationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecommendationengineV1beta1ListPredictionApiKeyRegistrationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecommendationengineV1beta1ListPredictionApiKeyRegistrationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Writes a single user event from the browser. This uses a GET request to due to browser restriction of POST-ing to a 3rd party domain. This method is used only by the Recommendations AI JavaScript pixel. Users should not call this method directly.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsCollectRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsCollectSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsCollectResponse
     */
	public function recommendationengineProjectsLocationsCatalogsEventStoresUserEventsCollect(
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsCollectRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsCollectSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsCollectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/userEvents:collect', \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsCollectRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsCollectRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsCollectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleApiHttpBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleApiHttpBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Bulk import of User events. Request processing might be synchronous. Events that already exist are skipped. Use this method for backfilling historical user events. Operation.response is of type ImportResponse. Note that it is possible for a subset of the items to be successfully inserted. Operation.metadata is of type ImportMetadata.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsImportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsImportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsImportResponse
     */
	public function recommendationengineProjectsLocationsCatalogsEventStoresUserEventsImport(
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsImportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsImportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsImportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/userEvents:import', \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsImportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudRecommendationengineV1beta1ImportUserEventsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsImportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsImportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a list of user events within a time range, with potential filtering. The method does not list unjoined user events. Unjoined user event definition: when a user event is ingested from Recommendations AI User Event APIs, the catalog item included in the user event is connected with the current catalog. If a catalog item of the ingested event is not in the current catalog, it could lead to degraded model quality. This is called an unjoined event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsListResponse
     */
	public function recommendationengineProjectsLocationsCatalogsEventStoresUserEventsList(
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/userEvents', \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecommendationengineV1beta1ListUserEventsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecommendationengineV1beta1ListUserEventsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes permanently all user events specified by the filter provided. Depending on the number of events specified by the filter, this operation could take hours or days to complete. To test a filter, use the list command first.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsPurgeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsPurgeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsPurgeResponse
     */
	public function recommendationengineProjectsLocationsCatalogsEventStoresUserEventsPurge(
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsPurgeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsPurgeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsPurgeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/userEvents:purge', \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsPurgeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudRecommendationengineV1beta1PurgeUserEventsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsPurgeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsPurgeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Triggers a user event rejoin operation with latest catalog data. Events will not be annotated with detailed catalog information if catalog item is missing at the time the user event is ingested, and these events are stored as unjoined events with a limited usage on training and serving. This API can be used to trigger a 'join' operation on specified events with latest version of catalog items. It can also be used to correct events joined with wrong catalog items.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsRejoinRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsRejoinSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsRejoinResponse
     */
	public function recommendationengineProjectsLocationsCatalogsEventStoresUserEventsRejoin(
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsRejoinRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsRejoinSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsRejoinResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/userEvents:rejoin', \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsRejoinRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudRecommendationengineV1beta1RejoinUserEventsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsRejoinRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsRejoinResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Writes a single user event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsWriteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsWriteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsWriteResponse
     */
	public function recommendationengineProjectsLocationsCatalogsEventStoresUserEventsWrite(
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsWriteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsWriteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsWriteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/userEvents:write', \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsWriteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudRecommendationengineV1beta1UserEvent", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsWriteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsEventStoresUserEventsWriteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecommendationengineV1beta1UserEvent = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecommendationengineV1beta1UserEvent', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the catalog configurations associated with the project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsListResponse
     */
	public function recommendationengineProjectsLocationsCatalogsList(
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/catalogs', \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecommendationengineV1beta1ListCatalogsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecommendationengineV1beta1ListCatalogsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsOperationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsOperationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsOperationsGetResponse
     */
	public function recommendationengineProjectsLocationsCatalogsOperationsGet(
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsOperationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsOperationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsOperationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsOperationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsOperationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsOperationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsOperationsListResponse
     */
	public function recommendationengineProjectsLocationsCatalogsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecommendationengineProjectsLocationsCatalogsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningListOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningListOperationsResponse', 'json');
            }
        }

        return $response;
    }
}