// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type GuestInSpaceClientManagementEnum string

const (
	GuestInSpaceClientManagementEnumNo      GuestInSpaceClientManagementEnum = "no"
	GuestInSpaceClientManagementEnumManager GuestInSpaceClientManagementEnum = "manager"
	GuestInSpaceClientManagementEnumAdn     GuestInSpaceClientManagementEnum = "adn"
)

func (e *GuestInSpaceClientManagementEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "no":
		fallthrough
	case "manager":
		fallthrough
	case "adn":
		*e = GuestInSpaceClientManagementEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GuestInSpaceClientManagementEnum: %s", s)
	}
}

type GuestInSpaceFoldersRightEnum string

const (
	GuestInSpaceFoldersRightEnumRead  GuestInSpaceFoldersRightEnum = "read"
	GuestInSpaceFoldersRightEnumWrite GuestInSpaceFoldersRightEnum = "write"
)

func (e *GuestInSpaceFoldersRightEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = GuestInSpaceFoldersRightEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GuestInSpaceFoldersRightEnum: %s", s)
	}
}

type GuestInSpaceFolders struct {
	ID    *string                       `json:"Id,omitempty"`
	Right *GuestInSpaceFoldersRightEnum `json:"Right,omitempty"`
}

type GuestInSpacePlayerEnum string

const (
	GuestInSpacePlayerEnumGuest        GuestInSpacePlayerEnum = "guest"
	GuestInSpacePlayerEnumOwner        GuestInSpacePlayerEnum = "owner"
	GuestInSpacePlayerEnumManager      GuestInSpacePlayerEnum = "manager"
	GuestInSpacePlayerEnumAssistant    GuestInSpacePlayerEnum = "assistant"
	GuestInSpacePlayerEnumCollaborator GuestInSpacePlayerEnum = "collaborator"
)

func (e *GuestInSpacePlayerEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "guest":
		fallthrough
	case "owner":
		fallthrough
	case "manager":
		fallthrough
	case "assistant":
		fallthrough
	case "collaborator":
		*e = GuestInSpacePlayerEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GuestInSpacePlayerEnum: %s", s)
	}
}

// GuestInSpace - Infos to invite
type GuestInSpace struct {
	ClientManagement *GuestInSpaceClientManagementEnum `json:"ClientManagement,omitempty"`
	Comment          *string                           `json:"Comment,omitempty"`
	Contact          *string                           `json:"Contact,omitempty"`
	Folders          []GuestInSpaceFolders             `json:"Folders,omitempty"`
	GroupIds         []string                          `json:"GroupIds,omitempty"`
	IsAdmin          *bool                             `json:"IsAdmin,omitempty"`
	MemberID         *string                           `json:"MemberId,omitempty"`
	Message          *string                           `json:"Message,omitempty"`
	Player           *GuestInSpacePlayerEnum           `json:"Player,omitempty"`
	PlayerEnd        *string                           `json:"PlayerEnd,omitempty"`
	Signature        *string                           `json:"Signature,omitempty"`
	Subject          *string                           `json:"Subject,omitempty"`
}
