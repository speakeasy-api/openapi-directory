/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class ResourceGroups {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete Resource Group
   *
   * @remarks
   * <p>Use this endpoint to <b>Delete</b> a resourceGroup object. A valid <b>resourceGroup id</b> is required. The resource group is not permanently deleted and can be recovered by using the <i>PUT  /setup /v1 /resourcegroups /{id} /recover</i> endpoint.</p>
   */
  deleteSetupV1ResourcegroupsId(
    req: operations.DeleteSetupV1ResourcegroupsIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteSetupV1ResourcegroupsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteSetupV1ResourcegroupsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/setup/v1/resourcegroups/{id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteSetupV1ResourcegroupsIdResponse =
        new operations.DeleteSetupV1ResourcegroupsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceGroupViewModel = utils.objectToClass(
              httpRes?.data,
              shared.ResourceGroupViewModel
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List Resource Groups
   *
   * @remarks
   * <p>Use this endpoint to <b>List Resource Groups</b> for the specified location. If not specified, the business location defaults to the primary business location. <b>Name</b> is a required field.</p>
   * <p>Use the offset and limit parameters to control the page start and size. Default offset is 0, limit is 20, maximum is 100. Use the query parameters to filter the results further.</p>
   */
  getSetupV1Resourcegroups(
    req: operations.GetSetupV1ResourcegroupsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSetupV1ResourcegroupsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSetupV1ResourcegroupsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/setup/v1/resourcegroups";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSetupV1ResourcegroupsResponse =
        new operations.GetSetupV1ResourcegroupsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceGroupListViewModel = utils.objectToClass(
              httpRes?.data,
              shared.ResourceGroupListViewModel
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Resource Group
   *
   * @remarks
   * <p>Use this endpoint to return a <b>Resource Group</b> object. A valid <b>resourceGroup id</b> is required. Find resourceGroup id's by using the <i>GET setup/v1/resourceGroups</i> endpoint.</p>
   */
  getSetupV1ResourcegroupsId(
    req: operations.GetSetupV1ResourcegroupsIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSetupV1ResourcegroupsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSetupV1ResourcegroupsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/setup/v1/resourcegroups/{id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSetupV1ResourcegroupsIdResponse =
        new operations.GetSetupV1ResourcegroupsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceGroupViewModel = utils.objectToClass(
              httpRes?.data,
              shared.ResourceGroupViewModel
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create Resource Group
   *
   * @remarks
   * <p>Use this endpoint to <b>Create</b> a resourceGroup object. Resource groups are used to categorize your resources.</p>
   */
  postSetupV1Resourcegroups(
    req: shared.ResourceGroupInputModel,
    config?: AxiosRequestConfig
  ): Promise<operations.PostSetupV1ResourcegroupsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.ResourceGroupInputModel(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/setup/v1/resourcegroups";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostSetupV1ResourcegroupsResponse =
        new operations.PostSetupV1ResourcegroupsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceGroupViewModel = utils.objectToClass(
              httpRes?.data,
              shared.ResourceGroupViewModel
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update Resource Group
   *
   * @remarks
   * <p>Use this endpoint to <b>Update</b> a resourceGroup object. A valid <b>resourceGroup id</b> is required. </p>
   */
  putSetupV1ResourcegroupsId(
    req: operations.PutSetupV1ResourcegroupsIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutSetupV1ResourcegroupsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutSetupV1ResourcegroupsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/setup/v1/resourcegroups/{id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "resourceGroupUpdateModel",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutSetupV1ResourcegroupsIdResponse =
        new operations.PutSetupV1ResourcegroupsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceGroupViewModel = utils.objectToClass(
              httpRes?.data,
              shared.ResourceGroupViewModel
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Recover Resource Group
   *
   * @remarks
   * <p>Use this endpoint to <b>Recover</b> a deleted resourceGroup object. A valid <b>resourceGroup id</b> is required.</p>
   */
  putSetupV1ResourcegroupsIdRecover(
    req: operations.PutSetupV1ResourcegroupsIdRecoverRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutSetupV1ResourcegroupsIdRecoverResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutSetupV1ResourcegroupsIdRecoverRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/setup/v1/resourcegroups/{id}/recover",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutSetupV1ResourcegroupsIdRecoverResponse =
        new operations.PutSetupV1ResourcegroupsIdRecoverResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceViewModel = utils.objectToClass(
              httpRes?.data,
              shared.ResourceViewModel
            );
          }
          break;
      }

      return res;
    });
  }
}
