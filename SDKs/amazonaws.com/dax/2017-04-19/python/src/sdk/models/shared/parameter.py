"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import changetype_enum as shared_changetype_enum
from ..shared import ismodifiable_enum as shared_ismodifiable_enum
from ..shared import nodetypespecificvalue as shared_nodetypespecificvalue
from ..shared import parametertype_enum as shared_parametertype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Parameter:
    r"""Describes an individual setting that controls some aspect of DAX behavior."""
    
    allowed_values: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AllowedValues'), 'exclude': lambda f: f is None }})  
    change_type: Optional[shared_changetype_enum.ChangeTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ChangeType'), 'exclude': lambda f: f is None }})  
    data_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataType'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    is_modifiable: Optional[shared_ismodifiable_enum.IsModifiableEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsModifiable'), 'exclude': lambda f: f is None }})  
    node_type_specific_values: Optional[list[shared_nodetypespecificvalue.NodeTypeSpecificValue]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NodeTypeSpecificValues'), 'exclude': lambda f: f is None }})  
    parameter_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ParameterName'), 'exclude': lambda f: f is None }})  
    parameter_type: Optional[shared_parametertype_enum.ParameterTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ParameterType'), 'exclude': lambda f: f is None }})  
    parameter_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ParameterValue'), 'exclude': lambda f: f is None }})  
    source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Source'), 'exclude': lambda f: f is None }})  
    