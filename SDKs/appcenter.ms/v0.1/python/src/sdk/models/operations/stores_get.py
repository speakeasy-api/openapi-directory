"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class StoresGetSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclasses.dataclass
class StoresGetRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    store_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'store_name', 'style': 'simple', 'explode': False }})
    r"""The name of the store"""  
    
class StoresGetDefaultApplicationJSONCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StoresGetDefaultApplicationJSON:
    r"""Error"""
    
    code: StoresGetDefaultApplicationJSONCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StoresGet200ApplicationJSONIntuneDetailsAppCategory:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID for the category."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""display name for the app category"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StoresGet200ApplicationJSONIntuneDetailsTargetAudience:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID for the target audience/group."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""display name for the target audience/group"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StoresGet200ApplicationJSONIntuneDetails:
    r"""Store details for intune"""
    
    app_category: Optional[StoresGet200ApplicationJSONIntuneDetailsAppCategory] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_category'), 'exclude': lambda f: f is None }})  
    target_audience: Optional[StoresGet200ApplicationJSONIntuneDetailsTargetAudience] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target_audience'), 'exclude': lambda f: f is None }})  
    
class StoresGet200ApplicationJSONTrackEnum(str, Enum):
    r"""Store track"""
    PRODUCTION = 'production'
    ALPHA = 'alpha'
    BETA = 'beta'
    TESTFLIGHT_INTERNAL = 'testflight-internal'
    TESTFLIGHT_EXTERNAL = 'testflight-external'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StoresGet200ApplicationJSON:
    r"""ExternalStoreResponse"""
    
    created_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_by'), 'exclude': lambda f: f is None }})
    r"""The ID of the principal that created the store."""  
    created_by_principal_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_by_principal_type'), 'exclude': lambda f: f is None }})
    r"""The type of the principal that created the store."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Store id"""  
    intune_details: Optional[StoresGet200ApplicationJSONIntuneDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('intune_details'), 'exclude': lambda f: f is None }})
    r"""Store details for intune"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Store Name"""  
    service_connection_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service_connection_id'), 'exclude': lambda f: f is None }})
    r"""Id for the shared service connection. In case of Apple / GooglePlay stores, this connection will be used to connect to the Apple / Google stores in App Center."""  
    track: Optional[StoresGet200ApplicationJSONTrackEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('track'), 'exclude': lambda f: f is None }})
    r"""Store track"""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Store Type"""  
    

@dataclasses.dataclass
class StoresGetResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    stores_get_200_application_json_object: Optional[StoresGet200ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    stores_get_default_application_json_object: Optional[StoresGetDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error"""  
    