<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ImportExportApiKeys - An Otoroshi Api Key. An Api Key is defined for a group of services to allow usage of the same Api Key for multiple services.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ImportExportApiKeys
{
    /**
     * The group/service ids (prefixed by group_ or service_ on which the key is authorized
     * 
     * @var array<string> $authorizedEntities
     */
	#[\JMS\Serializer\Annotation\SerializedName('authorizedEntities')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    public array $authorizedEntities;
    
    /**
     * The unique id of the Api Key. Usually 16 random alpha numerical characters, but can be anything
     * 
     * @var string $clientId
     */
	#[\JMS\Serializer\Annotation\SerializedName('clientId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $clientId;
    
    /**
     * The name of the api key, for humans ;-)
     * 
     * @var string $clientName
     */
	#[\JMS\Serializer\Annotation\SerializedName('clientName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $clientName;
    
    /**
     * The secret of the Api Key. Usually 64 random alpha numerical characters, but can be anything
     * 
     * @var string $clientSecret
     */
	#[\JMS\Serializer\Annotation\SerializedName('clientSecret')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $clientSecret;
    
    /**
     * Authorized number of calls per day
     * 
     * @var ?int $dailyQuota
     */
	#[\JMS\Serializer\Annotation\SerializedName('dailyQuota')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $dailyQuota = null;
    
    /**
     * Whether or not the key is enabled. If disabled, resources won't be available to calls using this key
     * 
     * @var bool $enabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('enabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $enabled;
    
    /**
     * Bunch of metadata for the key
     * 
     * @var ?array<string, string> $metadata
     */
	#[\JMS\Serializer\Annotation\SerializedName('metadata')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $metadata = null;
    
    /**
     * Authorized number of calls per month
     * 
     * @var ?int $monthlyQuota
     */
	#[\JMS\Serializer\Annotation\SerializedName('monthlyQuota')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $monthlyQuota = null;
    
    /**
     * Authorized number of calls per second, measured on 10 seconds
     * 
     * @var ?int $throttlingQuota
     */
	#[\JMS\Serializer\Annotation\SerializedName('throttlingQuota')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $throttlingQuota = null;
    
	public function __construct()
	{
		$this->authorizedEntities = [];
		$this->clientId = "";
		$this->clientName = "";
		$this->clientSecret = "";
		$this->dailyQuota = null;
		$this->enabled = false;
		$this->metadata = null;
		$this->monthlyQuota = null;
		$this->throttlingQuota = null;
	}
}
