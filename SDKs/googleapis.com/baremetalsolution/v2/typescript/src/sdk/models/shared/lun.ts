/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * The LUN multiprotocol type ensures the characteristics of the LUN are optimized for each operating system.
 */
export enum LunMultiprotocolTypeEnum {
  MultiprotocolTypeUnspecified = "MULTIPROTOCOL_TYPE_UNSPECIFIED",
  Linux = "LINUX",
}

/**
 * The state of this storage volume.
 */
export enum LunStateEnum {
  StateUnspecified = "STATE_UNSPECIFIED",
  Creating = "CREATING",
  Updating = "UPDATING",
  Ready = "READY",
  Deleting = "DELETING",
  CoolOff = "COOL_OFF",
}

/**
 * The storage type for this LUN.
 */
export enum LunStorageTypeEnum {
  StorageTypeUnspecified = "STORAGE_TYPE_UNSPECIFIED",
  Ssd = "SSD",
  Hdd = "HDD",
}

/**
 * A storage volume logical unit number (LUN).
 */
export class Lun extends SpeakeasyBase {
  /**
   * Display if this LUN is a boot LUN.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bootLun" })
  bootLun?: boolean;

  /**
   * Output only. Time after which LUN will be fully deleted. It is filled only for LUNs in COOL_OFF state.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expireTime" })
  expireTime?: string;

  /**
   * An identifier for the LUN, generated by the backend.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Output only. Instances this Lun is attached to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "instances" })
  instances?: string[];

  /**
   * The LUN multiprotocol type ensures the characteristics of the LUN are optimized for each operating system.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "multiprotocolType" })
  multiprotocolType?: LunMultiprotocolTypeEnum;

  /**
   * Output only. The name of the LUN.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Display if this LUN can be shared between multiple physical servers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shareable" })
  shareable?: boolean;

  /**
   * The size of this LUN, in gigabytes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sizeGb" })
  sizeGb?: string;

  /**
   * The state of this storage volume.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: LunStateEnum;

  /**
   * The storage type for this LUN.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "storageType" })
  storageType?: LunStorageTypeEnum;

  /**
   * Display the storage volume for this LUN.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "storageVolume" })
  storageVolume?: string;

  /**
   * The WWID for this LUN.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "wwid" })
  wwid?: string;
}

/**
 * A storage volume logical unit number (LUN).
 */
export class LunInput extends SpeakeasyBase {
  /**
   * Display if this LUN is a boot LUN.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bootLun" })
  bootLun?: boolean;

  /**
   * An identifier for the LUN, generated by the backend.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The LUN multiprotocol type ensures the characteristics of the LUN are optimized for each operating system.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "multiprotocolType" })
  multiprotocolType?: LunMultiprotocolTypeEnum;

  /**
   * Display if this LUN can be shared between multiple physical servers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shareable" })
  shareable?: boolean;

  /**
   * The size of this LUN, in gigabytes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sizeGb" })
  sizeGb?: string;

  /**
   * The state of this storage volume.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: LunStateEnum;

  /**
   * The storage type for this LUN.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "storageType" })
  storageType?: LunStorageTypeEnum;

  /**
   * Display the storage volume for this LUN.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "storageVolume" })
  storageVolume?: string;

  /**
   * The WWID for this LUN.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "wwid" })
  wwid?: string;
}
