"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class DataQueryJobQueryStatusEnum(str, Enum):
    r"""Status of the query job.
    
    * `submitted` - query submitted to query service for processing
    * `accepted` - query accepted by the query service
    * `in_progress` - query executed by the query service
    * `completed` - query execution completed by the query service
    * `failed` - query unable to be processed by the query service
    * `cancelled` - query cancelled by the user
    
    If the value of this field is `completed`, the `dataFile` field contains the location of the query results.
    
    If the value of this field is `accepted` or `in_progress`, you can use [Cancel a data query job](#operation/DELETE_DataQueryJob) to prevent Zuora from performing the query. Zuora then sets the status of the query job to `cancelled`.
    """
    SUBMITTED = 'submitted'
    ACCEPTED = 'accepted'
    IN_PROGRESS = 'in_progress'
    COMPLETED = 'completed'
    FAILED = 'failed'
    CANCELLED = 'cancelled'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DataQueryJob:
    r"""A data query job."""
    
    created_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdBy'), 'exclude': lambda f: f is None }})
    r"""The query job creator's Id."""  
    data_file: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataFile'), 'exclude': lambda f: f is None }})
    r"""The URL of the query results. Only applicable if the value of the `queryStatus` field is `completed`."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Internal identifier of the query job."""  
    output_rows: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outputRows'), 'exclude': lambda f: f is None }})
    r"""The number of rows the query results. Only applicable if the value of the `queryStatus` field is `completed`."""  
    processing_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processingTime'), 'exclude': lambda f: f is None }})
    r"""Processing time of the query job, in milliseconds. Only applicable if the value of the `queryStatus` field is `completed`."""  
    query: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query'), 'exclude': lambda f: f is None }})
    r"""The query that was submitted."""  
    query_status: Optional[DataQueryJobQueryStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queryStatus'), 'exclude': lambda f: f is None }})
    r"""Status of the query job.
    
    * `submitted` - query submitted to query service for processing
    * `accepted` - query accepted by the query service
    * `in_progress` - query executed by the query service
    * `completed` - query execution completed by the query service
    * `failed` - query unable to be processed by the query service
    * `cancelled` - query cancelled by the user
    
    If the value of this field is `completed`, the `dataFile` field contains the location of the query results.
    
    If the value of this field is `accepted` or `in_progress`, you can use [Cancel a data query job](#operation/DELETE_DataQueryJob) to prevent Zuora from performing the query. Zuora then sets the status of the query job to `cancelled`.
    """  
    remaining_retries: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remainingRetries'), 'exclude': lambda f: f is None }})
    r"""The number of times that Zuora will retry the query if Zuora is unable to perform the query."""  
    updated_on: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedOn'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date and time when the query job was last updated, in ISO 8601 format."""  
    