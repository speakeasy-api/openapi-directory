<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PortfoliosVideos 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add a video to a portfolio
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoToPortfolioRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoToPortfolioSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddVideoToPortfolioResponse
     */
	public function addVideoToPortfolio(
        \OpenAPI\OpenAPI\Models\Operations\AddVideoToPortfolioRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddVideoToPortfolioSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddVideoToPortfolioResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}', \OpenAPI\OpenAPI\Models\Operations\AddVideoToPortfolioRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddVideoToPortfolioResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a video to a portfolio
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoToPortfolioAlt1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoToPortfolioAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddVideoToPortfolioAlt1Response
     */
	public function addVideoToPortfolioAlt1(
        \OpenAPI\OpenAPI\Models\Operations\AddVideoToPortfolioAlt1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\AddVideoToPortfolioAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddVideoToPortfolioAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/portfolios/{portfolio_id}/videos/{video_id}', \OpenAPI\OpenAPI\Models\Operations\AddVideoToPortfolioAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddVideoToPortfolioAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a video from a portfolio
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromPortfolioRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromPortfolioSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromPortfolioResponse
     */
	public function deleteVideoFromPortfolio(
        \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromPortfolioRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromPortfolioSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromPortfolioResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromPortfolioRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromPortfolioResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a video from a portfolio
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromPortfolioAlt1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromPortfolioAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromPortfolioAlt1Response
     */
	public function deleteVideoFromPortfolioAlt1(
        \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromPortfolioAlt1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromPortfolioAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromPortfolioAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/portfolios/{portfolio_id}/videos/{video_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromPortfolioAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromPortfolioAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a specific video in a portfolio
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPortfolioVideoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPortfolioVideoResponse
     */
	public function getPortfolioVideo(
        \OpenAPI\OpenAPI\Models\Operations\GetPortfolioVideoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPortfolioVideoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}', \OpenAPI\OpenAPI\Models\Operations\GetPortfolioVideoRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPortfolioVideoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->video = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Video', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a specific video in a portfolio
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPortfolioVideoAlt1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPortfolioVideoAlt1Response
     */
	public function getPortfolioVideoAlt1(
        \OpenAPI\OpenAPI\Models\Operations\GetPortfolioVideoAlt1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPortfolioVideoAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/portfolios/{portfolio_id}/videos/{video_id}', \OpenAPI\OpenAPI\Models\Operations\GetPortfolioVideoAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPortfolioVideoAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->video = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Video', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the videos in a portfolio
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPortfolioVideosRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPortfolioVideosResponse
     */
	public function getPortfolioVideos(
        \OpenAPI\OpenAPI\Models\Operations\GetPortfolioVideosRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPortfolioVideosResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/portfolios/{portfolio_id}/videos', \OpenAPI\OpenAPI\Models\Operations\GetPortfolioVideosRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPortfolioVideosRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPortfolioVideosResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videos = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Video>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the videos in a portfolio
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPortfolioVideosAlt1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPortfolioVideosAlt1Response
     */
	public function getPortfolioVideosAlt1(
        \OpenAPI\OpenAPI\Models\Operations\GetPortfolioVideosAlt1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPortfolioVideosAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/portfolios/{portfolio_id}/videos', \OpenAPI\OpenAPI\Models\Operations\GetPortfolioVideosAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPortfolioVideosAlt1Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPortfolioVideosAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videos = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Video>', 'json');
            }
        }

        return $response;
    }
}