// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// LeagueLeadersBySeasonColumnEnum - Response member you would like results sorted by.
type LeagueLeadersBySeasonColumnEnum string

const (
	LeagueLeadersBySeasonColumnEnumFantasyPoints LeagueLeadersBySeasonColumnEnum = "FantasyPoints"
	LeagueLeadersBySeasonColumnEnumPassingYards  LeagueLeadersBySeasonColumnEnum = "PassingYards"
	LeagueLeadersBySeasonColumnEnumRushingYards  LeagueLeadersBySeasonColumnEnum = "RushingYards"
	LeagueLeadersBySeasonColumnEnumReceptions    LeagueLeadersBySeasonColumnEnum = "Receptions"
	LeagueLeadersBySeasonColumnEnumSacks         LeagueLeadersBySeasonColumnEnum = "Sacks"
	LeagueLeadersBySeasonColumnEnumInterceptions LeagueLeadersBySeasonColumnEnum = "Interceptions"
	LeagueLeadersBySeasonColumnEnumTouchdowns    LeagueLeadersBySeasonColumnEnum = "Touchdowns"
)

func (e *LeagueLeadersBySeasonColumnEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FantasyPoints":
		fallthrough
	case "PassingYards":
		fallthrough
	case "RushingYards":
		fallthrough
	case "Receptions":
		fallthrough
	case "Sacks":
		fallthrough
	case "Interceptions":
		fallthrough
	case "Touchdowns":
		*e = LeagueLeadersBySeasonColumnEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LeagueLeadersBySeasonColumnEnum: %s", s)
	}
}

// LeagueLeadersBySeasonFormatEnum - Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
type LeagueLeadersBySeasonFormatEnum string

const (
	LeagueLeadersBySeasonFormatEnumXML  LeagueLeadersBySeasonFormatEnum = "XML"
	LeagueLeadersBySeasonFormatEnumJSON LeagueLeadersBySeasonFormatEnum = "JSON"
)

func (e *LeagueLeadersBySeasonFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "XML":
		fallthrough
	case "JSON":
		*e = LeagueLeadersBySeasonFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LeagueLeadersBySeasonFormatEnum: %s", s)
	}
}

// LeagueLeadersBySeasonPositionEnum - Playerâ€™s position that you would like to filter by.
type LeagueLeadersBySeasonPositionEnum string

const (
	LeagueLeadersBySeasonPositionEnumAll     LeagueLeadersBySeasonPositionEnum = "ALL"
	LeagueLeadersBySeasonPositionEnumOffense LeagueLeadersBySeasonPositionEnum = "OFFENSE"
	LeagueLeadersBySeasonPositionEnumQb      LeagueLeadersBySeasonPositionEnum = "QB"
	LeagueLeadersBySeasonPositionEnumRb      LeagueLeadersBySeasonPositionEnum = "RB"
	LeagueLeadersBySeasonPositionEnumWr      LeagueLeadersBySeasonPositionEnum = "WR"
	LeagueLeadersBySeasonPositionEnumTe      LeagueLeadersBySeasonPositionEnum = "TE"
	LeagueLeadersBySeasonPositionEnumDefense LeagueLeadersBySeasonPositionEnum = "DEFENSE"
	LeagueLeadersBySeasonPositionEnumDl      LeagueLeadersBySeasonPositionEnum = "DL"
	LeagueLeadersBySeasonPositionEnumLb      LeagueLeadersBySeasonPositionEnum = "LB"
	LeagueLeadersBySeasonPositionEnumDb      LeagueLeadersBySeasonPositionEnum = "DB"
	LeagueLeadersBySeasonPositionEnumK       LeagueLeadersBySeasonPositionEnum = "K"
)

func (e *LeagueLeadersBySeasonPositionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ALL":
		fallthrough
	case "OFFENSE":
		fallthrough
	case "QB":
		fallthrough
	case "RB":
		fallthrough
	case "WR":
		fallthrough
	case "TE":
		fallthrough
	case "DEFENSE":
		fallthrough
	case "DL":
		fallthrough
	case "LB":
		fallthrough
	case "DB":
		fallthrough
	case "K":
		*e = LeagueLeadersBySeasonPositionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LeagueLeadersBySeasonPositionEnum: %s", s)
	}
}

type LeagueLeadersBySeasonRequest struct {
	// Response member you would like results sorted by.
	Column LeagueLeadersBySeasonColumnEnum `pathParam:"style=simple,explode=false,name=column"`
	// Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
	Format LeagueLeadersBySeasonFormatEnum `pathParam:"style=simple,explode=false,name=format"`
	// Playerâ€™s position that you would like to filter by.
	Position LeagueLeadersBySeasonPositionEnum `pathParam:"style=simple,explode=false,name=position"`
	//           Year of the season and the season type. If no season type is provided, then the default is regular season.
	//           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.
	//
	Season string `pathParam:"style=simple,explode=false,name=season"`
}

type LeagueLeadersBySeasonResponse struct {
	ContentType   string
	PlayerSeasons []shared.PlayerSeason
	StatusCode    int
	RawResponse   *http.Response
}
