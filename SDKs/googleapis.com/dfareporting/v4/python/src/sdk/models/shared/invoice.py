"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import campaignsummary as shared_campaignsummary
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class InvoiceInvoiceTypeEnum(str, Enum):
    r"""The type of invoice document."""
    INVOICE_TYPE_UNSPECIFIED = 'INVOICE_TYPE_UNSPECIFIED'
    INVOICE_TYPE_CREDIT = 'INVOICE_TYPE_CREDIT'
    INVOICE_TYPE_INVOICE = 'INVOICE_TYPE_INVOICE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Invoice:
    r"""Contains information about a single invoice"""
    
    campaign_summaries: Optional[list[shared_campaignsummary.CampaignSummary]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('campaign_summaries'), 'exclude': lambda f: f is None }})
    r"""The list of summarized campaign information associated with this invoice."""  
    corrected_invoice_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('correctedInvoiceId'), 'exclude': lambda f: f is None }})
    r"""The originally issued invoice that is being adjusted by this invoice, if applicable. May appear on invoice PDF as *Reference invoice number*."""  
    currency_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencyCode'), 'exclude': lambda f: f is None }})
    r"""Invoice currency code in ISO 4217 format."""  
    due_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dueDate'), 'exclude': lambda f: f is None }})
    r"""The invoice due date."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of this invoice."""  
    invoice_type: Optional[InvoiceInvoiceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invoiceType'), 'exclude': lambda f: f is None }})
    r"""The type of invoice document."""  
    issue_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issueDate'), 'exclude': lambda f: f is None }})
    r"""The date when the invoice was issued."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"dfareporting#invoice\\"."""  
    payments_account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentsAccountId'), 'exclude': lambda f: f is None }})
    r"""The ID of the payments account the invoice belongs to. Appears on the invoice PDF as *Billing Account Number*."""  
    payments_profile_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentsProfileId'), 'exclude': lambda f: f is None }})
    r"""The ID of the payments profile the invoice belongs to. Appears on the invoice PDF as *Billing ID*."""  
    pdf_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pdfUrl'), 'exclude': lambda f: f is None }})
    r"""The URL to download a PDF copy of the invoice. Note that this URL is user specific and requires a valid OAuth 2.0 access token to access. The access token must be provided in an *Authorization: Bearer* HTTP header. The URL will only be usable for 7 days from when the api is called."""  
    purchase_order_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purchaseOrderNumber'), 'exclude': lambda f: f is None }})
    r"""Purchase order number associated with the invoice."""  
    replaced_invoice_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('replacedInvoiceIds'), 'exclude': lambda f: f is None }})
    r"""The originally issued invoice(s) that is being cancelled by this invoice, if applicable. May appear on invoice PDF as *Replaced invoice numbers*. Note: There may be multiple replaced invoices due to consolidation of multiple invoices into a single invoice."""  
    service_end_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceEndDate'), 'exclude': lambda f: f is None }})
    r"""The invoice service end date."""  
    service_start_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceStartDate'), 'exclude': lambda f: f is None }})
    r"""The invoice service start date."""  
    subtotal_amount_micros: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subtotalAmountMicros'), 'exclude': lambda f: f is None }})
    r"""The pre-tax subtotal amount, in micros of the invoice's currency."""  
    total_amount_micros: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalAmountMicros'), 'exclude': lambda f: f is None }})
    r"""The invoice total amount, in micros of the invoice's currency."""  
    total_tax_amount_micros: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalTaxAmountMicros'), 'exclude': lambda f: f is None }})
    r"""The sum of all taxes in invoice, in micros of the invoice's currency."""  
    