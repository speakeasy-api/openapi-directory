/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { FraudDetectionConfiguration } from "./frauddetectionconfiguration";
import { FraudDetectionDecisionEnum } from "./frauddetectiondecisionenum";
import { FraudDetectionReasonEnum } from "./frauddetectionreasonenum";
import { FraudRiskDetails } from "./fraudriskdetails";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The fraud detection result produced by Voice ID, processed against the current session state and streamed audio of the speaker.
 */
export class FraudDetectionResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AudioAggregationEndedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  audioAggregationEndedAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "AudioAggregationStartedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  audioAggregationStartedAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Configuration" })
  @Type(() => FraudDetectionConfiguration)
  configuration?: FraudDetectionConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "Decision" })
  decision?: FraudDetectionDecisionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "FraudDetectionResultId" })
  fraudDetectionResultId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Reasons" })
  reasons?: FraudDetectionReasonEnum[];

  @SpeakeasyMetadata()
  @Expose({ name: "RiskDetails" })
  @Type(() => FraudRiskDetails)
  riskDetails?: FraudRiskDetails;
}
