/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * UpdateEmbeddedObjectPositionRequest - Update an embedded object's position (such as a moving or resizing a chart or image).
 */
public class UpdateEmbeddedObjectPositionRequest {
    /**
     * The fields of OverlayPosition that should be updated when setting a new position. Used only if newPosition.overlayPosition is set, in which case at least one field must be specified. The root `newPosition.overlayPosition` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fields")
    public String fields;

    public UpdateEmbeddedObjectPositionRequest withFields(String fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * The position of an embedded object such as a chart.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("newPosition")
    public EmbeddedObjectPosition newPosition;

    public UpdateEmbeddedObjectPositionRequest withNewPosition(EmbeddedObjectPosition newPosition) {
        this.newPosition = newPosition;
        return this;
    }
    
    /**
     * The ID of the object to moved.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("objectId")
    public Integer objectId;

    public UpdateEmbeddedObjectPositionRequest withObjectId(Integer objectId) {
        this.objectId = objectId;
        return this;
    }
    
    public UpdateEmbeddedObjectPositionRequest(){}
}
