// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// PostCertificatesCreateCertificateRequestTypeEnum - Choose between uploading a Certificate in PEM format or requesting a managed *Let's Encrypt* Certificate. If omitted defaults to `uploaded`.
type PostCertificatesCreateCertificateRequestTypeEnum string

const (
	PostCertificatesCreateCertificateRequestTypeEnumUploaded PostCertificatesCreateCertificateRequestTypeEnum = "uploaded"
	PostCertificatesCreateCertificateRequestTypeEnumManaged  PostCertificatesCreateCertificateRequestTypeEnum = "managed"
)

func (e *PostCertificatesCreateCertificateRequestTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "uploaded":
		fallthrough
	case "managed":
		*e = PostCertificatesCreateCertificateRequestTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostCertificatesCreateCertificateRequestTypeEnum: %s", s)
	}
}

type PostCertificatesCreateCertificateRequest struct {
	// Certificate and chain in PEM format, in order so that each record directly certifies the one preceding. Required for type `uploaded` Certificates.
	Certificate *string `json:"certificate,omitempty"`
	// Domains and subdomains that should be contained in the Certificate issued by *Let's Encrypt*. Required for type `managed` Certificates.
	DomainNames []string `json:"domain_names,omitempty"`
	// User-defined labels (key-value pairs)
	Labels map[string]interface{} `json:"labels,omitempty"`
	// Name of the Certificate
	Name string `json:"name"`
	// Certificate key in PEM format. Required for type `uploaded` Certificates.
	PrivateKey *string `json:"private_key,omitempty"`
	// Choose between uploading a Certificate in PEM format or requesting a managed *Let's Encrypt* Certificate. If omitted defaults to `uploaded`.
	Type *PostCertificatesCreateCertificateRequestTypeEnum `json:"type,omitempty"`
}

// PostCertificatesCreateCertificateResponseNullableActionError - Error message for the Action if error occurred, otherwise null
type PostCertificatesCreateCertificateResponseNullableActionError struct {
	// Fixed machine readable code
	Code string `json:"code"`
	// Humanized error message
	Message string `json:"message"`
}

type PostCertificatesCreateCertificateResponseNullableActionResources struct {
	// ID of the Resource
	ID int64 `json:"id"`
	// Type of resource referenced
	Type string `json:"type"`
}

// PostCertificatesCreateCertificateResponseNullableActionStatusEnum - Status of the Action
type PostCertificatesCreateCertificateResponseNullableActionStatusEnum string

const (
	PostCertificatesCreateCertificateResponseNullableActionStatusEnumSuccess PostCertificatesCreateCertificateResponseNullableActionStatusEnum = "success"
	PostCertificatesCreateCertificateResponseNullableActionStatusEnumRunning PostCertificatesCreateCertificateResponseNullableActionStatusEnum = "running"
	PostCertificatesCreateCertificateResponseNullableActionStatusEnumError   PostCertificatesCreateCertificateResponseNullableActionStatusEnum = "error"
)

func (e *PostCertificatesCreateCertificateResponseNullableActionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "running":
		fallthrough
	case "error":
		*e = PostCertificatesCreateCertificateResponseNullableActionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostCertificatesCreateCertificateResponseNullableActionStatusEnum: %s", s)
	}
}

type PostCertificatesCreateCertificateResponseNullableAction struct {
	// Command executed in the Action
	Command string `json:"command"`
	// Error message for the Action if error occurred, otherwise null
	Error PostCertificatesCreateCertificateResponseNullableActionError `json:"error"`
	// Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
	Finished string `json:"finished"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Progress of Action in percent
	Progress float64 `json:"progress"`
	// Resources the Action relates to
	Resources []PostCertificatesCreateCertificateResponseNullableActionResources `json:"resources"`
	// Point in time when the Action was started (in ISO-8601 format)
	Started string `json:"started"`
	// Status of the Action
	Status PostCertificatesCreateCertificateResponseNullableActionStatusEnum `json:"status"`
}

// PostCertificatesCreateCertificateResponseCertificateStatusError - If issuance or renewal reports `failed`, this property contains information about what happened
type PostCertificatesCreateCertificateResponseCertificateStatusError struct {
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// PostCertificatesCreateCertificateResponseCertificateStatusIssuanceEnum - Status of the issuance process of the Certificate
type PostCertificatesCreateCertificateResponseCertificateStatusIssuanceEnum string

const (
	PostCertificatesCreateCertificateResponseCertificateStatusIssuanceEnumPending   PostCertificatesCreateCertificateResponseCertificateStatusIssuanceEnum = "pending"
	PostCertificatesCreateCertificateResponseCertificateStatusIssuanceEnumCompleted PostCertificatesCreateCertificateResponseCertificateStatusIssuanceEnum = "completed"
	PostCertificatesCreateCertificateResponseCertificateStatusIssuanceEnumFailed    PostCertificatesCreateCertificateResponseCertificateStatusIssuanceEnum = "failed"
)

func (e *PostCertificatesCreateCertificateResponseCertificateStatusIssuanceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending":
		fallthrough
	case "completed":
		fallthrough
	case "failed":
		*e = PostCertificatesCreateCertificateResponseCertificateStatusIssuanceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostCertificatesCreateCertificateResponseCertificateStatusIssuanceEnum: %s", s)
	}
}

// PostCertificatesCreateCertificateResponseCertificateStatusRenewalEnum - Status of the renewal process of the Certificate.
type PostCertificatesCreateCertificateResponseCertificateStatusRenewalEnum string

const (
	PostCertificatesCreateCertificateResponseCertificateStatusRenewalEnumScheduled   PostCertificatesCreateCertificateResponseCertificateStatusRenewalEnum = "scheduled"
	PostCertificatesCreateCertificateResponseCertificateStatusRenewalEnumPending     PostCertificatesCreateCertificateResponseCertificateStatusRenewalEnum = "pending"
	PostCertificatesCreateCertificateResponseCertificateStatusRenewalEnumFailed      PostCertificatesCreateCertificateResponseCertificateStatusRenewalEnum = "failed"
	PostCertificatesCreateCertificateResponseCertificateStatusRenewalEnumUnavailable PostCertificatesCreateCertificateResponseCertificateStatusRenewalEnum = "unavailable"
)

func (e *PostCertificatesCreateCertificateResponseCertificateStatusRenewalEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "scheduled":
		fallthrough
	case "pending":
		fallthrough
	case "failed":
		fallthrough
	case "unavailable":
		*e = PostCertificatesCreateCertificateResponseCertificateStatusRenewalEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostCertificatesCreateCertificateResponseCertificateStatusRenewalEnum: %s", s)
	}
}

// PostCertificatesCreateCertificateResponseCertificateStatus - Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates
type PostCertificatesCreateCertificateResponseCertificateStatus struct {
	// If issuance or renewal reports `failed`, this property contains information about what happened
	Error *PostCertificatesCreateCertificateResponseCertificateStatusError `json:"error,omitempty"`
	// Status of the issuance process of the Certificate
	Issuance *PostCertificatesCreateCertificateResponseCertificateStatusIssuanceEnum `json:"issuance,omitempty"`
	// Status of the renewal process of the Certificate.
	Renewal *PostCertificatesCreateCertificateResponseCertificateStatusRenewalEnum `json:"renewal,omitempty"`
}

// PostCertificatesCreateCertificateResponseCertificateTypeEnum - Type of the Certificate
type PostCertificatesCreateCertificateResponseCertificateTypeEnum string

const (
	PostCertificatesCreateCertificateResponseCertificateTypeEnumUploaded PostCertificatesCreateCertificateResponseCertificateTypeEnum = "uploaded"
	PostCertificatesCreateCertificateResponseCertificateTypeEnumManaged  PostCertificatesCreateCertificateResponseCertificateTypeEnum = "managed"
)

func (e *PostCertificatesCreateCertificateResponseCertificateTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "uploaded":
		fallthrough
	case "managed":
		*e = PostCertificatesCreateCertificateResponseCertificateTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostCertificatesCreateCertificateResponseCertificateTypeEnum: %s", s)
	}
}

type PostCertificatesCreateCertificateResponseCertificateUsedBy struct {
	// ID of resource referenced
	ID int64 `json:"id"`
	// Type of resource referenced
	Type string `json:"type"`
}

type PostCertificatesCreateCertificateResponseCertificate struct {
	// Certificate and chain in PEM format, in order so that each record directly certifies the one preceding
	Certificate string `json:"certificate"`
	// Point in time when the Resource was created (in ISO-8601 format)
	Created string `json:"created"`
	// Domains and subdomains covered by the Certificate
	DomainNames []string `json:"domain_names"`
	// SHA256 fingerprint of the Certificate
	Fingerprint string `json:"fingerprint"`
	// ID of the Resource
	ID int64 `json:"id"`
	// User-defined labels (key-value pairs)
	Labels map[string]string `json:"labels"`
	// Name of the Resource. Must be unique per Project.
	Name string `json:"name"`
	// Point in time when the Certificate stops being valid (in ISO-8601 format)
	NotValidAfter string `json:"not_valid_after"`
	// Point in time when the Certificate becomes valid (in ISO-8601 format)
	NotValidBefore string `json:"not_valid_before"`
	// Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates
	Status *PostCertificatesCreateCertificateResponseCertificateStatus `json:"status,omitempty"`
	// Type of the Certificate
	Type *PostCertificatesCreateCertificateResponseCertificateTypeEnum `json:"type,omitempty"`
	// Resources currently using the Certificate
	UsedBy []PostCertificatesCreateCertificateResponseCertificateUsedBy `json:"used_by"`
}

// PostCertificatesCreateCertificateResponse - The `certificate` key contains the Certificate that was just created. For type `managed` Certificates the `action` key contains the Action that allows for tracking the issuance process. For type `uploaded` Certificates the `action` is always null.
type PostCertificatesCreateCertificateResponse struct {
	Action      *PostCertificatesCreateCertificateResponseNullableAction `json:"action,omitempty"`
	Certificate PostCertificatesCreateCertificateResponseCertificate     `json:"certificate"`
}

type PostCertificatesResponse struct {
	ContentType string
	// The `certificate` key contains the Certificate that was just created. For type `managed` Certificates the `action` key contains the Action that allows for tracking the issuance process. For type `uploaded` Certificates the `action` is always null.
	CreateCertificateResponse *PostCertificatesCreateCertificateResponse
	StatusCode                int
	RawResponse               *http.Response
}
