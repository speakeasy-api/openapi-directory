"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateNetworkSwitchStackRoutingInterfaceDhcpResponse = exports.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest = exports.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBody = exports.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyReservedIpRanges = exports.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyFixedIpAssignments = exports.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDnsNameserversOptionEnum = exports.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptions = exports.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum = exports.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpModeEnum = exports.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * The DHCP lease time config for the dhcp server running on switch stack interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
 */
var UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum;
(function (UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum) {
    UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum["OneDay"] = "1 day";
    UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum["OneHour"] = "1 hour";
    UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum["OneWeek"] = "1 week";
    UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum["TwelveHours"] = "12 hours";
    UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum["ThirtyMinutes"] = "30 minutes";
    UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum["FourHours"] = "4 hours";
})(UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum = exports.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum || (exports.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum = {}));
/**
 * The DHCP mode options for the switch stack interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
 */
var UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpModeEnum;
(function (UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpModeEnum) {
    UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpModeEnum["DhcpDisabled"] = "dhcpDisabled";
    UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpModeEnum["DhcpRelay"] = "dhcpRelay";
    UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpModeEnum["DhcpServer"] = "dhcpServer";
})(UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpModeEnum = exports.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpModeEnum || (exports.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpModeEnum = {}));
/**
 * The type of the DHCP option which should be one of ('text', 'ip', 'integer' or 'hex')
 */
var UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum;
(function (UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum) {
    UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum["Hex"] = "hex";
    UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum["Integer"] = "integer";
    UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum["Ip"] = "ip";
    UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum["Text"] = "text";
})(UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum = exports.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum || (exports.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum = {}));
var UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptions = /** @class */ (function (_super) {
    __extends(UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptions, _super);
    function UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "code" }),
        __metadata("design:type", String)
    ], UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptions.prototype, "code", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptions.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "value" }),
        __metadata("design:type", String)
    ], UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptions.prototype, "value", void 0);
    return UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptions;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptions = UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptions;
/**
 * The DHCP name server option for the dhcp server running on the switch stack interface ('googlePublicDns', 'openDns' or 'custom')
 */
var UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDnsNameserversOptionEnum;
(function (UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDnsNameserversOptionEnum) {
    UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDnsNameserversOptionEnum["Custom"] = "custom";
    UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDnsNameserversOptionEnum["GooglePublicDns"] = "googlePublicDns";
    UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDnsNameserversOptionEnum["OpenDns"] = "openDns";
})(UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDnsNameserversOptionEnum = exports.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDnsNameserversOptionEnum || (exports.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDnsNameserversOptionEnum = {}));
var UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyFixedIpAssignments = /** @class */ (function (_super) {
    __extends(UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyFixedIpAssignments, _super);
    function UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyFixedIpAssignments() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ip" }),
        __metadata("design:type", String)
    ], UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyFixedIpAssignments.prototype, "ip", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mac" }),
        __metadata("design:type", String)
    ], UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyFixedIpAssignments.prototype, "mac", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyFixedIpAssignments.prototype, "name", void 0);
    return UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyFixedIpAssignments;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyFixedIpAssignments = UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyFixedIpAssignments;
var UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyReservedIpRanges = /** @class */ (function (_super) {
    __extends(UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyReservedIpRanges, _super);
    function UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyReservedIpRanges() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "comment" }),
        __metadata("design:type", String)
    ], UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyReservedIpRanges.prototype, "comment", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "end" }),
        __metadata("design:type", String)
    ], UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyReservedIpRanges.prototype, "end", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "start" }),
        __metadata("design:type", String)
    ], UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyReservedIpRanges.prototype, "start", void 0);
    return UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyReservedIpRanges;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyReservedIpRanges = UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyReservedIpRanges;
var UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBody = /** @class */ (function (_super) {
    __extends(UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBody, _super);
    function UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBody() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "bootFileName" }),
        __metadata("design:type", String)
    ], UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBody.prototype, "bootFileName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "bootNextServer" }),
        __metadata("design:type", String)
    ], UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBody.prototype, "bootNextServer", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "bootOptionsEnabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBody.prototype, "bootOptionsEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dhcpLeaseTime" }),
        __metadata("design:type", String)
    ], UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBody.prototype, "dhcpLeaseTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dhcpMode" }),
        __metadata("design:type", String)
    ], UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBody.prototype, "dhcpMode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptions,
        }),
        (0, class_transformer_1.Expose)({ name: "dhcpOptions" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptions; }),
        __metadata("design:type", Array)
    ], UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBody.prototype, "dhcpOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dhcpRelayServerIps" }),
        __metadata("design:type", Array)
    ], UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBody.prototype, "dhcpRelayServerIps", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dnsCustomNameservers" }),
        __metadata("design:type", Array)
    ], UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBody.prototype, "dnsCustomNameservers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dnsNameserversOption" }),
        __metadata("design:type", String)
    ], UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBody.prototype, "dnsNameserversOption", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyFixedIpAssignments,
        }),
        (0, class_transformer_1.Expose)({ name: "fixedIpAssignments" }),
        (0, class_transformer_1.Type)(function () {
            return UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyFixedIpAssignments;
        }),
        __metadata("design:type", Array)
    ], UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBody.prototype, "fixedIpAssignments", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyReservedIpRanges,
        }),
        (0, class_transformer_1.Expose)({ name: "reservedIpRanges" }),
        (0, class_transformer_1.Type)(function () {
            return UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyReservedIpRanges;
        }),
        __metadata("design:type", Array)
    ], UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBody.prototype, "reservedIpRanges", void 0);
    return UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBody;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBody = UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBody;
var UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest = /** @class */ (function (_super) {
    __extends(UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest, _super);
    function UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "request, media_type=application/json" }),
        __metadata("design:type", UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBody)
    ], UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest.prototype, "requestBody", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=interfaceId",
        }),
        __metadata("design:type", String)
    ], UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest.prototype, "interfaceId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=networkId",
        }),
        __metadata("design:type", String)
    ], UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest.prototype, "networkId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=switchStackId",
        }),
        __metadata("design:type", String)
    ], UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest.prototype, "switchStackId", void 0);
    return UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest = UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest;
var UpdateNetworkSwitchStackRoutingInterfaceDhcpResponse = /** @class */ (function (_super) {
    __extends(UpdateNetworkSwitchStackRoutingInterfaceDhcpResponse, _super);
    function UpdateNetworkSwitchStackRoutingInterfaceDhcpResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], UpdateNetworkSwitchStackRoutingInterfaceDhcpResponse.prototype, "contentType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], UpdateNetworkSwitchStackRoutingInterfaceDhcpResponse.prototype, "statusCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], UpdateNetworkSwitchStackRoutingInterfaceDhcpResponse.prototype, "rawResponse", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], UpdateNetworkSwitchStackRoutingInterfaceDhcpResponse.prototype, "updateNetworkSwitchStackRoutingInterfaceDhcp200ApplicationJSONObject", void 0);
    return UpdateNetworkSwitchStackRoutingInterfaceDhcpResponse;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSwitchStackRoutingInterfaceDhcpResponse = UpdateNetworkSwitchStackRoutingInterfaceDhcpResponse;
