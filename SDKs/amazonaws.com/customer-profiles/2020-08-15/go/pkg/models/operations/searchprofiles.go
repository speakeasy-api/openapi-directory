// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// SearchProfilesRequestBodyLogicalOperatorEnum - <p>Relationship between all specified search keys that will be used to search for profiles. This includes the required <code>KeyName</code> and <code>Values</code> parameters as well as any key-value(s) pairs specified in the <code>AdditionalSearchKeys</code> list.</p> <p>This parameter influences which profiles will be returned in the response in the following manner:</p> <ul> <li> <p> <code>AND</code> - The response only includes profiles that match all of the search keys.</p> </li> <li> <p> <code>OR</code> - The response includes profiles that match at least one of the search keys.</p> </li> </ul> <p>The <code>OR</code> relationship is the default behavior if this parameter is not included in the request.</p>
type SearchProfilesRequestBodyLogicalOperatorEnum string

const (
	SearchProfilesRequestBodyLogicalOperatorEnumAnd SearchProfilesRequestBodyLogicalOperatorEnum = "AND"
	SearchProfilesRequestBodyLogicalOperatorEnumOr  SearchProfilesRequestBodyLogicalOperatorEnum = "OR"
)

func (e SearchProfilesRequestBodyLogicalOperatorEnum) ToPointer() *SearchProfilesRequestBodyLogicalOperatorEnum {
	return &e
}

func (e *SearchProfilesRequestBodyLogicalOperatorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AND":
		fallthrough
	case "OR":
		*e = SearchProfilesRequestBodyLogicalOperatorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchProfilesRequestBodyLogicalOperatorEnum: %v", v)
	}
}

type SearchProfilesRequestBody struct {
	// A list of <code>AdditionalSearchKey</code> objects that are each searchable identifiers of a profile. Each <code>AdditionalSearchKey</code> object contains a <code>KeyName</code> and a list of <code>Values</code> associated with that specific key (i.e., a key-value(s) pair). These additional search keys will be used in conjunction with the <code>LogicalOperator</code> and the required <code>KeyName</code> and <code>Values</code> parameters to search for profiles that satisfy the search criteria.
	AdditionalSearchKeys []shared.AdditionalSearchKey `json:"AdditionalSearchKeys,omitempty"`
	// A searchable identifier of a customer profile. The predefined keys you can use to search include: _account, _profileId, _assetId, _caseId, _orderId, _fullName, _phone, _email, _ctrContactId, _marketoLeadId, _salesforceAccountId, _salesforceContactId, _salesforceAssetId, _zendeskUserId, _zendeskExternalId, _zendeskTicketId, _serviceNowSystemId, _serviceNowIncidentId, _segmentUserId, _shopifyCustomerId, _shopifyOrderId.
	KeyName string `json:"KeyName"`
	// <p>Relationship between all specified search keys that will be used to search for profiles. This includes the required <code>KeyName</code> and <code>Values</code> parameters as well as any key-value(s) pairs specified in the <code>AdditionalSearchKeys</code> list.</p> <p>This parameter influences which profiles will be returned in the response in the following manner:</p> <ul> <li> <p> <code>AND</code> - The response only includes profiles that match all of the search keys.</p> </li> <li> <p> <code>OR</code> - The response includes profiles that match at least one of the search keys.</p> </li> </ul> <p>The <code>OR</code> relationship is the default behavior if this parameter is not included in the request.</p>
	LogicalOperator *SearchProfilesRequestBodyLogicalOperatorEnum `json:"LogicalOperator,omitempty"`
	// A list of key values.
	Values []string `json:"Values"`
}

type SearchProfilesRequest struct {
	// The unique name of the domain.
	DomainName        string                    `pathParam:"style=simple,explode=false,name=DomainName"`
	RequestBody       SearchProfilesRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// <p>The maximum number of objects returned per page.</p> <p>The default is 20 if this parameter is not included in the request.</p>
	MaxResults *int64 `queryParam:"style=form,explode=true,name=max-results"`
	// The pagination token from the previous SearchProfiles API call.
	NextToken *string `queryParam:"style=form,explode=true,name=next-token"`
}

type SearchProfilesResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// BadRequestException
	BadRequestException interface{}
	ContentType         string
	// InternalServerException
	InternalServerException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// Success
	SearchProfilesResponse *shared.SearchProfilesResponse
	StatusCode             int
	RawResponse            *http.Response
	// ThrottlingException
	ThrottlingException interface{}
}
