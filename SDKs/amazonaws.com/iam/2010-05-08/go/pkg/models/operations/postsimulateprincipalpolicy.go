// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTSimulatePrincipalPolicyActionEnum
type POSTSimulatePrincipalPolicyActionEnum string

const (
	POSTSimulatePrincipalPolicyActionEnumSimulatePrincipalPolicy POSTSimulatePrincipalPolicyActionEnum = "SimulatePrincipalPolicy"
)

func (e *POSTSimulatePrincipalPolicyActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SimulatePrincipalPolicy":
		*e = POSTSimulatePrincipalPolicyActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTSimulatePrincipalPolicyActionEnum: %s", s)
	}
}

// POSTSimulatePrincipalPolicyVersionEnum
type POSTSimulatePrincipalPolicyVersionEnum string

const (
	POSTSimulatePrincipalPolicyVersionEnumTwoThousandAndTen0508 POSTSimulatePrincipalPolicyVersionEnum = "2010-05-08"
)

func (e *POSTSimulatePrincipalPolicyVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2010-05-08":
		*e = POSTSimulatePrincipalPolicyVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTSimulatePrincipalPolicyVersionEnum: %s", s)
	}
}

type POSTSimulatePrincipalPolicyQueryParams struct {
	Action POSTSimulatePrincipalPolicyActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Pagination token
	Marker *string `queryParam:"style=form,explode=true,name=Marker"`
	// Pagination limit
	MaxItems *string                                `queryParam:"style=form,explode=true,name=MaxItems"`
	Version  POSTSimulatePrincipalPolicyVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTSimulatePrincipalPolicyHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTSimulatePrincipalPolicyRequest struct {
	QueryParams POSTSimulatePrincipalPolicyQueryParams
	Headers     POSTSimulatePrincipalPolicyHeaders
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTSimulatePrincipalPolicyResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
