"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .account import Account
from .avatars import Avatars
from .database import Database
from .functions import Functions
from .health import Health
from .locale import Locale
from .storage import Storage
from .teams import Teams
from .users import Users

SERVERS = [
    "https://appwrite.io/v1",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
    https://appwrite.io/docs - Full API docs, specs and tutorials
    """
    account: Account
    r"""The Account service allows you to authenticate and manage a user account."""
    avatars: Avatars
    r"""The Avatars service aims to help you complete everyday tasks related to your app image, icons, and avatars."""
    database: Database
    r"""The Database service allows you to create structured collections of documents, query and filter lists of documents"""
    functions: Functions
    r"""The Functions Service allows you view, create and manage your Cloud Functions."""
    health: Health
    r"""The Health service allows you to both validate and monitor your Appwrite server's health."""
    locale: Locale
    r"""The Locale service allows you to customize your app based on your users' location."""
    storage: Storage
    r"""The Storage service allows you to manage your project files."""
    teams: Teams
    r"""The Teams service allows you to group users of your project and to enable them to share read and write access to your project resources"""
    users: Users
    r"""The Users service allows you to manage your project users."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.account = Account(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.avatars = Avatars(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.database = Database(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.functions = Functions(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.health = Health(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.locale = Locale(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.storage = Storage(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.teams = Teams(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.users = Users(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    