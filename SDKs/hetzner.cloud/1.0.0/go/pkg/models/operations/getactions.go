// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetActionsSortParameterSortEnum - Can be used multiple times.
type GetActionsSortParameterSortEnum string

const (
	GetActionsSortParameterSortEnumID           GetActionsSortParameterSortEnum = "id"
	GetActionsSortParameterSortEnumIDAsc        GetActionsSortParameterSortEnum = "id:asc"
	GetActionsSortParameterSortEnumIDDesc       GetActionsSortParameterSortEnum = "id:desc"
	GetActionsSortParameterSortEnumCommand      GetActionsSortParameterSortEnum = "command"
	GetActionsSortParameterSortEnumCommandAsc   GetActionsSortParameterSortEnum = "command:asc"
	GetActionsSortParameterSortEnumCommandDesc  GetActionsSortParameterSortEnum = "command:desc"
	GetActionsSortParameterSortEnumStatus       GetActionsSortParameterSortEnum = "status"
	GetActionsSortParameterSortEnumStatusAsc    GetActionsSortParameterSortEnum = "status:asc"
	GetActionsSortParameterSortEnumStatusDesc   GetActionsSortParameterSortEnum = "status:desc"
	GetActionsSortParameterSortEnumProgress     GetActionsSortParameterSortEnum = "progress"
	GetActionsSortParameterSortEnumProgressAsc  GetActionsSortParameterSortEnum = "progress:asc"
	GetActionsSortParameterSortEnumProgressDesc GetActionsSortParameterSortEnum = "progress:desc"
	GetActionsSortParameterSortEnumStarted      GetActionsSortParameterSortEnum = "started"
	GetActionsSortParameterSortEnumStartedAsc   GetActionsSortParameterSortEnum = "started:asc"
	GetActionsSortParameterSortEnumStartedDesc  GetActionsSortParameterSortEnum = "started:desc"
	GetActionsSortParameterSortEnumFinished     GetActionsSortParameterSortEnum = "finished"
	GetActionsSortParameterSortEnumFinishedAsc  GetActionsSortParameterSortEnum = "finished:asc"
	GetActionsSortParameterSortEnumFinishedDesc GetActionsSortParameterSortEnum = "finished:desc"
)

func (e *GetActionsSortParameterSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "id":
		fallthrough
	case "id:asc":
		fallthrough
	case "id:desc":
		fallthrough
	case "command":
		fallthrough
	case "command:asc":
		fallthrough
	case "command:desc":
		fallthrough
	case "status":
		fallthrough
	case "status:asc":
		fallthrough
	case "status:desc":
		fallthrough
	case "progress":
		fallthrough
	case "progress:asc":
		fallthrough
	case "progress:desc":
		fallthrough
	case "started":
		fallthrough
	case "started:asc":
		fallthrough
	case "started:desc":
		fallthrough
	case "finished":
		fallthrough
	case "finished:asc":
		fallthrough
	case "finished:desc":
		*e = GetActionsSortParameterSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetActionsSortParameterSortEnum: %s", s)
	}
}

// GetActionsStatusParameterStatusEnum - Can be used multiple times, the response will contain only Actions with specified statuses
type GetActionsStatusParameterStatusEnum string

const (
	GetActionsStatusParameterStatusEnumRunning GetActionsStatusParameterStatusEnum = "running"
	GetActionsStatusParameterStatusEnumSuccess GetActionsStatusParameterStatusEnum = "success"
	GetActionsStatusParameterStatusEnumError   GetActionsStatusParameterStatusEnum = "error"
)

func (e *GetActionsStatusParameterStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "running":
		fallthrough
	case "success":
		fallthrough
	case "error":
		*e = GetActionsStatusParameterStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetActionsStatusParameterStatusEnum: %s", s)
	}
}

type GetActionsQueryParams struct {
	// Can be used multiple times, the response will contain only Actions with specified IDs
	ID *int64 `queryParam:"style=form,explode=true,name=id"`
	// Can be used multiple times.
	Sort *GetActionsSortParameterSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// Can be used multiple times, the response will contain only Actions with specified statuses
	Status *GetActionsStatusParameterStatusEnum `queryParam:"style=form,explode=true,name=status"`
}

type GetActionsRequest struct {
	QueryParams GetActionsQueryParams
}

// GetActionsActionsResponseActionError - Error message for the Action if error occurred, otherwise null
type GetActionsActionsResponseActionError struct {
	// Fixed machine readable code
	Code string `json:"code"`
	// Humanized error message
	Message string `json:"message"`
}

type GetActionsActionsResponseActionResources struct {
	// ID of the Resource
	ID int64 `json:"id"`
	// Type of resource referenced
	Type string `json:"type"`
}

// GetActionsActionsResponseActionStatusEnum - Status of the Action
type GetActionsActionsResponseActionStatusEnum string

const (
	GetActionsActionsResponseActionStatusEnumSuccess GetActionsActionsResponseActionStatusEnum = "success"
	GetActionsActionsResponseActionStatusEnumRunning GetActionsActionsResponseActionStatusEnum = "running"
	GetActionsActionsResponseActionStatusEnumError   GetActionsActionsResponseActionStatusEnum = "error"
)

func (e *GetActionsActionsResponseActionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "running":
		fallthrough
	case "error":
		*e = GetActionsActionsResponseActionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetActionsActionsResponseActionStatusEnum: %s", s)
	}
}

type GetActionsActionsResponseAction struct {
	// Command executed in the Action
	Command string `json:"command"`
	// Error message for the Action if error occurred, otherwise null
	Error GetActionsActionsResponseActionError `json:"error"`
	// Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
	Finished string `json:"finished"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Progress of Action in percent
	Progress float64 `json:"progress"`
	// Resources the Action relates to
	Resources []GetActionsActionsResponseActionResources `json:"resources"`
	// Point in time when the Action was started (in ISO-8601 format)
	Started string `json:"started"`
	// Status of the Action
	Status GetActionsActionsResponseActionStatusEnum `json:"status"`
}

type GetActionsActionsResponseMetaPagination struct {
	// ID of the last page available. Can be null if the current page is the last one.
	LastPage float64 `json:"last_page"`
	// ID of the next page. Can be null if the current page is the last one.
	NextPage float64 `json:"next_page"`
	// Current page number
	Page float64 `json:"page"`
	// Maximum number of items shown per page in the response
	PerPage float64 `json:"per_page"`
	// ID of the previous page. Can be null if the current page is the first one.
	PreviousPage float64 `json:"previous_page"`
	// The total number of entries that exist in the database for this query. Nullable if unknown.
	TotalEntries float64 `json:"total_entries"`
}

type GetActionsActionsResponseMeta struct {
	Pagination GetActionsActionsResponseMetaPagination `json:"pagination"`
}

// GetActionsActionsResponse - The `actions` key contains a list of Actions
type GetActionsActionsResponse struct {
	Actions []GetActionsActionsResponseAction `json:"actions"`
	Meta    *GetActionsActionsResponseMeta    `json:"meta,omitempty"`
}

type GetActionsResponse struct {
	// The `actions` key contains a list of Actions
	ActionsResponse *GetActionsActionsResponse
	ContentType     string
	StatusCode      int
	RawResponse     *http.Response
}
