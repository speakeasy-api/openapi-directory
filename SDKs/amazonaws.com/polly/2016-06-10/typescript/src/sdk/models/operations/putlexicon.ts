/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class PutLexiconRequestBody extends SpeakeasyBase {
  /**
   * Content of the PLS lexicon as string data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Content" })
  content: string;
}

export class PutLexiconRequest extends SpeakeasyBase {
  /**
   * Name of the lexicon. The name must follow the regular express format [0-9A-Za-z]{1,20}. That is, the name is a case-sensitive alphanumeric string up to 20 characters long.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=LexiconName",
  })
  lexiconName: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: PutLexiconRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class PutLexiconResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InvalidLexiconException
   */
  @SpeakeasyMetadata()
  invalidLexiconException?: any;

  /**
   * LexiconSizeExceededException
   */
  @SpeakeasyMetadata()
  lexiconSizeExceededException?: any;

  /**
   * MaxLexemeLengthExceededException
   */
  @SpeakeasyMetadata()
  maxLexemeLengthExceededException?: any;

  /**
   * MaxLexiconsNumberExceededException
   */
  @SpeakeasyMetadata()
  maxLexiconsNumberExceededException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  putLexiconOutput?: Record<string, any>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ServiceFailureException
   */
  @SpeakeasyMetadata()
  serviceFailureException?: any;

  /**
   * UnsupportedPlsAlphabetException
   */
  @SpeakeasyMetadata()
  unsupportedPlsAlphabetException?: any;

  /**
   * UnsupportedPlsLanguageException
   */
  @SpeakeasyMetadata()
  unsupportedPlsLanguageException?: any;
}
