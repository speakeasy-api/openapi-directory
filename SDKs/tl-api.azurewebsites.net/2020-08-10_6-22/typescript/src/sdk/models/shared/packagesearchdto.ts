/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * The PackageSearchDTO Class.
 *
 * @remarks
 * Contains relevant fields of PackageSearch DTO by masking actual Package entity's fields in application.
 *
 */
export class PackageSearchDTO extends SpeakeasyBase {
  /**
   * Active Status
   */
  @SpeakeasyMetadata()
  @Expose({ name: "activeStatus" })
  activeStatus?: boolean;

  /**
   * sum of addon fees.
   *
   * @remarks
   * incoming values for this filed will ignore.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "addonFee" })
  addonFee?: number;

  /**
   * Boolean value to indicate wheather package is available in all the gyms.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "applyForAllGyms" })
  applyForAllGyms?: boolean;

  /**
   * Range of period a member is bound to the contract if he/she choose this package.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bindingPeriod" })
  bindingPeriod?: number;

  /**
   * Package created DateTime.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdDate?: Date;

  /**
   * Package created user.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdUser" })
  createdUser?: string;

  /**
   * Common descriptions about package.If there are more instructions can be stored as comma separated values.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * What are the facilities, features available for package.ex:- wifi, ACm etc.Can be stored as comma seperated values.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "features" })
  features?: string;

  /**
   * No of months gym member can come without payments.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "freeMonths" })
  freeMonths?: number;

  /**
   * Boolean value to indicate member can remove already added addons if he choose this package.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "memberCanRemoveAddOns" })
  memberCanRemoveAddOns?: boolean;

  /**
   * Package last modified DateTime.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modifiedDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  modifiedDate?: Date;

  /**
   * Package last modified user.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modifiedUser" })
  modifiedUser?: string;

  /**
   * Monthly installment fee if package is not fixed visit.
   *
   * @remarks
   * addition of the servicefee and addon fees divided by binding period.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "monthlyFee" })
  monthlyFee?: number;

  /**
   * No of visits for fixed package
   */
  @SpeakeasyMetadata()
  @Expose({ name: "numberOfVisits" })
  numberOfVisits?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "packageId" })
  packageId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "packageName" })
  packageName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "packageNumber" })
  packageNumber?: number;

  /**
   * Package type can be either fixed visit or unlimited.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "packageType" })
  packageType?: string;

  /**
   * Registartion fee for the package at a gym.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "registrationFee" })
  registrationFee?: number;

  /**
   * total Service charge of the package for entire period.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serviceFee" })
  serviceFee?: number;

  /**
   * Comma separated string values in case of need of maintain some labels kind of stuff relevant to the package.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: string;

  /**
   * total number of recode for particular search
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalCount" })
  totalCount?: number;

  /**
   * total price for the package including Addon fees, service fee and registration fee.
   *
   * @remarks
   * incoming values for this field will ignore.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalPrice" })
  totalPrice?: number;
}
