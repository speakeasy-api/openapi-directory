<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class CustomData 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Remove single custom field value
     * 
     * Your account may create `apps`, which contain custom fields, through the [Update orderForm configuration](https://developers.vtex.com/reference#updateorderformconfiguration) request. The value of a specific custom field can be removed by this request.
     * 
     * 
     * To do that, you need to inform in the URL the ID of the app you created with the configuration API (`appId`).
     * 
     * 
     * You also need to iform the specific field created in this app (identified by the `appFieldName` parameter, also passed through the URL) whose value you want to remove.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemovesinglecustomfieldvalueRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RemovesinglecustomfieldvalueResponse
     */
	public function removesinglecustomfieldvalue(
        \OpenAPI\OpenAPI\Models\Operations\RemovesinglecustomfieldvalueRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RemovesinglecustomfieldvalueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/checkout/pub/orderForm/{orderFormId}/customData/{appId}/{appFieldName}', \OpenAPI\OpenAPI\Models\Operations\RemovesinglecustomfieldvalueRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemovesinglecustomfieldvalueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Set multiple custom field values
     * 
     * Your account may create `apps`, which contain custom fields, through the [Update orderForm configuration](https://developers.vtex.com/reference/configuration#updateorderformconfiguration) request. The values of these custom fields can then be updated by this request.
     * 
     * 
     * To do that, you need to inform the ID of the app you created with the configuration API (`appId`).
     * 
     * 
     * In the body of the request, for each field created in this app (`appFieldName`) you will inform a value (`appFieldValue`).
     * 
     * The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetMultipleCustomFieldValuesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SetMultipleCustomFieldValuesResponse
     */
	public function setMultipleCustomFieldValues(
        \OpenAPI\OpenAPI\Models\Operations\SetMultipleCustomFieldValuesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SetMultipleCustomFieldValuesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/checkout/pub/orderForm/{orderFormId}/customData/{appId}', \OpenAPI\OpenAPI\Models\Operations\SetMultipleCustomFieldValuesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetMultipleCustomFieldValuesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->setMultipleCustomFieldValues200ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set single custom field value
     * 
     * Your account may create `apps`, which contain custom fields, through the [Update orderForm configuration](https://developers.vtex.com/reference#updateorderformconfiguration) request. The value of a specific custom field can then be updated by this request.
     * 
     * 
     * To do that, you need to inform in the URL the ID of the app you created with the configuration API (`appId`).
     * 
     * 
     * In the body of the request, you will inform the new value (`appFieldValue`, passed through the body) of the specific field created in this app (identified by the `appFieldName` parameter, passed through the URL).
     * 
     * The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetSingleCustomFieldValueRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SetSingleCustomFieldValueResponse
     */
	public function setSingleCustomFieldValue(
        \OpenAPI\OpenAPI\Models\Operations\SetSingleCustomFieldValueRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SetSingleCustomFieldValueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/checkout/pub/orderForm/{orderFormId}/customData/{appId}/{appFieldName}', \OpenAPI\OpenAPI\Models\Operations\SetSingleCustomFieldValueRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setsinglecustomfieldvalueRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetSingleCustomFieldValueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}