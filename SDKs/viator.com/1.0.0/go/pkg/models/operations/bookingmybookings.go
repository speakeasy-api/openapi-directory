// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type BookingMybookingsQueryParams struct {
	// **email address** of the booker for the booking
	Email *string `queryParam:"style=form,explode=true,name=email"`
	// The booking reference number of the item
	// - **Note**: For more information, see [Booking references](#section/Key-concepts/Booking-references)
	//
	ItineraryOrItemID *string `queryParam:"style=form,explode=true,name=itineraryOrItemId"`
	// **voucher key** for the booking
	VoucherKey *string `queryParam:"style=form,explode=true,name=voucherKey"`
}

type BookingMybookingsHeaders struct {
	// Specifies the language into which the natural-language fields in the response from this service will be translated (see [Accept-Language header](#section/Appendices/Accept-Language-header) for available langage codes)
	//
	AcceptLanguage string `header:"style=simple,explode=false,name=Accept-Language"`
}

type BookingMybookingsRequest struct {
	QueryParams BookingMybookingsQueryParams
	Headers     BookingMybookingsHeaders
}

type BookingMybookings200ApplicationJSONDataItemSummariesMerchantTermsAndConditionsCancellationFromTourDate struct {
	// **number** of days prior to the tour start date that *this* policy window begins. `null` signifies open-endedness
	DayRangeMax *int64 `json:"dayRangeMax,omitempty"`
	// **number** of days prior to the tour start date that *this* policy window ends
	DayRangeMin *int64 `json:"dayRangeMin,omitempty"`
	// **percentage** of total price refundable if cancelled within *this* time window
	PercentageRefundable *int64 `json:"percentageRefundable,omitempty"`
	// **Unix timestamp** giving the exact time the policy ends
	PolicyEndTimestamp *int64 `json:"policyEndTimestamp,omitempty"`
	// **Unix timestamp** giving the exact time the policy commences
	PolicyStartTimestamp *int64 `json:"policyStartTimestamp,omitempty"`
}

type BookingMybookings200ApplicationJSONDataItemSummariesMerchantTermsAndConditions struct {
	// **currency-formatted** amount that will be refunded if the cancellation is processed now.
	AmountRefundable *string `json:"amountRefundable,omitempty"`
	// **array** of cancellation policy objects
	CancellationFromTourDate []BookingMybookings200ApplicationJSONDataItemSummariesMerchantTermsAndConditionsCancellationFromTourDate `json:"cancellationFromTourDate,omitempty"`
	// **natural-language description** of the terms and conditions for *this* product
	TermsAndConditions *string `json:"termsAndConditions,omitempty"`
}

type BookingMybookings200ApplicationJSONDataItemSummariesTravellerAgeBands struct {
	// **unique numeric identifier** for the age band
	// - See: [Working with age bands](#section/Appendices/Working-with-age-bands)
	//
	AgeBandID *int64 `json:"ageBandId,omitempty"`
	// **number** of travelers in *this* age band
	Count *int64 `json:"count,omitempty"`
	// **natural-language description** (singular) of *this* age band
	Description *string `json:"description,omitempty"`
	// **natural-language description** (plural) of *this* age band
	PluralDescription *string `json:"pluralDescription,omitempty"`
	// **sort order** for *this* age band
	SortOrder *int64 `json:"sortOrder,omitempty"`
}

type BookingMybookings200ApplicationJSONDataItemSummaries struct {
	// Indicates whether a voucher is required for each passenger; or, whether the requirement is one voucher per group booking.
	BarcodeOption *string `json:"barcodeOption,omitempty"`
	// **alphanumeric code** specifying the type of barcode
	BarcodeType *string `json:"barcodeType,omitempty"`
	// [booking type indicator](#section/Key-concepts/Booking-concepts) that indicates whether the booking will be `CONFIRMED` immediately or if it will remain `PENDING` even after the booking has been made
	//
	// *one of* the following:
	// - `"UF"` (FreesaleBE and UnconditionalBE) – this booking will be confirmed immediately
	// - `"OR"` (DeferredCRMBE) – the booked product is an on-request product, will not be confirmed immediately and will have a `PENDING` status after it is booked, to be confirmed by the supplier within the time specified in the `hoursConfirmed` field available in the booking response and post-booking services
	// - `"FO"` (FreesaleOnRequestBE) – the booked product is freesale up until a certain number of days before the travel date, referred to as the *on-request period*.
	//
	BookingEngineID *shared.BookingEngineIDResponseEnum `json:"bookingEngineId,omitempty"`
	// **object** containing item booking status information
	BookingStatus *shared.BookingStatusItem `json:"bookingStatus,omitempty"`
	// **currency code** for the currency in which pricing is displayed
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// **natural-language description** of *this* item's departure location
	DepartsFrom *string `json:"departsFrom,omitempty"`
	// **natural-language description** of the product's departure point
	DeparturePoint *string `json:"departurePoint,omitempty"`
	// **natural-language address** of the departure point for the product
	DeparturePointAddress *string `json:"departurePointAddress,omitempty"`
	// **natural-language description** of how to access the departure point for the product
	DeparturePointDirections *string `json:"departurePointDirections,omitempty"`
	// **unique numeric identifier** of the destination in which the product operates
	DestID *int64 `json:"destId,omitempty"`
	// **alphanumeric reference code** of the distributor item
	DistributorItemRef *string `json:"distributorItemRef,omitempty"`
	// The `hoursConfirmed` field also indicates if the product is freesale or on request. The `hoursConfirmed` value is the approximate window for confirmation in hours, which can be presented to the customer. A value of `0` means that the product is **freesale**, and a value greater than `0` means that the product is **on-request**.
	//
	HoursConfirmed *int64 `json:"hoursConfirmed,omitempty"`
	// Booking-reference number generated by Viator
	// - **Note**: For more information, see: [Booking references](#section/Key-concepts/Booking-references)
	//
	ItemID *string `json:"itemId,omitempty"`
	// ignore (Viator only)
	ItineraryID *int64 `json:"itineraryId,omitempty"`
	// **language code** for the language that the product operates in
	LanguageServicesLanguageCode *string `json:"languageServicesLanguageCode,omitempty"`
	// **currency-formatted merchant net rate** of *this* item
	LastRetailPrice *float64 `json:"lastRetailPrice,omitempty"`
	// **currency-formatted retail price** of *this* item
	LastRetailPriceFormatted *string `json:"lastRetailPriceFormatted,omitempty"`
	// **first name** of the lead traveler
	LeadTravellerFirstname *string `json:"leadTravellerFirstname,omitempty"`
	// **surname** of the lead traveler
	LeadTravellerSurname *string `json:"leadTravellerSurname,omitempty"`
	// **title** of the lead traveler's name
	LeadTravellerTitle *string `json:"leadTravellerTitle,omitempty"`
	// ignore (Viator only)
	//
	// For cancellation information regarding the booking, please refer to the `merchantTermsAndConditions` object
	//
	MerchantCancellable *bool `json:"merchantCancellable,omitempty"`
	// **currency-formatted merchant net rate** of *this* item
	// - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
	//
	MerchantNetPrice *float64 `json:"merchantNetPrice,omitempty"`
	// **currency-formatted merchant net rate** of *this* item
	// - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
	//
	MerchantNetPriceFormatted  *string                                                                         `json:"merchantNetPriceFormatted,omitempty"`
	MerchantTermsAndConditions *BookingMybookings200ApplicationJSONDataItemSummariesMerchantTermsAndConditions `json:"merchantTermsAndConditions,omitempty"`
	// ignore (Viator only)
	ObfsID *string `json:"obfsId,omitempty"`
	// ignore (Viator only)
	Passbooks *string `json:"passbooks,omitempty"`
	// **numeric merchant total price** of the product that was booked
	// - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
	//
	Price *float64 `json:"price,omitempty"`
	// **currency-formatted merchant total price** for *this* booking
	// - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
	//
	PriceFormatted *string  `json:"priceFormatted,omitempty"`
	PriceUSD       *float64 `json:"priceUSD,omitempty"`
	// **unique alphanumeric identifier** of the product that was booked
	ProductCode       *string `json:"productCode,omitempty"`
	ProductPulledDown *bool   `json:"productPulledDown,omitempty"`
	// **natural-language description** of the product that was booked
	ProductTitle *string `json:"productTitle,omitempty"`
	// ignore (Viator only)
	ProductWidgetList *string `json:"productWidgetList,omitempty"`
	// ignore (Viator only)
	RulesApplied *string `json:"rulesApplied,omitempty"`
	// Ignore (Viator only)
	//
	SavingAmount *string `json:"savingAmount,omitempty"`
	// Ignore (Viator only)
	//
	SavingAmountFormated *string `json:"savingAmountFormated,omitempty"`
	// **sort order** of *this* item summary
	SortOrder *int64 `json:"sortOrder,omitempty"`
	// ignore (Viator only)
	TermsAndConditions *string `json:"termsAndConditions,omitempty"`
	// **alphanumeric identifier** of the tour grade of the product that was booked
	TourGradeCode *string `json:"tourGradeCode,omitempty"`
	// **natural-language description** of *this* tour grade
	TourGradeDescription *string `json:"tourGradeDescription,omitempty"`
	// **date** of travel for the product that was booked
	TravelDate *string `json:"travelDate,omitempty"`
	// **array** of age band objects
	TravellerAgeBands []BookingMybookings200ApplicationJSONDataItemSummariesTravellerAgeBands `json:"travellerAgeBands,omitempty"`
	// Unique reference for the voucher for this booking that can be used as a request parameter to search for existing bookings using the [/booking/mybookings](#operation/bookingMybookings) and [/booking/pastbooking](#operation/bookingPastbooking) endpoints
	VoucherKey *string `json:"voucherKey,omitempty"`
	// **specifier** of the rules pertaining to the use of the voucher
	VoucherOption *string `json:"voucherOption,omitempty"`
	// **natural-language description** of the requirements for using the voucher
	VoucherRequirements *string `json:"voucherRequirements,omitempty"`
	// **URL of the voucher** for *this* product (if available). The customer can access this URL to retrieve their voucher.
	VoucherURL *string `json:"voucherURL,omitempty"`
	// ignore (Viator only)
	Vouchers *string `json:"vouchers,omitempty"`
}

type BookingMybookings200ApplicationJSONData struct {
	// **email address** of the entity that booked the tour
	BookerEmail *string `json:"bookerEmail,omitempty"`
	// **date** on which the booking was made
	BookingDate *string `json:"bookingDate,omitempty"`
	// **object** containing itinerary booking status information
	BookingStatus *shared.BookingStatusItinerary `json:"bookingStatus,omitempty"`
	// **currency code** for the currency in which pricing is displayed
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// **reference code** for the distributor
	DistributorRef *string `json:"distributorRef,omitempty"`
	// **exchange rate** applied to the pricing
	ExchangeRate *int64 `json:"exchangeRate,omitempty"`
	// **indicator**: `true` if a voucher exists
	HasVoucher *bool `json:"hasVoucher,omitempty"`
	// **array** of item summary objects
	ItemSummaries []BookingMybookings200ApplicationJSONDataItemSummaries `json:"itemSummaries,omitempty"`
	// ignore (Viator only)
	ItineraryID *int64 `json:"itineraryId,omitempty"`
	// ignore (Viator only)
	RulesApplied *string `json:"rulesApplied,omitempty"`
	// **sort order** for the booking object
	SortOrder *int64 `json:"sortOrder,omitempty"`
	// **numeric merchant total price** for *this* booking
	// For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
	//
	TotalPrice *float64 `json:"totalPrice,omitempty"`
	// **currency-formatted merchant total price** of *this* booking
	// - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
	//
	TotalPriceFormatted *string `json:"totalPriceFormatted,omitempty"`
	// **numeric merchant total price** of this booking in USD
	TotalPriceUSD *float64 `json:"totalPriceUSD,omitempty"`
	// ignore (Viator only)
	UserID *string `json:"userId,omitempty"`
	// Unique reference for the voucher for this booking that can be used as a request parameter to search for existing bookings using the [/booking/mybookings](#operation/bookingMybookings) and [/booking/pastbooking](#operation/bookingPastbooking) endpoints
	VoucherKey *string `json:"voucherKey,omitempty"`
	// **URL of the voucher** for *this* product (if available). The customer can access this URL to retrieve their voucher.
	VoucherURL *string `json:"voucherURL,omitempty"`
}

// BookingMybookings200ApplicationJSON - Success
type BookingMybookings200ApplicationJSON struct {
	Data *BookingMybookings200ApplicationJSONData `json:"data,omitempty"`
	// **timestamp** of *this* response
	DateStamp *string `json:"dateStamp,omitempty"`
	// **array** of error codes pertaining to *this* error
	// - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes
	//
	ErrorCodes []string `json:"errorCodes,omitempty"`
	// **array** of error message strings
	ErrorMessage []interface{} `json:"errorMessage,omitempty"`
	// **array** of error message strings in plain text
	ErrorMessageText *string `json:"errorMessageText,omitempty"`
	// **name** of *this* type of error
	ErrorName *string `json:"errorName,omitempty"`
	// **reference number** of *this* error
	ErrorReference *string `json:"errorReference,omitempty"`
	// **code** specifying the type of error
	ErrorType *string `json:"errorType,omitempty"`
	// ignore (Viator only)
	ExtraInfo map[string]interface{} `json:"extraInfo,omitempty"`
	// ignore (Viator only)
	ExtraObject map[string]interface{} `json:"extraObject,omitempty"`
	// **boolean indicator** of *this* request's outcome
	// - `true`: the request was successful with no errors
	// - `false`: an error was encountered
	//
	Success *bool `json:"success,omitempty"`
	// **number** of results available for *this* service
	//
	TotalCount *int64 `json:"totalCount,omitempty"`
	// **unique numeric id** of the server that processed *this* request
	Vmid *string `json:"vmid,omitempty"`
}

type BookingMybookingsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	BookingMybookings200ApplicationJSONObject *BookingMybookings200ApplicationJSON
}
