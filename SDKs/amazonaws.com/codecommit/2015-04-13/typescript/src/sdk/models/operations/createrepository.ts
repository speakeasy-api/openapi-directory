/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum CreateRepositoryXAmzTargetEnum {
  CodeCommit20150413CreateRepository = "CodeCommit_20150413.CreateRepository",
}

export class CreateRepositoryRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  createRepositoryInput: shared.CreateRepositoryInput;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Target",
  })
  xAmzTarget: CreateRepositoryXAmzTargetEnum;
}

export class CreateRepositoryResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createRepositoryOutput?: shared.CreateRepositoryOutput;

  /**
   * EncryptionIntegrityChecksFailedException
   */
  @SpeakeasyMetadata()
  encryptionIntegrityChecksFailedException?: any;

  /**
   * EncryptionKeyAccessDeniedException
   */
  @SpeakeasyMetadata()
  encryptionKeyAccessDeniedException?: any;

  /**
   * EncryptionKeyDisabledException
   */
  @SpeakeasyMetadata()
  encryptionKeyDisabledException?: any;

  /**
   * EncryptionKeyNotFoundException
   */
  @SpeakeasyMetadata()
  encryptionKeyNotFoundException?: any;

  /**
   * EncryptionKeyUnavailableException
   */
  @SpeakeasyMetadata()
  encryptionKeyUnavailableException?: any;

  /**
   * InvalidRepositoryDescriptionException
   */
  @SpeakeasyMetadata()
  invalidRepositoryDescriptionException?: any;

  /**
   * InvalidRepositoryNameException
   */
  @SpeakeasyMetadata()
  invalidRepositoryNameException?: any;

  /**
   * InvalidSystemTagUsageException
   */
  @SpeakeasyMetadata()
  invalidSystemTagUsageException?: any;

  /**
   * InvalidTagsMapException
   */
  @SpeakeasyMetadata()
  invalidTagsMapException?: any;

  /**
   * RepositoryLimitExceededException
   */
  @SpeakeasyMetadata()
  repositoryLimitExceededException?: any;

  /**
   * RepositoryNameExistsException
   */
  @SpeakeasyMetadata()
  repositoryNameExistsException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * RepositoryNameRequiredException
   */
  @SpeakeasyMetadata()
  repositoryNameRequiredException?: any;

  /**
   * TagPolicyException
   */
  @SpeakeasyMetadata()
  tagPolicyException?: any;

  /**
   * TooManyTagsException
   */
  @SpeakeasyMetadata()
  tooManyTagsException?: any;
}
