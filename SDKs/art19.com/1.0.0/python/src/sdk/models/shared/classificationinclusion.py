"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import resourceidentifier as shared_resourceidentifier
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class ClassificationInclusionAttributesClassificationTypeEnum(str, Enum):
    r"""This will be replaced by the relationship `classification` in a future update.<br/>"""
    ALTERNATE_FEED_TYPE = 'AlternateFeedType'
    GENRE = 'Genre'
    INDUSTRY = 'Industry'
    LANGUAGE = 'Language'
    MEDIA_RATING = 'MediaRating'

class ClassificationInclusionAttributesClassifiedTypeEnum(str, Enum):
    r"""This will be replaced by the relationship `classified` in a future update.<br/>"""
    SERIES = 'Series'
    SEASON = 'Season'
    EPISODE = 'Episode'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClassificationInclusionAttributes:
    
    classification_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classification_id'), 'exclude': lambda f: f is None }})
    r"""This will be replaced by the relationship `classification` in a future update.<br/>
    The ID of the classification linked to the entity
    """  
    classification_type: Optional[ClassificationInclusionAttributesClassificationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classification_type'), 'exclude': lambda f: f is None }})
    r"""This will be replaced by the relationship `classification` in a future update.<br/>"""  
    classified_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classified_id'), 'exclude': lambda f: f is None }})
    r"""This will be replaced by the relationship `classified` in a future update.<br/>
    The ID of the entity linked to the classification
    """  
    classified_type: Optional[ClassificationInclusionAttributesClassifiedTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classified_type'), 'exclude': lambda f: f is None }})
    r"""This will be replaced by the relationship `classified` in a future update.<br/>"""  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    position: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('position'), 'exclude': lambda f: f is None }})
    r"""The position or order of the linked classification within the classified resource"""  
    primary: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary'), 'exclude': lambda f: f is None }})
    r"""When `true` it describes the best classification of a specific type for a given
    classified item
    """  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClassificationInclusionRelationshipsClassification:
    
    data: Optional[shared_resourceidentifier.ResourceIdentifier] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClassificationInclusionRelationships:
    
    classification: Optional[ClassificationInclusionRelationshipsClassification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classification'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClassificationInclusion:
    r"""Connects a Classification with a classified item like a Series, Season or Episode."""
    
    attributes: Optional[ClassificationInclusionAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    relationships: Optional[ClassificationInclusionRelationships] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of resource. This is always `classification_inclusion`"""  
    