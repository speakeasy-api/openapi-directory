/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GETEventTriggersQueryParams {
    /**
     * The status of the event trigger.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=active")
    public String active;
    public GETEventTriggersQueryParams withActive(String active) {
        this.active = active;
        return this;
    }
    
    /**
     * The Zuora object that trigger condition is defined upon. Should be specified in the pattern: ^[A-Z][\\w\\-]*$
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=baseObject")
    public String baseObject;
    public GETEventTriggersQueryParams withBaseObject(String baseObject) {
        this.baseObject = baseObject;
        return this;
    }
    
    /**
     * The event type name. Should be specified in the pattern: ^[A-Za-z]{1,}[\w\-]*$
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=eventTypeName")
    public String eventTypeName;
    public GETEventTriggersQueryParams withEventTypeName(String eventTypeName) {
        this.eventTypeName = eventTypeName;
        return this;
    }
    
    /**
     * The maximum number of data records to be returned. Default to 10 if absent.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    public Long limit;
    public GETEventTriggersQueryParams withLimit(Long limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * The first index of the query result. Default to 0 if absent, and the minimum is 0.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=start")
    public Long start;
    public GETEventTriggersQueryParams withStart(Long start) {
        this.start = start;
        return this;
    }
    
}
