"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ViewsFromUnitBeachViewExceptionEnum(str, Enum):
    r"""Beach view exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class ViewsFromUnitCityViewExceptionEnum(str, Enum):
    r"""City view exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class ViewsFromUnitGardenViewExceptionEnum(str, Enum):
    r"""Garden view exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class ViewsFromUnitLakeViewExceptionEnum(str, Enum):
    r"""Lake view exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class ViewsFromUnitLandmarkViewExceptionEnum(str, Enum):
    r"""Landmark view exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class ViewsFromUnitOceanViewExceptionEnum(str, Enum):
    r"""Ocean view exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class ViewsFromUnitPoolViewExceptionEnum(str, Enum):
    r"""Pool view exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class ViewsFromUnitValleyViewExceptionEnum(str, Enum):
    r"""Valley view exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ViewsFromUnit:
    r"""Views available from the guest unit itself."""
    
    beach_view: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beachView'), 'exclude': lambda f: f is None }})
    r"""Beach view. A guestroom that features a window through which guests can see the beach."""  
    beach_view_exception: Optional[ViewsFromUnitBeachViewExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beachViewException'), 'exclude': lambda f: f is None }})
    r"""Beach view exception."""  
    city_view: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cityView'), 'exclude': lambda f: f is None }})
    r"""City view. A guestroom that features a window through which guests can see the buildings, parks and/or streets of the city."""  
    city_view_exception: Optional[ViewsFromUnitCityViewExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cityViewException'), 'exclude': lambda f: f is None }})
    r"""City view exception."""  
    garden_view: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gardenView'), 'exclude': lambda f: f is None }})
    r"""Garden view. A guestroom that features a window through which guests can see a garden."""  
    garden_view_exception: Optional[ViewsFromUnitGardenViewExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gardenViewException'), 'exclude': lambda f: f is None }})
    r"""Garden view exception."""  
    lake_view: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lakeView'), 'exclude': lambda f: f is None }})
    r"""Lake view."""  
    lake_view_exception: Optional[ViewsFromUnitLakeViewExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lakeViewException'), 'exclude': lambda f: f is None }})
    r"""Lake view exception."""  
    landmark_view: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('landmarkView'), 'exclude': lambda f: f is None }})
    r"""Landmark view. A guestroom that features a window through which guests can see a landmark such as the countryside, a golf course, the forest, a park, a rain forst, a mountain or a slope."""  
    landmark_view_exception: Optional[ViewsFromUnitLandmarkViewExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('landmarkViewException'), 'exclude': lambda f: f is None }})
    r"""Landmark view exception."""  
    ocean_view: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oceanView'), 'exclude': lambda f: f is None }})
    r"""Ocean view. A guestroom that features a window through which guests can see the ocean."""  
    ocean_view_exception: Optional[ViewsFromUnitOceanViewExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oceanViewException'), 'exclude': lambda f: f is None }})
    r"""Ocean view exception."""  
    pool_view: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('poolView'), 'exclude': lambda f: f is None }})
    r"""Pool view. A guestroom that features a window through which guests can see the hotel's swimming pool."""  
    pool_view_exception: Optional[ViewsFromUnitPoolViewExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('poolViewException'), 'exclude': lambda f: f is None }})
    r"""Pool view exception."""  
    valley_view: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valleyView'), 'exclude': lambda f: f is None }})
    r"""Valley view. A guestroom that features a window through which guests can see over a valley."""  
    valley_view_exception: Optional[ViewsFromUnitValleyViewExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valleyViewException'), 'exclude': lambda f: f is None }})
    r"""Valley view exception."""  
    