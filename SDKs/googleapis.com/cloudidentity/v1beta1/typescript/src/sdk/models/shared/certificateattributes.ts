/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CertificateTemplate } from "./certificatetemplate";
import { Expose, Type } from "class-transformer";

/**
 * Validation state of this certificate.
 */
export enum CertificateAttributesValidationStateEnum {
  CertificateValidationStateUnspecified = "CERTIFICATE_VALIDATION_STATE_UNSPECIFIED",
  ValidationSuccessful = "VALIDATION_SUCCESSFUL",
  ValidationFailed = "VALIDATION_FAILED",
}

/**
 * Stores information about a certificate.
 */
export class CertificateAttributes extends SpeakeasyBase {
  /**
   * CertificateTemplate (v3 Extension in X.509).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "certificateTemplate" })
  @Type(() => CertificateTemplate)
  certificateTemplate?: CertificateTemplate;

  /**
   * The encoded certificate fingerprint.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fingerprint" })
  fingerprint?: string;

  /**
   * The name of the issuer of this certificate.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "issuer" })
  issuer?: string;

  /**
   * Serial number of the certificate, Example: "123456789".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serialNumber" })
  serialNumber?: string;

  /**
   * The subject name of this certificate.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subject" })
  subject?: string;

  /**
   * The certificate thumbprint.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "thumbprint" })
  thumbprint?: string;

  /**
   * Validation state of this certificate.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "validationState" })
  validationState?: CertificateAttributesValidationStateEnum;

  /**
   * Certificate not valid at or after this timestamp.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "validityExpirationTime" })
  validityExpirationTime?: string;

  /**
   * Certificate not valid before this timestamp.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "validityStartTime" })
  validityStartTime?: string;
}
