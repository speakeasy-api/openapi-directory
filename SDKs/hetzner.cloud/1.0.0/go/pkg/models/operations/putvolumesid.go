// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PutVolumesIDPathParams struct {
	// ID of the Volume to update
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

// PutVolumesIDUpdateVolumeRequestLabels - User-defined labels (key-value pairs)
type PutVolumesIDUpdateVolumeRequestLabels struct {
	Labelkey *string `json:"labelkey,omitempty"`
}

type PutVolumesIDUpdateVolumeRequest struct {
	// User-defined labels (key-value pairs)
	Labels *PutVolumesIDUpdateVolumeRequestLabels `json:"labels,omitempty"`
	// New Volume name
	Name string `json:"name"`
}

type PutVolumesIDRequest struct {
	PathParams PutVolumesIDPathParams
	Request    *PutVolumesIDUpdateVolumeRequest `request:"mediaType=application/json"`
}

// PutVolumesID200ApplicationJSONVolumeLocation - Location of the Volume. Volume can only be attached to Servers in the same Location.
type PutVolumesID200ApplicationJSONVolumeLocation struct {
	// City the Location is closest to
	City string `json:"city"`
	// ISO 3166-1 alpha-2 code of the country the Location resides in
	Country string `json:"country"`
	// Description of the Location
	Description string `json:"description"`
	// ID of the Location
	ID float64 `json:"id"`
	// Latitude of the city closest to the Location
	Latitude float64 `json:"latitude"`
	// Longitude of the city closest to the Location
	Longitude float64 `json:"longitude"`
	// Unique identifier of the Location
	Name string `json:"name"`
	// Name of network zone this Location resides in
	NetworkZone string `json:"network_zone"`
}

// PutVolumesID200ApplicationJSONVolumeProtection - Protection configuration for the Resource
type PutVolumesID200ApplicationJSONVolumeProtection struct {
	// If true, prevents the Resource from being deleted
	Delete bool `json:"delete"`
}

// PutVolumesID200ApplicationJSONVolumeStatusEnum - Current status of the Volume
type PutVolumesID200ApplicationJSONVolumeStatusEnum string

const (
	PutVolumesID200ApplicationJSONVolumeStatusEnumCreating  PutVolumesID200ApplicationJSONVolumeStatusEnum = "creating"
	PutVolumesID200ApplicationJSONVolumeStatusEnumAvailable PutVolumesID200ApplicationJSONVolumeStatusEnum = "available"
)

func (e *PutVolumesID200ApplicationJSONVolumeStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "creating":
		fallthrough
	case "available":
		*e = PutVolumesID200ApplicationJSONVolumeStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutVolumesID200ApplicationJSONVolumeStatusEnum: %s", s)
	}
}

type PutVolumesID200ApplicationJSONVolume struct {
	// Point in time when the Resource was created (in ISO-8601 format)
	Created string `json:"created"`
	// Filesystem of the Volume if formatted on creation, null if not formatted on creation
	Format string `json:"format"`
	// ID of the Resource
	ID int64 `json:"id"`
	// User-defined labels (key-value pairs)
	Labels map[string]string `json:"labels"`
	// Device path on the file system for the Volume
	LinuxDevice string `json:"linux_device"`
	// Location of the Volume. Volume can only be attached to Servers in the same Location.
	Location PutVolumesID200ApplicationJSONVolumeLocation `json:"location"`
	// Name of the Resource. Must be unique per Project.
	Name string `json:"name"`
	// Protection configuration for the Resource
	Protection PutVolumesID200ApplicationJSONVolumeProtection `json:"protection"`
	// ID of the Server the Volume is attached to, null if it is not attached at all
	Server int64 `json:"server"`
	// Size in GB of the Volume
	Size float64 `json:"size"`
	// Current status of the Volume
	Status PutVolumesID200ApplicationJSONVolumeStatusEnum `json:"status"`
}

// PutVolumesID200ApplicationJSON - The `volume` key contains the updated volume
type PutVolumesID200ApplicationJSON struct {
	Volume PutVolumesID200ApplicationJSONVolume `json:"volume"`
}

type PutVolumesIDResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The `volume` key contains the updated volume
	PutVolumesID200ApplicationJSONObject *PutVolumesID200ApplicationJSON
}
