// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETModifyInstanceMetadataOptionsActionEnum
type GETModifyInstanceMetadataOptionsActionEnum string

const (
	GETModifyInstanceMetadataOptionsActionEnumModifyInstanceMetadataOptions GETModifyInstanceMetadataOptionsActionEnum = "ModifyInstanceMetadataOptions"
)

func (e *GETModifyInstanceMetadataOptionsActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ModifyInstanceMetadataOptions":
		*e = GETModifyInstanceMetadataOptionsActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyInstanceMetadataOptionsActionEnum: %s", s)
	}
}

// GETModifyInstanceMetadataOptionsHTTPEndpointEnum - <p>Enables or disables the HTTP metadata endpoint on your instances. If this parameter is not specified, the existing state is maintained.</p> <p>If you specify a value of <code>disabled</code>, you cannot access your instance metadata.</p>
type GETModifyInstanceMetadataOptionsHTTPEndpointEnum string

const (
	GETModifyInstanceMetadataOptionsHTTPEndpointEnumDisabled GETModifyInstanceMetadataOptionsHTTPEndpointEnum = "disabled"
	GETModifyInstanceMetadataOptionsHTTPEndpointEnumEnabled  GETModifyInstanceMetadataOptionsHTTPEndpointEnum = "enabled"
)

func (e *GETModifyInstanceMetadataOptionsHTTPEndpointEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "disabled":
		fallthrough
	case "enabled":
		*e = GETModifyInstanceMetadataOptionsHTTPEndpointEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyInstanceMetadataOptionsHTTPEndpointEnum: %s", s)
	}
}

// GETModifyInstanceMetadataOptionsHTTPProtocolIpv6Enum - Enables or disables the IPv6 endpoint for the instance metadata service. This setting applies only if you have enabled the HTTP metadata endpoint.
type GETModifyInstanceMetadataOptionsHTTPProtocolIpv6Enum string

const (
	GETModifyInstanceMetadataOptionsHTTPProtocolIpv6EnumDisabled GETModifyInstanceMetadataOptionsHTTPProtocolIpv6Enum = "disabled"
	GETModifyInstanceMetadataOptionsHTTPProtocolIpv6EnumEnabled  GETModifyInstanceMetadataOptionsHTTPProtocolIpv6Enum = "enabled"
)

func (e *GETModifyInstanceMetadataOptionsHTTPProtocolIpv6Enum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "disabled":
		fallthrough
	case "enabled":
		*e = GETModifyInstanceMetadataOptionsHTTPProtocolIpv6Enum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyInstanceMetadataOptionsHTTPProtocolIpv6Enum: %s", s)
	}
}

// GETModifyInstanceMetadataOptionsHTTPTokensEnum - <p>IMDSv2 uses token-backed sessions. Set the use of HTTP tokens to <code>optional</code> (in other words, set the use of IMDSv2 to <code>optional</code>) or <code>required</code> (in other words, set the use of IMDSv2 to <code>required</code>).</p> <ul> <li> <p> <code>optional</code> - When IMDSv2 is optional, you can choose to retrieve instance metadata with or without a session token in your request. If you retrieve the IAM role credentials without a token, the IMDSv1 role credentials are returned. If you retrieve the IAM role credentials using a valid session token, the IMDSv2 role credentials are returned.</p> </li> <li> <p> <code>required</code> - When IMDSv2 is required, you must send a session token with any instance metadata retrieval requests. In this state, retrieving the IAM role credentials always returns IMDSv2 credentials; IMDSv1 credentials are not available.</p> </li> </ul> <p>Default: <code>optional</code> </p>
type GETModifyInstanceMetadataOptionsHTTPTokensEnum string

const (
	GETModifyInstanceMetadataOptionsHTTPTokensEnumOptional GETModifyInstanceMetadataOptionsHTTPTokensEnum = "optional"
	GETModifyInstanceMetadataOptionsHTTPTokensEnumRequired GETModifyInstanceMetadataOptionsHTTPTokensEnum = "required"
)

func (e *GETModifyInstanceMetadataOptionsHTTPTokensEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "optional":
		fallthrough
	case "required":
		*e = GETModifyInstanceMetadataOptionsHTTPTokensEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyInstanceMetadataOptionsHTTPTokensEnum: %s", s)
	}
}

// GETModifyInstanceMetadataOptionsInstanceMetadataTagsEnum - <p>Set to <code>enabled</code> to allow access to instance tags from the instance metadata. Set to <code>disabled</code> to turn off access to instance tags from the instance metadata. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS">Work with instance tags using the instance metadata</a>.</p> <p>Default: <code>disabled</code> </p>
type GETModifyInstanceMetadataOptionsInstanceMetadataTagsEnum string

const (
	GETModifyInstanceMetadataOptionsInstanceMetadataTagsEnumDisabled GETModifyInstanceMetadataOptionsInstanceMetadataTagsEnum = "disabled"
	GETModifyInstanceMetadataOptionsInstanceMetadataTagsEnumEnabled  GETModifyInstanceMetadataOptionsInstanceMetadataTagsEnum = "enabled"
)

func (e *GETModifyInstanceMetadataOptionsInstanceMetadataTagsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "disabled":
		fallthrough
	case "enabled":
		*e = GETModifyInstanceMetadataOptionsInstanceMetadataTagsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyInstanceMetadataOptionsInstanceMetadataTagsEnum: %s", s)
	}
}

// GETModifyInstanceMetadataOptionsVersionEnum
type GETModifyInstanceMetadataOptionsVersionEnum string

const (
	GETModifyInstanceMetadataOptionsVersionEnumTwoThousandAndSixteen1115 GETModifyInstanceMetadataOptionsVersionEnum = "2016-11-15"
)

func (e *GETModifyInstanceMetadataOptionsVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETModifyInstanceMetadataOptionsVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyInstanceMetadataOptionsVersionEnum: %s", s)
	}
}

type GETModifyInstanceMetadataOptionsRequest struct {
	Action GETModifyInstanceMetadataOptionsActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// <p>Enables or disables the HTTP metadata endpoint on your instances. If this parameter is not specified, the existing state is maintained.</p> <p>If you specify a value of <code>disabled</code>, you cannot access your instance metadata.</p>
	HTTPEndpoint *GETModifyInstanceMetadataOptionsHTTPEndpointEnum `queryParam:"style=form,explode=true,name=HttpEndpoint"`
	// Enables or disables the IPv6 endpoint for the instance metadata service. This setting applies only if you have enabled the HTTP metadata endpoint.
	HTTPProtocolIpv6 *GETModifyInstanceMetadataOptionsHTTPProtocolIpv6Enum `queryParam:"style=form,explode=true,name=HttpProtocolIpv6"`
	// <p>The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. If no parameter is specified, the existing state is maintained.</p> <p>Possible values: Integers from 1 to 64</p>
	HTTPPutResponseHopLimit *int64 `queryParam:"style=form,explode=true,name=HttpPutResponseHopLimit"`
	// <p>IMDSv2 uses token-backed sessions. Set the use of HTTP tokens to <code>optional</code> (in other words, set the use of IMDSv2 to <code>optional</code>) or <code>required</code> (in other words, set the use of IMDSv2 to <code>required</code>).</p> <ul> <li> <p> <code>optional</code> - When IMDSv2 is optional, you can choose to retrieve instance metadata with or without a session token in your request. If you retrieve the IAM role credentials without a token, the IMDSv1 role credentials are returned. If you retrieve the IAM role credentials using a valid session token, the IMDSv2 role credentials are returned.</p> </li> <li> <p> <code>required</code> - When IMDSv2 is required, you must send a session token with any instance metadata retrieval requests. In this state, retrieving the IAM role credentials always returns IMDSv2 credentials; IMDSv1 credentials are not available.</p> </li> </ul> <p>Default: <code>optional</code> </p>
	HTTPTokens *GETModifyInstanceMetadataOptionsHTTPTokensEnum `queryParam:"style=form,explode=true,name=HttpTokens"`
	// The ID of the instance.
	InstanceID string `queryParam:"style=form,explode=true,name=InstanceId"`
	// <p>Set to <code>enabled</code> to allow access to instance tags from the instance metadata. Set to <code>disabled</code> to turn off access to instance tags from the instance metadata. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS">Work with instance tags using the instance metadata</a>.</p> <p>Default: <code>disabled</code> </p>
	InstanceMetadataTags *GETModifyInstanceMetadataOptionsInstanceMetadataTagsEnum `queryParam:"style=form,explode=true,name=InstanceMetadataTags"`
	Version              GETModifyInstanceMetadataOptionsVersionEnum               `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm        *string                                                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256    *string                                                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential       *string                                                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate             *string                                                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken    *string                                                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature        *string                                                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders    *string                                                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETModifyInstanceMetadataOptionsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
