// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetServiceSecurity struct {
	JwtBearer string `security:"scheme,type=oauth2,name=Authorization"`
}

type GetServiceRequest struct {
	// Unique identifier of Service to managed
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Whether to include details on services messages into result. Default is false
	Messages *bool `queryParam:"style=form,explode=true,name=messages"`
}

type GetService200ApplicationJSONType string

const (
	GetService200ApplicationJSONTypeService     GetService200ApplicationJSONType = "Service"
	GetService200ApplicationJSONTypeServiceView GetService200ApplicationJSONType = "ServiceView"
)

type GetService200ApplicationJSON struct {
	Service     *shared.Service
	ServiceView *shared.ServiceView

	Type GetService200ApplicationJSONType
}

func CreateGetService200ApplicationJSONService(service shared.Service) GetService200ApplicationJSON {
	typ := GetService200ApplicationJSONTypeService

	return GetService200ApplicationJSON{
		Service: &service,
		Type:    typ,
	}
}

func CreateGetService200ApplicationJSONServiceView(serviceView shared.ServiceView) GetService200ApplicationJSON {
	typ := GetService200ApplicationJSONTypeServiceView

	return GetService200ApplicationJSON{
		ServiceView: &serviceView,
		Type:        typ,
	}
}

func (u *GetService200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	service := new(shared.Service)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&service); err == nil {
		u.Service = service
		u.Type = GetService200ApplicationJSONTypeService
		return nil
	}

	serviceView := new(shared.ServiceView)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&serviceView); err == nil {
		u.ServiceView = serviceView
		u.Type = GetService200ApplicationJSONTypeServiceView
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetService200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.Service != nil {
		return json.Marshal(u.Service)
	}

	if u.ServiceView != nil {
		return json.Marshal(u.ServiceView)
	}

	return nil, nil
}

type GetServiceResponse struct {
	ContentType                       string
	GetService200ApplicationJSONOneOf *GetService200ApplicationJSON
	StatusCode                        int
	RawResponse                       *http.Response
}
