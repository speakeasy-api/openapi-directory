"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import createfilesystemlustreconfiguration as shared_createfilesystemlustreconfiguration
from ..shared import createfilesystemopenzfsconfiguration as shared_createfilesystemopenzfsconfiguration
from ..shared import createfilesystemwindowsconfiguration as shared_createfilesystemwindowsconfiguration
from ..shared import storagetype_enum as shared_storagetype_enum
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateFileSystemFromBackupRequest:
    r"""The request object for the <code>CreateFileSystemFromBackup</code> operation."""
    
    backup_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BackupId') }})
    r"""The ID of the source backup. Specifies the backup that you are copying."""  
    subnet_ids: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubnetIds') }})  
    client_request_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClientRequestToken'), 'exclude': lambda f: f is None }})  
    file_system_type_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FileSystemTypeVersion'), 'exclude': lambda f: f is None }})  
    kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KmsKeyId'), 'exclude': lambda f: f is None }})
    r"""<p>Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on Amazon FSx file systems, as follows:</p> <ul> <li> <p>Amazon FSx for Lustre <code>PERSISTENT_1</code> and <code>PERSISTENT_2</code> deployment types only.</p> <p> <code>SCRATCH_1</code> and <code>SCRATCH_2</code> types are encrypted using the Amazon FSx service KMS key for your account.</p> </li> <li> <p>Amazon FSx for NetApp ONTAP</p> </li> <li> <p>Amazon FSx for OpenZFS</p> </li> <li> <p>Amazon FSx for Windows File Server</p> </li> </ul> <p>If a <code>KmsKeyId</code> isn't specified, the Amazon FSx-managed KMS key for your account is used. For more information, see <a href=\\"https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html\\">Encrypt</a> in the <i>Key Management Service API Reference</i>.</p>"""  
    lustre_configuration: Optional[shared_createfilesystemlustreconfiguration.CreateFileSystemLustreConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LustreConfiguration'), 'exclude': lambda f: f is None }})
    r"""<p>The Lustre configuration for the file system being created.</p> <note> <p>The following parameters are not supported for file systems with the <code>Persistent_2</code> deployment type. Instead, use <code>CreateDataRepositoryAssociation</code> to create a data repository association to link your Lustre file system to a data repository.</p> <ul> <li> <p> <code>AutoImportPolicy</code> </p> </li> <li> <p> <code>ExportPath</code> </p> </li> <li> <p> <code>ImportedChunkSize</code> </p> </li> <li> <p> <code>ImportPath</code> </p> </li> </ul> </note>"""  
    open_zfs_configuration: Optional[shared_createfilesystemopenzfsconfiguration.CreateFileSystemOpenZFSConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpenZFSConfiguration'), 'exclude': lambda f: f is None }})  
    security_group_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityGroupIds'), 'exclude': lambda f: f is None }})  
    storage_capacity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StorageCapacity'), 'exclude': lambda f: f is None }})  
    storage_type: Optional[shared_storagetype_enum.StorageTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StorageType'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    windows_configuration: Optional[shared_createfilesystemwindowsconfiguration.CreateFileSystemWindowsConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WindowsConfiguration'), 'exclude': lambda f: f is None }})  
    