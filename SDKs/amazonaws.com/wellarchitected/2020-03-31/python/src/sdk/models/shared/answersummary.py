"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import answerreason_enum as shared_answerreason_enum
from ..shared import choice as shared_choice
from ..shared import choiceanswersummary as shared_choiceanswersummary
from ..shared import risk_enum as shared_risk_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AnswerSummary:
    r"""An answer summary of a lens review in a workload."""
    
    choice_answer_summaries: Optional[list[shared_choiceanswersummary.ChoiceAnswerSummary]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ChoiceAnswerSummaries'), 'exclude': lambda f: f is None }})  
    choices: Optional[list[shared_choice.Choice]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Choices'), 'exclude': lambda f: f is None }})
    r"""List of choices available for a question."""  
    is_applicable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsApplicable'), 'exclude': lambda f: f is None }})
    r"""Defines whether this question is applicable to a lens review."""  
    pillar_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PillarId'), 'exclude': lambda f: f is None }})
    r"""<p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>"""  
    question_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QuestionId'), 'exclude': lambda f: f is None }})
    r"""The ID of the question."""  
    question_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QuestionTitle'), 'exclude': lambda f: f is None }})
    r"""The title of the question."""  
    reason: Optional[shared_answerreason_enum.AnswerReasonEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Reason'), 'exclude': lambda f: f is None }})  
    risk: Optional[shared_risk_enum.RiskEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Risk'), 'exclude': lambda f: f is None }})
    r"""The risk for a given workload, lens review, pillar, or question."""  
    selected_choices: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SelectedChoices'), 'exclude': lambda f: f is None }})
    r"""<p>List of selected choice IDs in a question answer.</p> <p>The values entered replace the previously selected choices.</p>"""  
    