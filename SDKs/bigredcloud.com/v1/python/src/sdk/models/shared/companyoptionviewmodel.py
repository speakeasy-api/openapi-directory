"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CompanyOptionViewModel:
    
    allow_entry_of_gross_price_in_invoicing: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowEntryOfGrossPriceInInvoicing'), 'exclude': lambda f: f is None }})  
    credit_input_for_reverse_charge_vat: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creditInputForReverseChargeVAT'), 'exclude': lambda f: f is None }})  
    credit_note_journal_ageing_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creditNoteJournalAgeingName'), 'exclude': lambda f: f is None }})  
    credit_note_journal_ageing_value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creditNoteJournalAgeingValue'), 'exclude': lambda f: f is None }})  
    discrepancy_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('discrepancyAllowed'), 'exclude': lambda f: f is None }})  
    enable_vocr_reporting: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableVOCRReporting'), 'exclude': lambda f: f is None }})  
    margin_vat_scheme: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marginVatScheme'), 'exclude': lambda f: f is None }})  
    print_os_items_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('printOSItemsOnly'), 'exclude': lambda f: f is None }})  
    purchases_vat_analysis_type: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purchasesVatAnalysisType'), 'exclude': lambda f: f is None }})  
    sales_vat_analysis_type: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('salesVatAnalysisType'), 'exclude': lambda f: f is None }})  
    use_allocations: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useAllocations'), 'exclude': lambda f: f is None }})  
    use_nominal: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useNominal'), 'exclude': lambda f: f is None }})  
    use_nominal_code: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useNominalCode'), 'exclude': lambda f: f is None }})  
    vocr_setting_value: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vocrSettingValue'), 'exclude': lambda f: f is None }})  
    