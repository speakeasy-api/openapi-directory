"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import updatesubscriptionnotificationconfigurationresponse as shared_updatesubscriptionnotificationconfigurationresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateSubscriptionNotificationConfigurationRequestBodyHTTPSMethodEnum(str, Enum):
    r"""The HTTPS method used for the subscription notification."""
    POST = 'POST'
    PUT = 'PUT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateSubscriptionNotificationConfigurationRequestBody:
    
    create_sqs: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createSqs'), 'exclude': lambda f: f is None }})
    r"""Create a new subscription notification for the specified subscription ID in Amazon Security Lake."""  
    https_api_key_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('httpsApiKeyName'), 'exclude': lambda f: f is None }})
    r"""The key name for the subscription notification."""  
    https_api_key_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('httpsApiKeyValue'), 'exclude': lambda f: f is None }})
    r"""The key value for the subscription notification."""  
    https_method: Optional[UpdateSubscriptionNotificationConfigurationRequestBodyHTTPSMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('httpsMethod'), 'exclude': lambda f: f is None }})
    r"""The HTTPS method used for the subscription notification."""  
    role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roleArn'), 'exclude': lambda f: f is None }})
    r"""The Amazon Resource Name (ARN) specifying the role of the subscriber. For more information about ARNs and how to use them in policies, see, see the <a href=\\"https://docs.aws.amazon.com//security-lake/latest/userguide/subscriber-data-access.html\\">Managing data access</a> and <a href=\\"https://docs.aws.amazon.com/security-lake/latest/userguide/security-iam-awsmanpol.html\\">Amazon Web Services Managed Policies</a>in the Amazon Security Lake User Guide."""  
    subscription_endpoint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionEndpoint'), 'exclude': lambda f: f is None }})
    r"""The subscription endpoint in Security Lake."""  
    

@dataclasses.dataclass
class UpdateSubscriptionNotificationConfigurationRequest:
    
    request_body: UpdateSubscriptionNotificationConfigurationRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    subscription_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'subscriptionId', 'style': 'simple', 'explode': False }})
    r"""The subscription ID for which the subscription notification is specified."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateSubscriptionNotificationConfigurationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    account_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccountNotFoundException"""  
    concurrent_modification_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConcurrentModificationException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    invalid_input_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidInputException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    update_subscription_notification_configuration_response: Optional[shared_updatesubscriptionnotificationconfigurationresponse.UpdateSubscriptionNotificationConfigurationResponse] = dataclasses.field(default=None)
    r"""Success"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    