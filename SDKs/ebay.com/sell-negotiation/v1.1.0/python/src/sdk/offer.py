"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Offer:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def find_eligible_items(self, request: operations.FindEligibleItemsRequest, security: operations.FindEligibleItemsSecurity) -> operations.FindEligibleItemsResponse:
        r"""This method evaluates a seller's current listings and returns the set of IDs that are eligible for a seller-initiated discount offer to a buyer. A listing ID is returned only when one or more buyers have shown an &quot;interest&quot; in the listing. If any buyers have shown interest in a listing, the seller can initiate a &quot;negotiation&quot; with them by calling sendOfferToInterestedBuyers, which sends all interested buyers a message that offers the listing at a discount. For details about how to create seller offers to buyers, see Sending offers to buyers."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/find_eligible_items'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.FindEligibleItemsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindEligibleItemsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PagedEligibleItemCollection])
                res.paged_eligible_item_collection = out
        elif http_res.status_code in [204, 400, 500]:
            pass

        return res

    def send_offer_to_interested_buyers(self, request: operations.SendOfferToInterestedBuyersRequest, security: operations.SendOfferToInterestedBuyersSecurity) -> operations.SendOfferToInterestedBuyersResponse:
        r"""This method sends eligible buyers offers to purchase items in a listing at a discount. When a buyer has shown interest in a listing, they become &quot;eligible&quot; to receive a seller-initiated offer to purchase the item(s). Sellers use findEligibleItems to get the set of listings that have interested buyers. If a listing has interested buyers, sellers can use this method (sendOfferToInterestedBuyers) to send an offer to the buyers who are interested in the listing. The offer gives buyers the ability to purchase the associated listings at a discounted price. For details about how to create seller offers to buyers, see Sending offers to buyers."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/send_offer_to_interested_buyers'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "create_offers_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SendOfferToInterestedBuyersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SendOfferToInterestedBuyersCollectionResponse])
                res.send_offer_to_interested_buyers_collection_response = out
        elif http_res.status_code in [400, 409, 500]:
            pass

        return res

    