"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class PodcastEpisodes:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_podcast_episodes(self, request: operations.GetPodcastEpisodesRequest) -> operations.GetPodcastEpisodesResponse:
        r"""Podcast Episodes
        This endpoint allows the client to retrieve a list of podcast episodes.
                \"Podcast episodes\" are episodes belonging to podcasts.
                It will only return active (reachable) podcast episodes that belong to published podcasts available on the platform, ordered by descending publication date.
                It supports pagination, each page will contain 30 articles by default.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/podcast_episodes'
        
        query_params = utils.get_query_params(operations.GetPodcastEpisodesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPodcastEpisodesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PodcastEpisodeIndex]])
                res.podcast_episode_indices = out
        elif http_res.status_code == 404:
            pass

        return res

    