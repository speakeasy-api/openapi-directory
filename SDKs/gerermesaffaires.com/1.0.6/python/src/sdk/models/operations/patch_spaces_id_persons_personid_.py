"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatchSpacesIDPersonsPersonIDRequestBodyAddress:
    
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('City'), 'exclude': lambda f: f is None }})  
    complement: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Complement'), 'exclude': lambda f: f is None }})  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Country'), 'exclude': lambda f: f is None }})  
    street: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Street'), 'exclude': lambda f: f is None }})  
    zip_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ZipCode'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatchSpacesIDPersonsPersonIDRequestBodyBirth:
    
    date_: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Date'), 'exclude': lambda f: f is None }})  
    place: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Place'), 'exclude': lambda f: f is None }})  
    
class PatchSpacesIDPersonsPersonIDRequestBodySexEnum(str, Enum):
    MALE = 'male'
    FEMALE = 'female'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatchSpacesIDPersonsPersonIDRequestBody:
    r"""Person to modify"""
    
    address: Optional[PatchSpacesIDPersonsPersonIDRequestBodyAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address'), 'exclude': lambda f: f is None }})  
    archival_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ArchivalDate'), 'exclude': lambda f: f is None }})  
    birth: Optional[PatchSpacesIDPersonsPersonIDRequestBodyBirth] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Birth'), 'exclude': lambda f: f is None }})  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Comment'), 'exclude': lambda f: f is None }})  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Email'), 'exclude': lambda f: f is None }})  
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FirstName'), 'exclude': lambda f: f is None }})  
    mobile: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Mobile'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    sex: Optional[PatchSpacesIDPersonsPersonIDRequestBodySexEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Sex'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PatchSpacesIDPersonsPersonIDRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""Id of the space"""  
    person_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'personId', 'style': 'simple', 'explode': False }})
    r"""Id of the person to modify or memberId"""  
    request_body: PatchSpacesIDPersonsPersonIDRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Person to modify"""  
    

@dataclasses.dataclass
class PatchSpacesIDPersonsPersonIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    