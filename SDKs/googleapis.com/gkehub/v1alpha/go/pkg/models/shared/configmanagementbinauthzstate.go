// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ConfigManagementBinauthzStateWebhookEnum - The state of the binauthz webhook.
type ConfigManagementBinauthzStateWebhookEnum string

const (
	ConfigManagementBinauthzStateWebhookEnumDeploymentStateUnspecified ConfigManagementBinauthzStateWebhookEnum = "DEPLOYMENT_STATE_UNSPECIFIED"
	ConfigManagementBinauthzStateWebhookEnumNotInstalled               ConfigManagementBinauthzStateWebhookEnum = "NOT_INSTALLED"
	ConfigManagementBinauthzStateWebhookEnumInstalled                  ConfigManagementBinauthzStateWebhookEnum = "INSTALLED"
	ConfigManagementBinauthzStateWebhookEnumError                      ConfigManagementBinauthzStateWebhookEnum = "ERROR"
)

func (e ConfigManagementBinauthzStateWebhookEnum) ToPointer() *ConfigManagementBinauthzStateWebhookEnum {
	return &e
}

func (e *ConfigManagementBinauthzStateWebhookEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DEPLOYMENT_STATE_UNSPECIFIED":
		fallthrough
	case "NOT_INSTALLED":
		fallthrough
	case "INSTALLED":
		fallthrough
	case "ERROR":
		*e = ConfigManagementBinauthzStateWebhookEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfigManagementBinauthzStateWebhookEnum: %v", v)
	}
}

// ConfigManagementBinauthzState - State for Binauthz
type ConfigManagementBinauthzState struct {
	// The version of binauthz.
	Version *ConfigManagementBinauthzVersion `json:"version,omitempty"`
	// The state of the binauthz webhook.
	Webhook *ConfigManagementBinauthzStateWebhookEnum `json:"webhook,omitempty"`
}
