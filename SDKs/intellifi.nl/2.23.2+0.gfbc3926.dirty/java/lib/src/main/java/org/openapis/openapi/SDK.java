/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This document describes the [Intellifi Brain](https://intellifi.zendesk.com/hc/en-us/categories/360000685454)
 * Web API specification using the [OpenAPI specification](https://github.com/OAI/OpenAPI-Specification).
 * 
 * The Brain Web API is a RESTful API that allows you to interact with the
 * [Intellifi devices](https://intellifi.zendesk.com/hc/en-us/categories/360000685434) and
 * services in a powerful and simple way. Our end-to-end solution allows you to
 * localize your items/assets based on technologies such as RFID and Bluetooth.
 * 
 * # Try it out!
 * 
 * The API can be tried out and tested using the ['api-doc/tryitout' endpoint on this site](./tryitout/).
 * This UI allows anyone to visualize and interact with the API\u2019s resources without having any of the implementation logic in place.
 * It\u2019s automatically generated from this Specification, with the visual documentation making it easy for back end implementation and client side consumption.
 * 
 * # Authentication
 * 
 * Applications are required to provide some form of authentication to the API
 * for every secured endpoint. The Brain offers two forms of authentication.
 * 
 * - API key (Via an HTTP request header or URL parameter)
 * - Session cookie
 * 
 * &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 * 
 * # See also
 * 
 * - About Intellifi and what we do: [intellifi.nl](https://intellifi.nl)
 * - Technical and background information: [intellifi.zendesk.com](https://intellifi.zendesk.com)
 * 
 * https://intellifi.zendesk.com - Find out more
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        /**
         * Cloud hosted Brain API endpoint.
         */
        "https://{protocol}://{customer}.intellifi.{tld}/api",
	};
  	
    /**
     * Read-only route providing information about how the requesting client is authenticated on the API, as well as corresponding permissions.
     * 
     */
    public Authinfo authinfo;
    /**
     * The `blobs` resource provides a service for storing binary objects on the Brain, e.g. images.
     * Intended for applications that interact with the Brain but do not or cannot have their own (centralized) persistent storage.
     * 
     * See also the `kvpairs` resource.
     * 
     */
    public Blobs blobs;
    /**
     * The `events` resource temporarily holds Brain events that match an event subscription in the `subscriptions` resource.
     * The subscription determines how long the events are held.
     * 
     * See also the `subscriptions` resource.
     * 
     * https://intellifi.zendesk.com/hc/en-us/sections/360001588534
     */
    public Events events;
    /**
     * The `items` resource contains data about things that can be tracked using the Brain.
     * When an item is detected for the first time by a device connected to the Brain, it will be added to this resource.
     * It will then be updated with information about where the item currently is, or where it has been seen for the last time.
     * 
     * https://intellifi.zendesk.com/hc/en-us/articles/360007502554
     */
    public Items items;
    /**
     * The `keys` resource contains the access keys used to authenticate requests to this API.
     * 
     * Note that this resource is only accessible for administrator users logged into the Brain Management Console.
     * It is not possible to access this resource using API key authentication.
     * This resource is therefore irrelevant to most applications.
     * 
     */
    public Keys keys;
    /**
     * The `kvpairs` resource provides a service for storing generic JSON key/value pairs on the Brain.
     * Intended for applications that interact with the Brain but do not or cannot have their own (centralized) persistent storage.
     * 
     * See also the `blobs` resource.
     * 
     */
    public Kvpairs kvpairs;
    /**
     * Location rules are directives for the localization engine that may be useful for certain solutions.
     * 
     */
    public Locationrules locationrules;
    /**
     * The `locations` resource is an abstraction for the area around a physical location that items can be localized at.
     * 
     * https://intellifi.zendesk.com/hc/en-us/articles/360007502554
     */
    public Locations locations;
    /**
     * The `presences` resource is an abstraction for the detection of an item (from the `items` resource) at a location (from the `locations` resource).
     * Presences are always kept current by the Brain, i.e. if the hold time of a presence expires it is simply removed from the resource.
     * 
     * https://intellifi.zendesk.com/hc/en-us/articles/360008309313
     */
    public Presences presences;
    /**
     * The Brain consists of several software components with their own responsibilities, referred to as "services".
     * Some of these services have status information and/or configuration that can be managed using the `services` resource.
     * 
     */
    public Services services;
    /**
     * It can be useful to group items or Smartspots in a list. The `sets` resource can be used to create and manage such list sets.
     * Sets can be utilized in various Brain Management Console utilities and can also be useful in custom Brain applications.
     * 
     * https://intellifi.zendesk.com/hc/en-us/articles/360007824993
     */
    public Sets sets;
    /**
     * The `spots` resource contains representations of Smartspot devices that have connected to this Brain at least once.
     * It is possible to configure Smartspots through this resource.
     * 
     * Smartspots also have their own locally stored sets, referred to as "spotsets".
     * Spotsets can be created and managed within a single spot instance or by using `spotsets` resource.
     * Created or updated spotsets are automatically synced between Smartspot and server.
     * 
     * https://intellifi.zendesk.com/hc/en-us/categories/360000685434
     */
    public Spots spots;
    /**
     * The `spotsets` resource contains a collection of set definitons for each Smartspot and allows for remote mananagement.
     * Spotsets are stored and used on the Smartspot locally and synced between Smartspot and server.
     * Spotsets primarly are used as an input for Sense&amp;Control.
     * 
     * https://intellifi.zendesk.com/hc/en-us/articles/360009282834
     */
    public Spotsets spotsets;
    /**
     * The `subscriptions` resource contains rules to store and/or deliver events from the Brain event system.
     * 
     * See also the `events` resource.
     * 
     * https://intellifi.zendesk.com/hc/en-us/sections/360001588534
     */
    public Subscriptions subscriptions;
    /**
     * The `users` resource contains the user accounts that can log into the Brain Management Console.
     * 
     * Note that this resource is only accessible for administrator users logged into the Brain Management Console.
     * It is not possible to access this resource using API key authentication.
     * This resource is therefore irrelevant to most applications.
     * 
     */
    public Users users;	

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private org.openapis.openapi.models.shared.Security _security;
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		private org.openapis.openapi.models.shared.Security security;
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Configures the SDK to use the provided security details.
		 * @param security The security details to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setSecurity(org.openapis.openapi.models.shared.Security security) {
			this.security = security;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.security, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, org.openapis.openapi.models.shared.Security security, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (security != null) {
			this._security = security;
			this._securityClient = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, this._security);
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
		
		this.authinfo = new Authinfo(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.blobs = new Blobs(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.events = new Events(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.items = new Items(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.keys = new Keys(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.kvpairs = new Kvpairs(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.locationrules = new Locationrules(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.locations = new Locations(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.presences = new Presences(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.services = new Services(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.sets = new Sets(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.spots = new Spots(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.spotsets = new Spotsets(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.subscriptions = new Subscriptions(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.users = new Users(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
	}
}