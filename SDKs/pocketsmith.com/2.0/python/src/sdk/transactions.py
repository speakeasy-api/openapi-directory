"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Transactions:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_transactions_id_(self, request: operations.DeleteTransactionsIDRequest) -> operations.DeleteTransactionsIDResponse:
        r"""Delete transaction
        Deletes a transaction and all its data by ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteTransactionsIDRequest, base_url, '/transactions/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteTransactionsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_accounts_id_transactions(self, request: operations.GetAccountsIDTransactionsRequest) -> operations.GetAccountsIDTransactionsResponse:
        r"""List transactions in account
        Lists transactions belonging to an account by its ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAccountsIDTransactionsRequest, base_url, '/accounts/{id}/transactions', request)
        
        query_params = utils.get_query_params(operations.GetAccountsIDTransactionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountsIDTransactionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Transaction]])
                res.transactions = out
        elif http_res.status_code in [400, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_categories_id_transactions(self, request: operations.GetCategoriesIDTransactionsRequest) -> operations.GetCategoriesIDTransactionsResponse:
        r"""List transactions in categories
        Lists transactions belonging to one or more categories by their IDs.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCategoriesIDTransactionsRequest, base_url, '/categories/{id}/transactions', request)
        
        query_params = utils.get_query_params(operations.GetCategoriesIDTransactionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCategoriesIDTransactionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Transaction]])
                res.transactions = out
        elif http_res.status_code in [400, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_transaction_accounts_id_transactions(self, request: operations.GetTransactionAccountsIDTransactionsRequest) -> operations.GetTransactionAccountsIDTransactionsResponse:
        r"""List transactions in transaction account
        Lists transactions belonging to a transaction account by its ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTransactionAccountsIDTransactionsRequest, base_url, '/transaction_accounts/{id}/transactions', request)
        
        query_params = utils.get_query_params(operations.GetTransactionAccountsIDTransactionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTransactionAccountsIDTransactionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Transaction]])
                res.transactions = out
        elif http_res.status_code in [400, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_transactions_id_(self, request: operations.GetTransactionsIDRequest) -> operations.GetTransactionsIDResponse:
        r"""Get a transaction
        Gets a transaction by its ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTransactionsIDRequest, base_url, '/transactions/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTransactionsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Transaction])
                res.transaction = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_users_id_transactions(self, request: operations.GetUsersIDTransactionsRequest) -> operations.GetUsersIDTransactionsResponse:
        r"""List transactions in user
        Lists transactions belonging to a user by their ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUsersIDTransactionsRequest, base_url, '/users/{id}/transactions', request)
        
        query_params = utils.get_query_params(operations.GetUsersIDTransactionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUsersIDTransactionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Transaction]])
                res.transactions = out
        elif http_res.status_code in [400, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def post_transaction_accounts_id_transactions(self, request: operations.PostTransactionAccountsIDTransactionsRequest) -> operations.PostTransactionAccountsIDTransactionsResponse:
        r"""Create a transaction in transaction account
        Creates a transaction in a transaction account by its ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostTransactionAccountsIDTransactionsRequest, base_url, '/transaction_accounts/{id}/transactions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostTransactionAccountsIDTransactionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Transaction])
                res.transaction = out
        elif http_res.status_code in [403, 404, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def put_transactions_id_(self, request: operations.PutTransactionsIDRequest) -> operations.PutTransactionsIDResponse:
        r"""Update a transaction
        Updates a transaction by its ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutTransactionsIDRequest, base_url, '/transactions/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutTransactionsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Transaction])
                res.transaction = out
        elif http_res.status_code in [403, 404, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    