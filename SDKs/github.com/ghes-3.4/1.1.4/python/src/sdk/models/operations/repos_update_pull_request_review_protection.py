"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import protected_branch_pull_request_review as shared_protected_branch_pull_request_review
from ..shared import validation_error as shared_validation_error
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReposUpdatePullRequestReviewProtectionRequestBodyBypassPullRequestAllowances:
    r"""Allow specific users, teams, or apps to bypass pull request requirements."""
    
    apps: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apps'), 'exclude': lambda f: f is None }})
    r"""The list of app `slug`s allowed to bypass pull request requirements."""  
    teams: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('teams'), 'exclude': lambda f: f is None }})
    r"""The list of team `slug`s allowed to bypass pull request requirements."""  
    users: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('users'), 'exclude': lambda f: f is None }})
    r"""The list of user `login`s allowed to bypass pull request requirements."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReposUpdatePullRequestReviewProtectionRequestBodyDismissalRestrictions:
    r"""Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories."""
    
    apps: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apps'), 'exclude': lambda f: f is None }})
    r"""The list of app `slug`s with dismissal access"""  
    teams: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('teams'), 'exclude': lambda f: f is None }})
    r"""The list of team `slug`s with dismissal access"""  
    users: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('users'), 'exclude': lambda f: f is None }})
    r"""The list of user `login`s with dismissal access"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReposUpdatePullRequestReviewProtectionRequestBody:
    
    bypass_pull_request_allowances: Optional[ReposUpdatePullRequestReviewProtectionRequestBodyBypassPullRequestAllowances] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bypass_pull_request_allowances'), 'exclude': lambda f: f is None }})
    r"""Allow specific users, teams, or apps to bypass pull request requirements."""  
    dismiss_stale_reviews: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dismiss_stale_reviews'), 'exclude': lambda f: f is None }})
    r"""Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit."""  
    dismissal_restrictions: Optional[ReposUpdatePullRequestReviewProtectionRequestBodyDismissalRestrictions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dismissal_restrictions'), 'exclude': lambda f: f is None }})
    r"""Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories."""  
    require_code_owner_reviews: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('require_code_owner_reviews'), 'exclude': lambda f: f is None }})
    r"""Blocks merging pull requests until [code owners](https://docs.github.com/enterprise-server@3.4/articles/about-code-owners/) have reviewed."""  
    required_approving_review_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required_approving_review_count'), 'exclude': lambda f: f is None }})
    r"""Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers."""  
    

@dataclasses.dataclass
class ReposUpdatePullRequestReviewProtectionRequest:
    
    branch: str = dataclasses.field(metadata={'path_param': { 'field_name': 'branch', 'style': 'simple', 'explode': False }})
    r"""The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.4/graphql)."""  
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})
    r"""The account owner of the repository. The name is not case sensitive."""  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})
    r"""The name of the repository. The name is not case sensitive."""  
    request_body: Optional[ReposUpdatePullRequestReviewProtectionRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class ReposUpdatePullRequestReviewProtectionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    protected_branch_pull_request_review: Optional[shared_protected_branch_pull_request_review.ProtectedBranchPullRequestReview] = dataclasses.field(default=None)
    r"""Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    validation_error: Optional[shared_validation_error.ValidationError] = dataclasses.field(default=None)
    r"""Validation failed, or the endpoint has been spammed."""  
    