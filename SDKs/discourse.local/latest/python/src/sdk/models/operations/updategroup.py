"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateGroupRequestBodyGroup:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    automatic_membership_email_domains: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('automatic_membership_email_domains'), 'exclude': lambda f: f is None }})
    r"""pipe|separated"""  
    bio_raw: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bio_raw'), 'exclude': lambda f: f is None }})
    r"""About Group"""  
    default_notification_level: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_notification_level'), 'exclude': lambda f: f is None }})  
    flair_bg_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_bg_color'), 'exclude': lambda f: f is None }})  
    flair_icon: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_icon'), 'exclude': lambda f: f is None }})  
    flair_upload_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_upload_id'), 'exclude': lambda f: f is None }})  
    full_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('full_name'), 'exclude': lambda f: f is None }})  
    muted_category_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('muted_category_ids'), 'exclude': lambda f: f is None }})  
    owner_usernames: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner_usernames'), 'exclude': lambda f: f is None }})
    r"""comma,separated"""  
    primary_group: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_group'), 'exclude': lambda f: f is None }})  
    public_admission: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public_admission'), 'exclude': lambda f: f is None }})  
    public_exit: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public_exit'), 'exclude': lambda f: f is None }})  
    regular_category_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regular_category_ids'), 'exclude': lambda f: f is None }})  
    tracking_category_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tracking_category_ids'), 'exclude': lambda f: f is None }})  
    usernames: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usernames'), 'exclude': lambda f: f is None }})
    r"""comma,separated"""  
    visibility_level: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visibility_level'), 'exclude': lambda f: f is None }})  
    watching_category_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watching_category_ids'), 'exclude': lambda f: f is None }})  
    watching_first_post_category_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watching_first_post_category_ids'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateGroupRequestBody:
    
    group: UpdateGroupRequestBodyGroup = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group') }})  
    

@dataclasses.dataclass
class UpdateGroupRequest:
    
    id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateGroupRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateGroup200ApplicationJSON:
    r"""success response"""
    
    success: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class UpdateGroupResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_group_200_application_json_object: Optional[UpdateGroup200ApplicationJSON] = dataclasses.field(default=None)
    r"""success response"""  
    