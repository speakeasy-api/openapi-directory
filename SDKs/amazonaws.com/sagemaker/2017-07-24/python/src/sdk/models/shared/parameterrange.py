"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import categoricalparameterrangespecification as shared_categoricalparameterrangespecification
from ..shared import continuousparameterrangespecification as shared_continuousparameterrangespecification
from ..shared import integerparameterrangespecification as shared_integerparameterrangespecification
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ParameterRange:
    r"""Defines the possible values for categorical, continuous, and integer hyperparameters to be used by an algorithm."""
    
    categorical_parameter_range_specification: Optional[shared_categoricalparameterrangespecification.CategoricalParameterRangeSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CategoricalParameterRangeSpecification'), 'exclude': lambda f: f is None }})  
    continuous_parameter_range_specification: Optional[shared_continuousparameterrangespecification.ContinuousParameterRangeSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContinuousParameterRangeSpecification'), 'exclude': lambda f: f is None }})  
    integer_parameter_range_specification: Optional[shared_integerparameterrangespecification.IntegerParameterRangeSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IntegerParameterRangeSpecification'), 'exclude': lambda f: f is None }})  
    