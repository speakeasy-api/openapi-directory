/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
 */
export enum CheckTransferCurrencyEnum {
  Cad = "CAD",
  Chf = "CHF",
  Eur = "EUR",
  Gbp = "GBP",
  Jpy = "JPY",
  Usd = "USD",
}

/**
 * A constant representing the object's type. For this resource it will always be `check_transfer_deposit`.
 */
export enum CheckTransferCheckTransferDepositTypeEnum {
  CheckTransferDeposit = "check_transfer_deposit",
}

/**
 * After a check transfer is deposited, this will contain supplemental details.
 */
export class CheckTransferCheckTransferDeposit extends SpeakeasyBase {
  /**
   * The ID for the File containing the image of the rear of the check.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "back_image_file_id" })
  backImageFileId: string;

  /**
   * The ID for the File containing the image of the front of the check.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "front_image_file_id" })
  frontImageFileId: string;

  /**
   * A constant representing the object's type. For this resource it will always be `check_transfer_deposit`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: CheckTransferCheckTransferDepositTypeEnum;
}

/**
 * The return address to be printed on the check.
 */
export class CheckTransferReturnAddress extends SpeakeasyBase {
  /**
   * The city of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * The first line of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line1" })
  line1: string;

  /**
   * The second line of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line2" })
  line2: string;

  /**
   * The name of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The US state of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: string;

  /**
   * The postal code of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zip" })
  zip: string;
}

/**
 * The lifecycle status of the transfer.
 */
export enum CheckTransferStatusEnum {
  PendingApproval = "pending_approval",
  PendingSubmission = "pending_submission",
  Submitting = "submitting",
  Submitted = "submitted",
  PendingMailing = "pending_mailing",
  Mailed = "mailed",
  Canceled = "canceled",
  Deposited = "deposited",
  Stopped = "stopped",
  Returned = "returned",
  Rejected = "rejected",
  RequiresAttention = "requires_attention",
}

/**
 * A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
 */
export enum CheckTransferCheckTransferStopPaymentRequestTypeEnum {
  CheckTransferStopPaymentRequest = "check_transfer_stop_payment_request",
}

/**
 * After a stop-payment is requested on the check, this will contain supplemental details.
 */
export class CheckTransferCheckTransferStopPaymentRequest extends SpeakeasyBase {
  /**
   * The time the stop-payment was requested.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requested_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  requestedAt: Date;

  /**
   * The transaction ID of the corresponding credit transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transaction_id" })
  transactionId: string;

  /**
   * The ID of the check transfer that was stopped.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transfer_id" })
  transferId: string;

  /**
   * A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: CheckTransferCheckTransferStopPaymentRequestTypeEnum;
}

/**
 * After the transfer is submitted, this will contain supplemental details.
 */
export class CheckTransferCheckTransferSubmission extends SpeakeasyBase {
  /**
   * The identitying number of the check.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "check_number" })
  checkNumber: string;
}

/**
 * A constant representing the object's type. For this resource it will always be `check_transfer`.
 */
export enum CheckTransferTypeEnum {
  CheckTransfer = "check_transfer",
}

/**
 * Check Transfers move funds from your Increase account by mailing a physical check.
 */
export class CheckTransfer extends SpeakeasyBase {
  /**
   * The identifier of the Account from which funds will be transferred.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account_id" })
  accountId: string;

  /**
   * The city of the check's destination.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address_city" })
  addressCity: string;

  /**
   * The street address of the check's destination.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address_line1" })
  addressLine1: string;

  /**
   * The second line of the address of the check's destination.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address_line2" })
  addressLine2: string;

  /**
   * The state of the check's destination.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address_state" })
  addressState: string;

  /**
   * The postal code of the check's destination.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address_zip" })
  addressZip: string;

  /**
   * The transfer amount in USD cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: CheckTransferCurrencyEnum;

  /**
   * After a check transfer is deposited, this will contain supplemental details.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deposit" })
  @Type(() => CheckTransferCheckTransferDeposit)
  deposit: CheckTransferCheckTransferDeposit;

  /**
   * The Check transfer's identifier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was mailed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mailed_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  mailedAt: Date;

  /**
   * The descriptor that will be printed on the memo field on the check.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;

  /**
   * The descriptor that will be printed on the letter included with the check.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "note" })
  note: string;

  /**
   * The name that will be printed on the check.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recipient_name" })
  recipientName: string;

  /**
   * The return address to be printed on the check.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "return_address" })
  @Type(() => CheckTransferReturnAddress)
  returnAddress: CheckTransferReturnAddress;

  /**
   * The lifecycle status of the transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: CheckTransferStatusEnum;

  /**
   * After a stop-payment is requested on the check, this will contain supplemental details.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stop_payment_request" })
  @Type(() => CheckTransferCheckTransferStopPaymentRequest)
  stopPaymentRequest: CheckTransferCheckTransferStopPaymentRequest;

  /**
   * After the transfer is submitted, this will contain supplemental details.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "submission" })
  @Type(() => CheckTransferCheckTransferSubmission)
  submission: CheckTransferCheckTransferSubmission;

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was submitted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "submitted_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  submittedAt: Date;

  /**
   * If the transfer was created from a template, this will be the template's ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "template_id" })
  templateId: string;

  /**
   * The ID for the transaction caused by the transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transaction_id" })
  transactionId: string;

  /**
   * A constant representing the object's type. For this resource it will always be `check_transfer`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: CheckTransferTypeEnum;
}
