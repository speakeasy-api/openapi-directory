/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Students {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Returns the contacts for a student
   */
  getContactsForStudent(
    req: operations.GetContactsForStudentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetContactsForStudentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetContactsForStudentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/students/{id}/contacts",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetContactsForStudentResponse =
        new operations.GetContactsForStudentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.studentContactsForStudentResponse = utils.objectToClass(
              httpRes?.data,
              shared.StudentContactsForStudentResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFound = utils.objectToClass(httpRes?.data, shared.NotFound);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the district for a student
   */
  getDistrictForStudent(
    req: operations.GetDistrictForStudentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDistrictForStudentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDistrictForStudentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/students/{id}/district",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDistrictForStudentResponse =
        new operations.GetDistrictForStudentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.districtResponse = utils.objectToClass(
              httpRes?.data,
              shared.DistrictResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFound = utils.objectToClass(httpRes?.data, shared.NotFound);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the primary school for a student
   */
  getSchoolForStudent(
    req: operations.GetSchoolForStudentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSchoolForStudentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSchoolForStudentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/students/{id}/school",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSchoolForStudentResponse =
        new operations.GetSchoolForStudentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.schoolResponse = utils.objectToClass(
              httpRes?.data,
              shared.SchoolResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFound = utils.objectToClass(httpRes?.data, shared.NotFound);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the sections for a student
   */
  getSectionsForStudent(
    req: operations.GetSectionsForStudentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSectionsForStudentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSectionsForStudentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/students/{id}/sections",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSectionsForStudentResponse =
        new operations.GetSectionsForStudentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sectionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.SectionsResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFound = utils.objectToClass(httpRes?.data, shared.NotFound);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a specific student
   */
  getStudent(
    req: operations.GetStudentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetStudentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetStudentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/students/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetStudentResponse =
        new operations.GetStudentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.studentResponse = utils.objectToClass(
              httpRes?.data,
              shared.StudentResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFound = utils.objectToClass(httpRes?.data, shared.NotFound);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of students
   */
  getStudents(
    req: operations.GetStudentsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetStudentsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetStudentsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/students";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetStudentsResponse =
        new operations.GetStudentsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.studentsResponse = utils.objectToClass(
              httpRes?.data,
              shared.StudentsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the teachers for a student
   */
  getTeachersForStudent(
    req: operations.GetTeachersForStudentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeachersForStudentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeachersForStudentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/students/{id}/teachers",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeachersForStudentResponse =
        new operations.GetTeachersForStudentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teachersResponse = utils.objectToClass(
              httpRes?.data,
              shared.TeachersResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFound = utils.objectToClass(httpRes?.data, shared.NotFound);
          }
          break;
      }

      return res;
    });
  }
}
