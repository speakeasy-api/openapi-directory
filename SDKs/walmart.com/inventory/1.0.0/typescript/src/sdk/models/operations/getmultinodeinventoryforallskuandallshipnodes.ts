/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetMultiNodeInventoryForAllSkuAndAllShipNodesRequest extends SpeakeasyBase {
  /**
   * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=WM_CONSUMER.CHANNEL.TYPE",
  })
  wmConsumerChannelType?: string;

  /**
   * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=WM_QOS.CORRELATION_ID",
  })
  wmQosCorrelationId: string;

  /**
   * The access token retrieved in the Token API call
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=WM_SEC.ACCESS_TOKEN",
  })
  wmSecAccessToken: string;

  /**
   * Walmart Service Name
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=WM_SVC.NAME",
  })
  wmSvcName: string;

  /**
   * The number of items returned. Cannot be more than 50.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: string;

  /**
   * String returned from initial API call to indicate pagination. Specify nextCursor value to retrieve the next 50 items.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=nextCursor",
  })
  nextCursor?: string;
}

/**
 * The unit of measurement. Example: 'EACH'
 */
export enum GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesAvailToSellQtyUnitEnum {
  Each = "EACH",
}

/**
 * Quantity of an item that is available to be allocated to orders
 */
export class GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesAvailToSellQty extends SpeakeasyBase {
  /**
   * Inventory Count
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * The unit of measurement. Example: 'EACH'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "unit" })
  unit: GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesAvailToSellQtyUnitEnum;
}

/**
 * The unit of measurement. Example: 'EACH'
 */
export enum GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesInputQtyUnitEnum {
  Each = "EACH",
}

/**
 * Quantity of an item that is input by the seller
 */
export class GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesInputQty extends SpeakeasyBase {
  /**
   * Inventory Count
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * The unit of measurement. Example: 'EACH'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "unit" })
  unit: GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesInputQtyUnitEnum;
}

/**
 * The unit of measurement. Example: 'EACH'
 */
export enum GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesReservedQtyUnitEnum {
  Each = "EACH",
}

/**
 * Quantity that has been ordered by the customers but not yet shipped
 */
export class GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesReservedQty extends SpeakeasyBase {
  /**
   * Inventory Count
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * The unit of measurement. Example: 'EACH'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "unit" })
  unit: GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesReservedQtyUnitEnum;
}

export class GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodes extends SpeakeasyBase {
  /**
   * Quantity of an item that is available to be allocated to orders
   */
  @SpeakeasyMetadata()
  @Expose({ name: "availToSellQty" })
  @Type(
    () =>
      GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesAvailToSellQty
  )
  availToSellQty?: GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesAvailToSellQty;

  /**
   * Quantity of an item that is input by the seller
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inputQty" })
  @Type(
    () =>
      GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesInputQty
  )
  inputQty?: GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesInputQty;

  /**
   * Quantity that has been ordered by the customers but not yet shipped
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reservedQty" })
  @Type(
    () =>
      GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesReservedQty
  )
  reservedQty?: GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesReservedQty;

  /**
   * ShipNode Id of the ship node for which the inventory is requested
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shipNode" })
  shipNode?: string;
}

export class GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventories extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType:
      GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodes,
  })
  @Expose({ name: "nodes" })
  @Type(
    () =>
      GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodes
  )
  nodes?: GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodes[];

  /**
   * An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sku" })
  sku?: string;
}

export class GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElements extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType:
      GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventories,
  })
  @Expose({ name: "inventories" })
  @Type(
    () =>
      GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventories
  )
  inventories?: GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventories[];
}

export class GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONMeta extends SpeakeasyBase {
  /**
   * Used for pagination to fetch the next set of items.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextCursor" })
  nextCursor?: string;

  /**
   * Total number of Skus of the Seller. Example: '235'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalCount" })
  totalCount?: number;
}

/**
 * Successful Operation
 */
export class GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "elements" })
  @Type(
    () =>
      GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElements
  )
  elements?: GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElements;

  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(
    () => GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONMeta
  )
  meta?: GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONMeta;
}

export class GetMultiNodeInventoryForAllSkuAndAllShipNodesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful Operation
   */
  @SpeakeasyMetadata()
  getMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONObject?: GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSON;
}
