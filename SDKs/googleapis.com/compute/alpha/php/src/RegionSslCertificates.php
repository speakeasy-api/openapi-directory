<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RegionSslCertificates 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes the specified SslCertificate resource in the region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesDeleteResponse
     */
	public function computeRegionSslCertificatesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/sslCertificates/{sslCertificate}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified SslCertificate resource in the specified region. Get a list of available SSL certificates by making a list() request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesGetResponse
     */
	public function computeRegionSslCertificatesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/sslCertificates/{sslCertificate}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sslCertificate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SslCertificate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a SslCertificate resource in the specified project and region using the data included in the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesInsertResponse
     */
	public function computeRegionSslCertificatesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/sslCertificates', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sslCertificate", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of SslCertificate resources available to the specified project in the specified region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesListResponse
     */
	public function computeRegionSslCertificatesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/sslCertificates', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sslCertificateList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SslCertificateList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource and region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesTestIamPermissionsResponse
     */
	public function computeRegionSslCertificatesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/sslCertificates/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslCertificatesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}