/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * EnterpriseCrmFrontendsEventbusProtoEventExecutionDetails - Contains the details of the execution info of this event: this includes the tasks execution details plus the event execution statistics. Next available id: 10
 */
public class EnterpriseCrmFrontendsEventbusProtoEventExecutionDetails {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventAttemptStats")
    public EnterpriseCrmEventbusProtoEventExecutionDetailsEventAttemptStats[] eventAttemptStats;
    public EnterpriseCrmFrontendsEventbusProtoEventExecutionDetails withEventAttemptStats(EnterpriseCrmEventbusProtoEventExecutionDetailsEventAttemptStats[] eventAttemptStats) {
        this.eventAttemptStats = eventAttemptStats;
        return this;
    }
    
    /**
     * After snapshot migration, this field will no longer be populated, but old execution snapshots will still be accessible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventExecutionSnapshot")
    public EnterpriseCrmFrontendsEventbusProtoEventExecutionSnapshot[] eventExecutionSnapshot;
    public EnterpriseCrmFrontendsEventbusProtoEventExecutionDetails withEventExecutionSnapshot(EnterpriseCrmFrontendsEventbusProtoEventExecutionSnapshot[] eventExecutionSnapshot) {
        this.eventExecutionSnapshot = eventExecutionSnapshot;
        return this;
    }
    
    /**
     * The execution state of this event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventExecutionState")
    public EnterpriseCrmFrontendsEventbusProtoEventExecutionDetailsEventExecutionStateEnum eventExecutionState;
    public EnterpriseCrmFrontendsEventbusProtoEventExecutionDetails withEventExecutionState(EnterpriseCrmFrontendsEventbusProtoEventExecutionDetailsEventExecutionStateEnum eventExecutionState) {
        this.eventExecutionState = eventExecutionState;
        return this;
    }
    
    /**
     * Indicates the number of times the execution has restarted from the beginning.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventRetriesFromBeginningCount")
    public Integer eventRetriesFromBeginningCount;
    public EnterpriseCrmFrontendsEventbusProtoEventExecutionDetails withEventRetriesFromBeginningCount(Integer eventRetriesFromBeginningCount) {
        this.eventRetriesFromBeginningCount = eventRetriesFromBeginningCount;
        return this;
    }
    
    /**
     * The log file path (aka. cns address) for this event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logFilePath")
    public String logFilePath;
    public EnterpriseCrmFrontendsEventbusProtoEventExecutionDetails withLogFilePath(String logFilePath) {
        this.logFilePath = logFilePath;
        return this;
    }
    
    /**
     * The network address (aka. bns address) that indicates where the event executor is running.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkAddress")
    public String networkAddress;
    public EnterpriseCrmFrontendsEventbusProtoEventExecutionDetails withNetworkAddress(String networkAddress) {
        this.networkAddress = networkAddress;
        return this;
    }
    
    /**
     * Next scheduled execution time in case the execution status was RETRY_ON_HOLD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nextExecutionTime")
    public String nextExecutionTime;
    public EnterpriseCrmFrontendsEventbusProtoEventExecutionDetails withNextExecutionTime(String nextExecutionTime) {
        this.nextExecutionTime = nextExecutionTime;
        return this;
    }
    
    /**
     * Used internally and shouldn't be exposed to users. A counter for the cron job to record how many times this event is in in_process state but don't have a lock consecutively/
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ryeLockUnheldCount")
    public Integer ryeLockUnheldCount;
    public EnterpriseCrmFrontendsEventbusProtoEventExecutionDetails withRyeLockUnheldCount(Integer ryeLockUnheldCount) {
        this.ryeLockUnheldCount = ryeLockUnheldCount;
        return this;
    }
    
}
