"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import apikeyout as shared_apikeyout
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class APICounterV2Out:
    r"""Detailed usage as reported by the deduplicating API counter."""
    
    api_key: Optional[shared_apikeyout.APIKeyOut] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apiKey'), 'exclude': lambda f: f is None }})  
    api_service: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apiService'), 'exclude': lambda f: f is None }})
    r"""The apiService corresponds to the classifier name."""  
    created_date_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdDateTime'), 'exclude': lambda f: f is None }})
    r"""The create datetime of the counter."""  
    host_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hostAddress'), 'exclude': lambda f: f is None }})
    r"""The processing hostAddress."""  
    last_flushed_date_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastFlushedDateTime'), 'exclude': lambda f: f is None }})
    r"""The flush datetime of the counter."""  
    last_used_date_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUsedDateTime'), 'exclude': lambda f: f is None }})
    r"""The last usage datetime of the counter."""  
    service_features_usage: Optional[dict[str, int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceFeaturesUsage'), 'exclude': lambda f: f is None }})
    r"""Usage of special features, such as Chinese, Japanese."""  
    total_usage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalUsage'), 'exclude': lambda f: f is None }})
    r"""The usage of the counter."""  
    