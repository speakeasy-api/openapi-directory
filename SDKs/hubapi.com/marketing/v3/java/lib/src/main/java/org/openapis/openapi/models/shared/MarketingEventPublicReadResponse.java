/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * MarketingEventPublicReadResponse - successful operation
 */
public class MarketingEventPublicReadResponse {
    /**
     * The number of HubSpot contacts that attended this marketing event.
     */
    @JsonProperty("attendees")
    public Integer attendees;
    public MarketingEventPublicReadResponse withAttendees(Integer attendees) {
        this.attendees = attendees;
        return this;
    }
    
    /**
     * The number of HubSpot contacts that registered for this marketing event, but later cancelled their registration.
     */
    @JsonProperty("cancellations")
    public Integer cancellations;
    public MarketingEventPublicReadResponse withCancellations(Integer cancellations) {
        this.cancellations = cancellations;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdAt")
    public OffsetDateTime createdAt;
    public MarketingEventPublicReadResponse withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account's definition of the MarketingEvent Object. If they don't they will be filtered out and not set.
     * In order to do this you'll need to create a new PropertyGroup on the HubSpot account's MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customProperties")
    public PropertyValue[] customProperties;
    public MarketingEventPublicReadResponse withCustomProperties(PropertyValue[] customProperties) {
        this.customProperties = customProperties;
        return this;
    }
    
    /**
     * The end date and time of the marketing event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("endDateTime")
    public OffsetDateTime endDateTime;
    public MarketingEventPublicReadResponse withEndDateTime(OffsetDateTime endDateTime) {
        this.endDateTime = endDateTime;
        return this;
    }
    
    /**
     * Indicates if the marketing event has been cancelled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventCancelled")
    public Boolean eventCancelled;
    public MarketingEventPublicReadResponse withEventCancelled(Boolean eventCancelled) {
        this.eventCancelled = eventCancelled;
        return this;
    }
    
    /**
     * The description of the marketing event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventDescription")
    public String eventDescription;
    public MarketingEventPublicReadResponse withEventDescription(String eventDescription) {
        this.eventDescription = eventDescription;
        return this;
    }
    
    /**
     * The name of the marketing event.
     */
    @JsonProperty("eventName")
    public String eventName;
    public MarketingEventPublicReadResponse withEventName(String eventName) {
        this.eventName = eventName;
        return this;
    }
    
    /**
     * The name of the organizer of the marketing event.
     */
    @JsonProperty("eventOrganizer")
    public String eventOrganizer;
    public MarketingEventPublicReadResponse withEventOrganizer(String eventOrganizer) {
        this.eventOrganizer = eventOrganizer;
        return this;
    }
    
    /**
     * The type of the marketing event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventType")
    public String eventType;
    public MarketingEventPublicReadResponse withEventType(String eventType) {
        this.eventType = eventType;
        return this;
    }
    
    /**
     * A URL in the external event application where the marketing event can be managed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventUrl")
    public String eventUrl;
    public MarketingEventPublicReadResponse withEventUrl(String eventUrl) {
        this.eventUrl = eventUrl;
        return this;
    }
    
    /**
     * The id of the marketing event in the external event application.
     */
    @JsonProperty("externalEventId")
    public String externalEventId;
    public MarketingEventPublicReadResponse withExternalEventId(String externalEventId) {
        this.externalEventId = externalEventId;
        return this;
    }
    
    @JsonProperty("id")
    public String id;
    public MarketingEventPublicReadResponse withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The number of HubSpot contacts that registered for this marketing event, but did not attend. This field only had a value when the event is over.
     */
    @JsonProperty("noShows")
    public Integer noShows;
    public MarketingEventPublicReadResponse withNoShows(Integer noShows) {
        this.noShows = noShows;
        return this;
    }
    
    /**
     * The number of HubSpot contacts that registered for this marketing event.
     */
    @JsonProperty("registrants")
    public Integer registrants;
    public MarketingEventPublicReadResponse withRegistrants(Integer registrants) {
        this.registrants = registrants;
        return this;
    }
    
    /**
     * The start date and time of the marketing event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("startDateTime")
    public OffsetDateTime startDateTime;
    public MarketingEventPublicReadResponse withStartDateTime(OffsetDateTime startDateTime) {
        this.startDateTime = startDateTime;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updatedAt")
    public OffsetDateTime updatedAt;
    public MarketingEventPublicReadResponse withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
}
