// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDeactivateTypeActionEnum
type GETDeactivateTypeActionEnum string

const (
	GETDeactivateTypeActionEnumDeactivateType GETDeactivateTypeActionEnum = "DeactivateType"
)

func (e *GETDeactivateTypeActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DeactivateType":
		*e = GETDeactivateTypeActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeactivateTypeActionEnum: %s", s)
	}
}

// GETDeactivateTypeTypeEnum - <p>The extension type.</p> <p>Conditional: You must specify either <code>Arn</code>, or <code>TypeName</code> and <code>Type</code>.</p>
type GETDeactivateTypeTypeEnum string

const (
	GETDeactivateTypeTypeEnumResource GETDeactivateTypeTypeEnum = "RESOURCE"
	GETDeactivateTypeTypeEnumModule   GETDeactivateTypeTypeEnum = "MODULE"
	GETDeactivateTypeTypeEnumHook     GETDeactivateTypeTypeEnum = "HOOK"
)

func (e *GETDeactivateTypeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "RESOURCE":
		fallthrough
	case "MODULE":
		fallthrough
	case "HOOK":
		*e = GETDeactivateTypeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeactivateTypeTypeEnum: %s", s)
	}
}

// GETDeactivateTypeVersionEnum
type GETDeactivateTypeVersionEnum string

const (
	GETDeactivateTypeVersionEnumTwoThousandAndTen0515 GETDeactivateTypeVersionEnum = "2010-05-15"
)

func (e *GETDeactivateTypeVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2010-05-15":
		*e = GETDeactivateTypeVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeactivateTypeVersionEnum: %s", s)
	}
}

type GETDeactivateTypeRequest struct {
	Action GETDeactivateTypeActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The Amazon Resource Name (ARN) for the extension, in this account and region.</p> <p>Conditional: You must specify either <code>Arn</code>, or <code>TypeName</code> and <code>Type</code>.</p>
	Arn *string `queryParam:"style=form,explode=true,name=Arn"`
	// <p>The extension type.</p> <p>Conditional: You must specify either <code>Arn</code>, or <code>TypeName</code> and <code>Type</code>.</p>
	Type *GETDeactivateTypeTypeEnum `queryParam:"style=form,explode=true,name=Type"`
	// <p>The type name of the extension, in this account and region. If you specified a type name alias when enabling the extension, use the type name alias.</p> <p>Conditional: You must specify either <code>Arn</code>, or <code>TypeName</code> and <code>Type</code>.</p>
	TypeName          *string                      `queryParam:"style=form,explode=true,name=TypeName"`
	Version           GETDeactivateTypeVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDeactivateTypeResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
