// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ReleasesListLatestSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type ReleasesListLatestRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

// ReleasesListLatest200ApplicationJSONBuild - Build information for the release
type ReleasesListLatest200ApplicationJSONBuild struct {
	// The branch name of the build producing the release
	BranchName *string `json:"branch_name,omitempty"`
	// The commit hash of the build producing the release
	CommitHash *string `json:"commit_hash,omitempty"`
	// The commit message of the build producing the release
	CommitMessage *string `json:"commit_message,omitempty"`
}

// ReleasesListLatest200ApplicationJSONDestinationTypeEnum - OBSOLETE. Will be removed in next version. The destination type.<br>
// <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>
// <b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>
type ReleasesListLatest200ApplicationJSONDestinationTypeEnum string

const (
	ReleasesListLatest200ApplicationJSONDestinationTypeEnumGroup  ReleasesListLatest200ApplicationJSONDestinationTypeEnum = "group"
	ReleasesListLatest200ApplicationJSONDestinationTypeEnumStore  ReleasesListLatest200ApplicationJSONDestinationTypeEnum = "store"
	ReleasesListLatest200ApplicationJSONDestinationTypeEnumTester ReleasesListLatest200ApplicationJSONDestinationTypeEnum = "tester"
)

func (e ReleasesListLatest200ApplicationJSONDestinationTypeEnum) ToPointer() *ReleasesListLatest200ApplicationJSONDestinationTypeEnum {
	return &e
}

func (e *ReleasesListLatest200ApplicationJSONDestinationTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "group":
		fallthrough
	case "store":
		fallthrough
	case "tester":
		*e = ReleasesListLatest200ApplicationJSONDestinationTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesListLatest200ApplicationJSONDestinationTypeEnum: %v", v)
	}
}

// ReleasesListLatest200ApplicationJSONDestinationsDestinationTypeEnum - Destination can be either store or group.
type ReleasesListLatest200ApplicationJSONDestinationsDestinationTypeEnum string

const (
	ReleasesListLatest200ApplicationJSONDestinationsDestinationTypeEnumGroup  ReleasesListLatest200ApplicationJSONDestinationsDestinationTypeEnum = "group"
	ReleasesListLatest200ApplicationJSONDestinationsDestinationTypeEnumStore  ReleasesListLatest200ApplicationJSONDestinationsDestinationTypeEnum = "store"
	ReleasesListLatest200ApplicationJSONDestinationsDestinationTypeEnumTester ReleasesListLatest200ApplicationJSONDestinationsDestinationTypeEnum = "tester"
)

func (e ReleasesListLatest200ApplicationJSONDestinationsDestinationTypeEnum) ToPointer() *ReleasesListLatest200ApplicationJSONDestinationsDestinationTypeEnum {
	return &e
}

func (e *ReleasesListLatest200ApplicationJSONDestinationsDestinationTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "group":
		fallthrough
	case "store":
		fallthrough
	case "tester":
		*e = ReleasesListLatest200ApplicationJSONDestinationsDestinationTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesListLatest200ApplicationJSONDestinationsDestinationTypeEnum: %v", v)
	}
}

// ReleasesListLatest200ApplicationJSONDestinationsTypeEnum - type of the distribution store currently stores type can be intune, googleplay or windows.
type ReleasesListLatest200ApplicationJSONDestinationsTypeEnum string

const (
	ReleasesListLatest200ApplicationJSONDestinationsTypeEnumIntune     ReleasesListLatest200ApplicationJSONDestinationsTypeEnum = "intune"
	ReleasesListLatest200ApplicationJSONDestinationsTypeEnumGoogleplay ReleasesListLatest200ApplicationJSONDestinationsTypeEnum = "googleplay"
	ReleasesListLatest200ApplicationJSONDestinationsTypeEnumApple      ReleasesListLatest200ApplicationJSONDestinationsTypeEnum = "apple"
	ReleasesListLatest200ApplicationJSONDestinationsTypeEnumNone       ReleasesListLatest200ApplicationJSONDestinationsTypeEnum = "none"
)

func (e ReleasesListLatest200ApplicationJSONDestinationsTypeEnum) ToPointer() *ReleasesListLatest200ApplicationJSONDestinationsTypeEnum {
	return &e
}

func (e *ReleasesListLatest200ApplicationJSONDestinationsTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intune":
		fallthrough
	case "googleplay":
		fallthrough
	case "apple":
		fallthrough
	case "none":
		*e = ReleasesListLatest200ApplicationJSONDestinationsTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesListLatest200ApplicationJSONDestinationsTypeEnum: %v", v)
	}
}

// ReleasesListLatest200ApplicationJSONDestinations - A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.
type ReleasesListLatest200ApplicationJSONDestinations struct {
	// Destination can be either store or group.
	DestinationType *ReleasesListLatest200ApplicationJSONDestinationsDestinationTypeEnum `json:"destination_type,omitempty"`
	// Display name for the group or tester
	DisplayName *string `json:"display_name,omitempty"`
	// ID identifying a unique distribution store.
	ID string `json:"id"`
	// Is the containing release the latest one in this distribution store.
	IsLatest *bool `json:"is_latest,omitempty"`
	// A name identifying a unique distribution store.
	Name *string `json:"name,omitempty"`
	// publishing status of the release in the store.
	PublishingStatus *string `json:"publishing_status,omitempty"`
	// type of the distribution store currently stores type can be intune, googleplay or windows.
	Type *ReleasesListLatest200ApplicationJSONDestinationsTypeEnum `json:"type,omitempty"`
}

type ReleasesListLatest200ApplicationJSONDistributionGroups struct {
	// ID identifying a unique distribution group.
	ID string `json:"id"`
	// Is the containing release the latest one in this distribution group.
	IsLatest *bool `json:"is_latest,omitempty"`
	// A name identifying a unique distribution group.
	Name *string `json:"name,omitempty"`
}

// ReleasesListLatest200ApplicationJSONDistributionStoresTypeEnum - type of the distribution store currently stores type can be intune, googleplay or windows.
type ReleasesListLatest200ApplicationJSONDistributionStoresTypeEnum string

const (
	ReleasesListLatest200ApplicationJSONDistributionStoresTypeEnumIntune     ReleasesListLatest200ApplicationJSONDistributionStoresTypeEnum = "intune"
	ReleasesListLatest200ApplicationJSONDistributionStoresTypeEnumGoogleplay ReleasesListLatest200ApplicationJSONDistributionStoresTypeEnum = "googleplay"
	ReleasesListLatest200ApplicationJSONDistributionStoresTypeEnumApple      ReleasesListLatest200ApplicationJSONDistributionStoresTypeEnum = "apple"
	ReleasesListLatest200ApplicationJSONDistributionStoresTypeEnumNone       ReleasesListLatest200ApplicationJSONDistributionStoresTypeEnum = "none"
)

func (e ReleasesListLatest200ApplicationJSONDistributionStoresTypeEnum) ToPointer() *ReleasesListLatest200ApplicationJSONDistributionStoresTypeEnum {
	return &e
}

func (e *ReleasesListLatest200ApplicationJSONDistributionStoresTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intune":
		fallthrough
	case "googleplay":
		fallthrough
	case "apple":
		fallthrough
	case "none":
		*e = ReleasesListLatest200ApplicationJSONDistributionStoresTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesListLatest200ApplicationJSONDistributionStoresTypeEnum: %v", v)
	}
}

type ReleasesListLatest200ApplicationJSONDistributionStores struct {
	// ID identifying a unique distribution store.
	ID string `json:"id"`
	// Is the containing release the latest one in this distribution store.
	IsLatest *bool `json:"is_latest,omitempty"`
	// A name identifying a unique distribution store.
	Name *string `json:"name,omitempty"`
	// publishing status of the release in the store.
	PublishingStatus *string `json:"publishing_status,omitempty"`
	// type of the distribution store currently stores type can be intune, googleplay or windows.
	Type *ReleasesListLatest200ApplicationJSONDistributionStoresTypeEnum `json:"type,omitempty"`
}

// ReleasesListLatest200ApplicationJSONOriginEnum - The release's origin
type ReleasesListLatest200ApplicationJSONOriginEnum string

const (
	ReleasesListLatest200ApplicationJSONOriginEnumHockeyapp ReleasesListLatest200ApplicationJSONOriginEnum = "hockeyapp"
	ReleasesListLatest200ApplicationJSONOriginEnumAppcenter ReleasesListLatest200ApplicationJSONOriginEnum = "appcenter"
)

func (e ReleasesListLatest200ApplicationJSONOriginEnum) ToPointer() *ReleasesListLatest200ApplicationJSONOriginEnum {
	return &e
}

func (e *ReleasesListLatest200ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "hockeyapp":
		fallthrough
	case "appcenter":
		*e = ReleasesListLatest200ApplicationJSONOriginEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesListLatest200ApplicationJSONOriginEnum: %v", v)
	}
}

// ReleasesListLatest200ApplicationJSON - Basic information on a release
type ReleasesListLatest200ApplicationJSON struct {
	// Build information for the release
	//
	Build *ReleasesListLatest200ApplicationJSONBuild `json:"build,omitempty"`
	// OBSOLETE. Will be removed in next version. The destination type.<br>
	// <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>
	// <b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>
	//
	DestinationType *ReleasesListLatest200ApplicationJSONDestinationTypeEnum `json:"destination_type,omitempty"`
	// A list of distribution groups or stores.
	Destinations []ReleasesListLatest200ApplicationJSONDestinations `json:"destinations,omitempty"`
	// OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.
	DistributionGroups []ReleasesListLatest200ApplicationJSONDistributionGroups `json:"distribution_groups,omitempty"`
	// OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.
	DistributionStores []ReleasesListLatest200ApplicationJSONDistributionStores `json:"distribution_stores,omitempty"`
	// This value determines the whether a release currently is enabled or disabled.
	Enabled bool `json:"enabled"`
	// The file extension of the main (user-uploaded) package file.
	FileExtension *string `json:"file_extension,omitempty"`
	// ID identifying this unique release.
	ID int64 `json:"id"`
	// This value determines if a release is external or not.
	IsExternalBuild *bool `json:"is_external_build,omitempty"`
	// The release's origin
	Origin *ReleasesListLatest200ApplicationJSONOriginEnum `json:"origin,omitempty"`
	// The release's short version.<br>
	// For iOS: CFBundleShortVersionString from info.plist.<br>
	// For Android: android:versionName from AppManifest.xml.
	//
	ShortVersion string `json:"short_version"`
	// UTC time in ISO 8601 format of the uploaded time.
	UploadedAt string `json:"uploaded_at"`
	// The release's version.<br>
	// For iOS: CFBundleVersion from info.plist.<br>
	// For Android: android:versionCode from AppManifest.xml.
	//
	Version string `json:"version"`
}

type ReleasesListLatestResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	ReleasesListLatest200ApplicationJSONObjects []ReleasesListLatest200ApplicationJSON
}
