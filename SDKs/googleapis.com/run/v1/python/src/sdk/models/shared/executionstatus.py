"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudrunv1condition as shared_googlecloudrunv1condition
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExecutionStatus:
    r"""ExecutionStatus represents the current state of an Execution."""
    
    cancelled_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cancelledCount'), 'exclude': lambda f: f is None }})
    r"""Optional. The number of tasks which reached phase Cancelled."""  
    completion_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completionTime'), 'exclude': lambda f: f is None }})
    r"""Optional. Represents the time that the execution was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional"""  
    conditions: Optional[list[shared_googlecloudrunv1condition.GoogleCloudRunV1Condition]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conditions'), 'exclude': lambda f: f is None }})
    r"""Optional. Conditions communicate information about ongoing/complete reconciliation processes that bring the \\"spec\\" inline with the observed state of the world. Execution-specific conditions include: * `ResourcesAvailable`: `True` when underlying resources have been provisioned. * `Started`: `True` when the execution has started to execute. * `Completed`: `True` when the execution has succeeded. `False` when the execution has failed."""  
    failed_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failedCount'), 'exclude': lambda f: f is None }})
    r"""Optional. The number of tasks which reached phase Failed."""  
    log_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logUri'), 'exclude': lambda f: f is None }})
    r"""Optional. URI where logs for this execution can be found in Cloud Console."""  
    observed_generation: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('observedGeneration'), 'exclude': lambda f: f is None }})
    r"""Optional. The 'generation' of the execution that was last processed by the controller."""  
    retried_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retriedCount'), 'exclude': lambda f: f is None }})
    r"""Optional. The number of tasks which have retried at least once."""  
    running_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runningCount'), 'exclude': lambda f: f is None }})
    r"""Optional. The number of actively running tasks."""  
    start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'exclude': lambda f: f is None }})
    r"""Optional. Represents the time that the execution started to run. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC."""  
    succeeded_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('succeededCount'), 'exclude': lambda f: f is None }})
    r"""Optional. The number of tasks which reached phase Succeeded."""  
    