/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GETModifySubnetAttributeRequest {
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=Action")
    public GETModifySubnetAttributeActionEnum action;

    public GETModifySubnetAttributeRequest withAction(GETModifySubnetAttributeActionEnum action) {
        this.action = action;
        return this;
    }
    
    /**
     * &lt;p&gt;Specify &lt;code&gt;true&lt;/code&gt; to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. This includes a network interface that's created when launching an instance into the subnet (the instance therefore receives an IPv6 address). &lt;/p&gt; &lt;p&gt;If you enable the IPv6 addressing feature for your subnet, your network interface or instance only receives an IPv6 address if it's created using version &lt;code&gt;2016-11-15&lt;/code&gt; or later of the Amazon EC2 API.&lt;/p&gt;
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=AssignIpv6AddressOnCreation")
    public GETModifySubnetAttributeAssignIpv6AddressOnCreation assignIpv6AddressOnCreation;

    public GETModifySubnetAttributeRequest withAssignIpv6AddressOnCreation(GETModifySubnetAttributeAssignIpv6AddressOnCreation assignIpv6AddressOnCreation) {
        this.assignIpv6AddressOnCreation = assignIpv6AddressOnCreation;
        return this;
    }
    
    /**
     * &lt;p&gt;The customer-owned IPv4 address pool associated with the subnet.&lt;/p&gt; &lt;p&gt;You must set this value when you specify &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;MapCustomerOwnedIpOnLaunch&lt;/code&gt;.&lt;/p&gt;
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=CustomerOwnedIpv4Pool")
    public String customerOwnedIpv4Pool;

    public GETModifySubnetAttributeRequest withCustomerOwnedIpv4Pool(String customerOwnedIpv4Pool) {
        this.customerOwnedIpv4Pool = customerOwnedIpv4Pool;
        return this;
    }
    
    /**
     *  Specify &lt;code&gt;true&lt;/code&gt; to indicate that local network interfaces at the current position should be disabled. 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=DisableLniAtDeviceIndex")
    public GETModifySubnetAttributeDisableLniAtDeviceIndex disableLniAtDeviceIndex;

    public GETModifySubnetAttributeRequest withDisableLniAtDeviceIndex(GETModifySubnetAttributeDisableLniAtDeviceIndex disableLniAtDeviceIndex) {
        this.disableLniAtDeviceIndex = disableLniAtDeviceIndex;
        return this;
    }
    
    /**
     * Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=EnableDns64")
    public GETModifySubnetAttributeEnableDns64 enableDns64;

    public GETModifySubnetAttributeRequest withEnableDns64(GETModifySubnetAttributeEnableDns64 enableDns64) {
        this.enableDns64 = enableDns64;
        return this;
    }
    
    /**
     *  Indicates the device position for local network interfaces in this subnet. For example, &lt;code&gt;1&lt;/code&gt; indicates local network interfaces in this subnet are the secondary network interface (eth1). A local network interface cannot be the primary network interface (eth0). 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=EnableLniAtDeviceIndex")
    public Long enableLniAtDeviceIndex;

    public GETModifySubnetAttributeRequest withEnableLniAtDeviceIndex(Long enableLniAtDeviceIndex) {
        this.enableLniAtDeviceIndex = enableLniAtDeviceIndex;
        return this;
    }
    
    /**
     * Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=EnableResourceNameDnsAAAARecordOnLaunch")
    public GETModifySubnetAttributeEnableResourceNameDNSAaaaRecordOnLaunch enableResourceNameDnsAAAARecordOnLaunch;

    public GETModifySubnetAttributeRequest withEnableResourceNameDnsAAAARecordOnLaunch(GETModifySubnetAttributeEnableResourceNameDNSAaaaRecordOnLaunch enableResourceNameDnsAAAARecordOnLaunch) {
        this.enableResourceNameDnsAAAARecordOnLaunch = enableResourceNameDnsAAAARecordOnLaunch;
        return this;
    }
    
    /**
     * Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=EnableResourceNameDnsARecordOnLaunch")
    public GETModifySubnetAttributeEnableResourceNameDNSARecordOnLaunch enableResourceNameDnsARecordOnLaunch;

    public GETModifySubnetAttributeRequest withEnableResourceNameDnsARecordOnLaunch(GETModifySubnetAttributeEnableResourceNameDNSARecordOnLaunch enableResourceNameDnsARecordOnLaunch) {
        this.enableResourceNameDnsARecordOnLaunch = enableResourceNameDnsARecordOnLaunch;
        return this;
    }
    
    /**
     * &lt;p&gt;Specify &lt;code&gt;true&lt;/code&gt; to indicate that network interfaces attached to instances created in the specified subnet should be assigned a customer-owned IPv4 address.&lt;/p&gt; &lt;p&gt;When this value is &lt;code&gt;true&lt;/code&gt;, you must specify the customer-owned IP pool using &lt;code&gt;CustomerOwnedIpv4Pool&lt;/code&gt;.&lt;/p&gt;
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=MapCustomerOwnedIpOnLaunch")
    public GETModifySubnetAttributeMapCustomerOwnedIPOnLaunch mapCustomerOwnedIpOnLaunch;

    public GETModifySubnetAttributeRequest withMapCustomerOwnedIpOnLaunch(GETModifySubnetAttributeMapCustomerOwnedIPOnLaunch mapCustomerOwnedIpOnLaunch) {
        this.mapCustomerOwnedIpOnLaunch = mapCustomerOwnedIpOnLaunch;
        return this;
    }
    
    /**
     * Specify &lt;code&gt;true&lt;/code&gt; to indicate that network interfaces attached to instances created in the specified subnet should be assigned a public IPv4 address.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=MapPublicIpOnLaunch")
    public GETModifySubnetAttributeMapPublicIPOnLaunch mapPublicIpOnLaunch;

    public GETModifySubnetAttributeRequest withMapPublicIpOnLaunch(GETModifySubnetAttributeMapPublicIPOnLaunch mapPublicIpOnLaunch) {
        this.mapPublicIpOnLaunch = mapPublicIpOnLaunch;
        return this;
    }
    
    /**
     * The type of hostname to assign to instances in the subnet at launch. For IPv4-only and dual-stack (IPv4 and IPv6) subnets, an instance DNS name can be based on the instance IPv4 address (ip-name) or the instance ID (resource-name). For IPv6 only subnets, an instance DNS name must be based on the instance ID (resource-name).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=PrivateDnsHostnameTypeOnLaunch")
    public GETModifySubnetAttributePrivateDNSHostnameTypeOnLaunchEnum privateDnsHostnameTypeOnLaunch;

    public GETModifySubnetAttributeRequest withPrivateDnsHostnameTypeOnLaunch(GETModifySubnetAttributePrivateDNSHostnameTypeOnLaunchEnum privateDnsHostnameTypeOnLaunch) {
        this.privateDnsHostnameTypeOnLaunch = privateDnsHostnameTypeOnLaunch;
        return this;
    }
    
    /**
     * The ID of the subnet.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=SubnetId")
    public String subnetId;

    public GETModifySubnetAttributeRequest withSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }
    
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=Version")
    public GETModifySubnetAttributeVersionEnum version;

    public GETModifySubnetAttributeRequest withVersion(GETModifySubnetAttributeVersionEnum version) {
        this.version = version;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Algorithm")
    public String xAmzAlgorithm;

    public GETModifySubnetAttributeRequest withXAmzAlgorithm(String xAmzAlgorithm) {
        this.xAmzAlgorithm = xAmzAlgorithm;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Content-Sha256")
    public String xAmzContentSha256;

    public GETModifySubnetAttributeRequest withXAmzContentSha256(String xAmzContentSha256) {
        this.xAmzContentSha256 = xAmzContentSha256;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Credential")
    public String xAmzCredential;

    public GETModifySubnetAttributeRequest withXAmzCredential(String xAmzCredential) {
        this.xAmzCredential = xAmzCredential;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Date")
    public String xAmzDate;

    public GETModifySubnetAttributeRequest withXAmzDate(String xAmzDate) {
        this.xAmzDate = xAmzDate;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Security-Token")
    public String xAmzSecurityToken;

    public GETModifySubnetAttributeRequest withXAmzSecurityToken(String xAmzSecurityToken) {
        this.xAmzSecurityToken = xAmzSecurityToken;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Signature")
    public String xAmzSignature;

    public GETModifySubnetAttributeRequest withXAmzSignature(String xAmzSignature) {
        this.xAmzSignature = xAmzSignature;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-SignedHeaders")
    public String xAmzSignedHeaders;

    public GETModifySubnetAttributeRequest withXAmzSignedHeaders(String xAmzSignedHeaders) {
        this.xAmzSignedHeaders = xAmzSignedHeaders;
        return this;
    }
    
    public GETModifySubnetAttributeRequest(@JsonProperty("Action") GETModifySubnetAttributeActionEnum action, @JsonProperty("SubnetId") String subnetId, @JsonProperty("Version") GETModifySubnetAttributeVersionEnum version) {
        this.action = action;
        this.subnetId = subnetId;
        this.version = version;
  }
}
