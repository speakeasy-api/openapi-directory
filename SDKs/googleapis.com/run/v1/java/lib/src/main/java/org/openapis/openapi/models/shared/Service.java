/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Service - Service acts as a top-level container that manages a set of Routes and Configurations which implement a network service. Service exists to provide a singular abstraction which can be access controlled, reasoned about, and which encapsulates software lifecycle decisions such as rollout policy and team resource ownership. Service acts only as an orchestrator of the underlying Routes and Configurations (much as a kubernetes Deployment orchestrates ReplicaSets). The Service's controller will track the statuses of its owned Configuration and Route, reflecting their statuses and conditions as its own.
 */
public class Service {
    /**
     * The API version for this call. It must be "serving.knative.dev/v1".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("apiVersion")
    public String apiVersion;

    public Service withApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }
    
    /**
     * The kind of resource. It must be "Service".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public Service withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public ObjectMeta metadata;

    public Service withMetadata(ObjectMeta metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * ServiceSpec holds the desired state of the Route (from the client), which is used to manipulate the underlying Route and Configuration(s).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("spec")
    public ServiceSpec spec;

    public Service withSpec(ServiceSpec spec) {
        this.spec = spec;
        return this;
    }
    
    /**
     * The current state of the Service. Output only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public ServiceStatus status;

    public Service withStatus(ServiceStatus status) {
        this.status = status;
        return this;
    }
    
    public Service(){}
}
