/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class ReportsEntityUsageReportsGetRequest {
    /**
     * V1 error format.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=$.xgafv")
    public org.openapis.openapi.models.shared.XgafvEnum dollarXgafv;

    public ReportsEntityUsageReportsGetRequest withDollarXgafv(org.openapis.openapi.models.shared.XgafvEnum dollarXgafv) {
        this.dollarXgafv = dollarXgafv;
        return this;
    }
    
    /**
     * OAuth access token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=access_token")
    public String accessToken;

    public ReportsEntityUsageReportsGetRequest withAccessToken(String accessToken) {
        this.accessToken = accessToken;
        return this;
    }
    
    /**
     * Data format for response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=alt")
    public org.openapis.openapi.models.shared.AltEnum alt;

    public ReportsEntityUsageReportsGetRequest withAlt(org.openapis.openapi.models.shared.AltEnum alt) {
        this.alt = alt;
        return this;
    }
    
    /**
     * JSONP
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=callback")
    public String callback;

    public ReportsEntityUsageReportsGetRequest withCallback(String callback) {
        this.callback = callback;
        return this;
    }
    
    /**
     * The unique ID of the customer to retrieve data for.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=customerId")
    public String customerId;

    public ReportsEntityUsageReportsGetRequest withCustomerId(String customerId) {
        this.customerId = customerId;
        return this;
    }
    
    /**
     * Represents the date the usage occurred. The timestamp is in the ISO 8601 format, yyyy-mm-dd. We recommend you use your account's time zone for this.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=date")
    public String date;

    public ReportsEntityUsageReportsGetRequest withDate(String date) {
        this.date = date;
        return this;
    }
    
    /**
     * Represents the key of the object to filter the data with. It is a string which can take the value `all` to get activity events for all users, or any other value for an app-specific entity. For details on how to obtain the `entityKey` for a particular `entityType`, see the Entities Usage parameters reference guides.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=entityKey")
    public String entityKey;

    public ReportsEntityUsageReportsGetRequest withEntityKey(String entityKey) {
        this.entityKey = entityKey;
        return this;
    }
    
    /**
     * Represents the type of entity for the report.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=entityType")
    public ReportsEntityUsageReportsGetEntityTypeEnum entityType;

    public ReportsEntityUsageReportsGetRequest withEntityType(ReportsEntityUsageReportsGetEntityTypeEnum entityType) {
        this.entityType = entityType;
        return this;
    }
    
    /**
     * Selector specifying which fields to include in a partial response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    public String fields;

    public ReportsEntityUsageReportsGetRequest withFields(String fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * The `filters` query string is a comma-separated list of an application's event parameters where the parameter's value is manipulated by a relational operator. The `filters` query string includes the name of the application whose usage is returned in the report. The application values for the Entities usage report include `accounts`, `docs`, and `gmail`. Filters are in the form `[application name]:parameter name[parameter value],...`. In this example, the `&lt;&gt;` 'not equal to' operator is URL-encoded in the request's query string (%3C%3E): GET https://www.googleapis.com/admin/reports/v1/usage/gplus_communities/all/dates/2017-12-01 ?parameters=gplus:community_name,gplus:num_total_members &amp;filters=gplus:num_total_members%3C%3E0 The relational operators include: - `==` - 'equal to'. - `&lt;&gt;` - 'not equal to'. It is URL-encoded (%3C%3E). - `&lt;` - 'less than'. It is URL-encoded (%3C). - `&lt;=` - 'less than or equal to'. It is URL-encoded (%3C=). - `&gt;` - 'greater than'. It is URL-encoded (%3E). - `&gt;=` - 'greater than or equal to'. It is URL-encoded (%3E=). Filters can only be applied to numeric parameters.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=filters")
    public String filters;

    public ReportsEntityUsageReportsGetRequest withFilters(String filters) {
        this.filters = filters;
        return this;
    }
    
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=key")
    public String key;

    public ReportsEntityUsageReportsGetRequest withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     * Determines how many activity records are shown on each response page. For example, if the request sets `maxResults=1` and the report has two activities, the report has two pages. The response's `nextPageToken` property has the token to the second page.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=maxResults")
    public Long maxResults;

    public ReportsEntityUsageReportsGetRequest withMaxResults(Long maxResults) {
        this.maxResults = maxResults;
        return this;
    }
    
    /**
     * OAuth 2.0 token for the current user.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=oauth_token")
    public String oauthToken;

    public ReportsEntityUsageReportsGetRequest withOauthToken(String oauthToken) {
        this.oauthToken = oauthToken;
        return this;
    }
    
    /**
     * Token to specify next page. A report with multiple pages has a `nextPageToken` property in the response. In your follow-on request getting the next page of the report, enter the `nextPageToken` value in the `pageToken` query string.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pageToken")
    public String pageToken;

    public ReportsEntityUsageReportsGetRequest withPageToken(String pageToken) {
        this.pageToken = pageToken;
        return this;
    }
    
    /**
     * The `parameters` query string is a comma-separated list of event parameters that refine a report's results. The parameter is associated with a specific application. The application values for the Entities usage report are only `gplus`. A `parameter` query string is in the CSV form of `[app_name1:param_name1], [app_name2:param_name2]...`. *Note:* The API doesn't accept multiple values of a parameter. If a particular parameter is supplied more than once in the API request, the API only accepts the last value of that request parameter. In addition, if an invalid request parameter is supplied in the API request, the API ignores that request parameter and returns the response corresponding to the remaining valid request parameters. An example of an invalid request parameter is one that does not belong to the application. If no parameters are requested, all parameters are returned. 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=parameters")
    public String parameters;

    public ReportsEntityUsageReportsGetRequest withParameters(String parameters) {
        this.parameters = parameters;
        return this;
    }
    
    /**
     * Returns response with indentations and line breaks.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=prettyPrint")
    public Boolean prettyPrint;

    public ReportsEntityUsageReportsGetRequest withPrettyPrint(Boolean prettyPrint) {
        this.prettyPrint = prettyPrint;
        return this;
    }
    
    /**
     * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=quotaUser")
    public String quotaUser;

    public ReportsEntityUsageReportsGetRequest withQuotaUser(String quotaUser) {
        this.quotaUser = quotaUser;
        return this;
    }
    
    /**
     * Legacy upload protocol for media (e.g. "media", "multipart").
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=uploadType")
    public String uploadType;

    public ReportsEntityUsageReportsGetRequest withUploadType(String uploadType) {
        this.uploadType = uploadType;
        return this;
    }
    
    /**
     * Upload protocol for media (e.g. "raw", "multipart").
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=upload_protocol")
    public String uploadProtocol;

    public ReportsEntityUsageReportsGetRequest withUploadProtocol(String uploadProtocol) {
        this.uploadProtocol = uploadProtocol;
        return this;
    }
    
    public ReportsEntityUsageReportsGetRequest(@JsonProperty("date") String date, @JsonProperty("entityKey") String entityKey, @JsonProperty("entityType") ReportsEntityUsageReportsGetEntityTypeEnum entityType) {
        this.date = date;
        this.entityKey = entityKey;
        this.entityType = entityType;
  }
}
