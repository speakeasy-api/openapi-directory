"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import channel_type_enum as shared_channel_type_enum
from ..shared import leg_state_enum as shared_leg_state_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListLegs200ApplicationJSONEmbeddedLegs:
    
    uuid: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uuid') }})
    r"""The id of the leg. rtc_id and call_id are leg id"""  
    embedded: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_embedded'), 'exclude': lambda f: f is None }})  
    links: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_links'), 'exclude': lambda f: f is None }})  
    conversation_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conversation_uuid'), 'exclude': lambda f: f is None }})
    r"""The unique identifier for this conversation"""  
    from_: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from'), 'exclude': lambda f: f is None }})  
    start_end: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_end'), 'exclude': lambda f: f is None }})
    r"""Time of leg end"""  
    start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_time'), 'exclude': lambda f: f is None }})
    r"""Time of leg start"""  
    state: Optional[shared_leg_state_enum.LegStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Leg Status"""  
    to: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to'), 'exclude': lambda f: f is None }})  
    type: Optional[shared_channel_type_enum.ChannelTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Channel type"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListLegs200ApplicationJSONEmbedded:
    r"""A list of conversation objects. See the [get details of a specific conversation](#retrieveConversation) response fields for a description of the nested objects"""
    
    legs: list[ListLegs200ApplicationJSONEmbeddedLegs] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legs') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListLegs200ApplicationJSONLinksSelf:
    
    href: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('href'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListLegs200ApplicationJSONLinks:
    
    self_: ListLegs200ApplicationJSONLinksSelf = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('self') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListLegs200ApplicationJSON:
    r"""List Legs Response Payload Object"""
    
    embedded: ListLegs200ApplicationJSONEmbedded = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_embedded') }})
    r"""A list of conversation objects. See the [get details of a specific conversation](#retrieveConversation) response fields for a description of the nested objects"""  
    links: ListLegs200ApplicationJSONLinks = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_links') }})  
    count: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count') }})
    r"""The total number of records returned by your request."""  
    page_size: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size') }})
    r"""The amount of records returned in this response"""  
    record_index: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('record_index') }})
    r"""Return `page_size` amount of conversations from this index in the response. That is, if your request returns 300 conversations, set `record_index` to 5 in order to return conversations 50 to 59. The default value is 0. That is, the first `page_size` calls."""  
    

@dataclasses.dataclass
class ListLegsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    list_legs_200_application_json_object: Optional[ListLegs200ApplicationJSON] = dataclasses.field(default=None)
    r"""List Legs Successfully"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    