// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinitionMergeMethodEnum - Optional icon for the statistic
type DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinitionMergeMethodEnum int

const (
	DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinitionMergeMethodEnumZero DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinitionMergeMethodEnum = 0
	DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinitionMergeMethodEnumOne  DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinitionMergeMethodEnum = 1
	DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinitionMergeMethodEnumTwo  DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinitionMergeMethodEnum = 2
)

func (e DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinitionMergeMethodEnum) ToPointer() *DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinitionMergeMethodEnum {
	return &e
}

func (e *DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinitionMergeMethodEnum) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		*e = DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinitionMergeMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinitionMergeMethodEnum: %v", v)
	}
}

type DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition struct {
	// Category for the stat.
	Category *int
	// Statistic group
	Group *int
	// Optional URI to an icon for the statistic
	IconImage *string
	// The tier associated with this medal - be it implicitly or explicitly.
	MedalTierHash *int64
	// Optional icon for the statistic
	MergeMethod *DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinitionMergeMethodEnum
	// Game modes where this statistic can be reported.
	Modes []int
	// Time periods the statistic covers
	PeriodTypes []int
	// Description of a stat if applicable.
	StatDescription *string
	// Unique programmer friendly ID for this stat
	StatID *string
	// Display name
	StatName *string
	// Display name abbreviated
	StatNameAbbr *string
	// Localized Unit Name for the stat.
	UnitLabel *string
	// Unit, if any, for the statistic
	UnitType *int
	// Weight assigned to this stat indicating its relative impressiveness.
	Weight *int
}
