"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Budget = void 0;
var utils_1 = require("../../../internal/utils");
var autoadjustdata_1 = require("./autoadjustdata");
var budgettypeenum_1 = require("./budgettypeenum");
var calculatedspend_1 = require("./calculatedspend");
var costtypes_1 = require("./costtypes");
var spend_1 = require("./spend");
var timeperiod_1 = require("./timeperiod");
var timeunitenum_1 = require("./timeunitenum");
var class_transformer_1 = require("class-transformer");
/**
 * <p>Represents the output of the <code>CreateBudget</code> operation. The content consists of the detailed metadata and data file information, and the current status of the <code>budget</code> object.</p> <p>This is the Amazon Resource Name (ARN) pattern for a budget: </p> <p> <code>arn:aws:budgets::AccountId:budget/budgetName</code> </p>
 */
var Budget = /** @class */ (function (_super) {
    __extends(Budget, _super);
    function Budget() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "AutoAdjustData" }),
        (0, class_transformer_1.Type)(function () { return autoadjustdata_1.AutoAdjustData; }),
        __metadata("design:type", autoadjustdata_1.AutoAdjustData)
    ], Budget.prototype, "autoAdjustData", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "BudgetLimit" }),
        (0, class_transformer_1.Type)(function () { return spend_1.Spend; }),
        __metadata("design:type", spend_1.Spend)
    ], Budget.prototype, "budgetLimit", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "BudgetName" }),
        __metadata("design:type", String)
    ], Budget.prototype, "budgetName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "BudgetType" }),
        __metadata("design:type", String)
    ], Budget.prototype, "budgetType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CalculatedSpend" }),
        (0, class_transformer_1.Type)(function () { return calculatedspend_1.CalculatedSpend; }),
        __metadata("design:type", calculatedspend_1.CalculatedSpend)
    ], Budget.prototype, "calculatedSpend", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CostFilters" }),
        __metadata("design:type", Object)
    ], Budget.prototype, "costFilters", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CostTypes" }),
        (0, class_transformer_1.Type)(function () { return costtypes_1.CostTypes; }),
        __metadata("design:type", costtypes_1.CostTypes)
    ], Budget.prototype, "costTypes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "LastUpdatedTime" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], Budget.prototype, "lastUpdatedTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: spend_1.Spend }),
        (0, class_transformer_1.Expose)({ name: "PlannedBudgetLimits" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            var obj = {};
            for (var key in value) {
                obj[key] = (0, utils_1.objectToClass)(value[key], spend_1.Spend);
            }
            return obj;
        }, { toClassOnly: true }),
        __metadata("design:type", Object)
    ], Budget.prototype, "plannedBudgetLimits", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "TimePeriod" }),
        (0, class_transformer_1.Type)(function () { return timeperiod_1.TimePeriod; }),
        __metadata("design:type", timeperiod_1.TimePeriod)
    ], Budget.prototype, "timePeriod", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "TimeUnit" }),
        __metadata("design:type", String)
    ], Budget.prototype, "timeUnit", void 0);
    return Budget;
}(utils_1.SpeakeasyBase));
exports.Budget = Budget;
