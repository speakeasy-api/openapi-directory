/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * IosModel - A description of an iOS device tests may be run on.
 */
public class IosModel {
    /**
     * Device capabilities. Copied from https://developer.apple.com/library/archive/documentation/DeviceInformation/Reference/iOSDeviceCompatibility/DeviceCompatibilityMatrix/DeviceCompatibilityMatrix.html
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deviceCapabilities")
    public String[] deviceCapabilities;

    public IosModel withDeviceCapabilities(String[] deviceCapabilities) {
        this.deviceCapabilities = deviceCapabilities;
        return this;
    }
    
    /**
     * Whether this device is a phone, tablet, wearable, etc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("formFactor")
    public IosModelFormFactorEnum formFactor;

    public IosModel withFormFactor(IosModelFormFactorEnum formFactor) {
        this.formFactor = formFactor;
        return this;
    }
    
    /**
     * The unique opaque id for this model. Use this for invoking the TestExecutionService.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public IosModel withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The human-readable name for this device model. Examples: "iPhone 4s", "iPad Mini 2".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public IosModel withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Version-specific information of an iOS model.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("perVersionInfo")
    public PerIosVersionInfo[] perVersionInfo;

    public IosModel withPerVersionInfo(PerIosVersionInfo[] perVersionInfo) {
        this.perVersionInfo = perVersionInfo;
        return this;
    }
    
    /**
     * Screen density in DPI.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("screenDensity")
    public Integer screenDensity;

    public IosModel withScreenDensity(Integer screenDensity) {
        this.screenDensity = screenDensity;
        return this;
    }
    
    /**
     * Screen size in the horizontal (X) dimension measured in pixels.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("screenX")
    public Integer screenX;

    public IosModel withScreenX(Integer screenX) {
        this.screenX = screenX;
        return this;
    }
    
    /**
     * Screen size in the vertical (Y) dimension measured in pixels.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("screenY")
    public Integer screenY;

    public IosModel withScreenY(Integer screenY) {
        this.screenY = screenY;
        return this;
    }
    
    /**
     * The set of iOS major software versions this device supports.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supportedVersionIds")
    public String[] supportedVersionIds;

    public IosModel withSupportedVersionIds(String[] supportedVersionIds) {
        this.supportedVersionIds = supportedVersionIds;
        return this;
    }
    
    /**
     * Tags for this dimension. Examples: "default", "preview", "deprecated".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public String[] tags;

    public IosModel withTags(String[] tags) {
        this.tags = tags;
        return this;
    }
    
    public IosModel(){}
}
