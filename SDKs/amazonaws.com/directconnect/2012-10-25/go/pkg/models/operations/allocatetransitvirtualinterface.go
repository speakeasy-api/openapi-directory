// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// AllocateTransitVirtualInterfaceXAmzTargetEnum
type AllocateTransitVirtualInterfaceXAmzTargetEnum string

const (
	AllocateTransitVirtualInterfaceXAmzTargetEnumOvertureServiceAllocateTransitVirtualInterface AllocateTransitVirtualInterfaceXAmzTargetEnum = "OvertureService.AllocateTransitVirtualInterface"
)

func (e *AllocateTransitVirtualInterfaceXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "OvertureService.AllocateTransitVirtualInterface":
		*e = AllocateTransitVirtualInterfaceXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AllocateTransitVirtualInterfaceXAmzTargetEnum: %s", s)
	}
}

type AllocateTransitVirtualInterfaceRequest struct {
	AllocateTransitVirtualInterfaceRequest shared.AllocateTransitVirtualInterfaceRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                          *string                                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                      *string                                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                         *string                                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                               *string                                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                      *string                                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                          *string                                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                      *string                                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                             AllocateTransitVirtualInterfaceXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type AllocateTransitVirtualInterfaceResponse struct {
	// Success
	AllocateTransitVirtualInterfaceResult *shared.AllocateTransitVirtualInterfaceResult
	ContentType                           string
	// DirectConnectClientException
	DirectConnectClientException interface{}
	// DirectConnectServerException
	DirectConnectServerException interface{}
	// DuplicateTagKeysException
	DuplicateTagKeysException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// TooManyTagsException
	TooManyTagsException interface{}
}
