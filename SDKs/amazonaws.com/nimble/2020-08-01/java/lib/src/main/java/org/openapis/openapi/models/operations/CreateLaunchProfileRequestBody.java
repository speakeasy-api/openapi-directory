/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CreateLaunchProfileRequestBody {
    /**
     * A human-readable description of the launch profile.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public CreateLaunchProfileRequestBody withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Specifies the IDs of the EC2 subnets where streaming sessions will be accessible from. These subnets must support the specified instance types. 
     */
    @JsonProperty("ec2SubnetIds")
    public String[] ec2SubnetIds;

    public CreateLaunchProfileRequestBody withEc2SubnetIds(String[] ec2SubnetIds) {
        this.ec2SubnetIds = ec2SubnetIds;
        return this;
    }
    
    /**
     * The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".
     */
    @JsonProperty("launchProfileProtocolVersions")
    public String[] launchProfileProtocolVersions;

    public CreateLaunchProfileRequestBody withLaunchProfileProtocolVersions(String[] launchProfileProtocolVersions) {
        this.launchProfileProtocolVersions = launchProfileProtocolVersions;
        return this;
    }
    
    /**
     * The name for the launch profile.
     */
    @JsonProperty("name")
    public String name;

    public CreateLaunchProfileRequestBody withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Configuration for streaming workstations created using this launch profile.
     */
    @JsonProperty("streamConfiguration")
    public CreateLaunchProfileRequestBodyStreamConfiguration streamConfiguration;

    public CreateLaunchProfileRequestBody withStreamConfiguration(CreateLaunchProfileRequestBodyStreamConfiguration streamConfiguration) {
        this.streamConfiguration = streamConfiguration;
        return this;
    }
    
    /**
     * Unique identifiers for a collection of studio components that can be used with this launch profile.
     */
    @JsonProperty("studioComponentIds")
    public String[] studioComponentIds;

    public CreateLaunchProfileRequestBody withStudioComponentIds(String[] studioComponentIds) {
        this.studioComponentIds = studioComponentIds;
        return this;
    }
    
    /**
     * A collection of labels, in the form of key-value pairs, that apply to this resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public java.util.Map<String, String> tags;

    public CreateLaunchProfileRequestBody withTags(java.util.Map<String, String> tags) {
        this.tags = tags;
        return this;
    }
    
    public CreateLaunchProfileRequestBody(@JsonProperty("ec2SubnetIds") String[] ec2SubnetIds, @JsonProperty("launchProfileProtocolVersions") String[] launchProfileProtocolVersions, @JsonProperty("name") String name, @JsonProperty("streamConfiguration") CreateLaunchProfileRequestBodyStreamConfiguration streamConfiguration, @JsonProperty("studioComponentIds") String[] studioComponentIds) {
        this.ec2SubnetIds = ec2SubnetIds;
        this.launchProfileProtocolVersions = launchProfileProtocolVersions;
        this.name = name;
        this.streamConfiguration = streamConfiguration;
        this.studioComponentIds = studioComponentIds;
  }
}
