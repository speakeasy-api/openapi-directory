"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ContainersVersionGetInfoBuildDetail:
    
    api: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('api'), 'exclude': lambda f: f is None }})
    r"""The build ID of the current API version."""  
    automount: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('automount'), 'exclude': lambda f: f is None }})
    r"""The build ID of the current automount microservice version."""  
    grupdater: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grupdater'), 'exclude': lambda f: f is None }})
    r"""The build ID of the current grupdater microservice version."""  
    harmony: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('harmony'), 'exclude': lambda f: f is None }})
    r"""The build ID of the current harmony microservice version."""  
    health_monitor: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('health-monitor'), 'exclude': lambda f: f is None }})
    r"""The build ID of the current health-monitor microservice version."""  
    hijack: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hijack'), 'exclude': lambda f: f is None }})
    r"""The build ID of the current hijack microservice version."""  
    ldap: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ldap'), 'exclude': lambda f: f is None }})
    r"""The build ID of the current ldap microservice version."""  
    logmet: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logmet'), 'exclude': lambda f: f is None }})
    r"""The build ID of the current logmet microservice version."""  
    lumberjack: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lumberjack'), 'exclude': lambda f: f is None }})
    r"""The build ID of the current lumberjack microservice version."""  
    redis_cluster: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redis-cluster'), 'exclude': lambda f: f is None }})
    r"""The build ID of the current redis-cluster version."""  
    sgwatcher: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sgwatcher'), 'exclude': lambda f: f is None }})
    r"""The build ID of the current sgwatcher microservice version."""  
    volmgr: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('volmgr'), 'exclude': lambda f: f is None }})
    r"""The build ID of the current volumes manager microservice version."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ContainersVersionGetInfo:
    r"""OK. A list of the current API and microservices versions is returend."""
    
    api_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApiVersion'), 'exclude': lambda f: f is None }})
    r"""The current API version."""  
    arch: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Arch'), 'exclude': lambda f: f is None }})
    r"""The current Arch version."""  
    build_detail: Optional[ContainersVersionGetInfoBuildDetail] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BuildDetail'), 'exclude': lambda f: f is None }})  
    build_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BuildID'), 'exclude': lambda f: f is None }})  
    build_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BuildNumber'), 'exclude': lambda f: f is None }})  
    build_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BuildTime'), 'exclude': lambda f: f is None }})
    r"""Timestamp when the API version and all attached microservices were built."""  
    git_commit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GitCommit'), 'exclude': lambda f: f is None }})  
    go_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GoVersion'), 'exclude': lambda f: f is None }})
    r"""The latest Go version."""  
    kernel_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KernelVersion'), 'exclude': lambda f: f is None }})
    r"""The latest Kernel version."""  
    os: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Os'), 'exclude': lambda f: f is None }})
    r"""Bluemix Containers"""  
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Version'), 'exclude': lambda f: f is None }})
    r"""The latest API version."""  
    