// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateDataSourceRequest struct {
	Request *shared.Datasource `request:"mediaType=application/json"`
}

// CreateDataSource200ApplicationJSONActionEnum - The id of the action
type CreateDataSource200ApplicationJSONActionEnum string

const (
	CreateDataSource200ApplicationJSONActionEnumCreateDataSource CreateDataSource200ApplicationJSONActionEnum = "createDataSource"
)

func (e *CreateDataSource200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "createDataSource":
		*e = CreateDataSource200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDataSource200ApplicationJSONActionEnum: %s", s)
	}
}

// CreateDataSource200ApplicationJSONData - Information about the data sources
type CreateDataSource200ApplicationJSONData struct {
	Datasources []shared.Datasource `json:"datasources"`
}

// CreateDataSource200ApplicationJSONResultEnum - Result of the request
type CreateDataSource200ApplicationJSONResultEnum string

const (
	CreateDataSource200ApplicationJSONResultEnumSuccess CreateDataSource200ApplicationJSONResultEnum = "success"
	CreateDataSource200ApplicationJSONResultEnumError   CreateDataSource200ApplicationJSONResultEnum = "error"
)

func (e *CreateDataSource200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = CreateDataSource200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDataSource200ApplicationJSONResultEnum: %s", s)
	}
}

// CreateDataSource200ApplicationJSON - Created
type CreateDataSource200ApplicationJSON struct {
	// The id of the action
	Action CreateDataSource200ApplicationJSONActionEnum `json:"action"`
	// Information about the data sources
	Data CreateDataSource200ApplicationJSONData `json:"data"`
	// Result of the request
	Result CreateDataSource200ApplicationJSONResultEnum `json:"result"`
}

type CreateDataSourceResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Created
	CreateDataSource200ApplicationJSONObject *CreateDataSource200ApplicationJSON
}
