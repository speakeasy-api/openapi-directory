/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ConnectionInput - Connection represents an instance of connector.
 */
public class ConnectionInput {
    /**
     * AuthConfig defines details of a authentication type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authConfig")
    public AuthConfig authConfig;

    public ConnectionInput withAuthConfig(AuthConfig authConfig) {
        this.authConfig = authConfig;
        return this;
    }
    
    /**
     * Optional. Configuration for configuring the connection with an external system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configVariables")
    public ConfigVariable[] configVariables;

    public ConnectionInput withConfigVariables(ConfigVariable[] configVariables) {
        this.configVariables = configVariables;
        return this;
    }
    
    /**
     * Required. Connector version on which the connection is created. The format is: projects/* /locations/* /providers/* /connectors/* /versions/* Only global location is supported for ConnectorVersion resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectorVersion")
    public String connectorVersion;

    public ConnectionInput withConnectorVersion(String connectorVersion) {
        this.connectorVersion = connectorVersion;
        return this;
    }
    
    /**
     * Optional. Description of the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public ConnectionInput withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Optional. Configuration of the Connector's destination. Only accepted for Connectors that accepts user defined destination(s).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destinationConfigs")
    public DestinationConfig[] destinationConfigs;

    public ConnectionInput withDestinationConfigs(DestinationConfig[] destinationConfigs) {
        this.destinationConfigs = destinationConfigs;
        return this;
    }
    
    /**
     * Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public ConnectionInput withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Determines whether or no a connection is locked. If locked, a reason must be specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lockConfig")
    public LockConfig lockConfig;

    public ConnectionInput withLockConfig(LockConfig lockConfig) {
        this.lockConfig = lockConfig;
        return this;
    }
    
    /**
     * Log configuration for the connection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logConfig")
    public ConnectorsLogConfig logConfig;

    public ConnectionInput withLogConfig(ConnectorsLogConfig logConfig) {
        this.logConfig = logConfig;
        return this;
    }
    
    /**
     * Node configuration for the connection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nodeConfig")
    public NodeConfig nodeConfig;

    public ConnectionInput withNodeConfig(NodeConfig nodeConfig) {
        this.nodeConfig = nodeConfig;
        return this;
    }
    
    /**
     * Optional. Service account needed for runtime plane to access GCP resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceAccount")
    public String serviceAccount;

    public ConnectionInput withServiceAccount(String serviceAccount) {
        this.serviceAccount = serviceAccount;
        return this;
    }
    
    /**
     * SSL Configuration of a connection
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sslConfig")
    public SslConfig sslConfig;

    public ConnectionInput withSslConfig(SslConfig sslConfig) {
        this.sslConfig = sslConfig;
        return this;
    }
    
    /**
     * ConnectionStatus indicates the state of the connection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public ConnectionStatus status;

    public ConnectionInput withStatus(ConnectionStatus status) {
        this.status = status;
        return this;
    }
    
    /**
     * Optional. Suspended indicates if a user has suspended a connection or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suspended")
    public Boolean suspended;

    public ConnectionInput withSuspended(Boolean suspended) {
        this.suspended = suspended;
        return this;
    }
    
    public ConnectionInput(){}
}
