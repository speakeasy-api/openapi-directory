// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTListServerCertificatesActionEnum
type POSTListServerCertificatesActionEnum string

const (
	POSTListServerCertificatesActionEnumListServerCertificates POSTListServerCertificatesActionEnum = "ListServerCertificates"
)

func (e POSTListServerCertificatesActionEnum) ToPointer() *POSTListServerCertificatesActionEnum {
	return &e
}

func (e *POSTListServerCertificatesActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ListServerCertificates":
		*e = POSTListServerCertificatesActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTListServerCertificatesActionEnum: %v", v)
	}
}

// POSTListServerCertificatesVersionEnum
type POSTListServerCertificatesVersionEnum string

const (
	POSTListServerCertificatesVersionEnumTwoThousandAndTen0508 POSTListServerCertificatesVersionEnum = "2010-05-08"
)

func (e POSTListServerCertificatesVersionEnum) ToPointer() *POSTListServerCertificatesVersionEnum {
	return &e
}

func (e *POSTListServerCertificatesVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2010-05-08":
		*e = POSTListServerCertificatesVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTListServerCertificatesVersionEnum: %v", v)
	}
}

type POSTListServerCertificatesRequest struct {
	Action POSTListServerCertificatesActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Pagination token
	Marker *string `queryParam:"style=form,explode=true,name=Marker"`
	// Pagination limit
	MaxItems          *string                               `queryParam:"style=form,explode=true,name=MaxItems"`
	RequestBody       []byte                                `request:"mediaType=text/xml"`
	Version           POSTListServerCertificatesVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                               `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                               `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                               `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                               `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                               `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                               `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                               `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTListServerCertificatesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
