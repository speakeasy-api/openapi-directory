<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * WireTransfer - Wire transfers move funds between your Increase account and any other account accessible by Fedwire.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class WireTransfer
{
    /**
     * The Account to which the transfer belongs.
     * 
     * @var string $accountId
     */
	#[\JMS\Serializer\Annotation\SerializedName('account_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $accountId;
    
    /**
     * The destination account number.
     * 
     * @var string $accountNumber
     */
	#[\JMS\Serializer\Annotation\SerializedName('account_number')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $accountNumber;
    
    /**
     * The transfer amount in USD cents.
     * 
     * @var int $amount
     */
	#[\JMS\Serializer\Annotation\SerializedName('amount')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $amount;
    
    /**
     * If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\WireTransferTransferApproval $approval
     */
	#[\JMS\Serializer\Annotation\SerializedName('approval')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\WireTransferTransferApproval')]
    public WireTransferTransferApproval $approval;
    
    /**
     * The beneficiary's address line 1.
     * 
     * @var string $beneficiaryAddressLine1
     */
	#[\JMS\Serializer\Annotation\SerializedName('beneficiary_address_line1')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $beneficiaryAddressLine1;
    
    /**
     * The beneficiary's address line 2.
     * 
     * @var string $beneficiaryAddressLine2
     */
	#[\JMS\Serializer\Annotation\SerializedName('beneficiary_address_line2')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $beneficiaryAddressLine2;
    
    /**
     * The beneficiary's address line 3.
     * 
     * @var string $beneficiaryAddressLine3
     */
	#[\JMS\Serializer\Annotation\SerializedName('beneficiary_address_line3')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $beneficiaryAddressLine3;
    
    /**
     * The beneficiary's name.
     * 
     * @var string $beneficiaryName
     */
	#[\JMS\Serializer\Annotation\SerializedName('beneficiary_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $beneficiaryName;
    
    /**
     * If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\WireTransferTransferCancellation $cancellation
     */
	#[\JMS\Serializer\Annotation\SerializedName('cancellation')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\WireTransferTransferCancellation')]
    public WireTransferTransferCancellation $cancellation;
    
    /**
     * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
     * 
     * @var \DateTime $createdAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('created_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $createdAt;
    
    /**
     * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For wire transfers this is always equal to `usd`.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\WireTransferCurrencyEnum $currency
     */
	#[\JMS\Serializer\Annotation\SerializedName('currency')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\WireTransferCurrencyEnum>')]
    public WireTransferCurrencyEnum $currency;
    
    /**
     * The identifier of the External Account the transfer was made to, if any.
     * 
     * @var string $externalAccountId
     */
	#[\JMS\Serializer\Annotation\SerializedName('external_account_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $externalAccountId;
    
    /**
     * The wire transfer's identifier.
     * 
     * @var string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $id;
    
    /**
     * The message that will show on the recipient's bank statement.
     * 
     * @var string $messageToRecipient
     */
	#[\JMS\Serializer\Annotation\SerializedName('message_to_recipient')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $messageToRecipient;
    
    /**
     * The transfer's network.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\WireTransferNetworkEnum $network
     */
	#[\JMS\Serializer\Annotation\SerializedName('network')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\WireTransferNetworkEnum>')]
    public WireTransferNetworkEnum $network;
    
    /**
     * If your transfer is reversed, this will contain details of the reversal.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\WireTransferInboundWireReversal $reversal
     */
	#[\JMS\Serializer\Annotation\SerializedName('reversal')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\WireTransferInboundWireReversal')]
    public WireTransferInboundWireReversal $reversal;
    
    /**
     * The American Bankers' Association (ABA) Routing Transit Number (RTN).
     * 
     * @var string $routingNumber
     */
	#[\JMS\Serializer\Annotation\SerializedName('routing_number')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $routingNumber;
    
    /**
     * The lifecycle status of the transfer.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\WireTransferStatusEnum $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\WireTransferStatusEnum>')]
    public WireTransferStatusEnum $status;
    
    /**
     * After the transfer is submitted to Fedwire, this will contain supplemental details.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\WireTransferWireTransferSubmission $submission
     */
	#[\JMS\Serializer\Annotation\SerializedName('submission')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\WireTransferWireTransferSubmission')]
    public WireTransferWireTransferSubmission $submission;
    
    /**
     * The ID for the transaction funding the transfer.
     * 
     * @var string $transactionId
     */
	#[\JMS\Serializer\Annotation\SerializedName('transaction_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $transactionId;
    
    /**
     * A constant representing the object's type. For this resource it will always be `wire_transfer`.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\WireTransferTypeEnum $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\WireTransferTypeEnum>')]
    public WireTransferTypeEnum $type;
    
	public function __construct()
	{
		$this->accountId = "";
		$this->accountNumber = "";
		$this->amount = 0;
		$this->approval = new \OpenAPI\OpenAPI\Models\Shared\WireTransferTransferApproval();
		$this->beneficiaryAddressLine1 = "";
		$this->beneficiaryAddressLine2 = "";
		$this->beneficiaryAddressLine3 = "";
		$this->beneficiaryName = "";
		$this->cancellation = new \OpenAPI\OpenAPI\Models\Shared\WireTransferTransferCancellation();
		$this->createdAt = new \DateTime();
		$this->currency = \OpenAPI\OpenAPI\Models\Shared\WireTransferCurrencyEnum::CAD;
		$this->externalAccountId = "";
		$this->id = "";
		$this->messageToRecipient = "";
		$this->network = \OpenAPI\OpenAPI\Models\Shared\WireTransferNetworkEnum::WIRE;
		$this->reversal = new \OpenAPI\OpenAPI\Models\Shared\WireTransferInboundWireReversal();
		$this->routingNumber = "";
		$this->status = \OpenAPI\OpenAPI\Models\Shared\WireTransferStatusEnum::CANCELED;
		$this->submission = new \OpenAPI\OpenAPI\Models\Shared\WireTransferWireTransferSubmission();
		$this->transactionId = "";
		$this->type = \OpenAPI\OpenAPI\Models\Shared\WireTransferTypeEnum::WIRE_TRANSFER;
	}
}
