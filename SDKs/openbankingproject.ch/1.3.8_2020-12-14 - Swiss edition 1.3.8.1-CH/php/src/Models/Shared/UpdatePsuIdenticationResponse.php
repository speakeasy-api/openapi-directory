<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * UpdatePsuIdenticationResponse - Body of the JSON response for a successful update PSU identification request.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class UpdatePsuIdenticationResponse
{
    /**
     * A list of hyperlinks to be recognised by the TPP. The actual hyperlinks used in the response depend on the dynamical decisions of the ASPSP when processing the request.
     * 
     * 
     * **Remark:** All links can be relative or full links, to be decided by the ASPSP.
     * 
     * Type of links admitted in this response, (further links might be added for ASPSP
     * defined extensions):
     * 
     * - 'scaStatus': The link to retrieve the scaStatus of the corresponding authorisation sub-resource.
     * - 'selectAuthenticationMethod': This is a link to a resource, where the TPP can select the applicable second factor authentication methods for the PSU, if there are several available authentication methods and if the PSU is already sufficiently authenticated.. If this link is contained, then there is also the data element "scaMethods" contained in the response body.
     * 
     * 
     * @var array<string, \OpenAPI\OpenAPI\Models\Shared\HrefType> $links
     */
	#[\JMS\Serializer\Annotation\SerializedName('_links')]
    #[\JMS\Serializer\Annotation\Type('array<string, OpenAPI\OpenAPI\Models\Shared\HrefType>')]
    public array $links;
    
	#[\JMS\Serializer\Annotation\SerializedName('currencyConversionFees')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Amount')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Amount $currencyConversionFees = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('estimatedInterbankSettlementAmount')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Amount')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Amount $estimatedInterbankSettlementAmount = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('estimatedTotalAmount')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Amount')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Amount $estimatedTotalAmount = null;
    
    /**
     * Text to be displayed to the PSU.
     * 
     * @var ?string $psuMessage
     */
	#[\JMS\Serializer\Annotation\SerializedName('psuMessage')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $psuMessage = null;
    
    /**
     * This data element might be contained, if SCA is required and if the PSU has a choice between different
     * 
     * authentication methods.
     * 
     * Depending on the risk management of the ASPSP this choice might be offered before or after the PSU
     * has been identified with the first relevant factor, or if an access token is transported.
     * 
     * If this data element is contained, then there is also a hyperlink of type 'startAuthorisationWithAuthenticationMethodSelection'
     * contained in the response body.
     * 
     * These methods shall be presented towards the PSU for selection by the TPP.
     * 
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\AuthenticationObject> $scaMethods
     */
	#[\JMS\Serializer\Annotation\SerializedName('scaMethods')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\AuthenticationObject>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $scaMethods = null;
    
    /**
     * This data element is containing information about the status of the SCA method applied.
     * 
     * 
     * The following codes are defined for this data type.
     * 
     *   * 'received':
     *     An authorisation or cancellation-authorisation resource has been created successfully.
     *   * 'psuIdentified':
     *     The PSU related to the authorisation or cancellation-authorisation resource has been identified.
     *   * 'psuAuthenticated':
     *     The PSU related to the authorisation or cancellation-authorisation resource has been identified and authenticated e.g. by a password or by an access token.
     *   * 'scaMethodSelected':
     *     The PSU/TPP has selected the related SCA routine.
     *     If the SCA method is chosen implicitly since only one SCA method is available,
     *     then this is the first status to be reported instead of 'received'.
     *   * 'unconfirmed':
     *     SCA is technically successfully finalised by the PSU, but the authorisation resource needs a confirmation command by the TPP yet. 
     *   * 'started':
     *     The addressed SCA routine has been started.
     *   * 'finalised':
     *     The SCA routine has been finalised successfully (including a potential confirmation command). 
     *     This is a final status of the authorisation resource.
     *   * 'failed':
     *     The SCA routine failed.
     *     This is a final status of the authorisation resource.
     *   * 'exempted':
     *     SCA was exempted for the related transaction, the related authorisation is successful.
     *     This is a final status of the authorisation resource.
     * 
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\ScaStatusEnum $scaStatus
     */
	#[\JMS\Serializer\Annotation\SerializedName('scaStatus')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ScaStatusEnum>')]
    public ScaStatusEnum $scaStatus;
    
	#[\JMS\Serializer\Annotation\SerializedName('transactionFees')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Amount')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Amount $transactionFees = null;
    
	public function __construct()
	{
		$this->links = [];
		$this->currencyConversionFees = null;
		$this->estimatedInterbankSettlementAmount = null;
		$this->estimatedTotalAmount = null;
		$this->psuMessage = null;
		$this->scaMethods = null;
		$this->scaStatus = \OpenAPI\OpenAPI\Models\Shared\ScaStatusEnum::RECEIVED;
		$this->transactionFees = null;
	}
}
