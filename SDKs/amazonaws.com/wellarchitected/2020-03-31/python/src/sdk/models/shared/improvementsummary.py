"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import choiceimprovementplan as shared_choiceimprovementplan
from ..shared import risk_enum as shared_risk_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImprovementSummary:
    r"""An improvement summary of a lens review in a workload."""
    
    improvement_plans: Optional[list[shared_choiceimprovementplan.ChoiceImprovementPlan]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImprovementPlans'), 'exclude': lambda f: f is None }})  
    improvement_plan_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImprovementPlanUrl'), 'exclude': lambda f: f is None }})
    r"""<p>The improvement plan URL for a question.</p> <p>This value is only available if the question has been answered.</p>"""  
    pillar_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PillarId'), 'exclude': lambda f: f is None }})
    r"""<p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>"""  
    question_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QuestionId'), 'exclude': lambda f: f is None }})
    r"""The ID of the question."""  
    question_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QuestionTitle'), 'exclude': lambda f: f is None }})
    r"""The title of the question."""  
    risk: Optional[shared_risk_enum.RiskEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Risk'), 'exclude': lambda f: f is None }})
    r"""The risk for a given workload, lens review, pillar, or question."""  
    