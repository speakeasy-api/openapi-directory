"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import resourcefilter as shared_resourcefilter
from ..shared import resourcestatus as shared_resourcestatus
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Evaluation:
    r"""Message describing Evaluation object"""
    
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. [Output only] Create time stamp"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description of the Evaluation"""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Labels as key value pairs"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""name of resource names have the form 'projects/{project_id}/locations/{location_id}/evaluations/{evaluation_id}'"""  
    resource_filter: Optional[shared_resourcefilter.ResourceFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceFilter'), 'exclude': lambda f: f is None }})
    r"""Message describing resource filters"""  
    resource_status: Optional[shared_resourcestatus.ResourceStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceStatus'), 'exclude': lambda f: f is None }})
    r"""Message describing resource status"""  
    rule_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ruleNames'), 'exclude': lambda f: f is None }})
    r"""the name of the rule"""  
    rule_versions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ruleVersions'), 'exclude': lambda f: f is None }})
    r"""Output only. [Output only] The updated rule ids if exist."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. [Output only] Update time stamp"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EvaluationInput:
    r"""Message describing Evaluation object"""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description of the Evaluation"""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Labels as key value pairs"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""name of resource names have the form 'projects/{project_id}/locations/{location_id}/evaluations/{evaluation_id}'"""  
    resource_filter: Optional[shared_resourcefilter.ResourceFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceFilter'), 'exclude': lambda f: f is None }})
    r"""Message describing resource filters"""  
    resource_status: Optional[shared_resourcestatus.ResourceStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceStatus'), 'exclude': lambda f: f is None }})
    r"""Message describing resource status"""  
    rule_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ruleNames'), 'exclude': lambda f: f is None }})
    r"""the name of the rule"""  
    