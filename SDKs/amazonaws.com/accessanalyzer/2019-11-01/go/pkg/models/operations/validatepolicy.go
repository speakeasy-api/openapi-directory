// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ValidatePolicyRequestBodyLocaleEnum - The locale to use for localizing the findings.
type ValidatePolicyRequestBodyLocaleEnum string

const (
	ValidatePolicyRequestBodyLocaleEnumDe   ValidatePolicyRequestBodyLocaleEnum = "DE"
	ValidatePolicyRequestBodyLocaleEnumEn   ValidatePolicyRequestBodyLocaleEnum = "EN"
	ValidatePolicyRequestBodyLocaleEnumEs   ValidatePolicyRequestBodyLocaleEnum = "ES"
	ValidatePolicyRequestBodyLocaleEnumFr   ValidatePolicyRequestBodyLocaleEnum = "FR"
	ValidatePolicyRequestBodyLocaleEnumIt   ValidatePolicyRequestBodyLocaleEnum = "IT"
	ValidatePolicyRequestBodyLocaleEnumJa   ValidatePolicyRequestBodyLocaleEnum = "JA"
	ValidatePolicyRequestBodyLocaleEnumKo   ValidatePolicyRequestBodyLocaleEnum = "KO"
	ValidatePolicyRequestBodyLocaleEnumPtBr ValidatePolicyRequestBodyLocaleEnum = "PT_BR"
	ValidatePolicyRequestBodyLocaleEnumZhCn ValidatePolicyRequestBodyLocaleEnum = "ZH_CN"
	ValidatePolicyRequestBodyLocaleEnumZhTw ValidatePolicyRequestBodyLocaleEnum = "ZH_TW"
)

func (e ValidatePolicyRequestBodyLocaleEnum) ToPointer() *ValidatePolicyRequestBodyLocaleEnum {
	return &e
}

func (e *ValidatePolicyRequestBodyLocaleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DE":
		fallthrough
	case "EN":
		fallthrough
	case "ES":
		fallthrough
	case "FR":
		fallthrough
	case "IT":
		fallthrough
	case "JA":
		fallthrough
	case "KO":
		fallthrough
	case "PT_BR":
		fallthrough
	case "ZH_CN":
		fallthrough
	case "ZH_TW":
		*e = ValidatePolicyRequestBodyLocaleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ValidatePolicyRequestBodyLocaleEnum: %v", v)
	}
}

// ValidatePolicyRequestBodyPolicyTypeEnum - <p>The type of policy to validate. Identity policies grant permissions to IAM principals. Identity policies include managed and inline policies for IAM roles, users, and groups. They also include service-control policies (SCPs) that are attached to an Amazon Web Services organization, organizational unit (OU), or an account.</p> <p>Resource policies grant permissions on Amazon Web Services resources. Resource policies include trust policies for IAM roles and bucket policies for Amazon S3 buckets. You can provide a generic input such as identity policy or resource policy or a specific input such as managed policy or Amazon S3 bucket policy. </p>
type ValidatePolicyRequestBodyPolicyTypeEnum string

const (
	ValidatePolicyRequestBodyPolicyTypeEnumIdentityPolicy       ValidatePolicyRequestBodyPolicyTypeEnum = "IDENTITY_POLICY"
	ValidatePolicyRequestBodyPolicyTypeEnumResourcePolicy       ValidatePolicyRequestBodyPolicyTypeEnum = "RESOURCE_POLICY"
	ValidatePolicyRequestBodyPolicyTypeEnumServiceControlPolicy ValidatePolicyRequestBodyPolicyTypeEnum = "SERVICE_CONTROL_POLICY"
)

func (e ValidatePolicyRequestBodyPolicyTypeEnum) ToPointer() *ValidatePolicyRequestBodyPolicyTypeEnum {
	return &e
}

func (e *ValidatePolicyRequestBodyPolicyTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IDENTITY_POLICY":
		fallthrough
	case "RESOURCE_POLICY":
		fallthrough
	case "SERVICE_CONTROL_POLICY":
		*e = ValidatePolicyRequestBodyPolicyTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ValidatePolicyRequestBodyPolicyTypeEnum: %v", v)
	}
}

// ValidatePolicyRequestBodyValidatePolicyResourceTypeEnum - <p>The type of resource to attach to your resource policy. Specify a value for the policy validation resource type only if the policy type is <code>RESOURCE_POLICY</code>. For example, to validate a resource policy to attach to an Amazon S3 bucket, you can choose <code>AWS::S3::Bucket</code> for the policy validation resource type.</p> <p>For resource types not supported as valid values, IAM Access Analyzer runs policy checks that apply to all resource policies. For example, to validate a resource policy to attach to a KMS key, do not specify a value for the policy validation resource type and IAM Access Analyzer will run policy checks that apply to all resource policies.</p>
type ValidatePolicyRequestBodyValidatePolicyResourceTypeEnum string

const (
	ValidatePolicyRequestBodyValidatePolicyResourceTypeEnumAwsS3Bucket                    ValidatePolicyRequestBodyValidatePolicyResourceTypeEnum = "AWS::S3::Bucket"
	ValidatePolicyRequestBodyValidatePolicyResourceTypeEnumAwsS3AccessPoint               ValidatePolicyRequestBodyValidatePolicyResourceTypeEnum = "AWS::S3::AccessPoint"
	ValidatePolicyRequestBodyValidatePolicyResourceTypeEnumAwsS3MultiRegionAccessPoint    ValidatePolicyRequestBodyValidatePolicyResourceTypeEnum = "AWS::S3::MultiRegionAccessPoint"
	ValidatePolicyRequestBodyValidatePolicyResourceTypeEnumAwsS3ObjectLambdaAccessPoint   ValidatePolicyRequestBodyValidatePolicyResourceTypeEnum = "AWS::S3ObjectLambda::AccessPoint"
	ValidatePolicyRequestBodyValidatePolicyResourceTypeEnumAwsIamAssumeRolePolicyDocument ValidatePolicyRequestBodyValidatePolicyResourceTypeEnum = "AWS::IAM::AssumeRolePolicyDocument"
)

func (e ValidatePolicyRequestBodyValidatePolicyResourceTypeEnum) ToPointer() *ValidatePolicyRequestBodyValidatePolicyResourceTypeEnum {
	return &e
}

func (e *ValidatePolicyRequestBodyValidatePolicyResourceTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWS::S3::Bucket":
		fallthrough
	case "AWS::S3::AccessPoint":
		fallthrough
	case "AWS::S3::MultiRegionAccessPoint":
		fallthrough
	case "AWS::S3ObjectLambda::AccessPoint":
		fallthrough
	case "AWS::IAM::AssumeRolePolicyDocument":
		*e = ValidatePolicyRequestBodyValidatePolicyResourceTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ValidatePolicyRequestBodyValidatePolicyResourceTypeEnum: %v", v)
	}
}

type ValidatePolicyRequestBody struct {
	// The locale to use for localizing the findings.
	Locale *ValidatePolicyRequestBodyLocaleEnum `json:"locale,omitempty"`
	// The JSON policy document to use as the content for the policy.
	PolicyDocument string `json:"policyDocument"`
	// <p>The type of policy to validate. Identity policies grant permissions to IAM principals. Identity policies include managed and inline policies for IAM roles, users, and groups. They also include service-control policies (SCPs) that are attached to an Amazon Web Services organization, organizational unit (OU), or an account.</p> <p>Resource policies grant permissions on Amazon Web Services resources. Resource policies include trust policies for IAM roles and bucket policies for Amazon S3 buckets. You can provide a generic input such as identity policy or resource policy or a specific input such as managed policy or Amazon S3 bucket policy. </p>
	PolicyType ValidatePolicyRequestBodyPolicyTypeEnum `json:"policyType"`
	// <p>The type of resource to attach to your resource policy. Specify a value for the policy validation resource type only if the policy type is <code>RESOURCE_POLICY</code>. For example, to validate a resource policy to attach to an Amazon S3 bucket, you can choose <code>AWS::S3::Bucket</code> for the policy validation resource type.</p> <p>For resource types not supported as valid values, IAM Access Analyzer runs policy checks that apply to all resource policies. For example, to validate a resource policy to attach to a KMS key, do not specify a value for the policy validation resource type and IAM Access Analyzer will run policy checks that apply to all resource policies.</p>
	ValidatePolicyResourceType *ValidatePolicyRequestBodyValidatePolicyResourceTypeEnum `json:"validatePolicyResourceType,omitempty"`
}

type ValidatePolicyRequest struct {
	RequestBody       ValidatePolicyRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The maximum number of results to return in the response.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// A token used for pagination of results returned.
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

type ValidatePolicyResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// InternalServerException
	InternalServerException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// Success
	ValidatePolicyResponse *shared.ValidatePolicyResponse
	// ValidationException
	ValidationException interface{}
}
