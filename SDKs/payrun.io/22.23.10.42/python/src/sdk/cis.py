"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Cis:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_cis_instruction(self, request: operations.DeleteCisInstructionRequest) -> operations.DeleteCisInstructionResponse:
        r"""Delete a CIS instruction
        Delete the specified CIS instruction
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCisInstructionRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCisInstructionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def delete_cis_instruction_tag(self, request: operations.DeleteCisInstructionTagRequest) -> operations.DeleteCisInstructionTagResponse:
        r"""Delete CIS instruction tag
        Deletes a tag from the CIS instruction
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCisInstructionTagRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCisInstructionTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def delete_cis_line(self, request: operations.DeleteCisLineRequest) -> operations.DeleteCisLineResponse:
        r"""Delete a CIS line
        Delete the specified CIS line
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCisLineRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCisLineResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def delete_cis_line_tag(self, request: operations.DeleteCisLineTagRequest) -> operations.DeleteCisLineTagResponse:
        r"""Delete CIS line tag
        Deletes a tag from the CIS line
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCisLineTagRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCisLineTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def delete_cis_line_type(self, request: operations.DeleteCisLineTypeRequest) -> operations.DeleteCisLineTypeResponse:
        r"""Delete an CIS line type
        Delete the specified CIS line type
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCisLineTypeRequest, base_url, '/Employer/{EmployerId}/CisLineType/{CisLineTypeId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCisLineTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def delete_cis_line_type_tag(self, request: operations.DeleteCisLineTypeTagRequest) -> operations.DeleteCisLineTypeTagResponse:
        r"""Delete CIS line type tag
        Deletes a tag from the CIS line type
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCisLineTypeTagRequest, base_url, '/Employer/{EmployerId}/CisLineType/{CisLineTypeId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCisLineTypeTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def delete_cis_transaction(self, request: operations.DeleteCisTransactionRequest) -> operations.DeleteCisTransactionResponse:
        r"""Delete the CIS transaction
        Deletes the specified CIS transaction
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCisTransactionRequest, base_url, '/Employer/{EmployerId}/CisTransaction/{CisTransactionId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCisTransactionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def delete_sub_contractor_tag(self, request: operations.DeleteSubContractorTagRequest) -> operations.DeleteSubContractorTagResponse:
        r"""Delete sub contractor tag
        Deletes a tag from the sub contractor
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSubContractorTagRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSubContractorTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_all_cis_instruction_tags(self, request: operations.GetAllCisInstructionTagsRequest) -> operations.GetAllCisInstructionTagsResponse:
        r"""Get all CIS instruction tags
        Gets all the CIS instruction tags
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllCisInstructionTagsRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstructions/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllCisInstructionTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_all_cis_line_tags(self, request: operations.GetAllCisLineTagsRequest) -> operations.GetAllCisLineTagsResponse:
        r"""Get all CIS line tags
        Gets all the CIS line tags
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllCisLineTagsRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLines/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllCisLineTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_all_cis_line_type_tags(self, request: operations.GetAllCisLineTypeTagsRequest) -> operations.GetAllCisLineTypeTagsResponse:
        r"""Get all CIS line type tags
        Gets all the CIS line type tags
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllCisLineTypeTagsRequest, base_url, '/Employer/{EmployerId}/CisLineTypes/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllCisLineTypeTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_all_sub_contractor_tags(self, request: operations.GetAllSubContractorTagsRequest) -> operations.GetAllSubContractorTagsResponse:
        r"""Get all sub contractor tags
        Gets all the sub contractor tags
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllSubContractorTagsRequest, base_url, '/Employer/{EmployerId}/SubContractors/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllSubContractorTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_cis_instruction_from_sub_contractor(self, request: operations.GetCisInstructionFromSubContractorRequest) -> operations.GetCisInstructionFromSubContractorResponse:
        r"""Get CIS instruction from sub contractor
        Gets the specified CIS instruction from sub contractor.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCisInstructionFromSubContractorRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCisInstructionFromSubContractorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CisInstruction])
                res.cis_instruction = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_cis_instructions_from_sub_contractor(self, request: operations.GetCisInstructionsFromSubContractorRequest) -> operations.GetCisInstructionsFromSubContractorResponse:
        r"""Get CIS instructions from sub contractor.
        Get links to all CIS instructions for the specified sub contractor.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCisInstructionsFromSubContractorRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstructions', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCisInstructionsFromSubContractorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_cis_instructions_with_tag(self, request: operations.GetCisInstructionsWithTagRequest) -> operations.GetCisInstructionsWithTagResponse:
        r"""Get CIS instructions with tag
        Gets the CIS instruction with the tag
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCisInstructionsWithTagRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstructions/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCisInstructionsWithTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_cis_line_from_sub_contractor(self, request: operations.GetCisLineFromSubContractorRequest) -> operations.GetCisLineFromSubContractorResponse:
        r"""Get CIS line from sub contractor
        Gets the specified CIS line from sub contractor.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCisLineFromSubContractorRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCisLineFromSubContractorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CisLine])
                res.cis_line = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_cis_line_type_from_employer(self, request: operations.GetCisLineTypeFromEmployerRequest) -> operations.GetCisLineTypeFromEmployerResponse:
        r"""Get CIS line type from employer
        Gets the specified CIS line type from employer.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCisLineTypeFromEmployerRequest, base_url, '/Employer/{EmployerId}/CisLineType/{CisLineTypeId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCisLineTypeFromEmployerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CisLineType])
                res.cis_line_type = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_cis_line_types_from_employer(self, request: operations.GetCisLineTypesFromEmployerRequest) -> operations.GetCisLineTypesFromEmployerResponse:
        r"""Get CIS line types from employer.
        Get links to all CIS line types for the specified employer.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCisLineTypesFromEmployerRequest, base_url, '/Employer/{EmployerId}/CisLineTypes', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCisLineTypesFromEmployerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_cis_line_types_with_tag(self, request: operations.GetCisLineTypesWithTagRequest) -> operations.GetCisLineTypesWithTagResponse:
        r"""Get CIS line types with tag
        Gets the CIS line type with the tag
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCisLineTypesWithTagRequest, base_url, '/Employer/{EmployerId}/CisLineTypes/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCisLineTypesWithTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_cis_lines_from_sub_contractor(self, request: operations.GetCisLinesFromSubContractorRequest) -> operations.GetCisLinesFromSubContractorResponse:
        r"""Get CIS lines from sub contractor.
        Get links to all CIS lines for the specified sub contractor.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCisLinesFromSubContractorRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLines', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCisLinesFromSubContractorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_cis_lines_with_tag(self, request: operations.GetCisLinesWithTagRequest) -> operations.GetCisLinesWithTagResponse:
        r"""Get CIS lines with tag
        Gets the CIS line with the tag
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCisLinesWithTagRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLines/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCisLinesWithTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_cis_transaction_from_employer(self, request: operations.GetCisTransactionFromEmployerRequest) -> operations.GetCisTransactionFromEmployerResponse:
        r"""Get the CIS transaction
        Returns the specified CIS transaction
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCisTransactionFromEmployerRequest, base_url, '/Employer/{EmployerId}/CisTransaction/{CisTransactionId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCisTransactionFromEmployerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CisTransaction])
                res.cis_transaction = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_cis_transactions_from_employer(self, request: operations.GetCisTransactionsFromEmployerRequest) -> operations.GetCisTransactionsFromEmployerResponse:
        r"""Get all CIS transactions for the employer
        Get links for all CIS transactions for the specified employer
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCisTransactionsFromEmployerRequest, base_url, '/Employer/{EmployerId}/CisTransactions', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCisTransactionsFromEmployerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_sub_contractors_with_tag(self, request: operations.GetSubContractorsWithTagRequest) -> operations.GetSubContractorsWithTagResponse:
        r"""Get sub contractors with tag
        Gets the sub contractor with the tag
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSubContractorsWithTagRequest, base_url, '/Employer/{EmployerId}/SubContractors/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSubContractorsWithTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tag_from_cis_instruction(self, request: operations.GetTagFromCisInstructionRequest) -> operations.GetTagFromCisInstructionResponse:
        r"""Get CIS instruction tag
        Gets the tag from the CIS instruction
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagFromCisInstructionRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagFromCisInstructionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tag_from_cis_line(self, request: operations.GetTagFromCisLineRequest) -> operations.GetTagFromCisLineResponse:
        r"""Get CIS line tag
        Gets the tag from the CIS line
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagFromCisLineRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagFromCisLineResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tag_from_cis_line_type(self, request: operations.GetTagFromCisLineTypeRequest) -> operations.GetTagFromCisLineTypeResponse:
        r"""Get CIS line type tag
        Gets the tag from the CIS line type
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagFromCisLineTypeRequest, base_url, '/Employer/{EmployerId}/CisLineType/{CisLineTypeId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagFromCisLineTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tag_from_sub_contractor(self, request: operations.GetTagFromSubContractorRequest) -> operations.GetTagFromSubContractorResponse:
        r"""Get sub contractor tag
        Gets the tag from the sub contractor
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagFromSubContractorRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagFromSubContractorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tag_from_sub_contractor_revision(self, request: operations.GetTagFromSubContractorRevisionRequest) -> operations.GetTagFromSubContractorRevisionResponse:
        r"""Get sub contractor revision tag
        Gets the tag from the sub contractor revision
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagFromSubContractorRevisionRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tag/{TagId}/{EffectiveDate}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagFromSubContractorRevisionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tags_from_cis_instruction(self, request: operations.GetTagsFromCisInstructionRequest) -> operations.GetTagsFromCisInstructionResponse:
        r"""Get all tags from the CIS instruction
        Gets all the tags from the CIS instruction
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagsFromCisInstructionRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsFromCisInstructionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tags_from_cis_line(self, request: operations.GetTagsFromCisLineRequest) -> operations.GetTagsFromCisLineResponse:
        r"""Get all tags from the CIS line
        Gets all the tags from the CIS line
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagsFromCisLineRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsFromCisLineResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tags_from_cis_line_type(self, request: operations.GetTagsFromCisLineTypeRequest) -> operations.GetTagsFromCisLineTypeResponse:
        r"""Get all tags from the CIS line type
        Gets all the tags from the CIS line type
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagsFromCisLineTypeRequest, base_url, '/Employer/{EmployerId}/CisLineType/{CisLineTypeId}/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsFromCisLineTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tags_from_sub_contractor(self, request: operations.GetTagsFromSubContractorRequest) -> operations.GetTagsFromSubContractorResponse:
        r"""Get all tags from the sub contractor
        Gets all the tags from the sub contractor
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagsFromSubContractorRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsFromSubContractorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tags_from_sub_contractor_revision(self, request: operations.GetTagsFromSubContractorRevisionRequest) -> operations.GetTagsFromSubContractorRevisionResponse:
        r"""Get all sub contractor revision tags
        Gets all the tags from the sub contractor revision
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagsFromSubContractorRevisionRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tags/{EffectiveDate}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsFromSubContractorRevisionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def patch_cis_instruction(self, request: operations.PatchCisInstructionRequest) -> operations.PatchCisInstructionResponse:
        r"""Patches the CIS instruction
        Update an existing CIS instruction object
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchCisInstructionRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PATCH', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchCisInstructionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CisInstruction])
                res.cis_instruction = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def post_cis_instruction_into_sub_contractor(self, request: operations.PostCisInstructionIntoSubContractorRequest) -> operations.PostCisInstructionIntoSubContractorResponse:
        r"""Create a new CIS instruction
        Create a new CIS instruction object
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostCisInstructionIntoSubContractorRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstructions', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "cis_instruction", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostCisInstructionIntoSubContractorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Link])
                res.link = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def post_cis_line_type_into_employer(self, request: operations.PostCisLineTypeIntoEmployerRequest) -> operations.PostCisLineTypeIntoEmployerResponse:
        r"""Create a new CIS line type
        Create a new CIS line type object
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostCisLineTypeIntoEmployerRequest, base_url, '/Employer/{EmployerId}/CisLineTypes', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "cis_line_type", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostCisLineTypeIntoEmployerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Link])
                res.link = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def put_cis_instruction_into_sub_contractor(self, request: operations.PutCisInstructionIntoSubContractorRequest) -> operations.PutCisInstructionIntoSubContractorResponse:
        r"""Updates the CIS instruction
        Insert or update existing CIS instruction object
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutCisInstructionIntoSubContractorRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "cis_instruction", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutCisInstructionIntoSubContractorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CisInstruction])
                res.cis_instruction = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def put_cis_instruction_tag(self, request: operations.PutCisInstructionTagRequest) -> operations.PutCisInstructionTagResponse:
        r"""Insert CIS instruction tag
        Inserts a new tag on the CIS instruction
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutCisInstructionTagRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PUT', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutCisInstructionTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def put_cis_line_tag(self, request: operations.PutCisLineTagRequest) -> operations.PutCisLineTagResponse:
        r"""Insert CIS line tag
        Inserts a new tag on the CIS line
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutCisLineTagRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PUT', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutCisLineTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def put_cis_line_type_into_employer(self, request: operations.PutCisLineTypeIntoEmployerRequest) -> operations.PutCisLineTypeIntoEmployerResponse:
        r"""Updates the CIS line type
        Updates the existing specified CIS line type object
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutCisLineTypeIntoEmployerRequest, base_url, '/Employer/{EmployerId}/CisLineType/{CisLineTypeId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "cis_line_type", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutCisLineTypeIntoEmployerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CisLineType])
                res.cis_line_type = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def put_cis_line_type_tag(self, request: operations.PutCisLineTypeTagRequest) -> operations.PutCisLineTypeTagResponse:
        r"""Insert CIS line type tag
        Inserts a new tag on the CIS line type
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutCisLineTypeTagRequest, base_url, '/Employer/{EmployerId}/CisLineType/{CisLineTypeId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PUT', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutCisLineTypeTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def put_sub_contractor_tag(self, request: operations.PutSubContractorTagRequest) -> operations.PutSubContractorTagResponse:
        r"""Insert sub contractor tag
        Inserts a new tag on the sub contractor
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutSubContractorTagRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PUT', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutSubContractorTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    