"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class JobsSmartV2:
    r"""To change the description use /examples/TagsDescriptions.json"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_external_file_link(self, request: operations.AddExternalFileLinkRequest) -> operations.AddExternalFileLinkResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddExternalFileLinkRequest, base_url, '/v2/jobs/{jobId}/files/addExternalLink', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "external_file_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddExternalFileLinkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def add_file_links(self, request: operations.AddFileLinksRequest) -> operations.AddFileLinksResponse:
        r"""Adds file link to the project as a link delivered in the job.
        Adds file link to the project as a link delivered in the job. The following properties can be specified for each file link:<ul><li>url (required, 400 Bad Request is returned otherwise)</li><li>category (required, 400 Bad Request is returned otherwise)</li><li>languageIds – when the file category depends on a list of languages</li><li>languageCombinationIds – when the file category depends on a list of language combinations</li></ul>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddFileLinksRequest, base_url, '/v2/jobs/{jobId}/files/delivered/addLink', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "file_link_categorizations_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddFileLinksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FilesDto])
                res.files_dto = out

        return res

    def add_files(self, request: operations.AddFilesRequest) -> operations.AddFilesResponse:
        r"""Adds files to the project as delivered in the job.
        Adds files to the project as delivered in the job. The files have to be uploaded beforehand (see \"POST /jobs/{jobId}/files/upload\" operation). The following properties can be specified for each file:<ul><li>category (required, 400 Bad Request is returned otherwise)</li><li>languageIds – when the file category depends on a list of languages</li><li>languageCombinationIds – when the file category depends on a list of language combinations</li></ul>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddFilesRequest, base_url, '/v2/jobs/{jobId}/files/delivered/add', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "file_categorizations_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddFilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def assign_vendor_1(self, request: operations.AssignVendor1Request) -> operations.AssignVendor1Response:
        r"""Assigns vendor to a job in a project.
        Assigns vendor to a job in a project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AssignVendor1Request, base_url, '/v2/jobs/{jobId}/vendor', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "vendor_price_profile_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AssignVendor1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def change_dates(self, request: operations.ChangeDatesRequest) -> operations.ChangeDatesResponse:
        r"""Updates dates of a given job.
        Updates dates of a given job.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChangeDatesRequest, base_url, '/v2/jobs/{jobId}/dates', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "job_dates_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChangeDatesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def change_status_1(self, request: operations.ChangeStatus1Request) -> operations.ChangeStatus1Response:
        r"""Changes job status if possible (400 Bad Request is returned otherwise).
        Changes job status if possible (400 Bad Request is returned otherwise). The status has to be specified using one of the following keys:<ul><li>OPEN – available when the job has one of the following statuses: ACCEPTED, CANCELED</li><li>ACCEPTED – available when the job has one of the following statuses: OPEN (Vendor and dates have to be set before calling the operation), STARTED</li><li>STARTED – available when the job has one of the following statuses: ACCEPTED, READY</li><li>READY – available when the job has one of the following statuses: STARTED</li><li>CANCELLED – available when the job has one of the following statuses: OPEN, ACCEPTED, STARTED, OFFERS_SENT</li><li>OFFERS_SENT – not available as a target status for this operation</li></ul>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChangeStatus1Request, base_url, '/v2/jobs/{jobId}/status', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "job_status_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChangeStatus1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_by_external_id(self, request: operations.GetByExternalIDRequest) -> operations.GetByExternalIDResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/jobs/for-external-id'
        
        query_params = utils.get_query_params(operations.GetByExternalIDRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetByExternalIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_delivered_files(self, request: operations.GetDeliveredFilesRequest) -> operations.GetDeliveredFilesResponse:
        r"""Returns list of files delivered in the job.
        Returns list of files delivered in the job.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDeliveredFilesRequest, base_url, '/v2/jobs/{jobId}/files/delivered', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDeliveredFilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ProjectFileDto]])
                res.project_file_dtos = out

        return res

    def get_file_by_id_1(self, request: operations.GetFileByID1Request) -> operations.GetFileByID1Response:
        r"""Returns details for a job.
        Returns details for a job.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFileByID1Request, base_url, '/v2/jobs/{jobId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFileByID1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProjectFileDto])
                res.project_file_dto = out

        return res

    def get_shared_reference_files(self, request: operations.GetSharedReferenceFilesRequest) -> operations.GetSharedReferenceFilesResponse:
        r"""Returns list of files shared with the job as Reference Files.
        Returns list of files shared with the job as Reference Files.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSharedReferenceFilesRequest, base_url, '/v2/jobs/{jobId}/files/sharedReferenceFiles', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSharedReferenceFilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ProjectFileDto]])
                res.project_file_dtos = out

        return res

    def get_shared_work_files(self, request: operations.GetSharedWorkFilesRequest) -> operations.GetSharedWorkFilesResponse:
        r"""Returns list of files shared with the job as Work Files.
        Returns list of files shared with the job as Work Files.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSharedWorkFilesRequest, base_url, '/v2/jobs/{jobId}/files/sharedWorkFiles', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSharedWorkFilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ProjectFileDto]])
                res.project_file_dtos = out

        return res

    def share_as_reference_files(self, request: operations.ShareAsReferenceFilesRequest) -> operations.ShareAsReferenceFilesResponse:
        r"""Shares selected files as Reference Files with a job in a project.
        Shares selected files as Reference Files with a job in a project. The files and the job have to be part of the same project. The operation is finished successfully even if some of the selected files were already shared with the job. If a file was shared with the job as Work File, it will now be shared as Reference File (and not as Work File).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ShareAsReferenceFilesRequest, base_url, '/v2/jobs/{jobId}/files/sharedReferenceFiles/share', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "files_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ShareAsReferenceFilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FilesShareStatusDto])
                res.files_share_status_dto = out

        return res

    def share_as_work_files(self, request: operations.ShareAsWorkFilesRequest) -> operations.ShareAsWorkFilesResponse:
        r"""Shares selected files as Work Files with a job in a project.
        Shares selected files as Work Files with a job in a project. The files and the job have to be part of the same project. The operation is finished successfully even if some of the selected files were already shared with the job. If a file was shared with the job as Reference File, it will now be shared as Work File (and not as Reference File).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ShareAsWorkFilesRequest, base_url, '/v2/jobs/{jobId}/files/sharedWorkFiles/share', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "files_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ShareAsWorkFilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FilesShareStatusDto])
                res.files_share_status_dto = out

        return res

    def stop_sharing(self, request: operations.StopSharingRequest) -> operations.StopSharingResponse:
        r"""Stops sharing selected files with a job in a project.
        Stops sharing selected files with a job in a project. The files and the job have to be part of the same project. The operation is finished successfully even if some of the selected files were not shared with the job.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.StopSharingRequest, base_url, '/v2/jobs/{jobId}/files/stopSharing', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "files_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StopSharingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FilesShareStatusDto])
                res.files_share_status_dto = out

        return res

    def update_instructions_4(self, request: operations.UpdateInstructions4Request) -> operations.UpdateInstructions4Response:
        r"""Updates instructions for a job.
        Updates instructions for a job. See also \"PUT /projects/{projectId}/vendorInstructions\" and \"PUT /quotes/{quoteId}/vendorInstructions\" for updating instructions for all jobs in a project or quote.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateInstructions4Request, base_url, '/v2/jobs/{jobId}/instructions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "string_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateInstructions4Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def upload_file_1(self, request: operations.UploadFile1Request) -> operations.UploadFile1Response:
        r"""Uploads file to the project as a file delivered in the job.
        Uploads file to the project as a file delivered in the job. Only one file can be uploaded at once. When the upload is finished the file has to be added by specifying its category and languages (see \"PUT /jobs/{jobId}/files/add\" operation).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UploadFile1Request, base_url, '/v2/jobs/{jobId}/files/delivered/upload', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "file_to_upload_dto", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UploadFile1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FileDto1])
                res.file_dto = out

        return res

    