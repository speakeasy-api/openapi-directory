// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PersistenceConfigPersistenceModeEnum - Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
type PersistenceConfigPersistenceModeEnum string

const (
	PersistenceConfigPersistenceModeEnumPersistenceModeUnspecified PersistenceConfigPersistenceModeEnum = "PERSISTENCE_MODE_UNSPECIFIED"
	PersistenceConfigPersistenceModeEnumDisabled                   PersistenceConfigPersistenceModeEnum = "DISABLED"
	PersistenceConfigPersistenceModeEnumRdb                        PersistenceConfigPersistenceModeEnum = "RDB"
)

func (e *PersistenceConfigPersistenceModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PERSISTENCE_MODE_UNSPECIFIED":
		fallthrough
	case "DISABLED":
		fallthrough
	case "RDB":
		*e = PersistenceConfigPersistenceModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PersistenceConfigPersistenceModeEnum: %s", s)
	}
}

// PersistenceConfigRdbSnapshotPeriodEnum - Optional. Period between RDB snapshots. Snapshots will be attempted every period starting from the provided snapshot start time. For example, a start time of 01/01/2033 06:45 and SIX_HOURS snapshot period will do nothing until 01/01/2033, and then trigger snapshots every day at 06:45, 12:45, 18:45, and 00:45 the next day, and so on. If not provided, TWENTY_FOUR_HOURS will be used as default.
type PersistenceConfigRdbSnapshotPeriodEnum string

const (
	PersistenceConfigRdbSnapshotPeriodEnumSnapshotPeriodUnspecified PersistenceConfigRdbSnapshotPeriodEnum = "SNAPSHOT_PERIOD_UNSPECIFIED"
	PersistenceConfigRdbSnapshotPeriodEnumOneHour                   PersistenceConfigRdbSnapshotPeriodEnum = "ONE_HOUR"
	PersistenceConfigRdbSnapshotPeriodEnumSixHours                  PersistenceConfigRdbSnapshotPeriodEnum = "SIX_HOURS"
	PersistenceConfigRdbSnapshotPeriodEnumTwelveHours               PersistenceConfigRdbSnapshotPeriodEnum = "TWELVE_HOURS"
	PersistenceConfigRdbSnapshotPeriodEnumTwentyFourHours           PersistenceConfigRdbSnapshotPeriodEnum = "TWENTY_FOUR_HOURS"
)

func (e *PersistenceConfigRdbSnapshotPeriodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SNAPSHOT_PERIOD_UNSPECIFIED":
		fallthrough
	case "ONE_HOUR":
		fallthrough
	case "SIX_HOURS":
		fallthrough
	case "TWELVE_HOURS":
		fallthrough
	case "TWENTY_FOUR_HOURS":
		*e = PersistenceConfigRdbSnapshotPeriodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PersistenceConfigRdbSnapshotPeriodEnum: %s", s)
	}
}

// PersistenceConfigInput - Configuration of the persistence functionality.
type PersistenceConfigInput struct {
	// Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
	PersistenceMode *PersistenceConfigPersistenceModeEnum `json:"persistenceMode,omitempty"`
	// Optional. Period between RDB snapshots. Snapshots will be attempted every period starting from the provided snapshot start time. For example, a start time of 01/01/2033 06:45 and SIX_HOURS snapshot period will do nothing until 01/01/2033, and then trigger snapshots every day at 06:45, 12:45, 18:45, and 00:45 the next day, and so on. If not provided, TWENTY_FOUR_HOURS will be used as default.
	RdbSnapshotPeriod *PersistenceConfigRdbSnapshotPeriodEnum `json:"rdbSnapshotPeriod,omitempty"`
	// Optional. Date and time that the first snapshot was/will be attempted, and to which future snapshots will be aligned. If not provided, the current time will be used.
	RdbSnapshotStartTime *string `json:"rdbSnapshotStartTime,omitempty"`
}

// PersistenceConfig - Configuration of the persistence functionality.
type PersistenceConfig struct {
	// Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
	PersistenceMode *PersistenceConfigPersistenceModeEnum `json:"persistenceMode,omitempty"`
	// Output only. The next time that a snapshot attempt is scheduled to occur.
	RdbNextSnapshotTime *string `json:"rdbNextSnapshotTime,omitempty"`
	// Optional. Period between RDB snapshots. Snapshots will be attempted every period starting from the provided snapshot start time. For example, a start time of 01/01/2033 06:45 and SIX_HOURS snapshot period will do nothing until 01/01/2033, and then trigger snapshots every day at 06:45, 12:45, 18:45, and 00:45 the next day, and so on. If not provided, TWENTY_FOUR_HOURS will be used as default.
	RdbSnapshotPeriod *PersistenceConfigRdbSnapshotPeriodEnum `json:"rdbSnapshotPeriod,omitempty"`
	// Optional. Date and time that the first snapshot was/will be attempted, and to which future snapshots will be aligned. If not provided, the current time will be used.
	RdbSnapshotStartTime *string `json:"rdbSnapshotStartTime,omitempty"`
}
