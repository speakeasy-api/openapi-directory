<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * GoogleCloudDialogflowCxV3ExportTestCasesRequest - The request message for TestCases.ExportTestCases.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class GoogleCloudDialogflowCxV3ExportTestCasesRequest
{
    /**
     * The data format of the exported test cases. If not specified, `BLOB` is assumed.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3ExportTestCasesRequestDataFormatEnum $dataFormat
     */
	#[\JMS\Serializer\Annotation\SerializedName('dataFormat')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3ExportTestCasesRequestDataFormatEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GoogleCloudDialogflowCxV3ExportTestCasesRequestDataFormatEnum $dataFormat = null;
    
    /**
     * The filter expression used to filter exported test cases, see [API Filtering](https://aip.dev/160). The expression is case insensitive and supports the following syntax: name = [OR name = ] ... For example: * "name = t1 OR name = t2" matches the test case with the exact resource name "t1" or "t2".
     * 
     * @var ?string $filter
     */
	#[\JMS\Serializer\Annotation\SerializedName('filter')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $filter = null;
    
    /**
     * The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI to export the test cases to. The format of this URI must be `gs:///`. If unspecified, the serialized test cases is returned inline. Dialogflow performs a write operation for the Cloud Storage object on the caller's behalf, so your request authentication must have write permissions for the object. For more information, see [Dialogflow access control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
     * 
     * @var ?string $gcsUri
     */
	#[\JMS\Serializer\Annotation\SerializedName('gcsUri')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $gcsUri = null;
    
	public function __construct()
	{
		$this->dataFormat = null;
		$this->filter = null;
		$this->gcsUri = null;
	}
}
