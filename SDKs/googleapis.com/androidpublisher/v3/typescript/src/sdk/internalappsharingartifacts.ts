/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Internalappsharingartifacts {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Uploads an APK to internal app sharing. If you are using the Google API client libraries, please increase the timeout of the http request before calling this endpoint (a timeout of 2 minutes is recommended). See [Timeouts and Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors) for an example in java.
   */
  androidpublisherInternalappsharingartifactsUploadapk(
    req: operations.AndroidpublisherInternalappsharingartifactsUploadapkRequest,
    security: operations.AndroidpublisherInternalappsharingartifactsUploadapkSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherInternalappsharingartifactsUploadapkResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AndroidpublisherInternalappsharingartifactsUploadapkRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/internalappsharing/{packageName}/artifacts/apk",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AndroidpublisherInternalappsharingartifactsUploadapkSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherInternalappsharingartifactsUploadapkResponse =
        new operations.AndroidpublisherInternalappsharingartifactsUploadapkResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalAppSharingArtifact = utils.objectToClass(
              httpRes?.data,
              shared.InternalAppSharingArtifact
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Uploads an app bundle to internal app sharing. If you are using the Google API client libraries, please increase the timeout of the http request before calling this endpoint (a timeout of 2 minutes is recommended). See [Timeouts and Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors) for an example in java.
   */
  androidpublisherInternalappsharingartifactsUploadbundle(
    req: operations.AndroidpublisherInternalappsharingartifactsUploadbundleRequest,
    security: operations.AndroidpublisherInternalappsharingartifactsUploadbundleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherInternalappsharingartifactsUploadbundleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AndroidpublisherInternalappsharingartifactsUploadbundleRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidpublisher/v3/applications/internalappsharing/{packageName}/artifacts/bundle",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AndroidpublisherInternalappsharingartifactsUploadbundleSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherInternalappsharingartifactsUploadbundleResponse =
        new operations.AndroidpublisherInternalappsharingartifactsUploadbundleResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalAppSharingArtifact = utils.objectToClass(
              httpRes?.data,
              shared.InternalAppSharingArtifact
            );
          }
          break;
      }

      return res;
    });
  }
}
