"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import urlrestriction as shared_urlrestriction
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserListInput:
    r"""Represents an Authorized Buyers user list. Authorized Buyers can create/update/list user lists. Once a user list is created in the system, Authorized Buyers can add users to the user list using the bulk uploader API. Alternatively, users can be added by hosting a tag on the advertiser's page."""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description for the user list."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. Display name of the user list. This must be unique across all user lists for a given account."""  
    membership_duration_days: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('membershipDurationDays'), 'exclude': lambda f: f is None }})
    r"""Required. The number of days a user's cookie stays on the user list. The field must be between 0 and 540 inclusive."""  
    url_restriction: Optional[shared_urlrestriction.URLRestriction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urlRestriction'), 'exclude': lambda f: f is None }})
    r"""Represents the URL restriction (for the URL captured by the pixel callback) for a user list."""  
    
class UserListStatusEnum(str, Enum):
    r"""Output only. The status of the user list. A new user list starts out as open."""
    STATUS_UNSPECIFIED = 'STATUS_UNSPECIFIED'
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserList:
    r"""Represents an Authorized Buyers user list. Authorized Buyers can create/update/list user lists. Once a user list is created in the system, Authorized Buyers can add users to the user list using the bulk uploader API. Alternatively, users can be added by hosting a tag on the advertiser's page."""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description for the user list."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. Display name of the user list. This must be unique across all user lists for a given account."""  
    membership_duration_days: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('membershipDurationDays'), 'exclude': lambda f: f is None }})
    r"""Required. The number of days a user's cookie stays on the user list. The field must be between 0 and 540 inclusive."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. Name of the user list that must follow the pattern `buyers/{buyer}/userLists/{user_list}`, where `{buyer}` represents the account ID of the buyer who owns the user list. For a bidder accessing user lists on behalf of a child seat buyer, `{buyer}` represents the account ID of the child seat buyer. `{user_list}` is an int64 identifier assigned by Google to uniquely identify a user list."""  
    status: Optional[UserListStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Output only. The status of the user list. A new user list starts out as open."""  
    url_restriction: Optional[shared_urlrestriction.URLRestriction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urlRestriction'), 'exclude': lambda f: f is None }})
    r"""Represents the URL restriction (for the URL captured by the pixel callback) for a user list."""  
    