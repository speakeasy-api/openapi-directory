// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTDescribeImportImageTasksActionEnum
type POSTDescribeImportImageTasksActionEnum string

const (
	POSTDescribeImportImageTasksActionEnumDescribeImportImageTasks POSTDescribeImportImageTasksActionEnum = "DescribeImportImageTasks"
)

func (e *POSTDescribeImportImageTasksActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DescribeImportImageTasks":
		*e = POSTDescribeImportImageTasksActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeImportImageTasksActionEnum: %s", s)
	}
}

// POSTDescribeImportImageTasksVersionEnum
type POSTDescribeImportImageTasksVersionEnum string

const (
	POSTDescribeImportImageTasksVersionEnumTwoThousandAndSixteen1115 POSTDescribeImportImageTasksVersionEnum = "2016-11-15"
)

func (e *POSTDescribeImportImageTasksVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = POSTDescribeImportImageTasksVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeImportImageTasksVersionEnum: %s", s)
	}
}

type POSTDescribeImportImageTasksQueryParams struct {
	Action POSTDescribeImportImageTasksActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken *string                                 `queryParam:"style=form,explode=true,name=NextToken"`
	Version   POSTDescribeImportImageTasksVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTDescribeImportImageTasksHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTDescribeImportImageTasksRequest struct {
	QueryParams POSTDescribeImportImageTasksQueryParams
	Headers     POSTDescribeImportImageTasksHeaders
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTDescribeImportImageTasksResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
