/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class PostAssetsReturnsSimulationBootstrapRequestBodyAssets extends SpeakeasyBase {
  /**
   * assetReturns[t] is the return of the asset over the time period t; all the assetReturns arrays must have the same length
   */
  @SpeakeasyMetadata()
  @Expose({ name: "assetReturns" })
  assetReturns: number[];
}

/**
 * The bootstrap method to use
 */
export enum PostAssetsReturnsSimulationBootstrapRequestBodyBootstrapMethodEnum {
  Iid = "iid",
  CircularBlock = "circularBlock",
  StationaryBlock = "stationaryBlock",
}

export class PostAssetsReturnsSimulationBootstrapRequestBody extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: PostAssetsReturnsSimulationBootstrapRequestBodyAssets,
  })
  @Expose({ name: "assets" })
  @Type(() => PostAssetsReturnsSimulationBootstrapRequestBodyAssets)
  assets: PostAssetsReturnsSimulationBootstrapRequestBodyAssets[];

  /**
   * The average length of the blocks to use in case the bootstrap method is 'stationaryBlock', in time periods; if not provided, defaults to the inverse of 3.15 * the common length of the assetReturns arrays^1/3
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bootstrapAverageBlockLength" })
  bootstrapAverageBlockLength?: number;

  /**
   * The length of the blocks to use in case the bootstrap method is 'circularBlock', in time periods; if not provided, defaults to [3.15 * the common length of the assetReturns arrays^1/3]
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bootstrapBlockLength" })
  bootstrapBlockLength?: number;

  /**
   * The bootstrap method to use
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bootstrapMethod" })
  bootstrapMethod?: PostAssetsReturnsSimulationBootstrapRequestBodyBootstrapMethodEnum;

  /**
   * The number of simulations to perform
   */
  @SpeakeasyMetadata()
  @Expose({ name: "simulations" })
  simulations?: number;

  /**
   * The number of time period(s) to simulate per simulation; if not provided, defaults to the common length of the assetReturns arrays
   */
  @SpeakeasyMetadata()
  @Expose({ name: "simulationsLength" })
  simulationsLength?: number;
}

export class PostAssetsReturnsSimulationBootstrap200ApplicationJSONSimulationsAssets extends SpeakeasyBase {
  /**
   * assetReturns[t] is the simulated return of the i-th asset for the t-th time period, in percentage
   */
  @SpeakeasyMetadata()
  @Expose({ name: "assetReturns" })
  assetReturns: number[];
}

export class PostAssetsReturnsSimulationBootstrap200ApplicationJSONSimulations extends SpeakeasyBase {
  /**
   * assets[i] is the data for the i-th asset
   */
  @SpeakeasyMetadata({
    elemType:
      PostAssetsReturnsSimulationBootstrap200ApplicationJSONSimulationsAssets,
  })
  @Expose({ name: "assets" })
  @Type(
    () =>
      PostAssetsReturnsSimulationBootstrap200ApplicationJSONSimulationsAssets
  )
  assets: PostAssetsReturnsSimulationBootstrap200ApplicationJSONSimulationsAssets[];
}

/**
 * OK
 */
export class PostAssetsReturnsSimulationBootstrap200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: PostAssetsReturnsSimulationBootstrap200ApplicationJSONSimulations,
  })
  @Expose({ name: "simulations" })
  @Type(() => PostAssetsReturnsSimulationBootstrap200ApplicationJSONSimulations)
  simulations: PostAssetsReturnsSimulationBootstrap200ApplicationJSONSimulations[];
}

export class PostAssetsReturnsSimulationBootstrapResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  postAssetsReturnsSimulationBootstrap200ApplicationJSONObject?: PostAssetsReturnsSimulationBootstrap200ApplicationJSON;
}
