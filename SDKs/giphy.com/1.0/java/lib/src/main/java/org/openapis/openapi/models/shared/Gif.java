/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class Gif {
    /**
     * The unique bit.ly URL for this GIF
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bitly_url")
    public String bitlyUrl;

    public Gif withBitlyUrl(String bitlyUrl) {
        this.bitlyUrl = bitlyUrl;
        return this;
    }
    
    /**
     * Currently unused
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content_url")
    public String contentUrl;

    public Gif withContentUrl(String contentUrl) {
        this.contentUrl = contentUrl;
        return this;
    }
    
    /**
     * The date this GIF was added to the GIPHY database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("create_datetime")
    public OffsetDateTime createDatetime;

    public Gif withCreateDatetime(OffsetDateTime createDatetime) {
        this.createDatetime = createDatetime;
        return this;
    }
    
    /**
     * A URL used for embedding this GIF
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("embded_url")
    public String embdedUrl;

    public Gif withEmbdedUrl(String embdedUrl) {
        this.embdedUrl = embdedUrl;
        return this;
    }
    
    /**
     * An array of featured tags for this GIF (Note: Not available when using the Public Beta Key)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("featured_tags")
    public String[] featuredTags;

    public Gif withFeaturedTags(String[] featuredTags) {
        this.featuredTags = featuredTags;
        return this;
    }
    
    /**
     * This GIF's unique ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Gif withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * An object containing data for various available formats and sizes of this GIF.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("images")
    public GifImages images;

    public Gif withImages(GifImages images) {
        this.images = images;
        return this;
    }
    
    /**
     * The creation or upload date from this GIF's source.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("import_datetime")
    public OffsetDateTime importDatetime;

    public Gif withImportDatetime(OffsetDateTime importDatetime) {
        this.importDatetime = importDatetime;
        return this;
    }
    
    /**
     * The MPAA-style rating for this content. Examples include Y, G, PG, PG-13 and R
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rating")
    public String rating;

    public Gif withRating(String rating) {
        this.rating = rating;
        return this;
    }
    
    /**
     * The unique slug used in this GIF's URL
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("slug")
    public String slug;

    public Gif withSlug(String slug) {
        this.slug = slug;
        return this;
    }
    
    /**
     * The page on which this GIF was found
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    public String source;

    public Gif withSource(String source) {
        this.source = source;
        return this;
    }
    
    /**
     * The URL of the webpage on which this GIF was found.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_post_url")
    public String sourcePostUrl;

    public Gif withSourcePostUrl(String sourcePostUrl) {
        this.sourcePostUrl = sourcePostUrl;
        return this;
    }
    
    /**
     * The top level domain of the source URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_tld")
    public String sourceTld;

    public Gif withSourceTld(String sourceTld) {
        this.sourceTld = sourceTld;
        return this;
    }
    
    /**
     * An array of tags for this GIF (Note: Not available when using the Public Beta Key)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public String[] tags;

    public Gif withTags(String[] tags) {
        this.tags = tags;
        return this;
    }
    
    /**
     * The date on which this gif was marked trending, if applicable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("trending_datetime")
    public OffsetDateTime trendingDatetime;

    public Gif withTrendingDatetime(OffsetDateTime trendingDatetime) {
        this.trendingDatetime = trendingDatetime;
        return this;
    }
    
    /**
     * Type of the gif. By default, this is almost always gif
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public GifTypeEnum type;

    public Gif withType(GifTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * The date on which this GIF was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("update_datetime")
    public OffsetDateTime updateDatetime;

    public Gif withUpdateDatetime(OffsetDateTime updateDatetime) {
        this.updateDatetime = updateDatetime;
        return this;
    }
    
    /**
     * The unique URL for this GIF
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public Gif withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * The User Object contains information about the user associated with a GIF and URLs to assets such as that user's avatar image, profile, and more.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    public User user;

    public Gif withUser(User user) {
        this.user = user;
        return this;
    }
    
    /**
     * The username this GIF is attached to, if applicable
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    public String username;

    public Gif withUsername(String username) {
        this.username = username;
        return this;
    }
    
    public Gif(){}
}
