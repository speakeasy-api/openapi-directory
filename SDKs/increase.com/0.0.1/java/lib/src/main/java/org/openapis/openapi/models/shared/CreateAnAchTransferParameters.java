/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

public class CreateAnAchTransferParameters {
    /**
     * The Increase identifier for the account that will send the transfer.
     */
    @JsonProperty("account_id")
    public String accountId;
    public CreateAnAchTransferParameters withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * The account number for the destination account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_number")
    public String accountNumber;
    public CreateAnAchTransferParameters withAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
        return this;
    }
    
    /**
     * Additional information that will be sent to the recipient. This is included in the transfer data sent to the receiving bank.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addendum")
    public String addendum;
    public CreateAnAchTransferParameters withAddendum(String addendum) {
        this.addendum = addendum;
        return this;
    }
    
    /**
     * The transfer amount in cents. A positive amount originates a credit transfer pushing funds to the receiving account. A negative amount originates a debit transfer pulling funds from the receiving account.
     */
    @JsonProperty("amount")
    public Long amount;
    public CreateAnAchTransferParameters withAmount(Long amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * The description of the date of the transfer, usually in the format `YYYYMMDD`. This is included in the transfer data sent to the receiving bank.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_descriptive_date")
    public String companyDescriptiveDate;
    public CreateAnAchTransferParameters withCompanyDescriptiveDate(String companyDescriptiveDate) {
        this.companyDescriptiveDate = companyDescriptiveDate;
        return this;
    }
    
    /**
     * The data you choose to associate with the transfer. This is included in the transfer data sent to the receiving bank.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_discretionary_data")
    public String companyDiscretionaryData;
    public CreateAnAchTransferParameters withCompanyDiscretionaryData(String companyDiscretionaryData) {
        this.companyDiscretionaryData = companyDiscretionaryData;
        return this;
    }
    
    /**
     * A description of the transfer. This is included in the transfer data sent to the receiving bank.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_entry_description")
    public String companyEntryDescription;
    public CreateAnAchTransferParameters withCompanyEntryDescription(String companyEntryDescription) {
        this.companyEntryDescription = companyEntryDescription;
        return this;
    }
    
    /**
     * The name by which the recipient knows you. This is included in the transfer data sent to the receiving bank.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    public String companyName;
    public CreateAnAchTransferParameters withCompanyName(String companyName) {
        this.companyName = companyName;
        return this;
    }
    
    /**
     * The transfer effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("effective_date")
    public LocalDate effectiveDate;
    public CreateAnAchTransferParameters withEffectiveDate(LocalDate effectiveDate) {
        this.effectiveDate = effectiveDate;
        return this;
    }
    
    /**
     * The ID of an External Account to initiate a transfer to. If this parameter is provided, `account_number`, `routing_number`, and `funding` must be absent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_account_id")
    public String externalAccountId;
    public CreateAnAchTransferParameters withExternalAccountId(String externalAccountId) {
        this.externalAccountId = externalAccountId;
        return this;
    }
    
    /**
     * The type of the account to which the transfer will be sent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("funding")
    public CreateAnAchTransferParametersFundingEnum funding;
    public CreateAnAchTransferParameters withFunding(CreateAnAchTransferParametersFundingEnum funding) {
        this.funding = funding;
        return this;
    }
    
    /**
     * Your identifer for the transfer recipient.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("individual_id")
    public String individualId;
    public CreateAnAchTransferParameters withIndividualId(String individualId) {
        this.individualId = individualId;
        return this;
    }
    
    /**
     * The name of the transfer recipient. This value is informational and not verified by the recipient's bank.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("individual_name")
    public String individualName;
    public CreateAnAchTransferParameters withIndividualName(String individualName) {
        this.individualName = individualName;
        return this;
    }
    
    /**
     * Whether the transfer requires explicit approval via the dashboard or API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("require_approval")
    public Boolean requireApproval;
    public CreateAnAchTransferParameters withRequireApproval(Boolean requireApproval) {
        this.requireApproval = requireApproval;
        return this;
    }
    
    /**
     * The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("routing_number")
    public String routingNumber;
    public CreateAnAchTransferParameters withRoutingNumber(String routingNumber) {
        this.routingNumber = routingNumber;
        return this;
    }
    
    /**
     * The Standard Entry Class (SEC) code to use for the transfer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("standard_entry_class_code")
    public CreateAnAchTransferParametersStandardEntryClassCodeEnum standardEntryClassCode;
    public CreateAnAchTransferParameters withStandardEntryClassCode(CreateAnAchTransferParametersStandardEntryClassCodeEnum standardEntryClassCode) {
        this.standardEntryClassCode = standardEntryClassCode;
        return this;
    }
    
    /**
     * A description you choose to give the transfer. This will be saved with the transfer details, displayed in the dashboard, and returned by the API. If `individual_name` and `company_name` are not explicitly set by this API, the `statement_descriptor` will be sent in those fields to the receiving bank to help the customer recognize the transfer. You are highly encouraged to pass `individual_name` and `company_name` instead of relying on this fallback.
     */
    @JsonProperty("statement_descriptor")
    public String statementDescriptor;
    public CreateAnAchTransferParameters withStatementDescriptor(String statementDescriptor) {
        this.statementDescriptor = statementDescriptor;
        return this;
    }
    
}
