"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import v3_vehicledescriptor as shared_v3_vehicledescriptor
from ..shared import v3_vehicleposition as shared_v3_vehicleposition
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class V3Run:
    
    destination_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination_name'), 'exclude': lambda f: f is None }})
    r"""Name of destination of run"""  
    direction_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('direction_id'), 'exclude': lambda f: f is None }})
    r"""Direction of travel identifier"""  
    express_stop_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('express_stop_count'), 'exclude': lambda f: f is None }})
    r"""The number of remaining skipped/express stations for the run/service from a stop"""  
    final_stop_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('final_stop_id'), 'exclude': lambda f: f is None }})
    r"""stop_id of final stop of run"""  
    geopath: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geopath'), 'exclude': lambda f: f is None }})
    r"""Geopath of the route"""  
    route_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('route_id'), 'exclude': lambda f: f is None }})
    r"""Route identifier"""  
    route_type: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('route_type'), 'exclude': lambda f: f is None }})
    r"""Transport mode identifier"""  
    run_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('run_id'), 'exclude': lambda f: f is None }})
    r"""Numeric trip/service run identifier. Defaults to -1 when run identifier is Alphanumeric"""  
    run_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('run_ref'), 'exclude': lambda f: f is None }})
    r"""Alphanumeric trip/service run identifier"""  
    run_sequence: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('run_sequence'), 'exclude': lambda f: f is None }})
    r"""Chronological sequence of the trip/service run on the route in direction. Order ascendingly by this field to get chronological order (earliest first) of runs with the same route_id and direction_id."""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of metropolitan train run; returns \\"scheduled\\" for other modes"""  
    vehicle_descriptor: Optional[shared_v3_vehicledescriptor.V3VehicleDescriptor] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vehicle_descriptor'), 'exclude': lambda f: f is None }})  
    vehicle_position: Optional[shared_v3_vehicleposition.V3VehiclePosition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vehicle_position'), 'exclude': lambda f: f is None }})  
    