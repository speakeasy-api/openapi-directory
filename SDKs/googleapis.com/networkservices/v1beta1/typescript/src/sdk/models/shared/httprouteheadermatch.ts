/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { HttpRouteHeaderMatchIntegerRange } from "./httprouteheadermatchintegerrange";
import { Expose, Type } from "class-transformer";

/**
 * Specifies how to select a route rule based on HTTP request headers.
 */
export class HttpRouteHeaderMatch extends SpeakeasyBase {
  /**
   * The value of the header should match exactly the content of exact_match.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exactMatch" })
  exactMatch?: string;

  /**
   * The name of the HTTP header to match against.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "header" })
  header?: string;

  /**
   * If specified, the match result will be inverted before checking. Default value is set to false.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "invertMatch" })
  invertMatch?: boolean;

  /**
   * The value of the header must start with the contents of prefix_match.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "prefixMatch" })
  prefixMatch?: string;

  /**
   * A header with header_name must exist. The match takes place whether or not the header has a value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "presentMatch" })
  presentMatch?: boolean;

  /**
   * Represents an integer value range.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rangeMatch" })
  @Type(() => HttpRouteHeaderMatchIntegerRange)
  rangeMatch?: HttpRouteHeaderMatchIntegerRange;

  /**
   * The value of the header must match the regular expression specified in regex_match. For regular expression grammar, please see: https://github.com/google/re2/wiki/Syntax
   */
  @SpeakeasyMetadata()
  @Expose({ name: "regexMatch" })
  regexMatch?: string;

  /**
   * The value of the header must end with the contents of suffix_match.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "suffixMatch" })
  suffixMatch?: string;
}
