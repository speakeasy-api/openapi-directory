/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Mutation - A mutation to apply to an entity.
 */
public class Mutation {
    /**
     * The version of the entity that this mutation is being applied to. If this does not match the current version on the server, the mutation conflicts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("baseVersion")
    public String baseVersion;

    public Mutation withBaseVersion(String baseVersion) {
        this.baseVersion = baseVersion;
        return this;
    }
    
    /**
     * A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delete")
    public Key delete;

    public Mutation withDelete(Key delete) {
        this.delete = delete;
        return this;
    }
    
    /**
     * A Datastore data object. An entity is limited to 1 megabyte when stored. That _roughly_ corresponds to a limit of 1 megabyte for the serialized form of this message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("insert")
    public Entity insert;

    public Mutation withInsert(Entity insert) {
        this.insert = insert;
        return this;
    }
    
    /**
     * A Datastore data object. An entity is limited to 1 megabyte when stored. That _roughly_ corresponds to a limit of 1 megabyte for the serialized form of this message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("update")
    public Entity update;

    public Mutation withUpdate(Entity update) {
        this.update = update;
        return this;
    }
    
    /**
     * The update time of the entity that this mutation is being applied to. If this does not match the current update time on the server, the mutation conflicts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;

    public Mutation withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
    /**
     * A Datastore data object. An entity is limited to 1 megabyte when stored. That _roughly_ corresponds to a limit of 1 megabyte for the serialized form of this message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("upsert")
    public Entity upsert;

    public Mutation withUpsert(Entity upsert) {
        this.upsert = upsert;
        return this;
    }
    
    public Mutation(){}
}
