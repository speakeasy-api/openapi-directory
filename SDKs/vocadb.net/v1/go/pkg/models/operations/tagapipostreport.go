// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type TagAPIPostReportPathParams struct {
	// Tag to be reported.
	TagID int `pathParam:"style=simple,explode=false,name=tagId"`
}

// TagAPIPostReportReportTypeEnum - Report type.
type TagAPIPostReportReportTypeEnum string

const (
	TagAPIPostReportReportTypeEnumInvalidInfo   TagAPIPostReportReportTypeEnum = "InvalidInfo"
	TagAPIPostReportReportTypeEnumDuplicate     TagAPIPostReportReportTypeEnum = "Duplicate"
	TagAPIPostReportReportTypeEnumInappropriate TagAPIPostReportReportTypeEnum = "Inappropriate"
	TagAPIPostReportReportTypeEnumOther         TagAPIPostReportReportTypeEnum = "Other"
)

func (e *TagAPIPostReportReportTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "InvalidInfo":
		fallthrough
	case "Duplicate":
		fallthrough
	case "Inappropriate":
		fallthrough
	case "Other":
		*e = TagAPIPostReportReportTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TagAPIPostReportReportTypeEnum: %s", s)
	}
}

type TagAPIPostReportQueryParams struct {
	// Notes. Optional.
	Notes string `queryParam:"style=form,explode=true,name=notes"`
	// Report type.
	ReportType TagAPIPostReportReportTypeEnum `queryParam:"style=form,explode=true,name=reportType"`
	// Version to be reported. Optional.
	VersionNumber int `queryParam:"style=form,explode=true,name=versionNumber"`
}

type TagAPIPostReportRequest struct {
	PathParams  TagAPIPostReportPathParams
	QueryParams TagAPIPostReportQueryParams
}

type TagAPIPostReportResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
