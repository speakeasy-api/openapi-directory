"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class V1Employees:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_employee(self, request: shared.V1Employee, security: operations.CreateEmployeeSecurity) -> operations.CreateEmployeeResponse:
        r"""CreateEmployee
        Use the CreateEmployee endpoint to add an employee to a Square
        account. Employees created with the Connect API have an initial status
        of `INACTIVE`. Inactive employees cannot sign in to Square Point of Sale
        until they are activated from the Square Dashboard. Employee status
        cannot be changed with the Connect API.
        
        Employee entities cannot be deleted. To disable employee profiles,
        set the employee's status to <code>INACTIVE</code>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/me/employees'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateEmployeeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V1Employee])
                res.v1_employee = out

        return res

    def create_employee_role(self, request: shared.V1EmployeeRole, security: operations.CreateEmployeeRoleSecurity) -> operations.CreateEmployeeRoleResponse:
        r"""CreateEmployeeRole
        Creates an employee role you can then assign to employees.
        
        Square accounts can include any number of roles that can be assigned to
        employees. These roles define the actions and permissions granted to an
        employee with that role. For example, an employee with a \"Shift Manager\"
        role might be able to issue refunds in Square Point of Sale, whereas an
        employee with a \"Clerk\" role might not.
        
        Roles are assigned with the [V1UpdateEmployee](https://developer.squareup.com/reference/square_2021-08-18/v1-employees-api/update-employee-role)
        endpoint. An employee can have only one role at a time.
        
        If an employee has no role, they have none of the permissions associated
        with roles. All employees can accept payments with Square Point of Sale.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/me/roles'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateEmployeeRoleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V1EmployeeRole])
                res.v1_employee_role = out

        return res

    def list_employee_roles(self, request: operations.ListEmployeeRolesRequest, security: operations.ListEmployeeRolesSecurity) -> operations.ListEmployeeRolesResponse:
        r"""ListEmployeeRoles
        Provides summary information for all of a business's employee roles.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/me/roles'
        
        query_params = utils.get_query_params(operations.ListEmployeeRolesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListEmployeeRolesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.V1EmployeeRole]])
                res.v1_employee_roles = out

        return res

    def list_employees(self, request: operations.ListEmployeesRequest, security: operations.ListEmployeesSecurity) -> operations.ListEmployeesResponse:
        r"""ListEmployees
        Provides summary information for all of a business's employees.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/me/employees'
        
        query_params = utils.get_query_params(operations.ListEmployeesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListEmployeesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.V1Employee]])
                res.v1_employees = out

        return res

    def retrieve_employee(self, request: operations.RetrieveEmployeeRequest, security: operations.RetrieveEmployeeSecurity) -> operations.RetrieveEmployeeResponse:
        r"""RetrieveEmployee
        Provides the details for a single employee.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveEmployeeRequest, base_url, '/v1/me/employees/{employee_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveEmployeeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V1Employee])
                res.v1_employee = out

        return res

    def retrieve_employee_role(self, request: operations.RetrieveEmployeeRoleRequest, security: operations.RetrieveEmployeeRoleSecurity) -> operations.RetrieveEmployeeRoleResponse:
        r"""RetrieveEmployeeRole
        Provides the details for a single employee role.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveEmployeeRoleRequest, base_url, '/v1/me/roles/{role_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveEmployeeRoleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V1EmployeeRole])
                res.v1_employee_role = out

        return res

    def update_employee(self, request: operations.UpdateEmployeeRequest, security: operations.UpdateEmployeeSecurity) -> operations.UpdateEmployeeResponse:
        r"""UpdateEmployee"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateEmployeeRequest, base_url, '/v1/me/employees/{employee_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "v1_employee", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateEmployeeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V1Employee])
                res.v1_employee = out

        return res

    def update_employee_role(self, request: operations.UpdateEmployeeRoleRequest, security: operations.UpdateEmployeeRoleSecurity) -> operations.UpdateEmployeeRoleResponse:
        r"""UpdateEmployeeRole
        Modifies the details of an employee role.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateEmployeeRoleRequest, base_url, '/v1/me/roles/{role_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "v1_employee_role", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateEmployeeRoleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V1EmployeeRole])
                res.v1_employee_role = out

        return res

    