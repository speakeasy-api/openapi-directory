/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * BackgroundJobLogEntry - Execution log of a background job.
 */
public class BackgroundJobLogEntry {
    /**
     * Details regarding an Apply background job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applyJobDetails")
    public ApplyJobDetails applyJobDetails;
    public BackgroundJobLogEntry withApplyJobDetails(ApplyJobDetails applyJobDetails) {
        this.applyJobDetails = applyJobDetails;
        return this;
    }
    
    /**
     * Job completion comment, such as how many entities were seeded, how many warnings were found during conversion, and similar information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completionComment")
    public String completionComment;
    public BackgroundJobLogEntry withCompletionComment(String completionComment) {
        this.completionComment = completionComment;
        return this;
    }
    
    /**
     * Job completion state, i.e. the final state after the job completed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completionState")
    public BackgroundJobLogEntryCompletionStateEnum completionState;
    public BackgroundJobLogEntry withCompletionState(BackgroundJobLogEntryCompletionStateEnum completionState) {
        this.completionState = completionState;
        return this;
    }
    
    /**
     * Details regarding a Convert background job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("convertJobDetails")
    public ConvertJobDetails convertJobDetails;
    public BackgroundJobLogEntry withConvertJobDetails(ConvertJobDetails convertJobDetails) {
        this.convertJobDetails = convertJobDetails;
        return this;
    }
    
    /**
     * The timestamp when the background job was finished.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("finishTime")
    public String finishTime;
    public BackgroundJobLogEntry withFinishTime(String finishTime) {
        this.finishTime = finishTime;
        return this;
    }
    
    /**
     * The background job log entry ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public BackgroundJobLogEntry withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Details regarding an Import Rules background job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("importRulesJobDetails")
    public ImportRulesJobDetails importRulesJobDetails;
    public BackgroundJobLogEntry withImportRulesJobDetails(ImportRulesJobDetails importRulesJobDetails) {
        this.importRulesJobDetails = importRulesJobDetails;
        return this;
    }
    
    /**
     * The type of job that was executed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobType")
    public BackgroundJobLogEntryJobTypeEnum jobType;
    public BackgroundJobLogEntry withJobType(BackgroundJobLogEntryJobTypeEnum jobType) {
        this.jobType = jobType;
        return this;
    }
    
    /**
     * Whether the client requested the conversion workspace to be committed after a successful completion of the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestAutocommit")
    public Boolean requestAutocommit;
    public BackgroundJobLogEntry withRequestAutocommit(Boolean requestAutocommit) {
        this.requestAutocommit = requestAutocommit;
        return this;
    }
    
    /**
     * Details regarding a Seed background job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("seedJobDetails")
    public SeedJobDetails seedJobDetails;
    public BackgroundJobLogEntry withSeedJobDetails(SeedJobDetails seedJobDetails) {
        this.seedJobDetails = seedJobDetails;
        return this;
    }
    
    /**
     * The timestamp when the background job was started.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startTime")
    public String startTime;
    public BackgroundJobLogEntry withStartTime(String startTime) {
        this.startTime = startTime;
        return this;
    }
    
}
