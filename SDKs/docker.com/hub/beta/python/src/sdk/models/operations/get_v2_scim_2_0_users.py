"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import scim_user as shared_scim_user
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class GetV2Scim20UsersSortOrderEnum(str, Enum):
    ASCENDING = 'ascending'
    DESCENDING = 'descending'


@dataclasses.dataclass
class GetV2Scim20UsersRequest:
    
    attributes: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'attributes', 'style': 'form', 'explode': True }})
    r"""Comma delimited list of attributes to limit to in the response."""  
    count: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'count', 'style': 'form', 'explode': True }})  
    filter: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter', 'style': 'form', 'explode': True }})  
    sort_by: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sortBy', 'style': 'form', 'explode': True }})
    r"""User attribute to sort by."""  
    sort_order: Optional[GetV2Scim20UsersSortOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sortOrder', 'style': 'form', 'explode': True }})  
    start_index: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'startIndex', 'style': 'form', 'explode': True }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetV2Scim20Users500ApplicationScimPlusJSON:
    r"""Internal Error"""
    
    detail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail'), 'exclude': lambda f: f is None }})
    r"""Details about why the request failed."""  
    schemas: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schemas'), 'exclude': lambda f: f is None }})  
    status: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetV2Scim20Users404ApplicationScimPlusJSON:
    r"""Not Found"""
    
    detail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail'), 'exclude': lambda f: f is None }})
    r"""Details about why the request failed."""  
    schemas: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schemas'), 'exclude': lambda f: f is None }})  
    status: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetV2Scim20Users403ApplicationScimPlusJSON:
    r"""Forbidden"""
    
    detail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail'), 'exclude': lambda f: f is None }})
    r"""Details about why the request failed."""  
    schemas: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schemas'), 'exclude': lambda f: f is None }})  
    status: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetV2Scim20Users401ApplicationScimPlusJSON:
    r"""Unauthorized"""
    
    detail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail'), 'exclude': lambda f: f is None }})
    r"""Details about why the request failed."""  
    schemas: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schemas'), 'exclude': lambda f: f is None }})  
    status: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetV2Scim20Users400ApplicationScimPlusJSON:
    r"""Bad Request"""
    
    detail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail'), 'exclude': lambda f: f is None }})
    r"""Details about why the request failed."""  
    schemas: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schemas'), 'exclude': lambda f: f is None }})  
    scim_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scimType'), 'exclude': lambda f: f is None }})
    r"""Some types of errors will return this per the specification."""  
    status: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetV2Scim20Users200ApplicationScimPlusJSON:
    
    items_per_page: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemsPerPage'), 'exclude': lambda f: f is None }})  
    resources: Optional[list[shared_scim_user.ScimUser]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resources'), 'exclude': lambda f: f is None }})  
    schemas: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schemas'), 'exclude': lambda f: f is None }})  
    start_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startIndex'), 'exclude': lambda f: f is None }})  
    total_results: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalResults'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetV2Scim20UsersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_v2_scim_2_0_users_200_application_scim_plus_json_object: Optional[GetV2Scim20Users200ApplicationScimPlusJSON] = dataclasses.field(default=None)  
    get_v2_scim_2_0_users_400_application_scim_plus_json_object: Optional[GetV2Scim20Users400ApplicationScimPlusJSON] = dataclasses.field(default=None)
    r"""Bad Request"""  
    get_v2_scim_2_0_users_401_application_scim_plus_json_object: Optional[GetV2Scim20Users401ApplicationScimPlusJSON] = dataclasses.field(default=None)
    r"""Unauthorized"""  
    get_v2_scim_2_0_users_403_application_scim_plus_json_object: Optional[GetV2Scim20Users403ApplicationScimPlusJSON] = dataclasses.field(default=None)
    r"""Forbidden"""  
    get_v2_scim_2_0_users_404_application_scim_plus_json_object: Optional[GetV2Scim20Users404ApplicationScimPlusJSON] = dataclasses.field(default=None)
    r"""Not Found"""  
    get_v2_scim_2_0_users_500_application_scim_plus_json_object: Optional[GetV2Scim20Users500ApplicationScimPlusJSON] = dataclasses.field(default=None)
    r"""Internal Error"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    