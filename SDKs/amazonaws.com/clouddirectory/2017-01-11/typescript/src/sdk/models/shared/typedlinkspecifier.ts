/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AttributeNameAndValue } from "./attributenameandvalue";
import { ObjectReference } from "./objectreference";
import { TypedLinkSchemaAndFacetName } from "./typedlinkschemaandfacetname";
import { Expose, Type } from "class-transformer";

/**
 * Contains all the information that is used to uniquely identify a typed link. The parameters discussed in this topic are used to uniquely specify the typed link being operated on. The <a>AttachTypedLink</a> API returns a typed link specifier while the <a>DetachTypedLink</a> API accepts one as input. Similarly, the <a>ListIncomingTypedLinks</a> and <a>ListOutgoingTypedLinks</a> API operations provide typed link specifiers as output. You can also construct a typed link specifier from scratch.
 */
export class TypedLinkSpecifier extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: AttributeNameAndValue })
  @Expose({ name: "IdentityAttributeValues" })
  @Type(() => AttributeNameAndValue)
  identityAttributeValues: AttributeNameAndValue[];

  @SpeakeasyMetadata()
  @Expose({ name: "SourceObjectReference" })
  @Type(() => ObjectReference)
  sourceObjectReference: ObjectReference;

  @SpeakeasyMetadata()
  @Expose({ name: "TargetObjectReference" })
  @Type(() => ObjectReference)
  targetObjectReference: ObjectReference;

  @SpeakeasyMetadata()
  @Expose({ name: "TypedLinkFacet" })
  @Type(() => TypedLinkSchemaAndFacetName)
  typedLinkFacet: TypedLinkSchemaAndFacetName;
}
