/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SourceOperationRequest - A work item that represents the different operations that can be performed on a user-defined Source specification.
 */
public class SourceOperationRequest {
    /**
     * A request to compute the SourceMetadata of a Source.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("getMetadata")
    public SourceGetMetadataRequest getMetadata;

    public SourceOperationRequest withGetMetadata(SourceGetMetadataRequest getMetadata) {
        this.getMetadata = getMetadata;
        return this;
    }
    
    /**
     * User-provided name of the Read instruction for this source.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public SourceOperationRequest withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * System-defined name for the Read instruction for this source in the original workflow graph.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originalName")
    public String originalName;

    public SourceOperationRequest withOriginalName(String originalName) {
        this.originalName = originalName;
        return this;
    }
    
    /**
     * Represents the operation to split a high-level Source specification into bundles (parts for parallel processing). At a high level, splitting of a source into bundles happens as follows: SourceSplitRequest is applied to the source. If it returns SOURCE_SPLIT_OUTCOME_USE_CURRENT, no further splitting happens and the source is used "as is". Otherwise, splitting is applied recursively to each produced DerivedSource. As an optimization, for any Source, if its does_not_need_splitting is true, the framework assumes that splitting this source would return SOURCE_SPLIT_OUTCOME_USE_CURRENT, and doesn't initiate a SourceSplitRequest. This applies both to the initial source being split and to bundles produced from it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("split")
    public SourceSplitRequest split;

    public SourceOperationRequest withSplit(SourceSplitRequest split) {
        this.split = split;
        return this;
    }
    
    /**
     * System-defined name of the stage containing the source operation. Unique across the workflow.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stageName")
    public String stageName;

    public SourceOperationRequest withStageName(String stageName) {
        this.stageName = stageName;
        return this;
    }
    
    /**
     * System-defined name of the Read instruction for this source. Unique across the workflow.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("systemName")
    public String systemName;

    public SourceOperationRequest withSystemName(String systemName) {
        this.systemName = systemName;
        return this;
    }
    
    public SourceOperationRequest(){}
}
