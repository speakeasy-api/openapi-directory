/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Error - This type contains a error or warning related to a call request. 
 */
public class Error {
    /**
     * The context or source of this error or warning.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category")
    public String category;

    public Error withCategory(String category) {
        this.category = category;
        return this;
    }
    
    /**
     * The name of the domain containing the service or application. For example, &lt;code&gt;sell&lt;/code&gt; is a domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domain")
    public String domain;

    public Error withDomain(String domain) {
        this.domain = domain;
        return this;
    }
    
    /**
     * A positive integer that uniquely identifies the specific error condition that occurred. Your application can use these values as error code identifiers in your customized error-handling algorithms.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorId")
    public Integer errorId;

    public Error withErrorId(Integer errorId) {
        this.errorId = errorId;
        return this;
    }
    
    /**
     * A list of one or more specific request elements (if any) associated with the error or warning. The format of these strings depends on the request payload format. For JSON, use JSONPath notation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inputRefIds")
    public String[] inputRefIds;

    public Error withInputRefIds(String[] inputRefIds) {
        this.inputRefIds = inputRefIds;
        return this;
    }
    
    /**
     * An expanded version of the &lt;b&gt;message&lt;/b&gt; field. &lt;br&gt;&lt;br&gt;&lt;b&gt;Maximum length:&lt;/b&gt; 200 characters
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("longMessage")
    public String longMessage;

    public Error withLongMessage(String longMessage) {
        this.longMessage = longMessage;
        return this;
    }
    
    /**
     * A message about the error or warning which is device agnostic and readable by end users and application developers. It explains what the error or warning is, and how to fix it (in a general sense). If applicable, the value is localized to the end user's requested locale. &lt;br&gt;&lt;br&gt;&lt;b&gt;Maximum length:&lt;/b&gt; 50 characters
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    public String message;

    public Error withMessage(String message) {
        this.message = message;
        return this;
    }
    
    /**
     * A list of one or more specific response elements (if any) associated with the error or warning. The format of these strings depends on the request payload format. For JSON, use JSONPath notation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("outputRefIds")
    public String[] outputRefIds;

    public Error withOutputRefIds(String[] outputRefIds) {
        this.outputRefIds = outputRefIds;
        return this;
    }
    
    /**
     * Contains a list of name-value pairs that provide additional information concerning this error or warning. Each item in the list is an input parameter that contributed to the error or warning condition.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parameters")
    public ErrorParameter[] parameters;

    public Error withParameters(ErrorParameter[] parameters) {
        this.parameters = parameters;
        return this;
    }
    
    /**
     * The name of the domain's subsystem or subdivision. For example, &lt;code&gt;fulfillment&lt;/code&gt; is a subdomain in the &lt;code&gt;sell&lt;/code&gt; domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subdomain")
    public String subdomain;

    public Error withSubdomain(String subdomain) {
        this.subdomain = subdomain;
        return this;
    }
    
    public Error(){}
}
