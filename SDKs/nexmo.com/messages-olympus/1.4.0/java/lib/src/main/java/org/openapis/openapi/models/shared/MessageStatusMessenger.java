/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * MessageStatusMessenger - Messenger
 */
public class MessageStatusMessenger {
    /**
     * The channel sending to.
     */
    @JsonProperty("channel")
    public MessageStatusMessengerChannelEnum channel;
    public MessageStatusMessenger withChannel(MessageStatusMessengerChannelEnum channel) {
        this.channel = channel;
        return this;
    }
    
    /**
     * Client reference of up to 100 characters. The reference will be present in every message status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_ref")
    public String clientRef;
    public MessageStatusMessenger withClientRef(String clientRef) {
        this.clientRef = clientRef;
        return this;
    }
    
    /**
     * If the message encountered a problem a descriptive error will be supplied in this object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    public MessageStatusMessengerError error;
    public MessageStatusMessenger withError(MessageStatusMessengerError error) {
        this.error = error;
        return this;
    }
    
    /**
     * The ID of the message sender
     * 
     */
    @JsonProperty("from")
    public String from;
    public MessageStatusMessenger withFrom(String from) {
        this.from = from;
        return this;
    }
    
    /**
     * The UUID of the message
     */
    @JsonProperty("message_uuid")
    public String messageUuid;
    public MessageStatusMessenger withMessageUuid(String messageUuid) {
        this.messageUuid = messageUuid;
        return this;
    }
    
    @JsonProperty("status")
    public MessageStatusMessengerStatusEnum status;
    public MessageStatusMessenger withStatus(MessageStatusMessengerStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * The datetime of when the event occurred, in `ISO 8601` format.
     */
    @JsonProperty("timestamp")
    public String timestamp;
    public MessageStatusMessenger withTimestamp(String timestamp) {
        this.timestamp = timestamp;
        return this;
    }
    
    /**
     * The ID of the message recipient
     * 
     */
    @JsonProperty("to")
    public String to;
    public MessageStatusMessenger withTo(String to) {
        this.to = to;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usage")
    public MessageStatusMessengerUsage usage;
    public MessageStatusMessenger withUsage(MessageStatusMessengerUsage usage) {
        this.usage = usage;
        return this;
    }
    
}
