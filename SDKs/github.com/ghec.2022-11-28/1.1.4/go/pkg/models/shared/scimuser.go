// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type ScimUserEmails struct {
	Primary *bool   `json:"primary,omitempty"`
	Type    *string `json:"type,omitempty"`
	Value   string  `json:"value"`
}

type ScimUserGroups struct {
	Display *string `json:"display,omitempty"`
	Value   *string `json:"value,omitempty"`
}

type ScimUserMeta struct {
	Created      *time.Time `json:"created,omitempty"`
	LastModified *time.Time `json:"lastModified,omitempty"`
	Location     *string    `json:"location,omitempty"`
	ResourceType *string    `json:"resourceType,omitempty"`
}

type ScimUserName struct {
	FamilyName *string `json:"familyName,omitempty"`
	Formatted  *string `json:"formatted,omitempty"`
	GivenName  *string `json:"givenName,omitempty"`
}

type ScimUserOperationsOpEnum string

const (
	ScimUserOperationsOpEnumAdd     ScimUserOperationsOpEnum = "add"
	ScimUserOperationsOpEnumRemove  ScimUserOperationsOpEnum = "remove"
	ScimUserOperationsOpEnumReplace ScimUserOperationsOpEnum = "replace"
)

func (e *ScimUserOperationsOpEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "add":
		fallthrough
	case "remove":
		fallthrough
	case "replace":
		*e = ScimUserOperationsOpEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ScimUserOperationsOpEnum: %s", s)
	}
}

type ScimUserOperations struct {
	Op    ScimUserOperationsOpEnum `json:"op"`
	Path  *string                  `json:"path,omitempty"`
	Value interface{}              `json:"value,omitempty"`
}

type ScimUserRoles struct {
	Display *string `json:"display,omitempty"`
	Primary *bool   `json:"primary,omitempty"`
	Type    *string `json:"type,omitempty"`
	Value   *string `json:"value,omitempty"`
}

// ScimUser - SCIM /Users provisioning endpoints
type ScimUser struct {
	// The active status of the User.
	Active bool `json:"active"`
	// The name of the user, suitable for display to end-users
	DisplayName *string `json:"displayName,omitempty"`
	// user emails
	Emails []ScimUserEmails `json:"emails"`
	// The ID of the User.
	ExternalID *string `json:"externalId,omitempty"`
	// associated groups
	Groups []ScimUserGroups `json:"groups,omitempty"`
	// Unique identifier of an external identity
	ID   string        `json:"id"`
	Meta ScimUserMeta  `json:"meta"`
	Name *ScimUserName `json:"name,omitempty"`
	// Set of operations to be performed
	Operations []ScimUserOperations `json:"operations,omitempty"`
	// The ID of the organization.
	OrganizationID *int64          `json:"organization_id,omitempty"`
	Roles          []ScimUserRoles `json:"roles,omitempty"`
	// SCIM schema used.
	Schemas []string `json:"schemas"`
	// Configured by the admin. Could be an email, login, or username
	UserName *string `json:"userName,omitempty"`
}
