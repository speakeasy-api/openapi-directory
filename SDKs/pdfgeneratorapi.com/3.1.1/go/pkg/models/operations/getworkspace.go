// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetWorkspaceRequest struct {
	// Workspace identifier
	WorkspaceID string `queryParam:"style=form,explode=true,name=workspaceId"`
}

// GetWorkspace500ApplicationJSON - Internal Server Error
type GetWorkspace500ApplicationJSON struct {
	// Error description
	Error *string `json:"error,omitempty"`
	// HTTP Error code
	Status *int64 `json:"status,omitempty"`
}

// GetWorkspace422ApplicationJSONErrorEnum - Error description
type GetWorkspace422ApplicationJSONErrorEnum string

const (
	GetWorkspace422ApplicationJSONErrorEnumUnableToParseJSONPleaseCheckFormatting               GetWorkspace422ApplicationJSONErrorEnum = "Unable to parse JSON, please check formatting"
	GetWorkspace422ApplicationJSONErrorEnumRequiredParameterMissing                             GetWorkspace422ApplicationJSONErrorEnum = "Required parameter missing"
	GetWorkspace422ApplicationJSONErrorEnumRequiredParameterMissingTemplateDefinitionNotDefined GetWorkspace422ApplicationJSONErrorEnum = "Required parameter missing: template definition not defined"
	GetWorkspace422ApplicationJSONErrorEnumRequiredParameterMissingTemplateNotDefined           GetWorkspace422ApplicationJSONErrorEnum = "Required parameter missing: template not defined"
)

func (e GetWorkspace422ApplicationJSONErrorEnum) ToPointer() *GetWorkspace422ApplicationJSONErrorEnum {
	return &e
}

func (e *GetWorkspace422ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Unable to parse JSON, please check formatting":
		fallthrough
	case "Required parameter missing":
		fallthrough
	case "Required parameter missing: template definition not defined":
		fallthrough
	case "Required parameter missing: template not defined":
		*e = GetWorkspace422ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWorkspace422ApplicationJSONErrorEnum: %v", v)
	}
}

// GetWorkspace422ApplicationJSON - Unprocessable Entity
type GetWorkspace422ApplicationJSON struct {
	// Error description
	Error *GetWorkspace422ApplicationJSONErrorEnum `json:"error,omitempty"`
	// HTTP Error code
	Status *int64 `json:"status,omitempty"`
}

// GetWorkspace404ApplicationJSONErrorEnum - Error description
type GetWorkspace404ApplicationJSONErrorEnum string

const (
	GetWorkspace404ApplicationJSONErrorEnumEntityNotFound                               GetWorkspace404ApplicationJSONErrorEnum = "Entity not found"
	GetWorkspace404ApplicationJSONErrorEnumResourceNotFound                             GetWorkspace404ApplicationJSONErrorEnum = "Resource not found"
	GetWorkspace404ApplicationJSONErrorEnumNoneOfTheTemplatesIsAvailableForTheWorkspace GetWorkspace404ApplicationJSONErrorEnum = "None of the templates is available for the workspace."
)

func (e GetWorkspace404ApplicationJSONErrorEnum) ToPointer() *GetWorkspace404ApplicationJSONErrorEnum {
	return &e
}

func (e *GetWorkspace404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Entity not found":
		fallthrough
	case "Resource not found":
		fallthrough
	case "None of the templates is available for the workspace.":
		*e = GetWorkspace404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWorkspace404ApplicationJSONErrorEnum: %v", v)
	}
}

// GetWorkspace404ApplicationJSON - Not Found
type GetWorkspace404ApplicationJSON struct {
	// Error description
	Error *GetWorkspace404ApplicationJSONErrorEnum `json:"error,omitempty"`
	// HTTP Error code
	Status *int64 `json:"status,omitempty"`
}

// GetWorkspace403ApplicationJSONErrorEnum - Error description
type GetWorkspace403ApplicationJSONErrorEnum string

const (
	GetWorkspace403ApplicationJSONErrorEnumYourAccountHasExceededTheMonthlyDocumentGenerationLimit GetWorkspace403ApplicationJSONErrorEnum = "Your account has exceeded the monthly document generation limit."
)

func (e GetWorkspace403ApplicationJSONErrorEnum) ToPointer() *GetWorkspace403ApplicationJSONErrorEnum {
	return &e
}

func (e *GetWorkspace403ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Your account has exceeded the monthly document generation limit.":
		*e = GetWorkspace403ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWorkspace403ApplicationJSONErrorEnum: %v", v)
	}
}

// GetWorkspace403ApplicationJSON - Forbidden
type GetWorkspace403ApplicationJSON struct {
	// Error description
	Error *GetWorkspace403ApplicationJSONErrorEnum `json:"error,omitempty"`
	// HTTP Error code
	Status *int64 `json:"status,omitempty"`
}

// GetWorkspace401ApplicationJSONErrorEnum - Error description
type GetWorkspace401ApplicationJSONErrorEnum string

const (
	GetWorkspace401ApplicationJSONErrorEnumAuthenticationFailedRequestExpired                        GetWorkspace401ApplicationJSONErrorEnum = "Authentication failed: request expired"
	GetWorkspace401ApplicationJSONErrorEnumAuthenticationFailedSignatureOrSecretMissing              GetWorkspace401ApplicationJSONErrorEnum = "Authentication failed: signature or secret missing"
	GetWorkspace401ApplicationJSONErrorEnumAuthenticationFailedWorkspaceMissing                      GetWorkspace401ApplicationJSONErrorEnum = "Authentication failed: workspace missing"
	GetWorkspace401ApplicationJSONErrorEnumAuthenticationFailedKeyMissing                            GetWorkspace401ApplicationJSONErrorEnum = "Authentication failed: key missing"
	GetWorkspace401ApplicationJSONErrorEnumAuthenticationFailedPropertyIssIssuerMissingInJwt         GetWorkspace401ApplicationJSONErrorEnum = "Authentication failed: property 'iss' (issuer) missing in JWT"
	GetWorkspace401ApplicationJSONErrorEnumAuthenticationFailedPropertySubSubjectMissingInJwt        GetWorkspace401ApplicationJSONErrorEnum = "Authentication failed: property 'sub' (subject) missing in JWT"
	GetWorkspace401ApplicationJSONErrorEnumAuthenticationFailedPropertyExpExpirationTimeMissingInJwt GetWorkspace401ApplicationJSONErrorEnum = "Authentication failed: property 'exp' (expiration time) missing in JWT"
	GetWorkspace401ApplicationJSONErrorEnumAuthenticationFailedInvalidIssIssuer                      GetWorkspace401ApplicationJSONErrorEnum = "Authentication failed: invalid 'iss' (issuer)"
	GetWorkspace401ApplicationJSONErrorEnumAuthenticationFailedIncorrectSignature                    GetWorkspace401ApplicationJSONErrorEnum = "Authentication failed: incorrect signature"
	GetWorkspace401ApplicationJSONErrorEnumAuthenticationFailed                                      GetWorkspace401ApplicationJSONErrorEnum = "Authentication failed"
)

func (e GetWorkspace401ApplicationJSONErrorEnum) ToPointer() *GetWorkspace401ApplicationJSONErrorEnum {
	return &e
}

func (e *GetWorkspace401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed: request expired":
		fallthrough
	case "Authentication failed: signature or secret missing":
		fallthrough
	case "Authentication failed: workspace missing":
		fallthrough
	case "Authentication failed: key missing":
		fallthrough
	case "Authentication failed: property 'iss' (issuer) missing in JWT":
		fallthrough
	case "Authentication failed: property 'sub' (subject) missing in JWT":
		fallthrough
	case "Authentication failed: property 'exp' (expiration time) missing in JWT":
		fallthrough
	case "Authentication failed: invalid 'iss' (issuer)":
		fallthrough
	case "Authentication failed: incorrect signature":
		fallthrough
	case "Authentication failed":
		*e = GetWorkspace401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWorkspace401ApplicationJSONErrorEnum: %v", v)
	}
}

// GetWorkspace401ApplicationJSON - Unauthorized
type GetWorkspace401ApplicationJSON struct {
	// Error description
	Error *GetWorkspace401ApplicationJSONErrorEnum `json:"error,omitempty"`
	// HTTP Error code
	Status *int64 `json:"status,omitempty"`
}

// GetWorkspace200ApplicationJSON - Workspace information
type GetWorkspace200ApplicationJSON struct {
	Response *shared.Workspace `json:"response,omitempty"`
}

type GetWorkspaceResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Workspace information
	GetWorkspace200ApplicationJSONObject *GetWorkspace200ApplicationJSON
	// Unauthorized
	GetWorkspace401ApplicationJSONObject *GetWorkspace401ApplicationJSON
	// Forbidden
	GetWorkspace403ApplicationJSONObject *GetWorkspace403ApplicationJSON
	// Not Found
	GetWorkspace404ApplicationJSONObject *GetWorkspace404ApplicationJSON
	// Unprocessable Entity
	GetWorkspace422ApplicationJSONObject *GetWorkspace422ApplicationJSON
	// Internal Server Error
	GetWorkspace500ApplicationJSONObject *GetWorkspace500ApplicationJSON
}
