// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetFloatingIpsIDActionsSortParameterSortEnum - Can be used multiple times.
type GetFloatingIpsIDActionsSortParameterSortEnum string

const (
	GetFloatingIpsIDActionsSortParameterSortEnumID           GetFloatingIpsIDActionsSortParameterSortEnum = "id"
	GetFloatingIpsIDActionsSortParameterSortEnumIDAsc        GetFloatingIpsIDActionsSortParameterSortEnum = "id:asc"
	GetFloatingIpsIDActionsSortParameterSortEnumIDDesc       GetFloatingIpsIDActionsSortParameterSortEnum = "id:desc"
	GetFloatingIpsIDActionsSortParameterSortEnumCommand      GetFloatingIpsIDActionsSortParameterSortEnum = "command"
	GetFloatingIpsIDActionsSortParameterSortEnumCommandAsc   GetFloatingIpsIDActionsSortParameterSortEnum = "command:asc"
	GetFloatingIpsIDActionsSortParameterSortEnumCommandDesc  GetFloatingIpsIDActionsSortParameterSortEnum = "command:desc"
	GetFloatingIpsIDActionsSortParameterSortEnumStatus       GetFloatingIpsIDActionsSortParameterSortEnum = "status"
	GetFloatingIpsIDActionsSortParameterSortEnumStatusAsc    GetFloatingIpsIDActionsSortParameterSortEnum = "status:asc"
	GetFloatingIpsIDActionsSortParameterSortEnumStatusDesc   GetFloatingIpsIDActionsSortParameterSortEnum = "status:desc"
	GetFloatingIpsIDActionsSortParameterSortEnumProgress     GetFloatingIpsIDActionsSortParameterSortEnum = "progress"
	GetFloatingIpsIDActionsSortParameterSortEnumProgressAsc  GetFloatingIpsIDActionsSortParameterSortEnum = "progress:asc"
	GetFloatingIpsIDActionsSortParameterSortEnumProgressDesc GetFloatingIpsIDActionsSortParameterSortEnum = "progress:desc"
	GetFloatingIpsIDActionsSortParameterSortEnumStarted      GetFloatingIpsIDActionsSortParameterSortEnum = "started"
	GetFloatingIpsIDActionsSortParameterSortEnumStartedAsc   GetFloatingIpsIDActionsSortParameterSortEnum = "started:asc"
	GetFloatingIpsIDActionsSortParameterSortEnumStartedDesc  GetFloatingIpsIDActionsSortParameterSortEnum = "started:desc"
	GetFloatingIpsIDActionsSortParameterSortEnumFinished     GetFloatingIpsIDActionsSortParameterSortEnum = "finished"
	GetFloatingIpsIDActionsSortParameterSortEnumFinishedAsc  GetFloatingIpsIDActionsSortParameterSortEnum = "finished:asc"
	GetFloatingIpsIDActionsSortParameterSortEnumFinishedDesc GetFloatingIpsIDActionsSortParameterSortEnum = "finished:desc"
)

func (e *GetFloatingIpsIDActionsSortParameterSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "id":
		fallthrough
	case "id:asc":
		fallthrough
	case "id:desc":
		fallthrough
	case "command":
		fallthrough
	case "command:asc":
		fallthrough
	case "command:desc":
		fallthrough
	case "status":
		fallthrough
	case "status:asc":
		fallthrough
	case "status:desc":
		fallthrough
	case "progress":
		fallthrough
	case "progress:asc":
		fallthrough
	case "progress:desc":
		fallthrough
	case "started":
		fallthrough
	case "started:asc":
		fallthrough
	case "started:desc":
		fallthrough
	case "finished":
		fallthrough
	case "finished:asc":
		fallthrough
	case "finished:desc":
		*e = GetFloatingIpsIDActionsSortParameterSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFloatingIpsIDActionsSortParameterSortEnum: %s", s)
	}
}

// GetFloatingIpsIDActionsStatusParameterStatusEnum - Can be used multiple times, the response will contain only Actions with specified statuses
type GetFloatingIpsIDActionsStatusParameterStatusEnum string

const (
	GetFloatingIpsIDActionsStatusParameterStatusEnumRunning GetFloatingIpsIDActionsStatusParameterStatusEnum = "running"
	GetFloatingIpsIDActionsStatusParameterStatusEnumSuccess GetFloatingIpsIDActionsStatusParameterStatusEnum = "success"
	GetFloatingIpsIDActionsStatusParameterStatusEnumError   GetFloatingIpsIDActionsStatusParameterStatusEnum = "error"
)

func (e *GetFloatingIpsIDActionsStatusParameterStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "running":
		fallthrough
	case "success":
		fallthrough
	case "error":
		*e = GetFloatingIpsIDActionsStatusParameterStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFloatingIpsIDActionsStatusParameterStatusEnum: %s", s)
	}
}

type GetFloatingIpsIDActionsRequest struct {
	// ID of the Floating IP
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
	// Can be used multiple times.
	Sort *GetFloatingIpsIDActionsSortParameterSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// Can be used multiple times, the response will contain only Actions with specified statuses
	Status *GetFloatingIpsIDActionsStatusParameterStatusEnum `queryParam:"style=form,explode=true,name=status"`
}

// GetFloatingIpsIDActions200ApplicationJSONActionError - Error message for the Action if error occurred, otherwise null
type GetFloatingIpsIDActions200ApplicationJSONActionError struct {
	// Fixed machine readable code
	Code string `json:"code"`
	// Humanized error message
	Message string `json:"message"`
}

type GetFloatingIpsIDActions200ApplicationJSONActionResources struct {
	// ID of the Resource
	ID int64 `json:"id"`
	// Type of resource referenced
	Type string `json:"type"`
}

// GetFloatingIpsIDActions200ApplicationJSONActionStatusEnum - Status of the Action
type GetFloatingIpsIDActions200ApplicationJSONActionStatusEnum string

const (
	GetFloatingIpsIDActions200ApplicationJSONActionStatusEnumSuccess GetFloatingIpsIDActions200ApplicationJSONActionStatusEnum = "success"
	GetFloatingIpsIDActions200ApplicationJSONActionStatusEnumRunning GetFloatingIpsIDActions200ApplicationJSONActionStatusEnum = "running"
	GetFloatingIpsIDActions200ApplicationJSONActionStatusEnumError   GetFloatingIpsIDActions200ApplicationJSONActionStatusEnum = "error"
)

func (e *GetFloatingIpsIDActions200ApplicationJSONActionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "running":
		fallthrough
	case "error":
		*e = GetFloatingIpsIDActions200ApplicationJSONActionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFloatingIpsIDActions200ApplicationJSONActionStatusEnum: %s", s)
	}
}

type GetFloatingIpsIDActions200ApplicationJSONAction struct {
	// Command executed in the Action
	Command string `json:"command"`
	// Error message for the Action if error occurred, otherwise null
	Error GetFloatingIpsIDActions200ApplicationJSONActionError `json:"error"`
	// Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
	Finished string `json:"finished"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Progress of Action in percent
	Progress float64 `json:"progress"`
	// Resources the Action relates to
	Resources []GetFloatingIpsIDActions200ApplicationJSONActionResources `json:"resources"`
	// Point in time when the Action was started (in ISO-8601 format)
	Started string `json:"started"`
	// Status of the Action
	Status GetFloatingIpsIDActions200ApplicationJSONActionStatusEnum `json:"status"`
}

// GetFloatingIpsIDActions200ApplicationJSON - The `actions` key contains a list of Actions
type GetFloatingIpsIDActions200ApplicationJSON struct {
	Actions []GetFloatingIpsIDActions200ApplicationJSONAction `json:"actions"`
}

type GetFloatingIpsIDActionsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The `actions` key contains a list of Actions
	GetFloatingIpsIDActions200ApplicationJSONObject *GetFloatingIpsIDActions200ApplicationJSON
}
