"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETModifyDBClusterEndpointActionEnum(str, Enum):
    MODIFY_DB_CLUSTER_ENDPOINT = 'ModifyDBClusterEndpoint'

class GETModifyDBClusterEndpointVersionEnum(str, Enum):
    TWO_THOUSAND_AND_FOURTEEN_10_31 = '2014-10-31'


@dataclasses.dataclass
class GETModifyDBClusterEndpointRequest:
    
    action: GETModifyDBClusterEndpointActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    db_cluster_endpoint_identifier: str = dataclasses.field(metadata={'query_param': { 'field_name': 'DBClusterEndpointIdentifier', 'style': 'form', 'explode': True }})
    r"""The identifier of the endpoint to modify. This parameter is stored as a lowercase string."""  
    version: GETModifyDBClusterEndpointVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    endpoint_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'EndpointType', 'style': 'form', 'explode': True }})
    r"""The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>."""  
    excluded_members: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ExcludedMembers', 'style': 'form', 'explode': True }})
    r"""List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty."""  
    static_members: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'StaticMembers', 'style': 'form', 'explode': True }})
    r"""List of DB instance identifiers that are part of the custom endpoint group."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETModifyDBClusterEndpointResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    