// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ModifyIpamResourceCidrResultIpamResourceCidrComplianceStatusEnum - The compliance status of the IPAM resource. For more information on compliance statuses, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.
type ModifyIpamResourceCidrResultIpamResourceCidrComplianceStatusEnum string

const (
	ModifyIpamResourceCidrResultIpamResourceCidrComplianceStatusEnumCompliant    ModifyIpamResourceCidrResultIpamResourceCidrComplianceStatusEnum = "compliant"
	ModifyIpamResourceCidrResultIpamResourceCidrComplianceStatusEnumNoncompliant ModifyIpamResourceCidrResultIpamResourceCidrComplianceStatusEnum = "noncompliant"
	ModifyIpamResourceCidrResultIpamResourceCidrComplianceStatusEnumUnmanaged    ModifyIpamResourceCidrResultIpamResourceCidrComplianceStatusEnum = "unmanaged"
	ModifyIpamResourceCidrResultIpamResourceCidrComplianceStatusEnumIgnored      ModifyIpamResourceCidrResultIpamResourceCidrComplianceStatusEnum = "ignored"
)

func (e *ModifyIpamResourceCidrResultIpamResourceCidrComplianceStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "compliant":
		fallthrough
	case "noncompliant":
		fallthrough
	case "unmanaged":
		fallthrough
	case "ignored":
		*e = ModifyIpamResourceCidrResultIpamResourceCidrComplianceStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ModifyIpamResourceCidrResultIpamResourceCidrComplianceStatusEnum: %s", s)
	}
}

// ModifyIpamResourceCidrResultIpamResourceCidrManagementStateEnum - The management state of the resource. For more information about management states, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.
type ModifyIpamResourceCidrResultIpamResourceCidrManagementStateEnum string

const (
	ModifyIpamResourceCidrResultIpamResourceCidrManagementStateEnumManaged   ModifyIpamResourceCidrResultIpamResourceCidrManagementStateEnum = "managed"
	ModifyIpamResourceCidrResultIpamResourceCidrManagementStateEnumUnmanaged ModifyIpamResourceCidrResultIpamResourceCidrManagementStateEnum = "unmanaged"
	ModifyIpamResourceCidrResultIpamResourceCidrManagementStateEnumIgnored   ModifyIpamResourceCidrResultIpamResourceCidrManagementStateEnum = "ignored"
)

func (e *ModifyIpamResourceCidrResultIpamResourceCidrManagementStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "managed":
		fallthrough
	case "unmanaged":
		fallthrough
	case "ignored":
		*e = ModifyIpamResourceCidrResultIpamResourceCidrManagementStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ModifyIpamResourceCidrResultIpamResourceCidrManagementStateEnum: %s", s)
	}
}

// ModifyIpamResourceCidrResultIpamResourceCidrOverlapStatusEnum - The overlap status of an IPAM resource. The overlap status tells you if the CIDR for a resource overlaps with another CIDR in the scope. For more information on overlap statuses, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.
type ModifyIpamResourceCidrResultIpamResourceCidrOverlapStatusEnum string

const (
	ModifyIpamResourceCidrResultIpamResourceCidrOverlapStatusEnumOverlapping    ModifyIpamResourceCidrResultIpamResourceCidrOverlapStatusEnum = "overlapping"
	ModifyIpamResourceCidrResultIpamResourceCidrOverlapStatusEnumNonoverlapping ModifyIpamResourceCidrResultIpamResourceCidrOverlapStatusEnum = "nonoverlapping"
	ModifyIpamResourceCidrResultIpamResourceCidrOverlapStatusEnumIgnored        ModifyIpamResourceCidrResultIpamResourceCidrOverlapStatusEnum = "ignored"
)

func (e *ModifyIpamResourceCidrResultIpamResourceCidrOverlapStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "overlapping":
		fallthrough
	case "nonoverlapping":
		fallthrough
	case "ignored":
		*e = ModifyIpamResourceCidrResultIpamResourceCidrOverlapStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ModifyIpamResourceCidrResultIpamResourceCidrOverlapStatusEnum: %s", s)
	}
}

// ModifyIpamResourceCidrResultIpamResourceCidrResourceTags - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.
type ModifyIpamResourceCidrResultIpamResourceCidrResourceTags struct {
	Key   *string
	Value *string
}

// ModifyIpamResourceCidrResultIpamResourceCidrResourceTypeEnum - The type of IPAM resource.
type ModifyIpamResourceCidrResultIpamResourceCidrResourceTypeEnum string

const (
	ModifyIpamResourceCidrResultIpamResourceCidrResourceTypeEnumVpc            ModifyIpamResourceCidrResultIpamResourceCidrResourceTypeEnum = "vpc"
	ModifyIpamResourceCidrResultIpamResourceCidrResourceTypeEnumSubnet         ModifyIpamResourceCidrResultIpamResourceCidrResourceTypeEnum = "subnet"
	ModifyIpamResourceCidrResultIpamResourceCidrResourceTypeEnumEip            ModifyIpamResourceCidrResultIpamResourceCidrResourceTypeEnum = "eip"
	ModifyIpamResourceCidrResultIpamResourceCidrResourceTypeEnumPublicIpv4Pool ModifyIpamResourceCidrResultIpamResourceCidrResourceTypeEnum = "public-ipv4-pool"
	ModifyIpamResourceCidrResultIpamResourceCidrResourceTypeEnumIpv6Pool       ModifyIpamResourceCidrResultIpamResourceCidrResourceTypeEnum = "ipv6-pool"
)

func (e *ModifyIpamResourceCidrResultIpamResourceCidrResourceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "vpc":
		fallthrough
	case "subnet":
		fallthrough
	case "eip":
		fallthrough
	case "public-ipv4-pool":
		fallthrough
	case "ipv6-pool":
		*e = ModifyIpamResourceCidrResultIpamResourceCidrResourceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ModifyIpamResourceCidrResultIpamResourceCidrResourceTypeEnum: %s", s)
	}
}

// ModifyIpamResourceCidrResultIpamResourceCidr - The CIDR of the resource.
type ModifyIpamResourceCidrResultIpamResourceCidr struct {
	ComplianceStatus *ModifyIpamResourceCidrResultIpamResourceCidrComplianceStatusEnum
	IPUsage          *float64
	IpamID           *string
	IpamPoolID       *string
	IpamScopeID      *string
	ManagementState  *ModifyIpamResourceCidrResultIpamResourceCidrManagementStateEnum
	OverlapStatus    *ModifyIpamResourceCidrResultIpamResourceCidrOverlapStatusEnum
	ResourceCidr     *string
	ResourceID       *string
	ResourceName     *string
	ResourceOwnerID  *string
	ResourceRegion   *string
	ResourceTags     []ModifyIpamResourceCidrResultIpamResourceCidrResourceTags
	ResourceType     *ModifyIpamResourceCidrResultIpamResourceCidrResourceTypeEnum
	VpcID            *string
}

// ModifyIpamResourceCidrResult - Success
type ModifyIpamResourceCidrResult struct {
	IpamResourceCidr *ModifyIpamResourceCidrResultIpamResourceCidr
}
