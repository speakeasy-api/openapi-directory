/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ErrorT } from "./error";
import { Manifest } from "./manifest";
import { ManifestRequest } from "./manifestrequest";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Object containing the href link to download the manifest file
 */
export class CreateManifestResponseBodyManifestDownload extends SpeakeasyBase {
  /**
   * The URL of the linked resource, if any
   */
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href?: string;
}

/**
 * An error response body
 */
export class CreateManifestResponseBody extends SpeakeasyBase {
  /**
   * A string that uniquely identifies the carrier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "carrier_id" })
  carrierId: string;

  /**
   * The date-time that the manifest was created
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  /**
   * The errors associated with the failed API call
   */
  @SpeakeasyMetadata({ elemType: ErrorT })
  @Expose({ name: "errors" })
  @Type(() => ErrorT)
  errors: ErrorT[];

  /**
   * A string that uniquely identifies the form
   */
  @SpeakeasyMetadata()
  @Expose({ name: "form_id" })
  formId: string;

  /**
   * An array of the label ids used in this manifest.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "label_ids" })
  labelIds?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "manifest_download" })
  @Type(() => CreateManifestResponseBodyManifestDownload)
  manifestDownload: CreateManifestResponseBodyManifestDownload;

  /**
   * A string that uniquely identifies the manifest
   */
  @SpeakeasyMetadata()
  @Expose({ name: "manifest_id" })
  manifestId: string;

  /**
   * Resulting manifest requests with statuses
   */
  @SpeakeasyMetadata({ elemType: ManifestRequest })
  @Expose({ name: "manifest_requests" })
  @Type(() => ManifestRequest)
  manifestRequests?: ManifestRequest[];

  /**
   * Resulting Manifests
   */
  @SpeakeasyMetadata({ elemType: Manifest })
  @Expose({ name: "manifests" })
  @Type(() => Manifest)
  manifests?: Manifest[];

  /**
   * A UUID that uniquely identifies the request id.
   *
   * @remarks
   * This can be given to the support team to help debug non-trivial issues that may occur
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "request_id" })
  requestId: string;

  /**
   * The date-time that the manifests shipments will be picked up
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ship_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  shipDate: Date;

  /**
   * The number of shipments that are included in this manifest
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shipments" })
  shipments: number;

  /**
   * A string that uniquely identifies the submission
   */
  @SpeakeasyMetadata()
  @Expose({ name: "submission_id" })
  submissionId: string;

  /**
   * A string that uniquely identifies the warehouse
   */
  @SpeakeasyMetadata()
  @Expose({ name: "warehouse_id" })
  warehouseId: string;
}
