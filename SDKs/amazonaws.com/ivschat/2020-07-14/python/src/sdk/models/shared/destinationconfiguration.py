"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import cloudwatchlogsdestinationconfiguration as shared_cloudwatchlogsdestinationconfiguration
from ..shared import firehosedestinationconfiguration as shared_firehosedestinationconfiguration
from ..shared import s3destinationconfiguration as shared_s3destinationconfiguration
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DestinationConfiguration:
    r"""A complex type that describes a location where chat logs will be stored. Each member represents the configuration of one log destination. For logging, you define only one type of destination (for CloudWatch Logs, Kinesis Firehose, or S3)."""
    
    cloud_watch_logs: Optional[shared_cloudwatchlogsdestinationconfiguration.CloudWatchLogsDestinationConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloudWatchLogs'), 'exclude': lambda f: f is None }})  
    firehose: Optional[shared_firehosedestinationconfiguration.FirehoseDestinationConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firehose'), 'exclude': lambda f: f is None }})  
    s3: Optional[shared_s3destinationconfiguration.S3DestinationConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('s3'), 'exclude': lambda f: f is None }})  
    