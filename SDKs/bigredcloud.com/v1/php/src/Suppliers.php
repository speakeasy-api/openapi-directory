<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Suppliers 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Removes an existing Supplier.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SuppliersDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SuppliersDeleteResponse
     */
	public function suppliersDelete(
        \OpenAPI\OpenAPI\Models\Operations\SuppliersDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SuppliersDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/suppliers/{id}', \OpenAPI\OpenAPI\Models\Operations\SuppliersDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SuppliersDeleteRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SuppliersDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->suppliersDelete200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of company's Suppliers. Supports OData querying protocol.
     * Filtering is forbidden.
     * Ordering is allowed by "id" and "code" fields.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\SuppliersGetResponse
     */
	public function suppliersGet(
    ): \OpenAPI\OpenAPI\Models\Operations\SuppliersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/suppliers');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SuppliersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pageResultSupplierQueryDto = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PageResultSupplierQueryDto', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of Supplier's account transactions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SuppliersGetAccountTransRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SuppliersGetAccountTransResponse
     */
	public function suppliersGetAccountTrans(
        \OpenAPI\OpenAPI\Models\Operations\SuppliersGetAccountTransRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SuppliersGetAccountTransResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/suppliers/{itemId}/accountTrans', \OpenAPI\OpenAPI\Models\Operations\SuppliersGetAccountTransRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SuppliersGetAccountTransResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountTranDtos = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\AccountTranDto>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a Supplier's opening balances, calculated for the next periods: current month, one month old, two months old, three and more months old.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SuppliersGetOpeningBalanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SuppliersGetOpeningBalanceResponse
     */
	public function suppliersGetOpeningBalance(
        \OpenAPI\OpenAPI\Models\Operations\SuppliersGetOpeningBalanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SuppliersGetOpeningBalanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/suppliers/{itemId}/openingBalance', \OpenAPI\OpenAPI\Models\Operations\SuppliersGetOpeningBalanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SuppliersGetOpeningBalanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ownerOpeningBalanceInPeriodsDto = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OwnerOpeningBalanceInPeriodsDto', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of Supplier's opening balance transactions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SuppliersGetOpeningBalanceListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SuppliersGetOpeningBalanceListResponse
     */
	public function suppliersGetOpeningBalanceList(
        \OpenAPI\OpenAPI\Models\Operations\SuppliersGetOpeningBalanceListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SuppliersGetOpeningBalanceListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/suppliers/{itemId}/openingBalanceList', \OpenAPI\OpenAPI\Models\Operations\SuppliersGetOpeningBalanceListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SuppliersGetOpeningBalanceListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ownerOpeningBalanceDtos = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\OwnerOpeningBalanceDto>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Supplier.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SupplierDto $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SuppliersPostResponse
     */
	public function suppliersPost(
        \OpenAPI\OpenAPI\Models\Shared\SupplierDto $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SuppliersPostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/suppliers');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SuppliersPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->suppliersPost200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Processes a batch of Suppliers.
     * 
     * @param array<\OpenAPI\OpenAPI\Models\Shared\BatchItemSupplierDto> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SuppliersProcessBatchResponse
     */
	public function suppliersProcessBatch(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SuppliersProcessBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/suppliers/batch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SuppliersProcessBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->suppliersProcessBatch200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing Supplier.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SuppliersPutRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SuppliersPutResponse
     */
	public function suppliersPut(
        \OpenAPI\OpenAPI\Models\Operations\SuppliersPutRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SuppliersPutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/suppliers/{id}', \OpenAPI\OpenAPI\Models\Operations\SuppliersPutRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "supplierDto", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SuppliersPutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->suppliersPut200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns information about a single Supplier. You may specify that Supplier's ledger balance should be calculated.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV1SuppliersIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV1SuppliersIdResponse
     */
	public function getV1SuppliersId(
        \OpenAPI\OpenAPI\Models\Operations\GetV1SuppliersIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV1SuppliersIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/suppliers/{id}', \OpenAPI\OpenAPI\Models\Operations\GetV1SuppliersIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetV1SuppliersIdRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV1SuppliersIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->supplierDto = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SupplierDto', 'json');
            }
        }

        return $response;
    }
}