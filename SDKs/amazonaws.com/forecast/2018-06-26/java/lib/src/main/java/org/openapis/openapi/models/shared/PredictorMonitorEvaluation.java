/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * PredictorMonitorEvaluation - Describes the results of a monitor evaluation.
 */
public class PredictorMonitorEvaluation {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EvaluationState")
    public String evaluationState;

    public PredictorMonitorEvaluation withEvaluationState(String evaluationState) {
        this.evaluationState = evaluationState;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("EvaluationTime")
    public OffsetDateTime evaluationTime;

    public PredictorMonitorEvaluation withEvaluationTime(OffsetDateTime evaluationTime) {
        this.evaluationTime = evaluationTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Message")
    public String message;

    public PredictorMonitorEvaluation withMessage(String message) {
        this.message = message;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MetricResults")
    public MetricResult[] metricResults;

    public PredictorMonitorEvaluation withMetricResults(MetricResult[] metricResults) {
        this.metricResults = metricResults;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MonitorArn")
    public String monitorArn;

    public PredictorMonitorEvaluation withMonitorArn(String monitorArn) {
        this.monitorArn = monitorArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MonitorDataSource")
    public MonitorDataSource monitorDataSource;

    public PredictorMonitorEvaluation withMonitorDataSource(MonitorDataSource monitorDataSource) {
        this.monitorDataSource = monitorDataSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NumItemsEvaluated")
    public Long numItemsEvaluated;

    public PredictorMonitorEvaluation withNumItemsEvaluated(Long numItemsEvaluated) {
        this.numItemsEvaluated = numItemsEvaluated;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PredictorEvent")
    public PredictorEvent predictorEvent;

    public PredictorMonitorEvaluation withPredictorEvent(PredictorEvent predictorEvent) {
        this.predictorEvent = predictorEvent;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ResourceArn")
    public String resourceArn;

    public PredictorMonitorEvaluation withResourceArn(String resourceArn) {
        this.resourceArn = resourceArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("WindowEndDatetime")
    public OffsetDateTime windowEndDatetime;

    public PredictorMonitorEvaluation withWindowEndDatetime(OffsetDateTime windowEndDatetime) {
        this.windowEndDatetime = windowEndDatetime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("WindowStartDatetime")
    public OffsetDateTime windowStartDatetime;

    public PredictorMonitorEvaluation withWindowStartDatetime(OffsetDateTime windowStartDatetime) {
        this.windowStartDatetime = windowStartDatetime;
        return this;
    }
    
    public PredictorMonitorEvaluation(){}
}
