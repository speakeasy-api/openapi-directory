// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetRepositoriesWorkspaceRepoSlugSrcSecurity struct {
	APIKey *shared.SchemeAPIKey `security:"scheme,type=apiKey,subtype=header"`
	Basic  *shared.SchemeBasic  `security:"scheme,type=http,subtype=basic"`
	Oauth2 *shared.SchemeOauth2 `security:"scheme,type=oauth2"`
}

type GetRepositoriesWorkspaceRepoSlugSrcPathParams struct {
	// This can either be the repository slug or the UUID of the repository,
	// surrounded by curly-braces, for example: `{repository UUID}`.
	//
	RepoSlug string `pathParam:"style=simple,explode=false,name=repo_slug"`
	// This can either be the workspace ID (slug) or the workspace UUID
	// surrounded by curly-braces, for example: `{workspace UUID}`.
	//
	Workspace string `pathParam:"style=simple,explode=false,name=workspace"`
}

// GetRepositoriesWorkspaceRepoSlugSrcFormatEnum - Instead of returning the file's contents, return the (json) meta data for it.
type GetRepositoriesWorkspaceRepoSlugSrcFormatEnum string

const (
	GetRepositoriesWorkspaceRepoSlugSrcFormatEnumMeta GetRepositoriesWorkspaceRepoSlugSrcFormatEnum = "meta"
)

func (e *GetRepositoriesWorkspaceRepoSlugSrcFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "meta":
		*e = GetRepositoriesWorkspaceRepoSlugSrcFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRepositoriesWorkspaceRepoSlugSrcFormatEnum: %s", s)
	}
}

type GetRepositoriesWorkspaceRepoSlugSrcQueryParams struct {
	// Instead of returning the file's contents, return the (json) meta data for it.
	Format *GetRepositoriesWorkspaceRepoSlugSrcFormatEnum `queryParam:"style=form,explode=true,name=format"`
}

type GetRepositoriesWorkspaceRepoSlugSrcRequest struct {
	PathParams  GetRepositoriesWorkspaceRepoSlugSrcPathParams
	QueryParams GetRepositoriesWorkspaceRepoSlugSrcQueryParams
	Security    GetRepositoriesWorkspaceRepoSlugSrcSecurity
}

type GetRepositoriesWorkspaceRepoSlugSrcResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// If the path or commit in the URL does not exist.
	Error map[string]interface{}
	// If the path matches a file, then the raw contents of the file are
	// returned (unless the `format=meta` query parameter was provided,
	// in which case a json document containing the file's meta data is
	// returned). If the path matches a directory, then a paginated
	// list of file and directory entries is returned (if the
	// `format=meta` query parameter was provided, then the json document
	// containing the directory's meta data is returned).
	//
	PaginatedTreeentries *shared.PaginatedTreeentries
}
