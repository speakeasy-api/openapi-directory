// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetNetworksIDActionsSortParameterSortEnum - Can be used multiple times.
type GetNetworksIDActionsSortParameterSortEnum string

const (
	GetNetworksIDActionsSortParameterSortEnumID           GetNetworksIDActionsSortParameterSortEnum = "id"
	GetNetworksIDActionsSortParameterSortEnumIDAsc        GetNetworksIDActionsSortParameterSortEnum = "id:asc"
	GetNetworksIDActionsSortParameterSortEnumIDDesc       GetNetworksIDActionsSortParameterSortEnum = "id:desc"
	GetNetworksIDActionsSortParameterSortEnumCommand      GetNetworksIDActionsSortParameterSortEnum = "command"
	GetNetworksIDActionsSortParameterSortEnumCommandAsc   GetNetworksIDActionsSortParameterSortEnum = "command:asc"
	GetNetworksIDActionsSortParameterSortEnumCommandDesc  GetNetworksIDActionsSortParameterSortEnum = "command:desc"
	GetNetworksIDActionsSortParameterSortEnumStatus       GetNetworksIDActionsSortParameterSortEnum = "status"
	GetNetworksIDActionsSortParameterSortEnumStatusAsc    GetNetworksIDActionsSortParameterSortEnum = "status:asc"
	GetNetworksIDActionsSortParameterSortEnumStatusDesc   GetNetworksIDActionsSortParameterSortEnum = "status:desc"
	GetNetworksIDActionsSortParameterSortEnumProgress     GetNetworksIDActionsSortParameterSortEnum = "progress"
	GetNetworksIDActionsSortParameterSortEnumProgressAsc  GetNetworksIDActionsSortParameterSortEnum = "progress:asc"
	GetNetworksIDActionsSortParameterSortEnumProgressDesc GetNetworksIDActionsSortParameterSortEnum = "progress:desc"
	GetNetworksIDActionsSortParameterSortEnumStarted      GetNetworksIDActionsSortParameterSortEnum = "started"
	GetNetworksIDActionsSortParameterSortEnumStartedAsc   GetNetworksIDActionsSortParameterSortEnum = "started:asc"
	GetNetworksIDActionsSortParameterSortEnumStartedDesc  GetNetworksIDActionsSortParameterSortEnum = "started:desc"
	GetNetworksIDActionsSortParameterSortEnumFinished     GetNetworksIDActionsSortParameterSortEnum = "finished"
	GetNetworksIDActionsSortParameterSortEnumFinishedAsc  GetNetworksIDActionsSortParameterSortEnum = "finished:asc"
	GetNetworksIDActionsSortParameterSortEnumFinishedDesc GetNetworksIDActionsSortParameterSortEnum = "finished:desc"
)

func (e GetNetworksIDActionsSortParameterSortEnum) ToPointer() *GetNetworksIDActionsSortParameterSortEnum {
	return &e
}

func (e *GetNetworksIDActionsSortParameterSortEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "id":
		fallthrough
	case "id:asc":
		fallthrough
	case "id:desc":
		fallthrough
	case "command":
		fallthrough
	case "command:asc":
		fallthrough
	case "command:desc":
		fallthrough
	case "status":
		fallthrough
	case "status:asc":
		fallthrough
	case "status:desc":
		fallthrough
	case "progress":
		fallthrough
	case "progress:asc":
		fallthrough
	case "progress:desc":
		fallthrough
	case "started":
		fallthrough
	case "started:asc":
		fallthrough
	case "started:desc":
		fallthrough
	case "finished":
		fallthrough
	case "finished:asc":
		fallthrough
	case "finished:desc":
		*e = GetNetworksIDActionsSortParameterSortEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworksIDActionsSortParameterSortEnum: %v", v)
	}
}

// GetNetworksIDActionsStatusParameterStatusEnum - Can be used multiple times, the response will contain only Actions with specified statuses
type GetNetworksIDActionsStatusParameterStatusEnum string

const (
	GetNetworksIDActionsStatusParameterStatusEnumRunning GetNetworksIDActionsStatusParameterStatusEnum = "running"
	GetNetworksIDActionsStatusParameterStatusEnumSuccess GetNetworksIDActionsStatusParameterStatusEnum = "success"
	GetNetworksIDActionsStatusParameterStatusEnumError   GetNetworksIDActionsStatusParameterStatusEnum = "error"
)

func (e GetNetworksIDActionsStatusParameterStatusEnum) ToPointer() *GetNetworksIDActionsStatusParameterStatusEnum {
	return &e
}

func (e *GetNetworksIDActionsStatusParameterStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "running":
		fallthrough
	case "success":
		fallthrough
	case "error":
		*e = GetNetworksIDActionsStatusParameterStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworksIDActionsStatusParameterStatusEnum: %v", v)
	}
}

type GetNetworksIDActionsRequest struct {
	// ID of the Network
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
	// Can be used multiple times.
	Sort *GetNetworksIDActionsSortParameterSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// Can be used multiple times, the response will contain only Actions with specified statuses
	Status *GetNetworksIDActionsStatusParameterStatusEnum `queryParam:"style=form,explode=true,name=status"`
}

// GetNetworksIDActionsActionsResponseActionError - Error message for the Action if error occurred, otherwise null
type GetNetworksIDActionsActionsResponseActionError struct {
	// Fixed machine readable code
	Code string `json:"code"`
	// Humanized error message
	Message string `json:"message"`
}

type GetNetworksIDActionsActionsResponseActionResources struct {
	// ID of the Resource
	ID int64 `json:"id"`
	// Type of resource referenced
	Type string `json:"type"`
}

// GetNetworksIDActionsActionsResponseActionStatusEnum - Status of the Action
type GetNetworksIDActionsActionsResponseActionStatusEnum string

const (
	GetNetworksIDActionsActionsResponseActionStatusEnumSuccess GetNetworksIDActionsActionsResponseActionStatusEnum = "success"
	GetNetworksIDActionsActionsResponseActionStatusEnumRunning GetNetworksIDActionsActionsResponseActionStatusEnum = "running"
	GetNetworksIDActionsActionsResponseActionStatusEnumError   GetNetworksIDActionsActionsResponseActionStatusEnum = "error"
)

func (e GetNetworksIDActionsActionsResponseActionStatusEnum) ToPointer() *GetNetworksIDActionsActionsResponseActionStatusEnum {
	return &e
}

func (e *GetNetworksIDActionsActionsResponseActionStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "running":
		fallthrough
	case "error":
		*e = GetNetworksIDActionsActionsResponseActionStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworksIDActionsActionsResponseActionStatusEnum: %v", v)
	}
}

type GetNetworksIDActionsActionsResponseAction struct {
	// Command executed in the Action
	Command string `json:"command"`
	// Error message for the Action if error occurred, otherwise null
	Error GetNetworksIDActionsActionsResponseActionError `json:"error"`
	// Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
	Finished string `json:"finished"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Progress of Action in percent
	Progress float64 `json:"progress"`
	// Resources the Action relates to
	Resources []GetNetworksIDActionsActionsResponseActionResources `json:"resources"`
	// Point in time when the Action was started (in ISO-8601 format)
	Started string `json:"started"`
	// Status of the Action
	Status GetNetworksIDActionsActionsResponseActionStatusEnum `json:"status"`
}

type GetNetworksIDActionsActionsResponseMetaPagination struct {
	// ID of the last page available. Can be null if the current page is the last one.
	LastPage float64 `json:"last_page"`
	// ID of the next page. Can be null if the current page is the last one.
	NextPage float64 `json:"next_page"`
	// Current page number
	Page float64 `json:"page"`
	// Maximum number of items shown per page in the response
	PerPage float64 `json:"per_page"`
	// ID of the previous page. Can be null if the current page is the first one.
	PreviousPage float64 `json:"previous_page"`
	// The total number of entries that exist in the database for this query. Nullable if unknown.
	TotalEntries float64 `json:"total_entries"`
}

type GetNetworksIDActionsActionsResponseMeta struct {
	Pagination GetNetworksIDActionsActionsResponseMetaPagination `json:"pagination"`
}

// GetNetworksIDActionsActionsResponse - The `actions` key contains a list of Actions
type GetNetworksIDActionsActionsResponse struct {
	Actions []GetNetworksIDActionsActionsResponseAction `json:"actions"`
	Meta    *GetNetworksIDActionsActionsResponseMeta    `json:"meta,omitempty"`
}

type GetNetworksIDActionsResponse struct {
	// The `actions` key contains a list of Actions
	ActionsResponse *GetNetworksIDActionsActionsResponse
	ContentType     string
	StatusCode      int
	RawResponse     *http.Response
}
