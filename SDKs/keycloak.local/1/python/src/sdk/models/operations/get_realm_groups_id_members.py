"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import userrepresentation as shared_userrepresentation
from typing import Optional


@dataclasses.dataclass
class GetRealmGroupsIDMembersRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})  
    realm: str = dataclasses.field(metadata={'path_param': { 'field_name': 'realm', 'style': 'simple', 'explode': False }})
    r"""realm name (not id!)"""  
    brief_representation: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'briefRepresentation', 'style': 'form', 'explode': True }})
    r"""Only return basic information (only guaranteed to return id, username, created, first and last name,
     email, enabled state, email verification state, federation link, and access.
     Note that it means that namely user attributes, required actions, and not before are not returned.)
    """  
    first: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'first', 'style': 'form', 'explode': True }})
    r"""Pagination offset"""  
    max: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max', 'style': 'form', 'explode': True }})
    r"""Maximum results size (defaults to 100)"""  
    

@dataclasses.dataclass
class GetRealmGroupsIDMembersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    user_representations: Optional[list[shared_userrepresentation.UserRepresentation]] = dataclasses.field(default=None)
    r"""success"""  
    