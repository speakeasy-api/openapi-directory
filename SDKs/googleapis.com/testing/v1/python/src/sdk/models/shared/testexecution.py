"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import environment as shared_environment
from ..shared import shard as shared_shard
from ..shared import testdetails as shared_testdetails
from ..shared import testspecification as shared_testspecification
from ..shared import toolresultsstep as shared_toolresultsstep
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TestExecutionStateEnum(str, Enum):
    r"""Output only. Indicates the current progress of the test execution (e.g., FINISHED)."""
    TEST_STATE_UNSPECIFIED = 'TEST_STATE_UNSPECIFIED'
    VALIDATING = 'VALIDATING'
    PENDING = 'PENDING'
    RUNNING = 'RUNNING'
    FINISHED = 'FINISHED'
    ERROR = 'ERROR'
    UNSUPPORTED_ENVIRONMENT = 'UNSUPPORTED_ENVIRONMENT'
    INCOMPATIBLE_ENVIRONMENT = 'INCOMPATIBLE_ENVIRONMENT'
    INCOMPATIBLE_ARCHITECTURE = 'INCOMPATIBLE_ARCHITECTURE'
    CANCELLED = 'CANCELLED'
    INVALID = 'INVALID'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestExecution:
    r"""A single test executed in a single environment."""
    
    environment: Optional[shared_environment.Environment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environment'), 'exclude': lambda f: f is None }})
    r"""The environment in which the test is run."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Output only. Unique id set by the service."""  
    matrix_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matrixId'), 'exclude': lambda f: f is None }})
    r"""Output only. Id of the containing TestMatrix."""  
    project_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('projectId'), 'exclude': lambda f: f is None }})
    r"""Output only. The cloud project that owns the test execution."""  
    shard: Optional[shared_shard.Shard] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shard'), 'exclude': lambda f: f is None }})
    r"""Output only. Details about the shard."""  
    state: Optional[TestExecutionStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. Indicates the current progress of the test execution (e.g., FINISHED)."""  
    test_details: Optional[shared_testdetails.TestDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('testDetails'), 'exclude': lambda f: f is None }})
    r"""Additional details about the progress of the running test."""  
    test_specification: Optional[shared_testspecification.TestSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('testSpecification'), 'exclude': lambda f: f is None }})
    r"""A description of how to run the test."""  
    timestamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'exclude': lambda f: f is None }})
    r"""Output only. The time this test execution was initially created."""  
    tool_results_step: Optional[shared_toolresultsstep.ToolResultsStep] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toolResultsStep'), 'exclude': lambda f: f is None }})
    r"""Represents a tool results step resource. This has the results of a TestExecution."""  
    