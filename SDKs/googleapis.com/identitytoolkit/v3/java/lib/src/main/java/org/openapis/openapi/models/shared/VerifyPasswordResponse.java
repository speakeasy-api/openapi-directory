/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * VerifyPasswordResponse - Request of verifying the password.
 */
public class VerifyPasswordResponse {
    /**
     * The name of the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;

    public VerifyPasswordResponse withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * The email returned by the IdP. NOTE: The federated login user may not own the email.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public String email;

    public VerifyPasswordResponse withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * If idToken is STS id token, then this field will be expiration time of STS id token in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expiresIn")
    public String expiresIn;

    public VerifyPasswordResponse withExpiresIn(String expiresIn) {
        this.expiresIn = expiresIn;
        return this;
    }
    
    /**
     * The GITKit token for authenticated user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idToken")
    public String idToken;

    public VerifyPasswordResponse withIdToken(String idToken) {
        this.idToken = idToken;
        return this;
    }
    
    /**
     * The fixed string "identitytoolkit#VerifyPasswordResponse".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public VerifyPasswordResponse withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * The RP local ID if it's already been mapped to the IdP account identified by the federated ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("localId")
    public String localId;

    public VerifyPasswordResponse withLocalId(String localId) {
        this.localId = localId;
        return this;
    }
    
    /**
     * The OAuth2 access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauthAccessToken")
    public String oauthAccessToken;

    public VerifyPasswordResponse withOauthAccessToken(String oauthAccessToken) {
        this.oauthAccessToken = oauthAccessToken;
        return this;
    }
    
    /**
     * The OAuth2 authorization code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauthAuthorizationCode")
    public String oauthAuthorizationCode;

    public VerifyPasswordResponse withOauthAuthorizationCode(String oauthAuthorizationCode) {
        this.oauthAuthorizationCode = oauthAuthorizationCode;
        return this;
    }
    
    /**
     * The lifetime in seconds of the OAuth2 access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauthExpireIn")
    public Integer oauthExpireIn;

    public VerifyPasswordResponse withOauthExpireIn(Integer oauthExpireIn) {
        this.oauthExpireIn = oauthExpireIn;
        return this;
    }
    
    /**
     * The URI of the user's photo at IdP
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("photoUrl")
    public String photoUrl;

    public VerifyPasswordResponse withPhotoUrl(String photoUrl) {
        this.photoUrl = photoUrl;
        return this;
    }
    
    /**
     * If idToken is STS id token, then this field will be refresh token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refreshToken")
    public String refreshToken;

    public VerifyPasswordResponse withRefreshToken(String refreshToken) {
        this.refreshToken = refreshToken;
        return this;
    }
    
    /**
     * Whether the email is registered.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registered")
    public Boolean registered;

    public VerifyPasswordResponse withRegistered(Boolean registered) {
        this.registered = registered;
        return this;
    }
    
    public VerifyPasswordResponse(){}
}
