<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class SDK
{
	public const SERVERS = [
		'https://ethereum.apidapp.com/1',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * deleteKeyKey
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteKeyKeyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteKeyKeyResponse
     */
	public function deleteKeyKey(
        \OpenAPI\OpenAPI\Models\Operations\DeleteKeyKeyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteKeyKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/key/{key}', \OpenAPI\OpenAPI\Models\Operations\DeleteKeyKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteKeyKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get account balance
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountIdResponse
     */
	public function getAccountId(
        \OpenAPI\OpenAPI\Models\Operations\GetAccountIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAccountIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/{id}', \OpenAPI\OpenAPI\Models\Operations\GetAccountIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Access detailed block information
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBlockResponse
     */
	public function getBlock(
    ): \OpenAPI\OpenAPI\Models\Operations\GetBlockResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/block');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBlockResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get information about particular block
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBlockIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBlockIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBlockIdResponse
     */
	public function getBlockId(
        \OpenAPI\OpenAPI\Models\Operations\GetBlockIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetBlockIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBlockIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/block/{id}', \OpenAPI\OpenAPI\Models\Operations\GetBlockIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBlockIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get transaction count within block
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBlockIdTransactionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBlockIdTransactionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBlockIdTransactionResponse
     */
	public function getBlockIdTransaction(
        \OpenAPI\OpenAPI\Models\Operations\GetBlockIdTransactionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetBlockIdTransactionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBlockIdTransactionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/block/{id}/transaction', \OpenAPI\OpenAPI\Models\Operations\GetBlockIdTransactionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBlockIdTransactionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get information about particular transaction within block
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBlockIdTransactionIndexRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBlockIdTransactionIndexSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBlockIdTransactionIndexResponse
     */
	public function getBlockIdTransactionIndex(
        \OpenAPI\OpenAPI\Models\Operations\GetBlockIdTransactionIndexRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetBlockIdTransactionIndexSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBlockIdTransactionIndexResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/block/{id}/transaction/{index}', \OpenAPI\OpenAPI\Models\Operations\GetBlockIdTransactionIndexRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBlockIdTransactionIndexResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of supported blockchains
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBlockchainResponse
     */
	public function getBlockchain(
    ): \OpenAPI\OpenAPI\Models\Operations\GetBlockchainResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/blockchain');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBlockchainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get information about blockchain woth given id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBlockchainIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBlockchainIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBlockchainIdResponse
     */
	public function getBlockchainId(
        \OpenAPI\OpenAPI\Models\Operations\GetBlockchainIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetBlockchainIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBlockchainIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/blockchain/{id}', \OpenAPI\OpenAPI\Models\Operations\GetBlockchainIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBlockchainIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get contract balance
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContractIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContractIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContractIdResponse
     */
	public function getContractId(
        \OpenAPI\OpenAPI\Models\Operations\GetContractIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetContractIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContractIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contract/{id}', \OpenAPI\OpenAPI\Models\Operations\GetContractIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContractIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get token information such as name, total amount in circulation, etc
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetErc20Response
     */
	public function getErc20(
    ): \OpenAPI\OpenAPI\Models\Operations\GetErc20Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/erc20');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetErc20Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get information amout token balance in the account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetErc20AddressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetErc20AddressResponse
     */
	public function getErc20Address(
        \OpenAPI\OpenAPI\Models\Operations\GetErc20AddressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetErc20AddressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/erc20/{address}', \OpenAPI\OpenAPI\Models\Operations\GetErc20AddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetErc20AddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getKey
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetKeyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetKeyResponse
     */
	public function getKey(
        \OpenAPI\OpenAPI\Models\Operations\GetKeyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/key');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetKeyRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get information about transaction by the transaction hash value
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTransactionHashRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTransactionHashSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTransactionHashResponse
     */
	public function getTransactionHash(
        \OpenAPI\OpenAPI\Models\Operations\GetTransactionHashRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTransactionHashSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTransactionHashResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/transaction/{hash}', \OpenAPI\OpenAPI\Models\Operations\GetTransactionHashRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTransactionHashResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get receipt detail information
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTransactionHashReceiptRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTransactionHashReceiptSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTransactionHashReceiptResponse
     */
	public function getTransactionHashReceipt(
        \OpenAPI\OpenAPI\Models\Operations\GetTransactionHashReceiptRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTransactionHashReceiptSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTransactionHashReceiptResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/transaction/{hash}/receipt', \OpenAPI\OpenAPI\Models\Operations\GetTransactionHashReceiptRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTransactionHashReceiptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get API version info
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVersionResponse
     */
	public function getVersion(
    ): \OpenAPI\OpenAPI\Models\Operations\GetVersionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/version');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get current account balance
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWalletResponse
     */
	public function getWallet(
    ): \OpenAPI\OpenAPI\Models\Operations\GetWalletResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/wallet');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWalletResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getWalletAccount
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWalletAccountResponse
     */
	public function getWalletAccount(
    ): \OpenAPI\OpenAPI\Models\Operations\GetWalletAccountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/wallet/account');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWalletAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get account balance
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWalletAccountIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWalletAccountIdResponse
     */
	public function getWalletAccountId(
        \OpenAPI\OpenAPI\Models\Operations\GetWalletAccountIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWalletAccountIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/wallet/account/{id}', \OpenAPI\OpenAPI\Models\Operations\GetWalletAccountIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWalletAccountIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * options
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\OptionsResponse
     */
	public function options(
    ): \OpenAPI\OpenAPI\Models\Operations\OptionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('OPTIONS', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OptionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * optionsAccount
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\OptionsAccountResponse
     */
	public function optionsAccount(
    ): \OpenAPI\OpenAPI\Models\Operations\OptionsAccountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('OPTIONS', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OptionsAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * optionsAccountId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OptionsAccountIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OptionsAccountIdResponse
     */
	public function optionsAccountId(
        \OpenAPI\OpenAPI\Models\Operations\OptionsAccountIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OptionsAccountIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/{id}', \OpenAPI\OpenAPI\Models\Operations\OptionsAccountIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('OPTIONS', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OptionsAccountIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * optionsBlock
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\OptionsBlockResponse
     */
	public function optionsBlock(
    ): \OpenAPI\OpenAPI\Models\Operations\OptionsBlockResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/block');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('OPTIONS', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OptionsBlockResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * optionsBlockId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OptionsBlockIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OptionsBlockIdResponse
     */
	public function optionsBlockId(
        \OpenAPI\OpenAPI\Models\Operations\OptionsBlockIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OptionsBlockIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/block/{id}', \OpenAPI\OpenAPI\Models\Operations\OptionsBlockIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('OPTIONS', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OptionsBlockIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * optionsBlockIdTransaction
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OptionsBlockIdTransactionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OptionsBlockIdTransactionResponse
     */
	public function optionsBlockIdTransaction(
        \OpenAPI\OpenAPI\Models\Operations\OptionsBlockIdTransactionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OptionsBlockIdTransactionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/block/{id}/transaction', \OpenAPI\OpenAPI\Models\Operations\OptionsBlockIdTransactionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('OPTIONS', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OptionsBlockIdTransactionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * optionsBlockIdTransactionIndex
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OptionsBlockIdTransactionIndexRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OptionsBlockIdTransactionIndexResponse
     */
	public function optionsBlockIdTransactionIndex(
        \OpenAPI\OpenAPI\Models\Operations\OptionsBlockIdTransactionIndexRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OptionsBlockIdTransactionIndexResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/block/{id}/transaction/{index}', \OpenAPI\OpenAPI\Models\Operations\OptionsBlockIdTransactionIndexRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('OPTIONS', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OptionsBlockIdTransactionIndexResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * optionsBlockchain
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\OptionsBlockchainResponse
     */
	public function optionsBlockchain(
    ): \OpenAPI\OpenAPI\Models\Operations\OptionsBlockchainResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/blockchain');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('OPTIONS', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OptionsBlockchainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * optionsBlockchainId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OptionsBlockchainIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OptionsBlockchainIdResponse
     */
	public function optionsBlockchainId(
        \OpenAPI\OpenAPI\Models\Operations\OptionsBlockchainIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OptionsBlockchainIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/blockchain/{id}', \OpenAPI\OpenAPI\Models\Operations\OptionsBlockchainIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('OPTIONS', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OptionsBlockchainIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * optionsContract
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\OptionsContractResponse
     */
	public function optionsContract(
    ): \OpenAPI\OpenAPI\Models\Operations\OptionsContractResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contract');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('OPTIONS', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OptionsContractResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * optionsContractId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OptionsContractIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OptionsContractIdResponse
     */
	public function optionsContractId(
        \OpenAPI\OpenAPI\Models\Operations\OptionsContractIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OptionsContractIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contract/{id}', \OpenAPI\OpenAPI\Models\Operations\OptionsContractIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('OPTIONS', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OptionsContractIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * optionsEcho
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\OptionsEchoResponse
     */
	public function optionsEcho(
    ): \OpenAPI\OpenAPI\Models\Operations\OptionsEchoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/echo');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('OPTIONS', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OptionsEchoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * optionsErc20
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\OptionsErc20Response
     */
	public function optionsErc20(
    ): \OpenAPI\OpenAPI\Models\Operations\OptionsErc20Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/erc20');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('OPTIONS', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OptionsErc20Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * optionsErc20Address
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OptionsErc20AddressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OptionsErc20AddressResponse
     */
	public function optionsErc20Address(
        \OpenAPI\OpenAPI\Models\Operations\OptionsErc20AddressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OptionsErc20AddressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/erc20/{address}', \OpenAPI\OpenAPI\Models\Operations\OptionsErc20AddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('OPTIONS', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OptionsErc20AddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * optionsKey
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\OptionsKeyResponse
     */
	public function optionsKey(
    ): \OpenAPI\OpenAPI\Models\Operations\OptionsKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/key');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('OPTIONS', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OptionsKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * optionsKeyKey
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OptionsKeyKeyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OptionsKeyKeyResponse
     */
	public function optionsKeyKey(
        \OpenAPI\OpenAPI\Models\Operations\OptionsKeyKeyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OptionsKeyKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/key/{key}', \OpenAPI\OpenAPI\Models\Operations\OptionsKeyKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('OPTIONS', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OptionsKeyKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * optionsTransaction
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\OptionsTransactionResponse
     */
	public function optionsTransaction(
    ): \OpenAPI\OpenAPI\Models\Operations\OptionsTransactionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/transaction');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('OPTIONS', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OptionsTransactionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * optionsTransactionHash
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OptionsTransactionHashRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OptionsTransactionHashResponse
     */
	public function optionsTransactionHash(
        \OpenAPI\OpenAPI\Models\Operations\OptionsTransactionHashRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OptionsTransactionHashResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/transaction/{hash}', \OpenAPI\OpenAPI\Models\Operations\OptionsTransactionHashRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('OPTIONS', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OptionsTransactionHashResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * optionsTransactionHashReceipt
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OptionsTransactionHashReceiptRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OptionsTransactionHashReceiptResponse
     */
	public function optionsTransactionHashReceipt(
        \OpenAPI\OpenAPI\Models\Operations\OptionsTransactionHashReceiptRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OptionsTransactionHashReceiptResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/transaction/{hash}/receipt', \OpenAPI\OpenAPI\Models\Operations\OptionsTransactionHashReceiptRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('OPTIONS', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OptionsTransactionHashReceiptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * optionsVersion
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\OptionsVersionResponse
     */
	public function optionsVersion(
    ): \OpenAPI\OpenAPI\Models\Operations\OptionsVersionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/version');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('OPTIONS', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OptionsVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * optionsWallet
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\OptionsWalletResponse
     */
	public function optionsWallet(
    ): \OpenAPI\OpenAPI\Models\Operations\OptionsWalletResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/wallet');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('OPTIONS', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OptionsWalletResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * optionsWalletAccount
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\OptionsWalletAccountResponse
     */
	public function optionsWalletAccount(
    ): \OpenAPI\OpenAPI\Models\Operations\OptionsWalletAccountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/wallet/account');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('OPTIONS', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OptionsWalletAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * optionsWalletAccountId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OptionsWalletAccountIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OptionsWalletAccountIdResponse
     */
	public function optionsWalletAccountId(
        \OpenAPI\OpenAPI\Models\Operations\OptionsWalletAccountIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OptionsWalletAccountIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/wallet/account/{id}', \OpenAPI\OpenAPI\Models\Operations\OptionsWalletAccountIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('OPTIONS', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OptionsWalletAccountIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * optionsWalletAccountIdPay
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OptionsWalletAccountIdPayRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OptionsWalletAccountIdPayResponse
     */
	public function optionsWalletAccountIdPay(
        \OpenAPI\OpenAPI\Models\Operations\OptionsWalletAccountIdPayRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OptionsWalletAccountIdPayResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/wallet/account/{id}/pay', \OpenAPI\OpenAPI\Models\Operations\OptionsWalletAccountIdPayRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('OPTIONS', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OptionsWalletAccountIdPayResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create new account
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAccountResponse
     */
	public function postAccount(
    ): \OpenAPI\OpenAPI\Models\Operations\PostAccountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new smart contract
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\PostContractResponse
     */
	public function postContract(
    ): \OpenAPI\OpenAPI\Models\Operations\PostContractResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contract');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostContractResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Call the contract
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostContractIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostContractIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostContractIdResponse
     */
	public function postContractId(
        \OpenAPI\OpenAPI\Models\Operations\PostContractIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostContractIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostContractIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contract/{id}', \OpenAPI\OpenAPI\Models\Operations\PostContractIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostContractIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * postErc20
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\PostErc20Response
     */
	public function postErc20(
    ): \OpenAPI\OpenAPI\Models\Operations\PostErc20Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/erc20');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostErc20Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Transfer tokens to another account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostErc20AddressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostErc20AddressResponse
     */
	public function postErc20Address(
        \OpenAPI\OpenAPI\Models\Operations\PostErc20AddressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostErc20AddressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/erc20/{address}', \OpenAPI\OpenAPI\Models\Operations\PostErc20AddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostErc20AddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * postKey
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\PostKeyResponse
     */
	public function postKey(
    ): \OpenAPI\OpenAPI\Models\Operations\PostKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/key');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new transaction. Transfer Ether between accounts
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\PostTransactionResponse
     */
	public function postTransaction(
    ): \OpenAPI\OpenAPI\Models\Operations\PostTransactionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/transaction');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostTransactionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create personal wallet
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\PostWalletResponse
     */
	public function postWallet(
    ): \OpenAPI\OpenAPI\Models\Operations\PostWalletResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/wallet');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostWalletResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * postWalletAccount
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\PostWalletAccountResponse
     */
	public function postWalletAccount(
    ): \OpenAPI\OpenAPI\Models\Operations\PostWalletAccountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/wallet/account');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostWalletAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * postWalletAccountIdContract
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostWalletAccountIdContractRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostWalletAccountIdContractResponse
     */
	public function postWalletAccountIdContract(
        \OpenAPI\OpenAPI\Models\Operations\PostWalletAccountIdContractRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostWalletAccountIdContractResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/wallet/account/{id}/contract', \OpenAPI\OpenAPI\Models\Operations\PostWalletAccountIdContractRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostWalletAccountIdContractResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * postWalletAccountIdErc20
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostWalletAccountIdErc20Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostWalletAccountIdErc20Response
     */
	public function postWalletAccountIdErc20(
        \OpenAPI\OpenAPI\Models\Operations\PostWalletAccountIdErc20Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostWalletAccountIdErc20Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/wallet/account/{id}/erc20', \OpenAPI\OpenAPI\Models\Operations\PostWalletAccountIdErc20Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostWalletAccountIdErc20Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Send payment from the account held within the wallet
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostWalletAccountIdPayRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostWalletAccountIdPayResponse
     */
	public function postWalletAccountIdPay(
        \OpenAPI\OpenAPI\Models\Operations\PostWalletAccountIdPayRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostWalletAccountIdPayResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/wallet/account/{id}/pay', \OpenAPI\OpenAPI\Models\Operations\PostWalletAccountIdPayRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostWalletAccountIdPayResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}