"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Fulfillments:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_fulfillments_json(self, request: operations.GetFulfillmentsJSONRequest) -> operations.GetFulfillmentsJSONResponse:
        r"""Retrieve all Fulfillments."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/fulfillments.json'
        
        query_params = utils.get_query_params(operations.GetFulfillmentsJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFulfillmentsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Fulfillment]])
                res.fulfillments = out

        return res

    def get_fulfillments_count_json(self, request: operations.GetFulfillmentsCountJSONRequest) -> operations.GetFulfillmentsCountJSONResponse:
        r"""Count all Fulfillments."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/fulfillments/count.json'
        
        query_params = utils.get_query_params(operations.GetFulfillmentsCountJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFulfillmentsCountJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Count])
                res.count = out

        return res

    def get_fulfillments_id_json(self, request: operations.GetFulfillmentsIDJSONRequest) -> operations.GetFulfillmentsIDJSONResponse:
        r"""Retrieve a single Fulfillment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFulfillmentsIDJSONRequest, base_url, '/fulfillments/{id}.json', request)
        
        query_params = utils.get_query_params(operations.GetFulfillmentsIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFulfillmentsIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Fulfillment])
                res.fulfillment = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_order_id_fulfillments_json(self, request: operations.GetOrderIDFulfillmentsJSONRequest) -> operations.GetOrderIDFulfillmentsJSONResponse:
        r"""Retrieve the Fulfillments associated with the Order."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrderIDFulfillmentsJSONRequest, base_url, '/order/{id}/fulfillments.json', request)
        
        query_params = utils.get_query_params(operations.GetOrderIDFulfillmentsJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrderIDFulfillmentsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Fulfillment]])
                res.fulfillments = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    