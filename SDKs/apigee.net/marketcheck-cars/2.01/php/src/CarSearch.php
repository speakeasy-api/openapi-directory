<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class CarSearch 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * API for auto-completion of inputs
     * 
     * Auto-complete the inputs of your end users
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AutoCompleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AutoCompleteResponse
     */
	public function autoComplete(
        \OpenAPI\OpenAPI\Models\Operations\AutoCompleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AutoCompleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/search/car/auto-complete');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AutoCompleteRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AutoCompleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchAutoCompleteResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchAutoCompleteResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Listing by id
     * 
     * Get a particular dealer listing by its id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetListingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetListingResponse
     */
	public function getListing(
        \OpenAPI\OpenAPI\Models\Operations\GetListingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetListingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/listing/car/{id}', \OpenAPI\OpenAPI\Models\Operations\GetListingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetListingRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetListingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listing = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Listing', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get dealers active inventory
     * 
     * Get dealers active inventory
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCarDealerInventoryActiveRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCarDealerInventoryActiveResponse
     */
	public function getCarDealerInventoryActive(
        \OpenAPI\OpenAPI\Models\Operations\GetCarDealerInventoryActiveRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCarDealerInventoryActiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/car/dealer/inventory/active');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCarDealerInventoryActiveRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCarDealerInventoryActiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Listing by id
     * 
     * Get a particular auction listing by its id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetListingCarAuctionIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetListingCarAuctionIdResponse
     */
	public function getListingCarAuctionId(
        \OpenAPI\OpenAPI\Models\Operations\GetListingCarAuctionIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetListingCarAuctionIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/listing/car/auction/{id}', \OpenAPI\OpenAPI\Models\Operations\GetListingCarAuctionIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetListingCarAuctionIdRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetListingCarAuctionIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listing = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Listing', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Long text Listings attributes for Listing with the given id
     * 
     * Get listing options, features, seller comments
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetListingCarAuctionIdExtraRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetListingCarAuctionIdExtraResponse
     */
	public function getListingCarAuctionIdExtra(
        \OpenAPI\OpenAPI\Models\Operations\GetListingCarAuctionIdExtraRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetListingCarAuctionIdExtraResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/listing/car/auction/{id}/extra', \OpenAPI\OpenAPI\Models\Operations\GetListingCarAuctionIdExtraRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetListingCarAuctionIdExtraRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetListingCarAuctionIdExtraResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listingExtraAttributes = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListingExtraAttributes', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Listing media by id
     * 
     * Get listing media (photo, photos) by id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetListingCarAuctionIdMediaRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetListingCarAuctionIdMediaResponse
     */
	public function getListingCarAuctionIdMedia(
        \OpenAPI\OpenAPI\Models\Operations\GetListingCarAuctionIdMediaRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetListingCarAuctionIdMediaResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/listing/car/auction/{id}/media', \OpenAPI\OpenAPI\Models\Operations\GetListingCarAuctionIdMediaRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetListingCarAuctionIdMediaRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetListingCarAuctionIdMediaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listingMedia = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListingMedia', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Listing by id
     * 
     * Get a particular private party listing by its id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetListingCarFsboIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetListingCarFsboIdResponse
     */
	public function getListingCarFsboId(
        \OpenAPI\OpenAPI\Models\Operations\GetListingCarFsboIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetListingCarFsboIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/listing/car/fsbo/{id}', \OpenAPI\OpenAPI\Models\Operations\GetListingCarFsboIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetListingCarFsboIdRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetListingCarFsboIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listing = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Listing', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Long text Listings attributes for Listing with the given id
     * 
     * Get listing options, features, seller comments
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetListingCarFsboIdExtraRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetListingCarFsboIdExtraResponse
     */
	public function getListingCarFsboIdExtra(
        \OpenAPI\OpenAPI\Models\Operations\GetListingCarFsboIdExtraRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetListingCarFsboIdExtraResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/listing/car/fsbo/{id}/extra', \OpenAPI\OpenAPI\Models\Operations\GetListingCarFsboIdExtraRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetListingCarFsboIdExtraRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetListingCarFsboIdExtraResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listingExtraAttributes = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListingExtraAttributes', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Listing media by id
     * 
     * Get listing media (photo, photos) by id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetListingCarFsboIdMediaRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetListingCarFsboIdMediaResponse
     */
	public function getListingCarFsboIdMedia(
        \OpenAPI\OpenAPI\Models\Operations\GetListingCarFsboIdMediaRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetListingCarFsboIdMediaResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/listing/car/fsbo/{id}/media', \OpenAPI\OpenAPI\Models\Operations\GetListingCarFsboIdMediaRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetListingCarFsboIdMediaRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetListingCarFsboIdMediaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listingMedia = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListingMedia', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Listing by id
     * 
     * Get a particular dealer listing by its id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetListingCarUkIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetListingCarUkIdResponse
     */
	public function getListingCarUkId(
        \OpenAPI\OpenAPI\Models\Operations\GetListingCarUkIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetListingCarUkIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/listing/car/uk/{id}', \OpenAPI\OpenAPI\Models\Operations\GetListingCarUkIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetListingCarUkIdRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetListingCarUkIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listing = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Listing', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Long text Listings attributes for Listing with the given id
     * 
     * Get listing options, features, seller comments
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetListingCarUkIdExtraRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetListingCarUkIdExtraResponse
     */
	public function getListingCarUkIdExtra(
        \OpenAPI\OpenAPI\Models\Operations\GetListingCarUkIdExtraRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetListingCarUkIdExtraResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/listing/car/uk/{id}/extra', \OpenAPI\OpenAPI\Models\Operations\GetListingCarUkIdExtraRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetListingCarUkIdExtraRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetListingCarUkIdExtraResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listingExtraAttributes = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListingExtraAttributes', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Listing media by id
     * 
     * Get listing media (photo, photos) by id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetListingCarUkIdMediaRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetListingCarUkIdMediaResponse
     */
	public function getListingCarUkIdMedia(
        \OpenAPI\OpenAPI\Models\Operations\GetListingCarUkIdMediaRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetListingCarUkIdMediaResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/listing/car/uk/{id}/media', \OpenAPI\OpenAPI\Models\Operations\GetListingCarUkIdMediaRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetListingCarUkIdMediaRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetListingCarUkIdMediaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listingMedia = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListingMedia', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Long text Listings attributes for Listing with the given id
     * 
     * Get listing options, features, seller comments
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetListingCarIdExtraRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetListingCarIdExtraResponse
     */
	public function getListingCarIdExtra(
        \OpenAPI\OpenAPI\Models\Operations\GetListingCarIdExtraRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetListingCarIdExtraResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/listing/car/{id}/extra', \OpenAPI\OpenAPI\Models\Operations\GetListingCarIdExtraRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetListingCarIdExtraRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetListingCarIdExtraResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listingExtraAttributes = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListingExtraAttributes', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Listing media by id
     * 
     * Get listing media (photo, photos) by id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetListingCarIdMediaRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetListingCarIdMediaResponse
     */
	public function getListingCarIdMedia(
        \OpenAPI\OpenAPI\Models\Operations\GetListingCarIdMediaRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetListingCarIdMediaResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/listing/car/{id}/media', \OpenAPI\OpenAPI\Models\Operations\GetListingCarIdMediaRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetListingCarIdMediaRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetListingCarIdMediaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listingMedia = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListingMedia', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets active car listings for the given search criteria
     * 
     * This endpoint is the meat of the API and serves many purposes. This API produces a list of currently active cars from the market for the given search criteria. The API results are limited to allow pagination upto 10000 rows. 
     *  The search API facilitates the following use cases - 
     * 1. Search Cars around a given geo-point within a given radius 
     * 2. Search cars for a specific year / make / model or combination of these 
     * 3. Search cars matching multiple year, make, model combinatins in the same search request
     * 4. Filter results by most car specification attributes
     * 5. Search for similar cars by VIN or Taxonomy VIN 
     * 6. Filter cars within a given price / miles / days on market (dom) range
     * 7. Specify a sort order for the results on price / miles / dom / listed date 
     * 8. Search cars for a given City / State combination 
     * 9. Get Facets to build the search drill downs 
     * 10. Get Market averages for price/miles/dom for your search
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSearchCarActiveRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSearchCarActiveResponse
     */
	public function getSearchCarActive(
        \OpenAPI\OpenAPI\Models\Operations\GetSearchCarActiveRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSearchCarActiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/search/car/active');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSearchCarActiveRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSearchCarActiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets active auction car listings for the given search criteria
     * 
     * This API produces a list of currently active auction cars from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows. 
     *  The search API facilitates the following use cases - 
     * 1. Search Cars around a given geo-point within a given radius 
     * 2. Search cars for a specific year / make / model or combination of these 
     * 3. Search cars matching multiple year, make, model combinatins in the same search request
     * 4. Filter results by most car specification attributes
     * 5. Search for similar cars by VIN or Taxonomy VIN 
     * 6. Filter cars within a given price / miles / days on market (dom) range
     * 7. Specify a sort order for the results on price / miles / dom / listed date 
     * 8. Search cars for a given City / State combination 
     * 9. Get Facets to build the search drill downs 
     * 10. Get Market averages for price/miles/dom for your search
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSearchCarAuctionActiveRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSearchCarAuctionActiveResponse
     */
	public function getSearchCarAuctionActive(
        \OpenAPI\OpenAPI\Models\Operations\GetSearchCarAuctionActiveRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSearchCarAuctionActiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/search/car/auction/active');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSearchCarAuctionActiveRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSearchCarAuctionActiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets active private party car listings for the given search criteria
     * 
     * This API produces a list of currently active FSBO cars from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows. 
     *  The search API facilitates the following use cases - 
     * 1. Search Cars around a given geo-point within a given radius 
     * 2. Search cars for a specific year / make / model or combination of these 
     * 3. Search cars matching multiple year, make, model combinatins in the same search request
     * 4. Filter results by most car specification attributes
     * 5. Search for similar cars by VIN or Taxonomy VIN 
     * 6. Filter cars within a given price / miles / days on market (dom) range
     * 7. Specify a sort order for the results on price / miles / dom / listed date 
     * 8. Search cars for a given City / State combination 
     * 9. Get Facets to build the search drill downs 
     * 10. Get Market averages for price/miles/dom for your search
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSearchCarFsboActiveRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSearchCarFsboActiveResponse
     */
	public function getSearchCarFsboActive(
        \OpenAPI\OpenAPI\Models\Operations\GetSearchCarFsboActiveRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSearchCarFsboActiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/search/car/fsbo/active');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSearchCarFsboActiveRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSearchCarFsboActiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets Recent car listings for the given search criteria
     * 
     * This API produces a list of recently active (past 90 days) cars from the market for the given search criteria
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSearchCarRecentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSearchCarRecentsResponse
     */
	public function getSearchCarRecents(
        \OpenAPI\OpenAPI\Models\Operations\GetSearchCarRecentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSearchCarRecentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/search/car/recents');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSearchCarRecentsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSearchCarRecentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets Recent UK car listings for the given search criteria
     * 
     * This API produces a list of recently active (past 90 days) cars from the market for the given search criteria
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSearchCarUkRecentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSearchCarUkRecentsResponse
     */
	public function getSearchCarUkRecents(
        \OpenAPI\OpenAPI\Models\Operations\GetSearchCarUkRecentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSearchCarUkRecentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/search/car/uk/recents');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSearchCarUkRecentsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSearchCarUkRecentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ukSearchResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UKSearchResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets active car listings in UK for the given search criteria
     * 
     * Search cars for sale in UK
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchResponse
     */
	public function search(
        \OpenAPI\OpenAPI\Models\Operations\SearchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/search/car/uk/active');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SearchRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ukSearchResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UKSearchResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}