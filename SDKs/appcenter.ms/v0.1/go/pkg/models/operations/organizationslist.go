// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type OrganizationsListSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type OrganizationsListDefaultApplicationJSONErrorCodeEnum string

const (
	OrganizationsListDefaultApplicationJSONErrorCodeEnumBadRequest          OrganizationsListDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	OrganizationsListDefaultApplicationJSONErrorCodeEnumConflict            OrganizationsListDefaultApplicationJSONErrorCodeEnum = "Conflict"
	OrganizationsListDefaultApplicationJSONErrorCodeEnumNotAcceptable       OrganizationsListDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	OrganizationsListDefaultApplicationJSONErrorCodeEnumNotFound            OrganizationsListDefaultApplicationJSONErrorCodeEnum = "NotFound"
	OrganizationsListDefaultApplicationJSONErrorCodeEnumInternalServerError OrganizationsListDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	OrganizationsListDefaultApplicationJSONErrorCodeEnumUnauthorized        OrganizationsListDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	OrganizationsListDefaultApplicationJSONErrorCodeEnumTooManyRequests     OrganizationsListDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e OrganizationsListDefaultApplicationJSONErrorCodeEnum) ToPointer() *OrganizationsListDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *OrganizationsListDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = OrganizationsListDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrganizationsListDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type OrganizationsListDefaultApplicationJSONError struct {
	Code    OrganizationsListDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                               `json:"message"`
}

// OrganizationsListDefaultApplicationJSON - Error
type OrganizationsListDefaultApplicationJSON struct {
	Error OrganizationsListDefaultApplicationJSONError `json:"error"`
}

// OrganizationsList200ApplicationJSONOriginEnum - The creation origin of this organization
type OrganizationsList200ApplicationJSONOriginEnum string

const (
	OrganizationsList200ApplicationJSONOriginEnumAppcenter OrganizationsList200ApplicationJSONOriginEnum = "appcenter"
	OrganizationsList200ApplicationJSONOriginEnumHockeyapp OrganizationsList200ApplicationJSONOriginEnum = "hockeyapp"
)

func (e OrganizationsList200ApplicationJSONOriginEnum) ToPointer() *OrganizationsList200ApplicationJSONOriginEnum {
	return &e
}

func (e *OrganizationsList200ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "appcenter":
		fallthrough
	case "hockeyapp":
		*e = OrganizationsList200ApplicationJSONOriginEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrganizationsList200ApplicationJSONOriginEnum: %v", v)
	}
}

type OrganizationsList200ApplicationJSON struct {
	// The display name of the organization
	DisplayName string `json:"display_name"`
	// The slug name of the organization
	Name string `json:"name"`
	// The creation origin of this organization
	Origin OrganizationsList200ApplicationJSONOriginEnum `json:"origin"`
}

type OrganizationsListResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	OrganizationsList200ApplicationJSONObjects []OrganizationsList200ApplicationJSON
	// Error
	OrganizationsListDefaultApplicationJSONObject *OrganizationsListDefaultApplicationJSON
}
