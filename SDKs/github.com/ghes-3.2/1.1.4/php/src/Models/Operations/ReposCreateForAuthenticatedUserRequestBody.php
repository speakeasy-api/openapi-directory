<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class ReposCreateForAuthenticatedUserRequestBody
{
    /**
     * Whether to allow merge commits for pull requests.
     * 
     * @var ?bool $allowMergeCommit
     */
	#[\JMS\Serializer\Annotation\SerializedName('allow_merge_commit')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $allowMergeCommit = null;
    
    /**
     * Whether to allow rebase merges for pull requests.
     * 
     * @var ?bool $allowRebaseMerge
     */
	#[\JMS\Serializer\Annotation\SerializedName('allow_rebase_merge')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $allowRebaseMerge = null;
    
    /**
     * Whether to allow squash merges for pull requests.
     * 
     * @var ?bool $allowSquashMerge
     */
	#[\JMS\Serializer\Annotation\SerializedName('allow_squash_merge')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $allowSquashMerge = null;
    
    /**
     * Whether the repository is initialized with a minimal README.
     * 
     * @var ?bool $autoInit
     */
	#[\JMS\Serializer\Annotation\SerializedName('auto_init')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $autoInit = null;
    
    /**
     * Whether to delete head branches when pull requests are merged
     * 
     * @var ?bool $deleteBranchOnMerge
     */
	#[\JMS\Serializer\Annotation\SerializedName('delete_branch_on_merge')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $deleteBranchOnMerge = null;
    
    /**
     * A short description of the repository.
     * 
     * @var ?string $description
     */
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $description = null;
    
    /**
     * The desired language or platform to apply to the .gitignore.
     * 
     * @var ?string $gitignoreTemplate
     */
	#[\JMS\Serializer\Annotation\SerializedName('gitignore_template')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $gitignoreTemplate = null;
    
    /**
     * Whether downloads are enabled.
     * 
     * @var ?bool $hasDownloads
     */
	#[\JMS\Serializer\Annotation\SerializedName('has_downloads')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $hasDownloads = null;
    
    /**
     * Whether issues are enabled.
     * 
     * @var ?bool $hasIssues
     */
	#[\JMS\Serializer\Annotation\SerializedName('has_issues')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $hasIssues = null;
    
    /**
     * Whether projects are enabled.
     * 
     * @var ?bool $hasProjects
     */
	#[\JMS\Serializer\Annotation\SerializedName('has_projects')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $hasProjects = null;
    
    /**
     * Whether the wiki is enabled.
     * 
     * @var ?bool $hasWiki
     */
	#[\JMS\Serializer\Annotation\SerializedName('has_wiki')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $hasWiki = null;
    
    /**
     * A URL with more information about the repository.
     * 
     * @var ?string $homepage
     */
	#[\JMS\Serializer\Annotation\SerializedName('homepage')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $homepage = null;
    
    /**
     * Whether this repository acts as a template that can be used to generate new repositories.
     * 
     * @var ?bool $isTemplate
     */
	#[\JMS\Serializer\Annotation\SerializedName('is_template')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $isTemplate = null;
    
    /**
     * The license keyword of the open source license for this repository.
     * 
     * @var ?string $licenseTemplate
     */
	#[\JMS\Serializer\Annotation\SerializedName('license_template')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $licenseTemplate = null;
    
    /**
     * The default value for a merge commit message.
     * 
     * 
     * - `PR_TITLE` - default to the pull request's title.
     * - `PR_BODY` - default to the pull request's body.
     * - `BLANK` - default to a blank commit message.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\ReposCreateForAuthenticatedUserRequestBodyMergeCommitMessageEnum $mergeCommitMessage
     */
	#[\JMS\Serializer\Annotation\SerializedName('merge_commit_message')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\ReposCreateForAuthenticatedUserRequestBodyMergeCommitMessageEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ReposCreateForAuthenticatedUserRequestBodyMergeCommitMessageEnum $mergeCommitMessage = null;
    
    /**
     * The default value for a merge commit title.
     * 
     * 
     * - `PR_TITLE` - default to the pull request's title.
     * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\ReposCreateForAuthenticatedUserRequestBodyMergeCommitTitleEnum $mergeCommitTitle
     */
	#[\JMS\Serializer\Annotation\SerializedName('merge_commit_title')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\ReposCreateForAuthenticatedUserRequestBodyMergeCommitTitleEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ReposCreateForAuthenticatedUserRequestBodyMergeCommitTitleEnum $mergeCommitTitle = null;
    
    /**
     * The name of the repository.
     * 
     * @var string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
    /**
     * Whether the repository is private.
     * 
     * @var ?bool $private
     */
	#[\JMS\Serializer\Annotation\SerializedName('private')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $private = null;
    
    /**
     * The default value for a squash merge commit message:
     * 
     * 
     * - `PR_BODY` - default to the pull request's body.
     * - `COMMIT_MESSAGES` - default to the branch's commit messages.
     * - `BLANK` - default to a blank commit message.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitMessageEnum $squashMergeCommitMessage
     */
	#[\JMS\Serializer\Annotation\SerializedName('squash_merge_commit_message')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitMessageEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitMessageEnum $squashMergeCommitMessage = null;
    
    /**
     * The default value for a squash merge commit title:
     * 
     * 
     * - `PR_TITLE` - default to the pull request's title.
     * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitTitleEnum $squashMergeCommitTitle
     */
	#[\JMS\Serializer\Annotation\SerializedName('squash_merge_commit_title')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitTitleEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitTitleEnum $squashMergeCommitTitle = null;
    
    /**
     * The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
     * 
     * @var ?int $teamId
     */
	#[\JMS\Serializer\Annotation\SerializedName('team_id')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $teamId = null;
    
	public function __construct()
	{
		$this->allowMergeCommit = null;
		$this->allowRebaseMerge = null;
		$this->allowSquashMerge = null;
		$this->autoInit = null;
		$this->deleteBranchOnMerge = null;
		$this->description = null;
		$this->gitignoreTemplate = null;
		$this->hasDownloads = null;
		$this->hasIssues = null;
		$this->hasProjects = null;
		$this->hasWiki = null;
		$this->homepage = null;
		$this->isTemplate = null;
		$this->licenseTemplate = null;
		$this->mergeCommitMessage = null;
		$this->mergeCommitTitle = null;
		$this->name = "";
		$this->private = null;
		$this->squashMergeCommitMessage = null;
		$this->squashMergeCommitTitle = null;
		$this->teamId = null;
	}
}
