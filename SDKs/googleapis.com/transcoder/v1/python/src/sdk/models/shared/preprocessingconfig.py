"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import audio as shared_audio
from ..shared import color as shared_color
from ..shared import crop as shared_crop
from ..shared import deblock as shared_deblock
from ..shared import deinterlace as shared_deinterlace
from ..shared import denoise as shared_denoise
from ..shared import pad as shared_pad
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PreprocessingConfig:
    r"""Preprocessing configurations."""
    
    audio: Optional[shared_audio.Audio] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audio'), 'exclude': lambda f: f is None }})
    r"""Audio preprocessing configuration."""  
    color: Optional[shared_color.Color] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color'), 'exclude': lambda f: f is None }})
    r"""Color preprocessing configuration. **Note:** This configuration is not supported."""  
    crop: Optional[shared_crop.Crop] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crop'), 'exclude': lambda f: f is None }})
    r"""Video cropping configuration for the input video. The cropped input video is scaled to match the output resolution."""  
    deblock: Optional[shared_deblock.Deblock] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deblock'), 'exclude': lambda f: f is None }})
    r"""Deblock preprocessing configuration. **Note:** This configuration is not supported."""  
    deinterlace: Optional[shared_deinterlace.Deinterlace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deinterlace'), 'exclude': lambda f: f is None }})
    r"""Deinterlace configuration for input video."""  
    denoise: Optional[shared_denoise.Denoise] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('denoise'), 'exclude': lambda f: f is None }})
    r"""Denoise preprocessing configuration. **Note:** This configuration is not supported."""  
    pad: Optional[shared_pad.Pad] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pad'), 'exclude': lambda f: f is None }})
    r"""Pad filter configuration for the input video. The padded input video is scaled after padding with black to match the output resolution."""  
    