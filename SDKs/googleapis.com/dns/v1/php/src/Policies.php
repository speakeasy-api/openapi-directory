<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Policies 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new Policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesCreateResponse
     */
	public function dnsPoliciesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/v1/projects/{project}/policies', \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "policy", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DnsPoliciesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a previously created Policy. Fails if the policy is still being referenced by a network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesDeleteResponse
     */
	public function dnsPoliciesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/v1/projects/{project}/policies/{policy}', \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DnsPoliciesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Fetches the representation of an existing Policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesGetResponse
     */
	public function dnsPoliciesGet(
        \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/v1/projects/{project}/policies/{policy}', \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DnsPoliciesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enumerates all Policies associated with a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesListResponse
     */
	public function dnsPoliciesList(
        \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/v1/projects/{project}/policies', \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DnsPoliciesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policiesListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PoliciesListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Applies a partial update to an existing Policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesPatchResponse
     */
	public function dnsPoliciesPatch(
        \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/v1/projects/{project}/policies/{policy}', \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "policy1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DnsPoliciesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policiesPatchResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PoliciesPatchResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing Policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesUpdateResponse
     */
	public function dnsPoliciesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/v1/projects/{project}/policies/{policy}', \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "policy1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DnsPoliciesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DnsPoliciesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policiesUpdateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PoliciesUpdateResponse', 'json');
            }
        }

        return $response;
    }
}