// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AccessibilityMobilityAccessibleElevatorExceptionEnum - Mobility accessible elevator exception.
type AccessibilityMobilityAccessibleElevatorExceptionEnum string

const (
	AccessibilityMobilityAccessibleElevatorExceptionEnumExceptionUnspecified AccessibilityMobilityAccessibleElevatorExceptionEnum = "EXCEPTION_UNSPECIFIED"
	AccessibilityMobilityAccessibleElevatorExceptionEnumUnderConstruction    AccessibilityMobilityAccessibleElevatorExceptionEnum = "UNDER_CONSTRUCTION"
	AccessibilityMobilityAccessibleElevatorExceptionEnumDependentOnSeason    AccessibilityMobilityAccessibleElevatorExceptionEnum = "DEPENDENT_ON_SEASON"
	AccessibilityMobilityAccessibleElevatorExceptionEnumDependentOnDayOfWeek AccessibilityMobilityAccessibleElevatorExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e AccessibilityMobilityAccessibleElevatorExceptionEnum) ToPointer() *AccessibilityMobilityAccessibleElevatorExceptionEnum {
	return &e
}

func (e *AccessibilityMobilityAccessibleElevatorExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = AccessibilityMobilityAccessibleElevatorExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccessibilityMobilityAccessibleElevatorExceptionEnum: %v", v)
	}
}

// AccessibilityMobilityAccessibleExceptionEnum - Mobility accessible exception.
type AccessibilityMobilityAccessibleExceptionEnum string

const (
	AccessibilityMobilityAccessibleExceptionEnumExceptionUnspecified AccessibilityMobilityAccessibleExceptionEnum = "EXCEPTION_UNSPECIFIED"
	AccessibilityMobilityAccessibleExceptionEnumUnderConstruction    AccessibilityMobilityAccessibleExceptionEnum = "UNDER_CONSTRUCTION"
	AccessibilityMobilityAccessibleExceptionEnumDependentOnSeason    AccessibilityMobilityAccessibleExceptionEnum = "DEPENDENT_ON_SEASON"
	AccessibilityMobilityAccessibleExceptionEnumDependentOnDayOfWeek AccessibilityMobilityAccessibleExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e AccessibilityMobilityAccessibleExceptionEnum) ToPointer() *AccessibilityMobilityAccessibleExceptionEnum {
	return &e
}

func (e *AccessibilityMobilityAccessibleExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = AccessibilityMobilityAccessibleExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccessibilityMobilityAccessibleExceptionEnum: %v", v)
	}
}

// AccessibilityMobilityAccessibleParkingExceptionEnum - Mobility accessible parking exception.
type AccessibilityMobilityAccessibleParkingExceptionEnum string

const (
	AccessibilityMobilityAccessibleParkingExceptionEnumExceptionUnspecified AccessibilityMobilityAccessibleParkingExceptionEnum = "EXCEPTION_UNSPECIFIED"
	AccessibilityMobilityAccessibleParkingExceptionEnumUnderConstruction    AccessibilityMobilityAccessibleParkingExceptionEnum = "UNDER_CONSTRUCTION"
	AccessibilityMobilityAccessibleParkingExceptionEnumDependentOnSeason    AccessibilityMobilityAccessibleParkingExceptionEnum = "DEPENDENT_ON_SEASON"
	AccessibilityMobilityAccessibleParkingExceptionEnumDependentOnDayOfWeek AccessibilityMobilityAccessibleParkingExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e AccessibilityMobilityAccessibleParkingExceptionEnum) ToPointer() *AccessibilityMobilityAccessibleParkingExceptionEnum {
	return &e
}

func (e *AccessibilityMobilityAccessibleParkingExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = AccessibilityMobilityAccessibleParkingExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccessibilityMobilityAccessibleParkingExceptionEnum: %v", v)
	}
}

// AccessibilityMobilityAccessiblePoolExceptionEnum - Mobility accessible pool exception.
type AccessibilityMobilityAccessiblePoolExceptionEnum string

const (
	AccessibilityMobilityAccessiblePoolExceptionEnumExceptionUnspecified AccessibilityMobilityAccessiblePoolExceptionEnum = "EXCEPTION_UNSPECIFIED"
	AccessibilityMobilityAccessiblePoolExceptionEnumUnderConstruction    AccessibilityMobilityAccessiblePoolExceptionEnum = "UNDER_CONSTRUCTION"
	AccessibilityMobilityAccessiblePoolExceptionEnumDependentOnSeason    AccessibilityMobilityAccessiblePoolExceptionEnum = "DEPENDENT_ON_SEASON"
	AccessibilityMobilityAccessiblePoolExceptionEnumDependentOnDayOfWeek AccessibilityMobilityAccessiblePoolExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e AccessibilityMobilityAccessiblePoolExceptionEnum) ToPointer() *AccessibilityMobilityAccessiblePoolExceptionEnum {
	return &e
}

func (e *AccessibilityMobilityAccessiblePoolExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = AccessibilityMobilityAccessiblePoolExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccessibilityMobilityAccessiblePoolExceptionEnum: %v", v)
	}
}

// Accessibility - Physical adaptations made to the property in consideration of varying levels of human physical ability.
type Accessibility struct {
	// Mobility accessible. Throughout the property there are physical adaptations to ease the stay of a person in a wheelchair, such as auto-opening doors, wide elevators, wide bathrooms or ramps.
	MobilityAccessible *bool `json:"mobilityAccessible,omitempty"`
	// Mobility accessible elevator. A lift that transports people from one level to another and is built to accommodate a wheelchair-using passenger owing to the width of its doors and placement of call buttons.
	MobilityAccessibleElevator *bool `json:"mobilityAccessibleElevator,omitempty"`
	// Mobility accessible elevator exception.
	MobilityAccessibleElevatorException *AccessibilityMobilityAccessibleElevatorExceptionEnum `json:"mobilityAccessibleElevatorException,omitempty"`
	// Mobility accessible exception.
	MobilityAccessibleException *AccessibilityMobilityAccessibleExceptionEnum `json:"mobilityAccessibleException,omitempty"`
	// Mobility accessible parking. The presence of a marked, designated area of prescribed size in which only registered, labeled vehicles transporting a person with physical challenges may park.
	MobilityAccessibleParking *bool `json:"mobilityAccessibleParking,omitempty"`
	// Mobility accessible parking exception.
	MobilityAccessibleParkingException *AccessibilityMobilityAccessibleParkingExceptionEnum `json:"mobilityAccessibleParkingException,omitempty"`
	// Mobility accessible pool. A swimming pool equipped with a mechanical chair that can be lowered and raised for the purpose of moving physically challenged guests into and out of the pool. May be powered by electricity or water. Also known as pool lift.
	MobilityAccessiblePool *bool `json:"mobilityAccessiblePool,omitempty"`
	// Mobility accessible pool exception.
	MobilityAccessiblePoolException *AccessibilityMobilityAccessiblePoolExceptionEnum `json:"mobilityAccessiblePoolException,omitempty"`
}
