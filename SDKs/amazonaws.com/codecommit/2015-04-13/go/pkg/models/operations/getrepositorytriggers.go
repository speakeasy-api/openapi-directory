// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetRepositoryTriggersXAmzTargetEnum
type GetRepositoryTriggersXAmzTargetEnum string

const (
	GetRepositoryTriggersXAmzTargetEnumCodeCommit20150413GetRepositoryTriggers GetRepositoryTriggersXAmzTargetEnum = "CodeCommit_20150413.GetRepositoryTriggers"
)

func (e GetRepositoryTriggersXAmzTargetEnum) ToPointer() *GetRepositoryTriggersXAmzTargetEnum {
	return &e
}

func (e *GetRepositoryTriggersXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CodeCommit_20150413.GetRepositoryTriggers":
		*e = GetRepositoryTriggersXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRepositoryTriggersXAmzTargetEnum: %v", v)
	}
}

type GetRepositoryTriggersRequest struct {
	GetRepositoryTriggersInput shared.GetRepositoryTriggersInput   `request:"mediaType=application/json"`
	XAmzAlgorithm              *string                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256          *string                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential             *string                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                   *string                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken          *string                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature              *string                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders          *string                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                 GetRepositoryTriggersXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetRepositoryTriggersResponse struct {
	ContentType string
	// EncryptionIntegrityChecksFailedException
	EncryptionIntegrityChecksFailedException interface{}
	// EncryptionKeyAccessDeniedException
	EncryptionKeyAccessDeniedException interface{}
	// EncryptionKeyDisabledException
	EncryptionKeyDisabledException interface{}
	// EncryptionKeyNotFoundException
	EncryptionKeyNotFoundException interface{}
	// EncryptionKeyUnavailableException
	EncryptionKeyUnavailableException interface{}
	// Success
	GetRepositoryTriggersOutput *shared.GetRepositoryTriggersOutput
	// InvalidRepositoryNameException
	InvalidRepositoryNameException interface{}
	// RepositoryDoesNotExistException
	RepositoryDoesNotExistException interface{}
	// RepositoryNameRequiredException
	RepositoryNameRequiredException interface{}
	StatusCode                      int
	RawResponse                     *http.Response
}
