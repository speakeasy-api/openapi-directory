"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class AchievementConfigurations:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def games_configuration_achievement_configurations_delete(self, request: operations.GamesConfigurationAchievementConfigurationsDeleteRequest, security: operations.GamesConfigurationAchievementConfigurationsDeleteSecurity) -> operations.GamesConfigurationAchievementConfigurationsDeleteResponse:
        r"""Delete the achievement configuration with the given ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GamesConfigurationAchievementConfigurationsDeleteRequest, base_url, '/games/v1configuration/achievements/{achievementId}', request)
        
        query_params = utils.get_query_params(operations.GamesConfigurationAchievementConfigurationsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GamesConfigurationAchievementConfigurationsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def games_configuration_achievement_configurations_get(self, request: operations.GamesConfigurationAchievementConfigurationsGetRequest, security: operations.GamesConfigurationAchievementConfigurationsGetSecurity) -> operations.GamesConfigurationAchievementConfigurationsGetResponse:
        r"""Retrieves the metadata of the achievement configuration with the given ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GamesConfigurationAchievementConfigurationsGetRequest, base_url, '/games/v1configuration/achievements/{achievementId}', request)
        
        query_params = utils.get_query_params(operations.GamesConfigurationAchievementConfigurationsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GamesConfigurationAchievementConfigurationsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AchievementConfiguration])
                res.achievement_configuration = out

        return res

    def games_configuration_achievement_configurations_insert(self, request: operations.GamesConfigurationAchievementConfigurationsInsertRequest, security: operations.GamesConfigurationAchievementConfigurationsInsertSecurity) -> operations.GamesConfigurationAchievementConfigurationsInsertResponse:
        r"""Insert a new achievement configuration in this application."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GamesConfigurationAchievementConfigurationsInsertRequest, base_url, '/games/v1configuration/applications/{applicationId}/achievements', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "achievement_configuration", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.GamesConfigurationAchievementConfigurationsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GamesConfigurationAchievementConfigurationsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AchievementConfiguration])
                res.achievement_configuration = out

        return res

    def games_configuration_achievement_configurations_list(self, request: operations.GamesConfigurationAchievementConfigurationsListRequest, security: operations.GamesConfigurationAchievementConfigurationsListSecurity) -> operations.GamesConfigurationAchievementConfigurationsListResponse:
        r"""Returns a list of the achievement configurations in this application."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GamesConfigurationAchievementConfigurationsListRequest, base_url, '/games/v1configuration/applications/{applicationId}/achievements', request)
        
        query_params = utils.get_query_params(operations.GamesConfigurationAchievementConfigurationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GamesConfigurationAchievementConfigurationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AchievementConfigurationListResponse])
                res.achievement_configuration_list_response = out

        return res

    def games_configuration_achievement_configurations_update(self, request: operations.GamesConfigurationAchievementConfigurationsUpdateRequest, security: operations.GamesConfigurationAchievementConfigurationsUpdateSecurity) -> operations.GamesConfigurationAchievementConfigurationsUpdateResponse:
        r"""Update the metadata of the achievement configuration with the given ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GamesConfigurationAchievementConfigurationsUpdateRequest, base_url, '/games/v1configuration/achievements/{achievementId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "achievement_configuration", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.GamesConfigurationAchievementConfigurationsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GamesConfigurationAchievementConfigurationsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AchievementConfiguration])
                res.achievement_configuration = out

        return res

    