/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { GymDTO } from "./gymdto";
import { PackageItemDTO } from "./packageitemdto";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The PackageDTO Class.
 *
 * @remarks
 * Contains relevant fields of Package DTO by masking actual Package entity's fields in application.
 *
 */
export class PackageDTO extends SpeakeasyBase {
  /**
   * Extra articles list added to the given package.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({ elemType: PackageItemDTO })
  @Expose({ name: "addOns" })
  @Type(() => PackageItemDTO)
  addOns?: PackageItemDTO[];

  /**
   * sum of addon fees.
   *
   * @remarks
   * incoming values for this filed will ignore.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "addonFee" })
  addonFee?: number;

  /**
   * Boolean value to indicate wheather package is available in all the gyms.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "applyForAllGyms" })
  applyForAllGyms?: boolean;

  /**
   * Gyms list where this package is available.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({ elemType: GymDTO })
  @Expose({ name: "availableGyms" })
  @Type(() => GymDTO)
  availableGyms?: GymDTO[];

  /**
   * Range of period a member is bound to the contract if he/she choose this package.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bindingPeriod" })
  bindingPeriod?: number;

  /**
   * Package created DateTime.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdDate?: Date;

  /**
   * Package created user.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdUser" })
  createdUser?: string;

  /**
   * Common descriptions about package.If there are more instructions
   *
   * @remarks
   *              can be stored as comma separated values.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * End date of the package.After that package is not valid for use.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "endDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endDate?: Date;

  /**
   * No of months the fixed package is valid for sale
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expireInMonths" })
  expireInMonths?: number;

  /**
   * What are the facilities, features available for package.ex:- wifi,
   *
   * @remarks
   * ACm etc.Can be stored as comma seperated values.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "features" })
  features?: string;

  /**
   * No of months gym member can come without payments.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "freeMonths" })
  freeMonths?: number;

  /**
   * Instruction to the gym members relevant to the package.
   *
   * @remarks
   *              If there are more instructions can be stored as comma seperated values.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "instructionsToGymUsers" })
  instructionsToGymUsers?: string;

  /**
   * Instruction to the MRM members relevant to the package.
   *
   * @remarks
   *              If there are more instructions can be stored as comma seperated values.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "instructionsToWebUsers" })
  instructionsToWebUsers?: string;

  /**
   * Boolean value to indicate this package is still active or not.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isActive" })
  isActive?: boolean;

  /**
   * Boolean value to indicate ATG transaction from bank is applicable or not.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isAtg" })
  isAtg?: boolean;

  /**
   * Boolean value to indicate the contract will auto renew after expiration
   *
   * @remarks
   *              if this package would be chosen.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isAutoRenew" })
  isAutoRenew?: boolean;

  /**
   * Boolean value to indicate if the first month charges is free.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isFirstMonthFree" })
  isFirstMonthFree?: boolean;

  /**
   * Boolean value to indicate this package has registration fee or not.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isRegistrationFee" })
  isRegistrationFee?: boolean;

  /**
   * Boolean value to indicate rest amount is applicable or not.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isRestAmount" })
  isRestAmount?: boolean;

  /**
   * Boolean value to indicate package is visible in Mobile App or not.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isShownInMobile" })
  isShownInMobile?: boolean;

  /**
   * Boolean value to indicate package can be sponsored or not by other party.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isSponsorPackage" })
  isSponsorPackage?: boolean;

  /**
   * If a member join the gym middle of a month via this package,
   *
   * @remarks
   *              what is the maximum amount of price can be neglected from payment from the member.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maximumGiveAwayRestAmount" })
  maximumGiveAwayRestAmount?: number;

  /**
   * Boolean value to indicate member can add extra addons he wish if he choose this package.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "memberCanAddAddOns" })
  memberCanAddAddOns?: boolean;

  /**
   * Boolean value to indicate if member can leave from contract within
   *
   * @remarks
   *              free period if he/she choose this package.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "memberCanLeaveWithinFreePeriod" })
  memberCanLeaveWithinFreePeriod?: boolean;

  /**
   * Boolean value to indicate member can remove already added addons if he choose this package.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "memberCanRemoveAddOns" })
  memberCanRemoveAddOns?: boolean;

  /**
   * Package last modified DateTime.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modifiedDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  modifiedDate?: Date;

  /**
   * Package last modified user.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modifiedUser" })
  modifiedUser?: string;

  /**
   * Monthly installment fee if package is not fixed visit.
   *
   * @remarks
   * addition of the servicefee and addon fees divided by binding period.
   *              read only
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "monthlyFee" })
  monthlyFee?: number;

  /**
   * Next Package the contract continue after the binding period of this package.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextPackageNumber" })
  nextPackageNumber?: number;

  /**
   * Maximum Number of installment a member can divide the package price/cost to pay.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "numberOfInstallments" })
  numberOfInstallments?: number;

  /**
   * If package is fixed visit type, then how many visits are available for this package.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "numberOfVisits" })
  numberOfVisits?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "packageId" })
  packageId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "packageName" })
  packageName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "packageNumber" })
  packageNumber?: string;

  /**
   * Package type can be either fixed visit or unlimited.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "packageType" })
  packageType: string;

  /**
   * Cost/Price of the single visit to gym.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "perVisitPrice" })
  perVisitPrice?: number;

  /**
   * Registartion fee for the package at a gym.
   *
   * @remarks
   *              read only
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "registrationFee" })
  registrationFee: number;

  /**
   * total Service charge of the package for entire period.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serviceFee" })
  serviceFee: number;

  /**
   * Boolean value to show this package in MRM system or not.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shownInWeb" })
  shownInWeb?: boolean;

  /**
   * Start date of the package.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "startDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startDate?: Date;

  /**
   * Comma separated string values in case of need of maintain some labels kind of
   *
   * @remarks
   *              stuff relevant to the package.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: string;

  /**
   * total price for the package including Addon fees, service fee and registration fee.
   *
   * @remarks
   * incoming values for this field will ignore.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalPrice" })
  totalPrice?: number;
}
