// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TrackDataRequestOnlyForUploadingForPROUsers struct {
	OnlyForUploadingForPROUsers string `multipartForm:"name=Only for uploading, for PRO users"`
	Content                     []byte `multipartForm:"content"`
}

type TrackDataRequestOnlyForUploading struct {
	OnlyForUploading string `multipartForm:"name=Only for uploading"`
	Content          []byte `multipartForm:"content"`
}

// TrackDataRequestTrackEmbeddableByEnum - who can embed this track "all", "me", or "none"
type TrackDataRequestTrackEmbeddableByEnum string

const (
	TrackDataRequestTrackEmbeddableByEnumAll  TrackDataRequestTrackEmbeddableByEnum = "all"
	TrackDataRequestTrackEmbeddableByEnumMe   TrackDataRequestTrackEmbeddableByEnum = "me"
	TrackDataRequestTrackEmbeddableByEnumNone TrackDataRequestTrackEmbeddableByEnum = "none"
)

func (e TrackDataRequestTrackEmbeddableByEnum) ToPointer() *TrackDataRequestTrackEmbeddableByEnum {
	return &e
}

func (e *TrackDataRequestTrackEmbeddableByEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "me":
		fallthrough
	case "none":
		*e = TrackDataRequestTrackEmbeddableByEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TrackDataRequestTrackEmbeddableByEnum: %v", v)
	}
}

// TrackDataRequestTrackLicenseEnum - Possible values: no-rights-reserved, all-rights-reserved, cc-by, cc-by-nc, cc-by-nd, cc-by-sa, cc-by-nc-nd, cc-by-nc-sa
type TrackDataRequestTrackLicenseEnum string

const (
	TrackDataRequestTrackLicenseEnumNoRightsReserved  TrackDataRequestTrackLicenseEnum = "no-rights-reserved"
	TrackDataRequestTrackLicenseEnumAllRightsReserved TrackDataRequestTrackLicenseEnum = "all-rights-reserved"
	TrackDataRequestTrackLicenseEnumCcBy              TrackDataRequestTrackLicenseEnum = "cc-by"
	TrackDataRequestTrackLicenseEnumCcByNc            TrackDataRequestTrackLicenseEnum = "cc-by-nc"
	TrackDataRequestTrackLicenseEnumCcByNd            TrackDataRequestTrackLicenseEnum = "cc-by-nd"
	TrackDataRequestTrackLicenseEnumCcBySa            TrackDataRequestTrackLicenseEnum = "cc-by-sa"
	TrackDataRequestTrackLicenseEnumCcByNcNd          TrackDataRequestTrackLicenseEnum = "cc-by-nc-nd"
	TrackDataRequestTrackLicenseEnumCcByNcSa          TrackDataRequestTrackLicenseEnum = "cc-by-nc-sa"
)

func (e TrackDataRequestTrackLicenseEnum) ToPointer() *TrackDataRequestTrackLicenseEnum {
	return &e
}

func (e *TrackDataRequestTrackLicenseEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "no-rights-reserved":
		fallthrough
	case "all-rights-reserved":
		fallthrough
	case "cc-by":
		fallthrough
	case "cc-by-nc":
		fallthrough
	case "cc-by-nd":
		fallthrough
	case "cc-by-sa":
		fallthrough
	case "cc-by-nc-nd":
		fallthrough
	case "cc-by-nc-sa":
		*e = TrackDataRequestTrackLicenseEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TrackDataRequestTrackLicenseEnum: %v", v)
	}
}

type TrackDataRequestTrackSharingEnum string

const (
	TrackDataRequestTrackSharingEnumPublic  TrackDataRequestTrackSharingEnum = "public"
	TrackDataRequestTrackSharingEnumPrivate TrackDataRequestTrackSharingEnum = "private"
)

func (e TrackDataRequestTrackSharingEnum) ToPointer() *TrackDataRequestTrackSharingEnum {
	return &e
}

func (e *TrackDataRequestTrackSharingEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "public":
		fallthrough
	case "private":
		*e = TrackDataRequestTrackSharingEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TrackDataRequestTrackSharingEnum: %v", v)
	}
}

// TrackDataRequest - Track payload
type TrackDataRequest struct {
	TrackArtworkData  *TrackDataRequestOnlyForUploadingForPROUsers `multipartForm:"file"`
	TrackAssetData    *TrackDataRequestOnlyForUploading            `multipartForm:"file"`
	TrackCommentable  *bool                                        `multipartForm:"name=track[commentable]"`
	TrackDescription  *string                                      `multipartForm:"name=track[description]"`
	TrackDownloadable *bool                                        `multipartForm:"name=track[downloadable]"`
	// who can embed this track "all", "me", or "none"
	TrackEmbeddableBy *TrackDataRequestTrackEmbeddableByEnum `multipartForm:"name=track[embeddable_by]"`
	TrackGenre        *string                                `multipartForm:"name=track[genre]"`
	TrackIsrc         *string                                `multipartForm:"name=track[isrc]"`
	TrackLabelName    *string                                `multipartForm:"name=track[label_name]"`
	// Possible values: no-rights-reserved, all-rights-reserved, cc-by, cc-by-nc, cc-by-nd, cc-by-sa, cc-by-nc-nd, cc-by-nc-sa
	TrackLicense     *TrackDataRequestTrackLicenseEnum `multipartForm:"name=track[license]"`
	TrackPermalink   *string                           `multipartForm:"name=track[permalink]"`
	TrackPurchaseURL *string                           `multipartForm:"name=track[purchase_url]"`
	TrackRelease     *string                           `multipartForm:"name=track[release]"`
	// string, formatted as yyyy-mm-dd, representing release date
	TrackReleaseDate *string                           `multipartForm:"name=track[release_date]"`
	TrackSharing     *TrackDataRequestTrackSharingEnum `multipartForm:"name=track[sharing]"`
	TrackStreamable  *bool                             `multipartForm:"name=track[streamable]"`
	// The tag_list property contains a list of tags separated by spaces. Multiword tags are quoted in double quotes. We also support machine tags that follow the pattern NAMESPACE:KEY=VALUE. For example: geo:lat=43.555 camel:size=medium “machine:tag=with space” Machine tags are not revealed to the user on the track pages.
	TrackTagList *string `multipartForm:"name=track[tag_list]"`
	TrackTitle   *string `multipartForm:"name=track[title]"`
}
