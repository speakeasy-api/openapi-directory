/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

export class PatientIdentificationRequestQueryPatient extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;
}

export enum PatientIdentificationRequestQueryRequesterTypeEnum {
  Hiu = "HIU",
  Hip = "HIP",
}

export class PatientIdentificationRequestQueryRequester extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: PatientIdentificationRequestQueryRequesterTypeEnum;
}

export class PatientIdentificationRequestQuery extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "patient" })
  @Type(() => PatientIdentificationRequestQueryPatient)
  patient: PatientIdentificationRequestQueryPatient;

  @SpeakeasyMetadata()
  @Expose({ name: "requester" })
  @Type(() => PatientIdentificationRequestQueryRequester)
  requester: PatientIdentificationRequestQueryRequester;
}

export class PatientIdentificationRequest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "query" })
  @Type(() => PatientIdentificationRequestQuery)
  query: PatientIdentificationRequestQuery;

  /**
   * a nonce, unique for each HTTP request
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestId" })
  requestId: string;

  /**
   * Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  timestamp: Date;
}
