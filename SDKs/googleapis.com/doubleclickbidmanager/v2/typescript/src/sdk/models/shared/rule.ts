/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DisjunctiveMatchStatement } from "./disjunctivematchstatement";
import { Expose, Type } from "class-transformer";

/**
 * A Rule defines a name, and a boolean expression in [conjunctive normal form] (http://mathworld.wolfram.com/ConjunctiveNormalForm.html){.external} that can be applied to a path event to determine if that name should be applied.
 */
export class Rule extends SpeakeasyBase {
  /**
   * DisjunctiveMatchStatements within a Rule. DisjunctiveMatchStatement OR's all contained filters.
   */
  @SpeakeasyMetadata({ elemType: DisjunctiveMatchStatement })
  @Expose({ name: "disjunctiveMatchStatements" })
  @Type(() => DisjunctiveMatchStatement)
  disjunctiveMatchStatements?: DisjunctiveMatchStatement[];

  /**
   * Rule name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}
