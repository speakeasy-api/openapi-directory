// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CertificateAuthorityStateEnum - Output only. The State for this CertificateAuthority.
type CertificateAuthorityStateEnum string

const (
	CertificateAuthorityStateEnumStateUnspecified       CertificateAuthorityStateEnum = "STATE_UNSPECIFIED"
	CertificateAuthorityStateEnumEnabled                CertificateAuthorityStateEnum = "ENABLED"
	CertificateAuthorityStateEnumDisabled               CertificateAuthorityStateEnum = "DISABLED"
	CertificateAuthorityStateEnumStaged                 CertificateAuthorityStateEnum = "STAGED"
	CertificateAuthorityStateEnumAwaitingUserActivation CertificateAuthorityStateEnum = "AWAITING_USER_ACTIVATION"
	CertificateAuthorityStateEnumDeleted                CertificateAuthorityStateEnum = "DELETED"
)

func (e CertificateAuthorityStateEnum) ToPointer() *CertificateAuthorityStateEnum {
	return &e
}

func (e *CertificateAuthorityStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "ENABLED":
		fallthrough
	case "DISABLED":
		fallthrough
	case "STAGED":
		fallthrough
	case "AWAITING_USER_ACTIVATION":
		fallthrough
	case "DELETED":
		*e = CertificateAuthorityStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CertificateAuthorityStateEnum: %v", v)
	}
}

// CertificateAuthorityTierEnum - Output only. The CaPool.Tier of the CaPool that includes this CertificateAuthority.
type CertificateAuthorityTierEnum string

const (
	CertificateAuthorityTierEnumTierUnspecified CertificateAuthorityTierEnum = "TIER_UNSPECIFIED"
	CertificateAuthorityTierEnumEnterprise      CertificateAuthorityTierEnum = "ENTERPRISE"
	CertificateAuthorityTierEnumDevops          CertificateAuthorityTierEnum = "DEVOPS"
)

func (e CertificateAuthorityTierEnum) ToPointer() *CertificateAuthorityTierEnum {
	return &e
}

func (e *CertificateAuthorityTierEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TIER_UNSPECIFIED":
		fallthrough
	case "ENTERPRISE":
		fallthrough
	case "DEVOPS":
		*e = CertificateAuthorityTierEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CertificateAuthorityTierEnum: %v", v)
	}
}

// CertificateAuthorityTypeEnum - Required. Immutable. The Type of this CertificateAuthority.
type CertificateAuthorityTypeEnum string

const (
	CertificateAuthorityTypeEnumTypeUnspecified CertificateAuthorityTypeEnum = "TYPE_UNSPECIFIED"
	CertificateAuthorityTypeEnumSelfSigned      CertificateAuthorityTypeEnum = "SELF_SIGNED"
	CertificateAuthorityTypeEnumSubordinate     CertificateAuthorityTypeEnum = "SUBORDINATE"
)

func (e CertificateAuthorityTypeEnum) ToPointer() *CertificateAuthorityTypeEnum {
	return &e
}

func (e *CertificateAuthorityTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TYPE_UNSPECIFIED":
		fallthrough
	case "SELF_SIGNED":
		fallthrough
	case "SUBORDINATE":
		*e = CertificateAuthorityTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CertificateAuthorityTypeEnum: %v", v)
	}
}

// CertificateAuthority - A CertificateAuthority represents an individual Certificate Authority. A CertificateAuthority can be used to create Certificates.
type CertificateAuthority struct {
	// URLs where a CertificateAuthority will publish content.
	AccessUrls *AccessUrls `json:"accessUrls,omitempty"`
	// Output only. A structured description of this CertificateAuthority's CA certificate and its issuers. Ordered as self-to-root.
	CaCertificateDescriptions []CertificateDescription `json:"caCertificateDescriptions,omitempty"`
	// A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.
	Config *CertificateConfig `json:"config,omitempty"`
	// Output only. The time at which this CertificateAuthority was created.
	CreateTime *string `json:"createTime,omitempty"`
	// Output only. The time at which this CertificateAuthority was soft deleted, if it is in the DELETED state.
	DeleteTime *string `json:"deleteTime,omitempty"`
	// Output only. The time at which this CertificateAuthority will be permanently purged, if it is in the DELETED state.
	ExpireTime *string `json:"expireTime,omitempty"`
	// Immutable. The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and CRLs. This must be a bucket name, without any prefixes (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named `my-bucket`, you would simply specify `my-bucket`. If not specified, a managed bucket will be created.
	GcsBucket *string `json:"gcsBucket,omitempty"`
	// A Cloud KMS key configuration that a CertificateAuthority will use.
	KeySpec *KeyVersionSpec `json:"keySpec,omitempty"`
	// Optional. Labels with user-defined metadata.
	Labels map[string]string `json:"labels,omitempty"`
	// Required. Immutable. The desired lifetime of the CA certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate.
	Lifetime *string `json:"lifetime,omitempty"`
	// Output only. The resource name for this CertificateAuthority in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.
	Name *string `json:"name,omitempty"`
	// Output only. This CertificateAuthority's certificate chain, including the current CertificateAuthority's certificate. Ordered such that the root issuer is the final element (consistent with RFC 5246). For a self-signed CA, this will only list the current CertificateAuthority's certificate.
	PemCaCertificates []string `json:"pemCaCertificates,omitempty"`
	// Output only. The State for this CertificateAuthority.
	State *CertificateAuthorityStateEnum `json:"state,omitempty"`
	// Describes a subordinate CA's issuers. This is either a resource name to a known issuing CertificateAuthority, or a PEM issuer certificate chain.
	SubordinateConfig *SubordinateConfig `json:"subordinateConfig,omitempty"`
	// Output only. The CaPool.Tier of the CaPool that includes this CertificateAuthority.
	Tier *CertificateAuthorityTierEnum `json:"tier,omitempty"`
	// Required. Immutable. The Type of this CertificateAuthority.
	Type *CertificateAuthorityTypeEnum `json:"type,omitempty"`
	// Output only. The time at which this CertificateAuthority was last updated.
	UpdateTime *string `json:"updateTime,omitempty"`
}

// CertificateAuthorityInput - A CertificateAuthority represents an individual Certificate Authority. A CertificateAuthority can be used to create Certificates.
type CertificateAuthorityInput struct {
	// URLs where a CertificateAuthority will publish content.
	AccessUrls *AccessUrls `json:"accessUrls,omitempty"`
	// A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.
	Config *CertificateConfig `json:"config,omitempty"`
	// Immutable. The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and CRLs. This must be a bucket name, without any prefixes (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named `my-bucket`, you would simply specify `my-bucket`. If not specified, a managed bucket will be created.
	GcsBucket *string `json:"gcsBucket,omitempty"`
	// A Cloud KMS key configuration that a CertificateAuthority will use.
	KeySpec *KeyVersionSpec `json:"keySpec,omitempty"`
	// Optional. Labels with user-defined metadata.
	Labels map[string]string `json:"labels,omitempty"`
	// Required. Immutable. The desired lifetime of the CA certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate.
	Lifetime *string `json:"lifetime,omitempty"`
	// Describes a subordinate CA's issuers. This is either a resource name to a known issuing CertificateAuthority, or a PEM issuer certificate chain.
	SubordinateConfig *SubordinateConfig `json:"subordinateConfig,omitempty"`
	// Required. Immutable. The Type of this CertificateAuthority.
	Type *CertificateAuthorityTypeEnum `json:"type,omitempty"`
}
