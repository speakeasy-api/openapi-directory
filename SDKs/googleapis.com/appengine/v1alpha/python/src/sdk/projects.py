"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def appengine_projects_locations_get(self, request: operations.AppengineProjectsLocationsGetRequest, security: operations.AppengineProjectsLocationsGetSecurity) -> operations.AppengineProjectsLocationsGetResponse:
        r"""Gets information about a location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppengineProjectsLocationsGetRequest, base_url, '/v1alpha/projects/{projectsId}/locations/{locationsId}', request)
        
        query_params = utils.get_query_params(operations.AppengineProjectsLocationsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppengineProjectsLocationsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Location])
                res.location = out

        return res

    def appengine_projects_locations_list(self, request: operations.AppengineProjectsLocationsListRequest, security: operations.AppengineProjectsLocationsListSecurity) -> operations.AppengineProjectsLocationsListResponse:
        r"""Lists information about the supported locations for this service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppengineProjectsLocationsListRequest, base_url, '/v1alpha/projects/{projectsId}/locations', request)
        
        query_params = utils.get_query_params(operations.AppengineProjectsLocationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppengineProjectsLocationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListLocationsResponse])
                res.list_locations_response = out

        return res

    def appengine_projects_locations_operations_get(self, request: operations.AppengineProjectsLocationsOperationsGetRequest, security: operations.AppengineProjectsLocationsOperationsGetSecurity) -> operations.AppengineProjectsLocationsOperationsGetResponse:
        r"""Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppengineProjectsLocationsOperationsGetRequest, base_url, '/v1alpha/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}', request)
        
        query_params = utils.get_query_params(operations.AppengineProjectsLocationsOperationsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppengineProjectsLocationsOperationsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def appengine_projects_locations_operations_list(self, request: operations.AppengineProjectsLocationsOperationsListRequest, security: operations.AppengineProjectsLocationsOperationsListSecurity) -> operations.AppengineProjectsLocationsOperationsListResponse:
        r"""Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppengineProjectsLocationsOperationsListRequest, base_url, '/v1alpha/projects/{projectsId}/locations/{locationsId}/operations', request)
        
        query_params = utils.get_query_params(operations.AppengineProjectsLocationsOperationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppengineProjectsLocationsOperationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListOperationsResponse])
                res.list_operations_response = out

        return res

    