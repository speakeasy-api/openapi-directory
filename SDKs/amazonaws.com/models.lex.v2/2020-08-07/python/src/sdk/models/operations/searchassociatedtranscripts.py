"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import associatedtranscriptfilter as shared_associatedtranscriptfilter
from ..shared import searchassociatedtranscriptsresponse as shared_searchassociatedtranscriptsresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class SearchAssociatedTranscriptsRequestBodySearchOrderEnum(str, Enum):
    r"""How SearchResults are ordered. Valid values are Ascending or Descending. The default is Descending."""
    ASCENDING = 'Ascending'
    DESCENDING = 'Descending'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchAssociatedTranscriptsRequestBody:
    
    filters: list[shared_associatedtranscriptfilter.AssociatedTranscriptFilter] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filters') }})
    r"""A list of filter objects."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxResults'), 'exclude': lambda f: f is None }})
    r"""The maximum number of bot recommendations to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned."""  
    next_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextIndex'), 'exclude': lambda f: f is None }})
    r"""If the response from the SearchAssociatedTranscriptsRequest operation contains more results than specified in the maxResults parameter, an index is returned in the response. Use that index in the nextIndex parameter to return the next page of results."""  
    search_order: Optional[SearchAssociatedTranscriptsRequestBodySearchOrderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('searchOrder'), 'exclude': lambda f: f is None }})
    r"""How SearchResults are ordered. Valid values are Ascending or Descending. The default is Descending."""  
    

@dataclasses.dataclass
class SearchAssociatedTranscriptsRequest:
    
    bot_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'botId', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the bot associated with the transcripts that you are searching."""  
    bot_recommendation_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'botRecommendationId', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the bot recommendation associated with the transcripts to search."""  
    bot_version: str = dataclasses.field(metadata={'path_param': { 'field_name': 'botVersion', 'style': 'simple', 'explode': False }})
    r"""The version of the bot containing the transcripts that you are searching."""  
    locale_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'localeId', 'style': 'simple', 'explode': False }})
    r"""The identifier of the language and locale of the transcripts to search. The string must match one of the supported locales. For more information, see <a href=\\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\\">Supported languages</a>"""  
    request_body: SearchAssociatedTranscriptsRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class SearchAssociatedTranscriptsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    search_associated_transcripts_response: Optional[shared_searchassociatedtranscriptsresponse.SearchAssociatedTranscriptsResponse] = dataclasses.field(default=None)
    r"""Success"""  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    