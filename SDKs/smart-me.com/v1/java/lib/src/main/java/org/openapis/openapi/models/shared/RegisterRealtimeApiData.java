/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

/**
 * RegisterRealtimeApiData - Container class for the register realtime API API
 */
public class RegisterRealtimeApiData {
    /**
     * The URL of your endpoint. To this endpoint all the values are send to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ApiUrl")
    @SpeakeasyMetadata("form:name=ApiUrl")
    public String apiUrl;
    public RegisterRealtimeApiData withApiUrl(String apiUrl) {
        this.apiUrl = apiUrl;
        return this;
    }
    
    /**
     * The Password (basic auth) of your endpoint. Leave empty of none.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BasicAuthPassword")
    @SpeakeasyMetadata("form:name=BasicAuthPassword")
    public String basicAuthPassword;
    public RegisterRealtimeApiData withBasicAuthPassword(String basicAuthPassword) {
        this.basicAuthPassword = basicAuthPassword;
        return this;
    }
    
    /**
     * The Username (basic auth) of your endpoint. Leave empty of none.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BasicAuthUsername")
    @SpeakeasyMetadata("form:name=BasicAuthUsername")
    public String basicAuthUsername;
    public RegisterRealtimeApiData withBasicAuthUsername(String basicAuthUsername) {
        this.basicAuthUsername = basicAuthUsername;
        return this;
    }
    
    /**
     * The ID of the registration
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Id")
    @SpeakeasyMetadata("form:name=Id")
    public String id;
    public RegisterRealtimeApiData withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The ID of the Meter. Just used if the RegistrationType is "SingleMeterRegistration".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MeterId")
    @SpeakeasyMetadata("form:name=MeterId")
    public String meterId;
    public RegisterRealtimeApiData withMeterId(String meterId) {
        this.meterId = meterId;
        return this;
    }
    
    /**
     * The Type of this registration (per meter, per user, ...)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RegistrationType")
    @SpeakeasyMetadata("form:name=RegistrationType")
    public RegisterRealtimeApiDataRegistrationTypeEnum registrationType;
    public RegisterRealtimeApiData withRegistrationType(RegisterRealtimeApiDataRegistrationTypeEnum registrationType) {
        this.registrationType = registrationType;
        return this;
    }
    
    /**
     * The serial number of the Meter. Just used if the RegistrationType is "SingleMeterRegistration" and the MeterId is null. 
     *             Example: 1 SME 01 63000000 or 6300000
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SerialNumber")
    @SpeakeasyMetadata("form:name=SerialNumber")
    public String serialNumber;
    public RegisterRealtimeApiData withSerialNumber(String serialNumber) {
        this.serialNumber = serialNumber;
        return this;
    }
    
}
