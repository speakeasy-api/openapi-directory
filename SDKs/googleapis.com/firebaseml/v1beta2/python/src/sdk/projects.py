"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def firebaseml_projects_models_create(self, request: operations.FirebasemlProjectsModelsCreateRequest, security: operations.FirebasemlProjectsModelsCreateSecurity) -> operations.FirebasemlProjectsModelsCreateResponse:
        r"""Creates a model in Firebase ML. The longrunning operation will eventually return a Model"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebasemlProjectsModelsCreateRequest, base_url, '/v1beta2/{parent}/models', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "model_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FirebasemlProjectsModelsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebasemlProjectsModelsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def firebaseml_projects_models_delete(self, request: operations.FirebasemlProjectsModelsDeleteRequest, security: operations.FirebasemlProjectsModelsDeleteSecurity) -> operations.FirebasemlProjectsModelsDeleteResponse:
        r"""Deletes a model"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebasemlProjectsModelsDeleteRequest, base_url, '/v1beta2/{name}', request)
        
        query_params = utils.get_query_params(operations.FirebasemlProjectsModelsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebasemlProjectsModelsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def firebaseml_projects_models_download(self, request: operations.FirebasemlProjectsModelsDownloadRequest) -> operations.FirebasemlProjectsModelsDownloadResponse:
        r"""Gets Download information for a model. This is meant for downloading model resources onto devices. It gives very limited information about the model."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebasemlProjectsModelsDownloadRequest, base_url, '/v1beta2/{name}:download', request)
        
        query_params = utils.get_query_params(operations.FirebasemlProjectsModelsDownloadRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebasemlProjectsModelsDownloadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DownloadModelResponse])
                res.download_model_response = out

        return res

    def firebaseml_projects_models_list(self, request: operations.FirebasemlProjectsModelsListRequest, security: operations.FirebasemlProjectsModelsListSecurity) -> operations.FirebasemlProjectsModelsListResponse:
        r"""Lists the models"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebasemlProjectsModelsListRequest, base_url, '/v1beta2/{parent}/models', request)
        
        query_params = utils.get_query_params(operations.FirebasemlProjectsModelsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebasemlProjectsModelsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListModelsResponse])
                res.list_models_response = out

        return res

    def firebaseml_projects_models_patch(self, request: operations.FirebasemlProjectsModelsPatchRequest, security: operations.FirebasemlProjectsModelsPatchSecurity) -> operations.FirebasemlProjectsModelsPatchResponse:
        r"""Updates a model. The longrunning operation will eventually return a Model."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebasemlProjectsModelsPatchRequest, base_url, '/v1beta2/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "model_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FirebasemlProjectsModelsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebasemlProjectsModelsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def firebaseml_projects_operations_get(self, request: operations.FirebasemlProjectsOperationsGetRequest, security: operations.FirebasemlProjectsOperationsGetSecurity) -> operations.FirebasemlProjectsOperationsGetResponse:
        r"""Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebasemlProjectsOperationsGetRequest, base_url, '/v1beta2/{name}', request)
        
        query_params = utils.get_query_params(operations.FirebasemlProjectsOperationsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebasemlProjectsOperationsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    