// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type AnalyticsListDevicePropertiesSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type AnalyticsListDevicePropertiesRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type AnalyticsListDevicePropertiesDefaultApplicationJSONErrorCodeEnum string

const (
	AnalyticsListDevicePropertiesDefaultApplicationJSONErrorCodeEnumBadRequest          AnalyticsListDevicePropertiesDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	AnalyticsListDevicePropertiesDefaultApplicationJSONErrorCodeEnumConflict            AnalyticsListDevicePropertiesDefaultApplicationJSONErrorCodeEnum = "Conflict"
	AnalyticsListDevicePropertiesDefaultApplicationJSONErrorCodeEnumNotAcceptable       AnalyticsListDevicePropertiesDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	AnalyticsListDevicePropertiesDefaultApplicationJSONErrorCodeEnumNotFound            AnalyticsListDevicePropertiesDefaultApplicationJSONErrorCodeEnum = "NotFound"
	AnalyticsListDevicePropertiesDefaultApplicationJSONErrorCodeEnumInternalServerError AnalyticsListDevicePropertiesDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	AnalyticsListDevicePropertiesDefaultApplicationJSONErrorCodeEnumUnauthorized        AnalyticsListDevicePropertiesDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	AnalyticsListDevicePropertiesDefaultApplicationJSONErrorCodeEnumTooManyRequests     AnalyticsListDevicePropertiesDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e AnalyticsListDevicePropertiesDefaultApplicationJSONErrorCodeEnum) ToPointer() *AnalyticsListDevicePropertiesDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *AnalyticsListDevicePropertiesDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = AnalyticsListDevicePropertiesDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsListDevicePropertiesDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type AnalyticsListDevicePropertiesDefaultApplicationJSONError struct {
	Code    AnalyticsListDevicePropertiesDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                           `json:"message"`
}

// AnalyticsListDevicePropertiesDefaultApplicationJSON - Error code with reason
type AnalyticsListDevicePropertiesDefaultApplicationJSON struct {
	Error AnalyticsListDevicePropertiesDefaultApplicationJSONError `json:"error"`
}

// AnalyticsListDeviceProperties200ApplicationJSONValuesEnum - Type of the property.
type AnalyticsListDeviceProperties200ApplicationJSONValuesEnum string

const (
	AnalyticsListDeviceProperties200ApplicationJSONValuesEnumString   AnalyticsListDeviceProperties200ApplicationJSONValuesEnum = "string"
	AnalyticsListDeviceProperties200ApplicationJSONValuesEnumNumber   AnalyticsListDeviceProperties200ApplicationJSONValuesEnum = "number"
	AnalyticsListDeviceProperties200ApplicationJSONValuesEnumBoolean  AnalyticsListDeviceProperties200ApplicationJSONValuesEnum = "boolean"
	AnalyticsListDeviceProperties200ApplicationJSONValuesEnumDateTime AnalyticsListDeviceProperties200ApplicationJSONValuesEnum = "date_time"
)

func (e AnalyticsListDeviceProperties200ApplicationJSONValuesEnum) ToPointer() *AnalyticsListDeviceProperties200ApplicationJSONValuesEnum {
	return &e
}

func (e *AnalyticsListDeviceProperties200ApplicationJSONValuesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "string":
		fallthrough
	case "number":
		fallthrough
	case "boolean":
		fallthrough
	case "date_time":
		*e = AnalyticsListDeviceProperties200ApplicationJSONValuesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsListDeviceProperties200ApplicationJSONValuesEnum: %v", v)
	}
}

// AnalyticsListDeviceProperties200ApplicationJSON - List of device properties.
type AnalyticsListDeviceProperties200ApplicationJSON struct {
	// List of device properties.
	Values map[string]AnalyticsListDeviceProperties200ApplicationJSONValuesEnum `json:"values"`
}

type AnalyticsListDevicePropertiesResponse struct {
	// List of device properties.
	AnalyticsListDeviceProperties200ApplicationJSONObject *AnalyticsListDeviceProperties200ApplicationJSON
	// Error code with reason
	AnalyticsListDevicePropertiesDefaultApplicationJSONObject *AnalyticsListDevicePropertiesDefaultApplicationJSON
	ContentType                                               string
	StatusCode                                                int
	RawResponse                                               *http.Response
}
