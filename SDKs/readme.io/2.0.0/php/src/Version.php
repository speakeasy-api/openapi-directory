<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Version 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create version
     * 
     * Create a new version
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\Version $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateVersionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateVersionResponse
     */
	public function createVersion(
        \OpenAPI\OpenAPI\Models\Shared\Version $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateVersionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateVersionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/version');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Delete version
     * 
     * Delete a version
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVersionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVersionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteVersionResponse
     */
	public function deleteVersion(
        \OpenAPI\OpenAPI\Models\Operations\DeleteVersionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteVersionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteVersionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/version/{versionId}', \OpenAPI\OpenAPI\Models\Operations\DeleteVersionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get version
     * 
     * Returns the version with this version ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVersionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVersionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVersionResponse
     */
	public function getVersion(
        \OpenAPI\OpenAPI\Models\Operations\GetVersionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetVersionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVersionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/version/{versionId}', \OpenAPI\OpenAPI\Models\Operations\GetVersionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get versions
     * 
     * Retrieve a list of versions associated with a project API key
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVersionsResponse
     */
	public function getVersions(
    ): \OpenAPI\OpenAPI\Models\Operations\GetVersionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/version');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVersionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Update version
     * 
     * Update an existing version
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateVersionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateVersionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateVersionResponse
     */
	public function updateVersion(
        \OpenAPI\OpenAPI\Models\Operations\UpdateVersionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateVersionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateVersionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/version/{versionId}', \OpenAPI\OpenAPI\Models\Operations\UpdateVersionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "version", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}