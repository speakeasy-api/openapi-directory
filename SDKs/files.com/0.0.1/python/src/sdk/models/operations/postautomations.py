"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import automationentity as shared_automationentity
from enum import Enum
from typing import Any, Optional

class PostAutomationsRequestBodyAutomationEnum(str, Enum):
    r"""Automation type"""
    CREATE_FOLDER = 'create_folder'
    REQUEST_FILE = 'request_file'
    REQUEST_MOVE = 'request_move'
    COPY_NEWEST_FILE = 'copy_newest_file'
    DELETE_FILE = 'delete_file'
    COPY_FILE = 'copy_file'
    MOVE_FILE = 'move_file'
    AS2_SEND = 'as2_send'
    RUN_SYNC = 'run_sync'

class PostAutomationsRequestBodyTriggerEnum(str, Enum):
    r"""How this automation is triggered to run. One of: `realtime`, `daily`, `custom_schedule`, `webhook`, `email`, or `action`."""
    REALTIME = 'realtime'
    DAILY = 'daily'
    CUSTOM_SCHEDULE = 'custom_schedule'
    WEBHOOK = 'webhook'
    EMAIL = 'email'
    ACTION = 'action'


@dataclasses.dataclass
class PostAutomationsRequestBody:
    
    automation: PostAutomationsRequestBodyAutomationEnum = dataclasses.field(metadata={'multipart_form': { 'field_name': 'automation' }})
    r"""Automation type"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'description' }})
    r"""Description for the this Automation."""  
    destination: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'destination' }})
    r"""DEPRECATED: Destination Path. Use `destinations` instead."""  
    destination_replace_from: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'destination_replace_from' }})
    r"""If set, this string in the destination path will be replaced with the value in `destination_replace_to`."""  
    destination_replace_to: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'destination_replace_to' }})
    r"""If set, this string will replace the value `destination_replace_from` in the destination filename. You can use special patterns here."""  
    destinations: Optional[list[str]] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'destinations' }})
    r"""A list of String destination paths or Hash of folder_path and optional file_path."""  
    disabled: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'disabled' }})
    r"""If true, this automation will not run."""  
    group_ids: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'group_ids' }})
    r"""A list of group IDs the automation is associated with. If sent as a string, it should be comma-delimited."""  
    interval: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'interval' }})
    r"""How often to run this automation? One of: `day`, `week`, `week_end`, `month`, `month_end`, `quarter`, `quarter_end`, `year`, `year_end`"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'name' }})
    r"""Name for this automation."""  
    path: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'path' }})
    r"""Path on which this Automation runs.  Supports globs."""  
    schedule: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'schedule', 'json': True }})
    r"""Custom schedule for running this automation."""  
    source: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'source' }})
    r"""Source Path"""  
    sync_ids: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'sync_ids' }})
    r"""A list of sync IDs the automation is associated with. If sent as a string, it should be comma-delimited."""  
    trigger: Optional[PostAutomationsRequestBodyTriggerEnum] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'trigger' }})
    r"""How this automation is triggered to run. One of: `realtime`, `daily`, `custom_schedule`, `webhook`, `email`, or `action`."""  
    trigger_actions: Optional[list[str]] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'trigger_actions' }})
    r"""If trigger is `action`, this is the list of action types on which to trigger the automation. Valid actions are create, read, update, destroy, move, copy"""  
    user_ids: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'user_ids' }})
    r"""A list of user IDs the automation is associated with. If sent as a string, it should be comma-delimited."""  
    value: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'value', 'json': True }})
    r"""A Hash of attributes specific to the automation type."""  
    

@dataclasses.dataclass
class PostAutomationsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    automation_entity: Optional[shared_automationentity.AutomationEntity] = dataclasses.field(default=None)
    r"""The Automations object."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    