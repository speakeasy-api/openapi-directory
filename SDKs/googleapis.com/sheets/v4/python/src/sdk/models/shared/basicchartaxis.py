"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import chartaxisviewwindowoptions as shared_chartaxisviewwindowoptions
from ..shared import textformat as shared_textformat
from ..shared import textposition as shared_textposition
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class BasicChartAxisPositionEnum(str, Enum):
    r"""The position of this axis."""
    BASIC_CHART_AXIS_POSITION_UNSPECIFIED = 'BASIC_CHART_AXIS_POSITION_UNSPECIFIED'
    BOTTOM_AXIS = 'BOTTOM_AXIS'
    LEFT_AXIS = 'LEFT_AXIS'
    RIGHT_AXIS = 'RIGHT_AXIS'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BasicChartAxis:
    r"""An axis of the chart. A chart may not have more than one axis per axis position."""
    
    format: Optional[shared_textformat.TextFormat] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('format'), 'exclude': lambda f: f is None }})
    r"""The format of a run of text in a cell. Absent values indicate that the field isn't specified."""  
    position: Optional[BasicChartAxisPositionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('position'), 'exclude': lambda f: f is None }})
    r"""The position of this axis."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""The title of this axis. If set, this overrides any title inferred from headers of the data."""  
    title_text_position: Optional[shared_textposition.TextPosition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('titleTextPosition'), 'exclude': lambda f: f is None }})
    r"""Position settings for text."""  
    view_window_options: Optional[shared_chartaxisviewwindowoptions.ChartAxisViewWindowOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('viewWindowOptions'), 'exclude': lambda f: f is None }})
    r"""The options that define a \\"view window\\" for a chart (such as the visible values in an axis)."""  
    