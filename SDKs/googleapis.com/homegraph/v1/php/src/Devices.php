<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Devices 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Gets the current states in Home Graph for the given set of the third-party user's devices. The third-party user's identity is passed in via the `agent_user_id` (see QueryRequest). This request must be authorized using service account credentials from your Actions console project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesQueryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesQuerySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesQueryResponse
     */
	public function homegraphDevicesQuery(
        \OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesQueryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesQuerySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesQueryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/devices:query');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "queryRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesQueryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesQueryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->queryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\QueryResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reports device state and optionally sends device notifications. Called by your smart home Action when the state of a third-party device changes or you need to send a notification about the device. See [Implement Report State](https://developers.home.google.com/cloud-to-cloud/integration/report-state) for more information. This method updates the device state according to its declared [traits](https://developers.home.google.com/cloud-to-cloud/primer/device-types-and-traits). Publishing a new state value outside of these traits will result in an `INVALID_ARGUMENT` error response. The third-party user's identity is passed in via the `agent_user_id` (see ReportStateAndNotificationRequest). This request must be authorized using service account credentials from your Actions console project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesReportStateAndNotificationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesReportStateAndNotificationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesReportStateAndNotificationResponse
     */
	public function homegraphDevicesReportStateAndNotification(
        \OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesReportStateAndNotificationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesReportStateAndNotificationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesReportStateAndNotificationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/devices:reportStateAndNotification');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "reportStateAndNotificationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesReportStateAndNotificationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesReportStateAndNotificationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reportStateAndNotificationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReportStateAndNotificationResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Requests Google to send an `action.devices.SYNC` [intent](https://developers.home.google.com/cloud-to-cloud/intents/sync) to your smart home Action to update device metadata for the given user. The third-party user's identity is passed via the `agent_user_id` (see RequestSyncDevicesRequest). This request must be authorized using service account credentials from your Actions console project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesRequestSyncRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesRequestSyncSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesRequestSyncResponse
     */
	public function homegraphDevicesRequestSync(
        \OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesRequestSyncRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesRequestSyncSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesRequestSyncResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/devices:requestSync');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestSyncDevicesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesRequestSyncRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesRequestSyncResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->requestSyncDevicesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets all the devices associated with the given third-party user. The third-party user's identity is passed in via the `agent_user_id` (see SyncRequest). This request must be authorized using service account credentials from your Actions console project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesSyncRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesSyncSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesSyncResponse
     */
	public function homegraphDevicesSync(
        \OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesSyncRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesSyncSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesSyncResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/devices:sync');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "syncRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesSyncRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\HomegraphDevicesSyncResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncResponse', 'json');
            }
        }

        return $response;
    }
}