"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import androidappinfo as shared_androidappinfo
from ..shared import androidinstrumentationtest as shared_androidinstrumentationtest
from ..shared import androidrobotest as shared_androidrobotest
from ..shared import duration as shared_duration
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AndroidTest:
    r"""An Android mobile test specification."""
    
    android_app_info: Optional[shared_androidappinfo.AndroidAppInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('androidAppInfo'), 'exclude': lambda f: f is None }})
    r"""Android app information."""  
    android_instrumentation_test: Optional[shared_androidinstrumentationtest.AndroidInstrumentationTest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('androidInstrumentationTest'), 'exclude': lambda f: f is None }})
    r"""A test of an Android application that can control an Android component independently of its normal lifecycle. See for more information on types of Android tests."""  
    android_robo_test: Optional[shared_androidrobotest.AndroidRoboTest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('androidRoboTest'), 'exclude': lambda f: f is None }})
    r"""A test of an android application that explores the application on a virtual or physical Android device, finding culprits and crashes as it goes."""  
    android_test_loop: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('androidTestLoop'), 'exclude': lambda f: f is None }})
    r"""Test Loops are tests that can be launched by the app itself, determining when to run by listening for an intent."""  
    test_timeout: Optional[shared_duration.Duration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('testTimeout'), 'exclude': lambda f: f is None }})
    r"""A Duration represents a signed, fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like \\"day\\" or \\"month\\". It is related to Timestamp in that the difference between two Timestamp values is a Duration and it can be added or subtracted from a Timestamp. Range is approximately +-10,000 years."""  
    