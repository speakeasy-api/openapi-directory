"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Tags:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_tag_group(self, request: operations.CreateTagGroupRequestBody) -> operations.CreateTagGroupResponse:
        r"""Creates a tag group"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tag_groups.json'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateTagGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateTagGroup200ApplicationJSON])
                res.create_tag_group_200_application_json_object = out

        return res

    def get_tag(self, request: operations.GetTagRequest) -> operations.GetTagResponse:
        r"""Get a specific tag"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagRequest, base_url, '/tag/{name}.json', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTag200ApplicationJSON])
                res.get_tag_200_application_json_object = out

        return res

    def get_tag_group(self, request: operations.GetTagGroupRequest) -> operations.GetTagGroupResponse:
        r"""Get a single tag group"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagGroupRequest, base_url, '/tag_groups/{id}.json', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTagGroup200ApplicationJSON])
                res.get_tag_group_200_application_json_object = out

        return res

    def list_tag_groups(self) -> operations.ListTagGroupsResponse:
        r"""Get a list of tag groups"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tag_groups.json'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListTagGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListTagGroups200ApplicationJSON])
                res.list_tag_groups_200_application_json_object = out

        return res

    def list_tags(self) -> operations.ListTagsResponse:
        r"""Get a list of tags"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tags.json'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListTags200ApplicationJSON])
                res.list_tags_200_application_json_object = out

        return res

    def update_tag_group(self, request: operations.UpdateTagGroupRequest) -> operations.UpdateTagGroupResponse:
        r"""Update tag group"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateTagGroupRequest, base_url, '/tag_groups/{id}.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateTagGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateTagGroup200ApplicationJSON])
                res.update_tag_group_200_application_json_object = out

        return res

    