// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type TaxonomyCategoriesQueryParams struct {
	// **unique numeric identifier** of the destination to enquire about (optional)
	// - `destinationId` is returned by [/taxonomy/destinations](#operation/taxonomyDestinations)
	//
	DestID *int64 `queryParam:"style=form,explode=true,name=destId"`
}

type TaxonomyCategoriesHeaders struct {
	// Specifies the language into which the natural-language fields in the response from this service will be translated (see [Accept-Language header](#section/Appendices/Accept-Language-header) for available langage codes)
	//
	AcceptLanguage string `header:"style=simple,explode=false,name=Accept-Language"`
}

type TaxonomyCategoriesRequest struct {
	QueryParams TaxonomyCategoriesQueryParams
	Headers     TaxonomyCategoriesHeaders
}

type TaxonomyCategories200ApplicationJSONDataSubcategories struct {
	// **unique numeric identifier** of *this* product category
	CategoryID *int64 `json:"categoryId,omitempty"`
	// **sort order** (suggested) of the subcategory within the category
	Sortorder *int64 `json:"sortorder,omitempty"`
	// **URL-formatted name** of *this* product subcategory
	SubCategoryURLName *string `json:"subCategoryUrlName,omitempty"`
	// **unique numeric identifier** of *this* product subcategory
	SubcategoryID *int64 `json:"subcategoryId,omitempty"`
	// **natural-language name** of *this* product subcategory
	SubcategoryName *string `json:"subcategoryName,omitempty"`
}

type TaxonomyCategories200ApplicationJSONData struct {
	// **natural-language name** of *this* product category
	GroupName *string `json:"groupName,omitempty"`
	// **URL-formatted name** of *this* product category
	GroupURLName *string `json:"groupUrlName,omitempty"`
	// **unique numeric identifier** for the category
	ID *int64 `json:"id,omitempty"`
	// **number** of products in this category in the destination specified by `destId`
	// - **note**: will be `null` if no `destId` is included in the query
	//
	ProductCount *int64 `json:"productCount,omitempty"`
	// **array** of subcategory objects
	Subcategories []TaxonomyCategories200ApplicationJSONDataSubcategories `json:"subcategories,omitempty"`
	// **URL** for this category's thumbnail image, selected from the most popular product within the category
	// - **note:** will be `null` if no `destId` is included in the query
	//
	ThumbnailURL *string `json:"thumbnailURL,omitempty"`
}

// TaxonomyCategories200ApplicationJSON - Success
type TaxonomyCategories200ApplicationJSON struct {
	// **array** of category data objects
	Data []TaxonomyCategories200ApplicationJSONData `json:"data,omitempty"`
	// **timestamp** of *this* response
	DateStamp *string `json:"dateStamp,omitempty"`
	// **array** of error codes pertaining to *this* error
	// - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes
	//
	ErrorCodes []string `json:"errorCodes,omitempty"`
	// **array** of error message strings
	ErrorMessage []interface{} `json:"errorMessage,omitempty"`
	// **array** of error message strings in plain text
	ErrorMessageText *string `json:"errorMessageText,omitempty"`
	// **name** of *this* type of error
	ErrorName *string `json:"errorName,omitempty"`
	// **reference number** of *this* error
	ErrorReference *string `json:"errorReference,omitempty"`
	// **code** specifying the type of error
	ErrorType *string `json:"errorType,omitempty"`
	// ignore (Viator only)
	ExtraInfo map[string]interface{} `json:"extraInfo,omitempty"`
	// ignore (Viator only)
	ExtraObject map[string]interface{} `json:"extraObject,omitempty"`
	// **boolean indicator** of *this* request's outcome
	// - `true`: the request was successful with no errors
	// - `false`: an error was encountered
	//
	Success *bool `json:"success,omitempty"`
	// **number** of results available for *this* service
	//
	TotalCount *int64 `json:"totalCount,omitempty"`
	// **unique numeric id** of the server that processed *this* request
	Vmid *string `json:"vmid,omitempty"`
}

type TaxonomyCategoriesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	TaxonomyCategories200ApplicationJSONObject *TaxonomyCategories200ApplicationJSON
}
