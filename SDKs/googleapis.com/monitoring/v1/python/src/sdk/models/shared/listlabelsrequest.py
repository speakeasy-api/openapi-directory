"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListLabelsRequest:
    r"""ListLabelsRequest holds all parameters of the Prometheus upstream API for returning a list of label names."""
    
    end: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end'), 'exclude': lambda f: f is None }})
    r"""The end time to evaluate the query for. Either floating point UNIX seconds or RFC3339 formatted timestamp."""  
    match: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('match'), 'exclude': lambda f: f is None }})
    r"""A list of matchers encoded in the Prometheus label matcher format to constrain the values to series that satisfy them."""  
    start: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'exclude': lambda f: f is None }})
    r"""The start time to evaluate the query for. Either floating point UNIX seconds or RFC3339 formatted timestamp."""  
    