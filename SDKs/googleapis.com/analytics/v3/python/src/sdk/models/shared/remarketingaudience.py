"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import includeconditions as shared_includeconditions
from ..shared import linkedforeignaccount as shared_linkedforeignaccount
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RemarketingAudienceAudienceDefinition:
    r"""The simple audience definition that will cause a user to be added to an audience."""
    
    include_conditions: Optional[shared_includeconditions.IncludeConditions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('includeConditions'), 'exclude': lambda f: f is None }})
    r"""JSON template for an Analytics Remarketing Include Conditions."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RemarketingAudienceStateBasedAudienceDefinitionExcludeConditions:
    r"""Defines the conditions to exclude users from the audience."""
    
    exclusion_duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exclusionDuration'), 'exclude': lambda f: f is None }})
    r"""Whether to make the exclusion TEMPORARY or PERMANENT."""  
    segment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('segment'), 'exclude': lambda f: f is None }})
    r"""The segment condition that will cause a user to be removed from an audience."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RemarketingAudienceStateBasedAudienceDefinition:
    r"""A state based audience definition that will cause a user to be added or removed from an audience."""
    
    exclude_conditions: Optional[RemarketingAudienceStateBasedAudienceDefinitionExcludeConditions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludeConditions'), 'exclude': lambda f: f is None }})
    r"""Defines the conditions to exclude users from the audience."""  
    include_conditions: Optional[shared_includeconditions.IncludeConditions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('includeConditions'), 'exclude': lambda f: f is None }})
    r"""JSON template for an Analytics Remarketing Include Conditions."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RemarketingAudienceInput:
    r"""JSON template for an Analytics remarketing audience."""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})
    r"""Account ID to which this remarketing audience belongs."""  
    audience_definition: Optional[RemarketingAudienceAudienceDefinition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audienceDefinition'), 'exclude': lambda f: f is None }})
    r"""The simple audience definition that will cause a user to be added to an audience."""  
    audience_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audienceType'), 'exclude': lambda f: f is None }})
    r"""The type of audience, either SIMPLE or STATE_BASED."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Remarketing Audience ID."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Collection type."""  
    linked_ad_accounts: Optional[list[shared_linkedforeignaccount.LinkedForeignAccountInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linkedAdAccounts'), 'exclude': lambda f: f is None }})
    r"""The linked ad accounts associated with this remarketing audience. A remarketing audience can have only one linkedAdAccount currently."""  
    linked_views: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linkedViews'), 'exclude': lambda f: f is None }})
    r"""The views (profiles) that this remarketing audience is linked to."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of this remarketing audience."""  
    state_based_audience_definition: Optional[RemarketingAudienceStateBasedAudienceDefinition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stateBasedAudienceDefinition'), 'exclude': lambda f: f is None }})
    r"""A state based audience definition that will cause a user to be added or removed from an audience."""  
    web_property_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webPropertyId'), 'exclude': lambda f: f is None }})
    r"""Web property ID of the form UA-XXXXX-YY to which this remarketing audience belongs."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RemarketingAudience:
    r"""JSON template for an Analytics remarketing audience."""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})
    r"""Account ID to which this remarketing audience belongs."""  
    audience_definition: Optional[RemarketingAudienceAudienceDefinition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audienceDefinition'), 'exclude': lambda f: f is None }})
    r"""The simple audience definition that will cause a user to be added to an audience."""  
    audience_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audienceType'), 'exclude': lambda f: f is None }})
    r"""The type of audience, either SIMPLE or STATE_BASED."""  
    created: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Time this remarketing audience was created."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of this remarketing audience."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Remarketing Audience ID."""  
    internal_web_property_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('internalWebPropertyId'), 'exclude': lambda f: f is None }})
    r"""Internal ID for the web property to which this remarketing audience belongs."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Collection type."""  
    linked_ad_accounts: Optional[list[shared_linkedforeignaccount.LinkedForeignAccount]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linkedAdAccounts'), 'exclude': lambda f: f is None }})
    r"""The linked ad accounts associated with this remarketing audience. A remarketing audience can have only one linkedAdAccount currently."""  
    linked_views: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linkedViews'), 'exclude': lambda f: f is None }})
    r"""The views (profiles) that this remarketing audience is linked to."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of this remarketing audience."""  
    state_based_audience_definition: Optional[RemarketingAudienceStateBasedAudienceDefinition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stateBasedAudienceDefinition'), 'exclude': lambda f: f is None }})
    r"""A state based audience definition that will cause a user to be added or removed from an audience."""  
    updated: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Time this remarketing audience was last modified."""  
    web_property_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webPropertyId'), 'exclude': lambda f: f is None }})
    r"""Web property ID of the form UA-XXXXX-YY to which this remarketing audience belongs."""  
    