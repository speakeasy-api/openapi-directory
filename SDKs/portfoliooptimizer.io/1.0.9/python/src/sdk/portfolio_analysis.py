"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class PortfolioAnalysis:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def post_portfolio_analysis_alpha(self, request: Any) -> operations.PostPortfolioAnalysisAlphaResponse:
        r"""Alpha
        Compute the Jensenâ€™s alpha of one or several portfolio(s) in the Capital Asset Pricing Model (CAPM).
        
        References
        * Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/analysis/alpha'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioAnalysisAlphaResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioAnalysisAlpha200ApplicationJSON])
                res.post_portfolio_analysis_alpha_200_application_json_object = out

        return res

    def post_portfolio_analysis_beta(self, request: Any) -> operations.PostPortfolioAnalysisBetaResponse:
        r"""Beta
        Compute the beta of one or several portfolio(s) in the Capital Asset Pricing Model (CAPM).
        
        References
        * Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/analysis/beta'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioAnalysisBetaResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioAnalysisBeta200ApplicationJSON])
                res.post_portfolio_analysis_beta_200_application_json_object = out

        return res

    def post_portfolio_analysis_conditional_value_at_risk(self, request: operations.PostPortfolioAnalysisConditionalValueAtRiskRequestBody) -> operations.PostPortfolioAnalysisConditionalValueAtRiskResponse:
        r"""Conditional Value At Risk
        Compute the conditional value at risk of one or several portfolio(s) from portfolio values.
        
        References
        * [Wikipedia, Value at risk](https://en.wikipedia.org/wiki/Value_at_risk)
        * [Acerbi, C. and Tasche, D. (2002), Expected Shortfall: A Natural Coherent Alternative to Value at Risk. Economic Notes, 31: 379-388](https://onlinelibrary.wiley.com/doi/abs/10.1111/1468-0300.00091)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/analysis/conditional-value-at-risk'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioAnalysisConditionalValueAtRiskResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioAnalysisConditionalValueAtRisk200ApplicationJSON])
                res.post_portfolio_analysis_conditional_value_at_risk_200_application_json_object = out

        return res

    def post_portfolio_analysis_contributions_return(self, request: operations.PostPortfolioAnalysisContributionsReturnRequestBody) -> operations.PostPortfolioAnalysisContributionsReturnResponse:
        r"""Return Contributions
        Perform a return contribution analysis of one or several portfolio(s), optionally using groups of assets.
        
        References
        * Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/analysis/contributions/return'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioAnalysisContributionsReturnResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioAnalysisContributionsReturn200ApplicationJSON])
                res.post_portfolio_analysis_contributions_return_200_application_json_object = out

        return res

    def post_portfolio_analysis_contributions_risk(self, request: operations.PostPortfolioAnalysisContributionsRiskRequestBody) -> operations.PostPortfolioAnalysisContributionsRiskResponse:
        r"""Risk Contributions
        Perform a risk contribution analysis of one or several portfolio(s), optionally using groups of assets.
        
        References
        * Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/analysis/contributions/risk'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioAnalysisContributionsRiskResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioAnalysisContributionsRisk200ApplicationJSON])
                res.post_portfolio_analysis_contributions_risk_200_application_json_object = out

        return res

    def post_portfolio_analysis_correlation_spectrum(self, request: Any) -> operations.PostPortfolioAnalysisCorrelationSpectrumResponse:
        r"""Correlation Spectrum
        Compute the correlation spectrum of one or several portfolio(s).
        
        References
        * [Tristan Froidure, Khalid Jalalzai and Yves Choueifaty, Portfolio Rho-Representativity, International Journal of Theoretical and Applied FinanceVol. 22, No. 07, 1950034 (2019)](https://www.worldscientific.com/doi/10.1142/S0219024919500341)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/analysis/correlation-spectrum'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioAnalysisCorrelationSpectrumResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioAnalysisCorrelationSpectrum200ApplicationJSON])
                res.post_portfolio_analysis_correlation_spectrum_200_application_json_object = out

        return res

    def post_portfolio_analysis_diversification_ratio(self, request: Any) -> operations.PostPortfolioAnalysisDiversificationRatioResponse:
        r"""Diversification Ratio
        Compute the diversification ratio of one or several portfolio(s).
        
        References
        * [Yves Choueifaty and Yves Coignard, Toward Maximum Diversification, The Journal of Portfolio Management Fall 2008, 35 (1) 40-51](https://doi.org/10.3905/JPM.2008.35.1.40)
        * [Tristan Froidure, Khalid Jalalzai and Yves Choueifaty, Portfolio Rho-Representativity, International Journal of Theoretical and Applied FinanceVol. 22, No. 07, 1950034 (2019)](https://www.worldscientific.com/doi/10.1142/S0219024919500341)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/analysis/diversification-ratio'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioAnalysisDiversificationRatioResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioAnalysisDiversificationRatio200ApplicationJSON])
                res.post_portfolio_analysis_diversification_ratio_200_application_json_object = out

        return res

    def post_portfolio_analysis_drawdowns(self, request: operations.PostPortfolioAnalysisDrawdownsRequestBody) -> operations.PostPortfolioAnalysisDrawdownsResponse:
        r"""Drawdowns
        Compute the drawdown function - also called the underwater equity curve -, as well as the worst 10 drawdowns of one or several portfolio(s).
        
        References
        * [Wikipedia, Drawdown](https://en.wikipedia.org/wiki/Drawdown_(economics))
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/analysis/drawdowns'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioAnalysisDrawdownsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioAnalysisDrawdowns200ApplicationJSON])
                res.post_portfolio_analysis_drawdowns_200_application_json_object = out

        return res

    def post_portfolio_analysis_effective_number_of_bets(self, request: operations.PostPortfolioAnalysisEffectiveNumberOfBetsRequestBody) -> operations.PostPortfolioAnalysisEffectiveNumberOfBetsResponse:
        r"""Effective Number of Bets
        Compute the effective number of bets of one or several portfolio(s).
        
        References
        * [Meucci, Attilio and Santangelo, Alberto and Deguest, Romain, Risk Budgeting and Diversification Based on Optimized Uncorrelated Factors (November 10, 2015)](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2276632)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/analysis/effective-number-of-bets'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioAnalysisEffectiveNumberOfBetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioAnalysisEffectiveNumberOfBets200ApplicationJSON])
                res.post_portfolio_analysis_effective_number_of_bets_200_application_json_object = out

        return res

    def post_portfolio_analysis_factors_exposures(self, request: operations.PostPortfolioAnalysisFactorsExposuresRequestBody) -> operations.PostPortfolioAnalysisFactorsExposuresResponse:
        r"""Factor Exposures
        Compute the exposures of one or several portfolio(s) to a set of factors, using a returns-based linear regression analysis.
        
        References
        * [Measuring Factor Exposures: Uses and Abuses, Ronen Israel and Adrienne Ross, The Journal of Alternative Investments Summer 2017, 20 (1) 10-25](https://jai.pm-research.com/content/20/1/10.short)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/analysis/factors/exposures'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioAnalysisFactorsExposuresResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioAnalysisFactorsExposures200ApplicationJSON])
                res.post_portfolio_analysis_factors_exposures_200_application_json_object = out

        return res

    def post_portfolio_analysis_mean_variance_efficient_frontier(self, request: operations.PostPortfolioAnalysisMeanVarianceEfficientFrontierRequestBody) -> operations.PostPortfolioAnalysisMeanVarianceEfficientFrontierResponse:
        r"""Mean-Variance Efficient Frontier
        Compute the discretized mean-variance efficient frontier associated to a list of assets, optionally subject to:
        * Minimum and maximum weights constraints
        * Maximum group weights constraints
        * Minimum and maximum portfolio exposure constraint
        
        References
         * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/analysis/mean-variance/efficient-frontier'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioAnalysisMeanVarianceEfficientFrontierResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioAnalysisMeanVarianceEfficientFrontier200ApplicationJSON])
                res.post_portfolio_analysis_mean_variance_efficient_frontier_200_application_json_object = out

        return res

    def post_portfolio_analysis_mean_variance_minimum_variance_frontier(self, request: operations.PostPortfolioAnalysisMeanVarianceMinimumVarianceFrontierRequestBody) -> operations.PostPortfolioAnalysisMeanVarianceMinimumVarianceFrontierResponse:
        r"""Mean-Variance Minimum Variance Frontier
        Compute the discretized mean-variance minimum variance frontier associated to a list of assets, optionally subject to:
        * Minimum and maximum weights constraints
        * Maximum group weights constraints
        * Minimum and maximum portfolio exposure constraint
        
        > This endpoint is similar to the endpoint [`/portfolio/analysis/mean-variance/efficient-frontier`](#post-/portfolio/analysis/mean-variance/efficient-frontier), because the mean-variance efficient frontier is the \"top\" portion of the mean-variance minimum variance frontier.
        
        References
         * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/analysis/mean-variance/minimum-variance-frontier'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioAnalysisMeanVarianceMinimumVarianceFrontierResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioAnalysisMeanVarianceMinimumVarianceFrontier200ApplicationJSON])
                res.post_portfolio_analysis_mean_variance_minimum_variance_frontier_200_application_json_object = out

        return res

    def post_portfolio_analysis_return(self, request: Any) -> operations.PostPortfolioAnalysisReturnResponse:
        r"""Arithmetic Return
        Compute the arithmetic return of one or several portfolio(s) from either:  
        * Portfolio assets arithmetic returns
        * Portfolio values
        
        References
        * [Wikipedia, Rate of Return](https://en.wikipedia.org/wiki/Rate_of_return#Return)
        * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/analysis/return'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioAnalysisReturnResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioAnalysisReturn200ApplicationJSON])
                res.post_portfolio_analysis_return_200_application_json_object = out

        return res

    def post_portfolio_analysis_returns_average(self, request: operations.PostPortfolioAnalysisReturnsAverageRequestBody) -> operations.PostPortfolioAnalysisReturnsAverageResponse:
        r"""Arithmetic Average Return
        Compute the arithmetic average of the arithmetic return(s) of one or several portfolio(s).
        
        References
        * [Wikipedia, Arithmetic Average Rate of Return](https://en.wikipedia.org/wiki/Rate_of_return#Arithmetic_average_rate_of_return)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/analysis/returns/average'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioAnalysisReturnsAverageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioAnalysisReturnsAverage200ApplicationJSON])
                res.post_portfolio_analysis_returns_average_200_application_json_object = out

        return res

    def post_portfolio_analysis_tracking_error(self, request: operations.PostPortfolioAnalysisTrackingErrorRequestBody) -> operations.PostPortfolioAnalysisTrackingErrorResponse:
        r"""Tracking Error
        Compute the tracking error between a benchmark and one or several portfolio(s).
        
        References
        * [Wikipedia, Tracking error](https://en.wikipedia.org/wiki/Tracking_error) 
        * Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/analysis/tracking-error'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioAnalysisTrackingErrorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioAnalysisTrackingError200ApplicationJSON])
                res.post_portfolio_analysis_tracking_error_200_application_json_object = out

        return res

    def post_portfolio_analysis_ulcer_index(self, request: operations.PostPortfolioAnalysisUlcerIndexRequestBody) -> operations.PostPortfolioAnalysisUlcerIndexResponse:
        r"""Ulcer Index
        Compute the Ulcer Index of one or several portfolio(s).
        
        References
        * Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution
        * [Peter G. Martin, Ulcer Index, An Alternative Approach to the Measurement of Investment Risk & Risk-Adjusted Performance](http://www.tangotools.com/ui/ui.htm)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/analysis/ulcer-index'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioAnalysisUlcerIndexResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioAnalysisUlcerIndex200ApplicationJSON])
                res.post_portfolio_analysis_ulcer_index_200_application_json_object = out

        return res

    def post_portfolio_analysis_ulcer_performance_index(self, request: operations.PostPortfolioAnalysisUlcerPerformanceIndexRequestBody) -> operations.PostPortfolioAnalysisUlcerPerformanceIndexResponse:
        r"""Ulcer Performance Index
        Compute the Ulcer Performance Index of one or several portfolio(s).
        
        References
        * Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution
        * [Peter G. Martin, Ulcer Index, An Alternative Approach to the Measurement of Investment Risk & Risk-Adjusted Performance](http://www.tangotools.com/ui/ui.htm)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/analysis/ulcer-performance-index'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioAnalysisUlcerPerformanceIndexResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioAnalysisUlcerPerformanceIndex200ApplicationJSON])
                res.post_portfolio_analysis_ulcer_performance_index_200_application_json_object = out

        return res

    def post_portfolio_analysis_value_at_risk(self, request: operations.PostPortfolioAnalysisValueAtRiskRequestBody) -> operations.PostPortfolioAnalysisValueAtRiskResponse:
        r"""Value At Risk
        Compute the value at risk of one or several portfolio(s) from portfolio values.
        
        References
        * [Wikipedia, Value at risk](https://en.wikipedia.org/wiki/Value_at_risk)
        * [Acerbi, C. and Tasche, D. (2002), Expected Shortfall: A Natural Coherent Alternative to Value at Risk. Economic Notes, 31: 379-388](https://onlinelibrary.wiley.com/doi/abs/10.1111/1468-0300.00091)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/analysis/value-at-risk'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioAnalysisValueAtRiskResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioAnalysisValueAtRisk200ApplicationJSON])
                res.post_portfolio_analysis_value_at_risk_200_application_json_object = out

        return res

    def post_portfolio_analysis_volatility(self, request: Any) -> operations.PostPortfolioAnalysisVolatilityResponse:
        r"""Volatility
        Compute the volatility (i.e., standard deviation) of one or several portfolio(s) from either:  
        * Portfolio assets covariance matrix
        * Portfolio values
        
        References
        * [Wikipedia, Standard Deviation](https://en.wikipedia.org/wiki/Standard_deviation#Finance)
        * Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution
        * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/analysis/volatility'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioAnalysisVolatilityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioAnalysisVolatility200ApplicationJSON])
                res.post_portfolio_analysis_volatility_200_application_json_object = out

        return res

    