/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Specifies the types of repositories to return. Can be one of `all` or `public`. Default: `public`. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise.
 */
export enum ReposListPublicVisibilityEnum {
  All = "all",
  Public = "public",
}

export class ReposListPublicRequest extends SpeakeasyBase {
  /**
   * A repository ID. Only return repositories with an ID greater than this ID.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=since" })
  since?: number;

  /**
   * Specifies the types of repositories to return. Can be one of `all` or `public`. Default: `public`. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=visibility",
  })
  visibility?: ReposListPublicVisibilityEnum;
}

export class ReposListPublicResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Response
   */
  @SpeakeasyMetadata({ elemType: shared.MinimalRepository })
  minimalRepositories?: shared.MinimalRepository[];

  /**
   * Validation failed
   */
  @SpeakeasyMetadata()
  validationError?: shared.ValidationError;
}
