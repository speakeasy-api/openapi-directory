/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * FlightOfferTravelerPricingFareDetailsBySegment - Fare details of the segment
 */
public class FlightOfferTravelerPricingFareDetailsBySegment {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalServices")
    public FlightOfferTravelerPricingFareDetailsBySegmentAdditionalServicesRequest additionalServices;

    public FlightOfferTravelerPricingFareDetailsBySegment withAdditionalServices(FlightOfferTravelerPricingFareDetailsBySegmentAdditionalServicesRequest additionalServices) {
        this.additionalServices = additionalServices;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allotmentDetails")
    public FlightOfferTravelerPricingFareDetailsBySegmentAllotmentDetails allotmentDetails;

    public FlightOfferTravelerPricingFareDetailsBySegment withAllotmentDetails(FlightOfferTravelerPricingFareDetailsBySegmentAllotmentDetails allotmentDetails) {
        this.allotmentDetails = allotmentDetails;
        return this;
    }
    
    /**
     * The name of the Fare Family corresponding to the fares. Only for the GDS provider and if the airline has fare families filled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("brandedFare")
    public String brandedFare;

    public FlightOfferTravelerPricingFareDetailsBySegment withBrandedFare(String brandedFare) {
        this.brandedFare = brandedFare;
        return this;
    }
    
    /**
     * quality of service offered in the cabin where the seat is located in this flight. Economy, premium economy, business or first class
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cabin")
    public TravelClassEnum cabin;

    public FlightOfferTravelerPricingFareDetailsBySegment withCabin(TravelClassEnum cabin) {
        this.cabin = cabin;
        return this;
    }
    
    /**
     * The code of the booking class, a.k.a. class of service or Reservations/Booking Designator (RBD)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("class")
    public String class_;

    public FlightOfferTravelerPricingFareDetailsBySegment withClass(String class_) {
        this.class_ = class_;
        return this;
    }
    
    /**
     * Fare basis specifying the rules of a fare. Usually, though not always, is composed of the booking class code followed by a set of letters and digits representing other characteristics of the ticket, such as refundability, minimum stay requirements, discounts or special promotional elements.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fareBasis")
    public String fareBasis;

    public FlightOfferTravelerPricingFareDetailsBySegment withFareBasis(String fareBasis) {
        this.fareBasis = fareBasis;
        return this;
    }
    
    /**
     * baggageAllowance
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includedCheckedBags")
    public BaggageAllowance includedCheckedBags;

    public FlightOfferTravelerPricingFareDetailsBySegment withIncludedCheckedBags(BaggageAllowance includedCheckedBags) {
        this.includedCheckedBags = includedCheckedBags;
        return this;
    }
    
    /**
     * True if the corresponding booking class is in an allotment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isAllotment")
    public Boolean isAllotment;

    public FlightOfferTravelerPricingFareDetailsBySegment withIsAllotment(Boolean isAllotment) {
        this.isAllotment = isAllotment;
        return this;
    }
    
    /**
     * Id of the segment
     */
    @JsonProperty("segmentId")
    public String segmentId;

    public FlightOfferTravelerPricingFareDetailsBySegment withSegmentId(String segmentId) {
        this.segmentId = segmentId;
        return this;
    }
    
    /**
     * slice and Dice indicator, such as Local Availability, Sub OnD(Origin and Destination) 1 Availability and Sub OnD 2 Availability
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sliceDiceIndicator")
    public SliceDiceIndicatorEnum sliceDiceIndicator;

    public FlightOfferTravelerPricingFareDetailsBySegment withSliceDiceIndicator(SliceDiceIndicatorEnum sliceDiceIndicator) {
        this.sliceDiceIndicator = sliceDiceIndicator;
        return this;
    }
    
    public FlightOfferTravelerPricingFareDetailsBySegment(@JsonProperty("segmentId") String segmentId) {
        this.segmentId = segmentId;
  }
}
