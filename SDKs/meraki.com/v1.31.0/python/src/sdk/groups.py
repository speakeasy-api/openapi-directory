"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Groups:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_network_firmware_upgrades_staged_group(self, request: operations.CreateNetworkFirmwareUpgradesStagedGroupRequest) -> operations.CreateNetworkFirmwareUpgradesStagedGroupResponse:
        r"""Create a Staged Upgrade Group for a network
        Create a Staged Upgrade Group for a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateNetworkFirmwareUpgradesStagedGroupRequest, base_url, '/networks/{networkId}/firmwareUpgrades/staged/groups', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateNetworkFirmwareUpgradesStagedGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.create_network_firmware_upgrades_staged_group_200_application_json_object = out

        return res

    def create_organization_adaptive_policy_group(self, request: operations.CreateOrganizationAdaptivePolicyGroupRequest) -> operations.CreateOrganizationAdaptivePolicyGroupResponse:
        r"""Creates a new adaptive policy group
        Creates a new adaptive policy group
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateOrganizationAdaptivePolicyGroupRequest, base_url, '/organizations/{organizationId}/adaptivePolicy/groups', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateOrganizationAdaptivePolicyGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.create_organization_adaptive_policy_group_201_application_json_object = out

        return res

    def create_organization_policy_objects_group(self, request: operations.CreateOrganizationPolicyObjectsGroupRequest) -> operations.CreateOrganizationPolicyObjectsGroupResponse:
        r"""Creates a new Policy Object Group.
        Creates a new Policy Object Group.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateOrganizationPolicyObjectsGroupRequest, base_url, '/organizations/{organizationId}/policyObjects/groups', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateOrganizationPolicyObjectsGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.create_organization_policy_objects_group_201_application_json_object = out

        return res

    def delete_network_firmware_upgrades_staged_group(self, request: operations.DeleteNetworkFirmwareUpgradesStagedGroupRequest) -> operations.DeleteNetworkFirmwareUpgradesStagedGroupResponse:
        r"""Delete a Staged Upgrade Group
        Delete a Staged Upgrade Group
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteNetworkFirmwareUpgradesStagedGroupRequest, base_url, '/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteNetworkFirmwareUpgradesStagedGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_organization_adaptive_policy_group(self, request: operations.DeleteOrganizationAdaptivePolicyGroupRequest) -> operations.DeleteOrganizationAdaptivePolicyGroupResponse:
        r"""Deletes the specified adaptive policy group and any associated policies and references
        Deletes the specified adaptive policy group and any associated policies and references
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrganizationAdaptivePolicyGroupRequest, base_url, '/organizations/{organizationId}/adaptivePolicy/groups/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrganizationAdaptivePolicyGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_organization_policy_objects_group(self, request: operations.DeleteOrganizationPolicyObjectsGroupRequest) -> operations.DeleteOrganizationPolicyObjectsGroupResponse:
        r"""Deletes a Policy Object Group.
        Deletes a Policy Object Group.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrganizationPolicyObjectsGroupRequest, base_url, '/organizations/{organizationId}/policyObjects/groups/{policyObjectGroupId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrganizationPolicyObjectsGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_network_firmware_upgrades_staged_group(self, request: operations.GetNetworkFirmwareUpgradesStagedGroupRequest) -> operations.GetNetworkFirmwareUpgradesStagedGroupResponse:
        r"""Get a Staged Upgrade Group from a network
        Get a Staged Upgrade Group from a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkFirmwareUpgradesStagedGroupRequest, base_url, '/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkFirmwareUpgradesStagedGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetNetworkFirmwareUpgradesStagedGroup200ApplicationJSON])
                res.get_network_firmware_upgrades_staged_group_200_application_json_object = out

        return res

    def get_network_firmware_upgrades_staged_groups(self, request: operations.GetNetworkFirmwareUpgradesStagedGroupsRequest) -> operations.GetNetworkFirmwareUpgradesStagedGroupsResponse:
        r"""List of Staged Upgrade Groups in a network
        List of Staged Upgrade Groups in a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkFirmwareUpgradesStagedGroupsRequest, base_url, '/networks/{networkId}/firmwareUpgrades/staged/groups', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkFirmwareUpgradesStagedGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetNetworkFirmwareUpgradesStagedGroups200ApplicationJSON]])
                res.get_network_firmware_upgrades_staged_groups_200_application_json_objects = out

        return res

    def get_organization_adaptive_policy_group(self, request: operations.GetOrganizationAdaptivePolicyGroupRequest) -> operations.GetOrganizationAdaptivePolicyGroupResponse:
        r"""Returns an adaptive policy group
        Returns an adaptive policy group
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationAdaptivePolicyGroupRequest, base_url, '/organizations/{organizationId}/adaptivePolicy/groups/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationAdaptivePolicyGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_organization_adaptive_policy_group_200_application_json_object = out

        return res

    def get_organization_adaptive_policy_groups(self, request: operations.GetOrganizationAdaptivePolicyGroupsRequest) -> operations.GetOrganizationAdaptivePolicyGroupsResponse:
        r"""List adaptive policy groups in a organization
        List adaptive policy groups in a organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationAdaptivePolicyGroupsRequest, base_url, '/organizations/{organizationId}/adaptivePolicy/groups', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationAdaptivePolicyGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_organization_adaptive_policy_groups_200_application_json_objects = out

        return res

    def get_organization_policy_objects_group(self, request: operations.GetOrganizationPolicyObjectsGroupRequest) -> operations.GetOrganizationPolicyObjectsGroupResponse:
        r"""Shows details of a Policy Object Group.
        Shows details of a Policy Object Group.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationPolicyObjectsGroupRequest, base_url, '/organizations/{organizationId}/policyObjects/groups/{policyObjectGroupId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationPolicyObjectsGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_organization_policy_objects_group_200_application_json_object = out

        return res

    def get_organization_policy_objects_groups(self, request: operations.GetOrganizationPolicyObjectsGroupsRequest) -> operations.GetOrganizationPolicyObjectsGroupsResponse:
        r"""Lists Policy Object Groups belonging to the organization.
        Lists Policy Object Groups belonging to the organization.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationPolicyObjectsGroupsRequest, base_url, '/organizations/{organizationId}/policyObjects/groups', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationPolicyObjectsGroupsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationPolicyObjectsGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_organization_policy_objects_groups_200_application_json_objects = out

        return res

    def update_network_firmware_upgrades_staged_group(self, request: operations.UpdateNetworkFirmwareUpgradesStagedGroupRequest) -> operations.UpdateNetworkFirmwareUpgradesStagedGroupResponse:
        r"""Update a Staged Upgrade Group for a network
        Update a Staged Upgrade Group for a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkFirmwareUpgradesStagedGroupRequest, base_url, '/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkFirmwareUpgradesStagedGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_network_firmware_upgrades_staged_group_200_application_json_object = out

        return res

    def update_organization_adaptive_policy_group(self, request: operations.UpdateOrganizationAdaptivePolicyGroupRequest) -> operations.UpdateOrganizationAdaptivePolicyGroupResponse:
        r"""Updates an adaptive policy group
        Updates an adaptive policy group. If updating \"Infrastructure\", only the SGT is allowed. Cannot update \"Unknown\".
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateOrganizationAdaptivePolicyGroupRequest, base_url, '/organizations/{organizationId}/adaptivePolicy/groups/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateOrganizationAdaptivePolicyGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_organization_adaptive_policy_group_200_application_json_object = out

        return res

    def update_organization_policy_objects_group(self, request: operations.UpdateOrganizationPolicyObjectsGroupRequest) -> operations.UpdateOrganizationPolicyObjectsGroupResponse:
        r"""Updates a Policy Object Group.
        Updates a Policy Object Group.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateOrganizationPolicyObjectsGroupRequest, base_url, '/organizations/{organizationId}/policyObjects/groups/{policyObjectGroupId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateOrganizationPolicyObjectsGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_organization_policy_objects_group_200_application_json_object = out

        return res

    