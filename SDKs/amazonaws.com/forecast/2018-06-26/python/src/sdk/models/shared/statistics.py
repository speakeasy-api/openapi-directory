"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Statistics:
    r"""Provides statistics for each data field imported into to an Amazon Forecast dataset with the <a href=\\"https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDatasetImportJob.html\\">CreateDatasetImportJob</a> operation."""
    
    avg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Avg'), 'exclude': lambda f: f is None }})  
    count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Count'), 'exclude': lambda f: f is None }})  
    count_distinct: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CountDistinct'), 'exclude': lambda f: f is None }})  
    count_distinct_long: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CountDistinctLong'), 'exclude': lambda f: f is None }})  
    count_long: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CountLong'), 'exclude': lambda f: f is None }})  
    count_nan: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CountNan'), 'exclude': lambda f: f is None }})  
    count_nan_long: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CountNanLong'), 'exclude': lambda f: f is None }})  
    count_null: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CountNull'), 'exclude': lambda f: f is None }})  
    count_null_long: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CountNullLong'), 'exclude': lambda f: f is None }})  
    max: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Max'), 'exclude': lambda f: f is None }})  
    min: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Min'), 'exclude': lambda f: f is None }})  
    stddev: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Stddev'), 'exclude': lambda f: f is None }})  
    