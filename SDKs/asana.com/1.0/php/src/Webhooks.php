<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Webhooks 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Establish a webhook
     * 
     * Establishing a webhook is a two-part process. First, a simple HTTP POST
     * request initiates the creation similar to creating any other resource.
     * 
     * Next, in the middle of this request comes the confirmation handshake.
     * When a webhook is created, we will send a test POST to the target with an
     * `X-Hook-Secret` header. The target must respond with a `200 OK` or `204
     * No Content` and a matching `X-Hook-Secret` header to confirm that this
     * webhook subscription is indeed expected. We strongly recommend storing
     * this secret to be used to verify future webhook event signatures.
     * 
     * The POST request to create the webhook will then return with the status
     * of the request. If you do not acknowledge the webhookâ€™s confirmation
     * handshake it will fail to setup, and you will receive an error in
     * response to your attempt to create it. This means you need to be able to
     * receive and complete the webhook *while* the POST request is in-flight
     * (in other words, have a server that can handle requests asynchronously).
     * 
     * Invalid hostnames like localhost will recieve a 403 Forbidden status code.
     * 
     * ```
     * # Request
     * curl -H "Authorization: Bearer <personal_access_token>" \
     * -X POST https://app.asana.com/api/1.0/webhooks \
     * -d "resource=8675309" \
     * -d "target=https://example.com/receive-webhook/7654"
     * ```
     * 
     * ```
     * # Handshake sent to https://example.com/
     * POST /receive-webhook/7654
     * X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81
     * ```
     * 
     * ```
     * # Handshake response sent by example.com
     * HTTP/1.1 200
     * X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81
     * ```
     * 
     * ```
     * # Response
     * HTTP/1.1 201
     * {
     *   "data": {
     *     "gid": "43214",
     *     "resource": {
     *       "gid": "8675309",
     *       "name": "Bugs"
     *     },
     *     "target": "https://example.com/receive-webhook/7654",
     *     "active": false,
     *     "last_success_at": null,
     *     "last_failure_at": null,
     *     "last_failure_content": null
     *   }
     * }
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateWebhookRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateWebhookResponse
     */
	public function createWebhook(
        \OpenAPI\OpenAPI\Models\Operations\CreateWebhookRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateWebhookResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/webhooks');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CreateWebhookRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createWebhook201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateWebhook201ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a webhook
     * 
     * This method *permanently* removes a webhook. Note that it may be possible to receive a request that was already in flight after deleting the webhook, but no further requests will be issued.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWebhookRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteWebhookResponse
     */
	public function deleteWebhook(
        \OpenAPI\OpenAPI\Models\Operations\DeleteWebhookRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteWebhookResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/webhooks/{webhook_gid}', \OpenAPI\OpenAPI\Models\Operations\DeleteWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteWebhookRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteWebhook200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DeleteWebhook200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a webhook
     * 
     * Returns the full record for the given webhook.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWebhookRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWebhookResponse
     */
	public function getWebhook(
        \OpenAPI\OpenAPI\Models\Operations\GetWebhookRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWebhookResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/webhooks/{webhook_gid}', \OpenAPI\OpenAPI\Models\Operations\GetWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetWebhookRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getWebhook200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetWebhook200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get multiple webhooks
     * 
     * Get the compact representation of all webhooks your app has registered for the authenticated user in the given workspace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWebhooksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWebhooksResponse
     */
	public function getWebhooks(
        \OpenAPI\OpenAPI\Models\Operations\GetWebhooksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWebhooksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/webhooks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetWebhooksRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWebhooksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getWebhooks200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetWebhooks200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a webhook
     * 
     * An existing webhook's filters can be updated by making a PUT request on the URL for that webhook. Note that the webhook's previous `filters` array will be completely overwritten by the `filters` sent in the PUT request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateWebhookRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateWebhookResponse
     */
	public function updateWebhook(
        \OpenAPI\OpenAPI\Models\Operations\UpdateWebhookRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateWebhookResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/webhooks/{webhook_gid}', \OpenAPI\OpenAPI\Models\Operations\UpdateWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UpdateWebhookRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateWebhook200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateWebhook200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
}