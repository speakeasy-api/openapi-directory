"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import notificationrecipient as shared_notificationrecipient
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class NotificationAttributesActionEnum(str, Enum):
    r"""Action that triggers notification."""
    UPLOAD = 'upload'
    DOWNLOAD = 'download'
    DELETE = 'delete'
    ALL = 'all'

class NotificationAttributesSendEmailEnum(str, Enum):
    r"""Whether or not an email will send when the notification is triggered."""
    TRUE = 'true'
    FALSE = 'false'

class NotificationAttributesTypeEnum(str, Enum):
    r"""Type of the resource the notification is attached to."""
    FILE = 'file'
    FOLDER = 'folder'
    SHARED_FOLDER = 'shared_folder'
    SEND_RECEIPT = 'send_receipt'
    SHARE_RECEIPT = 'share_receipt'
    FILE_DROP = 'file_drop'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NotificationAttributes:
    r"""Attributes for the notification including the path, recipients, and share data."""
    
    action: Optional[NotificationAttributesActionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action'), 'exclude': lambda f: f is None }})
    r"""Action that triggers notification."""  
    created: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of notifiction creation."""  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""Custom message that will be sent to the notification recipients."""  
    modified: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modified'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of notification modification."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the item that the notification is set on."""  
    path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path'), 'exclude': lambda f: f is None }})
    r"""Path to the item that the notification is set on."""  
    readable_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('readableDescription'), 'exclude': lambda f: f is None }})
    r"""Human readable description of the notification."""  
    readable_description_without_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('readableDescriptionWithoutPath'), 'exclude': lambda f: f is None }})
    r"""Human readable description of the notification without item path."""  
    recipients: Optional[list[shared_notificationrecipient.NotificationRecipient]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipients'), 'exclude': lambda f: f is None }})
    r"""Notification recipients."""  
    send_email: Optional[NotificationAttributesSendEmailEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sendEmail'), 'exclude': lambda f: f is None }})
    r"""Whether or not an email will send when the notification is triggered."""  
    share_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shareId'), 'exclude': lambda f: f is None }})
    r"""ID of the share that the notification belogns to."""  
    type: Optional[NotificationAttributesTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of the resource the notification is attached to."""  
    user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userId'), 'exclude': lambda f: f is None }})
    r"""ID of the user that the notification belongs to."""  
    usernames: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usernames'), 'exclude': lambda f: f is None }})
    r"""Detail on which users can trigger the notification."""  
    