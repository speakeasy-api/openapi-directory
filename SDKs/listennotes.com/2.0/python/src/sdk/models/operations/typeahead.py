"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import typeaheadresponse as shared_typeaheadresponse
from enum import Enum
from typing import Optional

class TypeaheadSafeModeEnum(str, Enum):
    r"""Whether or not to exclude podcasts/episodes with explicit language. 1 is yes and 0 is no. It works only when **show_podcasts** is *1*."""
    ZERO = '0'
    ONE = '1'

class TypeaheadShowGenresEnum(str, Enum):
    r"""Whether or not to autosuggest genres. 1 is yes, 0 is no."""
    ZERO = '0'
    ONE = '1'

class TypeaheadShowPodcastsEnum(str, Enum):
    r"""Autosuggest podcasts. This only searches podcast title and publisher and returns very limited info of 5 podcasts. 1 is yes, 0 is no. It's a bit slow to autosuggest podcasts, so we turn it off by default. If show_podcasts=1, you can also pass iTunes id (e.g., 474722933) to the q parameter to fetch podcast meta data."""
    ZERO = '0'
    ONE = '1'


@dataclasses.dataclass
class TypeaheadRequest:
    
    q: str = dataclasses.field(metadata={'query_param': { 'field_name': 'q', 'style': 'form', 'explode': True }})
    r"""Search term, e.g., person, place, topic... You can use double quotes to do verbatim match, e.g., \\"game of thrones\\". Otherwise, it's fuzzy search."""  
    x_listen_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'X-ListenAPI-Key', 'style': 'simple', 'explode': False }})
    r"""Get API Key on listennotes.com/api"""  
    safe_mode: Optional[TypeaheadSafeModeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'safe_mode', 'style': 'form', 'explode': True }})
    r"""Whether or not to exclude podcasts/episodes with explicit language. 1 is yes and 0 is no. It works only when **show_podcasts** is *1*."""  
    show_genres: Optional[TypeaheadShowGenresEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'show_genres', 'style': 'form', 'explode': True }})
    r"""Whether or not to autosuggest genres. 1 is yes, 0 is no."""  
    show_podcasts: Optional[TypeaheadShowPodcastsEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'show_podcasts', 'style': 'form', 'explode': True }})
    r"""Autosuggest podcasts. This only searches podcast title and publisher and returns very limited info of 5 podcasts. 1 is yes, 0 is no. It's a bit slow to autosuggest podcasts, so we turn it off by default. If show_podcasts=1, you can also pass iTunes id (e.g., 474722933) to the q parameter to fetch podcast meta data."""  
    

@dataclasses.dataclass
class TypeaheadResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    typeahead_response: Optional[shared_typeaheadresponse.TypeaheadResponse] = dataclasses.field(default=None)
    r"""OK"""  
    