/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * <p>A collection of attributes that are applied to all active Security Hub-aggregated findings and that result in a subset of findings that are included in this insight.</p> <p>You can filter by up to 10 finding attributes. For each attribute, you can provide up to 20 filter values.</p>
 */
export class UpdateFindingsRequestBodyFilters extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "AwsAccountId" })
  @Type(() => shared.StringFilter)
  awsAccountId?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "CompanyName" })
  @Type(() => shared.StringFilter)
  companyName?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ComplianceAssociatedStandardsId" })
  @Type(() => shared.StringFilter)
  complianceAssociatedStandardsId?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ComplianceSecurityControlId" })
  @Type(() => shared.StringFilter)
  complianceSecurityControlId?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ComplianceStatus" })
  @Type(() => shared.StringFilter)
  complianceStatus?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.NumberFilter })
  @Expose({ name: "Confidence" })
  @Type(() => shared.NumberFilter)
  confidence?: shared.NumberFilter[];

  @SpeakeasyMetadata({ elemType: shared.DateFilter })
  @Expose({ name: "CreatedAt" })
  @Type(() => shared.DateFilter)
  createdAt?: shared.DateFilter[];

  @SpeakeasyMetadata({ elemType: shared.NumberFilter })
  @Expose({ name: "Criticality" })
  @Type(() => shared.NumberFilter)
  criticality?: shared.NumberFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "Description" })
  @Type(() => shared.StringFilter)
  description?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.NumberFilter })
  @Expose({ name: "FindingProviderFieldsConfidence" })
  @Type(() => shared.NumberFilter)
  findingProviderFieldsConfidence?: shared.NumberFilter[];

  @SpeakeasyMetadata({ elemType: shared.NumberFilter })
  @Expose({ name: "FindingProviderFieldsCriticality" })
  @Type(() => shared.NumberFilter)
  findingProviderFieldsCriticality?: shared.NumberFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "FindingProviderFieldsRelatedFindingsId" })
  @Type(() => shared.StringFilter)
  findingProviderFieldsRelatedFindingsId?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "FindingProviderFieldsRelatedFindingsProductArn" })
  @Type(() => shared.StringFilter)
  findingProviderFieldsRelatedFindingsProductArn?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "FindingProviderFieldsSeverityLabel" })
  @Type(() => shared.StringFilter)
  findingProviderFieldsSeverityLabel?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "FindingProviderFieldsSeverityOriginal" })
  @Type(() => shared.StringFilter)
  findingProviderFieldsSeverityOriginal?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "FindingProviderFieldsTypes" })
  @Type(() => shared.StringFilter)
  findingProviderFieldsTypes?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.DateFilter })
  @Expose({ name: "FirstObservedAt" })
  @Type(() => shared.DateFilter)
  firstObservedAt?: shared.DateFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "GeneratorId" })
  @Type(() => shared.StringFilter)
  generatorId?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "Id" })
  @Type(() => shared.StringFilter)
  id?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.KeywordFilter })
  @Expose({ name: "Keyword" })
  @Type(() => shared.KeywordFilter)
  keyword?: shared.KeywordFilter[];

  @SpeakeasyMetadata({ elemType: shared.DateFilter })
  @Expose({ name: "LastObservedAt" })
  @Type(() => shared.DateFilter)
  lastObservedAt?: shared.DateFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "MalwareName" })
  @Type(() => shared.StringFilter)
  malwareName?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "MalwarePath" })
  @Type(() => shared.StringFilter)
  malwarePath?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "MalwareState" })
  @Type(() => shared.StringFilter)
  malwareState?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "MalwareType" })
  @Type(() => shared.StringFilter)
  malwareType?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "NetworkDestinationDomain" })
  @Type(() => shared.StringFilter)
  networkDestinationDomain?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.IpFilter })
  @Expose({ name: "NetworkDestinationIpV4" })
  @Type(() => shared.IpFilter)
  networkDestinationIpV4?: shared.IpFilter[];

  @SpeakeasyMetadata({ elemType: shared.IpFilter })
  @Expose({ name: "NetworkDestinationIpV6" })
  @Type(() => shared.IpFilter)
  networkDestinationIpV6?: shared.IpFilter[];

  @SpeakeasyMetadata({ elemType: shared.NumberFilter })
  @Expose({ name: "NetworkDestinationPort" })
  @Type(() => shared.NumberFilter)
  networkDestinationPort?: shared.NumberFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "NetworkDirection" })
  @Type(() => shared.StringFilter)
  networkDirection?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "NetworkProtocol" })
  @Type(() => shared.StringFilter)
  networkProtocol?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "NetworkSourceDomain" })
  @Type(() => shared.StringFilter)
  networkSourceDomain?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.IpFilter })
  @Expose({ name: "NetworkSourceIpV4" })
  @Type(() => shared.IpFilter)
  networkSourceIpV4?: shared.IpFilter[];

  @SpeakeasyMetadata({ elemType: shared.IpFilter })
  @Expose({ name: "NetworkSourceIpV6" })
  @Type(() => shared.IpFilter)
  networkSourceIpV6?: shared.IpFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "NetworkSourceMac" })
  @Type(() => shared.StringFilter)
  networkSourceMac?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.NumberFilter })
  @Expose({ name: "NetworkSourcePort" })
  @Type(() => shared.NumberFilter)
  networkSourcePort?: shared.NumberFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "NoteText" })
  @Type(() => shared.StringFilter)
  noteText?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.DateFilter })
  @Expose({ name: "NoteUpdatedAt" })
  @Type(() => shared.DateFilter)
  noteUpdatedAt?: shared.DateFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "NoteUpdatedBy" })
  @Type(() => shared.StringFilter)
  noteUpdatedBy?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.DateFilter })
  @Expose({ name: "ProcessLaunchedAt" })
  @Type(() => shared.DateFilter)
  processLaunchedAt?: shared.DateFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ProcessName" })
  @Type(() => shared.StringFilter)
  processName?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.NumberFilter })
  @Expose({ name: "ProcessParentPid" })
  @Type(() => shared.NumberFilter)
  processParentPid?: shared.NumberFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ProcessPath" })
  @Type(() => shared.StringFilter)
  processPath?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.NumberFilter })
  @Expose({ name: "ProcessPid" })
  @Type(() => shared.NumberFilter)
  processPid?: shared.NumberFilter[];

  @SpeakeasyMetadata({ elemType: shared.DateFilter })
  @Expose({ name: "ProcessTerminatedAt" })
  @Type(() => shared.DateFilter)
  processTerminatedAt?: shared.DateFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ProductArn" })
  @Type(() => shared.StringFilter)
  productArn?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.MapFilter })
  @Expose({ name: "ProductFields" })
  @Type(() => shared.MapFilter)
  productFields?: shared.MapFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ProductName" })
  @Type(() => shared.StringFilter)
  productName?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "RecommendationText" })
  @Type(() => shared.StringFilter)
  recommendationText?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "RecordState" })
  @Type(() => shared.StringFilter)
  recordState?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "Region" })
  @Type(() => shared.StringFilter)
  region?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "RelatedFindingsId" })
  @Type(() => shared.StringFilter)
  relatedFindingsId?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "RelatedFindingsProductArn" })
  @Type(() => shared.StringFilter)
  relatedFindingsProductArn?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ResourceAwsEc2InstanceIamInstanceProfileArn" })
  @Type(() => shared.StringFilter)
  resourceAwsEc2InstanceIamInstanceProfileArn?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ResourceAwsEc2InstanceImageId" })
  @Type(() => shared.StringFilter)
  resourceAwsEc2InstanceImageId?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.IpFilter })
  @Expose({ name: "ResourceAwsEc2InstanceIpV4Addresses" })
  @Type(() => shared.IpFilter)
  resourceAwsEc2InstanceIpV4Addresses?: shared.IpFilter[];

  @SpeakeasyMetadata({ elemType: shared.IpFilter })
  @Expose({ name: "ResourceAwsEc2InstanceIpV6Addresses" })
  @Type(() => shared.IpFilter)
  resourceAwsEc2InstanceIpV6Addresses?: shared.IpFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ResourceAwsEc2InstanceKeyName" })
  @Type(() => shared.StringFilter)
  resourceAwsEc2InstanceKeyName?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.DateFilter })
  @Expose({ name: "ResourceAwsEc2InstanceLaunchedAt" })
  @Type(() => shared.DateFilter)
  resourceAwsEc2InstanceLaunchedAt?: shared.DateFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ResourceAwsEc2InstanceSubnetId" })
  @Type(() => shared.StringFilter)
  resourceAwsEc2InstanceSubnetId?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ResourceAwsEc2InstanceType" })
  @Type(() => shared.StringFilter)
  resourceAwsEc2InstanceType?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ResourceAwsEc2InstanceVpcId" })
  @Type(() => shared.StringFilter)
  resourceAwsEc2InstanceVpcId?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.DateFilter })
  @Expose({ name: "ResourceAwsIamAccessKeyCreatedAt" })
  @Type(() => shared.DateFilter)
  resourceAwsIamAccessKeyCreatedAt?: shared.DateFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ResourceAwsIamAccessKeyPrincipalName" })
  @Type(() => shared.StringFilter)
  resourceAwsIamAccessKeyPrincipalName?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ResourceAwsIamAccessKeyStatus" })
  @Type(() => shared.StringFilter)
  resourceAwsIamAccessKeyStatus?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ResourceAwsIamAccessKeyUserName" })
  @Type(() => shared.StringFilter)
  resourceAwsIamAccessKeyUserName?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ResourceAwsIamUserUserName" })
  @Type(() => shared.StringFilter)
  resourceAwsIamUserUserName?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ResourceAwsS3BucketOwnerId" })
  @Type(() => shared.StringFilter)
  resourceAwsS3BucketOwnerId?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ResourceAwsS3BucketOwnerName" })
  @Type(() => shared.StringFilter)
  resourceAwsS3BucketOwnerName?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ResourceContainerImageId" })
  @Type(() => shared.StringFilter)
  resourceContainerImageId?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ResourceContainerImageName" })
  @Type(() => shared.StringFilter)
  resourceContainerImageName?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.DateFilter })
  @Expose({ name: "ResourceContainerLaunchedAt" })
  @Type(() => shared.DateFilter)
  resourceContainerLaunchedAt?: shared.DateFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ResourceContainerName" })
  @Type(() => shared.StringFilter)
  resourceContainerName?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.MapFilter })
  @Expose({ name: "ResourceDetailsOther" })
  @Type(() => shared.MapFilter)
  resourceDetailsOther?: shared.MapFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ResourceId" })
  @Type(() => shared.StringFilter)
  resourceId?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ResourcePartition" })
  @Type(() => shared.StringFilter)
  resourcePartition?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ResourceRegion" })
  @Type(() => shared.StringFilter)
  resourceRegion?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.MapFilter })
  @Expose({ name: "ResourceTags" })
  @Type(() => shared.MapFilter)
  resourceTags?: shared.MapFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ResourceType" })
  @Type(() => shared.StringFilter)
  resourceType?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.BooleanFilter })
  @Expose({ name: "Sample" })
  @Type(() => shared.BooleanFilter)
  sample?: shared.BooleanFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "SeverityLabel" })
  @Type(() => shared.StringFilter)
  severityLabel?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.NumberFilter })
  @Expose({ name: "SeverityNormalized" })
  @Type(() => shared.NumberFilter)
  severityNormalized?: shared.NumberFilter[];

  @SpeakeasyMetadata({ elemType: shared.NumberFilter })
  @Expose({ name: "SeverityProduct" })
  @Type(() => shared.NumberFilter)
  severityProduct?: shared.NumberFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "SourceUrl" })
  @Type(() => shared.StringFilter)
  sourceUrl?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ThreatIntelIndicatorCategory" })
  @Type(() => shared.StringFilter)
  threatIntelIndicatorCategory?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.DateFilter })
  @Expose({ name: "ThreatIntelIndicatorLastObservedAt" })
  @Type(() => shared.DateFilter)
  threatIntelIndicatorLastObservedAt?: shared.DateFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ThreatIntelIndicatorSource" })
  @Type(() => shared.StringFilter)
  threatIntelIndicatorSource?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ThreatIntelIndicatorSourceUrl" })
  @Type(() => shared.StringFilter)
  threatIntelIndicatorSourceUrl?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ThreatIntelIndicatorType" })
  @Type(() => shared.StringFilter)
  threatIntelIndicatorType?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ThreatIntelIndicatorValue" })
  @Type(() => shared.StringFilter)
  threatIntelIndicatorValue?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "Title" })
  @Type(() => shared.StringFilter)
  title?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "Type" })
  @Type(() => shared.StringFilter)
  type?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.DateFilter })
  @Expose({ name: "UpdatedAt" })
  @Type(() => shared.DateFilter)
  updatedAt?: shared.DateFilter[];

  @SpeakeasyMetadata({ elemType: shared.MapFilter })
  @Expose({ name: "UserDefinedFields" })
  @Type(() => shared.MapFilter)
  userDefinedFields?: shared.MapFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "VerificationState" })
  @Type(() => shared.StringFilter)
  verificationState?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "WorkflowState" })
  @Type(() => shared.StringFilter)
  workflowState?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "WorkflowStatus" })
  @Type(() => shared.StringFilter)
  workflowStatus?: shared.StringFilter[];
}

/**
 * The updated note.
 */
export class UpdateFindingsRequestBodyNote extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Text" })
  text?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "UpdatedBy" })
  updatedBy?: string;
}

/**
 * The updated record state for the finding.
 */
export enum UpdateFindingsRequestBodyRecordStateEnum {
  Active = "ACTIVE",
  Archived = "ARCHIVED",
}

export class UpdateFindingsRequestBody extends SpeakeasyBase {
  /**
   * <p>A collection of attributes that are applied to all active Security Hub-aggregated findings and that result in a subset of findings that are included in this insight.</p> <p>You can filter by up to 10 finding attributes. For each attribute, you can provide up to 20 filter values.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Filters" })
  @Type(() => UpdateFindingsRequestBodyFilters)
  filters: UpdateFindingsRequestBodyFilters;

  /**
   * The updated note.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Note" })
  @Type(() => UpdateFindingsRequestBodyNote)
  note?: UpdateFindingsRequestBodyNote;

  /**
   * The updated record state for the finding.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RecordState" })
  recordState?: UpdateFindingsRequestBodyRecordStateEnum;
}

export class UpdateFindingsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateFindingsRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class UpdateFindingsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalException
   */
  @SpeakeasyMetadata()
  internalException?: any;

  /**
   * InvalidAccessException
   */
  @SpeakeasyMetadata()
  invalidAccessException?: any;

  /**
   * InvalidInputException
   */
  @SpeakeasyMetadata()
  invalidInputException?: any;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateFindingsResponse?: Record<string, any>;
}
