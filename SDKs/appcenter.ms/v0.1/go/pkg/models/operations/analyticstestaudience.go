// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type AnalyticsTestAudienceSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type AnalyticsTestAudiencePathParams struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type AnalyticsTestAudienceRequestBodyCustomPropertiesEnum string

const (
	AnalyticsTestAudienceRequestBodyCustomPropertiesEnumString   AnalyticsTestAudienceRequestBodyCustomPropertiesEnum = "string"
	AnalyticsTestAudienceRequestBodyCustomPropertiesEnumNumber   AnalyticsTestAudienceRequestBodyCustomPropertiesEnum = "number"
	AnalyticsTestAudienceRequestBodyCustomPropertiesEnumBoolean  AnalyticsTestAudienceRequestBodyCustomPropertiesEnum = "boolean"
	AnalyticsTestAudienceRequestBodyCustomPropertiesEnumDateTime AnalyticsTestAudienceRequestBodyCustomPropertiesEnum = "date_time"
)

func (e *AnalyticsTestAudienceRequestBodyCustomPropertiesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "string":
		fallthrough
	case "number":
		fallthrough
	case "boolean":
		fallthrough
	case "date_time":
		*e = AnalyticsTestAudienceRequestBodyCustomPropertiesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsTestAudienceRequestBodyCustomPropertiesEnum: %s", s)
	}
}

// AnalyticsTestAudienceRequestBody - Audience definition.
type AnalyticsTestAudienceRequestBody struct {
	// Custom properties used in the definition.
	CustomProperties map[string]AnalyticsTestAudienceRequestBodyCustomPropertiesEnum `json:"custom_properties,omitempty"`
	// Audience definition in OData format.
	Definition string `json:"definition"`
	// Audience description.
	Description *string `json:"description,omitempty"`
	Enabled     *bool   `json:"enabled,omitempty"`
}

type AnalyticsTestAudienceRequest struct {
	PathParams AnalyticsTestAudiencePathParams
	// Audience definition
	Request  AnalyticsTestAudienceRequestBody `request:"mediaType=application/json"`
	Security AnalyticsTestAudienceSecurity
}

type AnalyticsTestAudienceDefaultApplicationJSONErrorCodeEnum string

const (
	AnalyticsTestAudienceDefaultApplicationJSONErrorCodeEnumBadRequest          AnalyticsTestAudienceDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	AnalyticsTestAudienceDefaultApplicationJSONErrorCodeEnumConflict            AnalyticsTestAudienceDefaultApplicationJSONErrorCodeEnum = "Conflict"
	AnalyticsTestAudienceDefaultApplicationJSONErrorCodeEnumNotAcceptable       AnalyticsTestAudienceDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	AnalyticsTestAudienceDefaultApplicationJSONErrorCodeEnumNotFound            AnalyticsTestAudienceDefaultApplicationJSONErrorCodeEnum = "NotFound"
	AnalyticsTestAudienceDefaultApplicationJSONErrorCodeEnumInternalServerError AnalyticsTestAudienceDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	AnalyticsTestAudienceDefaultApplicationJSONErrorCodeEnumUnauthorized        AnalyticsTestAudienceDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	AnalyticsTestAudienceDefaultApplicationJSONErrorCodeEnumTooManyRequests     AnalyticsTestAudienceDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *AnalyticsTestAudienceDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = AnalyticsTestAudienceDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsTestAudienceDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type AnalyticsTestAudienceDefaultApplicationJSONError struct {
	Code    AnalyticsTestAudienceDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                   `json:"message"`
}

// AnalyticsTestAudienceDefaultApplicationJSON - Error code with reason
type AnalyticsTestAudienceDefaultApplicationJSON struct {
	Error AnalyticsTestAudienceDefaultApplicationJSONError `json:"error"`
}

type AnalyticsTestAudience200ApplicationJSONCustomPropertiesEnum string

const (
	AnalyticsTestAudience200ApplicationJSONCustomPropertiesEnumString   AnalyticsTestAudience200ApplicationJSONCustomPropertiesEnum = "string"
	AnalyticsTestAudience200ApplicationJSONCustomPropertiesEnumNumber   AnalyticsTestAudience200ApplicationJSONCustomPropertiesEnum = "number"
	AnalyticsTestAudience200ApplicationJSONCustomPropertiesEnumBoolean  AnalyticsTestAudience200ApplicationJSONCustomPropertiesEnum = "boolean"
	AnalyticsTestAudience200ApplicationJSONCustomPropertiesEnumDateTime AnalyticsTestAudience200ApplicationJSONCustomPropertiesEnum = "date_time"
)

func (e *AnalyticsTestAudience200ApplicationJSONCustomPropertiesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "string":
		fallthrough
	case "number":
		fallthrough
	case "boolean":
		fallthrough
	case "date_time":
		*e = AnalyticsTestAudience200ApplicationJSONCustomPropertiesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsTestAudience200ApplicationJSONCustomPropertiesEnum: %s", s)
	}
}

// AnalyticsTestAudience200ApplicationJSON - Audience test result.
type AnalyticsTestAudience200ApplicationJSON struct {
	// Custom properties used in the definition.
	CustomProperties map[string]AnalyticsTestAudience200ApplicationJSONCustomPropertiesEnum `json:"custom_properties,omitempty"`
	// Audience definition in OData format.
	Definition *string `json:"definition,omitempty"`
	// Estimated audience size.
	EstimatedCount *int64 `json:"estimated_count,omitempty"`
	// Estimated total audience size.
	EstimatedTotalCount *int64 `json:"estimated_total_count,omitempty"`
}

type AnalyticsTestAudienceResponse struct {
	// Tests audience definition.
	AnalyticsTestAudience200ApplicationJSONObject *AnalyticsTestAudience200ApplicationJSON
	// Error code with reason
	AnalyticsTestAudienceDefaultApplicationJSONObject *AnalyticsTestAudienceDefaultApplicationJSON
	ContentType                                       string
	StatusCode                                        int
	RawResponse                                       *http.Response
}
