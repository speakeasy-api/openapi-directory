/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { DailyMaintenanceWindow } from "./dailymaintenancewindow";
import { RecurringTimeWindow } from "./recurringtimewindow";
import { TimeWindow } from "./timewindow";
import { Expose, Transform, Type } from "class-transformer";

/**
 * MaintenanceWindow defines the maintenance window to be used for the cluster.
 */
export class MaintenanceWindow extends SpeakeasyBase {
  /**
   * Time window specified for daily maintenance operations.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dailyMaintenanceWindow" })
  @Type(() => DailyMaintenanceWindow)
  dailyMaintenanceWindow?: DailyMaintenanceWindow;

  /**
   * Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.
   */
  @SpeakeasyMetadata({ elemType: TimeWindow })
  @Expose({ name: "maintenanceExclusions" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, TimeWindow> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], TimeWindow);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  maintenanceExclusions?: Record<string, TimeWindow>;

  /**
   * Represents an arbitrary window of time that recurs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recurringWindow" })
  @Type(() => RecurringTimeWindow)
  recurringWindow?: RecurringTimeWindow;
}
