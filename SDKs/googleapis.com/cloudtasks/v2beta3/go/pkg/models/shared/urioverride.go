// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// URIOverrideSchemeEnum - Scheme override. When specified, the task URI scheme is replaced by the provided value (HTTP or HTTPS).
type URIOverrideSchemeEnum string

const (
	URIOverrideSchemeEnumSchemeUnspecified URIOverrideSchemeEnum = "SCHEME_UNSPECIFIED"
	URIOverrideSchemeEnumHTTP              URIOverrideSchemeEnum = "HTTP"
	URIOverrideSchemeEnumHTTPS             URIOverrideSchemeEnum = "HTTPS"
)

func (e *URIOverrideSchemeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SCHEME_UNSPECIFIED":
		fallthrough
	case "HTTP":
		fallthrough
	case "HTTPS":
		*e = URIOverrideSchemeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for URIOverrideSchemeEnum: %s", s)
	}
}

// URIOverrideURIOverrideEnforceModeEnum - URI Override Enforce Mode When specified, determines the Target UriOverride mode. If not specified, it defaults to ALWAYS.
type URIOverrideURIOverrideEnforceModeEnum string

const (
	URIOverrideURIOverrideEnforceModeEnumURIOverrideEnforceModeUnspecified URIOverrideURIOverrideEnforceModeEnum = "URI_OVERRIDE_ENFORCE_MODE_UNSPECIFIED"
	URIOverrideURIOverrideEnforceModeEnumIfNotExists                       URIOverrideURIOverrideEnforceModeEnum = "IF_NOT_EXISTS"
	URIOverrideURIOverrideEnforceModeEnumAlways                            URIOverrideURIOverrideEnforceModeEnum = "ALWAYS"
)

func (e *URIOverrideURIOverrideEnforceModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "URI_OVERRIDE_ENFORCE_MODE_UNSPECIFIED":
		fallthrough
	case "IF_NOT_EXISTS":
		fallthrough
	case "ALWAYS":
		*e = URIOverrideURIOverrideEnforceModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for URIOverrideURIOverrideEnforceModeEnum: %s", s)
	}
}

// URIOverride - URI Override. When specified, all the HTTP tasks inside the queue will be partially or fully overridden depending on the configured values.
type URIOverride struct {
	// Host override. When specified, replaces the host part of the task URL. For example, if the task URL is "https://www.google.com," and host value is set to "example.net", the overridden URI will be changed to "https://example.net." Host value cannot be an empty string (INVALID_ARGUMENT).
	Host *string `json:"host,omitempty"`
	// PathOverride. Path message defines path override for HTTP targets.
	PathOverride *PathOverride `json:"pathOverride,omitempty"`
	// Port override. When specified, replaces the port part of the task URI. For instance, for a URI http://www.google.com/foo and port=123, the overridden URI becomes http://www.google.com:123/foo. Note that the port value must be a positive integer. Setting the port to 0 (Zero) clears the URI port.
	Port *string `json:"port,omitempty"`
	// QueryOverride. Query message defines query override for HTTP targets.
	QueryOverride *QueryOverride `json:"queryOverride,omitempty"`
	// Scheme override. When specified, the task URI scheme is replaced by the provided value (HTTP or HTTPS).
	Scheme *URIOverrideSchemeEnum `json:"scheme,omitempty"`
	// URI Override Enforce Mode When specified, determines the Target UriOverride mode. If not specified, it defaults to ALWAYS.
	URIOverrideEnforceMode *URIOverrideURIOverrideEnforceModeEnum `json:"uriOverrideEnforceMode,omitempty"`
}
