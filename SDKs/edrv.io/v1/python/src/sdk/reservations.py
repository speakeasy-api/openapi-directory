"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Reservations:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_reservation(self, request: operations.GetReservationRequest) -> operations.GetReservationResponse:
        r"""Get one reservation data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetReservationRequest, base_url, '/v1/reservations/{id}', request)
        
        query_params = utils.get_query_params(operations.GetReservationRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetReservationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_reservations(self, request: operations.GetReservationsRequest) -> operations.GetReservationsResponse:
        r"""Get Reservations data"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/reservations'
        
        query_params = utils.get_query_params(operations.GetReservationsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetReservationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def updatereservation(self, request: operations.UpdatereservationRequest) -> operations.UpdatereservationResponse:
        r"""Use to request a update an existing reservation. The request will wait for the charge station to process the command. It will timeout after 60 seconds."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdatereservationRequest, base_url, '/v1/reservations/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatereservationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Updatereservation201ApplicationJSON])
                res.updatereservation_201_application_json_object = out
        elif http_res.status_code == 400:
            pass

        return res

    