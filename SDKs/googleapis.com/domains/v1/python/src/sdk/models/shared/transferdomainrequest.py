"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import authorizationcode as shared_authorizationcode
from ..shared import money as shared_money
from ..shared import registration as shared_registration
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TransferDomainRequestContactNoticesEnum(str, Enum):
    CONTACT_NOTICE_UNSPECIFIED = 'CONTACT_NOTICE_UNSPECIFIED'
    PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT = 'PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransferDomainRequestInput:
    r"""Request for the `TransferDomain` method."""
    
    authorization_code: Optional[shared_authorizationcode.AuthorizationCode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorizationCode'), 'exclude': lambda f: f is None }})
    r"""Defines an authorization code."""  
    contact_notices: Optional[list[TransferDomainRequestContactNoticesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contactNotices'), 'exclude': lambda f: f is None }})
    r"""The list of contact notices that you acknowledge. The notices needed here depend on the values specified in `registration.contact_settings`."""  
    registration: Optional[shared_registration.RegistrationInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registration'), 'exclude': lambda f: f is None }})
    r"""The `Registration` resource facilitates managing and configuring domain name registrations. There are several ways to create a new `Registration` resource: To create a new `Registration` resource, find a suitable domain name by calling the `SearchDomains` method with a query to see available domain name options. After choosing a name, call `RetrieveRegisterParameters` to ensure availability and obtain information like pricing, which is needed to build a call to `RegisterDomain`. Another way to create a new `Registration` is to transfer an existing domain from another registrar. First, go to the current registrar to unlock the domain for transfer and retrieve the domain's transfer authorization code. Then call `RetrieveTransferParameters` to confirm that the domain is unlocked and to get values needed to build a call to `TransferDomain`. Finally, you can create a new `Registration` by importing an existing domain managed with [Google Domains](https://domains.google/). First, call `RetrieveImportableDomains` to list domains to which the calling user has sufficient access. Then call `ImportDomain` on any domain names you want to use with Cloud Domains."""  
    validate_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validateOnly'), 'exclude': lambda f: f is None }})
    r"""Validate the request without actually transferring the domain."""  
    yearly_price: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('yearlyPrice'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money with its currency type."""  
    