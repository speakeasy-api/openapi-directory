<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * CardPaymentDetails - Reflects the current status of a card payment. Contains only non-confidential information.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class CardPaymentDetails
{
    /**
     * For EMV payments, the cryptogram generated for the payment.
     * 
     * @var ?string $applicationCryptogram
     */
	#[\JMS\Serializer\Annotation\SerializedName('application_cryptogram')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $applicationCryptogram = null;
    
    /**
     * For EMV payments, the application ID identifies the EMV application used for the payment.
     * 
     * @var ?string $applicationIdentifier
     */
	#[\JMS\Serializer\Annotation\SerializedName('application_identifier')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $applicationIdentifier = null;
    
    /**
     * For EMV payments, the human-readable name of the EMV application used for the payment.
     * 
     * @var ?string $applicationName
     */
	#[\JMS\Serializer\Annotation\SerializedName('application_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $applicationName = null;
    
    /**
     * The status code returned by the card issuer that describes the payment's
     * 
     * authorization status.
     * 
     * @var ?string $authResultCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('auth_result_code')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $authResultCode = null;
    
    /**
     * The status code returned from the Address Verification System (AVS) check. The code can be
     * 
     * `AVS_ACCEPTED`, `AVS_REJECTED`, or `AVS_NOT_CHECKED`.
     * 
     * @var ?string $avsStatus
     */
	#[\JMS\Serializer\Annotation\SerializedName('avs_status')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $avsStatus = null;
    
    /**
     * Represents the payment details of a card to be used for payments. These
     * 
     * details are determined by the payment token generated by Web Payments SDK.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Card $card
     */
	#[\JMS\Serializer\Annotation\SerializedName('card')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Card')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Card $card = null;
    
    /**
     * The timeline for card payments.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CardPaymentTimeline $cardPaymentTimeline
     */
	#[\JMS\Serializer\Annotation\SerializedName('card_payment_timeline')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CardPaymentTimeline')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CardPaymentTimeline $cardPaymentTimeline = null;
    
    /**
     * The status code returned from the Card Verification Value (CVV) check. The code can be
     * 
     * `CVV_ACCEPTED`, `CVV_REJECTED`, or `CVV_NOT_CHECKED`.
     * 
     * @var ?string $cvvStatus
     */
	#[\JMS\Serializer\Annotation\SerializedName('cvv_status')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $cvvStatus = null;
    
    /**
     * Details about the device that took the payment.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DeviceDetails $deviceDetails
     */
	#[\JMS\Serializer\Annotation\SerializedName('device_details')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\DeviceDetails')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DeviceDetails $deviceDetails = null;
    
    /**
     * The method used to enter the card's details for the payment. The method can be
     * 
     * `KEYED`, `SWIPED`, `EMV`, `ON_FILE`, or `CONTACTLESS`.
     * 
     * @var ?string $entryMethod
     */
	#[\JMS\Serializer\Annotation\SerializedName('entry_method')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $entryMethod = null;
    
    /**
     * Information about errors encountered during the request.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\Error> $errors
     */
	#[\JMS\Serializer\Annotation\SerializedName('errors')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Error>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $errors = null;
    
    /**
     * Whether the card must be physically present for the payment to
     * 
     * be refunded.  If set to `true`, the card must be present.
     * 
     * @var ?bool $refundRequiresCardPresence
     */
	#[\JMS\Serializer\Annotation\SerializedName('refund_requires_card_presence')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $refundRequiresCardPresence = null;
    
    /**
     * The statement description sent to the card networks.
     * 
     * 
     * Note: The actual statement description varies and is likely to be truncated and appended with
     * additional information on a per issuer basis.
     * 
     * @var ?string $statementDescription
     */
	#[\JMS\Serializer\Annotation\SerializedName('statement_description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $statementDescription = null;
    
    /**
     * The card payment's current state. The state can be AUTHORIZED, CAPTURED, VOIDED, or
     * 
     * FAILED.
     * 
     * @var ?string $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $status = null;
    
    /**
     * For EMV payments, the method used to verify the cardholder's identity. The method can be
     * 
     * `PIN`, `SIGNATURE`, `PIN_AND_SIGNATURE`, `ON_DEVICE`, or `NONE`.
     * 
     * @var ?string $verificationMethod
     */
	#[\JMS\Serializer\Annotation\SerializedName('verification_method')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $verificationMethod = null;
    
    /**
     * For EMV payments, the results of the cardholder verification. The result can be
     * 
     * `SUCCESS`, `FAILURE`, or `UNKNOWN`.
     * 
     * @var ?string $verificationResults
     */
	#[\JMS\Serializer\Annotation\SerializedName('verification_results')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $verificationResults = null;
    
	public function __construct()
	{
		$this->applicationCryptogram = null;
		$this->applicationIdentifier = null;
		$this->applicationName = null;
		$this->authResultCode = null;
		$this->avsStatus = null;
		$this->card = null;
		$this->cardPaymentTimeline = null;
		$this->cvvStatus = null;
		$this->deviceDetails = null;
		$this->entryMethod = null;
		$this->errors = null;
		$this->refundRequiresCardPresence = null;
		$this->statementDescription = null;
		$this->status = null;
		$this->verificationMethod = null;
		$this->verificationResults = null;
	}
}
