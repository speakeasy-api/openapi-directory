"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuoteV1 = exports.QuoteV1StatusEnum = exports.QuoteV1BindStatusEnum = void 0;
var utils_1 = require("../../../internal/utils");
var coveragevaluewritev1_1 = require("./coveragevaluewritev1");
var fileminiv1_1 = require("./fileminiv1");
var quotepricev1_1 = require("./quotepricev1");
var statusreason_1 = require("./statusreason");
var class_transformer_1 = require("class-transformer");
/**
 * Describes whether bind is supported for the quote. Policies can only be created from quotes with bind_status of "ready".
 */
var QuoteV1BindStatusEnum;
(function (QuoteV1BindStatusEnum) {
    QuoteV1BindStatusEnum["Ready"] = "ready";
    QuoteV1BindStatusEnum["Unavailable"] = "unavailable";
    QuoteV1BindStatusEnum["Requested"] = "requested";
})(QuoteV1BindStatusEnum = exports.QuoteV1BindStatusEnum || (exports.QuoteV1BindStatusEnum = {}));
/**
 * Indicates the status of a quote. See [full list of quote statuses](https://www.heraldapi.com/docs/quotes) for more detail.
 */
var QuoteV1StatusEnum;
(function (QuoteV1StatusEnum) {
    QuoteV1StatusEnum["Pending"] = "pending";
    QuoteV1StatusEnum["Referral"] = "referral";
    QuoteV1StatusEnum["Referred"] = "referred";
    QuoteV1StatusEnum["Declined"] = "declined";
    QuoteV1StatusEnum["Active"] = "active";
    QuoteV1StatusEnum["Expired"] = "expired";
    QuoteV1StatusEnum["Unresponsive"] = "unresponsive";
})(QuoteV1StatusEnum = exports.QuoteV1StatusEnum || (exports.QuoteV1StatusEnum = {}));
/**
 * A quote declares an institution's willingness to sell an insurance policy to a customer. Active quotes contain details about a policy the customer can purchase and related prices.
 *
 * @remarks
 *
 * Read more about [quotes](https://www.heraldapi.com/docs/quotes).
 */
var QuoteV1 = /** @class */ (function (_super) {
    __extends(QuoteV1, _super);
    function QuoteV1() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "bind_status" }),
        __metadata("design:type", String)
    ], QuoteV1.prototype, "bindStatus", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: coveragevaluewritev1_1.CoverageValueWriteV1 }),
        (0, class_transformer_1.Expose)({ name: "coverage_values" }),
        (0, class_transformer_1.Type)(function () { return coveragevaluewritev1_1.CoverageValueWriteV1; }),
        __metadata("design:type", Array)
    ], QuoteV1.prototype, "coverageValues", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: fileminiv1_1.FileMiniV1 }),
        (0, class_transformer_1.Expose)({ name: "files" }),
        (0, class_transformer_1.Type)(function () { return fileminiv1_1.FileMiniV1; }),
        __metadata("design:type", Array)
    ], QuoteV1.prototype, "files", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], QuoteV1.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "naic_code" }),
        __metadata("design:type", String)
    ], QuoteV1.prototype, "naicCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "portal_link" }),
        __metadata("design:type", String)
    ], QuoteV1.prototype, "portalLink", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "prices" }),
        (0, class_transformer_1.Type)(function () { return quotepricev1_1.QuotePriceV1; }),
        __metadata("design:type", quotepricev1_1.QuotePriceV1)
    ], QuoteV1.prototype, "prices", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "product_id" }),
        __metadata("design:type", String)
    ], QuoteV1.prototype, "productId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        __metadata("design:type", String)
    ], QuoteV1.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status_reasons" }),
        (0, class_transformer_1.Type)(function () { return statusreason_1.StatusReason; }),
        __metadata("design:type", statusreason_1.StatusReason)
    ], QuoteV1.prototype, "statusReasons", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "submission_id" }),
        __metadata("design:type", String)
    ], QuoteV1.prototype, "submissionId", void 0);
    return QuoteV1;
}(utils_1.SpeakeasyBase));
exports.QuoteV1 = QuoteV1;
