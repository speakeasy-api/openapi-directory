/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { NullableLicenseSimple } from "./nullablelicensesimple";
import { NullableSimpleUser } from "./nullablesimpleuser";
import { SimpleUser } from "./simpleuser";
import { Expose, Transform, Type } from "class-transformer";

export class NullableRepositoryPermissions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "admin" })
  admin: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "maintain" })
  maintain?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "pull" })
  pull: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "push" })
  push: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "triage" })
  triage?: boolean;
}

export class NullableRepositoryTemplateRepositoryOwner extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "avatar_url" })
  avatarUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "events_url" })
  eventsUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "followers_url" })
  followersUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "following_url" })
  followingUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "gists_url" })
  gistsUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "gravatar_id" })
  gravatarId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "html_url" })
  htmlUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "login" })
  login?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "node_id" })
  nodeId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "organizations_url" })
  organizationsUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "received_events_url" })
  receivedEventsUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "repos_url" })
  reposUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "site_admin" })
  siteAdmin?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "starred_url" })
  starredUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriptions_url" })
  subscriptionsUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

export class NullableRepositoryTemplateRepositoryPermissions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "admin" })
  admin?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "maintain" })
  maintain?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "pull" })
  pull?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "push" })
  push?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "triage" })
  triage?: boolean;
}

export class NullableRepositoryTemplateRepository extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "allow_auto_merge" })
  allowAutoMerge?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "allow_merge_commit" })
  allowMergeCommit?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "allow_rebase_merge" })
  allowRebaseMerge?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "allow_squash_merge" })
  allowSquashMerge?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "allow_update_branch" })
  allowUpdateBranch?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "archive_url" })
  archiveUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "archived" })
  archived?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "assignees_url" })
  assigneesUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "blobs_url" })
  blobsUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "branches_url" })
  branchesUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "clone_url" })
  cloneUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "collaborators_url" })
  collaboratorsUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "comments_url" })
  commentsUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "commits_url" })
  commitsUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "compare_url" })
  compareUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "contents_url" })
  contentsUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "contributors_url" })
  contributorsUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  createdAt?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "default_branch" })
  defaultBranch?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "delete_branch_on_merge" })
  deleteBranchOnMerge?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "deployments_url" })
  deploymentsUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "disabled" })
  disabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "downloads_url" })
  downloadsUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "events_url" })
  eventsUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "fork" })
  fork?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "forks_count" })
  forksCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "forks_url" })
  forksUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "full_name" })
  fullName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "git_commits_url" })
  gitCommitsUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "git_refs_url" })
  gitRefsUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "git_tags_url" })
  gitTagsUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "git_url" })
  gitUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "has_downloads" })
  hasDownloads?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "has_issues" })
  hasIssues?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "has_pages" })
  hasPages?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "has_projects" })
  hasProjects?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "has_wiki" })
  hasWiki?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "homepage" })
  homepage?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "hooks_url" })
  hooksUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "html_url" })
  htmlUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "is_template" })
  isTemplate?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "issue_comment_url" })
  issueCommentUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "issue_events_url" })
  issueEventsUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "issues_url" })
  issuesUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "keys_url" })
  keysUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "labels_url" })
  labelsUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "language" })
  language?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "languages_url" })
  languagesUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merges_url" })
  mergesUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "milestones_url" })
  milestonesUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "mirror_url" })
  mirrorUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "network_count" })
  networkCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "node_id" })
  nodeId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "notifications_url" })
  notificationsUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "open_issues_count" })
  openIssuesCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "owner" })
  @Type(() => NullableRepositoryTemplateRepositoryOwner)
  owner?: NullableRepositoryTemplateRepositoryOwner;

  @SpeakeasyMetadata()
  @Expose({ name: "permissions" })
  @Type(() => NullableRepositoryTemplateRepositoryPermissions)
  permissions?: NullableRepositoryTemplateRepositoryPermissions;

  @SpeakeasyMetadata()
  @Expose({ name: "private" })
  private?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "pulls_url" })
  pullsUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "pushed_at" })
  pushedAt?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "releases_url" })
  releasesUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ssh_url" })
  sshUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "stargazers_count" })
  stargazersCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "stargazers_url" })
  stargazersUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "statuses_url" })
  statusesUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscribers_count" })
  subscribersCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "subscribers_url" })
  subscribersUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscription_url" })
  subscriptionUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "svn_url" })
  svnUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tags_url" })
  tagsUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "teams_url" })
  teamsUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "temp_clone_token" })
  tempCloneToken?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "topics" })
  topics?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "trees_url" })
  treesUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  updatedAt?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "visibility" })
  visibility?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "watchers_count" })
  watchersCount?: number;
}

/**
 * A repository on GitHub.
 */
export class NullableRepository extends SpeakeasyBase {
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allow_auto_merge" })
  allowAutoMerge?: boolean;

  /**
   * Whether to allow forking this repo
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allow_forking" })
  allowForking?: boolean;

  /**
   * Whether to allow merge commits for pull requests.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allow_merge_commit" })
  allowMergeCommit?: boolean;

  /**
   * Whether to allow rebase merges for pull requests.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allow_rebase_merge" })
  allowRebaseMerge?: boolean;

  /**
   * Whether to allow squash merges for pull requests.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allow_squash_merge" })
  allowSquashMerge?: boolean;

  /**
   * Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allow_update_branch" })
  allowUpdateBranch?: boolean;

  /**
   * Whether anonymous git access is enabled for this repository
   */
  @SpeakeasyMetadata()
  @Expose({ name: "anonymous_access_enabled" })
  anonymousAccessEnabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "archive_url" })
  archiveUrl: string;

  /**
   * Whether the repository is archived.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "archived" })
  archived: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "assignees_url" })
  assigneesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "blobs_url" })
  blobsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "branches_url" })
  branchesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "clone_url" })
  cloneUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "collaborators_url" })
  collaboratorsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "comments_url" })
  commentsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "commits_url" })
  commitsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "compare_url" })
  compareUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "contents_url" })
  contentsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "contributors_url" })
  contributorsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  /**
   * The default branch of the repository.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "default_branch" })
  defaultBranch: string;

  /**
   * Whether to delete head branches when pull requests are merged
   */
  @SpeakeasyMetadata()
  @Expose({ name: "delete_branch_on_merge" })
  deleteBranchOnMerge?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "deployments_url" })
  deploymentsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * Returns whether or not this repository disabled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disabled" })
  disabled: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "downloads_url" })
  downloadsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "events_url" })
  eventsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "fork" })
  fork: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "forks" })
  forks: number;

  @SpeakeasyMetadata()
  @Expose({ name: "forks_count" })
  forksCount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "forks_url" })
  forksUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "full_name" })
  fullName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "git_commits_url" })
  gitCommitsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "git_refs_url" })
  gitRefsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "git_tags_url" })
  gitTagsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "git_url" })
  gitUrl: string;

  /**
   * Whether downloads are enabled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_downloads" })
  hasDownloads: boolean;

  /**
   * Whether issues are enabled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_issues" })
  hasIssues: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "has_pages" })
  hasPages: boolean;

  /**
   * Whether projects are enabled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_projects" })
  hasProjects: boolean;

  /**
   * Whether the wiki is enabled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_wiki" })
  hasWiki: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "homepage" })
  homepage: string;

  @SpeakeasyMetadata()
  @Expose({ name: "hooks_url" })
  hooksUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "html_url" })
  htmlUrl: string;

  /**
   * Unique identifier of the repository
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_template" })
  isTemplate?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "issue_comment_url" })
  issueCommentUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "issue_events_url" })
  issueEventsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "issues_url" })
  issuesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "keys_url" })
  keysUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "labels_url" })
  labelsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "language" })
  language: string;

  @SpeakeasyMetadata()
  @Expose({ name: "languages_url" })
  languagesUrl: string;

  /**
   * License Simple
   */
  @SpeakeasyMetadata()
  @Expose({ name: "license" })
  @Type(() => NullableLicenseSimple)
  license: NullableLicenseSimple;

  @SpeakeasyMetadata()
  @Expose({ name: "master_branch" })
  masterBranch?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merges_url" })
  mergesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "milestones_url" })
  milestonesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "mirror_url" })
  mirrorUrl: string;

  /**
   * The name of the repository.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  @SpeakeasyMetadata()
  @Expose({ name: "network_count" })
  networkCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "node_id" })
  nodeId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "notifications_url" })
  notificationsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "open_issues" })
  openIssues: number;

  @SpeakeasyMetadata()
  @Expose({ name: "open_issues_count" })
  openIssuesCount: number;

  /**
   * A GitHub user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "organization" })
  @Type(() => NullableSimpleUser)
  organization?: NullableSimpleUser;

  /**
   * A GitHub user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "owner" })
  @Type(() => SimpleUser)
  owner: SimpleUser;

  @SpeakeasyMetadata()
  @Expose({ name: "permissions" })
  @Type(() => NullableRepositoryPermissions)
  permissions?: NullableRepositoryPermissions;

  /**
   * Whether the repository is private or public.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "private" })
  private: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "pulls_url" })
  pullsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "pushed_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  pushedAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "releases_url" })
  releasesUrl: string;

  /**
   * The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ssh_url" })
  sshUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "stargazers_count" })
  stargazersCount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "stargazers_url" })
  stargazersUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "starred_at" })
  starredAt?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "statuses_url" })
  statusesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscribers_count" })
  subscribersCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "subscribers_url" })
  subscribersUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscription_url" })
  subscriptionUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "svn_url" })
  svnUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tags_url" })
  tagsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "teams_url" })
  teamsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "temp_clone_token" })
  tempCloneToken?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "template_repository" })
  @Type(() => NullableRepositoryTemplateRepository)
  templateRepository?: NullableRepositoryTemplateRepository;

  @SpeakeasyMetadata()
  @Expose({ name: "topics" })
  topics?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "trees_url" })
  treesUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;

  /**
   * The repository visibility: public, private, or internal.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "visibility" })
  visibility?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "watchers" })
  watchers: number;

  @SpeakeasyMetadata()
  @Expose({ name: "watchers_count" })
  watchersCount: number;
}
