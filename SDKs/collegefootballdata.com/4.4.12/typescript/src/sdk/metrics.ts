/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Data relating to Predicted Points and other metrics
 */
export class Metrics {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Team Predicated Points Added (PPA/EPA) by game
   *
   * @remarks
   * Predicted Points Added (PPA) by game
   */
  getGamePPA(
    req: operations.GetGamePPARequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetGamePPAResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetGamePPARequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/ppa/games";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetGamePPAResponse =
        new operations.GetGamePPAResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.gamePPAS = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.gamePPAS = utils.objectToClass(
              httpRes?.data,
              shared.GamePPA,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Player Predicated Points Added (PPA/EPA) broken down by game
   *
   * @remarks
   * Predicted Points Added (PPA) by player game
   */
  getPlayerGamePPA(
    req: operations.GetPlayerGamePPARequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPlayerGamePPAResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPlayerGamePPARequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/ppa/players/games";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPlayerGamePPAResponse =
        new operations.GetPlayerGamePPAResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playerGamePPAS = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.playerGamePPAS = utils.objectToClass(
              httpRes?.data,
              shared.PlayerGamePPA,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Player Predicated Points Added (PPA/EPA) broken down by season
   *
   * @remarks
   * Predicted Points Added (PPA) by player season
   */
  getPlayerSeasonPPA(
    req: operations.GetPlayerSeasonPPARequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPlayerSeasonPPAResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPlayerSeasonPPARequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/ppa/players/season";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPlayerSeasonPPAResponse =
        new operations.GetPlayerSeasonPPAResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playerSeasonPPAS = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.playerSeasonPPAS = utils.objectToClass(
              httpRes?.data,
              shared.PlayerSeasonPPA,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Predicted Points (i.e. Expected Points or EP)
   *
   * @remarks
   * Predicted Points
   */
  getPredictedPoints(
    req: operations.GetPredictedPointsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPredictedPointsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPredictedPointsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/ppa/predicted";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPredictedPointsResponse =
        new operations.GetPredictedPointsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.predictedPoints = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.predictedPoints = utils.objectToClass(
              httpRes?.data,
              shared.PredictedPoints,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Pregame win probability data
   *
   * @remarks
   * Pregame win probabilities
   */
  getPregameWinProbabilities(
    req: operations.GetPregameWinProbabilitiesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPregameWinProbabilitiesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPregameWinProbabilitiesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/metrics/wp/pregame";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPregameWinProbabilitiesResponse =
        new operations.GetPregameWinProbabilitiesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pregameWPS = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.pregameWPS = utils.objectToClass(
              httpRes?.data,
              shared.PregameWP,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Predicted Points Added (PPA/EPA) data by team
   *
   * @remarks
   * Predicted Points Added (PPA)
   */
  getTeamPPA(
    req: operations.GetTeamPPARequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamPPAResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamPPARequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/ppa/teams";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamPPAResponse =
        new operations.GetTeamPPAResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teamPPAS = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.teamPPAS = utils.objectToClass(
              httpRes?.data,
              shared.TeamPPA,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Win probability chart data
   *
   * @remarks
   * Win probability data
   */
  getWinProbabilityData(
    req: operations.GetWinProbabilityDataRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetWinProbabilityDataResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetWinProbabilityDataRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/metrics/wp";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetWinProbabilityDataResponse =
        new operations.GetWinProbabilityDataResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playWPS = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.playWPS = utils.objectToClass(
              httpRes?.data,
              shared.PlayWP,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }
}
