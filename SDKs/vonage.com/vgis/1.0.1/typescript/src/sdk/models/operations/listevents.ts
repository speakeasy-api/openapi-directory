/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Filter by event direction
 */
export enum ListEventsDirectionEnum {
  Inbound = "INBOUND",
  Outbound = "OUTBOUND",
}

/**
 * Sort in either ascending or descending order'
 */
export enum ListEventsOrderEnum {
  Desc = "DESC",
  Asc = "ASC",
}

/**
 * Filter events by state
 */
export enum ListEventsStatesEnum {
  Initializing = "INITIALIZING",
  Ringing = "RINGING",
  Active = "ACTIVE",
  Held = "HELD",
  RemoteHeld = "REMOTE_HELD",
  Detached = "DETACHED",
  Rejected = "REJECTED",
  Cancelled = "CANCELLED",
  Answered = "ANSWERED",
  Missed = "MISSED",
}

/**
 * Record type
 */
export enum ListEventsTypesEnum {
  Call = "CALL",
}

export class ListEventsRequest extends SpeakeasyBase {
  /**
   * Filter by event direction
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=direction",
  })
  direction?: ListEventsDirectionEnum;

  /**
   * Return events that occurred after this point in time
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fromDate",
  })
  fromDate?: number;

  /**
   * Page number of events to return
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=offset",
  })
  offset?: number;

  /**
   * Sort in either ascending or descending order'
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=order" })
  order?: ListEventsOrderEnum;

  /**
   * Return this amount of events in the response
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=size" })
  size?: number;

  /**
   * Sort events by property
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: string;

  /**
   * Filter events by state
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=states",
  })
  states?: ListEventsStatesEnum;

  /**
   * Return events that occurred before this point in time
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=toDate",
  })
  toDate?: number;

  /**
   * Record type
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=types" })
  types?: ListEventsTypesEnum;
}

export class ListEventsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Bad Request: The client should not repeat the request without modifications
   */
  @SpeakeasyMetadata()
  errorResponse?: shared.ErrorResponse;

  /**
   * Successful
   */
  @SpeakeasyMetadata({ elemType: shared.Event })
  events?: shared.Event[];

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
