// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeImportTasksXAmzTargetEnum
type DescribeImportTasksXAmzTargetEnum string

const (
	DescribeImportTasksXAmzTargetEnumAwsPoseidonServiceV20151101DescribeImportTasks DescribeImportTasksXAmzTargetEnum = "AWSPoseidonService_V2015_11_01.DescribeImportTasks"
)

func (e DescribeImportTasksXAmzTargetEnum) ToPointer() *DescribeImportTasksXAmzTargetEnum {
	return &e
}

func (e *DescribeImportTasksXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSPoseidonService_V2015_11_01.DescribeImportTasks":
		*e = DescribeImportTasksXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeImportTasksXAmzTargetEnum: %v", v)
	}
}

type DescribeImportTasksRequest struct {
	DescribeImportTasksRequest shared.DescribeImportTasksRequest `request:"mediaType=application/json"`
	XAmzAlgorithm              *string                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256          *string                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential             *string                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                   *string                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken          *string                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature              *string                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders          *string                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                 DescribeImportTasksXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=maxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

type DescribeImportTasksResponse struct {
	// AuthorizationErrorException
	AuthorizationErrorException interface{}
	ContentType                 string
	// Success
	DescribeImportTasksResponse *shared.DescribeImportTasksResponse
	// HomeRegionNotSetException
	HomeRegionNotSetException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// InvalidParameterValueException
	InvalidParameterValueException interface{}
	// ServerInternalErrorException
	ServerInternalErrorException interface{}
	StatusCode                   int
	RawResponse                  *http.Response
}
