// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UserTSPTSPIDEnum - TSP account ID.
type UserTSPTSPIDEnum string

const (
	UserTSPTSPIDEnumOne UserTSPTSPIDEnum = "1"
	UserTSPTSPIDEnumTwo UserTSPTSPIDEnum = "2"
)

func (e *UserTSPTSPIDEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		*e = UserTSPTSPIDEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserTSPTSPIDEnum: %s", s)
	}
}

type UserTSPPathParams struct {
	// TSP account ID.
	TspID UserTSPTSPIDEnum `pathParam:"style=simple,explode=false,name=tspId"`
	// The user ID or email address of the user. For user-level apps, pass `me` as the value for userId.
	UserID string `pathParam:"style=simple,explode=false,name=userId"`
}

type UserTSPRequest struct {
	PathParams UserTSPPathParams
}

// UserTSPTSPAccountDialInNumbersTypeEnum - Dial-in number types:<br>`toll` - Toll number.<br>`tollfree` -Toll free number. <br> `media_link` - Media link phone number. This is used for PSTN integration instead of a paid bridge number.
type UserTSPTSPAccountDialInNumbersTypeEnum string

const (
	UserTSPTSPAccountDialInNumbersTypeEnumToll      UserTSPTSPAccountDialInNumbersTypeEnum = "toll"
	UserTSPTSPAccountDialInNumbersTypeEnumTollfree  UserTSPTSPAccountDialInNumbersTypeEnum = "tollfree"
	UserTSPTSPAccountDialInNumbersTypeEnumMediaLink UserTSPTSPAccountDialInNumbersTypeEnum = "media_link"
)

func (e *UserTSPTSPAccountDialInNumbersTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "toll":
		fallthrough
	case "tollfree":
		fallthrough
	case "media_link":
		*e = UserTSPTSPAccountDialInNumbersTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserTSPTSPAccountDialInNumbersTypeEnum: %s", s)
	}
}

type UserTSPTSPAccountDialInNumbers struct {
	// Country code.
	Code *string `json:"code,omitempty"`
	// Country Label, if passed, will display in place of code.
	CountryLabel *string `json:"country_label,omitempty"`
	// Dial-in number: length is less than 16.
	Number *string `json:"number,omitempty"`
	// Dial-in number types:<br>`toll` - Toll number.<br>`tollfree` -Toll free number. <br> `media_link` - Media link phone number. This is used for PSTN integration instead of a paid bridge number.
	Type *UserTSPTSPAccountDialInNumbersTypeEnum `json:"type,omitempty"`
}

// UserTSPTSPAccountTSPBridgeEnum - Telephony bridge
type UserTSPTSPAccountTSPBridgeEnum string

const (
	UserTSPTSPAccountTSPBridgeEnumUsTspTb UserTSPTSPAccountTSPBridgeEnum = "US_TSP_TB"
	UserTSPTSPAccountTSPBridgeEnumEuTspTb UserTSPTSPAccountTSPBridgeEnum = "EU_TSP_TB"
)

func (e *UserTSPTSPAccountTSPBridgeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "US_TSP_TB":
		fallthrough
	case "EU_TSP_TB":
		*e = UserTSPTSPAccountTSPBridgeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserTSPTSPAccountTSPBridgeEnum: %s", s)
	}
}

// UserTSPTSPAccount - TSP account of the user.
type UserTSPTSPAccount struct {
	// Conference code: numeric value, length is less than 16.
	ConferenceCode string `json:"conference_code"`
	// List of dial in numbers.
	DialInNumbers []UserTSPTSPAccountDialInNumbers `json:"dial_in_numbers,omitempty"`
	// The ID of the TSP account.
	ID *int64 `json:"id,omitempty"`
	// Leader PIN: numeric value, length is less than 16.
	LeaderPin string `json:"leader_pin"`
	// Telephony bridge
	TspBridge *UserTSPTSPAccountTSPBridgeEnum `json:"tsp_bridge,omitempty"`
}

type UserTSPResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br>
	// TSP account retrieved successfully.
	TSPAccount *UserTSPTSPAccount
}
