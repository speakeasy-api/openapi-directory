/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Can be used multiple times.
 */
export enum GetImagesSortEnum {
  Id = "id",
  IdAsc = "id:asc",
  IdDesc = "id:desc",
  Name = "name",
  NameAsc = "name:asc",
  NameDesc = "name:desc",
  Created = "created",
  CreatedAsc = "created:asc",
  CreatedDesc = "created:desc",
}

/**
 * Can be used multiple times. The response will only contain Images matching the status.
 */
export enum GetImagesStatusEnum {
  Available = "available",
  Creating = "creating",
}

/**
 * Can be used multiple times.
 */
export enum GetImagesTypeEnum {
  System = "system",
  Snapshot = "snapshot",
  Backup = "backup",
  App = "app",
}

export class GetImagesRequest extends SpeakeasyBase {
  /**
   * Can be used multiple times. Server ID linked to the Image. Only available for Images of type `backup`
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=bound_to",
  })
  boundTo?: string;

  /**
   * Can be used multiple times.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include_deprecated",
  })
  includeDeprecated?: boolean;

  /**
   * Can be used to filter resources by labels. The response will only contain resources matching the label selector.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=label_selector",
  })
  labelSelector?: string;

  /**
   * Can be used to filter resources by their name. The response will only contain the resources matching the specified name
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=name" })
  name?: string;

  /**
   * Can be used multiple times.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: GetImagesSortEnum;

  /**
   * Can be used multiple times. The response will only contain Images matching the status.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=status",
  })
  status?: GetImagesStatusEnum;

  /**
   * Can be used multiple times.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=type" })
  type?: GetImagesTypeEnum;
}

/**
 * Information about the Server the Image was created from
 */
export class GetImages200ApplicationJSONImagesCreatedFrom extends SpeakeasyBase {
  /**
   * ID of the Server the Image was created from
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Server name at the time the Image was created
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

/**
 * Flavor of operating system contained in the Image
 */
export enum GetImages200ApplicationJSONImagesOsFlavorEnum {
  Ubuntu = "ubuntu",
  Centos = "centos",
  Debian = "debian",
  Fedora = "fedora",
  Unknown = "unknown",
}

/**
 * Protection configuration for the Resource
 */
export class GetImages200ApplicationJSONImagesProtection extends SpeakeasyBase {
  /**
   * If true, prevents the Resource from being deleted
   */
  @SpeakeasyMetadata()
  @Expose({ name: "delete" })
  delete: boolean;
}

/**
 * Whether the Image can be used or if it's still being created or unavailable
 */
export enum GetImages200ApplicationJSONImagesStatusEnum {
  Available = "available",
  Creating = "creating",
  Unavailable = "unavailable",
}

/**
 * Type of the Image
 */
export enum GetImages200ApplicationJSONImagesTypeEnum {
  System = "system",
  App = "app",
  Snapshot = "snapshot",
  Backup = "backup",
  Temporary = "temporary",
}

export class GetImages200ApplicationJSONImages extends SpeakeasyBase {
  /**
   * ID of Server the Image is bound to. Only set for Images of type `backup`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bound_to" })
  boundTo: number;

  /**
   * Point in time when the Resource was created (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created: string;

  /**
   * Information about the Server the Image was created from
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_from" })
  @Type(() => GetImages200ApplicationJSONImagesCreatedFrom)
  createdFrom: GetImages200ApplicationJSONImagesCreatedFrom;

  /**
   * Point in time where the Image was deleted (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deleted" })
  deleted: string;

  /**
   * Point in time when the Image is considered to be deprecated (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deprecated" })
  deprecated: string;

  /**
   * Description of the Image
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * Size of the disk contained in the Image in GB
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disk_size" })
  diskSize: number;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "image_size" })
  imageSize: number;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels: Record<string, string>;

  /**
   * Unique identifier of the Image. This value is only set for system Images.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Flavor of operating system contained in the Image
   */
  @SpeakeasyMetadata()
  @Expose({ name: "os_flavor" })
  osFlavor: GetImages200ApplicationJSONImagesOsFlavorEnum;

  /**
   * Operating system version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "os_version" })
  osVersion: string;

  /**
   * Protection configuration for the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protection" })
  @Type(() => GetImages200ApplicationJSONImagesProtection)
  protection: GetImages200ApplicationJSONImagesProtection;

  /**
   * Indicates that rapid deploy of the Image is available
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rapid_deploy" })
  rapidDeploy?: boolean;

  /**
   * Whether the Image can be used or if it's still being created or unavailable
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetImages200ApplicationJSONImagesStatusEnum;

  /**
   * Type of the Image
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: GetImages200ApplicationJSONImagesTypeEnum;
}

export class GetImages200ApplicationJSONMetaPagination extends SpeakeasyBase {
  /**
   * ID of the last page available. Can be null if the current page is the last one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_page" })
  lastPage: number;

  /**
   * ID of the next page. Can be null if the current page is the last one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "next_page" })
  nextPage: number;

  /**
   * Current page number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page" })
  page: number;

  /**
   * Maximum number of items shown per page in the response
   */
  @SpeakeasyMetadata()
  @Expose({ name: "per_page" })
  perPage: number;

  /**
   * ID of the previous page. Can be null if the current page is the first one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "previous_page" })
  previousPage: number;

  /**
   * The total number of entries that exist in the database for this query. Nullable if unknown.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_entries" })
  totalEntries: number;
}

export class GetImages200ApplicationJSONMeta extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "pagination" })
  @Type(() => GetImages200ApplicationJSONMetaPagination)
  pagination: GetImages200ApplicationJSONMetaPagination;
}

/**
 * The `images` key in the reply contains an array of Image objects with this structure
 */
export class GetImages200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: GetImages200ApplicationJSONImages })
  @Expose({ name: "images" })
  @Type(() => GetImages200ApplicationJSONImages)
  images: GetImages200ApplicationJSONImages[];

  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(() => GetImages200ApplicationJSONMeta)
  meta?: GetImages200ApplicationJSONMeta;
}

export class GetImagesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * The `images` key in the reply contains an array of Image objects with this structure
   */
  @SpeakeasyMetadata()
  getImages200ApplicationJSONObject?: GetImages200ApplicationJSON;
}
