// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDisassociateEnclaveCertificateIamRoleActionEnum
type GETDisassociateEnclaveCertificateIamRoleActionEnum string

const (
	GETDisassociateEnclaveCertificateIamRoleActionEnumDisassociateEnclaveCertificateIamRole GETDisassociateEnclaveCertificateIamRoleActionEnum = "DisassociateEnclaveCertificateIamRole"
)

func (e GETDisassociateEnclaveCertificateIamRoleActionEnum) ToPointer() *GETDisassociateEnclaveCertificateIamRoleActionEnum {
	return &e
}

func (e *GETDisassociateEnclaveCertificateIamRoleActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DisassociateEnclaveCertificateIamRole":
		*e = GETDisassociateEnclaveCertificateIamRoleActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDisassociateEnclaveCertificateIamRoleActionEnum: %v", v)
	}
}

// GETDisassociateEnclaveCertificateIamRoleVersionEnum
type GETDisassociateEnclaveCertificateIamRoleVersionEnum string

const (
	GETDisassociateEnclaveCertificateIamRoleVersionEnumTwoThousandAndSixteen1115 GETDisassociateEnclaveCertificateIamRoleVersionEnum = "2016-11-15"
)

func (e GETDisassociateEnclaveCertificateIamRoleVersionEnum) ToPointer() *GETDisassociateEnclaveCertificateIamRoleVersionEnum {
	return &e
}

func (e *GETDisassociateEnclaveCertificateIamRoleVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETDisassociateEnclaveCertificateIamRoleVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDisassociateEnclaveCertificateIamRoleVersionEnum: %v", v)
	}
}

type GETDisassociateEnclaveCertificateIamRoleRequest struct {
	Action GETDisassociateEnclaveCertificateIamRoleActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The ARN of the ACM certificate from which to disassociate the IAM role.
	CertificateArn string `queryParam:"style=form,explode=true,name=CertificateArn"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The ARN of the IAM role to disassociate.
	RoleArn           string                                              `queryParam:"style=form,explode=true,name=RoleArn"`
	Version           GETDisassociateEnclaveCertificateIamRoleVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDisassociateEnclaveCertificateIamRoleResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
