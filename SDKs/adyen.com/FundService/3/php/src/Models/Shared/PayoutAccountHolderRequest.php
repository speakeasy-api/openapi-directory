<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class PayoutAccountHolderRequest
{
    /**
     * The code of the account from which the payout is to be made.
     * 
     * @var string $accountCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('accountCode')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $accountCode;
    
    /**
     * The code of the Account Holder who owns the account from which the payout is to be made.
     * 
     * The Account Holder is the party to which the payout will be made.
     * 
     * @var string $accountHolderCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('accountHolderCode')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $accountHolderCode;
    
	#[\JMS\Serializer\Annotation\SerializedName('amount')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Amount')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Amount $amount = null;
    
    /**
     * The unique ID of the Bank Account held by the Account Holder to which the payout is to be made.
     * 
     * If left blank, a bank account is automatically selected.
     * 
     * @var ?string $bankAccountUUID
     */
	#[\JMS\Serializer\Annotation\SerializedName('bankAccountUUID')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $bankAccountUUID = null;
    
    /**
     * A description of the payout. Maximum 200 characters.
     * 
     * Allowed: **abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/?:().,'+ ";**
     * 
     * @var ?string $description
     */
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $description = null;
    
    /**
     * A value that can be supplied at the discretion of the executing user in order to link multiple transactions to one another.
     * 
     * @var ?string $merchantReference
     */
	#[\JMS\Serializer\Annotation\SerializedName('merchantReference')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $merchantReference = null;
    
	public function __construct()
	{
		$this->accountCode = "";
		$this->accountHolderCode = "";
		$this->amount = null;
		$this->bankAccountUUID = null;
		$this->description = null;
		$this->merchantReference = null;
	}
}
