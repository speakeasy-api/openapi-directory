// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type LpgsvSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type LpgsvRequestBodyCertificateParameters struct {
	// Aadhaar number
	UID string `json:"UID"`
}

// LpgsvRequestBodyFormatEnum - The format of the certificate in response.
type LpgsvRequestBodyFormatEnum string

const (
	LpgsvRequestBodyFormatEnumPdf LpgsvRequestBodyFormatEnum = "pdf"
)

func (e LpgsvRequestBodyFormatEnum) ToPointer() *LpgsvRequestBodyFormatEnum {
	return &e
}

func (e *LpgsvRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = LpgsvRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LpgsvRequestBodyFormatEnum: %v", v)
	}
}

// LpgsvRequestBody - Request format
type LpgsvRequestBody struct {
	CertificateParameters *LpgsvRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format LpgsvRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Lpgsv504ApplicationJSONErrorEnum string

const (
	Lpgsv504ApplicationJSONErrorEnumGatewayTimeout Lpgsv504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Lpgsv504ApplicationJSONErrorEnum) ToPointer() *Lpgsv504ApplicationJSONErrorEnum {
	return &e
}

func (e *Lpgsv504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Lpgsv504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lpgsv504ApplicationJSONErrorEnum: %v", v)
	}
}

type Lpgsv504ApplicationJSONErrorDescriptionEnum string

const (
	Lpgsv504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Lpgsv504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Lpgsv504ApplicationJSONErrorDescriptionEnum) ToPointer() *Lpgsv504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Lpgsv504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Lpgsv504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lpgsv504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Lpgsv504ApplicationJSON - Gateway timeout
type Lpgsv504ApplicationJSON struct {
	Error            *Lpgsv504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lpgsv504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lpgsv503ApplicationJSONErrorEnum string

const (
	Lpgsv503ApplicationJSONErrorEnumServiceUnavailable Lpgsv503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Lpgsv503ApplicationJSONErrorEnum) ToPointer() *Lpgsv503ApplicationJSONErrorEnum {
	return &e
}

func (e *Lpgsv503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Lpgsv503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lpgsv503ApplicationJSONErrorEnum: %v", v)
	}
}

type Lpgsv503ApplicationJSONErrorDescriptionEnum string

const (
	Lpgsv503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Lpgsv503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Lpgsv503ApplicationJSONErrorDescriptionEnum) ToPointer() *Lpgsv503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Lpgsv503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Lpgsv503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lpgsv503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Lpgsv503ApplicationJSON - Service unavailable
type Lpgsv503ApplicationJSON struct {
	Error            *Lpgsv503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lpgsv503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lpgsv502ApplicationJSONErrorEnum string

const (
	Lpgsv502ApplicationJSONErrorEnumBadGatewy Lpgsv502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Lpgsv502ApplicationJSONErrorEnum) ToPointer() *Lpgsv502ApplicationJSONErrorEnum {
	return &e
}

func (e *Lpgsv502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Lpgsv502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lpgsv502ApplicationJSONErrorEnum: %v", v)
	}
}

type Lpgsv502ApplicationJSONErrorDescriptionEnum string

const (
	Lpgsv502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Lpgsv502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Lpgsv502ApplicationJSONErrorDescriptionEnum) ToPointer() *Lpgsv502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Lpgsv502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Lpgsv502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lpgsv502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Lpgsv502ApplicationJSON - Bad gateway
type Lpgsv502ApplicationJSON struct {
	Error            *Lpgsv502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lpgsv502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lpgsv500ApplicationJSONErrorEnum string

const (
	Lpgsv500ApplicationJSONErrorEnumInternalServerError Lpgsv500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Lpgsv500ApplicationJSONErrorEnum) ToPointer() *Lpgsv500ApplicationJSONErrorEnum {
	return &e
}

func (e *Lpgsv500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Lpgsv500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lpgsv500ApplicationJSONErrorEnum: %v", v)
	}
}

type Lpgsv500ApplicationJSONErrorDescriptionEnum string

const (
	Lpgsv500ApplicationJSONErrorDescriptionEnumInternalServerError Lpgsv500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Lpgsv500ApplicationJSONErrorDescriptionEnum) ToPointer() *Lpgsv500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Lpgsv500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Lpgsv500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lpgsv500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Lpgsv500ApplicationJSON - Internal server error
type Lpgsv500ApplicationJSON struct {
	Error            *Lpgsv500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lpgsv500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lpgsv404ApplicationJSONErrorEnum string

const (
	Lpgsv404ApplicationJSONErrorEnumRecordNotFound Lpgsv404ApplicationJSONErrorEnum = "record_not_found"
	Lpgsv404ApplicationJSONErrorEnumURLNotFound    Lpgsv404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Lpgsv404ApplicationJSONErrorEnum) ToPointer() *Lpgsv404ApplicationJSONErrorEnum {
	return &e
}

func (e *Lpgsv404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Lpgsv404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lpgsv404ApplicationJSONErrorEnum: %v", v)
	}
}

type Lpgsv404ApplicationJSONErrorDescriptionEnum string

const (
	Lpgsv404ApplicationJSONErrorDescriptionEnumNoRecordFound               Lpgsv404ApplicationJSONErrorDescriptionEnum = "No record found"
	Lpgsv404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Lpgsv404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Lpgsv404ApplicationJSONErrorDescriptionEnum) ToPointer() *Lpgsv404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Lpgsv404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Lpgsv404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lpgsv404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Lpgsv404ApplicationJSON - No record found
type Lpgsv404ApplicationJSON struct {
	Error            *Lpgsv404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lpgsv404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lpgsv401ApplicationJSONErrorEnum string

const (
	Lpgsv401ApplicationJSONErrorEnumInvalidAuthentication Lpgsv401ApplicationJSONErrorEnum = "invalid_authentication"
	Lpgsv401ApplicationJSONErrorEnumInvalidAuthorization  Lpgsv401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Lpgsv401ApplicationJSONErrorEnum) ToPointer() *Lpgsv401ApplicationJSONErrorEnum {
	return &e
}

func (e *Lpgsv401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Lpgsv401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lpgsv401ApplicationJSONErrorEnum: %v", v)
	}
}

type Lpgsv401ApplicationJSONErrorDescriptionEnum string

const (
	Lpgsv401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Lpgsv401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Lpgsv401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Lpgsv401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Lpgsv401ApplicationJSONErrorDescriptionEnum) ToPointer() *Lpgsv401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Lpgsv401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Lpgsv401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lpgsv401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Lpgsv401ApplicationJSON - Unauthorized access
type Lpgsv401ApplicationJSON struct {
	Error            *Lpgsv401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lpgsv401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lpgsv400ApplicationJSONErrorEnum string

const (
	Lpgsv400ApplicationJSONErrorEnumMissingParameter Lpgsv400ApplicationJSONErrorEnum = "missing_parameter"
	Lpgsv400ApplicationJSONErrorEnumInvalidParameter Lpgsv400ApplicationJSONErrorEnum = "invalid_parameter"
	Lpgsv400ApplicationJSONErrorEnumInvalidFormat    Lpgsv400ApplicationJSONErrorEnum = "invalid_format"
	Lpgsv400ApplicationJSONErrorEnumInvalidTxnid     Lpgsv400ApplicationJSONErrorEnum = "invalid_txnid"
	Lpgsv400ApplicationJSONErrorEnumInvalidConsentid Lpgsv400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Lpgsv400ApplicationJSONErrorEnum) ToPointer() *Lpgsv400ApplicationJSONErrorEnum {
	return &e
}

func (e *Lpgsv400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Lpgsv400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lpgsv400ApplicationJSONErrorEnum: %v", v)
	}
}

type Lpgsv400ApplicationJSONErrorDescriptionEnum string

const (
	Lpgsv400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Lpgsv400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Lpgsv400ApplicationJSONErrorDescriptionEnumBadRequest                              Lpgsv400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Lpgsv400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Lpgsv400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Lpgsv400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Lpgsv400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Lpgsv400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Lpgsv400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Lpgsv400ApplicationJSONErrorDescriptionEnum) ToPointer() *Lpgsv400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Lpgsv400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Lpgsv400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lpgsv400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Lpgsv400ApplicationJSON - Bad request
type Lpgsv400ApplicationJSON struct {
	Error            *Lpgsv400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lpgsv400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type LpgsvResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Lpgsv400ApplicationJSONObject *Lpgsv400ApplicationJSON
	// Unauthorized access
	Lpgsv401ApplicationJSONObject *Lpgsv401ApplicationJSON
	// No record found
	Lpgsv404ApplicationJSONObject *Lpgsv404ApplicationJSON
	// Internal server error
	Lpgsv500ApplicationJSONObject *Lpgsv500ApplicationJSON
	// Bad gateway
	Lpgsv502ApplicationJSONObject *Lpgsv502ApplicationJSON
	// Service unavailable
	Lpgsv503ApplicationJSONObject *Lpgsv503ApplicationJSON
	// Gateway timeout
	Lpgsv504ApplicationJSONObject *Lpgsv504ApplicationJSON
}
