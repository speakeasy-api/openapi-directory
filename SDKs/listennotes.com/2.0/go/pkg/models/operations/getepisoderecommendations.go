// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetEpisodeRecommendationsPathParams struct {
	// Episode id.
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

// GetEpisodeRecommendationsSafeModeEnum - Whether or not to exclude podcasts with explicit language. 1 is yes, and 0 is no.
type GetEpisodeRecommendationsSafeModeEnum string

const (
	GetEpisodeRecommendationsSafeModeEnumZero GetEpisodeRecommendationsSafeModeEnum = "0"
	GetEpisodeRecommendationsSafeModeEnumOne  GetEpisodeRecommendationsSafeModeEnum = "1"
)

func (e *GetEpisodeRecommendationsSafeModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		*e = GetEpisodeRecommendationsSafeModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEpisodeRecommendationsSafeModeEnum: %s", s)
	}
}

type GetEpisodeRecommendationsQueryParams struct {
	// Whether or not to exclude podcasts with explicit language. 1 is yes, and 0 is no.
	SafeMode *GetEpisodeRecommendationsSafeModeEnum `queryParam:"style=form,explode=true,name=safe_mode"`
}

type GetEpisodeRecommendationsHeaders struct {
	// Get API Key on listennotes.com/api
	XListenAPIKey string `header:"style=simple,explode=false,name=X-ListenAPI-Key"`
}

type GetEpisodeRecommendationsRequest struct {
	PathParams  GetEpisodeRecommendationsPathParams
	QueryParams GetEpisodeRecommendationsQueryParams
	Headers     GetEpisodeRecommendationsHeaders
}

type GetEpisodeRecommendationsResponse struct {
	ContentType string
	// OK
	GetEpisodeRecommendationsResponse *shared.GetEpisodeRecommendationsResponse
	Headers                           map[string][]string
	StatusCode                        int
	RawResponse                       *http.Response
}
