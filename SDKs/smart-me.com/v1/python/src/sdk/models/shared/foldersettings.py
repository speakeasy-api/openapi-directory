"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class FolderSettingsFolderTypeEnum(str, Enum):
    r"""The Type of the folder"""
    FOLDER = 'Folder'
    LOCATION = 'Location'
    FACTORY = 'Factory'
    HOUSE = 'House'
    OFFICE = 'Office'
    MACHINE = 'Machine'
    VIRTUAL_METER = 'VirtualMeter'
    ELECTICITY_FOLDER = 'ElecticityFolder'
    WATER_FOLDER = 'WaterFolder'
    HEAT_FOLDER = 'HeatFolder'
    GAS_FOLDER = 'GasFolder'
    TEMPERATURE_FOLDER = 'TemperatureFolder'
    SUN = 'Sun'
    LIGHT = 'Light'
    ICE = 'Ice'
    SOFA = 'Sofa'
    FOOD = 'Food'
    COFFEE = 'Coffee'
    CAR = 'Car'
    CHARGING_STATION = 'ChargingStation'
    METER = 'Meter'
    USER = 'User'
    TRASH = 'Trash'
    GRID_PHOTOVOLTAIC_POWER_SYSTEM = 'GridPhotovoltaicPowerSystem'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FolderSettings:
    r"""Container for the folder settings"""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Description' }})
    r"""The Description of the folder or meter"""  
    enable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Enable'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Enable' }})
    r"""Flag if the meter is enabled (folder not supported yet)"""  
    folder_type: Optional[FolderSettingsFolderTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FolderType'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'FolderType' }})
    r"""The Type of the folder"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Name' }})
    r"""The Name of the folder or meter"""  
    parent_folder_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ParentFolderId'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'ParentFolderId' }})
    r"""The parent folder ID of this item"""  
    serial_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SerialNumber'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'SerialNumber' }})
    r"""The serial number (meter only)"""  
    useable_for_virtual_billing_meters: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UseableForVirtualBillingMeters'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'UseableForVirtualBillingMeters' }})
    r"""Flag if the meter is usable for virtual billing meters (e.g. washroom)"""  
    value_correction: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ValueCorrection'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'ValueCorrection' }})
    r"""The value correction on this meter"""  
    value_correction_parent_folder: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ValueCorrectionParentFolder'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'ValueCorrectionParentFolder' }})
    r"""The value correction on all parent folders. but not on the meter itself"""  
    visualization_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VisualizationName'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'VisualizationName' }})
    r"""The name of the visualization of the folder"""  
    