"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudrecommendationenginev1beta1featuremap as shared_googlecloudrecommendationenginev1beta1featuremap
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudRecommendationengineV1beta1ProductDetailStockStateEnum(str, Enum):
    r"""Optional. Item stock state. If provided, this overrides the stock state in Catalog for items in this event."""
    STOCK_STATE_UNSPECIFIED = 'STOCK_STATE_UNSPECIFIED'
    IN_STOCK = 'IN_STOCK'
    OUT_OF_STOCK = 'OUT_OF_STOCK'
    PREORDER = 'PREORDER'
    BACKORDER = 'BACKORDER'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudRecommendationengineV1beta1ProductDetail:
    r"""Detailed product information associated with a user event."""
    
    available_quantity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableQuantity'), 'exclude': lambda f: f is None }})
    r"""Optional. Quantity of the products in stock when a user event happens. Optional. If provided, this overrides the available quantity in Catalog for this event. and can only be set if `stock_status` is set to `IN_STOCK`. Note that if an item is out of stock, you must set the `stock_state` field to be `OUT_OF_STOCK`. Leaving this field unspecified / as zero is not sufficient to mark the item out of stock."""  
    currency_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencyCode'), 'exclude': lambda f: f is None }})
    r"""Optional. Currency code for price/costs. Use three-character ISO-4217 code. Required only if originalPrice or displayPrice is set."""  
    display_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayPrice'), 'exclude': lambda f: f is None }})
    r"""Optional. Display price of the product (e.g. discounted price). If provided, this will override the display price in Catalog for this product."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Required. Catalog item ID. UTF-8 encoded string with a length limit of 128 characters."""  
    item_attributes: Optional[shared_googlecloudrecommendationenginev1beta1featuremap.GoogleCloudRecommendationengineV1beta1FeatureMap] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemAttributes'), 'exclude': lambda f: f is None }})
    r"""FeatureMap represents extra features that customers want to include in the recommendation model for catalogs/user events as categorical/numerical features."""  
    original_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originalPrice'), 'exclude': lambda f: f is None }})
    r"""Optional. Original price of the product. If provided, this will override the original price in Catalog for this product."""  
    quantity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""Optional. Quantity of the product associated with the user event. For example, this field will be 2 if two products are added to the shopping cart for `add-to-cart` event. Required for `add-to-cart`, `add-to-list`, `remove-from-cart`, `checkout-start`, `purchase-complete`, `refund` event types."""  
    stock_state: Optional[GoogleCloudRecommendationengineV1beta1ProductDetailStockStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stockState'), 'exclude': lambda f: f is None }})
    r"""Optional. Item stock state. If provided, this overrides the stock state in Catalog for items in this event."""  
    