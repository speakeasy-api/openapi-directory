"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import entityresult as shared_entityresult
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class QueryResultBatchEntityResultTypeEnum(str, Enum):
    r"""The result type for every entity in `entity_results`."""
    RESULT_TYPE_UNSPECIFIED = 'RESULT_TYPE_UNSPECIFIED'
    FULL = 'FULL'
    PROJECTION = 'PROJECTION'
    KEY_ONLY = 'KEY_ONLY'

class QueryResultBatchMoreResultsEnum(str, Enum):
    r"""The state of the query after the current batch."""
    MORE_RESULTS_TYPE_UNSPECIFIED = 'MORE_RESULTS_TYPE_UNSPECIFIED'
    NOT_FINISHED = 'NOT_FINISHED'
    MORE_RESULTS_AFTER_LIMIT = 'MORE_RESULTS_AFTER_LIMIT'
    MORE_RESULTS_AFTER_CURSOR = 'MORE_RESULTS_AFTER_CURSOR'
    NO_MORE_RESULTS = 'NO_MORE_RESULTS'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class QueryResultBatch:
    r"""A batch of results produced by a query."""
    
    end_cursor: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endCursor'), 'exclude': lambda f: f is None }})
    r"""A cursor that points to the position after the last result in the batch."""  
    entity_results: Optional[list[shared_entityresult.EntityResult]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entityResults'), 'exclude': lambda f: f is None }})
    r"""The results for this batch."""  
    entity_result_type: Optional[QueryResultBatchEntityResultTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entityResultType'), 'exclude': lambda f: f is None }})
    r"""The result type for every entity in `entity_results`."""  
    more_results: Optional[QueryResultBatchMoreResultsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moreResults'), 'exclude': lambda f: f is None }})
    r"""The state of the query after the current batch."""  
    read_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('readTime'), 'exclude': lambda f: f is None }})
    r"""Read timestamp this batch was returned from. This applies to the range of results from the query's `start_cursor` (or the beginning of the query if no cursor was given) to this batch's `end_cursor` (not the query's `end_cursor`). In a single transaction, subsequent query result batches for the same query can have a greater timestamp. Each batch's read timestamp is valid for all preceding batches. This value will not be set for eventually consistent queries in Cloud Datastore."""  
    skipped_cursor: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skippedCursor'), 'exclude': lambda f: f is None }})
    r"""A cursor that points to the position after the last skipped result. Will be set when `skipped_results` != 0."""  
    skipped_results: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skippedResults'), 'exclude': lambda f: f is None }})
    r"""The number of results skipped, typically because of an offset."""  
    snapshot_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('snapshotVersion'), 'exclude': lambda f: f is None }})
    r"""The version number of the snapshot this batch was returned from. This applies to the range of results from the query's `start_cursor` (or the beginning of the query if no cursor was given) to this batch's `end_cursor` (not the query's `end_cursor`). In a single transaction, subsequent query result batches for the same query can have a greater snapshot version number. Each batch's snapshot version is valid for all preceding batches. The value will be zero for eventually consistent queries."""  
    