// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// AcceptMatchXAmzTargetEnum
type AcceptMatchXAmzTargetEnum string

const (
	AcceptMatchXAmzTargetEnumGameLiftAcceptMatch AcceptMatchXAmzTargetEnum = "GameLift.AcceptMatch"
)

func (e AcceptMatchXAmzTargetEnum) ToPointer() *AcceptMatchXAmzTargetEnum {
	return &e
}

func (e *AcceptMatchXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GameLift.AcceptMatch":
		*e = AcceptMatchXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AcceptMatchXAmzTargetEnum: %v", v)
	}
}

type AcceptMatchRequest struct {
	AcceptMatchInput  shared.AcceptMatchInput   `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        AcceptMatchXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type AcceptMatchResponse struct {
	// Success
	AcceptMatchOutput map[string]interface{}
	ContentType       string
	// InternalServiceException
	InternalServiceException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// NotFoundException
	NotFoundException interface{}
	StatusCode        int
	RawResponse       *http.Response
	// UnsupportedRegionException
	UnsupportedRegionException interface{}
}
