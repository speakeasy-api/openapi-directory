"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Administrative:
    r"""Create and manage administrative resources"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def doctors_list(self, request: operations.DoctorsListRequest, security: operations.DoctorsListSecurity) -> operations.DoctorsListResponse:
        r"""Retrieve or search doctors within practice group"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/doctors'
        
        query_params = utils.get_query_params(operations.DoctorsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DoctorsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DoctorsList200ApplicationJSON])
                res.doctors_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def doctors_read(self, request: operations.DoctorsReadRequest, security: operations.DoctorsReadSecurity) -> operations.DoctorsReadResponse:
        r"""Retrieve an existing dcotor"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DoctorsReadRequest, base_url, '/api/doctors/{id}', request)
        
        query_params = utils.get_query_params(operations.DoctorsReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DoctorsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Doctor])
                res.doctor = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def user_groups_list(self, request: operations.UserGroupsListRequest, security: operations.UserGroupsListSecurity) -> operations.UserGroupsListResponse:
        r"""Retrieve or search user groups"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/user_groups'
        
        query_params = utils.get_query_params(operations.UserGroupsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UserGroupsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UserGroupsList200ApplicationJSON])
                res.user_groups_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def user_groups_read(self, request: operations.UserGroupsReadRequest, security: operations.UserGroupsReadSecurity) -> operations.UserGroupsReadResponse:
        r"""Retrieve an existing user group"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UserGroupsReadRequest, base_url, '/api/user_groups/{id}', request)
        
        query_params = utils.get_query_params(operations.UserGroupsReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UserGroupsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserProfilesGroup])
                res.user_profiles_group = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def users_list(self, request: operations.UsersListRequest, security: operations.UsersListSecurity) -> operations.UsersListResponse:
        r"""Retrieve or search users, `/api/users/current` can be used to identify logged in user, it will redirect to `/api/users/{current_user_id}`"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/users'
        
        query_params = utils.get_query_params(operations.UsersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UsersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UsersList200ApplicationJSON])
                res.users_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def users_read(self, request: operations.UsersReadRequest, security: operations.UsersReadSecurity) -> operations.UsersReadResponse:
        r"""Retrieve an existing user, `/api/users/current` can be used to identify logged in user, it will redirect to `/api/users/{current_user_id}`"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UsersReadRequest, base_url, '/api/users/{id}', request)
        
        query_params = utils.get_query_params(operations.UsersReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UsersReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserProfile])
                res.user_profile = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    