<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettings
{
    /**
     * Allow live streaming.
     * 
     * @var ?bool $allowLiveStreaming
     */
	#[\JMS\Serializer\Annotation\SerializedName('allow_live_streaming')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $allowLiveStreaming = null;
    
    /**
     * Allow participants to use annotation tools.
     * 
     * @var ?bool $annotation
     */
	#[\JMS\Serializer\Annotation\SerializedName('annotation')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $annotation = null;
    
    /**
     * Allow host to put attendee on hold.
     * 
     * 
     * **This field has been deprecated and is no longer supported.**
     * 
     * @var ?bool $attendeeOnHold
     */
	#[\JMS\Serializer\Annotation\SerializedName('attendee_on_hold')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $attendeeOnHold = null;
    
    /**
     * Auto save all in-meeting chats.
     * 
     * @var ?bool $autoSavingChat
     */
	#[\JMS\Serializer\Annotation\SerializedName('auto_saving_chat')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $autoSavingChat = null;
    
    /**
     * Allow host to split meeting participants into separate breakout rooms.
     * 
     * @var ?bool $breakoutRoom
     */
	#[\JMS\Serializer\Annotation\SerializedName('breakout_room')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $breakoutRoom = null;
    
    /**
     * Enable chat during meeting for all participants.
     * 
     * @var ?bool $chat
     */
	#[\JMS\Serializer\Annotation\SerializedName('chat')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $chat = null;
    
    /**
     * Enable closed captions.
     * 
     * @var ?bool $closedCaption
     */
	#[\JMS\Serializer\Annotation\SerializedName('closed_caption')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $closedCaption = null;
    
    /**
     * Allow the host to add co-hosts.
     * 
     * @var ?bool $coHost
     */
	#[\JMS\Serializer\Annotation\SerializedName('co_host')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $coHost = null;
    
    /**
     * If set to `true`, you can [select data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars) to use for hosting your real-time meeting and webinar traffic. These regions can be provided in the `data_center_regions` field. If set to `false`, the regions cannot be customized and the default regions will be used.
     * 
     * @var ?bool $customDataCenterRegions
     */
	#[\JMS\Serializer\Annotation\SerializedName('custom_data_center_regions')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $customDataCenterRegions = null;
    
    /**
     * Allow custom live streaming.
     * 
     * @var ?bool $customLiveStreamingService
     */
	#[\JMS\Serializer\Annotation\SerializedName('custom_live_streaming_service')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $customLiveStreamingService = null;
    
    /**
     * Custom service instructions.
     * 
     * @var ?string $customServiceInstructions
     */
	#[\JMS\Serializer\Annotation\SerializedName('custom_service_instructions')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $customServiceInstructions = null;
    
    /**
     * If you have set the value of `custom_data_center_regions` to `true`, specify the data center regions that you would like to opt in to (country codes from among: ["DE", "NL", "HK", "AU", "IN", "LA", "TY", "CN", "US", "CA"]).
     * 
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsDataCenterRegionsEnum $dataCenterRegions
     */
	#[\JMS\Serializer\Annotation\SerializedName('data_center_regions')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsDataCenterRegionsEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsDataCenterRegionsEnum $dataCenterRegions = null;
    
    /**
     * Zoom requires encryption for all data between the Zoom cloud, Zoom client, and Zoom Room. Require encryption for 3rd party endpoints (H323/SIP).
     * 
     * @var ?bool $e2eEncryption
     */
	#[\JMS\Serializer\Annotation\SerializedName('e2e_encryption')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $e2eEncryption = null;
    
    /**
     * Play sound when participants join or leave:<br>`host` - When host joins or leaves.<br>`all` - When any participant joins or leaves.<br>`none` - No join or leave sound.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsEntryExitChimeEnum $entryExitChime
     */
	#[\JMS\Serializer\Annotation\SerializedName('entry_exit_chime')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsEntryExitChimeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsEntryExitChimeEnum $entryExitChime = null;
    
    /**
     * Allow another user to take control of the camera.
     * 
     * @var ?bool $farEndCameraControl
     */
	#[\JMS\Serializer\Annotation\SerializedName('far_end_camera_control')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $farEndCameraControl = null;
    
    /**
     * Enable option to send feedback to Zoom at the end of the meeting.
     * 
     * @var ?bool $feedback
     */
	#[\JMS\Serializer\Annotation\SerializedName('feedback')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $feedback = null;
    
    /**
     * Indicates whether [in-meeting file transfer](https://support.zoom.us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting has been enabled for the user or not.
     * 
     * @var ?bool $fileTransfer
     */
	#[\JMS\Serializer\Annotation\SerializedName('file_transfer')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $fileTransfer = null;
    
    /**
     * Enable group HD video.
     * 
     * @var ?bool $groupHd
     */
	#[\JMS\Serializer\Annotation\SerializedName('group_hd')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $groupHd = null;
    
    /**
     * Enable non-verbal feedback through screens.
     * 
     * @var ?bool $nonVerbalFeedback
     */
	#[\JMS\Serializer\Annotation\SerializedName('non_verbal_feedback')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $nonVerbalFeedback = null;
    
    /**
     * Add polls to the meeting controls.
     * 
     * @var ?bool $polling
     */
	#[\JMS\Serializer\Annotation\SerializedName('polling')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $polling = null;
    
    /**
     * Enable 1:1 private chat between participants during meetings.
     * 
     * @var ?bool $privateChat
     */
	#[\JMS\Serializer\Annotation\SerializedName('private_chat')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $privateChat = null;
    
    /**
     * Record and play their own voice.
     * 
     * @var ?bool $recordPlayVoice
     */
	#[\JMS\Serializer\Annotation\SerializedName('record_play_voice')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $recordPlayVoice = null;
    
    /**
     * Enable remote control during screensharing.
     * 
     * @var ?bool $remoteControl
     */
	#[\JMS\Serializer\Annotation\SerializedName('remote_control')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $remoteControl = null;
    
    /**
     * Allow host to provide 1:1 remote support to a participant.
     * 
     * @var ?bool $remoteSupport
     */
	#[\JMS\Serializer\Annotation\SerializedName('remote_support')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $remoteSupport = null;
    
    /**
     * Indicates whether the [**Request permission to unmute participants**](https://support.zoom.us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting#h_01EGK4XFWS1SJGZ71MYGKF7260) option has been enabled for the user or not.
     * 
     * @var ?bool $requestPermissionToUnmute
     */
	#[\JMS\Serializer\Annotation\SerializedName('request_permission_to_unmute')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $requestPermissionToUnmute = null;
    
    /**
     * Allow host and participants to share their screen or content during meetings
     * 
     * 
     * 
     * @var ?bool $screenSharing
     */
	#[\JMS\Serializer\Annotation\SerializedName('screen_sharing')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $screenSharing = null;
    
    /**
     * Share dual camera (deprecated).
     * 
     * @var ?bool $shareDualCamera
     */
	#[\JMS\Serializer\Annotation\SerializedName('share_dual_camera')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $shareDualCamera = null;
    
    /**
     * Always show meeting controls during a meeting.
     * 
     * @var ?bool $showMeetingControlToolbar
     */
	#[\JMS\Serializer\Annotation\SerializedName('show_meeting_control_toolbar')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $showMeetingControlToolbar = null;
    
    /**
     * Enable virtual background.
     * 
     * @var ?bool $virtualBackground
     */
	#[\JMS\Serializer\Annotation\SerializedName('virtual_background')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $virtualBackground = null;
    
    /**
     * Settings to manage virtual background.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsVirtualBackgroundSettings $virtualBackgroundSettings
     */
	#[\JMS\Serializer\Annotation\SerializedName('virtual_background_settings')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsVirtualBackgroundSettings')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsVirtualBackgroundSettings $virtualBackgroundSettings = null;
    
    /**
     * Enable Waiting room - if enabled, attendees can only join after host approves.
     * 
     * @var ?bool $waitingRoom
     */
	#[\JMS\Serializer\Annotation\SerializedName('waiting_room')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $waitingRoom = null;
    
    /**
     * Indicates who can share their screen or content during meetings. The value can be one of the following: <br>
     * 
     * `host`: Only host can share the screen.<br>
     * `all`: Both hosts and attendees can share their screen during meetings. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsWhoCanShareScreenEnum $whoCanShareScreen
     */
	#[\JMS\Serializer\Annotation\SerializedName('who_can_share_screen')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsWhoCanShareScreenEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsWhoCanShareScreenEnum $whoCanShareScreen = null;
    
    /**
     * Indicates who is allowed to start sharing screen when someone else in the meeting is sharing their screen. The value can be one of the following:<br>
     * 
     * `host`: Only a host can share the screen when someone else is sharing.<br>
     * `all`: Anyone in the meeting is allowed to start sharing their screen when someone else is sharing. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsWhoCanShareScreenWhenSomeoneIsSharingEnum $whoCanShareScreenWhenSomeoneIsSharing
     */
	#[\JMS\Serializer\Annotation\SerializedName('who_can_share_screen_when_someone_is_sharing')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsWhoCanShareScreenWhenSomeoneIsSharingEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsWhoCanShareScreenWhenSomeoneIsSharingEnum $whoCanShareScreenWhenSomeoneIsSharing = null;
    
    /**
     * Allow livestreaming by host through Workplace by Facebook.
     * 
     * @var ?bool $workplaceByFacebook
     */
	#[\JMS\Serializer\Annotation\SerializedName('workplace_by_facebook')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $workplaceByFacebook = null;
    
	public function __construct()
	{
		$this->allowLiveStreaming = null;
		$this->annotation = null;
		$this->attendeeOnHold = null;
		$this->autoSavingChat = null;
		$this->breakoutRoom = null;
		$this->chat = null;
		$this->closedCaption = null;
		$this->coHost = null;
		$this->customDataCenterRegions = null;
		$this->customLiveStreamingService = null;
		$this->customServiceInstructions = null;
		$this->dataCenterRegions = null;
		$this->e2eEncryption = null;
		$this->entryExitChime = null;
		$this->farEndCameraControl = null;
		$this->feedback = null;
		$this->fileTransfer = null;
		$this->groupHd = null;
		$this->nonVerbalFeedback = null;
		$this->polling = null;
		$this->privateChat = null;
		$this->recordPlayVoice = null;
		$this->remoteControl = null;
		$this->remoteSupport = null;
		$this->requestPermissionToUnmute = null;
		$this->screenSharing = null;
		$this->shareDualCamera = null;
		$this->showMeetingControlToolbar = null;
		$this->virtualBackground = null;
		$this->virtualBackgroundSettings = null;
		$this->waitingRoom = null;
		$this->whoCanShareScreen = null;
		$this->whoCanShareScreenWhenSomeoneIsSharing = null;
		$this->workplaceByFacebook = null;
	}
}
