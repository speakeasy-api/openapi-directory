"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetDirectDebitByUUIDRequest:
    
    direct_debit_uuid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'directDebitUuid', 'style': 'simple', 'explode': False }})  
    
class GetDirectDebitByUUIDDirectDebitCurrencyCodeEnum(str, Enum):
    r"""The three letter code for the currency - either `EUR` or `GBP`."""
    EUR = 'EUR'
    GBP = 'GBP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDirectDebitByUUIDDirectDebitCurrency:
    r"""The currency."""
    
    code: Optional[GetDirectDebitByUUIDDirectDebitCurrencyCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""The three letter code for the currency - either `EUR` or `GBP`."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The name of the currency"""  
    
class GetDirectDebitByUUIDDirectDebitSchemeRejectReasonCodeEnum(str, Enum):
    r"""The reject code returned by the bank indicating an issue with the direct debit. Each ARRUD code represents a rejection reason."""
    ZERO = '0'
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'
    FIVE = '5'
    SIX = '6'
    SEVEN = '7'
    EIGHT = '8'
    NINE = '9'
    A = 'A'
    B = 'B'

class GetDirectDebitByUUIDDirectDebitStatusEnum(str, Enum):
    r"""The statuses of the direct debit payments associated with the mandate.
    * 'RECIEVED' - Direct Debit has been recieved
    * 'REJECT_REQUESTED' - The direct debit has a rejected request associated with it
    * 'REJECT_READY_FOR_PROCESSING' 
    * 'REJECT_RECORD_IN_PROGRESS'
    * 'REJECT_RECORDED'
    * 'REJECT_FILE_CREATED'
    * 'REJECT_FILE_SENT'
    * 'COLLECTED' - Direct debit collected
    * 'REFUND_REQUESTED' - Refund requested on direct debit
    * 'REFUND_RECORD_IN_PROGRESS' - Refund in progress on direct debit
    * 'REFUND_RECORDED'
    * 'REFUND_FILE_CREATED'
    * 'REFUND_FILE_SENT'
    """
    RECIEVED = 'RECIEVED'
    REJECT_REQUESTED = 'REJECT_REQUESTED'
    REJECT_READY_FOR_PROCESSING = 'REJECT_READY_FOR_PROCESSING'
    REJECT_RECORD_IN_PROGRESS = 'REJECT_RECORD_IN_PROGRESS'
    REJECT_RECORDED = 'REJECT_RECORDED'
    REJECT_FILE_CREATED = 'REJECT_FILE_CREATED'
    REJECT_FILE_SENT = 'REJECT_FILE_SENT'
    COLLECTED = 'COLLECTED'
    REFUND_REQUESTED = 'REFUND_REQUESTED'
    REFUND_RECORD_IN_PROGRESS = 'REFUND_RECORD_IN_PROGRESS'
    REFUND_RECORDED = 'REFUND_RECORDED'
    REFUND_FILE_CREATED = 'REFUND_FILE_CREATED'
    REFUND_FILE_SENT = 'REFUND_FILE_SENT'

class GetDirectDebitByUUIDDirectDebitTypeEnum(str, Enum):
    r"""The type of the direct debit."""
    FIRST_COLLECTION = 'FIRST_COLLECTION'
    ONGOING_COLLECTION = 'ONGOING_COLLECTION'
    REPRESENTED_COLLECTION = 'REPRESENTED_COLLECTION'
    FINAL_COLLECTION = 'FINAL_COLLECTION'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDirectDebitByUUIDDirectDebit:
    r"""Retrieve all details of a single direct debit collection/payment"""
    
    amount: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""Value of the payment"""  
    currency: Optional[GetDirectDebitByUUIDDirectDebitCurrency] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""The currency."""  
    date_created: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateCreated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date the direct debit was created. Milliseconds since the epoch (1970)."""  
    direct_debit_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('directDebitReference'), 'exclude': lambda f: f is None }})
    r"""The direct debit reference."""  
    direct_debit_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('directDebitUuid'), 'exclude': lambda f: f is None }})
    r"""The UUID for the direct debit payment"""  
    is_ddic: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isDDIC'), 'exclude': lambda f: f is None }})
    r"""DDIC is a Direct Debit Indemnity Claim (i.e.a refund). If if the DD is requested to be refunded it is marked isDDIC true."""  
    last_updated: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpdated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date the direct debit was last updated. Milliseconds since the epoch (1970)."""  
    mandate_u_uid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandateUUid'), 'exclude': lambda f: f is None }})
    r"""The UUID for the mandate"""  
    originator_alias: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originatorAlias'), 'exclude': lambda f: f is None }})
    r"""The Alias of the party who sets up the direct debit."""  
    originator_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originatorName'), 'exclude': lambda f: f is None }})
    r"""The creator of the party who sets up the direct debit."""  
    originator_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originatorReference'), 'exclude': lambda f: f is None }})
    r"""Set by party who sets up the direct debit."""  
    scheme_reject_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schemeRejectReason'), 'exclude': lambda f: f is None }})
    r"""Reason why rejected"""  
    scheme_reject_reason_code: Optional[GetDirectDebitByUUIDDirectDebitSchemeRejectReasonCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schemeRejectReasonCode'), 'exclude': lambda f: f is None }})
    r"""The reject code returned by the bank indicating an issue with the direct debit. Each ARRUD code represents a rejection reason."""  
    status: Optional[GetDirectDebitByUUIDDirectDebitStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The statuses of the direct debit payments associated with the mandate.
    * 'RECIEVED' - Direct Debit has been recieved
    * 'REJECT_REQUESTED' - The direct debit has a rejected request associated with it
    * 'REJECT_READY_FOR_PROCESSING' 
    * 'REJECT_RECORD_IN_PROGRESS'
    * 'REJECT_RECORDED'
    * 'REJECT_FILE_CREATED'
    * 'REJECT_FILE_SENT'
    * 'COLLECTED' - Direct debit collected
    * 'REFUND_REQUESTED' - Refund requested on direct debit
    * 'REFUND_RECORD_IN_PROGRESS' - Refund in progress on direct debit
    * 'REFUND_RECORDED'
    * 'REFUND_FILE_CREATED'
    * 'REFUND_FILE_SENT'
    """  
    target_ican: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetIcan'), 'exclude': lambda f: f is None }})
    r"""The ican of your fire account that the money was taken from"""  
    target_payee_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetPayeeId'), 'exclude': lambda f: f is None }})
    r"""The payee that was created when the DD was processed"""  
    type: Optional[GetDirectDebitByUUIDDirectDebitTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the direct debit."""  
    

@dataclasses.dataclass
class GetDirectDebitByUUIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    direct_debit: Optional[GetDirectDebitByUUIDDirectDebit] = dataclasses.field(default=None)
    r"""Retrieve all details of a single direct debit collection/payment"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    