"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateFleetRequest = exports.CreateFleetRequestTagSpecifications = exports.CreateFleetRequestTagSpecificationsTags = exports.CreateFleetRequestTagSpecificationsResourceTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var fleetexcesscapacityterminationpolicyenum_1 = require("./fleetexcesscapacityterminationpolicyenum");
var fleetlaunchtemplateconfiglistrequest_1 = require("./fleetlaunchtemplateconfiglistrequest");
var fleettypeenum_1 = require("./fleettypeenum");
var ondemandoptionsrequest_1 = require("./ondemandoptionsrequest");
var spotoptionsrequest_1 = require("./spotoptionsrequest");
var targetcapacityspecificationrequest_1 = require("./targetcapacityspecificationrequest");
/**
 * The type of resource to tag on creation.
 */
var CreateFleetRequestTagSpecificationsResourceTypeEnum;
(function (CreateFleetRequestTagSpecificationsResourceTypeEnum) {
    CreateFleetRequestTagSpecificationsResourceTypeEnum["CapacityReservation"] = "capacity-reservation";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["ClientVpnEndpoint"] = "client-vpn-endpoint";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["CustomerGateway"] = "customer-gateway";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["CarrierGateway"] = "carrier-gateway";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["CoipPool"] = "coip-pool";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["DedicatedHost"] = "dedicated-host";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["DhcpOptions"] = "dhcp-options";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["EgressOnlyInternetGateway"] = "egress-only-internet-gateway";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["ElasticIp"] = "elastic-ip";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["ElasticGpu"] = "elastic-gpu";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["ExportImageTask"] = "export-image-task";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["ExportInstanceTask"] = "export-instance-task";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["Fleet"] = "fleet";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["FpgaImage"] = "fpga-image";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["HostReservation"] = "host-reservation";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["Image"] = "image";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["ImportImageTask"] = "import-image-task";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["ImportSnapshotTask"] = "import-snapshot-task";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["Instance"] = "instance";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["InstanceEventWindow"] = "instance-event-window";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["InternetGateway"] = "internet-gateway";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["Ipam"] = "ipam";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["IpamPool"] = "ipam-pool";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["IpamScope"] = "ipam-scope";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["Ipv4poolEc2"] = "ipv4pool-ec2";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["Ipv6poolEc2"] = "ipv6pool-ec2";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["KeyPair"] = "key-pair";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["LaunchTemplate"] = "launch-template";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["LocalGateway"] = "local-gateway";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["LocalGatewayRouteTable"] = "local-gateway-route-table";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["LocalGatewayVirtualInterface"] = "local-gateway-virtual-interface";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["LocalGatewayVirtualInterfaceGroup"] = "local-gateway-virtual-interface-group";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["LocalGatewayRouteTableVpcAssociation"] = "local-gateway-route-table-vpc-association";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["LocalGatewayRouteTableVirtualInterfaceGroupAssociation"] = "local-gateway-route-table-virtual-interface-group-association";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["Natgateway"] = "natgateway";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["NetworkAcl"] = "network-acl";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["NetworkInterface"] = "network-interface";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["NetworkInsightsAnalysis"] = "network-insights-analysis";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["NetworkInsightsPath"] = "network-insights-path";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["NetworkInsightsAccessScope"] = "network-insights-access-scope";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["NetworkInsightsAccessScopeAnalysis"] = "network-insights-access-scope-analysis";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["PlacementGroup"] = "placement-group";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["PrefixList"] = "prefix-list";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["ReplaceRootVolumeTask"] = "replace-root-volume-task";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["ReservedInstances"] = "reserved-instances";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["RouteTable"] = "route-table";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["SecurityGroup"] = "security-group";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["SecurityGroupRule"] = "security-group-rule";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["Snapshot"] = "snapshot";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["SpotFleetRequest"] = "spot-fleet-request";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["SpotInstancesRequest"] = "spot-instances-request";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["Subnet"] = "subnet";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["SubnetCidrReservation"] = "subnet-cidr-reservation";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["TrafficMirrorFilter"] = "traffic-mirror-filter";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["TrafficMirrorSession"] = "traffic-mirror-session";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["TrafficMirrorTarget"] = "traffic-mirror-target";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["TransitGateway"] = "transit-gateway";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["TransitGatewayAttachment"] = "transit-gateway-attachment";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["TransitGatewayConnectPeer"] = "transit-gateway-connect-peer";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["TransitGatewayMulticastDomain"] = "transit-gateway-multicast-domain";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["TransitGatewayPolicyTable"] = "transit-gateway-policy-table";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["TransitGatewayRouteTable"] = "transit-gateway-route-table";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["TransitGatewayRouteTableAnnouncement"] = "transit-gateway-route-table-announcement";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["Volume"] = "volume";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["Vpc"] = "vpc";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["VpcEndpoint"] = "vpc-endpoint";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["VpcEndpointConnection"] = "vpc-endpoint-connection";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["VpcEndpointService"] = "vpc-endpoint-service";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["VpcEndpointServicePermission"] = "vpc-endpoint-service-permission";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["VpcPeeringConnection"] = "vpc-peering-connection";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["VpnConnection"] = "vpn-connection";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["VpnGateway"] = "vpn-gateway";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["VpcFlowLog"] = "vpc-flow-log";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["CapacityReservationFleet"] = "capacity-reservation-fleet";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["TrafficMirrorFilterRule"] = "traffic-mirror-filter-rule";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["VpcEndpointConnectionDeviceType"] = "vpc-endpoint-connection-device-type";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["VerifiedAccessInstance"] = "verified-access-instance";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["VerifiedAccessGroup"] = "verified-access-group";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["VerifiedAccessEndpoint"] = "verified-access-endpoint";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["VerifiedAccessPolicy"] = "verified-access-policy";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["VerifiedAccessTrustProvider"] = "verified-access-trust-provider";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["VpnConnectionDeviceType"] = "vpn-connection-device-type";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["VpcBlockPublicAccessExclusion"] = "vpc-block-public-access-exclusion";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["IpamResourceDiscovery"] = "ipam-resource-discovery";
    CreateFleetRequestTagSpecificationsResourceTypeEnum["IpamResourceDiscoveryAssociation"] = "ipam-resource-discovery-association";
})(CreateFleetRequestTagSpecificationsResourceTypeEnum = exports.CreateFleetRequestTagSpecificationsResourceTypeEnum || (exports.CreateFleetRequestTagSpecificationsResourceTypeEnum = {}));
/**
 * Describes a tag.
 */
var CreateFleetRequestTagSpecificationsTags = /** @class */ (function (_super) {
    __extends(CreateFleetRequestTagSpecificationsTags, _super);
    function CreateFleetRequestTagSpecificationsTags() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateFleetRequestTagSpecificationsTags.prototype, "key", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateFleetRequestTagSpecificationsTags.prototype, "value", void 0);
    return CreateFleetRequestTagSpecificationsTags;
}(utils_1.SpeakeasyBase));
exports.CreateFleetRequestTagSpecificationsTags = CreateFleetRequestTagSpecificationsTags;
/**
 * <p>The tags to apply to a resource when the resource is being created. When you specify a tag, you must specify the resource type to tag, otherwise the request will fail.</p> <note> <p>The <code>Valid Values</code> lists all the resource types that can be tagged. However, the action you're using might not support tagging all of these resource types. If you try to tag a resource type that is unsupported for the action you're using, you'll get an error.</p> </note>
 */
var CreateFleetRequestTagSpecifications = /** @class */ (function (_super) {
    __extends(CreateFleetRequestTagSpecifications, _super);
    function CreateFleetRequestTagSpecifications() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateFleetRequestTagSpecifications.prototype, "resourceType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: CreateFleetRequestTagSpecificationsTags }),
        __metadata("design:type", Array)
    ], CreateFleetRequestTagSpecifications.prototype, "tags", void 0);
    return CreateFleetRequestTagSpecifications;
}(utils_1.SpeakeasyBase));
exports.CreateFleetRequestTagSpecifications = CreateFleetRequestTagSpecifications;
var CreateFleetRequest = /** @class */ (function (_super) {
    __extends(CreateFleetRequest, _super);
    function CreateFleetRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateFleetRequest.prototype, "clientToken", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateFleetRequest.prototype, "context", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateFleetRequest.prototype, "dryRun", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateFleetRequest.prototype, "excessCapacityTerminationPolicy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: fleetlaunchtemplateconfiglistrequest_1.FleetLaunchTemplateConfigListRequest }),
        __metadata("design:type", Array)
    ], CreateFleetRequest.prototype, "launchTemplateConfigs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", ondemandoptionsrequest_1.OnDemandOptionsRequest)
    ], CreateFleetRequest.prototype, "onDemandOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateFleetRequest.prototype, "replaceUnhealthyInstances", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", spotoptionsrequest_1.SpotOptionsRequest)
    ], CreateFleetRequest.prototype, "spotOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: CreateFleetRequestTagSpecifications }),
        __metadata("design:type", Array)
    ], CreateFleetRequest.prototype, "tagSpecifications", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", targetcapacityspecificationrequest_1.TargetCapacitySpecificationRequest)
    ], CreateFleetRequest.prototype, "targetCapacitySpecification", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateFleetRequest.prototype, "terminateInstancesWithExpiration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateFleetRequest.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Date)
    ], CreateFleetRequest.prototype, "validFrom", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Date)
    ], CreateFleetRequest.prototype, "validUntil", void 0);
    return CreateFleetRequest;
}(utils_1.SpeakeasyBase));
exports.CreateFleetRequest = CreateFleetRequest;
