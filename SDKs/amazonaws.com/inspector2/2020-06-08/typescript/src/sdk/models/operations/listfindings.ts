/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Details on the criteria used to define the filter.
 */
export class ListFindingsRequestBodyFilterCriteria extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "awsAccountId" })
  @Type(() => shared.StringFilter)
  awsAccountId?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "componentId" })
  @Type(() => shared.StringFilter)
  componentId?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "componentType" })
  @Type(() => shared.StringFilter)
  componentType?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ec2InstanceImageId" })
  @Type(() => shared.StringFilter)
  ec2InstanceImageId?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ec2InstanceSubnetId" })
  @Type(() => shared.StringFilter)
  ec2InstanceSubnetId?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ec2InstanceVpcId" })
  @Type(() => shared.StringFilter)
  ec2InstanceVpcId?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ecrImageArchitecture" })
  @Type(() => shared.StringFilter)
  ecrImageArchitecture?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ecrImageHash" })
  @Type(() => shared.StringFilter)
  ecrImageHash?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.DateFilter })
  @Expose({ name: "ecrImagePushedAt" })
  @Type(() => shared.DateFilter)
  ecrImagePushedAt?: shared.DateFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ecrImageRegistry" })
  @Type(() => shared.StringFilter)
  ecrImageRegistry?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ecrImageRepositoryName" })
  @Type(() => shared.StringFilter)
  ecrImageRepositoryName?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "ecrImageTags" })
  @Type(() => shared.StringFilter)
  ecrImageTags?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "exploitAvailable" })
  @Type(() => shared.StringFilter)
  exploitAvailable?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "findingArn" })
  @Type(() => shared.StringFilter)
  findingArn?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "findingStatus" })
  @Type(() => shared.StringFilter)
  findingStatus?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "findingType" })
  @Type(() => shared.StringFilter)
  findingType?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.DateFilter })
  @Expose({ name: "firstObservedAt" })
  @Type(() => shared.DateFilter)
  firstObservedAt?: shared.DateFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "fixAvailable" })
  @Type(() => shared.StringFilter)
  fixAvailable?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.NumberFilter })
  @Expose({ name: "inspectorScore" })
  @Type(() => shared.NumberFilter)
  inspectorScore?: shared.NumberFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "lambdaFunctionExecutionRoleArn" })
  @Type(() => shared.StringFilter)
  lambdaFunctionExecutionRoleArn?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.DateFilter })
  @Expose({ name: "lambdaFunctionLastModifiedAt" })
  @Type(() => shared.DateFilter)
  lambdaFunctionLastModifiedAt?: shared.DateFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "lambdaFunctionLayers" })
  @Type(() => shared.StringFilter)
  lambdaFunctionLayers?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "lambdaFunctionName" })
  @Type(() => shared.StringFilter)
  lambdaFunctionName?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "lambdaFunctionRuntime" })
  @Type(() => shared.StringFilter)
  lambdaFunctionRuntime?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.DateFilter })
  @Expose({ name: "lastObservedAt" })
  @Type(() => shared.DateFilter)
  lastObservedAt?: shared.DateFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "networkProtocol" })
  @Type(() => shared.StringFilter)
  networkProtocol?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.PortRangeFilter })
  @Expose({ name: "portRange" })
  @Type(() => shared.PortRangeFilter)
  portRange?: shared.PortRangeFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "relatedVulnerabilities" })
  @Type(() => shared.StringFilter)
  relatedVulnerabilities?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "resourceId" })
  @Type(() => shared.StringFilter)
  resourceId?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.MapFilter })
  @Expose({ name: "resourceTags" })
  @Type(() => shared.MapFilter)
  resourceTags?: shared.MapFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "resourceType" })
  @Type(() => shared.StringFilter)
  resourceType?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "severity" })
  @Type(() => shared.StringFilter)
  severity?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "title" })
  @Type(() => shared.StringFilter)
  title?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.DateFilter })
  @Expose({ name: "updatedAt" })
  @Type(() => shared.DateFilter)
  updatedAt?: shared.DateFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "vendorSeverity" })
  @Type(() => shared.StringFilter)
  vendorSeverity?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "vulnerabilityId" })
  @Type(() => shared.StringFilter)
  vulnerabilityId?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "vulnerabilitySource" })
  @Type(() => shared.StringFilter)
  vulnerabilitySource?: shared.StringFilter[];

  @SpeakeasyMetadata({ elemType: shared.PackageFilter })
  @Expose({ name: "vulnerablePackages" })
  @Type(() => shared.PackageFilter)
  vulnerablePackages?: shared.PackageFilter[];
}

/**
 * Details about the criteria used to sort finding results.
 */
export class ListFindingsRequestBodySortCriteria extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "field" })
  field?: shared.SortFieldEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "sortOrder" })
  sortOrder?: shared.SortOrderEnum;
}

export class ListFindingsRequestBody extends SpeakeasyBase {
  /**
   * Details on the criteria used to define the filter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "filterCriteria" })
  @Type(() => ListFindingsRequestBodyFilterCriteria)
  filterCriteria?: ListFindingsRequestBodyFilterCriteria;

  /**
   * The maximum number of results to return in the response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxResults" })
  maxResults?: number;

  /**
   * A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextToken" })
  nextToken?: string;

  /**
   * Details about the criteria used to sort finding results.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sortCriteria" })
  @Type(() => ListFindingsRequestBodySortCriteria)
  sortCriteria?: ListFindingsRequestBodySortCriteria;
}

export class ListFindingsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: ListFindingsRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * Pagination limit
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxResults",
  })
  maxResults?: string;

  /**
   * Pagination token
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=nextToken",
  })
  nextToken?: string;
}

export class ListFindingsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  listFindingsResponse?: shared.ListFindingsResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
