"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class BookDepreciationSettingAveragingMethodEnum(str, Enum):
    r"""The method of averaging applied to this asset. See Averaging Methods"""
    FULL_MONTH = 'FullMonth'
    ACTUAL_DAYS = 'ActualDays'

class BookDepreciationSettingDepreciationCalculationMethodEnum(str, Enum):
    r"""See Depreciation Calculation Methods"""
    RATE = 'Rate'
    LIFE = 'Life'
    NONE = 'None'

class BookDepreciationSettingDepreciationMethodEnum(str, Enum):
    r"""The method of depreciation applied to this asset. See Depreciation Methods"""
    NO_DEPRECIATION = 'NoDepreciation'
    STRAIGHT_LINE = 'StraightLine'
    DIMINISHING_VALUE100 = 'DiminishingValue100'
    DIMINISHING_VALUE150 = 'DiminishingValue150'
    DIMINISHING_VALUE200 = 'DiminishingValue200'
    FULL_DEPRECIATION = 'FullDepreciation'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookDepreciationSetting:
    
    averaging_method: Optional[BookDepreciationSettingAveragingMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('averagingMethod'), 'exclude': lambda f: f is None }})
    r"""The method of averaging applied to this asset. See Averaging Methods"""  
    book_effective_date_of_change_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookEffectiveDateOfChangeId'), 'exclude': lambda f: f is None }})
    r"""Unique Xero identifier for the effective date change"""  
    depreciable_object_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('depreciableObjectId'), 'exclude': lambda f: f is None }})
    r"""Unique Xero identifier for the depreciable object"""  
    depreciable_object_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('depreciableObjectType'), 'exclude': lambda f: f is None }})
    r"""The type of asset object"""  
    depreciation_calculation_method: Optional[BookDepreciationSettingDepreciationCalculationMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('depreciationCalculationMethod'), 'exclude': lambda f: f is None }})
    r"""See Depreciation Calculation Methods"""  
    depreciation_method: Optional[BookDepreciationSettingDepreciationMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('depreciationMethod'), 'exclude': lambda f: f is None }})
    r"""The method of depreciation applied to this asset. See Depreciation Methods"""  
    depreciation_rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('depreciationRate'), 'exclude': lambda f: f is None }})
    r"""The rate of depreciation (e.g. 0.05)"""  
    effective_life_years: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('effectiveLifeYears'), 'exclude': lambda f: f is None }})
    r"""Effective life of the asset in years (e.g. 5)"""  
    