<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. Clients may use Operations.GetOperation or Operations.ListOperations to check whether the cancellation succeeded or the operation completed despite cancellation. Authorization requires the following [Google IAM](https://cloud.google.com/iam) permission: * `genomics.operations.cancel`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GenomicsProjectsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GenomicsProjectsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GenomicsProjectsOperationsCancelResponse
     */
	public function genomicsProjectsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\GenomicsProjectsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GenomicsProjectsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GenomicsProjectsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\GenomicsProjectsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GenomicsProjectsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GenomicsProjectsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. Authorization requires the following [Google IAM](https://cloud.google.com/iam) permission: * `genomics.operations.list`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GenomicsProjectsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GenomicsProjectsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GenomicsProjectsOperationsListResponse
     */
	public function genomicsProjectsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\GenomicsProjectsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GenomicsProjectsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GenomicsProjectsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha1/{name}', \OpenAPI\OpenAPI\Models\Operations\GenomicsProjectsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GenomicsProjectsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GenomicsProjectsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * The worker uses this method to retrieve the assigned operation and provide periodic status updates.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GenomicsProjectsWorkersCheckInRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GenomicsProjectsWorkersCheckInSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GenomicsProjectsWorkersCheckInResponse
     */
	public function genomicsProjectsWorkersCheckIn(
        \OpenAPI\OpenAPI\Models\Operations\GenomicsProjectsWorkersCheckInRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GenomicsProjectsWorkersCheckInSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GenomicsProjectsWorkersCheckInResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha1/{id}:checkIn', \OpenAPI\OpenAPI\Models\Operations\GenomicsProjectsWorkersCheckInRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "checkInRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GenomicsProjectsWorkersCheckInRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GenomicsProjectsWorkersCheckInResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->checkInResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CheckInResponse', 'json');
            }
        }

        return $response;
    }
}