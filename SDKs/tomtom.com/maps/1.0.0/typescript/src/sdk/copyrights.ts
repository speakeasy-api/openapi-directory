/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Copyrights {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Copyrights whole world
   *
   * @remarks
   * The Copyrights API returns copyright information for
   * the Maps API Raster Tile Service in JSON, JSONP, or XML format.
   * This call returns copyright information for the whole world.
   */
  getMapVersionNumberCopyrightsFormat(
    req: operations.GetMapVersionNumberCopyrightsFormatRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMapVersionNumberCopyrightsFormatResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMapVersionNumberCopyrightsFormatRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/map/{versionNumber}/copyrights.{format}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMapVersionNumberCopyrightsFormatResponse =
        new operations.GetMapVersionNumberCopyrightsFormatResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 304, 400, 403, 410, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Captions
   *
   * @remarks
   * This API returns copyright captions for the map service.
   */
  getMapVersionNumberCopyrightsCaptionFormat(
    req: operations.GetMapVersionNumberCopyrightsCaptionFormatRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMapVersionNumberCopyrightsCaptionFormatResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMapVersionNumberCopyrightsCaptionFormatRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/map/{versionNumber}/copyrights/caption.{format}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMapVersionNumberCopyrightsCaptionFormatResponse =
        new operations.GetMapVersionNumberCopyrightsCaptionFormatResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 304, 400, 403, 410, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Copyrights bounding box
   *
   * @remarks
   * The Copyrights API returns copyright information for
   * the Maps API Raster Tile Service in JSON, JSONP, or XML format.
   * This call returns copyright information for a specific bounding box.
   */
  getMapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormat(
    req: operations.GetMapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetMapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/map/{versionNumber}/copyrights/{minLon}/{minLat}/{maxLon}/{maxLat}.{format}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatResponse =
        new operations.GetMapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case [200, 304, 400, 401, 403, 410, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Copyrights tile
   *
   * @remarks
   * The Copyrights API returns copyright information for
   * the Maps API Raster Tile Service in JSON, JSONP, or XML format.
   * This call returns copyright information for the a specific map tile.
   */
  getMapVersionNumberCopyrightsZoomXYFormat(
    req: operations.GetMapVersionNumberCopyrightsZoomXYFormatRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMapVersionNumberCopyrightsZoomXYFormatResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMapVersionNumberCopyrightsZoomXYFormatRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/map/{versionNumber}/copyrights/{zoom}/{X}/{Y}.{format}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMapVersionNumberCopyrightsZoomXYFormatResponse =
        new operations.GetMapVersionNumberCopyrightsZoomXYFormatResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 304, 400, 401, 403, 410, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
