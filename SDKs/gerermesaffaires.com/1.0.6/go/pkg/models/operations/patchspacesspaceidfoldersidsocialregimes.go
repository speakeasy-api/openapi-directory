// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyLevelEnum string

const (
	PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyLevelEnumConfidential PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyLevelEnum = "confidential"
	PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyLevelEnumRegular      PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyLevelEnum = "regular"
	PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyLevelEnumPublic       PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyLevelEnum = "public"
)

func (e *PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "confidential":
		fallthrough
	case "regular":
		fallthrough
	case "public":
		*e = PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyLevelEnum: %s", s)
	}
}

type PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyPeriodicityEnum string

const (
	PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyPeriodicityEnumMonthly    PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyPeriodicityEnum = "monthly"
	PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyPeriodicityEnumQuarterly  PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyPeriodicityEnum = "quarterly"
	PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyPeriodicityEnumHalfYearly PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyPeriodicityEnum = "half-yearly"
	PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyPeriodicityEnumAnnual     PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyPeriodicityEnum = "annual"
	PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyPeriodicityEnumNull       PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyPeriodicityEnum = "null"
)

func (e *PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyPeriodicityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "monthly":
		fallthrough
	case "quarterly":
		fallthrough
	case "half-yearly":
		fallthrough
	case "annual":
		fallthrough
	case "null":
		*e = PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyPeriodicityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyPeriodicityEnum: %s", s)
	}
}

type PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyTypeEnum string

const (
	PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyTypeEnumMandatory PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyTypeEnum = "mandatory"
	PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyTypeEnumOptional  PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyTypeEnum = "optional"
	PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyTypeEnumNull      PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyTypeEnum = "null"
)

func (e *PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "mandatory":
		fallthrough
	case "optional":
		fallthrough
	case "null":
		*e = PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyTypeEnum: %s", s)
	}
}

// PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBody - Social Regime to modify (except name, class and archivaldate)
type PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBody struct {
	About       *string                                                             `json:"About,omitempty"`
	Comment     *string                                                             `json:"Comment,omitempty"`
	Designation *string                                                             `json:"Designation,omitempty"`
	End         *string                                                             `json:"End,omitempty"`
	Home        *bool                                                               `json:"Home,omitempty"`
	Keywords    []string                                                            `json:"Keywords,omitempty"`
	Level       *PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyLevelEnum       `json:"Level,omitempty"`
	Periodicity *PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyPeriodicityEnum `json:"Periodicity,omitempty"`
	Start       *string                                                             `json:"Start,omitempty"`
	Type        *PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyTypeEnum        `json:"Type,omitempty"`
}

type PatchSpacesSpaceIDFoldersIDSocialRegimesRequest struct {
	// Social Regime to modify (except name, class and archivaldate)
	RequestBody PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBody `request:"mediaType=application/json"`
	// Id of the folder
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

type PatchSpacesSpaceIDFoldersIDSocialRegimesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
