"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Betslippart:
    
    include_in_multiple: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('includeInMultiple') }})
    r"""Indicates if the bet can be used in a multiple bet"""  
    price_den: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceDen') }})
    r"""Price denominator - will be ignored for types other than L (Fixed Price)"""  
    price_num: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceNum') }})
    r"""Price numerator - will be ignored for types other than L (Fixed Price)"""  
    price_type: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceType') }})
    r"""The type of price selected. For example - ‘L’ (Fixed)"""  
    selection_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selectionId') }})
    r"""The selection identifier"""  
    each_way_available: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eachWayAvailable'), 'exclude': lambda f: f is None }})
    r"""Indicates whether each way is available"""  
    leg_group: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legGroup'), 'exclude': lambda f: f is None }})
    r"""To organise a number of outcome selections into one or more bet groups, such as a Single bet, a Double bet, a Trixie, etc"""  
    price_changed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceChanged'), 'exclude': lambda f: f is None }})
    r"""Indicates if there has been a change in the price"""  
    single_available: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('singleAvailable'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the bet can be used in a single bet"""  
    starting_price_available: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startingPriceAvailable'), 'exclude': lambda f: f is None }})
    r"""Indicates whether starting prices are available"""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Indicates the current status of the bet"""  
    status_changed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusChanged'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the status of the bet has changed"""  
    