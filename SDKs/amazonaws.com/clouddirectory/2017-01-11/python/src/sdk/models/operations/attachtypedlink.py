"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import attachtypedlinkresponse as shared_attachtypedlinkresponse
from ..shared import attributenameandvalue as shared_attributenameandvalue
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AttachTypedLinkRequestBodySourceObjectReference:
    r"""The reference that identifies an object."""
    
    selector: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Selector'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AttachTypedLinkRequestBodyTargetObjectReference:
    r"""The reference that identifies an object."""
    
    selector: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Selector'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AttachTypedLinkRequestBodyTypedLinkFacet:
    r"""Identifies the schema Amazon Resource Name (ARN) and facet name for the typed link."""
    
    schema_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SchemaArn'), 'exclude': lambda f: f is None }})  
    typed_link_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TypedLinkName'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AttachTypedLinkRequestBody:
    
    attributes: list[shared_attributenameandvalue.AttributeNameAndValue] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Attributes') }})
    r"""A set of attributes that are associated with the typed link."""  
    source_object_reference: AttachTypedLinkRequestBodySourceObjectReference = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourceObjectReference') }})
    r"""The reference that identifies an object."""  
    target_object_reference: AttachTypedLinkRequestBodyTargetObjectReference = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TargetObjectReference') }})
    r"""The reference that identifies an object."""  
    typed_link_facet: AttachTypedLinkRequestBodyTypedLinkFacet = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TypedLinkFacet') }})
    r"""Identifies the schema Amazon Resource Name (ARN) and facet name for the typed link."""  
    

@dataclasses.dataclass
class AttachTypedLinkRequest:
    
    request_body: AttachTypedLinkRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_data_partition: str = dataclasses.field(metadata={'header': { 'field_name': 'x-amz-data-partition', 'style': 'simple', 'explode': False }})
    r"""The Amazon Resource Name (ARN) of the directory where you want to attach the typed link."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class AttachTypedLinkResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    attach_typed_link_response: Optional[shared_attachtypedlinkresponse.AttachTypedLinkResponse] = dataclasses.field(default=None)
    r"""Success"""  
    directory_not_enabled_exception: Optional[Any] = dataclasses.field(default=None)
    r"""DirectoryNotEnabledException"""  
    facet_validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""FacetValidationException"""  
    internal_service_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServiceException"""  
    invalid_arn_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidArnException"""  
    invalid_attachment_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidAttachmentException"""  
    limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""LimitExceededException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    retryable_conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""RetryableConflictException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    