/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ConnectionAuthorizationTypeEnum } from "./connectionauthorizationtypeenum";
import { ConnectionAuthResponseParameters } from "./connectionauthresponseparameters";
import { ConnectionStateEnum } from "./connectionstateenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Success
 */
export class DescribeConnectionResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AuthParameters" })
  @Type(() => ConnectionAuthResponseParameters)
  authParameters?: ConnectionAuthResponseParameters;

  @SpeakeasyMetadata()
  @Expose({ name: "AuthorizationType" })
  authorizationType?: ConnectionAuthorizationTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "ConnectionArn" })
  connectionArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ConnectionState" })
  connectionState?: ConnectionStateEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "CreationTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "LastAuthorizedTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastAuthorizedTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "LastModifiedTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastModifiedTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "SecretArn" })
  secretArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "StateReason" })
  stateReason?: string;
}
