// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTDescribeCoipPoolsActionEnum
type POSTDescribeCoipPoolsActionEnum string

const (
	POSTDescribeCoipPoolsActionEnumDescribeCoipPools POSTDescribeCoipPoolsActionEnum = "DescribeCoipPools"
)

func (e POSTDescribeCoipPoolsActionEnum) ToPointer() *POSTDescribeCoipPoolsActionEnum {
	return &e
}

func (e *POSTDescribeCoipPoolsActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DescribeCoipPools":
		*e = POSTDescribeCoipPoolsActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeCoipPoolsActionEnum: %v", v)
	}
}

// POSTDescribeCoipPoolsVersionEnum
type POSTDescribeCoipPoolsVersionEnum string

const (
	POSTDescribeCoipPoolsVersionEnumTwoThousandAndSixteen1115 POSTDescribeCoipPoolsVersionEnum = "2016-11-15"
)

func (e POSTDescribeCoipPoolsVersionEnum) ToPointer() *POSTDescribeCoipPoolsVersionEnum {
	return &e
}

func (e *POSTDescribeCoipPoolsVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = POSTDescribeCoipPoolsVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeCoipPoolsVersionEnum: %v", v)
	}
}

type POSTDescribeCoipPoolsRequest struct {
	Action POSTDescribeCoipPoolsActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken         *string                          `queryParam:"style=form,explode=true,name=NextToken"`
	RequestBody       []byte                           `request:"mediaType=text/xml"`
	Version           POSTDescribeCoipPoolsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTDescribeCoipPoolsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
