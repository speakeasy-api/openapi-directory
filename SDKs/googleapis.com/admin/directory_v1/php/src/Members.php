<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Members 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Removes a member from a group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersDeleteResponse
     */
	public function directoryMembersDelete(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/groups/{groupKey}/members/{memberKey}', \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryMembersDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieves a group member's properties.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersGetResponse
     */
	public function directoryMembersGet(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/groups/{groupKey}/members/{memberKey}', \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryMembersGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->member = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Member', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Checks whether the given user is a member of the group. Membership can be direct or nested, but if nested, the `memberKey` and `groupKey` must be entities in the same domain or an `Invalid input` error is returned. To check for nested memberships that include entities outside of the group's domain, use the [`checkTransitiveMembership()`](https://cloud.google.com/identity/docs/reference/rest/v1/groups.memberships/checkTransitiveMembership) method in the Cloud Identity Groups API.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersHasMemberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersHasMemberSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersHasMemberResponse
     */
	public function directoryMembersHasMember(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersHasMemberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersHasMemberSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersHasMemberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}', \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersHasMemberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryMembersHasMemberRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersHasMemberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->membersHasMember = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MembersHasMember', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds a user to the specified group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersInsertResponse
     */
	public function directoryMembersInsert(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/groups/{groupKey}/members', \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "member", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryMembersInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->member = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Member', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a paginated list of all members in a group. This method times out after 60 minutes. For more information, see [Troubleshoot error codes](https://developers.google.com/admin-sdk/directory/v1/guides/troubleshoot-error-codes).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersListResponse
     */
	public function directoryMembersList(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/groups/{groupKey}/members', \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryMembersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->members = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Members', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the membership properties of a user in the specified group. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersPatchResponse
     */
	public function directoryMembersPatch(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/groups/{groupKey}/members/{memberKey}', \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "member", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryMembersPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->member = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Member', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the membership of a user in the specified group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersUpdateResponse
     */
	public function directoryMembersUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/groups/{groupKey}/members/{memberKey}', \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "member", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryMembersUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryMembersUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->member = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Member', 'json');
            }
        }

        return $response;
    }
}