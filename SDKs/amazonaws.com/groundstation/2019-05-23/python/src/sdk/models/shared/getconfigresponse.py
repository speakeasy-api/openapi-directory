"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import configcapabilitytype_enum as shared_configcapabilitytype_enum
from ..shared import configtypedata as shared_configtypedata
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetConfigResponse:
    r"""<p/>"""
    
    config_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configArn') }})  
    config_data: shared_configtypedata.ConfigTypeData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configData') }})  
    config_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configId') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    config_type: Optional[shared_configcapabilitytype_enum.ConfigCapabilityTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configType'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    