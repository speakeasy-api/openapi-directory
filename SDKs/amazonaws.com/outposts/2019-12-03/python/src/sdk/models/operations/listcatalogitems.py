"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import catalogitemclass_enum as shared_catalogitemclass_enum
from ..shared import listcatalogitemsoutput as shared_listcatalogitemsoutput
from ..shared import supportedstorageenum_enum as shared_supportedstorageenum_enum
from typing import Any, Optional


@dataclasses.dataclass
class ListCatalogItemsRequest:
    
    ec2_family_filter: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'EC2FamilyFilter', 'style': 'form', 'explode': True }})
    r"""Filters the results by EC2 family (for example, M5)."""  
    item_class_filter: Optional[list[shared_catalogitemclass_enum.CatalogItemClassEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ItemClassFilter', 'style': 'form', 'explode': True }})
    r"""Filters the results by item class."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'MaxResults', 'style': 'form', 'explode': True }})  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'NextToken', 'style': 'form', 'explode': True }})  
    supported_storage_filter: Optional[list[shared_supportedstorageenum_enum.SupportedStorageEnumEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'SupportedStorageFilter', 'style': 'form', 'explode': True }})
    r"""Filters the results by storage option."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ListCatalogItemsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    list_catalog_items_output: Optional[shared_listcatalogitemsoutput.ListCatalogItemsOutput] = dataclasses.field(default=None)
    r"""Success"""  
    not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NotFoundException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    