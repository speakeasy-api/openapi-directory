/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export enum GETSetIdentityHeadersInNotificationsEnabledActionEnum {
  SetIdentityHeadersInNotificationsEnabled = "SetIdentityHeadersInNotificationsEnabled",
}

/**
 * The notification type for which to enable or disable headers in notifications.
 */
export enum GETSetIdentityHeadersInNotificationsEnabledNotificationTypeEnum {
  Bounce = "Bounce",
  Complaint = "Complaint",
  Delivery = "Delivery",
}

export enum GETSetIdentityHeadersInNotificationsEnabledVersionEnum {
  TwoThousandAndTen1201 = "2010-12-01",
}

export class GETSetIdentityHeadersInNotificationsEnabledRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Action",
  })
  action: GETSetIdentityHeadersInNotificationsEnabledActionEnum;

  /**
   * <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Enabled",
  })
  enabled: boolean;

  /**
   * The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Identity",
  })
  identity: string;

  /**
   * The notification type for which to enable or disable headers in notifications.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=NotificationType",
  })
  notificationType: GETSetIdentityHeadersInNotificationsEnabledNotificationTypeEnum;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Version",
  })
  version: GETSetIdentityHeadersInNotificationsEnabledVersionEnum;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class GETSetIdentityHeadersInNotificationsEnabledResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
