/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class Code {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    public String code;
    public Code withCode(String code) {
        this.code = code;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("codeCategories")
    public CodeCategory[] codeCategories;
    public Code withCodeCategories(CodeCategory[] codeCategories) {
        this.codeCategories = codeCategories;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("codeType")
    public Lookup codeType;
    public Code withCodeType(Lookup codeType) {
        this.codeType = codeType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created")
    public OffsetDateTime created;
    public Code withCreated(OffsetDateTime created) {
        this.created = created;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public Code withDescription(String description) {
        this.description = description;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayOrder")
    public Integer displayOrder;
    public Code withDisplayOrder(Integer displayOrder) {
        this.displayOrder = displayOrder;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalStandards")
    public CodeExternalStandard[] externalStandards;
    public Code withExternalStandards(CodeExternalStandard[] externalStandards) {
        this.externalStandards = externalStandards;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fullDescription")
    public String fullDescription;
    public Code withFullDescription(String fullDescription) {
        this.fullDescription = fullDescription;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hideFromPatients")
    public Boolean hideFromPatients;
    public Code withHideFromPatients(Boolean hideFromPatients) {
        this.hideFromPatients = hideFromPatients;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;
    public Code withId(Long id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastUpdate")
    public OffsetDateTime lastUpdate;
    public Code withLastUpdate(OffsetDateTime lastUpdate) {
        this.lastUpdate = lastUpdate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("links")
    public Link[] links;
    public Code withLinks(Link[] links) {
        this.links = links;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("patientFriendlyName")
    public String patientFriendlyName;
    public Code withPatientFriendlyName(String patientFriendlyName) {
        this.patientFriendlyName = patientFriendlyName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("removedExternally")
    public Boolean removedExternally;
    public Code withRemovedExternally(Boolean removedExternally) {
        this.removedExternally = removedExternally;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceType")
    public CodeSourceTypeEnum sourceType;
    public Code withSourceType(CodeSourceTypeEnum sourceType) {
        this.sourceType = sourceType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("standardType")
    public Lookup standardType;
    public Code withStandardType(Lookup standardType) {
        this.standardType = standardType;
        return this;
    }
    
}
