"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class EntityConnections:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_entity_connections(self, request: operations.GETEntityConnectionsRequest) -> operations.GETEntityConnectionsResponse:
        r"""Multi-entity: List connections
        **Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
        
        Retrieves information about certain connections for a specified entity. You can specify the entity to retrieve in the `Zuora-Entity-Ids` request header.
        
        You can retrieve:
         - Inbound connections
         - Outbound connections
         - Both inbound and outbound connections
        
        ## User Access Permission
        You can make the call as any entity user.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/entity-connections'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETEntityConnectionsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETEntityConnectionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GETEntityConnectionsResponseType])
                res.get_entity_connections_response_type = out

        return res

    def post_entity_connections(self, request: operations.POSTEntityConnectionsRequest) -> operations.POSTEntityConnectionsResponse:
        r"""Multi-entity: Initiate a connection request
        **Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
        
        Initiates a connection request from a source entity to a target entity.
        
        ## User Access Permission
        You must make the call as a source entity administrator. Also, this administrator must have permission to access to the target entity.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/entity-connections'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "post_entity_connections_type", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTEntityConnectionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.POSTEntityConnectionsResponseType])
                res.post_entity_connections_response_type = out

        return res

    def put_entity_connections_accept(self, request: operations.PUTEntityConnectionsAcceptRequest) -> operations.PUTEntityConnectionsAcceptResponse:
        r"""Multi-entity: Accept a connection request
        **Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
        
        Accepts a connection request.
        
        ## User Access Permission
        You must make the call as an entity administrator to accept a connection request.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PUTEntityConnectionsAcceptRequest, base_url, '/v1/entity-connections/{connection-id}/accept', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PUT', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PUTEntityConnectionsAcceptResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PUTEntityConnectionsAcceptResponseType])
                res.put_entity_connections_accept_response_type = out

        return res

    def put_entity_connections_deny(self, request: operations.PUTEntityConnectionsDenyRequest) -> operations.PUTEntityConnectionsDenyResponse:
        r"""Multi-entity: Deny a connection request
        **Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
        
        Denies a connection request.
        
        ## User Access Permission
        You must make the call as an entity administrator to deny a connection request.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PUTEntityConnectionsDenyRequest, base_url, '/v1/entity-connections/{connection-id}/deny', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PUT', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PUTEntityConnectionsDenyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PUTEntityConnectionsDenyResponseType])
                res.put_entity_connections_deny_response_type = out

        return res

    def put_entity_connections_disconnect(self, request: operations.PUTEntityConnectionsDisconnectRequest) -> operations.PUTEntityConnectionsDisconnectResponse:
        r"""Multi-entity: Disconnect a connection
        **Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
        
        Disconnects an established connection. If you have shared objects from a global entity to a target entity, disconnecting the connection will break the mapping relationship between these entities and cannot be recovered later.
        
        ## User Access Permission
        You must make the call as an administrator of the target entity or source entity.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PUTEntityConnectionsDisconnectRequest, base_url, '/v1/entity-connections/{connection-id}/disconnect', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PUT', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PUTEntityConnectionsDisconnectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PUTEntityConnectionsDisconnectResponseType])
                res.put_entity_connections_disconnect_response_type = out

        return res

    