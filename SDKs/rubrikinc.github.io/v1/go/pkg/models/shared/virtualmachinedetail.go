// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// VirtualMachineDetailGuestOsTypeEnum - Type of operating system used by the VMware virtual machine.
type VirtualMachineDetailGuestOsTypeEnum string

const (
	VirtualMachineDetailGuestOsTypeEnumLinux   VirtualMachineDetailGuestOsTypeEnum = "Linux"
	VirtualMachineDetailGuestOsTypeEnumWindows VirtualMachineDetailGuestOsTypeEnum = "Windows"
	VirtualMachineDetailGuestOsTypeEnumUnknown VirtualMachineDetailGuestOsTypeEnum = "Unknown"
)

func (e VirtualMachineDetailGuestOsTypeEnum) ToPointer() *VirtualMachineDetailGuestOsTypeEnum {
	return &e
}

func (e *VirtualMachineDetailGuestOsTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Linux":
		fallthrough
	case "Windows":
		fallthrough
	case "Unknown":
		*e = VirtualMachineDetailGuestOsTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VirtualMachineDetailGuestOsTypeEnum: %v", v)
	}
}

// VirtualMachineDetailSLAAssignmentEnum - The SLA assignment type. Direct SLA assignment means that a SLA Domain was configured directly on the Rubrik object by the user. Derived SLA assignment means that the Rubrik object inherits an SLA Domain from its parent Rubrik object.
type VirtualMachineDetailSLAAssignmentEnum string

const (
	VirtualMachineDetailSLAAssignmentEnumDerived    VirtualMachineDetailSLAAssignmentEnum = "Derived"
	VirtualMachineDetailSLAAssignmentEnumDirect     VirtualMachineDetailSLAAssignmentEnum = "Direct"
	VirtualMachineDetailSLAAssignmentEnumUnassigned VirtualMachineDetailSLAAssignmentEnum = "Unassigned"
)

func (e VirtualMachineDetailSLAAssignmentEnum) ToPointer() *VirtualMachineDetailSLAAssignmentEnum {
	return &e
}

func (e *VirtualMachineDetailSLAAssignmentEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Derived":
		fallthrough
	case "Direct":
		fallthrough
	case "Unassigned":
		*e = VirtualMachineDetailSLAAssignmentEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VirtualMachineDetailSLAAssignmentEnum: %v", v)
	}
}

// VirtualMachineDetailSnapshotConsistencyMandateEnum - Consistency level mandated for this VM or empty string for none.
type VirtualMachineDetailSnapshotConsistencyMandateEnum string

const (
	VirtualMachineDetailSnapshotConsistencyMandateEnumUnknown              VirtualMachineDetailSnapshotConsistencyMandateEnum = "UNKNOWN"
	VirtualMachineDetailSnapshotConsistencyMandateEnumInconsistent         VirtualMachineDetailSnapshotConsistencyMandateEnum = "INCONSISTENT"
	VirtualMachineDetailSnapshotConsistencyMandateEnumCrashConsistent      VirtualMachineDetailSnapshotConsistencyMandateEnum = "CRASH_CONSISTENT"
	VirtualMachineDetailSnapshotConsistencyMandateEnumFileSystemConsistent VirtualMachineDetailSnapshotConsistencyMandateEnum = "FILE_SYSTEM_CONSISTENT"
	VirtualMachineDetailSnapshotConsistencyMandateEnumVssConsistent        VirtualMachineDetailSnapshotConsistencyMandateEnum = "VSS_CONSISTENT"
	VirtualMachineDetailSnapshotConsistencyMandateEnumAppConsistent        VirtualMachineDetailSnapshotConsistencyMandateEnum = "APP_CONSISTENT"
)

func (e VirtualMachineDetailSnapshotConsistencyMandateEnum) ToPointer() *VirtualMachineDetailSnapshotConsistencyMandateEnum {
	return &e
}

func (e *VirtualMachineDetailSnapshotConsistencyMandateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "INCONSISTENT":
		fallthrough
	case "CRASH_CONSISTENT":
		fallthrough
	case "FILE_SYSTEM_CONSISTENT":
		fallthrough
	case "VSS_CONSISTENT":
		fallthrough
	case "APP_CONSISTENT":
		*e = VirtualMachineDetailSnapshotConsistencyMandateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VirtualMachineDetailSnapshotConsistencyMandateEnum: %v", v)
	}
}

// VirtualMachineDetail - Virtual machine details.
type VirtualMachineDetail struct {
	AgentStatus          *AgentStatus         `json:"agentStatus,omitempty"`
	BlackoutWindowStatus BlackoutWindowStatus `json:"blackoutWindowStatus"`
	BlackoutWindows      BlackoutWindows      `json:"blackoutWindows"`
	// Current CDP State of virtual machine.
	CdpState               CdpStateEnum            `json:"cdpState"`
	CloudInstantiationSpec *CloudInstantiationSpec `json:"cloudInstantiationSpec,omitempty"`
	ClusterName            *string                 `json:"clusterName,omitempty"`
	// The ID of the SLA Domain configured directly on the Rubrik object.
	ConfiguredSLADomainID string `json:"configuredSlaDomainId"`
	// The name of the SLA Domain configured directly on the Rubrik object.
	ConfiguredSLADomainName string `json:"configuredSlaDomainName"`
	// Specifies whether the SLA Domain is used for protection or retention.
	ConfiguredSLADomainType *ConfiguredSLATypeEnum `json:"configuredSlaDomainType,omitempty"`
	CurrentHost             *VmwareHostSummary     `json:"currentHost,omitempty"`
	EffectiveSLADomain      SLADomainSummary       `json:"effectiveSlaDomain"`
	// The ID of the SLA Domain that controls the protection of the Rubrik object.
	EffectiveSLADomainID string `json:"effectiveSlaDomainId"`
	// The name of the SLA Domain that controls the protection of the Rubrik object.
	EffectiveSLADomainName string `json:"effectiveSlaDomainName"`
	// Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.
	EffectiveSLADomainPolarisManagedID *string `json:"effectiveSlaDomainPolarisManagedId,omitempty"`
	// The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.
	EffectiveSLASourceObjectID *string `json:"effectiveSlaSourceObjectId,omitempty"`
	// The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.
	EffectiveSLASourceObjectName *string `json:"effectiveSlaSourceObjectName,omitempty"`
	// Brief info of all the objects in the folder path to this VM.
	FolderPath      []VMPathPoint              `json:"folderPath"`
	GuestCredential *BaseGuestCredentialDetail `json:"guestCredential,omitempty"`
	// Status of authentication with a specific virtual machine using guest credentials. Possible values are: SUCCESSFUL, PENDING, or FAILED.
	GuestCredentialAuthorizationStatus string  `json:"guestCredentialAuthorizationStatus"`
	GuestOsName                        *string `json:"guestOsName,omitempty"`
	// Type of operating system used by the VMware virtual machine.
	GuestOsType VirtualMachineDetailGuestOsTypeEnum `json:"guestOsType"`
	HostID      *string                             `json:"hostId,omitempty"`
	HostName    *string                             `json:"hostName,omitempty"`
	// The ID of the Rubrik object.
	ID string `json:"id"`
	// Brief info of all the objects in the infrastructure path to this VM.
	InfraPath []VMPathPoint `json:"infraPath"`
	IPAddress string        `json:"ipAddress"`
	// Boolean value that indicates whether the Rubrik Backup Service is installed and registered for the specified virtual machine. Set to 'true' when the Rubrik Backup Service is installed and registered and in all other cases set to 'false'.
	IsAgentRegistered *bool `json:"isAgentRegistered,omitempty"`
	// Boolean value that determines whether the available storage array integration is used with the specified virtual machine. Set to 'true' to use storage array integration and set to 'false' to not use storage array integration. Refer to the value of 'isArrayIntegrationPossible' to determine whether storage array integration is available for a virtual machine.
	IsArrayIntegrationEnabled bool `json:"isArrayIntegrationEnabled"`
	// Boolean value that indicates whether the performance enhancements of storage array integration are available for the specified virtual machine object. Storage array integration is available when all of the datastores that are assigned to the virtual machine reside on a qualified storage array. Set to 'true' when storage array integration is available and set to 'false' when storage array integration is not available.
	IsArrayIntegrationPossible bool `json:"isArrayIntegrationPossible"`
	IsCdpEnabled               bool `json:"isCdpEnabled"`
	// Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.
	IsConfiguredSLADomainRetentionLocked *bool `json:"isConfiguredSlaDomainRetentionLocked,omitempty"`
	// Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.
	IsEffectiveSLADomainRetentionLocked *bool `json:"isEffectiveSlaDomainRetentionLocked,omitempty"`
	// A Boolean that specifies whether the virtual machine is in a VMC environment.
	IsInVmc              bool `json:"isInVmc"`
	IsRelic              bool `json:"isRelic"`
	IsReplicationEnabled bool `json:"isReplicationEnabled"`
	// Whether to pause or resume backups/archival for this VM.
	IsVMPaused *bool `json:"isVmPaused,omitempty"`
	// Latest point in time that we can recover to if this is a CDP enabled VM.
	LatestRecoveryPoint *time.Time `json:"latestRecoveryPoint,omitempty"`
	// This returns the sum of all virtual disk sizes in the specified virtual machine.
	LogicalSize               *int64 `json:"logicalSize,omitempty"`
	MaxNestedVsphereSnapshots int    `json:"maxNestedVsphereSnapshots"`
	Moid                      string `json:"moid"`
	// The name of the Rubrik object.
	Name string `json:"name"`
	// Oldest point in time that we can recover to if this is a CDP enabled VM.
	OldestRecoveryPoint *time.Time                   `json:"oldestRecoveryPoint,omitempty"`
	ParentAppInfo       *ParentAppInfo               `json:"parentAppInfo,omitempty"`
	PendingSLADomain    *ManagedObjectPendingSLAInfo `json:"pendingSlaDomain,omitempty"`
	PhysicalStorage     int64                        `json:"physicalStorage"`
	PostBackupScript    *VirtualMachineScriptDetail  `json:"postBackupScript,omitempty"`
	PostSnapScript      *VirtualMachineScriptDetail  `json:"postSnapScript,omitempty"`
	// The power status of VM(ON,OFF,SLEEP etc.).
	PowerStatus     *string                     `json:"powerStatus,omitempty"`
	PreBackupScript *VirtualMachineScriptDetail `json:"preBackupScript,omitempty"`
	// The ID of the cluster that manages the Rubrik object.
	PrimaryClusterID string     `json:"primaryClusterId"`
	ProtectionDate   *time.Time `json:"protectionDate,omitempty"`
	// The ID of the SLA Domain whose retention policy is in use.
	RetentionSLADomainID *string `json:"retentionSlaDomainId,omitempty"`
	// The SLA assignment type. Direct SLA assignment means that a SLA Domain was configured directly on the Rubrik object by the user. Derived SLA assignment means that the Rubrik object inherits an SLA Domain from its parent Rubrik object.
	SLAAssignment VirtualMachineDetailSLAAssignmentEnum `json:"slaAssignment"`
	// The UTC time when the SLA Domain was last updated.
	SLALastUpdateTime *time.Time `json:"slaLastUpdateTime,omitempty"`
	// Consistency level mandated for this VM or empty string for none.
	SnapshotConsistencyMandate VirtualMachineDetailSnapshotConsistencyMandateEnum `json:"snapshotConsistencyMandate"`
	SnapshotCount              *int                                               `json:"snapshotCount,omitempty"`
	Snapshots                  []VMSnapshotSummary                                `json:"snapshots,omitempty"`
	ThrottlingSettings         *VmwareAdaptiveThrottlingSettings                  `json:"throttlingSettings,omitempty"`
	ToolsInstalled             *bool                                              `json:"toolsInstalled,omitempty"`
	VcenterID                  *string                                            `json:"vcenterId,omitempty"`
	// The name of vCenter that the virtual machine belongs to.
	VcenterName          string   `json:"vcenterName"`
	VirtualDiskIds       []string `json:"virtualDiskIds,omitempty"`
	VmwareToolsInstalled bool     `json:"vmwareToolsInstalled"`
}
