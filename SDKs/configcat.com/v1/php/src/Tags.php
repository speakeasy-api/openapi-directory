<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Tags 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create Tag
     * 
     * This endpoint creates a new Tag in a specified Product 
     * identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTagResponse
     */
	public function createTag(
        \OpenAPI\OpenAPI\Models\Operations\CreateTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/products/{productId}/tags', \OpenAPI\OpenAPI\Models\Operations\CreateTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createTagModel", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/hal+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tagModelHaljson = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TagModelHaljson', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tagModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TagModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Delete Tag
     * 
     * This endpoint deletes a Tag identified by the `tagId` parameter. To remove a Tag from a Feature Flag or Setting use the [Update Flag](#operation/update-setting) endpoint.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteTagResponse
     */
	public function deleteTag(
        \OpenAPI\OpenAPI\Models\Operations\DeleteTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/tags/{tagId}', \OpenAPI\OpenAPI\Models\Operations\DeleteTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * List Settings by Tag
     * 
     * This endpoint returns the list of the Settings that 
     * has the specified Tag, identified by the `tagId` parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSettingsByTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSettingsByTagResponse
     */
	public function getSettingsByTag(
        \OpenAPI\OpenAPI\Models\Operations\GetSettingsByTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSettingsByTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/tags/{tagId}/settings', \OpenAPI\OpenAPI\Models\Operations\GetSettingsByTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSettingsByTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/hal+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->settingModelHaljsons = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SettingModelHaljson>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->settingModels = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SettingModel>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Get Tag
     * 
     * This endpoint returns the metadata of a Tag 
     * identified by the `tagId`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTagResponse
     */
	public function getTag(
        \OpenAPI\OpenAPI\Models\Operations\GetTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/tags/{tagId}', \OpenAPI\OpenAPI\Models\Operations\GetTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/hal+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tagModelHaljson = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TagModelHaljson', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tagModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TagModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * List Tags
     * 
     * This endpoint returns the list of the Tags in a 
     * specified Product, identified by the `productId` parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTagsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTagsResponse
     */
	public function getTags(
        \OpenAPI\OpenAPI\Models\Operations\GetTagsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/products/{productId}/tags', \OpenAPI\OpenAPI\Models\Operations\GetTagsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/hal+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tagModelHaljsons = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TagModelHaljson>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tagModels = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TagModel>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Update Tag
     * 
     * This endpoint updates a Tag identified by the `tagId` parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateTagResponse
     */
	public function updateTag(
        \OpenAPI\OpenAPI\Models\Operations\UpdateTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/tags/{tagId}', \OpenAPI\OpenAPI\Models\Operations\UpdateTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateTagModel", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/hal+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tagModelHaljson = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TagModelHaljson', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tagModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TagModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
}