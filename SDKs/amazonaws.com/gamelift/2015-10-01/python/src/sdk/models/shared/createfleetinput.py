"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import anywhereconfiguration as shared_anywhereconfiguration
from ..shared import certificateconfiguration as shared_certificateconfiguration
from ..shared import computetype_enum as shared_computetype_enum
from ..shared import ec2instancetype_enum as shared_ec2instancetype_enum
from ..shared import fleettype_enum as shared_fleettype_enum
from ..shared import ippermission as shared_ippermission
from ..shared import locationconfiguration as shared_locationconfiguration
from ..shared import protectionpolicy_enum as shared_protectionpolicy_enum
from ..shared import resourcecreationlimitpolicy as shared_resourcecreationlimitpolicy
from ..shared import runtimeconfiguration as shared_runtimeconfiguration
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateFleetInput:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})  
    anywhere_configuration: Optional[shared_anywhereconfiguration.AnywhereConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AnywhereConfiguration'), 'exclude': lambda f: f is None }})  
    build_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BuildId'), 'exclude': lambda f: f is None }})  
    certificate_configuration: Optional[shared_certificateconfiguration.CertificateConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CertificateConfiguration'), 'exclude': lambda f: f is None }})  
    compute_type: Optional[shared_computetype_enum.ComputeTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ComputeType'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    ec2_inbound_permissions: Optional[list[shared_ippermission.IPPermission]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EC2InboundPermissions'), 'exclude': lambda f: f is None }})  
    ec2_instance_type: Optional[shared_ec2instancetype_enum.Ec2InstanceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EC2InstanceType'), 'exclude': lambda f: f is None }})  
    fleet_type: Optional[shared_fleettype_enum.FleetTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FleetType'), 'exclude': lambda f: f is None }})  
    instance_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceRoleArn'), 'exclude': lambda f: f is None }})  
    locations: Optional[list[shared_locationconfiguration.LocationConfiguration]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Locations'), 'exclude': lambda f: f is None }})  
    log_paths: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LogPaths'), 'exclude': lambda f: f is None }})  
    metric_groups: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MetricGroups'), 'exclude': lambda f: f is None }})  
    new_game_session_protection_policy: Optional[shared_protectionpolicy_enum.ProtectionPolicyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NewGameSessionProtectionPolicy'), 'exclude': lambda f: f is None }})  
    peer_vpc_aws_account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PeerVpcAwsAccountId'), 'exclude': lambda f: f is None }})  
    peer_vpc_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PeerVpcId'), 'exclude': lambda f: f is None }})  
    resource_creation_limit_policy: Optional[shared_resourcecreationlimitpolicy.ResourceCreationLimitPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceCreationLimitPolicy'), 'exclude': lambda f: f is None }})  
    runtime_configuration: Optional[shared_runtimeconfiguration.RuntimeConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RuntimeConfiguration'), 'exclude': lambda f: f is None }})  
    script_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScriptId'), 'exclude': lambda f: f is None }})  
    server_launch_parameters: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServerLaunchParameters'), 'exclude': lambda f: f is None }})  
    server_launch_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServerLaunchPath'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    