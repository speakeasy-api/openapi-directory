/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class PortfolioOptimization {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public PortfolioOptimization(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Equal Risk Contributions Portfolio
     * Compute the asset weights of the equal risk contributions portfolio, optionally subject to:  
     * * Minimum and maximum weights constraints  
     * 
     * References
     *  * [Richard, Jean-Charles and Roncalli, Thierry, Constrained Risk Budgeting Portfolios: Theory, Algorithms, Applications &amp; Puzzles](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3331184)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioOptimizationEqualRiskContributionsResponse postPortfolioOptimizationEqualRiskContributions(org.openapis.openapi.models.operations.PostPortfolioOptimizationEqualRiskContributionsRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/optimization/equal-risk-contributions");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioOptimizationEqualRiskContributionsResponse res = new org.openapis.openapi.models.operations.PostPortfolioOptimizationEqualRiskContributionsResponse(contentType, httpRes.statusCode()) {{
            postPortfolioOptimizationEqualRiskContributions200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioOptimizationEqualRiskContributions200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioOptimizationEqualRiskContributions200ApplicationJSON.class);
                res.postPortfolioOptimizationEqualRiskContributions200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Equal Sharpe Ratio Contributions Portfolio
     * Compute the asset weights of the equal Sharpe Ratio contributions portfolio.
     * 
     * References
     *  * [Andreas Steiner, Sharpe Ratio Contribution and Attribution Analysis](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1839166")
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioOptimizationEqualSharpeRatioContributionsResponse postPortfolioOptimizationEqualSharpeRatioContributions(org.openapis.openapi.models.operations.PostPortfolioOptimizationEqualSharpeRatioContributionsRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/optimization/equal-sharpe-ratio-contributions");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioOptimizationEqualSharpeRatioContributionsResponse res = new org.openapis.openapi.models.operations.PostPortfolioOptimizationEqualSharpeRatioContributionsResponse(contentType, httpRes.statusCode()) {{
            postPortfolioOptimizationEqualSharpeRatioContributions200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioOptimizationEqualSharpeRatioContributions200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioOptimizationEqualSharpeRatioContributions200ApplicationJSON.class);
                res.postPortfolioOptimizationEqualSharpeRatioContributions200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Equal Volatility Weighted Portfolio
     * Compute the asset weights of the equal volatility-weighted portfolio.
     * 
     * References
     *  * [Tristan Froidure, Khalid Jalalzai and Yves Choueifaty, Portfolio Rho-Representativity, International Journal of Theoretical and Applied FinanceVol. 22, No. 07, 1950034 (2019)](https://www.worldscientific.com/doi/10.1142/S0219024919500341)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioOptimizationEqualVolatilityWeightedResponse postPortfolioOptimizationEqualVolatilityWeighted(org.openapis.openapi.models.operations.PostPortfolioOptimizationEqualVolatilityWeightedRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/optimization/equal-volatility-weighted");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioOptimizationEqualVolatilityWeightedResponse res = new org.openapis.openapi.models.operations.PostPortfolioOptimizationEqualVolatilityWeightedResponse(contentType, httpRes.statusCode()) {{
            postPortfolioOptimizationEqualVolatilityWeighted200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioOptimizationEqualVolatilityWeighted200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioOptimizationEqualVolatilityWeighted200ApplicationJSON.class);
                res.postPortfolioOptimizationEqualVolatilityWeighted200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Equal Weighted Portfolio
     * Compute the asset weights of the equal-weighted portfolio.
     * 
     * References
     *  * [Victor DeMiguel and al., Optimal Versus Naive Diversification: How Inefficient is the 1/N Portfolio Strategy?](https://academic.oup.com/rfs/article-abstract/22/5/1915/1592901?redirectedFrom=fulltext)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioOptimizationEqualWeightedResponse postPortfolioOptimizationEqualWeighted(org.openapis.openapi.models.operations.PostPortfolioOptimizationEqualWeightedRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/optimization/equal-weighted");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioOptimizationEqualWeightedResponse res = new org.openapis.openapi.models.operations.PostPortfolioOptimizationEqualWeightedResponse(contentType, httpRes.statusCode()) {{
            postPortfolioOptimizationEqualWeighted200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioOptimizationEqualWeighted200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioOptimizationEqualWeighted200ApplicationJSON.class);
                res.postPortfolioOptimizationEqualWeighted200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Hierarchical Risk Parity Portfolio
     * Compute the asset weights of the hierarchical risk parity portfolio, optionally subject to:  
     * * Minimum and maximum weights constraints
     * * Minimum and maximum portfolio exposure constraints
     * 
     * References
     *  * [Lopez de Prado, M. (2016). Building diversified portfolios that outperform out-of-sample. Journal of Portfolio Management, 42(4), 59\u201369](https://jpm.pm-research.com/content/42/4/59)
     *  * [Johann Pfitzinger &amp; Nico Katzke, 2019. A constrained hierarchical risk parity algorithm with cluster-based capital allocation. Working Papers 14/2019, Stellenbosch University, Department of Economics](https://ideas.repec.org/p/sza/wpaper/wpapers328.html)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioOptimizationHierarchicalRiskParityResponse postPortfolioOptimizationHierarchicalRiskParity(org.openapis.openapi.models.operations.PostPortfolioOptimizationHierarchicalRiskParityRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/optimization/hierarchical-risk-parity");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioOptimizationHierarchicalRiskParityResponse res = new org.openapis.openapi.models.operations.PostPortfolioOptimizationHierarchicalRiskParityResponse(contentType, httpRes.statusCode()) {{
            postPortfolioOptimizationHierarchicalRiskParity200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioOptimizationHierarchicalRiskParity200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioOptimizationHierarchicalRiskParity200ApplicationJSON.class);
                res.postPortfolioOptimizationHierarchicalRiskParity200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Hierarchical Clustering-Based Risk Parity Portfolio
     * Compute the asset weights of the hierarchical clustering-based risk parity portfolio, optionally subject to:  
     * * Minimum and maximum weights constraints
     * * Minimum and maximum portfolio exposure constraints
     * 
     * References
     *  * [Machine Learning for Asset Management: New Developments and Financial Applications, Emmanuel Jurczenko, Chapter 9, Harald Lohre,Carsten Rother,Kilian Axel Sch\u00e4fer, Hierarchical Risk Parity: Accounting for Tail Dependencies in Multi-asset Multi-factor Allocations](https://onlinelibrary.wiley.com/doi/10.1002/9781119751182.ch9)
     *  * [Thomas Raffinot, Hierarchical Clustering-Based Asset Allocation, The Journal of Portfolio Management Multi-Asset Special Issue 2018, 44 (2) 89-99](https://jpm.pm-research.com/content/44/2/89.abstract)
     *  * [Raffinot, Thomas, The Hierarchical Equal Risk Contribution Portfolio](https://ssrn.com/abstract=3237540)
     *  * [Johann Pfitzinger &amp; Nico Katzke, 2019. A constrained hierarchical risk parity algorithm with cluster-based capital allocation. Working Papers 14/2019, Stellenbosch University, Department of Economics](https://ideas.repec.org/p/sza/wpaper/wpapers328.html)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedResponse postPortfolioOptimizationHierarchicalRiskParityClusteringBased(org.openapis.openapi.models.operations.PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/optimization/hierarchical-risk-parity/clustering-based");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedResponse res = new org.openapis.openapi.models.operations.PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedResponse(contentType, httpRes.statusCode()) {{
            postPortfolioOptimizationHierarchicalRiskParityClusteringBased200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioOptimizationHierarchicalRiskParityClusteringBased200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioOptimizationHierarchicalRiskParityClusteringBased200ApplicationJSON.class);
                res.postPortfolioOptimizationHierarchicalRiskParityClusteringBased200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Inverse Variance Weighted Portfolio
     * Compute the asset weights of the inverse variance-weighted portfolio.
     * 
     * References
     *  * [Raul Leote de Carvalho and al., Demystifying Equity Risk-Based Strategies: A Simple Alpha Plus Beta Description](https://doi.org/10.3905/jpm.2012.38.3.056)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioOptimizationInverseVarianceWeightedResponse postPortfolioOptimizationInverseVarianceWeighted(org.openapis.openapi.models.operations.PostPortfolioOptimizationInverseVarianceWeightedRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/optimization/inverse-variance-weighted");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioOptimizationInverseVarianceWeightedResponse res = new org.openapis.openapi.models.operations.PostPortfolioOptimizationInverseVarianceWeightedResponse(contentType, httpRes.statusCode()) {{
            postPortfolioOptimizationInverseVarianceWeighted200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioOptimizationInverseVarianceWeighted200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioOptimizationInverseVarianceWeighted200ApplicationJSON.class);
                res.postPortfolioOptimizationInverseVarianceWeighted200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Inverse Volatility Weighted Portfolio
     * Compute the asset weights of the inverse volatility-weighted portfolio.
     * 
     * References
     *  * [Raul Leote de Carvalho and al., Demystifying Equity Risk-Based Strategies: A Simple Alpha Plus Beta Description](https://doi.org/10.3905/jpm.2012.38.3.056)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioOptimizationInverseVolatilityWeightedResponse postPortfolioOptimizationInverseVolatilityWeighted(org.openapis.openapi.models.operations.PostPortfolioOptimizationInverseVolatilityWeightedRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/optimization/inverse-volatility-weighted");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioOptimizationInverseVolatilityWeightedResponse res = new org.openapis.openapi.models.operations.PostPortfolioOptimizationInverseVolatilityWeightedResponse(contentType, httpRes.statusCode()) {{
            postPortfolioOptimizationInverseVolatilityWeighted200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioOptimizationInverseVolatilityWeighted200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioOptimizationInverseVolatilityWeighted200ApplicationJSON.class);
                res.postPortfolioOptimizationInverseVolatilityWeighted200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Market Capitalization Weighted Portfolio
     * Compute the asset weights of the market capitalization-weighted portfolio.
     * 
     * References
     *  * [Wikipedia, Capitalization-weighted Index](https://en.wikipedia.org/wiki/Capitalization-weighted_index)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioOptimizationMarketCapitalizationWeightedResponse postPortfolioOptimizationMarketCapitalizationWeighted(org.openapis.openapi.models.operations.PostPortfolioOptimizationMarketCapitalizationWeightedRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/optimization/market-capitalization-weighted");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioOptimizationMarketCapitalizationWeightedResponse res = new org.openapis.openapi.models.operations.PostPortfolioOptimizationMarketCapitalizationWeightedResponse(contentType, httpRes.statusCode()) {{
            postPortfolioOptimizationMarketCapitalizationWeighted200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioOptimizationMarketCapitalizationWeighted200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioOptimizationMarketCapitalizationWeighted200ApplicationJSON.class);
                res.postPortfolioOptimizationMarketCapitalizationWeighted200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Maximum Decorrelation Portfolio
     * Compute the asset weights of the maximum decorrelation portfolio, optionally subject to:  
     * * Minimum and maximum weights constraints
     * * Maximum group weights constraints
     * * Minimum and maximum portfolio exposure constraints
     * 
     * References
     *  * [F. Goltz, S. Sivasubramanian, Scientific Beta Maximum Decorrelation Indices](http://www.scientificbeta.com/download/file/scientific-beta-max-decorrelation-indices)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioOptimizationMaximumDecorrelationResponse postPortfolioOptimizationMaximumDecorrelation(org.openapis.openapi.models.operations.PostPortfolioOptimizationMaximumDecorrelationRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/optimization/maximum-decorrelation");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioOptimizationMaximumDecorrelationResponse res = new org.openapis.openapi.models.operations.PostPortfolioOptimizationMaximumDecorrelationResponse(contentType, httpRes.statusCode()) {{
            postPortfolioOptimizationMaximumDecorrelation200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioOptimizationMaximumDecorrelation200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioOptimizationMaximumDecorrelation200ApplicationJSON.class);
                res.postPortfolioOptimizationMaximumDecorrelation200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Maximum Ulcer Performance Index Portfolio
     * Compute the asset weights of the maximum Ulcer Performance Index portfolio, optionally subject to:  
     * * Minimum and maximum weights constraints
     * * Maximum group weights constraints
     * * Minimum and maximum portfolio exposure constraints
     * 
     * Notes:  
     * * This endpoint will return an error if the maximum Ulcer Performance Index portfolio has a negative Ulcer Performance Index
     * 
     * References
     *  * [Peter G. Martin, Ulcer Index, An Alternative Approach to the Measurement of Investment Risk &amp; Risk-Adjusted Performance](http://www.tangotools.com/ui/ui.htm)
     *  * [A. Chekhlov, S. Uryasev, M. Zabarankin, Portfolio Optimization with Drawdown Constraints, Supply Chain and Finance, p 209-228](https://doi.org/10.1142/9789812562586_0013)
     *  * [A. Chekhlov, S. Uryasev, M. Zabarankin, Drawdown Measure in Portfolio Optimization, International Journal of Theoretical and Applied FinanceVol. 08, No. 01, pp. 13-58 (2005)](https://www.worldscientific.com/doi/10.1142/S0219024905002767)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioOptimizationMaximumUlcerPerformanceIndexResponse postPortfolioOptimizationMaximumUlcerPerformanceIndex(org.openapis.openapi.models.operations.PostPortfolioOptimizationMaximumUlcerPerformanceIndexRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/optimization/maximum-ulcer-performance-index");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioOptimizationMaximumUlcerPerformanceIndexResponse res = new org.openapis.openapi.models.operations.PostPortfolioOptimizationMaximumUlcerPerformanceIndexResponse(contentType, httpRes.statusCode()) {{
            postPortfolioOptimizationMaximumUlcerPerformanceIndex200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioOptimizationMaximumUlcerPerformanceIndex200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioOptimizationMaximumUlcerPerformanceIndex200ApplicationJSON.class);
                res.postPortfolioOptimizationMaximumUlcerPerformanceIndex200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Minimum Correlation Portfolio
     * Compute the asset weights of the (heuristic) minimum correlation portfolio, which is a portfolio built using the Minimum Correlation Algorithm discovered by [David Varadi](https://cssanalytics.wordpress.com/).
     * 
     * References
     *  * [CSSA, Minimum Correlation Algorithm Paper Release](https://cssanalytics.wordpress.com/2012/09/21/minimum-correlation-algorithm-paper-release/)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioOptimizationMinimumCorrelationResponse postPortfolioOptimizationMinimumCorrelation(org.openapis.openapi.models.operations.PostPortfolioOptimizationMinimumCorrelationRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/optimization/minimum-correlation");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioOptimizationMinimumCorrelationResponse res = new org.openapis.openapi.models.operations.PostPortfolioOptimizationMinimumCorrelationResponse(contentType, httpRes.statusCode()) {{
            postPortfolioOptimizationMinimumCorrelation200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioOptimizationMinimumCorrelation200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioOptimizationMinimumCorrelation200ApplicationJSON.class);
                res.postPortfolioOptimizationMinimumCorrelation200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Minimum Ulcer Index Portfolio
     * Compute the asset weights of the minimum Ulcer Index portfolio, optionally subject to:  
     * * Minimum and maximum weights constraints
     * * Maximum group weights constraints
     * * Minimum and maximum portfolio exposure constraints
     * 
     * References
     *  * [Peter G. Martin, Ulcer Index, An Alternative Approach to the Measurement of Investment Risk &amp; Risk-Adjusted Performance](http://www.tangotools.com/ui/ui.htm)
     *  * [A. Chekhlov, S. Uryasev, M. Zabarankin, Portfolio Optimization with Drawdown Constraints, Supply Chain and Finance, p 209-228](https://doi.org/10.1142/9789812562586_0013)
     *  * [A. Chekhlov, S. Uryasev, M. Zabarankin, Drawdown Measure in Portfolio Optimization, International Journal of Theoretical and Applied FinanceVol. 08, No. 01, pp. 13-58 (2005)](https://www.worldscientific.com/doi/10.1142/S0219024905002767)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioOptimizationMinimumUlcerIndexResponse postPortfolioOptimizationMinimumUlcerIndex(org.openapis.openapi.models.operations.PostPortfolioOptimizationMinimumUlcerIndexRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/optimization/minimum-ulcer-index");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioOptimizationMinimumUlcerIndexResponse res = new org.openapis.openapi.models.operations.PostPortfolioOptimizationMinimumUlcerIndexResponse(contentType, httpRes.statusCode()) {{
            postPortfolioOptimizationMinimumUlcerIndex200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioOptimizationMinimumUlcerIndex200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioOptimizationMinimumUlcerIndex200ApplicationJSON.class);
                res.postPortfolioOptimizationMinimumUlcerIndex200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Most Diversified Portfolio
     * Compute the asset weights of the most diversified portfolio, optionally subject to:  
     * * Minimum and maximum weights constraints
     * * Maximum group weights constraints
     * * Minimum and maximum portfolio exposure constraints
     * 
     * References
     *  * [Yves Choueifaty and Yves Coignard, Toward Maximum Diversification, The Journal of Portfolio Management Fall 2008, 35 (1) 40-51](https://doi.org/10.3905/JPM.2008.35.1.40)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioOptimizationMostDiversifiedResponse postPortfolioOptimizationMostDiversified(org.openapis.openapi.models.operations.PostPortfolioOptimizationMostDiversifiedRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/optimization/most-diversified");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioOptimizationMostDiversifiedResponse res = new org.openapis.openapi.models.operations.PostPortfolioOptimizationMostDiversifiedResponse(contentType, httpRes.statusCode()) {{
            postPortfolioOptimizationMostDiversified200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioOptimizationMostDiversified200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioOptimizationMostDiversified200ApplicationJSON.class);
                res.postPortfolioOptimizationMostDiversified200ApplicationJSONObject = out;
            }
        }

        return res;
    }
}