/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AccessMode } from "./accessmode";
import { ShareMessage } from "./sharemessage";
import { ShareRecipient } from "./sharerecipient";
import { Expose, Transform, Type } from "class-transformer";

/**
 * True if the share has expired.
 */
export enum ShareAttributesExpiredEnum {
  True = "true",
  False = "false",
}

/**
 * Flag to show if separate folders should be created for each file upload to receive folder.
 */
export enum ShareAttributesFileDropCreateFoldersEnum {
  True = "true",
  False = "false",
}

/**
 * True if share has notification.
 */
export enum ShareAttributesHasNotificationEnum {
  True = "true",
  False = "false",
}

/**
 * True if the share has password.
 */
export enum ShareAttributesHasPasswordEnum {
  True = "true",
  False = "false",
}

/**
 * True if share inherited from parent folder.
 */
export enum ShareAttributesInheritedEnum {
  True = "true",
  False = "false",
}

/**
 * True if the share has a public url.
 */
export enum ShareAttributesPublicEnum {
  True = "true",
  False = "false",
}

/**
 * Share activity status. Can be active (1) or deactivated (0).
 */
export enum ShareAttributesStatusEnum {
  Zero = "0",
  One = "1",
}

/**
 * Checks recipient received status and returns whether it's been received (`complete`,) partial received (`incomplete`,) or not received yet (`pending`.)
 */
export enum ShareAttributesTrackingStatusEnum {
  Complete = "complete",
  Incomplete = "incomplete",
  Pending = "pending",
}

/**
 * Type of share.
 */
export enum ShareAttributesTypeEnum {
  SharedFolder = "shared_folder",
  Send = "send",
  Receive = "receive",
}

/**
 * Attributes of the share including the name, path and share recipients.
 */
export class ShareAttributes extends SpeakeasyBase {
  /**
   * Description of the share access rights.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accessDescription" })
  accessDescription?: string;

  /**
   * An object defining what a not-logged-in visitor can do with the share contents
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accessMode" })
  @Type(() => AccessMode)
  accessMode?: AccessMode;

  /**
   * Timestamp of share creation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  created?: Date;

  /**
   * True if share can be embedded.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "embed" })
  embed?: boolean;

  /**
   * Expiration date of the share.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expiration" })
  expiration?: string;

  /**
   * True if the share has expired.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expired" })
  expired?: ShareAttributesExpiredEnum;

  /**
   * Flag to show if separate folders should be created for each file upload to receive folder.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fileDropCreateFolders" })
  fileDropCreateFolders?: ShareAttributesFileDropCreateFoldersEnum;

  /**
   * ID of the form.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "formId" })
  formId?: number;

  /**
   * True if share has notification.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hasNotification" })
  hasNotification?: ShareAttributesHasNotificationEnum;

  /**
   * True if the share has password.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hasPassword" })
  hasPassword?: ShareAttributesHasPasswordEnum;

  /**
   * Share hash.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hash" })
  hash?: string;

  /**
   * True if share inherited from parent folder.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inherited" })
  inherited?: ShareAttributesInheritedEnum;

  /**
   * Array of invitation messages.
   */
  @SpeakeasyMetadata({ elemType: ShareMessage })
  @Expose({ name: "messages" })
  @Type(() => ShareMessage)
  messages?: ShareMessage[];

  /**
   * Timestamp of share modification. Can be `null` if it wasn't modified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modified" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  modified?: Date;

  /**
   * Share name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Share owner's hash.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ownerHash" })
  ownerHash?: string;

  /**
   * Path to the shared resource in your account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paths" })
  paths?: string[];

  /**
   * True if the share has a public url.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "public" })
  public?: ShareAttributesPublicEnum;

  /**
   * Array of recipients.
   */
  @SpeakeasyMetadata({ elemType: ShareRecipient })
  @Expose({ name: "recipients" })
  @Type(() => ShareRecipient)
  recipients?: ShareRecipient[];

  /**
   * True if share requires email to access.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requireEmail" })
  requireEmail?: boolean;

  /**
   * Invitations resent date. Can be `null` if resent never happened.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resent" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  resent?: Date;

  /**
   * Share activity status. Can be active (1) or deactivated (0).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: ShareAttributesStatusEnum;

  /**
   * Checks recipient received status and returns whether it's been received (`complete`,) partial received (`incomplete`,) or not received yet (`pending`.)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "trackingStatus" })
  trackingStatus?: ShareAttributesTrackingStatusEnum;

  /**
   * Type of share.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: ShareAttributesTypeEnum;
}
