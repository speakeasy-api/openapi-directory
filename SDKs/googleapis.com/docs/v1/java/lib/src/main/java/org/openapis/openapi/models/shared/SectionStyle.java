/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SectionStyle - The styling that applies to a section.
 */
public class SectionStyle {
    /**
     * The section's columns properties. If empty, the section contains one column with the default properties in the Docs editor. A section can be updated to have no more than 3 columns. When updating this property, setting a concrete value is required. Unsetting this property will result in a 400 bad request error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("columnProperties")
    public SectionColumnProperties[] columnProperties;
    public SectionStyle withColumnProperties(SectionColumnProperties[] columnProperties) {
        this.columnProperties = columnProperties;
        return this;
    }
    
    /**
     * The style of column separators. This style can be set even when there's one column in the section. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("columnSeparatorStyle")
    public SectionStyleColumnSeparatorStyleEnum columnSeparatorStyle;
    public SectionStyle withColumnSeparatorStyle(SectionStyleColumnSeparatorStyleEnum columnSeparatorStyle) {
        this.columnSeparatorStyle = columnSeparatorStyle;
        return this;
    }
    
    /**
     * The content direction of this section. If unset, the value defaults to LEFT_TO_RIGHT. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contentDirection")
    public SectionStyleContentDirectionEnum contentDirection;
    public SectionStyle withContentDirection(SectionStyleContentDirectionEnum contentDirection) {
        this.contentDirection = contentDirection;
        return this;
    }
    
    /**
     * The ID of the default footer. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's default_footer_id. This property is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultFooterId")
    public String defaultFooterId;
    public SectionStyle withDefaultFooterId(String defaultFooterId) {
        this.defaultFooterId = defaultFooterId;
        return this;
    }
    
    /**
     * The ID of the default header. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's default_header_id. This property is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultHeaderId")
    public String defaultHeaderId;
    public SectionStyle withDefaultHeaderId(String defaultHeaderId) {
        this.defaultHeaderId = defaultHeaderId;
        return this;
    }
    
    /**
     * The ID of the footer used only for even pages. If the value of DocumentStyle's use_even_page_header_footer is true, this value is used for the footers on even pages in the section. If it is false, the footers on even pages use the default_footer_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's even_page_footer_id. This property is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("evenPageFooterId")
    public String evenPageFooterId;
    public SectionStyle withEvenPageFooterId(String evenPageFooterId) {
        this.evenPageFooterId = evenPageFooterId;
        return this;
    }
    
    /**
     * The ID of the header used only for even pages. If the value of DocumentStyle's use_even_page_header_footer is true, this value is used for the headers on even pages in the section. If it is false, the headers on even pages use the default_header_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's even_page_header_id. This property is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("evenPageHeaderId")
    public String evenPageHeaderId;
    public SectionStyle withEvenPageHeaderId(String evenPageHeaderId) {
        this.evenPageHeaderId = evenPageHeaderId;
        return this;
    }
    
    /**
     * The ID of the footer used only for the first page of the section. If use_first_page_header_footer is true, this value is used for the footer on the first page of the section. If it's false, the footer on the first page of the section uses the default_footer_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's first_page_footer_id. This property is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firstPageFooterId")
    public String firstPageFooterId;
    public SectionStyle withFirstPageFooterId(String firstPageFooterId) {
        this.firstPageFooterId = firstPageFooterId;
        return this;
    }
    
    /**
     * The ID of the header used only for the first page of the section. If use_first_page_header_footer is true, this value is used for the header on the first page of the section. If it's false, the header on the first page of the section uses the default_header_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's first_page_header_id. This property is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firstPageHeaderId")
    public String firstPageHeaderId;
    public SectionStyle withFirstPageHeaderId(String firstPageHeaderId) {
        this.firstPageHeaderId = firstPageHeaderId;
        return this;
    }
    
    /**
     * A magnitude in a single direction in the specified units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marginBottom")
    public Dimension marginBottom;
    public SectionStyle withMarginBottom(Dimension marginBottom) {
        this.marginBottom = marginBottom;
        return this;
    }
    
    /**
     * A magnitude in a single direction in the specified units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marginFooter")
    public Dimension marginFooter;
    public SectionStyle withMarginFooter(Dimension marginFooter) {
        this.marginFooter = marginFooter;
        return this;
    }
    
    /**
     * A magnitude in a single direction in the specified units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marginHeader")
    public Dimension marginHeader;
    public SectionStyle withMarginHeader(Dimension marginHeader) {
        this.marginHeader = marginHeader;
        return this;
    }
    
    /**
     * A magnitude in a single direction in the specified units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marginLeft")
    public Dimension marginLeft;
    public SectionStyle withMarginLeft(Dimension marginLeft) {
        this.marginLeft = marginLeft;
        return this;
    }
    
    /**
     * A magnitude in a single direction in the specified units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marginRight")
    public Dimension marginRight;
    public SectionStyle withMarginRight(Dimension marginRight) {
        this.marginRight = marginRight;
        return this;
    }
    
    /**
     * A magnitude in a single direction in the specified units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marginTop")
    public Dimension marginTop;
    public SectionStyle withMarginTop(Dimension marginTop) {
        this.marginTop = marginTop;
        return this;
    }
    
    /**
     * The page number from which to start counting the number of pages for this section. If unset, page numbering continues from the previous section. If the value is unset in the first SectionBreak, refer to DocumentStyle's page_number_start. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pageNumberStart")
    public Integer pageNumberStart;
    public SectionStyle withPageNumberStart(Integer pageNumberStart) {
        this.pageNumberStart = pageNumberStart;
        return this;
    }
    
    /**
     * Output only. The type of section.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sectionType")
    public SectionStyleSectionTypeEnum sectionType;
    public SectionStyle withSectionType(SectionStyleSectionTypeEnum sectionType) {
        this.sectionType = sectionType;
        return this;
    }
    
    /**
     * Indicates whether to use the first page header / footer IDs for the first page of the section. If unset, it inherits from DocumentStyle's use_first_page_header_footer for the first section. If the value is unset for subsequent sectors, it should be interpreted as false. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("useFirstPageHeaderFooter")
    public Boolean useFirstPageHeaderFooter;
    public SectionStyle withUseFirstPageHeaderFooter(Boolean useFirstPageHeaderFooter) {
        this.useFirstPageHeaderFooter = useFirstPageHeaderFooter;
        return this;
    }
    
}
