// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TestCaseExpectationEnum - Test expectation.
type TestCaseExpectationEnum string

const (
	TestCaseExpectationEnumExpectationUnspecified TestCaseExpectationEnum = "EXPECTATION_UNSPECIFIED"
	TestCaseExpectationEnumAllow                  TestCaseExpectationEnum = "ALLOW"
	TestCaseExpectationEnumDeny                   TestCaseExpectationEnum = "DENY"
)

func (e *TestCaseExpectationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXPECTATION_UNSPECIFIED":
		fallthrough
	case "ALLOW":
		fallthrough
	case "DENY":
		*e = TestCaseExpectationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TestCaseExpectationEnum: %s", s)
	}
}

// TestCaseExpressionReportLevelEnum - Specifies what should be included in the response.
type TestCaseExpressionReportLevelEnum string

const (
	TestCaseExpressionReportLevelEnumLevelUnspecified TestCaseExpressionReportLevelEnum = "LEVEL_UNSPECIFIED"
	TestCaseExpressionReportLevelEnumNone             TestCaseExpressionReportLevelEnum = "NONE"
	TestCaseExpressionReportLevelEnumFull             TestCaseExpressionReportLevelEnum = "FULL"
	TestCaseExpressionReportLevelEnumVisited          TestCaseExpressionReportLevelEnum = "VISITED"
)

func (e *TestCaseExpressionReportLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "LEVEL_UNSPECIFIED":
		fallthrough
	case "NONE":
		fallthrough
	case "FULL":
		fallthrough
	case "VISITED":
		*e = TestCaseExpressionReportLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TestCaseExpressionReportLevelEnum: %s", s)
	}
}

// TestCasePathEncodingEnum - Specifies whether paths (such as request.path) are encoded and how.
type TestCasePathEncodingEnum string

const (
	TestCasePathEncodingEnumEncodingUnspecified TestCasePathEncodingEnum = "ENCODING_UNSPECIFIED"
	TestCasePathEncodingEnumURLEncoded          TestCasePathEncodingEnum = "URL_ENCODED"
	TestCasePathEncodingEnumPlain               TestCasePathEncodingEnum = "PLAIN"
)

func (e *TestCasePathEncodingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ENCODING_UNSPECIFIED":
		fallthrough
	case "URL_ENCODED":
		fallthrough
	case "PLAIN":
		*e = TestCasePathEncodingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TestCasePathEncodingEnum: %s", s)
	}
}

// TestCase - `TestCase` messages provide the request context and an expectation as to whether the given context will be allowed or denied. Test cases may specify the `request`, `resource`, and `function_mocks` to mock a function call to a service-provided function. The `request` object represents context present at request-time. The `resource` is the value of the target resource as it appears in persistent storage before the request is executed.
type TestCase struct {
	// Test expectation.
	Expectation *TestCaseExpectationEnum `json:"expectation,omitempty"`
	// Specifies what should be included in the response.
	ExpressionReportLevel *TestCaseExpressionReportLevelEnum `json:"expressionReportLevel,omitempty"`
	// Optional function mocks for service-defined functions. If not set, any service defined function is expected to return an error, which may or may not influence the test outcome.
	FunctionMocks []FunctionMock `json:"functionMocks,omitempty"`
	// Specifies whether paths (such as request.path) are encoded and how.
	PathEncoding *TestCasePathEncodingEnum `json:"pathEncoding,omitempty"`
	// Request context. The exact format of the request context is service-dependent. See the appropriate service documentation for information about the supported fields and types on the request. Minimally, all services support the following fields and types: Request field | Type ---------------|----------------- auth.uid | `string` auth.token | `map` headers | `map` method | `string` params | `map` path | `string` time | `google.protobuf.Timestamp` If the request value is not well-formed for the service, the request will be rejected as an invalid argument.
	Request interface{} `json:"request,omitempty"`
	// Optional resource value as it appears in persistent storage before the request is fulfilled. The resource type depends on the `request.path` value.
	Resource interface{} `json:"resource,omitempty"`
}
