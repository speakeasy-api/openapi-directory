"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CategoryDTOSupportedClassesEnum(str, Enum):
    r"""set of types for which this category can be selected"""
    PROJECT = 'PROJECT'
    QUOTE = 'QUOTE'
    QUOTE_TASK = 'QUOTE_TASK'
    TASK = 'TASK'
    PROVIDER = 'PROVIDER'
    CUSTOMER = 'CUSTOMER'
    CUSTOMER_PERSON = 'CUSTOMER_PERSON'
    PROVIDER_PERSON = 'PROVIDER_PERSON'
    FINANCIAL_REPORT = 'FINANCIAL_REPORT'
    REMINDER = 'REMINDER'
    PROVIDER_INVOICE = 'PROVIDER_INVOICE'
    CUSTOMER_INVOICE = 'CUSTOMER_INVOICE'
    PROJECT_GROUP = 'PROJECT_GROUP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CategoryDTO:
    r"""group of things (ie. customers or projects) similar in some way (ie. VIP customers)"""
    
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})
    r"""should this value be available on the XTRF selection lists"""  
    default: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default'), 'exclude': lambda f: f is None }})
    r"""should this value be set by default in XTRF selection lists"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""internal identifier"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""localised name (formatted in the current user's locale)"""  
    preferred: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preferred'), 'exclude': lambda f: f is None }})
    r"""should this value be available on the top of XTRF selection lists, in the Preferred section"""  
    supported_classes: Optional[list[CategoryDTOSupportedClassesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportedClasses'), 'exclude': lambda f: f is None }})
    r"""set of types for which this category can be selected"""  
    