"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class CheckoutCustomFields:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_checkout_custom_fields_id_json(self, request: operations.DeleteCheckoutCustomFieldsIDJSONRequest) -> operations.DeleteCheckoutCustomFieldsIDJSONResponse:
        r"""Delete an existing CheckoutCustomField."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCheckoutCustomFieldsIDJSONRequest, base_url, '/checkout_custom_fields/{id}.json', request)
        
        query_params = utils.get_query_params(operations.DeleteCheckoutCustomFieldsIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCheckoutCustomFieldsIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.delete_checkout_custom_fields_id_json_200_application_json_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_checkout_custom_fields_json(self, request: operations.GetCheckoutCustomFieldsJSONRequest) -> operations.GetCheckoutCustomFieldsJSONResponse:
        r"""Retrieve all Checkout Custom Fields."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/checkout_custom_fields.json'
        
        query_params = utils.get_query_params(operations.GetCheckoutCustomFieldsJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCheckoutCustomFieldsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CheckoutCustomField]])
                res.checkout_custom_fields = out

        return res

    def get_checkout_custom_fields_id_json(self, request: operations.GetCheckoutCustomFieldsIDJSONRequest) -> operations.GetCheckoutCustomFieldsIDJSONResponse:
        r"""Retrieve a single CheckoutCustomField."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCheckoutCustomFieldsIDJSONRequest, base_url, '/checkout_custom_fields/{id}.json', request)
        
        query_params = utils.get_query_params(operations.GetCheckoutCustomFieldsIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCheckoutCustomFieldsIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CheckoutCustomField])
                res.checkout_custom_field = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def post_checkout_custom_fields_json(self, request: operations.PostCheckoutCustomFieldsJSONRequest) -> operations.PostCheckoutCustomFieldsJSONResponse:
        r"""Create a new CheckoutCustomField.
        Type values can be: input, selection, checkbox, date or text. Area values can be: contact, billing_shipping or other.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/checkout_custom_fields.json'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "checkout_custom_field_edit", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PostCheckoutCustomFieldsJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostCheckoutCustomFieldsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CheckoutCustomField])
                res.checkout_custom_field = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def put_checkout_custom_fields_id_json(self, request: operations.PutCheckoutCustomFieldsIDJSONRequest) -> operations.PutCheckoutCustomFieldsIDJSONResponse:
        r"""Update a CheckoutCustomField."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutCheckoutCustomFieldsIDJSONRequest, base_url, '/checkout_custom_fields/{id}.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "checkout_custom_field_edit", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PutCheckoutCustomFieldsIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutCheckoutCustomFieldsIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CheckoutCustomField])
                res.checkout_custom_field = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    