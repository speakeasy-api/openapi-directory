// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type StopPointGetByGeoPointQueryParams struct {
	// an optional list of comma separated property categories to return in the StopPoint's property bag. If null or empty, all categories of property are returned. Pass the keyword "none" to return no properties (a valid list of categories can be obtained from the /StopPoint/Meta/categories endpoint)
	Categories  []string `queryParam:"style=form,explode=true,name=categories"`
	LocationLat float64  `queryParam:"style=form,explode=true,name=location.lat"`
	LocationLon float64  `queryParam:"style=form,explode=true,name=location.lon"`
	// the list of modes to search (comma separated mode names e.g. tube,dlr)
	Modes []string `queryParam:"style=form,explode=true,name=modes"`
	// the radius of the bounding circle in metres (default : 200)
	Radius *int `queryParam:"style=form,explode=true,name=radius"`
	// true to return the lines that each stop point serves as a nested resource
	ReturnLines *bool `queryParam:"style=form,explode=true,name=returnLines"`
	// a list of stopTypes that should be returned (a list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint)
	StopTypes []string `queryParam:"style=form,explode=true,name=stopTypes"`
	// Re-arrange the output into a parent/child hierarchy
	UseStopPointHierarchy *bool `queryParam:"style=form,explode=true,name=useStopPointHierarchy"`
}

type StopPointGetByGeoPointRequest struct {
	QueryParams StopPointGetByGeoPointQueryParams
}

type StopPointGetByGeoPointResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	TflAPIPresentationEntitiesStopPointsResponse *shared.TflAPIPresentationEntitiesStopPointsResponse
}
