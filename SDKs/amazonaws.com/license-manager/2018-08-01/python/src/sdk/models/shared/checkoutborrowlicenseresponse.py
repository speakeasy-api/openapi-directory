"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import entitlementdata as shared_entitlementdata
from ..shared import metadata as shared_metadata
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CheckoutBorrowLicenseResponse:
    r"""Success"""
    
    checkout_metadata: Optional[list[shared_metadata.Metadata]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CheckoutMetadata'), 'exclude': lambda f: f is None }})  
    entitlements_allowed: Optional[list[shared_entitlementdata.EntitlementData]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EntitlementsAllowed'), 'exclude': lambda f: f is None }})  
    expiration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Expiration'), 'exclude': lambda f: f is None }})  
    issued_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IssuedAt'), 'exclude': lambda f: f is None }})  
    license_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LicenseArn'), 'exclude': lambda f: f is None }})  
    license_consumption_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LicenseConsumptionToken'), 'exclude': lambda f: f is None }})  
    node_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NodeId'), 'exclude': lambda f: f is None }})  
    signed_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SignedToken'), 'exclude': lambda f: f is None }})  
    