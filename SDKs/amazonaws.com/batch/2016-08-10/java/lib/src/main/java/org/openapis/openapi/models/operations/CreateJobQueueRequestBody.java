/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CreateJobQueueRequestBody {
    /**
     * &lt;p&gt;The set of compute environments mapped to a job queue and their order relative to each other. The job scheduler uses this parameter to determine which compute environment runs a specific job. Compute environments must be in the &lt;code&gt;VALID&lt;/code&gt; state before you can associate them with a job queue. You can associate up to three compute environments with a job queue. All of the compute environments must be either EC2 (&lt;code&gt;EC2&lt;/code&gt; or &lt;code&gt;SPOT&lt;/code&gt;) or Fargate (&lt;code&gt;FARGATE&lt;/code&gt; or &lt;code&gt;FARGATE_SPOT&lt;/code&gt;); EC2 and Fargate compute environments can't be mixed.&lt;/p&gt; &lt;note&gt; &lt;p&gt;All compute environments that are associated with a job queue must share the same architecture. Batch doesn't support mixing compute environment architecture types in a single job queue.&lt;/p&gt; &lt;/note&gt;
     */
    @JsonProperty("computeEnvironmentOrder")
    public org.openapis.openapi.models.shared.ComputeEnvironmentOrder[] computeEnvironmentOrder;
    public CreateJobQueueRequestBody withComputeEnvironmentOrder(org.openapis.openapi.models.shared.ComputeEnvironmentOrder[] computeEnvironmentOrder) {
        this.computeEnvironmentOrder = computeEnvironmentOrder;
        return this;
    }
    
    /**
     * The name of the job queue. It can be up to 128 letters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
     */
    @JsonProperty("jobQueueName")
    public String jobQueueName;
    public CreateJobQueueRequestBody withJobQueueName(String jobQueueName) {
        this.jobQueueName = jobQueueName;
        return this;
    }
    
    /**
     * The priority of the job queue. Job queues with a higher priority (or a higher integer value for the &lt;code&gt;priority&lt;/code&gt; parameter) are evaluated first when associated with the same compute environment. Priority is determined in descending order. For example, a job queue with a priority value of &lt;code&gt;10&lt;/code&gt; is given scheduling preference over a job queue with a priority value of &lt;code&gt;1&lt;/code&gt;. All of the compute environments must be either EC2 (&lt;code&gt;EC2&lt;/code&gt; or &lt;code&gt;SPOT&lt;/code&gt;) or Fargate (&lt;code&gt;FARGATE&lt;/code&gt; or &lt;code&gt;FARGATE_SPOT&lt;/code&gt;); EC2 and Fargate compute environments can't be mixed.
     */
    @JsonProperty("priority")
    public Long priority;
    public CreateJobQueueRequestBody withPriority(Long priority) {
        this.priority = priority;
        return this;
    }
    
    /**
     * The Amazon Resource Name (ARN) of the fair share scheduling policy. If this parameter is specified, the job queue uses a fair share scheduling policy. If this parameter isn't specified, the job queue uses a first in, first out (FIFO) scheduling policy. After a job queue is created, you can replace but can't remove the fair share scheduling policy. The format is &lt;code&gt;aws:&lt;i&gt;Partition&lt;/i&gt;:batch:&lt;i&gt;Region&lt;/i&gt;:&lt;i&gt;Account&lt;/i&gt;:scheduling-policy/&lt;i&gt;Name&lt;/i&gt; &lt;/code&gt;. An example is &lt;code&gt;aws:aws:batch:us-west-2:123456789012:scheduling-policy/MySchedulingPolicy&lt;/code&gt;.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schedulingPolicyArn")
    public String schedulingPolicyArn;
    public CreateJobQueueRequestBody withSchedulingPolicyArn(String schedulingPolicyArn) {
        this.schedulingPolicyArn = schedulingPolicyArn;
        return this;
    }
    
    /**
     * The state of the job queue. If the job queue state is &lt;code&gt;ENABLED&lt;/code&gt;, it is able to accept jobs. If the job queue state is &lt;code&gt;DISABLED&lt;/code&gt;, new jobs can't be added to the queue, but jobs already in the queue can finish.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public CreateJobQueueRequestBodyStateEnum state;
    public CreateJobQueueRequestBody withState(CreateJobQueueRequestBodyStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * The tags that you apply to the job queue to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see &lt;a href="https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html"&gt;Tagging your Batch resources&lt;/a&gt; in &lt;i&gt;Batch User Guide&lt;/i&gt;.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public java.util.Map<String, String> tags;
    public CreateJobQueueRequestBody withTags(java.util.Map<String, String> tags) {
        this.tags = tags;
        return this;
    }
    
}
