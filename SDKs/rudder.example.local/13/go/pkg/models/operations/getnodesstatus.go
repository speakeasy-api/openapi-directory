// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetNodesStatusQueryParams struct {
	// Comma separated list of node Ids
	Ids string `queryParam:"style=form,explode=true,name=ids"`
}

type GetNodesStatusRequest struct {
	QueryParams GetNodesStatusQueryParams
}

// GetNodesStatus200ApplicationJSONActionEnum - The id of the action
type GetNodesStatus200ApplicationJSONActionEnum string

const (
	GetNodesStatus200ApplicationJSONActionEnumGetNodesStatus GetNodesStatus200ApplicationJSONActionEnum = "getNodesStatus"
)

func (e *GetNodesStatus200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "getNodesStatus":
		*e = GetNodesStatus200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNodesStatus200ApplicationJSONActionEnum: %s", s)
	}
}

// GetNodesStatus200ApplicationJSONDataNodesStatusEnum - Status of the node
type GetNodesStatus200ApplicationJSONDataNodesStatusEnum string

const (
	GetNodesStatus200ApplicationJSONDataNodesStatusEnumPending  GetNodesStatus200ApplicationJSONDataNodesStatusEnum = "pending"
	GetNodesStatus200ApplicationJSONDataNodesStatusEnumAccepted GetNodesStatus200ApplicationJSONDataNodesStatusEnum = "accepted"
	GetNodesStatus200ApplicationJSONDataNodesStatusEnumDeleted  GetNodesStatus200ApplicationJSONDataNodesStatusEnum = "deleted"
	GetNodesStatus200ApplicationJSONDataNodesStatusEnumUnknown  GetNodesStatus200ApplicationJSONDataNodesStatusEnum = "unknown"
)

func (e *GetNodesStatus200ApplicationJSONDataNodesStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending":
		fallthrough
	case "accepted":
		fallthrough
	case "deleted":
		fallthrough
	case "unknown":
		*e = GetNodesStatus200ApplicationJSONDataNodesStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNodesStatus200ApplicationJSONDataNodesStatusEnum: %s", s)
	}
}

type GetNodesStatus200ApplicationJSONDataNodes struct {
	// Unique id of the node
	ID string `json:"id"`
	// Status of the node
	Status GetNodesStatus200ApplicationJSONDataNodesStatusEnum `json:"status"`
}

// GetNodesStatus200ApplicationJSONData - List of nodeId and associated status
type GetNodesStatus200ApplicationJSONData struct {
	// List of nodeId and associated status
	Nodes []GetNodesStatus200ApplicationJSONDataNodes `json:"nodes"`
}

// GetNodesStatus200ApplicationJSONResultEnum - Result of the request
type GetNodesStatus200ApplicationJSONResultEnum string

const (
	GetNodesStatus200ApplicationJSONResultEnumSuccess GetNodesStatus200ApplicationJSONResultEnum = "success"
	GetNodesStatus200ApplicationJSONResultEnumError   GetNodesStatus200ApplicationJSONResultEnum = "error"
)

func (e *GetNodesStatus200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = GetNodesStatus200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNodesStatus200ApplicationJSONResultEnum: %s", s)
	}
}

// GetNodesStatus200ApplicationJSON - nodes
type GetNodesStatus200ApplicationJSON struct {
	// The id of the action
	Action GetNodesStatus200ApplicationJSONActionEnum `json:"action"`
	// List of nodeId and associated status
	Data GetNodesStatus200ApplicationJSONData `json:"data"`
	// Result of the request
	Result GetNodesStatus200ApplicationJSONResultEnum `json:"result"`
}

type GetNodesStatusResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// nodes
	GetNodesStatus200ApplicationJSONObject *GetNodesStatus200ApplicationJSON
}
