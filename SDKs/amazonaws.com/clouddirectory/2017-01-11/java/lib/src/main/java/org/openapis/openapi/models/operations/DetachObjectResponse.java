/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.net.http.HttpResponse;

public class DetachObjectResponse {
    /**
     * AccessDeniedException
     */
    
    public Object accessDeniedException;
    public DetachObjectResponse withAccessDeniedException(Object accessDeniedException) {
        this.accessDeniedException = accessDeniedException;
        return this;
    }
    
    
    public String contentType;
    public DetachObjectResponse withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    /**
     * Success
     */
    
    public org.openapis.openapi.models.shared.DetachObjectResponse detachObjectResponse;
    public DetachObjectResponse withDetachObjectResponse(org.openapis.openapi.models.shared.DetachObjectResponse detachObjectResponse) {
        this.detachObjectResponse = detachObjectResponse;
        return this;
    }
    
    /**
     * DirectoryNotEnabledException
     */
    
    public Object directoryNotEnabledException;
    public DetachObjectResponse withDirectoryNotEnabledException(Object directoryNotEnabledException) {
        this.directoryNotEnabledException = directoryNotEnabledException;
        return this;
    }
    
    /**
     * InternalServiceException
     */
    
    public Object internalServiceException;
    public DetachObjectResponse withInternalServiceException(Object internalServiceException) {
        this.internalServiceException = internalServiceException;
        return this;
    }
    
    /**
     * InvalidArnException
     */
    
    public Object invalidArnException;
    public DetachObjectResponse withInvalidArnException(Object invalidArnException) {
        this.invalidArnException = invalidArnException;
        return this;
    }
    
    /**
     * LimitExceededException
     */
    
    public Object limitExceededException;
    public DetachObjectResponse withLimitExceededException(Object limitExceededException) {
        this.limitExceededException = limitExceededException;
        return this;
    }
    
    /**
     * NotNodeException
     */
    
    public Object notNodeException;
    public DetachObjectResponse withNotNodeException(Object notNodeException) {
        this.notNodeException = notNodeException;
        return this;
    }
    
    
    public Integer statusCode;
    public DetachObjectResponse withStatusCode(Integer statusCode) {
        this.statusCode = statusCode;
        return this;
    }
    
    
    public HttpResponse<byte[]> rawResponse;
    public DetachObjectResponse withRawResponse(HttpResponse<byte[]> rawResponse) {
        this.rawResponse = rawResponse;
        return this;
    }
    
    /**
     * ResourceNotFoundException
     */
    
    public Object resourceNotFoundException;
    public DetachObjectResponse withResourceNotFoundException(Object resourceNotFoundException) {
        this.resourceNotFoundException = resourceNotFoundException;
        return this;
    }
    
    /**
     * RetryableConflictException
     */
    
    public Object retryableConflictException;
    public DetachObjectResponse withRetryableConflictException(Object retryableConflictException) {
        this.retryableConflictException = retryableConflictException;
        return this;
    }
    
    /**
     * ValidationException
     */
    
    public Object validationException;
    public DetachObjectResponse withValidationException(Object validationException) {
        this.validationException = validationException;
        return this;
    }
    
}
