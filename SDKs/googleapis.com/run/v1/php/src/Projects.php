<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * List authorized domains.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsAuthorizeddomainsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsAuthorizeddomainsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsAuthorizeddomainsListResponse
     */
	public function runProjectsLocationsAuthorizeddomainsList(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsAuthorizeddomainsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsAuthorizeddomainsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsAuthorizeddomainsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/authorizeddomains', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsAuthorizeddomainsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsAuthorizeddomainsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsAuthorizeddomainsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAuthorizedDomainsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAuthorizedDomainsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List configurations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsConfigurationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsConfigurationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsConfigurationsListResponse
     */
	public function runProjectsLocationsConfigurationsList(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsConfigurationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsConfigurationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsConfigurationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/configurations', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsConfigurationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsConfigurationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsConfigurationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listConfigurationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListConfigurationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new domain mapping.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsDomainmappingsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsDomainmappingsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsDomainmappingsCreateResponse
     */
	public function runProjectsLocationsDomainmappingsCreate(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsDomainmappingsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsDomainmappingsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsDomainmappingsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/domainmappings', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsDomainmappingsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "domainMapping", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsDomainmappingsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsDomainmappingsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->domainMapping = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DomainMapping', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all domain mappings.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsDomainmappingsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsDomainmappingsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsDomainmappingsListResponse
     */
	public function runProjectsLocationsDomainmappingsList(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsDomainmappingsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsDomainmappingsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsDomainmappingsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/domainmappings', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsDomainmappingsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsDomainmappingsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsDomainmappingsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDomainMappingsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListDomainMappingsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsListResponse
     */
	public function runProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List revisions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsRevisionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsRevisionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsRevisionsListResponse
     */
	public function runProjectsLocationsRevisionsList(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsRevisionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsRevisionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsRevisionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/revisions', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsRevisionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsRevisionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsRevisionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRevisionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListRevisionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List routes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsRoutesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsRoutesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsRoutesListResponse
     */
	public function runProjectsLocationsRoutesList(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsRoutesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsRoutesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsRoutesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/routes', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsRoutesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsRoutesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsRoutesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRoutesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListRoutesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Service. Service creation will trigger a new deployment. Use GetService, and check service.status to determine if the Service is ready.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesCreateResponse
     */
	public function runProjectsLocationsServicesCreate(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/services', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "serviceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the provided service. This will cause the Service to stop serving traffic and will delete all associated Revisions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesDeleteResponse
     */
	public function runProjectsLocationsServicesDelete(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->status = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Status', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets information about a service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesGetResponse
     */
	public function runProjectsLocationsServicesGet(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the IAM Access Control policy currently in effect for the given Cloud Run service. This result does not include any inherited policies.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesGetIamPolicyResponse
     */
	public function runProjectsLocationsServicesGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists services for the given project and region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesListResponse
     */
	public function runProjectsLocationsServicesList(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/services', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listServicesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListServicesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Replaces a service. Only the spec and metadata labels and annotations are modifiable. After the Update request, Cloud Run will work to make the 'status' match the requested 'spec'. May provide metadata.resourceVersion to enforce update from last read for optimistic concurrency control.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesReplaceServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesReplaceServiceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesReplaceServiceResponse
     */
	public function runProjectsLocationsServicesReplaceService(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesReplaceServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesReplaceServiceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesReplaceServiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesReplaceServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "serviceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesReplaceServiceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesReplaceServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the IAM Access control policy for the specified Service. Overwrites any existing policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesSetIamPolicyResponse
     */
	public function runProjectsLocationsServicesSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified Project. There are no permissions required for making this API call.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesTestIamPermissionsResponse
     */
	public function runProjectsLocationsServicesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}