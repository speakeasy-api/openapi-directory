"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Networks:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def bind_network(self, request: operations.BindNetworkRequest) -> operations.BindNetworkResponse:
        r"""Bind a network to a template.
        Bind a network to a template.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.BindNetworkRequest, base_url, '/networks/{networkId}/bind', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BindNetworkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def combine_organization_networks(self, request: operations.CombineOrganizationNetworksRequest) -> operations.CombineOrganizationNetworksResponse:
        r"""Combine multiple networks into a single network
        Combine multiple networks into a single network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CombineOrganizationNetworksRequest, base_url, '/organizations/{organizationId}/networks/combine', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CombineOrganizationNetworksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.combine_organization_networks_200_application_json_object = out

        return res

    def create_organization_network(self, request: operations.CreateOrganizationNetworkRequest) -> operations.CreateOrganizationNetworkResponse:
        r"""Create a network
        Create a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateOrganizationNetworkRequest, base_url, '/organizations/{organizationId}/networks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateOrganizationNetworkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.create_organization_network_201_application_json_object = out

        return res

    def delete_network(self, request: operations.DeleteNetworkRequest) -> operations.DeleteNetworkResponse:
        r"""Delete a network
        Delete a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteNetworkRequest, base_url, '/networks/{networkId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteNetworkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_network(self, request: operations.GetNetworkRequest) -> operations.GetNetworkResponse:
        r"""Return a network
        Return a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkRequest, base_url, '/networks/{networkId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_200_application_json_object = out

        return res

    def get_network_air_marshal(self, request: operations.GetNetworkAirMarshalRequest) -> operations.GetNetworkAirMarshalResponse:
        r"""List Air Marshal scan results from a network
        List Air Marshal scan results from a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkAirMarshalRequest, base_url, '/networks/{networkId}/airMarshal', request)
        
        query_params = utils.get_query_params(operations.GetNetworkAirMarshalRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkAirMarshalResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_air_marshal_200_application_json_objects = out

        return res

    def get_network_site_to_site_vpn(self, request: operations.GetNetworkSiteToSiteVpnRequest) -> operations.GetNetworkSiteToSiteVpnResponse:
        r"""Return the site-to-site VPN settings of a network
        Return the site-to-site VPN settings of a network. Only valid for MX networks.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSiteToSiteVpnRequest, base_url, '/networks/{networkId}/siteToSiteVpn', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSiteToSiteVpnResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_site_to_site_vpn_200_application_json_object = out

        return res

    def get_network_traffic(self, request: operations.GetNetworkTrafficRequest) -> operations.GetNetworkTrafficResponse:
        r"""Return the traffic analysis data for this network
        Return the traffic analysis data for this network. Traffic analysis with hostname visibility must be enabled on the network.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkTrafficRequest, base_url, '/networks/{networkId}/traffic', request)
        
        query_params = utils.get_query_params(operations.GetNetworkTrafficRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkTrafficResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_traffic_200_application_json_objects = out

        return res

    def get_organization_networks(self, request: operations.GetOrganizationNetworksRequest) -> operations.GetOrganizationNetworksResponse:
        r"""List the networks in an organization
        List the networks in an organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationNetworksRequest, base_url, '/organizations/{organizationId}/networks', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationNetworksRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationNetworksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_organization_networks_200_application_json_objects = out

        return res

    def split_network(self, request: operations.SplitNetworkRequest) -> operations.SplitNetworkResponse:
        r"""Split a combined network into individual networks for each type of device
        Split a combined network into individual networks for each type of device
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SplitNetworkRequest, base_url, '/networks/{networkId}/split', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SplitNetworkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.split_network_200_application_json_object = out

        return res

    def unbind_network(self, request: operations.UnbindNetworkRequest) -> operations.UnbindNetworkResponse:
        r"""Unbind a network from a template.
        Unbind a network from a template.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UnbindNetworkRequest, base_url, '/networks/{networkId}/unbind', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UnbindNetworkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_network(self, request: operations.UpdateNetworkRequest) -> operations.UpdateNetworkResponse:
        r"""Update a network
        Update a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkRequest, base_url, '/networks/{networkId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_network_200_application_json_object = out

        return res

    def update_network_site_to_site_vpn(self, request: operations.UpdateNetworkSiteToSiteVpnRequest) -> operations.UpdateNetworkSiteToSiteVpnResponse:
        r"""Update the site-to-site VPN settings of a network
        Update the site-to-site VPN settings of a network. Only valid for MX networks in NAT mode.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkSiteToSiteVpnRequest, base_url, '/networks/{networkId}/siteToSiteVpn', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkSiteToSiteVpnResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_network_site_to_site_vpn_200_application_json_object = out

        return res

    