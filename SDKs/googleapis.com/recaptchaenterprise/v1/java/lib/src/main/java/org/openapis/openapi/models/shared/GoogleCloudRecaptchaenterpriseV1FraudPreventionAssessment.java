/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessment - Assessment for Fraud Prevention.
 */
public class GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessment {
    /**
     * Information about card testing fraud, where an adversary is testing fraudulently obtained cards or brute forcing their details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardTestingVerdict")
    public GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentCardTestingVerdict cardTestingVerdict;
    public GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessment withCardTestingVerdict(GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentCardTestingVerdict cardTestingVerdict) {
        this.cardTestingVerdict = cardTestingVerdict;
        return this;
    }
    
    /**
     * Information about stolen instrument fraud, where the user is not the legitimate owner of the instrument being used for the purchase.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stolenInstrumentVerdict")
    public GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentStolenInstrumentVerdict stolenInstrumentVerdict;
    public GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessment withStolenInstrumentVerdict(GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentStolenInstrumentVerdict stolenInstrumentVerdict) {
        this.stolenInstrumentVerdict = stolenInstrumentVerdict;
        return this;
    }
    
    /**
     * Probability (0-1) of this transaction being fraudulent. Summarizes the combined risk of attack vectors below.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactionRisk")
    public Float transactionRisk;
    public GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessment withTransactionRisk(Float transactionRisk) {
        this.transactionRisk = transactionRisk;
        return this;
    }
    
}
