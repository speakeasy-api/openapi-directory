"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleanalyticsadminv1betaaccessbetweenfilter as shared_googleanalyticsadminv1betaaccessbetweenfilter
from ..shared import googleanalyticsadminv1betaaccessinlistfilter as shared_googleanalyticsadminv1betaaccessinlistfilter
from ..shared import googleanalyticsadminv1betaaccessnumericfilter as shared_googleanalyticsadminv1betaaccessnumericfilter
from ..shared import googleanalyticsadminv1betaaccessstringfilter as shared_googleanalyticsadminv1betaaccessstringfilter
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleAnalyticsAdminV1betaAccessFilter:
    r"""An expression to filter dimension or metric values."""
    
    between_filter: Optional[shared_googleanalyticsadminv1betaaccessbetweenfilter.GoogleAnalyticsAdminV1betaAccessBetweenFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('betweenFilter'), 'exclude': lambda f: f is None }})
    r"""To express that the result needs to be between two numbers (inclusive)."""  
    field_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fieldName'), 'exclude': lambda f: f is None }})
    r"""The dimension name or metric name."""  
    in_list_filter: Optional[shared_googleanalyticsadminv1betaaccessinlistfilter.GoogleAnalyticsAdminV1betaAccessInListFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inListFilter'), 'exclude': lambda f: f is None }})
    r"""The result needs to be in a list of string values."""  
    numeric_filter: Optional[shared_googleanalyticsadminv1betaaccessnumericfilter.GoogleAnalyticsAdminV1betaAccessNumericFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numericFilter'), 'exclude': lambda f: f is None }})
    r"""Filters for numeric or date values."""  
    string_filter: Optional[shared_googleanalyticsadminv1betaaccessstringfilter.GoogleAnalyticsAdminV1betaAccessStringFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stringFilter'), 'exclude': lambda f: f is None }})
    r"""The filter for strings."""  
    