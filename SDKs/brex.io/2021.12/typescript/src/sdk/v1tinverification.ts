/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * TIN Verification methods
 */
export class V1TinVerification {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Verifies a TIN number
   *
   * @remarks
   * Performs a basic verification check of a given TIN number and name.
   */
  tinVerificationBasicCheck(
    req: operations.TinVerificationBasicCheckRequest,
    security: operations.TinVerificationBasicCheckSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TinVerificationBasicCheckResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TinVerificationBasicCheckRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/tin-verification/basic-check";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TinVerificationBasicCheckSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TinVerificationBasicCheckResponse =
        new operations.TinVerificationBasicCheckResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tinVerificationBasicCheck200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.TinVerificationBasicCheck200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tinVerificationBasicCheckDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.TinVerificationBasicCheckDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * EIN Name Lookup with TIN number and retrieves company data
   *
   * @remarks
   * Performs an EIN name match using provided TIN Number. Additionally to the name lookup it will lookup company details
   */
  tinVerificationComprehensiveCheck(
    req: operations.TinVerificationComprehensiveCheckRequest,
    security: operations.TinVerificationComprehensiveCheckSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TinVerificationComprehensiveCheckResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TinVerificationComprehensiveCheckRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/api/v1/tin-verification/comprehensive-check";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TinVerificationComprehensiveCheckSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TinVerificationComprehensiveCheckResponse =
        new operations.TinVerificationComprehensiveCheckResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tinVerificationComprehensiveCheck200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.TinVerificationComprehensiveCheck200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tinVerificationComprehensiveCheckDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.TinVerificationComprehensiveCheckDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * EIN Name Lookup with TIN number
   *
   * @remarks
   * Performs an EIN name match using provided TIN Number
   */
  tinVerificationNameLookup(
    req: operations.TinVerificationNameLookupRequest,
    security: operations.TinVerificationNameLookupSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TinVerificationNameLookupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TinVerificationNameLookupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/tin-verification/name-lookup";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TinVerificationNameLookupSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TinVerificationNameLookupResponse =
        new operations.TinVerificationNameLookupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tinVerificationNameLookup200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.TinVerificationNameLookup200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tinVerificationNameLookupDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.TinVerificationNameLookupDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
