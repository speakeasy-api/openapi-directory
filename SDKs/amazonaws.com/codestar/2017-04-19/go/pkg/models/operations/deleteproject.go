// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeleteProjectXAmzTargetEnum
type DeleteProjectXAmzTargetEnum string

const (
	DeleteProjectXAmzTargetEnumCodeStar20170419DeleteProject DeleteProjectXAmzTargetEnum = "CodeStar_20170419.DeleteProject"
)

func (e DeleteProjectXAmzTargetEnum) ToPointer() *DeleteProjectXAmzTargetEnum {
	return &e
}

func (e *DeleteProjectXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CodeStar_20170419.DeleteProject":
		*e = DeleteProjectXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteProjectXAmzTargetEnum: %v", v)
	}
}

type DeleteProjectRequest struct {
	DeleteProjectRequest shared.DeleteProjectRequest `request:"mediaType=application/json"`
	XAmzAlgorithm        *string                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256    *string                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential       *string                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate             *string                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken    *string                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature        *string                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders    *string                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget           DeleteProjectXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeleteProjectResponse struct {
	// ConcurrentModificationException
	ConcurrentModificationException interface{}
	ContentType                     string
	// Success
	DeleteProjectResult *shared.DeleteProjectResult
	// InvalidServiceRoleException
	InvalidServiceRoleException interface{}
	StatusCode                  int
	RawResponse                 *http.Response
	// ValidationException
	ValidationException interface{}
}
