"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import customeragentinfo as shared_customeragentinfo
from ..shared import customeragentlesscollectorinfo as shared_customeragentlesscollectorinfo
from ..shared import customerconnectorinfo as shared_customerconnectorinfo
from ..shared import customermecollectorinfo as shared_customermecollectorinfo
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDiscoverySummaryResponse:
    r"""Success"""
    
    agentless_collector_summary: Optional[shared_customeragentlesscollectorinfo.CustomerAgentlessCollectorInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('agentlessCollectorSummary'), 'exclude': lambda f: f is None }})  
    agent_summary: Optional[shared_customeragentinfo.CustomerAgentInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('agentSummary'), 'exclude': lambda f: f is None }})  
    applications: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applications'), 'exclude': lambda f: f is None }})  
    connector_summary: Optional[shared_customerconnectorinfo.CustomerConnectorInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorSummary'), 'exclude': lambda f: f is None }})  
    me_collector_summary: Optional[shared_customermecollectorinfo.CustomerMeCollectorInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meCollectorSummary'), 'exclude': lambda f: f is None }})  
    servers: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('servers'), 'exclude': lambda f: f is None }})  
    servers_mapped_to_applications: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serversMappedToApplications'), 'exclude': lambda f: f is None }})  
    servers_mappedto_tags: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serversMappedtoTags'), 'exclude': lambda f: f is None }})  
    