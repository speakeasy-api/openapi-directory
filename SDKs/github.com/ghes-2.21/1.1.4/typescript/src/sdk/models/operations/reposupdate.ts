/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 * Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. The `visibility` parameter overrides the `private` parameter when you use both along with the `nebula-preview` preview header.
 */
export enum ReposUpdateRequestBodyVisibilityEnum {
  Public = "public",
  Private = "private",
  Visibility = "visibility",
  Internal = "internal",
}

export class ReposUpdateRequestBody extends SpeakeasyBase {
  /**
   * Either `true` to allow private forks, or `false` to prevent private forks.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allow_forking" })
  allowForking?: boolean;

  /**
   * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allow_merge_commit" })
  allowMergeCommit?: boolean;

  /**
   * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allow_rebase_merge" })
  allowRebaseMerge?: boolean;

  /**
   * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allow_squash_merge" })
  allowSquashMerge?: boolean;

  /**
   * `true` to archive this repository. **Note**: You cannot unarchive repositories through the API.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "archived" })
  archived?: boolean;

  /**
   * Updates the default branch for this repository.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "default_branch" })
  defaultBranch?: string;

  /**
   * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "delete_branch_on_merge" })
  deleteBranchOnMerge?: boolean;

  /**
   * A short description of the repository.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Either `true` to enable issues for this repository or `false` to disable them.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_issues" })
  hasIssues?: boolean;

  /**
   * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_projects" })
  hasProjects?: boolean;

  /**
   * Either `true` to enable the wiki for this repository or `false` to disable it.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_wiki" })
  hasWiki?: boolean;

  /**
   * A URL with more information about the repository.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "homepage" })
  homepage?: string;

  /**
   * Either `true` to make this repo available as a template repository or `false` to prevent it.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_template" })
  isTemplate?: boolean;

  /**
   * The name of the repository.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Either `true` to make the repository private or `false` to make it public. Default: `false`.
   *
   * @remarks
   * **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "private" })
  private?: boolean;

  /**
   * Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. The `visibility` parameter overrides the `private` parameter when you use both along with the `nebula-preview` preview header.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "visibility" })
  visibility?: ReposUpdateRequestBodyVisibilityEnum;
}

export class ReposUpdateRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: ReposUpdateRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner",
  })
  owner: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=repo",
  })
  repo: string;
}

export class ReposUpdateResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Temporary Redirect
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Response
   */
  @SpeakeasyMetadata()
  fullRepository?: shared.FullRepository;

  /**
   * Validation failed
   */
  @SpeakeasyMetadata()
  validationError?: shared.ValidationError;
}
