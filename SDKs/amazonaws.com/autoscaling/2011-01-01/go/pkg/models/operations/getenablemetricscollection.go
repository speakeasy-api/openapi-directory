// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETEnableMetricsCollectionActionEnum
type GETEnableMetricsCollectionActionEnum string

const (
	GETEnableMetricsCollectionActionEnumEnableMetricsCollection GETEnableMetricsCollectionActionEnum = "EnableMetricsCollection"
)

func (e *GETEnableMetricsCollectionActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EnableMetricsCollection":
		*e = GETEnableMetricsCollectionActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETEnableMetricsCollectionActionEnum: %s", s)
	}
}

// GETEnableMetricsCollectionVersionEnum
type GETEnableMetricsCollectionVersionEnum string

const (
	GETEnableMetricsCollectionVersionEnumTwoThousandAndEleven0101 GETEnableMetricsCollectionVersionEnum = "2011-01-01"
)

func (e *GETEnableMetricsCollectionVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2011-01-01":
		*e = GETEnableMetricsCollectionVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETEnableMetricsCollectionVersionEnum: %s", s)
	}
}

type GETEnableMetricsCollectionQueryParams struct {
	Action GETEnableMetricsCollectionActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The name of the Auto Scaling group.
	AutoScalingGroupName string `queryParam:"style=form,explode=true,name=AutoScalingGroupName"`
	// The frequency at which Amazon EC2 Auto Scaling sends aggregated data to CloudWatch. The only valid value is <code>1Minute</code>.
	Granularity string `queryParam:"style=form,explode=true,name=Granularity"`
	// <p>Identifies the metrics to enable.</p> <p>You can specify one or more of the following metrics:</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> <li> <p> <code>GroupInServiceCapacity</code> </p> </li> <li> <p> <code>GroupPendingCapacity</code> </p> </li> <li> <p> <code>GroupStandbyCapacity</code> </p> </li> <li> <p> <code>GroupTerminatingCapacity</code> </p> </li> <li> <p> <code>GroupTotalCapacity</code> </p> </li> <li> <p> <code>WarmPoolDesiredCapacity</code> </p> </li> <li> <p> <code>WarmPoolWarmedCapacity</code> </p> </li> <li> <p> <code>WarmPoolPendingCapacity</code> </p> </li> <li> <p> <code>WarmPoolTerminatingCapacity</code> </p> </li> <li> <p> <code>WarmPoolTotalCapacity</code> </p> </li> <li> <p> <code>GroupAndWarmPoolDesiredCapacity</code> </p> </li> <li> <p> <code>GroupAndWarmPoolTotalCapacity</code> </p> </li> </ul> <p>If you specify <code>Granularity</code> and don't specify any metrics, all metrics are enabled.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html#as-group-metrics">Auto Scaling group metrics</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
	Metrics []string                              `queryParam:"style=form,explode=true,name=Metrics"`
	Version GETEnableMetricsCollectionVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETEnableMetricsCollectionHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETEnableMetricsCollectionRequest struct {
	QueryParams GETEnableMetricsCollectionQueryParams
	Headers     GETEnableMetricsCollectionHeaders
}

type GETEnableMetricsCollectionResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
