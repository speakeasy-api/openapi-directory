"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlechromepolicyversionsv1policytargetkey as shared_googlechromepolicyversionsv1policytargetkey
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleChromePolicyVersionsV1ResolveRequest:
    r"""Request message for getting the resolved policy value for a specific target."""
    
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pageSize'), 'exclude': lambda f: f is None }})
    r"""The maximum number of policies to return, defaults to 100 and has a maximum of 1000."""  
    page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pageToken'), 'exclude': lambda f: f is None }})
    r"""The page token used to retrieve a specific page of the request."""  
    policy_schema_filter: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policySchemaFilter'), 'exclude': lambda f: f is None }})
    r"""Required. The schema filter to apply to the resolve request. Specify a schema name to view a particular schema, for example: chrome.users.ShowLogoutButton Wildcards are supported, but only in the leaf portion of the schema name. Wildcards cannot be used in namespace directly. Please read https://developers.google.com/chrome/policy/guides/policy-schemas for details on schema namespaces. For example: Valid: \\"chrome.users.*\\", \\"chrome.users.apps.*\\", \\"chrome.printers.*\\" Invalid: \\"*\\", \\"*.users\\", \\"chrome.*\\", \\"chrome.*.apps.*\\" """  
    policy_target_key: Optional[shared_googlechromepolicyversionsv1policytargetkey.GoogleChromePolicyVersionsV1PolicyTargetKey] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policyTargetKey'), 'exclude': lambda f: f is None }})
    r"""The key used to identify the target on which the policy will be applied."""  
    