<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class SslPolicies 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves the list of all SslPolicy resources, regional and global, available to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesAggregatedListResponse
     */
	public function computeSslPoliciesAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/sslPolicies', \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sslPoliciesAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SslPoliciesAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified SSL policy. The SSL policy resource can be deleted only if it is not in use by any TargetHttpsProxy or TargetSslProxy resources.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesDeleteResponse
     */
	public function computeSslPoliciesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/sslPolicies/{sslPolicy}', \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all of the ordered rules present in a single specified policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesGetResponse
     */
	public function computeSslPoliciesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/sslPolicies/{sslPolicy}', \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sslPolicy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SslPolicy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified SSL policy resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesInsertResponse
     */
	public function computeSslPoliciesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/sslPolicies', \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sslPolicy", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the SSL policies that have been configured for the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesListResponse
     */
	public function computeSslPoliciesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/sslPolicies', \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sslPoliciesList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SslPoliciesList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all features that can be specified in the SSL policy when using custom profile.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesListAvailableFeaturesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesListAvailableFeaturesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesListAvailableFeaturesResponse
     */
	public function computeSslPoliciesListAvailableFeatures(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesListAvailableFeaturesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesListAvailableFeaturesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesListAvailableFeaturesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/sslPolicies/listAvailableFeatures', \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesListAvailableFeaturesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesListAvailableFeaturesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesListAvailableFeaturesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sslPoliciesListAvailableFeaturesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SslPoliciesListAvailableFeaturesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches the specified SSL policy with the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesPatchResponse
     */
	public function computeSslPoliciesPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/sslPolicies/{sslPolicy}', \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sslPolicy1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesTestIamPermissionsResponse
     */
	public function computeSslPoliciesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/sslPolicies/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSslPoliciesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}