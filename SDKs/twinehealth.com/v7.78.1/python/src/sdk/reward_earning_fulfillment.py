"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class RewardEarningFulfillment:
    r"""A reward earning fulfillment specifies the portion of a reward earning that was fulfilled and at what date."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_reward_earning_fulfillment(self, request: shared.CreateRewardEarningFulfillmentRequestInput) -> operations.CreateRewardEarningFulfillmentResponse:
        r"""Create a reward earning fulfillment
        Create a reward earning fulfillment for a reward earning. There can only be one fulfillment for each earning.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/reward_earning_fulfillment'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateRewardEarningFulfillmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateRewardEarningFulfillmentResponse])
                res.create_reward_earning_fulfillment_response = out
        elif http_res.status_code in [401, 403, 409]:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateOrUpdateErrorResponse])
                res.create_or_update_error_response = out

        return res

    def fetch_reward_earning_fulfillment(self, request: operations.FetchRewardEarningFulfillmentRequest) -> operations.FetchRewardEarningFulfillmentResponse:
        r"""Get a reward earning fulfillment
        Get a reward earning fulfillment record by id.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.FetchRewardEarningFulfillmentRequest, base_url, '/reward_earning_fulfillment/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchRewardEarningFulfillmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FetchRewardEarningFulfillmentResponse])
                res.fetch_reward_earning_fulfillment_response = out
        elif http_res.status_code in [401, 403]:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FetchErrorResponse])
                res.fetch_error_response = out

        return res

    def fetch_reward_earning_fulfillments(self, request: operations.FetchRewardEarningFulfillmentsRequest) -> operations.FetchRewardEarningFulfillmentsResponse:
        r"""List reward earning fulfillments
        Get a list of reward earning fulfillments matching the specified filters.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/reward_earning_fulfillment'
        
        query_params = utils.get_query_params(operations.FetchRewardEarningFulfillmentsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchRewardEarningFulfillmentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FetchRewardEarningFulfillmentsResponse])
                res.fetch_reward_earning_fulfillments_response = out
        elif http_res.status_code in [401, 403]:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FetchErrorResponse])
                res.fetch_error_response = out

        return res

    