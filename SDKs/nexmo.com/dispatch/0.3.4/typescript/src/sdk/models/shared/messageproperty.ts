/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AudioProperty } from "./audioproperty";
import { FileProperty } from "./fileproperty";
import { ImageProperty } from "./imageproperty";
import { TemplateProperty } from "./templateproperty";
import { VideoProperty } from "./videoproperty";
import { Expose, Type } from "class-transformer";

/**
 * The type of message that you are sending.
 *
 * @remarks
 *
 * **Messenger**: supports `text`, `image`, `audio`, `video` and `file`.
 *
 * **Viber Business Messages**: supports `image` and `text`.
 *
 * **WhatsApp**: supports `template`, `text`, `image`, `audio`, `video` and `file`.
 *
 * **SMS**: supports `text`.
 *
 */
export enum MessagePropertyContentTypeEnum {
  Text = "text",
  Image = "image",
  Audio = "audio",
  Video = "video",
  File = "file",
  Template = "template",
  Custom = "custom",
}

export class MessagePropertyContent extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "audio" })
  @Type(() => AudioProperty)
  audio?: AudioProperty;

  @SpeakeasyMetadata()
  @Expose({ name: "file" })
  @Type(() => FileProperty)
  file?: FileProperty;

  @SpeakeasyMetadata()
  @Expose({ name: "image" })
  @Type(() => ImageProperty)
  image?: ImageProperty;

  @SpeakeasyMetadata()
  @Expose({ name: "template" })
  @Type(() => TemplateProperty)
  template?: TemplateProperty;

  /**
   * The text of the message.
   *
   * @remarks
   *
   * **Messenger**: Is limited to 640 characters
   *
   * **SMS** or **Viber**: Is 1000 characters
   *
   * **WhatsApp**: is 4096 characters
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "text" })
  text?: string;

  /**
   * The type of message that you are sending.
   *
   * @remarks
   *
   * **Messenger**: supports `text`, `image`, `audio`, `video` and `file`.
   *
   * **Viber Business Messages**: supports `image` and `text`.
   *
   * **WhatsApp**: supports `template`, `text`, `image`, `audio`, `video` and `file`.
   *
   * **SMS**: supports `text`.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: MessagePropertyContentTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "video" })
  @Type(() => VideoProperty)
  video?: VideoProperty;
}

/**
 * The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy]( https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger.
 */
export enum MessagePropertyMessengerCategoryEnum {
  Response = "response",
  Update = "update",
  MessageTag = "message_tag",
}

export class MessagePropertyMessenger extends SpeakeasyBase {
  /**
   * The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy]( https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category?: MessagePropertyMessengerCategoryEnum;

  /**
   * ‘A full list of the possible tags is available on [developers.facebook.com](https://developers.facebook.com/docs/messenger-platform/send-messages/message-tags)'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tag" })
  tag?: string;
}

/**
 * The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative and a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages.
 */
export enum MessagePropertyViberServiceMsgCategoryEnum {
  Transaction = "transaction",
  Promotion = "promotion",
}

export class MessagePropertyViberServiceMsg extends SpeakeasyBase {
  /**
   * The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative and a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category?: MessagePropertyViberServiceMsgCategoryEnum;

  /**
   * Only valid for Viber Business Messages. Set the time-to-live of message to be delivered in seconds. i.e. if the message is not delivered in 600 seconds then delete the message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ttl" })
  ttl?: number;
}

/**
 * Please note that WhatsApp will deprecate `fallback` policy in January 2020. There are two policies that you can specify when sending a Message Template: `deterministic` and `fallback`. `deterministic` — Deliver the Message Template in exactly the language and locale asked for. `fallback` — Deliver the Message Template in the language that matches users language/locale setting on device. If one can not be found, deliver using the specified fallback language.
 */
export enum MessagePropertyWhatsappPolicyEnum {
  Fallback = "fallback",
  Deterministic = "deterministic",
}

export class MessagePropertyWhatsapp extends SpeakeasyBase {
  /**
   * We are using the industry standard, BCP 47, for locales. So in your API call to the /messages API you will need to put “en-GB” and this will refer to the “en_GB” template for WhatsApp. A full list of the possible locales is available on [developers.facebook.com](https://developers.facebook.com/docs/whatsapp/message-templates/creation#translations).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "locale" })
  locale?: string;

  /**
   * Please note that WhatsApp will deprecate `fallback` policy in January 2020. There are two policies that you can specify when sending a Message Template: `deterministic` and `fallback`. `deterministic` — Deliver the Message Template in exactly the language and locale asked for. `fallback` — Deliver the Message Template in the language that matches users language/locale setting on device. If one can not be found, deliver using the specified fallback language.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "policy" })
  policy?: MessagePropertyWhatsappPolicyEnum;
}

export class MessageProperty extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "content" })
  @Type(() => MessagePropertyContent)
  content: MessagePropertyContent;

  @SpeakeasyMetadata()
  @Expose({ name: "messenger" })
  @Type(() => MessagePropertyMessenger)
  messenger?: MessagePropertyMessenger;

  @SpeakeasyMetadata()
  @Expose({ name: "viber_service_msg" })
  @Type(() => MessagePropertyViberServiceMsg)
  viberServiceMsg?: MessagePropertyViberServiceMsg;

  @SpeakeasyMetadata()
  @Expose({ name: "whatsapp" })
  @Type(() => MessagePropertyWhatsapp)
  whatsapp?: MessagePropertyWhatsapp;
}
