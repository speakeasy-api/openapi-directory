"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PatientLabResultSetAbnormalFlagEnum(str, Enum):
    r"""HL7 codified abnormal flag for the result."""
    UNKNOWN = ''
    L = 'L'
    H = 'H'
    LL = 'LL'
    HH = 'HH'
    LESS_THAN_ = '<'
    GREATER_THAN_ = '>'
    N = 'N'
    A = 'A'
    AA = 'AA'
    NULL = 'null'
    U = 'U'
    D = 'D'
    B = 'B'
    W = 'W'
    S = 'S'
    R = 'R'
    I = 'I'
    MS = 'MS'
    VS = 'VS'

class PatientLabResultSetStatusEnum(str, Enum):
    r"""Status of the lab order."""
    UNKNOWN = ''
    ORDER_ENTERED = 'Order Entered'
    DISCONTINUED = 'Discontinued'
    IN_PROGRESS = 'In Progress'
    RESULTS_RECEIVED = 'Results Received'
    RESULTS_REVIEWED_WITH_PATIENT = 'Results Reviewed with Patient'
    PAPER_ORDER = 'Paper Order'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientLabResultSet:
    r"""Created"""
    
    ordering_doctor: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ordering_doctor') }})  
    patient: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patient') }})  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})  
    date_test_performed: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_test_performed'), 'exclude': lambda f: f is None }})
    r"""Date of lab test."""  
    doctor_comments: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doctor_comments'), 'exclude': lambda f: f is None }})
    r"""Comment from the doctor on lab result."""  
    doctor_signoff: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doctor_signoff'), 'exclude': lambda f: f is None }})
    r"""Check this box when the doctor has reviewed the lab result and taken appropriate action."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    lab_abnormal_flag: Optional[PatientLabResultSetAbnormalFlagEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lab_abnormal_flag'), 'exclude': lambda f: f is None }})
    r"""HL7 codified abnormal flag for the result."""  
    lab_imported_from_ccr: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lab_imported_from_ccr'), 'exclude': lambda f: f is None }})
    r"""Imported CCR document that contains lab results."""  
    lab_normal_range: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lab_normal_range'), 'exclude': lambda f: f is None }})  
    lab_normal_range_units: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lab_normal_range_units'), 'exclude': lambda f: f is None }})  
    lab_order_status: Optional[PatientLabResultSetStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lab_order_status'), 'exclude': lambda f: f is None }})
    r"""Status of the lab order."""  
    lab_result_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lab_result_value'), 'exclude': lambda f: f is None }})  
    lab_result_value_as_float: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lab_result_value_as_float'), 'exclude': lambda f: f is None }})  
    lab_result_value_units: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lab_result_value_units'), 'exclude': lambda f: f is None }})  
    loinc_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loinc_code'), 'exclude': lambda f: f is None }})  
    scanned_in_result: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scanned_in_result'), 'exclude': lambda f: f is None }})
    r"""Scanned in PDF for this lab result (optional)."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})  
    