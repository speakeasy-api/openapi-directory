// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LimitIntervalEnum - The interval for the metric. This is required if `metric` is `count` or `volume`.
type LimitIntervalEnum string

const (
	LimitIntervalEnumTransaction LimitIntervalEnum = "transaction"
	LimitIntervalEnumDay         LimitIntervalEnum = "day"
	LimitIntervalEnumWeek        LimitIntervalEnum = "week"
	LimitIntervalEnumMonth       LimitIntervalEnum = "month"
	LimitIntervalEnumYear        LimitIntervalEnum = "year"
	LimitIntervalEnumAllTime     LimitIntervalEnum = "all_time"
)

func (e LimitIntervalEnum) ToPointer() *LimitIntervalEnum {
	return &e
}

func (e *LimitIntervalEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "transaction":
		fallthrough
	case "day":
		fallthrough
	case "week":
		fallthrough
	case "month":
		fallthrough
	case "year":
		fallthrough
	case "all_time":
		*e = LimitIntervalEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LimitIntervalEnum: %v", v)
	}
}

// LimitMetricEnum - The metric for the Limit.
type LimitMetricEnum string

const (
	LimitMetricEnumCount  LimitMetricEnum = "count"
	LimitMetricEnumVolume LimitMetricEnum = "volume"
)

func (e LimitMetricEnum) ToPointer() *LimitMetricEnum {
	return &e
}

func (e *LimitMetricEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "count":
		fallthrough
	case "volume":
		*e = LimitMetricEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LimitMetricEnum: %v", v)
	}
}

// LimitModelTypeEnum - The type of the model you wish to associate the Limit with.
type LimitModelTypeEnum string

const (
	LimitModelTypeEnumAccount       LimitModelTypeEnum = "account"
	LimitModelTypeEnumAccountNumber LimitModelTypeEnum = "account_number"
	LimitModelTypeEnumCard          LimitModelTypeEnum = "card"
)

func (e LimitModelTypeEnum) ToPointer() *LimitModelTypeEnum {
	return &e
}

func (e *LimitModelTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "account":
		fallthrough
	case "account_number":
		fallthrough
	case "card":
		*e = LimitModelTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LimitModelTypeEnum: %v", v)
	}
}

// LimitStatusEnum - The current status of the Limit.
type LimitStatusEnum string

const (
	LimitStatusEnumActive   LimitStatusEnum = "active"
	LimitStatusEnumInactive LimitStatusEnum = "inactive"
)

func (e LimitStatusEnum) ToPointer() *LimitStatusEnum {
	return &e
}

func (e *LimitStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "inactive":
		*e = LimitStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LimitStatusEnum: %v", v)
	}
}

// LimitTypeEnum - A constant representing the object's type. For this resource it will always be `limit`.
type LimitTypeEnum string

const (
	LimitTypeEnumLimit LimitTypeEnum = "limit"
)

func (e LimitTypeEnum) ToPointer() *LimitTypeEnum {
	return &e
}

func (e *LimitTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "limit":
		*e = LimitTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LimitTypeEnum: %v", v)
	}
}

// Limit - You can set limits at the Account, Account Number, or Card level. Limits applied to Accounts will apply to all Account Numbers and Cards in the Account. You can specify any number of Limits and they will all be applied to inbound debits and card authorizations. Volume and count Limits are designed to prevent unauthorized debits.
type Limit struct {
	// The Limit identifier.
	ID string `json:"id"`
	// The interval for the metric. This is required if `metric` is `count` or `volume`.
	Interval LimitIntervalEnum `json:"interval"`
	// The metric for the Limit.
	Metric LimitMetricEnum `json:"metric"`
	// The identifier of the Account Number, Account, or Card the Limit applies to.
	ModelID string `json:"model_id"`
	// The type of the model you wish to associate the Limit with.
	ModelType LimitModelTypeEnum `json:"model_type"`
	// The current status of the Limit.
	Status LimitStatusEnum `json:"status"`
	// A constant representing the object's type. For this resource it will always be `limit`.
	Type LimitTypeEnum `json:"type"`
	// The value to evaluate the Limit against.
	Value int64 `json:"value"`
}
