"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import patchcompliancelevel_enum as shared_patchcompliancelevel_enum
from ..shared import patchfiltergroup as shared_patchfiltergroup
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatchRule:
    r"""Defines an approval rule for a patch baseline."""
    
    patch_filter_group: shared_patchfiltergroup.PatchFilterGroup = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PatchFilterGroup') }})  
    approve_after_days: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApproveAfterDays'), 'exclude': lambda f: f is None }})  
    approve_until_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApproveUntilDate'), 'exclude': lambda f: f is None }})  
    compliance_level: Optional[shared_patchcompliancelevel_enum.PatchComplianceLevelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ComplianceLevel'), 'exclude': lambda f: f is None }})  
    enable_non_security: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnableNonSecurity'), 'exclude': lambda f: f is None }})  
    