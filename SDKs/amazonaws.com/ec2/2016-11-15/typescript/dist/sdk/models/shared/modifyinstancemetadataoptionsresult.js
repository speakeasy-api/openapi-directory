"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModifyInstanceMetadataOptionsResult = exports.ModifyInstanceMetadataOptionsResultInstanceMetadataOptions = exports.ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsStateEnum = exports.ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsInstanceMetadataTagsEnum = exports.ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsHttpTokensEnum = exports.ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsHttpProtocolIpv6Enum = exports.ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsHttpEndpointEnum = void 0;
var utils_1 = require("../../../internal/utils");
/**
 * <p>Indicates whether the HTTP metadata endpoint on your instances is enabled or disabled.</p> <p>If the value is <code>disabled</code>, you cannot access your instance metadata.</p>
 */
var ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsHttpEndpointEnum;
(function (ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsHttpEndpointEnum) {
    ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsHttpEndpointEnum["Disabled"] = "disabled";
    ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsHttpEndpointEnum["Enabled"] = "enabled";
})(ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsHttpEndpointEnum = exports.ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsHttpEndpointEnum || (exports.ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsHttpEndpointEnum = {}));
/**
 * Indicates whether the IPv6 endpoint for the instance metadata service is enabled or disabled.
 */
var ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsHttpProtocolIpv6Enum;
(function (ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsHttpProtocolIpv6Enum) {
    ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsHttpProtocolIpv6Enum["Disabled"] = "disabled";
    ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsHttpProtocolIpv6Enum["Enabled"] = "enabled";
})(ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsHttpProtocolIpv6Enum = exports.ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsHttpProtocolIpv6Enum || (exports.ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsHttpProtocolIpv6Enum = {}));
/**
 * <p>IMDSv2 uses token-backed sessions. Indicates whether the use of HTTP tokens is <code>optional</code> (in other words, indicates whether the use of IMDSv2 is <code>optional</code>) or <code>required</code> (in other words, indicates whether the use of IMDSv2 is <code>required</code>).</p> <ul> <li> <p> <code>optional</code> - When IMDSv2 is optional, you can choose to retrieve instance metadata with or without a session token in your request. If you retrieve the IAM role credentials without a token, the IMDSv1 role credentials are returned. If you retrieve the IAM role credentials using a valid session token, the IMDSv2 role credentials are returned.</p> </li> <li> <p> <code>required</code> - When IMDSv2 is required, you must send a session token with any instance metadata retrieval requests. In this state, retrieving the IAM role credentials always returns IMDSv2 credentials; IMDSv1 credentials are not available.</p> </li> </ul> <p>Default: <code>optional</code> </p>
 */
var ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsHttpTokensEnum;
(function (ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsHttpTokensEnum) {
    ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsHttpTokensEnum["Optional"] = "optional";
    ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsHttpTokensEnum["Required"] = "required";
})(ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsHttpTokensEnum = exports.ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsHttpTokensEnum || (exports.ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsHttpTokensEnum = {}));
/**
 * Indicates whether access to instance tags from the instance metadata is enabled or disabled. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS">Work with instance tags using the instance metadata</a>.
 */
var ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsInstanceMetadataTagsEnum;
(function (ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsInstanceMetadataTagsEnum) {
    ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsInstanceMetadataTagsEnum["Disabled"] = "disabled";
    ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsInstanceMetadataTagsEnum["Enabled"] = "enabled";
})(ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsInstanceMetadataTagsEnum = exports.ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsInstanceMetadataTagsEnum || (exports.ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsInstanceMetadataTagsEnum = {}));
/**
 * <p>The state of the metadata option changes.</p> <p> <code>pending</code> - The metadata options are being updated and the instance is not ready to process metadata traffic with the new selection.</p> <p> <code>applied</code> - The metadata options have been successfully applied on the instance.</p>
 */
var ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsStateEnum;
(function (ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsStateEnum) {
    ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsStateEnum["Pending"] = "pending";
    ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsStateEnum["Applied"] = "applied";
})(ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsStateEnum = exports.ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsStateEnum || (exports.ModifyInstanceMetadataOptionsResultInstanceMetadataOptionsStateEnum = {}));
/**
 * The metadata options for the instance.
 */
var ModifyInstanceMetadataOptionsResultInstanceMetadataOptions = /** @class */ (function (_super) {
    __extends(ModifyInstanceMetadataOptionsResultInstanceMetadataOptions, _super);
    function ModifyInstanceMetadataOptionsResultInstanceMetadataOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyInstanceMetadataOptionsResultInstanceMetadataOptions.prototype, "httpEndpoint", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyInstanceMetadataOptionsResultInstanceMetadataOptions.prototype, "httpProtocolIpv6", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ModifyInstanceMetadataOptionsResultInstanceMetadataOptions.prototype, "httpPutResponseHopLimit", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyInstanceMetadataOptionsResultInstanceMetadataOptions.prototype, "httpTokens", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyInstanceMetadataOptionsResultInstanceMetadataOptions.prototype, "instanceMetadataTags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyInstanceMetadataOptionsResultInstanceMetadataOptions.prototype, "state", void 0);
    return ModifyInstanceMetadataOptionsResultInstanceMetadataOptions;
}(utils_1.SpeakeasyBase));
exports.ModifyInstanceMetadataOptionsResultInstanceMetadataOptions = ModifyInstanceMetadataOptionsResultInstanceMetadataOptions;
/**
 * Success
 */
var ModifyInstanceMetadataOptionsResult = /** @class */ (function (_super) {
    __extends(ModifyInstanceMetadataOptionsResult, _super);
    function ModifyInstanceMetadataOptionsResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyInstanceMetadataOptionsResult.prototype, "instanceId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", ModifyInstanceMetadataOptionsResultInstanceMetadataOptions)
    ], ModifyInstanceMetadataOptionsResult.prototype, "instanceMetadataOptions", void 0);
    return ModifyInstanceMetadataOptionsResult;
}(utils_1.SpeakeasyBase));
exports.ModifyInstanceMetadataOptionsResult = ModifyInstanceMetadataOptionsResult;
