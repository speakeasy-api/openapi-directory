"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class RecurringContractEnum(str, Enum):
    r"""The type of recurring contract to be used.
    Possible values:
    * `ONECLICK` – Payment details can be used to initiate a one-click payment, where the shopper enters the [card security code (CVC/CVV)](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid).
    * `RECURRING` – Payment details can be used without the card security code to initiate [card-not-present transactions](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-not-present-cnp).
    * `ONECLICK,RECURRING` – Payment details can be used regardless of whether the shopper is on your site or not.
    * `PAYOUT` – Payment details can be used to [make a payout](https://docs.adyen.com/online-payments/online-payouts).
    """
    ONECLICK = 'ONECLICK'
    RECURRING = 'RECURRING'
    PAYOUT = 'PAYOUT'

class RecurringTokenServiceEnum(str, Enum):
    r"""The name of the token service."""
    VISATOKENSERVICE = 'VISATOKENSERVICE'
    MCTOKENSERVICE = 'MCTOKENSERVICE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Recurring:
    
    contract: Optional[RecurringContractEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contract'), 'exclude': lambda f: f is None }})
    r"""The type of recurring contract to be used.
    Possible values:
    * `ONECLICK` – Payment details can be used to initiate a one-click payment, where the shopper enters the [card security code (CVC/CVV)](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid).
    * `RECURRING` – Payment details can be used without the card security code to initiate [card-not-present transactions](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-not-present-cnp).
    * `ONECLICK,RECURRING` – Payment details can be used regardless of whether the shopper is on your site or not.
    * `PAYOUT` – Payment details can be used to [make a payout](https://docs.adyen.com/online-payments/online-payouts).
    """  
    recurring_detail_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recurringDetailName'), 'exclude': lambda f: f is None }})
    r"""A descriptive name for this detail."""  
    recurring_expiry: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recurringExpiry'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date after which no further authorisations shall be performed. Only for 3D Secure 2."""  
    recurring_frequency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recurringFrequency'), 'exclude': lambda f: f is None }})
    r"""Minimum number of days between authorisations. Only for 3D Secure 2."""  
    token_service: Optional[RecurringTokenServiceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tokenService'), 'exclude': lambda f: f is None }})
    r"""The name of the token service."""  
    