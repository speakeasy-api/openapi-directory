// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type LlcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type LlcerRequestBodyCertificateParameters struct {
	// Document SRO
	Udf1 string `json:"UDF1"`
	// Document Number
	Udf2 string `json:"UDF2"`
	// Document Year
	Udf3 string `json:"UDF3"`
}

// LlcerRequestBodyFormatEnum - The format of the certificate in response.
type LlcerRequestBodyFormatEnum string

const (
	LlcerRequestBodyFormatEnumPdf LlcerRequestBodyFormatEnum = "pdf"
)

func (e *LlcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = LlcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LlcerRequestBodyFormatEnum: %s", s)
	}
}

// LlcerRequestBody - Request format
type LlcerRequestBody struct {
	CertificateParameters *LlcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format LlcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Llcer504ApplicationJSONErrorEnum string

const (
	Llcer504ApplicationJSONErrorEnumGatewayTimeout Llcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Llcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Llcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Llcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Llcer504ApplicationJSONErrorDescriptionEnum string

const (
	Llcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Llcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Llcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Llcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Llcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Llcer504ApplicationJSON - Gateway timeout
type Llcer504ApplicationJSON struct {
	Error            *Llcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Llcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Llcer503ApplicationJSONErrorEnum string

const (
	Llcer503ApplicationJSONErrorEnumServiceUnavailable Llcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Llcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Llcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Llcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Llcer503ApplicationJSONErrorDescriptionEnum string

const (
	Llcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Llcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Llcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Llcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Llcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Llcer503ApplicationJSON - Service unavailable
type Llcer503ApplicationJSON struct {
	Error            *Llcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Llcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Llcer502ApplicationJSONErrorEnum string

const (
	Llcer502ApplicationJSONErrorEnumBadGatewy Llcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Llcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Llcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Llcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Llcer502ApplicationJSONErrorDescriptionEnum string

const (
	Llcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Llcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Llcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Llcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Llcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Llcer502ApplicationJSON - Bad gateway
type Llcer502ApplicationJSON struct {
	Error            *Llcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Llcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Llcer500ApplicationJSONErrorEnum string

const (
	Llcer500ApplicationJSONErrorEnumInternalServerError Llcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Llcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Llcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Llcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Llcer500ApplicationJSONErrorDescriptionEnum string

const (
	Llcer500ApplicationJSONErrorDescriptionEnumInternalServerError Llcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Llcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Llcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Llcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Llcer500ApplicationJSON - Internal server error
type Llcer500ApplicationJSON struct {
	Error            *Llcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Llcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Llcer404ApplicationJSONErrorEnum string

const (
	Llcer404ApplicationJSONErrorEnumRecordNotFound Llcer404ApplicationJSONErrorEnum = "record_not_found"
	Llcer404ApplicationJSONErrorEnumURLNotFound    Llcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Llcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Llcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Llcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Llcer404ApplicationJSONErrorDescriptionEnum string

const (
	Llcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Llcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Llcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Llcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Llcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Llcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Llcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Llcer404ApplicationJSON - No record found
type Llcer404ApplicationJSON struct {
	Error            *Llcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Llcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Llcer401ApplicationJSONErrorEnum string

const (
	Llcer401ApplicationJSONErrorEnumInvalidAuthentication Llcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Llcer401ApplicationJSONErrorEnumInvalidAuthorization  Llcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Llcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Llcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Llcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Llcer401ApplicationJSONErrorDescriptionEnum string

const (
	Llcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Llcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Llcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Llcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Llcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Llcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Llcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Llcer401ApplicationJSON - Unauthorized access
type Llcer401ApplicationJSON struct {
	Error            *Llcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Llcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Llcer400ApplicationJSONErrorEnum string

const (
	Llcer400ApplicationJSONErrorEnumMissingParameter Llcer400ApplicationJSONErrorEnum = "missing_parameter"
	Llcer400ApplicationJSONErrorEnumInvalidParameter Llcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Llcer400ApplicationJSONErrorEnumInvalidFormat    Llcer400ApplicationJSONErrorEnum = "invalid_format"
	Llcer400ApplicationJSONErrorEnumInvalidTxnid     Llcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Llcer400ApplicationJSONErrorEnumInvalidConsentid Llcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Llcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Llcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Llcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Llcer400ApplicationJSONErrorDescriptionEnum string

const (
	Llcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Llcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Llcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Llcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Llcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Llcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Llcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Llcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Llcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Llcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Llcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Llcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Llcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Llcer400ApplicationJSON - Bad request
type Llcer400ApplicationJSON struct {
	Error            *Llcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Llcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type LlcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Llcer400ApplicationJSONObject *Llcer400ApplicationJSON
	// Unauthorized access
	Llcer401ApplicationJSONObject *Llcer401ApplicationJSON
	// No record found
	Llcer404ApplicationJSONObject *Llcer404ApplicationJSON
	// Internal server error
	Llcer500ApplicationJSONObject *Llcer500ApplicationJSON
	// Bad gateway
	Llcer502ApplicationJSONObject *Llcer502ApplicationJSON
	// Service unavailable
	Llcer503ApplicationJSONObject *Llcer503ApplicationJSON
	// Gateway timeout
	Llcer504ApplicationJSONObject *Llcer504ApplicationJSON
}
