"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class CustomType:
    r"""The Custom Type API allows the creation of new products so only desired datasets are included in background checks.
    
    ## Score Configuration
    The `ScoreConfig` object has `Rules` to apply to related *databases* which are summed up creating a `Score` which is associated to a *dataset* of a background `check`. All weights given to the configuration must sum up 1.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_custom_type(self, request: operations.DeleteCustomTypeRequest, security: operations.DeleteCustomTypeSecurity) -> operations.DeleteCustomTypeResponse:
        r"""Delete Custom Type
        Allows deleting a custom type. Person, vehicle, and company types cannot be deleted
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/config'
        
        query_params = utils.get_query_params(operations.DeleteCustomTypeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCustomTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_custom_type(self, request: shared.CreateConfigInput, security: operations.UpdateCustomTypeSecurity) -> operations.UpdateCustomTypeResponse:
        r"""Update Custom Type
        Allows updating a custom type. Person, vehicle, and company types are not modifiable
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/config'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateCustomTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def create_score_config(self, request: shared.CreateConfigInput) -> operations.CreateScoreConfigResponse:
        r"""Create Score Configurations
        Create a custom score configuration selecting the weight for each background check dataset and the country where it applies. Weights are numbers between 0 and 1 that represent how impactful the dataset is for the score. Keep in mind that the sum of all weights must equal 1.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/config'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateScoreConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScoreConfigOutput])
                res.score_config_output = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def list_score_configs(self, request: operations.ListScoreConfigsRequest) -> operations.ListScoreConfigsResponse:
        r"""List Score Configurations
        Lists the custom score configurations of the associated account.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/config'
        
        query_params = utils.get_query_params(operations.ListScoreConfigsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListScoreConfigsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScoreConfigsOutput])
                res.score_configs_output = out

        return res

    