"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from datetime import datetime
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeTags:
    r"""Describes a tag."""
    
    key: Optional[str] = dataclasses.field(default=None)  
    value: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScope:
    r"""The Network Access Scope."""
    
    created_date: Optional[datetime] = dataclasses.field(default=None)  
    network_insights_access_scope_arn: Optional[str] = dataclasses.field(default=None)  
    network_insights_access_scope_id: Optional[str] = dataclasses.field(default=None)  
    tags: Optional[list[CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeTags]] = dataclasses.field(default=None)  
    updated_date: Optional[datetime] = dataclasses.field(default=None)  
    
class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsDestinationPacketHeaderStatementProtocolsEnum(str, Enum):
    TCP = 'tcp'
    UDP = 'udp'


@dataclasses.dataclass
class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsDestinationPacketHeaderStatement:
    r"""The packet header statement."""
    
    destination_addresses: Optional[list[str]] = dataclasses.field(default=None)  
    destination_ports: Optional[list[str]] = dataclasses.field(default=None)  
    destination_prefix_lists: Optional[list[str]] = dataclasses.field(default=None)  
    protocols: Optional[list[CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsDestinationPacketHeaderStatementProtocolsEnum]] = dataclasses.field(default=None)  
    source_addresses: Optional[list[str]] = dataclasses.field(default=None)  
    source_ports: Optional[list[str]] = dataclasses.field(default=None)  
    source_prefix_lists: Optional[list[str]] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsDestinationResourceStatement:
    r"""The resource statement."""
    
    resources: Optional[list[str]] = dataclasses.field(default=None)  
    resource_types: Optional[list[str]] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsDestination:
    r"""The destination."""
    
    packet_header_statement: Optional[CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsDestinationPacketHeaderStatement] = dataclasses.field(default=None)  
    resource_statement: Optional[CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsDestinationResourceStatement] = dataclasses.field(default=None)  
    
class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsSourcePacketHeaderStatementProtocolsEnum(str, Enum):
    TCP = 'tcp'
    UDP = 'udp'


@dataclasses.dataclass
class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsSourcePacketHeaderStatement:
    r"""The packet header statement."""
    
    destination_addresses: Optional[list[str]] = dataclasses.field(default=None)  
    destination_ports: Optional[list[str]] = dataclasses.field(default=None)  
    destination_prefix_lists: Optional[list[str]] = dataclasses.field(default=None)  
    protocols: Optional[list[CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsSourcePacketHeaderStatementProtocolsEnum]] = dataclasses.field(default=None)  
    source_addresses: Optional[list[str]] = dataclasses.field(default=None)  
    source_ports: Optional[list[str]] = dataclasses.field(default=None)  
    source_prefix_lists: Optional[list[str]] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsSourceResourceStatement:
    r"""The resource statement."""
    
    resources: Optional[list[str]] = dataclasses.field(default=None)  
    resource_types: Optional[list[str]] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsSource:
    r"""The source."""
    
    packet_header_statement: Optional[CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsSourcePacketHeaderStatement] = dataclasses.field(default=None)  
    resource_statement: Optional[CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsSourceResourceStatement] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsThroughResourcesResourceStatement:
    r"""The resource statement."""
    
    resources: Optional[list[str]] = dataclasses.field(default=None)  
    resource_types: Optional[list[str]] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsThroughResources:
    r"""Describes a through resource statement."""
    
    resource_statement: Optional[CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsThroughResourcesResourceStatement] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePaths:
    r"""Describes a path."""
    
    destination: Optional[CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsDestination] = dataclasses.field(default=None)  
    source: Optional[CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsSource] = dataclasses.field(default=None)  
    through_resources: Optional[list[CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsThroughResources]] = dataclasses.field(default=None)  
    
class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsDestinationPacketHeaderStatementProtocolsEnum(str, Enum):
    TCP = 'tcp'
    UDP = 'udp'


@dataclasses.dataclass
class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsDestinationPacketHeaderStatement:
    r"""The packet header statement."""
    
    destination_addresses: Optional[list[str]] = dataclasses.field(default=None)  
    destination_ports: Optional[list[str]] = dataclasses.field(default=None)  
    destination_prefix_lists: Optional[list[str]] = dataclasses.field(default=None)  
    protocols: Optional[list[CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsDestinationPacketHeaderStatementProtocolsEnum]] = dataclasses.field(default=None)  
    source_addresses: Optional[list[str]] = dataclasses.field(default=None)  
    source_ports: Optional[list[str]] = dataclasses.field(default=None)  
    source_prefix_lists: Optional[list[str]] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsDestinationResourceStatement:
    r"""The resource statement."""
    
    resources: Optional[list[str]] = dataclasses.field(default=None)  
    resource_types: Optional[list[str]] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsDestination:
    r"""The destination."""
    
    packet_header_statement: Optional[CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsDestinationPacketHeaderStatement] = dataclasses.field(default=None)  
    resource_statement: Optional[CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsDestinationResourceStatement] = dataclasses.field(default=None)  
    
class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsSourcePacketHeaderStatementProtocolsEnum(str, Enum):
    TCP = 'tcp'
    UDP = 'udp'


@dataclasses.dataclass
class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsSourcePacketHeaderStatement:
    r"""The packet header statement."""
    
    destination_addresses: Optional[list[str]] = dataclasses.field(default=None)  
    destination_ports: Optional[list[str]] = dataclasses.field(default=None)  
    destination_prefix_lists: Optional[list[str]] = dataclasses.field(default=None)  
    protocols: Optional[list[CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsSourcePacketHeaderStatementProtocolsEnum]] = dataclasses.field(default=None)  
    source_addresses: Optional[list[str]] = dataclasses.field(default=None)  
    source_ports: Optional[list[str]] = dataclasses.field(default=None)  
    source_prefix_lists: Optional[list[str]] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsSourceResourceStatement:
    r"""The resource statement."""
    
    resources: Optional[list[str]] = dataclasses.field(default=None)  
    resource_types: Optional[list[str]] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsSource:
    r"""The source."""
    
    packet_header_statement: Optional[CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsSourcePacketHeaderStatement] = dataclasses.field(default=None)  
    resource_statement: Optional[CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsSourceResourceStatement] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsThroughResourcesResourceStatement:
    r"""The resource statement."""
    
    resources: Optional[list[str]] = dataclasses.field(default=None)  
    resource_types: Optional[list[str]] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsThroughResources:
    r"""Describes a through resource statement."""
    
    resource_statement: Optional[CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsThroughResourcesResourceStatement] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPaths:
    r"""Describes a path."""
    
    destination: Optional[CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsDestination] = dataclasses.field(default=None)  
    source: Optional[CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsSource] = dataclasses.field(default=None)  
    through_resources: Optional[list[CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsThroughResources]] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContent:
    r"""The Network Access Scope content."""
    
    exclude_paths: Optional[list[CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePaths]] = dataclasses.field(default=None)  
    match_paths: Optional[list[CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPaths]] = dataclasses.field(default=None)  
    network_insights_access_scope_id: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class CreateNetworkInsightsAccessScopeResult:
    r"""Success"""
    
    network_insights_access_scope: Optional[CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScope] = dataclasses.field(default=None)  
    network_insights_access_scope_content: Optional[CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContent] = dataclasses.field(default=None)  
    