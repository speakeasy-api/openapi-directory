// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GooglePrivacyDlpV2DlpJobStateEnum - State of a job.
type GooglePrivacyDlpV2DlpJobStateEnum string

const (
	GooglePrivacyDlpV2DlpJobStateEnumJobStateUnspecified GooglePrivacyDlpV2DlpJobStateEnum = "JOB_STATE_UNSPECIFIED"
	GooglePrivacyDlpV2DlpJobStateEnumPending             GooglePrivacyDlpV2DlpJobStateEnum = "PENDING"
	GooglePrivacyDlpV2DlpJobStateEnumRunning             GooglePrivacyDlpV2DlpJobStateEnum = "RUNNING"
	GooglePrivacyDlpV2DlpJobStateEnumDone                GooglePrivacyDlpV2DlpJobStateEnum = "DONE"
	GooglePrivacyDlpV2DlpJobStateEnumCanceled            GooglePrivacyDlpV2DlpJobStateEnum = "CANCELED"
	GooglePrivacyDlpV2DlpJobStateEnumFailed              GooglePrivacyDlpV2DlpJobStateEnum = "FAILED"
	GooglePrivacyDlpV2DlpJobStateEnumActive              GooglePrivacyDlpV2DlpJobStateEnum = "ACTIVE"
)

func (e *GooglePrivacyDlpV2DlpJobStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "JOB_STATE_UNSPECIFIED":
		fallthrough
	case "PENDING":
		fallthrough
	case "RUNNING":
		fallthrough
	case "DONE":
		fallthrough
	case "CANCELED":
		fallthrough
	case "FAILED":
		fallthrough
	case "ACTIVE":
		*e = GooglePrivacyDlpV2DlpJobStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GooglePrivacyDlpV2DlpJobStateEnum: %s", s)
	}
}

// GooglePrivacyDlpV2DlpJobTypeEnum - The type of job.
type GooglePrivacyDlpV2DlpJobTypeEnum string

const (
	GooglePrivacyDlpV2DlpJobTypeEnumDlpJobTypeUnspecified GooglePrivacyDlpV2DlpJobTypeEnum = "DLP_JOB_TYPE_UNSPECIFIED"
	GooglePrivacyDlpV2DlpJobTypeEnumInspectJob            GooglePrivacyDlpV2DlpJobTypeEnum = "INSPECT_JOB"
	GooglePrivacyDlpV2DlpJobTypeEnumRiskAnalysisJob       GooglePrivacyDlpV2DlpJobTypeEnum = "RISK_ANALYSIS_JOB"
)

func (e *GooglePrivacyDlpV2DlpJobTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DLP_JOB_TYPE_UNSPECIFIED":
		fallthrough
	case "INSPECT_JOB":
		fallthrough
	case "RISK_ANALYSIS_JOB":
		*e = GooglePrivacyDlpV2DlpJobTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GooglePrivacyDlpV2DlpJobTypeEnum: %s", s)
	}
}

// GooglePrivacyDlpV2DlpJob - Combines all of the information about a DLP job.
type GooglePrivacyDlpV2DlpJob struct {
	// Time when the job was created.
	CreateTime *string `json:"createTime,omitempty"`
	// Time when the job finished.
	EndTime *string `json:"endTime,omitempty"`
	// A stream of errors encountered running the job.
	Errors []GooglePrivacyDlpV2Error `json:"errors,omitempty"`
	// The results of an inspect DataSource job.
	InspectDetails *GooglePrivacyDlpV2InspectDataSourceDetails `json:"inspectDetails,omitempty"`
	// If created by a job trigger, the resource name of the trigger that instantiated the job.
	JobTriggerName *string `json:"jobTriggerName,omitempty"`
	// The server-assigned name.
	Name *string `json:"name,omitempty"`
	// Result of a risk analysis operation request.
	RiskDetails *GooglePrivacyDlpV2AnalyzeDataSourceRiskDetails `json:"riskDetails,omitempty"`
	// Time when the job started.
	StartTime *string `json:"startTime,omitempty"`
	// State of a job.
	State *GooglePrivacyDlpV2DlpJobStateEnum `json:"state,omitempty"`
	// The type of job.
	Type *GooglePrivacyDlpV2DlpJobTypeEnum `json:"type,omitempty"`
}
