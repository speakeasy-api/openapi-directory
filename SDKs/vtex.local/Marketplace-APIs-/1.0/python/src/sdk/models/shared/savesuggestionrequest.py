"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import image as shared_image
from ..shared import productspecification as shared_productspecification
from ..shared import skuspecification as shared_skuspecification
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SaveSuggestionRequestPricing:
    
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Currency'), 'exclude': lambda f: f is None }})  
    currency_symbol: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrencySymbol'), 'exclude': lambda f: f is None }})  
    sale_price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SalePrice'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SaveSuggestionRequest:
    
    available_quantity: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AvailableQuantity') }})  
    brand_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BrandName') }})
    r"""Name of the brand to which this SKU belongs. It must match the brand created in the marketplace."""  
    category_full_path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CategoryFullPath') }})
    r"""Full path to the SKU's category. It should be written as {department}/{category}. For example: if the department is **Appliances** and the category is **Oven**, the full path should be 'Appliances/Oven'."""  
    ean: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EAN') }})
    r"""SKU reference code. Mandatory if the RefId is not informed."""  
    height: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Height') }})
    r"""Height of the SKU."""  
    images: list[shared_image.Image] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Images') }})
    r"""Array containing the URLs and names the SKU images."""  
    length: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Length') }})
    r"""Length of the SKU."""  
    pricing: SaveSuggestionRequestPricing = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Pricing') }})  
    product_description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProductDescription') }})
    r"""Product Description containing the main information about the product (not the SKU)."""  
    product_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProductId') }})
    r"""Product ID in seller's account."""  
    product_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProductName') }})
    r"""Name of the suggested product. This field has a limit of 150 characters."""  
    ref_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RefId') }})
    r"""SKU reference code. Mandotory if the EAN is not informed."""  
    seller_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SellerId') }})
    r"""ID of the seller in the marketplace. This ID must be created by the marketplace and informed to the seller before the integration is built."""  
    sku_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SkuName') }})
    r"""Name of the suggested SKU."""  
    weight: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Weight') }})
    r"""Weight of the SKU in grams."""  
    width: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Width') }})
    r"""Width of the SKU."""  
    measurement_unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MeasurementUnit'), 'exclude': lambda f: f is None }})
    r"""Measurement unit that should be used for this SKU. If this information doesn't apply, you should use the default value `un`."""  
    product_specifications: Optional[list[shared_productspecification.ProductSpecification]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProductSpecifications'), 'exclude': lambda f: f is None }})
    r"""Array containing the names and values of the product specifications."""  
    seller_stock_keeping_unit_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SellerStockKeepingUnitId'), 'exclude': lambda f: f is None }})
    r"""ID of the SKU registered in the seller."""  
    sku_specifications: Optional[list[shared_skuspecification.SkuSpecification]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SkuSpecifications'), 'exclude': lambda f: f is None }})
    r"""Array containing the names and values of the SKU specifications."""  
    unit_multiplier: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UnitMultiplier'), 'exclude': lambda f: f is None }})
    r"""Unit multiplier for this SKU. If this information doesn't apply, you should use the default value `1`."""  
    