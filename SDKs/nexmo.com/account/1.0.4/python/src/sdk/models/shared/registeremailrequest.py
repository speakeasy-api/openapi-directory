"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class RegisterEmailRequestProviderEnum(str, Enum):
    r"""The delivery method by which the value would be assigned. Always `email`"""
    EMAIL = 'email'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RegisterEmailRequest:
    
    provider: RegisterEmailRequestProviderEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provider') }})
    r"""The delivery method by which the value would be assigned. Always `email`"""  
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""The email adress to attach to the application(s)"""  
    application_ids: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('application_ids'), 'exclude': lambda f: f is None }})
    r"""An optional array of additional ApplicationID's that the value is to be assigned to."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""An optional name to be attached to this binding"""  
    