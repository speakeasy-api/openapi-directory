/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Interact with reactions to various GitHub entities.
 */
export class Reactions {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create reaction for a commit comment
   *
   * @remarks
   * Create a reaction to a [commit comment](https://docs.github.com/enterprise-server@2.19/rest/reference/repos#comments). A response with an HTTP `200` status means that you already added the reaction type to this commit comment.
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/reactions#create-reaction-for-a-commit-comment} - API method documentation
   */
  reactionsCreateForCommitComment(
    req: operations.ReactionsCreateForCommitCommentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsCreateForCommitCommentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsCreateForCommitCommentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/comments/{comment_id}/reactions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsCreateForCommitCommentResponse =
        new operations.ReactionsCreateForCommitCommentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 201].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reaction = utils.objectToClass(httpRes?.data, shared.Reaction);
          }
          break;
        case httpRes?.status == 415:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reactionsCreateForCommitComment415ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ReactionsCreateForCommitComment415ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationError = utils.objectToClass(
              httpRes?.data,
              shared.ValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create reaction for an issue
   *
   * @remarks
   * Create a reaction to an [issue](https://docs.github.com/enterprise-server@2.19/rest/reference/issues/). A response with an HTTP `200` status means that you already added the reaction type to this issue.
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/reactions#create-reaction-for-an-issue} - API method documentation
   */
  reactionsCreateForIssue(
    req: operations.ReactionsCreateForIssueRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsCreateForIssueResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsCreateForIssueRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/issues/{issue_number}/reactions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsCreateForIssueResponse =
        new operations.ReactionsCreateForIssueResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 201].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reaction = utils.objectToClass(httpRes?.data, shared.Reaction);
          }
          break;
        case httpRes?.status == 415:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reactionsCreateForIssue415ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ReactionsCreateForIssue415ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationError = utils.objectToClass(
              httpRes?.data,
              shared.ValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create reaction for an issue comment
   *
   * @remarks
   * Create a reaction to an [issue comment](https://docs.github.com/enterprise-server@2.19/rest/reference/issues#comments). A response with an HTTP `200` status means that you already added the reaction type to this issue comment.
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/reactions#create-reaction-for-an-issue-comment} - API method documentation
   */
  reactionsCreateForIssueComment(
    req: operations.ReactionsCreateForIssueCommentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsCreateForIssueCommentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsCreateForIssueCommentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsCreateForIssueCommentResponse =
        new operations.ReactionsCreateForIssueCommentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 201].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reaction = utils.objectToClass(httpRes?.data, shared.Reaction);
          }
          break;
        case httpRes?.status == 415:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reactionsCreateForIssueComment415ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ReactionsCreateForIssueComment415ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationError = utils.objectToClass(
              httpRes?.data,
              shared.ValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create reaction for a pull request review comment
   *
   * @remarks
   * Create a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@2.19/rest/reference/pulls#comments). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment.
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/reactions#create-reaction-for-a-pull-request-review-comment} - API method documentation
   */
  reactionsCreateForPullRequestReviewComment(
    req: operations.ReactionsCreateForPullRequestReviewCommentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsCreateForPullRequestReviewCommentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsCreateForPullRequestReviewCommentRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsCreateForPullRequestReviewCommentResponse =
        new operations.ReactionsCreateForPullRequestReviewCommentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 201].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reaction = utils.objectToClass(httpRes?.data, shared.Reaction);
          }
          break;
        case httpRes?.status == 415:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reactionsCreateForPullRequestReviewComment415ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ReactionsCreateForPullRequestReviewComment415ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationError = utils.objectToClass(
              httpRes?.data,
              shared.ValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create reaction for a team discussion
   *
   * @remarks
   * Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@2.19/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.19/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/reactions/#create-reaction-for-a-team-discussion} - API method documentation
   */
  reactionsCreateForTeamDiscussion(
    req: operations.ReactionsCreateForTeamDiscussionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsCreateForTeamDiscussionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsCreateForTeamDiscussionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/teams/{team_id}/discussions/{discussion_number}/reactions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsCreateForTeamDiscussionResponse =
        new operations.ReactionsCreateForTeamDiscussionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reaction = utils.objectToClass(httpRes?.data, shared.Reaction);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create reaction for a team discussion comment
   *
   * @remarks
   * Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@2.19/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.19/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/reactions/#create-reaction-for-a-team-discussion-comment} - API method documentation
   */
  reactionsCreateForTeamDiscussionComment(
    req: operations.ReactionsCreateForTeamDiscussionCommentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsCreateForTeamDiscussionCommentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsCreateForTeamDiscussionCommentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsCreateForTeamDiscussionCommentResponse =
        new operations.ReactionsCreateForTeamDiscussionCommentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reaction = utils.objectToClass(httpRes?.data, shared.Reaction);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a reaction
   *
   * @remarks
   * OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.19/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/enterprise-server@2.19/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/enterprise-server@2.19/rest/reference/teams#discussion-comments).
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/reactions#delete-a-reaction-legacy} - API method documentation
   */
  reactionsDelete(
    req: operations.ReactionsDeleteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/reactions/{reaction_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsDeleteResponse =
        new operations.ReactionsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * List reactions for a commit comment
   *
   * @remarks
   * List the reactions to a [commit comment](https://docs.github.com/enterprise-server@2.19/rest/reference/repos#comments).
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/reactions#list-reactions-for-a-commit-comment} - API method documentation
   */
  reactionsListForCommitComment(
    req: operations.ReactionsListForCommitCommentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsListForCommitCommentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsListForCommitCommentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/comments/{comment_id}/reactions",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsListForCommitCommentResponse =
        new operations.ReactionsListForCommitCommentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reactions = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.reactions = utils.objectToClass(
              httpRes?.data,
              shared.Reaction,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
        case httpRes?.status == 415:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reactionsListForCommitComment415ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ReactionsListForCommitComment415ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List reactions for an issue
   *
   * @remarks
   * List the reactions to an [issue](https://docs.github.com/enterprise-server@2.19/rest/reference/issues).
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/reactions#list-reactions-for-an-issue} - API method documentation
   */
  reactionsListForIssue(
    req: operations.ReactionsListForIssueRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsListForIssueResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsListForIssueRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/issues/{issue_number}/reactions",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsListForIssueResponse =
        new operations.ReactionsListForIssueResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reactions = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.reactions = utils.objectToClass(
              httpRes?.data,
              shared.Reaction,
              resFieldDepth
            );
          }
          break;
        case [404, 410].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
        case httpRes?.status == 415:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reactionsListForIssue415ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ReactionsListForIssue415ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List reactions for an issue comment
   *
   * @remarks
   * List the reactions to an [issue comment](https://docs.github.com/enterprise-server@2.19/rest/reference/issues#comments).
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/reactions#list-reactions-for-an-issue-comment} - API method documentation
   */
  reactionsListForIssueComment(
    req: operations.ReactionsListForIssueCommentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsListForIssueCommentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsListForIssueCommentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsListForIssueCommentResponse =
        new operations.ReactionsListForIssueCommentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reactions = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.reactions = utils.objectToClass(
              httpRes?.data,
              shared.Reaction,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
        case httpRes?.status == 415:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reactionsListForIssueComment415ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ReactionsListForIssueComment415ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List reactions for a pull request review comment
   *
   * @remarks
   * List the reactions to a [pull request review comment](https://docs.github.com/enterprise-server@2.19/rest/reference/pulls#review-comments).
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/reactions#list-reactions-for-a-pull-request-review-comment} - API method documentation
   */
  reactionsListForPullRequestReviewComment(
    req: operations.ReactionsListForPullRequestReviewCommentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsListForPullRequestReviewCommentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsListForPullRequestReviewCommentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsListForPullRequestReviewCommentResponse =
        new operations.ReactionsListForPullRequestReviewCommentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reactions = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.reactions = utils.objectToClass(
              httpRes?.data,
              shared.Reaction,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
        case httpRes?.status == 415:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reactionsListForPullRequestReviewComment415ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ReactionsListForPullRequestReviewComment415ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List reactions for a team discussion
   *
   * @remarks
   * List the reactions to a [team discussion](https://docs.github.com/enterprise-server@2.19/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@2.19/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/reactions/#list-reactions-for-a-team-discussion} - API method documentation
   */
  reactionsListForTeamDiscussion(
    req: operations.ReactionsListForTeamDiscussionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsListForTeamDiscussionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsListForTeamDiscussionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/teams/{team_id}/discussions/{discussion_number}/reactions",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsListForTeamDiscussionResponse =
        new operations.ReactionsListForTeamDiscussionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reactions = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.reactions = utils.objectToClass(
              httpRes?.data,
              shared.Reaction,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List reactions for a team discussion comment
   *
   * @remarks
   * List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@2.19/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@2.19/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/reactions/#list-reactions-for-a-team-discussion-comment} - API method documentation
   */
  reactionsListForTeamDiscussionComment(
    req: operations.ReactionsListForTeamDiscussionCommentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsListForTeamDiscussionCommentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsListForTeamDiscussionCommentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsListForTeamDiscussionCommentResponse =
        new operations.ReactionsListForTeamDiscussionCommentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reactions = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.reactions = utils.objectToClass(
              httpRes?.data,
              shared.Reaction,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }
}
