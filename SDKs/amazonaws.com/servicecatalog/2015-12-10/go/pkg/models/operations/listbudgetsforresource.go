// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListBudgetsForResourceQueryParams struct {
	// Pagination limit
	PageSize *string `queryParam:"style=form,explode=true,name=PageSize"`
	// Pagination token
	PageToken *string `queryParam:"style=form,explode=true,name=PageToken"`
}

// ListBudgetsForResourceXAmzTargetEnum
type ListBudgetsForResourceXAmzTargetEnum string

const (
	ListBudgetsForResourceXAmzTargetEnumAws242ServiceCatalogServiceListBudgetsForResource ListBudgetsForResourceXAmzTargetEnum = "AWS242ServiceCatalogService.ListBudgetsForResource"
)

func (e *ListBudgetsForResourceXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWS242ServiceCatalogService.ListBudgetsForResource":
		*e = ListBudgetsForResourceXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListBudgetsForResourceXAmzTargetEnum: %s", s)
	}
}

type ListBudgetsForResourceHeaders struct {
	XAmzAlgorithm     *string                              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListBudgetsForResourceXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListBudgetsForResourceRequest struct {
	QueryParams ListBudgetsForResourceQueryParams
	Headers     ListBudgetsForResourceHeaders
	Request     shared.ListBudgetsForResourceInput `request:"mediaType=application/json"`
}

type ListBudgetsForResourceResponse struct {
	ContentType string
	// InvalidParametersException
	InvalidParametersException interface{}
	// Success
	ListBudgetsForResourceOutput *shared.ListBudgetsForResourceOutput
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
