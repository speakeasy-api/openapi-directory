"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import basicautoscalingalgorithm as shared_basicautoscalingalgorithm
from ..shared import instancegroupautoscalingpolicyconfig as shared_instancegroupautoscalingpolicyconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AutoscalingPolicy:
    r"""Describes an autoscaling policy for Dataproc cluster autoscaler."""
    
    basic_algorithm: Optional[shared_basicautoscalingalgorithm.BasicAutoscalingAlgorithm] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('basicAlgorithm'), 'exclude': lambda f: f is None }})
    r"""Basic algorithm for autoscaling."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Required. The policy id.The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between 3 and 50 characters."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Optional. The labels to associate with this autoscaling policy. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with an autoscaling policy."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The \\"resource name\\" of the autoscaling policy, as described in https://cloud.google.com/apis/design/resource_names. For projects.regions.autoscalingPolicies, the resource name of the policy has the following format: projects/{project_id}/regions/{region}/autoscalingPolicies/{policy_id} For projects.locations.autoscalingPolicies, the resource name of the policy has the following format: projects/{project_id}/locations/{location}/autoscalingPolicies/{policy_id}"""  
    secondary_worker_config: Optional[shared_instancegroupautoscalingpolicyconfig.InstanceGroupAutoscalingPolicyConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondaryWorkerConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration for the size bounds of an instance group, including its proportional size to other groups."""  
    worker_config: Optional[shared_instancegroupautoscalingpolicyconfig.InstanceGroupAutoscalingPolicyConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workerConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration for the size bounds of an instance group, including its proportional size to other groups."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AutoscalingPolicyInput:
    r"""Describes an autoscaling policy for Dataproc cluster autoscaler."""
    
    basic_algorithm: Optional[shared_basicautoscalingalgorithm.BasicAutoscalingAlgorithm] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('basicAlgorithm'), 'exclude': lambda f: f is None }})
    r"""Basic algorithm for autoscaling."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Required. The policy id.The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between 3 and 50 characters."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Optional. The labels to associate with this autoscaling policy. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with an autoscaling policy."""  
    secondary_worker_config: Optional[shared_instancegroupautoscalingpolicyconfig.InstanceGroupAutoscalingPolicyConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondaryWorkerConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration for the size bounds of an instance group, including its proportional size to other groups."""  
    worker_config: Optional[shared_instancegroupautoscalingpolicyconfig.InstanceGroupAutoscalingPolicyConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workerConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration for the size bounds of an instance group, including its proportional size to other groups."""  
    