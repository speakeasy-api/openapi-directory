"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

SERVERS = [
    "http://fis.{region}.amazonaws.com",
    r"""The FIS multi-region endpoint"""
    "https://fis.{region}.amazonaws.com",
    r"""The FIS multi-region endpoint"""
    "http://fis.{region}.amazonaws.com.cn",
    r"""The FIS endpoint for China (Beijing) and China (Ningxia)"""
    "https://fis.{region}.amazonaws.com.cn",
    r"""The FIS endpoint for China (Beijing) and China (Ningxia)"""
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""Fault Injection Simulator is a managed service that enables you to perform fault injection experiments on your Amazon Web Services workloads. For more information, see the <a href=\\"https://docs.aws.amazon.com/fis/latest/userguide/\\">Fault Injection Simulator User Guide</a>.
    https://docs.aws.amazon.com/fis/ - Amazon Web Services documentation
    """

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        
    
    
    def create_experiment_template(self, request: operations.CreateExperimentTemplateRequest) -> operations.CreateExperimentTemplateResponse:
        r"""<p>Creates an experiment template. </p> <p>An experiment template includes the following components:</p> <ul> <li> <p> <b>Targets</b>: A target can be a specific resource in your Amazon Web Services environment, or one or more resources that match criteria that you specify, for example, resources that have specific tags.</p> </li> <li> <p> <b>Actions</b>: The actions to carry out on the target. You can specify multiple actions, the duration of each action, and when to start each action during an experiment.</p> </li> <li> <p> <b>Stop conditions</b>: If a stop condition is triggered while an experiment is running, the experiment is automatically stopped. You can define a stop condition as a CloudWatch alarm.</p> </li> </ul> <p>For more information, see <a href=\\"https://docs.aws.amazon.com/fis/latest/userguide/experiment-templates.html\\">Experiment templates</a> in the <i>Fault Injection Simulator User Guide</i>.</p>"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/experimentTemplates'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateExperimentTemplateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateExperimentTemplateResponse])
                res.create_experiment_template_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.validation_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.conflict_exception = out
        elif http_res.status_code == 482:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.resource_not_found_exception = out
        elif http_res.status_code == 483:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.service_quota_exceeded_exception = out

        return res

    def delete_experiment_template(self, request: operations.DeleteExperimentTemplateRequest) -> operations.DeleteExperimentTemplateResponse:
        r"""Deletes the specified experiment template."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteExperimentTemplateRequest, base_url, '/experimentTemplates/{id}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteExperimentTemplateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeleteExperimentTemplateResponse])
                res.delete_experiment_template_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.validation_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.resource_not_found_exception = out

        return res

    def get_action(self, request: operations.GetActionRequest) -> operations.GetActionResponse:
        r"""Gets information about the specified FIS action."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetActionRequest, base_url, '/actions/{id}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetActionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetActionResponse])
                res.get_action_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.validation_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.resource_not_found_exception = out

        return res

    def get_experiment(self, request: operations.GetExperimentRequest) -> operations.GetExperimentResponse:
        r"""Gets information about the specified experiment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetExperimentRequest, base_url, '/experiments/{id}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetExperimentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetExperimentResponse])
                res.get_experiment_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.validation_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.resource_not_found_exception = out

        return res

    def get_experiment_template(self, request: operations.GetExperimentTemplateRequest) -> operations.GetExperimentTemplateResponse:
        r"""Gets information about the specified experiment template."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetExperimentTemplateRequest, base_url, '/experimentTemplates/{id}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetExperimentTemplateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetExperimentTemplateResponse])
                res.get_experiment_template_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.validation_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.resource_not_found_exception = out

        return res

    def get_target_resource_type(self, request: operations.GetTargetResourceTypeRequest) -> operations.GetTargetResourceTypeResponse:
        r"""Gets information about the specified resource type."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTargetResourceTypeRequest, base_url, '/targetResourceTypes/{resourceType}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTargetResourceTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetTargetResourceTypeResponse])
                res.get_target_resource_type_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.validation_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.resource_not_found_exception = out

        return res

    def list_actions(self, request: operations.ListActionsRequest) -> operations.ListActionsResponse:
        r"""Lists the available FIS actions."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/actions'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ListActionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListActionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListActionsResponse])
                res.list_actions_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.validation_exception = out

        return res

    def list_experiment_templates(self, request: operations.ListExperimentTemplatesRequest) -> operations.ListExperimentTemplatesResponse:
        r"""Lists your experiment templates."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/experimentTemplates'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ListExperimentTemplatesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListExperimentTemplatesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListExperimentTemplatesResponse])
                res.list_experiment_templates_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.validation_exception = out

        return res

    def list_experiments(self, request: operations.ListExperimentsRequest) -> operations.ListExperimentsResponse:
        r"""Lists your experiments."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/experiments'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ListExperimentsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListExperimentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListExperimentsResponse])
                res.list_experiments_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.validation_exception = out

        return res

    def list_tags_for_resource(self, request: operations.ListTagsForResourceRequest) -> operations.ListTagsForResourceResponse:
        r"""Lists the tags for the specified resource."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListTagsForResourceRequest, base_url, '/tags/{resourceArn}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListTagsForResourceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListTagsForResourceResponse])
                res.list_tags_for_resource_response = out

        return res

    def list_target_resource_types(self, request: operations.ListTargetResourceTypesRequest) -> operations.ListTargetResourceTypesResponse:
        r"""Lists the target resource types."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/targetResourceTypes'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ListTargetResourceTypesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListTargetResourceTypesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListTargetResourceTypesResponse])
                res.list_target_resource_types_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.validation_exception = out

        return res

    def start_experiment(self, request: operations.StartExperimentRequest) -> operations.StartExperimentResponse:
        r"""Starts running an experiment from the specified experiment template."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/experiments'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StartExperimentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StartExperimentResponse])
                res.start_experiment_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.validation_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.conflict_exception = out
        elif http_res.status_code == 482:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.resource_not_found_exception = out
        elif http_res.status_code == 483:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.service_quota_exceeded_exception = out

        return res

    def stop_experiment(self, request: operations.StopExperimentRequest) -> operations.StopExperimentResponse:
        r"""Stops the specified experiment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StopExperimentRequest, base_url, '/experiments/{id}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StopExperimentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StopExperimentResponse])
                res.stop_experiment_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.validation_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.resource_not_found_exception = out

        return res

    def tag_resource(self, request: operations.TagResourceRequest) -> operations.TagResourceResponse:
        r"""Applies the specified tags to the specified resource."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TagResourceRequest, base_url, '/tags/{resourceArn}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagResourceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.tag_resource_response = out

        return res

    def untag_resource(self, request: operations.UntagResourceRequest) -> operations.UntagResourceResponse:
        r"""Removes the specified tags from the specified resource."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UntagResourceRequest, base_url, '/tags/{resourceArn}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.UntagResourceRequest, request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UntagResourceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.untag_resource_response = out

        return res

    def update_experiment_template(self, request: operations.UpdateExperimentTemplateRequest) -> operations.UpdateExperimentTemplateResponse:
        r"""Updates the specified experiment template."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateExperimentTemplateRequest, base_url, '/experimentTemplates/{id}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateExperimentTemplateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UpdateExperimentTemplateResponse])
                res.update_experiment_template_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.validation_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.resource_not_found_exception = out
        elif http_res.status_code == 482:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.service_quota_exceeded_exception = out

        return res

    