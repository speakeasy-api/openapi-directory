/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Buyer } from "./buyer";
import { ContactInformation } from "./contactinformation";
import { MarketplaceLabel } from "./marketplacelabel";
import { PrivateData } from "./privatedata";
import { Seller } from "./seller";
import { Expose, Type } from "class-transformer";

/**
 * Represents a proposal in the marketplace. A proposal is the unit of negotiation between a seller and a buyer and contains deals which are served. Each field in a proposal can have one of the following setting:
 *
 * @remarks
 *
 * (readonly) - It is an error to try and set this field. (buyer-readonly) - Only the seller can set this field. (seller-readonly) - Only the buyer can set this field. (updatable) - The field is updatable at all times by either buyer or the seller.
 */
export class Proposal extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "billedBuyer" })
  @Type(() => Buyer)
  billedBuyer?: Buyer;

  @SpeakeasyMetadata()
  @Expose({ name: "buyer" })
  @Type(() => Buyer)
  buyer?: Buyer;

  /**
   * Optional contact information of the buyer. (seller-readonly)
   */
  @SpeakeasyMetadata({ elemType: ContactInformation })
  @Expose({ name: "buyerContacts" })
  @Type(() => ContactInformation)
  buyerContacts?: ContactInformation[];

  @SpeakeasyMetadata()
  @Expose({ name: "buyerPrivateData" })
  @Type(() => PrivateData)
  buyerPrivateData?: PrivateData;

  /**
   * IDs of DBM advertisers permission to this proposal.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dbmAdvertiserIds" })
  dbmAdvertiserIds?: string[];

  /**
   * When an proposal is in an accepted state, indicates whether the buyer has signed off. Once both sides have signed off on a deal, the proposal can be finalized by the seller. (seller-readonly)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hasBuyerSignedOff" })
  hasBuyerSignedOff?: boolean;

  /**
   * When an proposal is in an accepted state, indicates whether the buyer has signed off Once both sides have signed off on a deal, the proposal can be finalized by the seller. (buyer-readonly)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hasSellerSignedOff" })
  hasSellerSignedOff?: boolean;

  /**
   * What exchange will provide this inventory (readonly, except on create).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inventorySource" })
  inventorySource?: string;

  /**
   * True if the proposal is being renegotiated (readonly).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isRenegotiating" })
  isRenegotiating?: boolean;

  /**
   * True, if the buyside inventory setup is complete for this proposal. (readonly, except via OrderSetupCompleted action) Deprecated in favor of deal level setup complete flag.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isSetupComplete" })
  isSetupComplete?: boolean;

  /**
   * Identifies what kind of resource this is. Value: the fixed string "adexchangebuyer#proposal".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * List of labels associated with the proposal. (readonly)
   */
  @SpeakeasyMetadata({ elemType: MarketplaceLabel })
  @Expose({ name: "labels" })
  @Type(() => MarketplaceLabel)
  labels?: MarketplaceLabel[];

  /**
   * The role of the last user that either updated the proposal or left a comment. (readonly)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastUpdaterOrCommentorRole" })
  lastUpdaterOrCommentorRole?: string;

  /**
   * The name for the proposal (updatable)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Optional negotiation id if this proposal is a preferred deal proposal.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "negotiationId" })
  negotiationId?: string;

  /**
   * Indicates whether the buyer/seller created the proposal.(readonly)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "originatorRole" })
  originatorRole?: string;

  /**
   * Optional private auction id if this proposal is a private auction proposal.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "privateAuctionId" })
  privateAuctionId?: string;

  /**
   * The unique id of the proposal. (readonly).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "proposalId" })
  proposalId?: string;

  /**
   * The current state of the proposal. (readonly)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "proposalState" })
  proposalState?: string;

  /**
   * The revision number for the proposal (readonly).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "revisionNumber" })
  revisionNumber?: string;

  /**
   * The time (ms since epoch) when the proposal was last revised (readonly).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "revisionTimeMs" })
  revisionTimeMs?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "seller" })
  @Type(() => Seller)
  seller?: Seller;

  /**
   * Optional contact information of the seller (buyer-readonly).
   */
  @SpeakeasyMetadata({ elemType: ContactInformation })
  @Expose({ name: "sellerContacts" })
  @Type(() => ContactInformation)
  sellerContacts?: ContactInformation[];
}
