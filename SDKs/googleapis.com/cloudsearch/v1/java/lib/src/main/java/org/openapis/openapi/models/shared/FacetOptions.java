/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * FacetOptions - Specifies operators to return facet results for. There will be one FacetResult for every source_name/object_type/operator_name combination.
 */
public class FacetOptions {
    /**
     * Used to specify integer faceting options.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("integerFacetingOptions")
    public IntegerFacetingOptions integerFacetingOptions;

    public FacetOptions withIntegerFacetingOptions(IntegerFacetingOptions integerFacetingOptions) {
        this.integerFacetingOptions = integerFacetingOptions;
        return this;
    }
    
    /**
     * Maximum number of facet buckets that should be returned for this facet. Defaults to 10. Maximum value is 100.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numFacetBuckets")
    public Integer numFacetBuckets;

    public FacetOptions withNumFacetBuckets(Integer numFacetBuckets) {
        this.numFacetBuckets = numFacetBuckets;
        return this;
    }
    
    /**
     * If object_type is set, only those objects of that type will be used to compute facets. If empty, then all objects will be used to compute facets.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("objectType")
    public String objectType;

    public FacetOptions withObjectType(String objectType) {
        this.objectType = objectType;
        return this;
    }
    
    /**
     * The name of the operator chosen for faceting. @see cloudsearch.SchemaPropertyOptions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operatorName")
    public String operatorName;

    public FacetOptions withOperatorName(String operatorName) {
        this.operatorName = operatorName;
        return this;
    }
    
    /**
     * Source name to facet on. Format: datasources/{source_id} If empty, all data sources will be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceName")
    public String sourceName;

    public FacetOptions withSourceName(String sourceName) {
        this.sourceName = sourceName;
        return this;
    }
    
    public FacetOptions(){}
}
