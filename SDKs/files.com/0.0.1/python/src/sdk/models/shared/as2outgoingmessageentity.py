"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional

class As2OutgoingMessageEntityProcessingResultEnum(str, Enum):
    r"""Result of processing."""
    NOT_STARTED = 'not_started'
    SEND_FAILED = 'send_failed'
    SEND_SUCCESS = 'send_success'
    SEND_SUCCESS_MDN_INVALID = 'send_success_mdn_invalid'
    SEND_SUCCESS_MIC_MISMATCH = 'send_success_mic_mismatch'
    SEND_SUCCESS_MESSAGE_ID_MISMATCH = 'send_success_message_id_mismatch'
    SEND_SUCCESS_SIGNATURE_MISMATCH = 'send_success_signature_mismatch'
    SEND_SUCCESS_PROCESSING_FAILURE = 'send_success_processing_failure'
    SEND_FAILED_UNKNOWN_HOST = 'send_failed_unknown_host'
    SEND_FAILED_BAD_HTTP_RESPONSE_CODE = 'send_failed_bad_http_response_code'
    SEND_FAILED_SSL_ERROR = 'send_failed_ssl_error'
    SEND_FAILED_CONNECTION_REFUSED = 'send_failed_connection_refused'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class As2OutgoingMessageEntity:
    r"""List As2 Outgoing Messages"""
    
    activity_log: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activity_log'), 'exclude': lambda f: f is None }})
    r"""JSON Structure of the activity log."""  
    as2_from: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('as2_from'), 'exclude': lambda f: f is None }})
    r"""AS2 FROM"""  
    as2_partner_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('as2_partner_id'), 'exclude': lambda f: f is None }})
    r"""Id of the AS2 Partner associated with this message."""  
    as2_station_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('as2_station_id'), 'exclude': lambda f: f is None }})
    r"""Id of the AS2 Station associated with this message."""  
    as2_to: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('as2_to'), 'exclude': lambda f: f is None }})
    r"""AS2 TO"""  
    attachment_filename: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attachment_filename'), 'exclude': lambda f: f is None }})
    r"""Filename of the file being sent."""  
    body_size: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body_size'), 'exclude': lambda f: f is None }})
    r"""Encrypted Payload Body Size"""  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Message creation date/time"""  
    date_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date'), 'exclude': lambda f: f is None }})
    r"""Date Header"""  
    encrypted_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encrypted_uri'), 'exclude': lambda f: f is None }})
    r"""URL to download the encrypted signed smime that is to sent as AS2 body"""  
    http_headers: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('http_headers'), 'exclude': lambda f: f is None }})
    r"""HTTP Headers sent with this message."""  
    http_response_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('http_response_code'), 'exclude': lambda f: f is None }})
    r"""HTTP Response Code received for this message"""  
    http_response_headers: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('http_response_headers'), 'exclude': lambda f: f is None }})
    r"""HTTP Headers received for this message."""  
    http_transmission_duration: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('http_transmission_duration'), 'exclude': lambda f: f is None }})
    r"""HTTP transmission duration in seceonds"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Id of the AS2 Partner."""  
    mdn_message_id_matched: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mdn_message_id_matched'), 'exclude': lambda f: f is None }})
    r"""MDN message id matched?"""  
    mdn_mic_matched: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mdn_mic_matched'), 'exclude': lambda f: f is None }})
    r"""MDN MIC matched?"""  
    mdn_processing_success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mdn_processing_success'), 'exclude': lambda f: f is None }})
    r"""MDN disposition indicate a successful processing?"""  
    mdn_received: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mdn_received'), 'exclude': lambda f: f is None }})
    r"""Did the partner give a response body?"""  
    mdn_response_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mdn_response_uri'), 'exclude': lambda f: f is None }})
    r"""URL to download the http response body"""  
    mdn_signature_verified: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mdn_signature_verified'), 'exclude': lambda f: f is None }})
    r"""MDN signature verified?"""  
    mdn_valid: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mdn_valid'), 'exclude': lambda f: f is None }})
    r"""Is the response in MDN format?"""  
    message_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_id'), 'exclude': lambda f: f is None }})
    r"""AS2 Message Id"""  
    mic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mic'), 'exclude': lambda f: f is None }})
    r"""AS2 Message Integrity Check SHA1"""  
    mic_sha_256: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mic_sha_256'), 'exclude': lambda f: f is None }})
    r"""AS2 Message Integrity Check SHA256"""  
    processing_result: Optional[As2OutgoingMessageEntityProcessingResultEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processing_result'), 'exclude': lambda f: f is None }})
    r"""Result of processing."""  
    processing_result_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processing_result_description'), 'exclude': lambda f: f is None }})
    r"""Result of processing description."""  
    raw_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('raw_uri'), 'exclude': lambda f: f is None }})
    r"""URL to download the original file contents"""  
    smime_signed_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smime_signed_uri'), 'exclude': lambda f: f is None }})
    r"""URL to download the file contents as smime with signature"""  
    smime_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smime_uri'), 'exclude': lambda f: f is None }})
    r"""URL to download the file contents encoded as smime"""  
    uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uuid'), 'exclude': lambda f: f is None }})
    r"""UUID assigned to this message."""  
    