"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import adultinfo as shared_adultinfo
from ..shared import category as shared_category
from ..shared import colorinfo as shared_colorinfo
from ..shared import detectedbrand as shared_detectedbrand
from ..shared import detectedobject as shared_detectedobject
from ..shared import facedescription as shared_facedescription
from ..shared import imagedescriptiondetails as shared_imagedescriptiondetails
from ..shared import imagemetadata as shared_imagemetadata
from ..shared import imagetag as shared_imagetag
from ..shared import imagetype as shared_imagetype
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImageAnalysis:
    r"""Result of AnalyzeImage operation."""
    
    adult: Optional[shared_adultinfo.AdultInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adult'), 'exclude': lambda f: f is None }})
    r"""An object describing whether the image contains adult-oriented content and/or is racy."""  
    brands: Optional[list[shared_detectedbrand.DetectedBrand]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brands'), 'exclude': lambda f: f is None }})
    r"""Array of brands detected in the image."""  
    categories: Optional[list[shared_category.Category]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categories'), 'exclude': lambda f: f is None }})
    r"""An array indicating identified categories."""  
    color: Optional[shared_colorinfo.ColorInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color'), 'exclude': lambda f: f is None }})
    r"""An object providing additional metadata describing color attributes."""  
    description: Optional[shared_imagedescriptiondetails.ImageDescriptionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A collection of content tags, along with a list of captions sorted by confidence level, and image metadata."""  
    faces: Optional[list[shared_facedescription.FaceDescription]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('faces'), 'exclude': lambda f: f is None }})
    r"""An array of possible faces within the image."""  
    image_type: Optional[shared_imagetype.ImageType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageType'), 'exclude': lambda f: f is None }})
    r"""An object providing possible image types and matching confidence levels."""  
    metadata: Optional[shared_imagemetadata.ImageMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""Image metadata."""  
    objects: Optional[list[shared_detectedobject.DetectedObject]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objects'), 'exclude': lambda f: f is None }})
    r"""Array of objects describing what was detected in the image."""  
    request_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestId'), 'exclude': lambda f: f is None }})
    r"""Id of the REST API request."""  
    tags: Optional[list[shared_imagetag.ImageTag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""A list of tags with confidence level."""  
    