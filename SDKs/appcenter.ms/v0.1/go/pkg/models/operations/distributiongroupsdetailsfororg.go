// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DistributionGroupsDetailsForOrgSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type DistributionGroupsDetailsForOrgPathParams struct {
	// The organization's name
	OrgName string `pathParam:"style=simple,explode=false,name=org_name"`
}

type DistributionGroupsDetailsForOrgQueryParams struct {
	// The max number of apps to include in the response
	AppsLimit *float64 `queryParam:"style=form,explode=true,name=apps_limit"`
}

type DistributionGroupsDetailsForOrgRequest struct {
	PathParams  DistributionGroupsDetailsForOrgPathParams
	QueryParams DistributionGroupsDetailsForOrgQueryParams
	Security    DistributionGroupsDetailsForOrgSecurity
}

type DistributionGroupsDetailsForOrgDefaultApplicationJSONErrorCodeEnum string

const (
	DistributionGroupsDetailsForOrgDefaultApplicationJSONErrorCodeEnumBadRequest          DistributionGroupsDetailsForOrgDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	DistributionGroupsDetailsForOrgDefaultApplicationJSONErrorCodeEnumConflict            DistributionGroupsDetailsForOrgDefaultApplicationJSONErrorCodeEnum = "Conflict"
	DistributionGroupsDetailsForOrgDefaultApplicationJSONErrorCodeEnumNotAcceptable       DistributionGroupsDetailsForOrgDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	DistributionGroupsDetailsForOrgDefaultApplicationJSONErrorCodeEnumNotFound            DistributionGroupsDetailsForOrgDefaultApplicationJSONErrorCodeEnum = "NotFound"
	DistributionGroupsDetailsForOrgDefaultApplicationJSONErrorCodeEnumInternalServerError DistributionGroupsDetailsForOrgDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	DistributionGroupsDetailsForOrgDefaultApplicationJSONErrorCodeEnumUnauthorized        DistributionGroupsDetailsForOrgDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	DistributionGroupsDetailsForOrgDefaultApplicationJSONErrorCodeEnumTooManyRequests     DistributionGroupsDetailsForOrgDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *DistributionGroupsDetailsForOrgDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = DistributionGroupsDetailsForOrgDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DistributionGroupsDetailsForOrgDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type DistributionGroupsDetailsForOrgDefaultApplicationJSONError struct {
	Code    DistributionGroupsDetailsForOrgDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                             `json:"message"`
}

// DistributionGroupsDetailsForOrgDefaultApplicationJSON - Error
type DistributionGroupsDetailsForOrgDefaultApplicationJSON struct {
	Error DistributionGroupsDetailsForOrgDefaultApplicationJSONError `json:"error"`
}

type DistributionGroupsDetailsForOrg200ApplicationJSONAppsAzureSubscription struct {
	// If the subscription can be used for billing
	IsBillable *bool `json:"is_billable,omitempty"`
	// If the subscription is used for billing
	IsBilling *bool `json:"is_billing,omitempty"`
	// If the subscription is internal Microsoft subscription
	IsMicrosoftInternal *bool `json:"is_microsoft_internal,omitempty"`
	// The azure subscription id
	SubscriptionID string `json:"subscription_id"`
	// The name of the azure subscription
	SubscriptionName string `json:"subscription_name"`
	// The tenant id of the azure subscription belongs to
	TenantID string `json:"tenant_id"`
}

type DistributionGroupsDetailsForOrg200ApplicationJSONAppsMemberPermissionsEnum string

const (
	DistributionGroupsDetailsForOrg200ApplicationJSONAppsMemberPermissionsEnumManager   DistributionGroupsDetailsForOrg200ApplicationJSONAppsMemberPermissionsEnum = "manager"
	DistributionGroupsDetailsForOrg200ApplicationJSONAppsMemberPermissionsEnumDeveloper DistributionGroupsDetailsForOrg200ApplicationJSONAppsMemberPermissionsEnum = "developer"
	DistributionGroupsDetailsForOrg200ApplicationJSONAppsMemberPermissionsEnumViewer    DistributionGroupsDetailsForOrg200ApplicationJSONAppsMemberPermissionsEnum = "viewer"
	DistributionGroupsDetailsForOrg200ApplicationJSONAppsMemberPermissionsEnumTester    DistributionGroupsDetailsForOrg200ApplicationJSONAppsMemberPermissionsEnum = "tester"
)

func (e *DistributionGroupsDetailsForOrg200ApplicationJSONAppsMemberPermissionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "manager":
		fallthrough
	case "developer":
		fallthrough
	case "viewer":
		fallthrough
	case "tester":
		*e = DistributionGroupsDetailsForOrg200ApplicationJSONAppsMemberPermissionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DistributionGroupsDetailsForOrg200ApplicationJSONAppsMemberPermissionsEnum: %s", s)
	}
}

// DistributionGroupsDetailsForOrg200ApplicationJSONAppsOriginEnum - The creation origin of this app
type DistributionGroupsDetailsForOrg200ApplicationJSONAppsOriginEnum string

const (
	DistributionGroupsDetailsForOrg200ApplicationJSONAppsOriginEnumAppcenter DistributionGroupsDetailsForOrg200ApplicationJSONAppsOriginEnum = "appcenter"
	DistributionGroupsDetailsForOrg200ApplicationJSONAppsOriginEnumHockeyapp DistributionGroupsDetailsForOrg200ApplicationJSONAppsOriginEnum = "hockeyapp"
	DistributionGroupsDetailsForOrg200ApplicationJSONAppsOriginEnumCodepush  DistributionGroupsDetailsForOrg200ApplicationJSONAppsOriginEnum = "codepush"
)

func (e *DistributionGroupsDetailsForOrg200ApplicationJSONAppsOriginEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "appcenter":
		fallthrough
	case "hockeyapp":
		fallthrough
	case "codepush":
		*e = DistributionGroupsDetailsForOrg200ApplicationJSONAppsOriginEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DistributionGroupsDetailsForOrg200ApplicationJSONAppsOriginEnum: %s", s)
	}
}

// DistributionGroupsDetailsForOrg200ApplicationJSONAppsOsEnum - The OS the app will be running on
type DistributionGroupsDetailsForOrg200ApplicationJSONAppsOsEnum string

const (
	DistributionGroupsDetailsForOrg200ApplicationJSONAppsOsEnumAndroid DistributionGroupsDetailsForOrg200ApplicationJSONAppsOsEnum = "Android"
	DistributionGroupsDetailsForOrg200ApplicationJSONAppsOsEnumIOs     DistributionGroupsDetailsForOrg200ApplicationJSONAppsOsEnum = "iOS"
	DistributionGroupsDetailsForOrg200ApplicationJSONAppsOsEnumMacOs   DistributionGroupsDetailsForOrg200ApplicationJSONAppsOsEnum = "macOS"
	DistributionGroupsDetailsForOrg200ApplicationJSONAppsOsEnumTizen   DistributionGroupsDetailsForOrg200ApplicationJSONAppsOsEnum = "Tizen"
	DistributionGroupsDetailsForOrg200ApplicationJSONAppsOsEnumTvOs    DistributionGroupsDetailsForOrg200ApplicationJSONAppsOsEnum = "tvOS"
	DistributionGroupsDetailsForOrg200ApplicationJSONAppsOsEnumWindows DistributionGroupsDetailsForOrg200ApplicationJSONAppsOsEnum = "Windows"
	DistributionGroupsDetailsForOrg200ApplicationJSONAppsOsEnumLinux   DistributionGroupsDetailsForOrg200ApplicationJSONAppsOsEnum = "Linux"
	DistributionGroupsDetailsForOrg200ApplicationJSONAppsOsEnumCustom  DistributionGroupsDetailsForOrg200ApplicationJSONAppsOsEnum = "Custom"
)

func (e *DistributionGroupsDetailsForOrg200ApplicationJSONAppsOsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Android":
		fallthrough
	case "iOS":
		fallthrough
	case "macOS":
		fallthrough
	case "Tizen":
		fallthrough
	case "tvOS":
		fallthrough
	case "Windows":
		fallthrough
	case "Linux":
		fallthrough
	case "Custom":
		*e = DistributionGroupsDetailsForOrg200ApplicationJSONAppsOsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DistributionGroupsDetailsForOrg200ApplicationJSONAppsOsEnum: %s", s)
	}
}

// DistributionGroupsDetailsForOrg200ApplicationJSONAppsOwnerTypeEnum - The owner type. Can either be 'org' or 'user'
type DistributionGroupsDetailsForOrg200ApplicationJSONAppsOwnerTypeEnum string

const (
	DistributionGroupsDetailsForOrg200ApplicationJSONAppsOwnerTypeEnumOrg  DistributionGroupsDetailsForOrg200ApplicationJSONAppsOwnerTypeEnum = "org"
	DistributionGroupsDetailsForOrg200ApplicationJSONAppsOwnerTypeEnumUser DistributionGroupsDetailsForOrg200ApplicationJSONAppsOwnerTypeEnum = "user"
)

func (e *DistributionGroupsDetailsForOrg200ApplicationJSONAppsOwnerTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "org":
		fallthrough
	case "user":
		*e = DistributionGroupsDetailsForOrg200ApplicationJSONAppsOwnerTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DistributionGroupsDetailsForOrg200ApplicationJSONAppsOwnerTypeEnum: %s", s)
	}
}

// DistributionGroupsDetailsForOrg200ApplicationJSONAppsOwner - The information about the app's owner
type DistributionGroupsDetailsForOrg200ApplicationJSONAppsOwner struct {
	// The avatar URL of the owner
	AvatarURL *string `json:"avatar_url,omitempty"`
	// The owner's display name
	DisplayName string `json:"display_name"`
	// The owner's email address
	Email *string `json:"email,omitempty"`
	// The unique id (UUID) of the owner
	ID string `json:"id"`
	// The unique name that used to identify the owner
	Name string `json:"name"`
	// The owner type. Can either be 'org' or 'user'
	Type DistributionGroupsDetailsForOrg200ApplicationJSONAppsOwnerTypeEnum `json:"type"`
}

// DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnum - The platform of the app
type DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnum string

const (
	DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnumJava            DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnum = "Java"
	DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnumObjectiveCSwift DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnum = "Objective-C-Swift"
	DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnumUwp             DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnum = "UWP"
	DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnumCordova         DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnum = "Cordova"
	DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnumReactNative     DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnum = "React-Native"
	DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnumUnity           DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnum = "Unity"
	DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnumElectron        DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnum = "Electron"
	DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnumXamarin         DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnum = "Xamarin"
	DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnumWpf             DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnum = "WPF"
	DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnumWinForms        DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnum = "WinForms"
	DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnumUnknown         DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnum = "Unknown"
	DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnumCustom          DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnum = "Custom"
)

func (e *DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Java":
		fallthrough
	case "Objective-C-Swift":
		fallthrough
	case "UWP":
		fallthrough
	case "Cordova":
		fallthrough
	case "React-Native":
		fallthrough
	case "Unity":
		fallthrough
	case "Electron":
		fallthrough
	case "Xamarin":
		fallthrough
	case "WPF":
		fallthrough
	case "WinForms":
		fallthrough
	case "Unknown":
		fallthrough
	case "Custom":
		*e = DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnum: %s", s)
	}
}

type DistributionGroupsDetailsForOrg200ApplicationJSONApps struct {
	// A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics
	AppSecret         string                                                                  `json:"app_secret"`
	AzureSubscription *DistributionGroupsDetailsForOrg200ApplicationJSONAppsAzureSubscription `json:"azure_subscription,omitempty"`
	// The created date of this app
	CreatedAt *string `json:"created_at,omitempty"`
	// The description of the app
	Description *string `json:"description,omitempty"`
	// The display name of the app
	DisplayName string `json:"display_name"`
	// The string representation of the source of the app's icon
	IconSource *string `json:"icon_source,omitempty"`
	// The string representation of the URL pointing to the app's icon
	IconURL *string `json:"icon_url,omitempty"`
	// The unique ID (UUID) of the app
	ID string `json:"id"`
	// The permissions of the calling user
	MemberPermissions []DistributionGroupsDetailsForOrg200ApplicationJSONAppsMemberPermissionsEnum `json:"member_permissions,omitempty"`
	// The name of the app used in URLs
	Name string `json:"name"`
	// The creation origin of this app
	Origin DistributionGroupsDetailsForOrg200ApplicationJSONAppsOriginEnum `json:"origin"`
	// The OS the app will be running on
	Os DistributionGroupsDetailsForOrg200ApplicationJSONAppsOsEnum `json:"os"`
	// The information about the app's owner
	Owner DistributionGroupsDetailsForOrg200ApplicationJSONAppsOwner `json:"owner"`
	// The platform of the app
	Platform DistributionGroupsDetailsForOrg200ApplicationJSONAppsPlatformEnum `json:"platform"`
	// A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase
	ReleaseType *string `json:"release_type,omitempty"`
	// The last updated date of this app
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// DistributionGroupsDetailsForOrg200ApplicationJSONOriginEnum - The creation origin of this distribution group
type DistributionGroupsDetailsForOrg200ApplicationJSONOriginEnum string

const (
	DistributionGroupsDetailsForOrg200ApplicationJSONOriginEnumAppcenter DistributionGroupsDetailsForOrg200ApplicationJSONOriginEnum = "appcenter"
	DistributionGroupsDetailsForOrg200ApplicationJSONOriginEnumHockeyapp DistributionGroupsDetailsForOrg200ApplicationJSONOriginEnum = "hockeyapp"
)

func (e *DistributionGroupsDetailsForOrg200ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "appcenter":
		fallthrough
	case "hockeyapp":
		*e = DistributionGroupsDetailsForOrg200ApplicationJSONOriginEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DistributionGroupsDetailsForOrg200ApplicationJSONOriginEnum: %s", s)
	}
}

type DistributionGroupsDetailsForOrg200ApplicationJSON struct {
	// The apps associated with the distribution group
	Apps []DistributionGroupsDetailsForOrg200ApplicationJSONApps `json:"apps"`
	// The name of the distribution group
	DisplayName *string `json:"display_name,omitempty"`
	// The unique ID of the distribution group
	ID string `json:"id"`
	// Whether the distribution group is public
	IsPublic bool `json:"is_public"`
	// The name of the distribution group used in URLs
	Name string `json:"name"`
	// The creation origin of this distribution group
	Origin DistributionGroupsDetailsForOrg200ApplicationJSONOriginEnum `json:"origin"`
	// The count of apps associated with this distribution group
	TotalAppsCount float64 `json:"total_apps_count"`
	// The count of users in the distribution group
	TotalUsersCount float64 `json:"total_users_count"`
}

type DistributionGroupsDetailsForOrgResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	DistributionGroupsDetailsForOrg200ApplicationJSONAnies []DistributionGroupsDetailsForOrg200ApplicationJSON
	// Error
	DistributionGroupsDetailsForOrgDefaultApplicationJSONObject *DistributionGroupsDetailsForOrgDefaultApplicationJSON
}
