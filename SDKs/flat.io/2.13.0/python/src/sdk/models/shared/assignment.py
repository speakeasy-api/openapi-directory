"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import assignmentsubmission as shared_assignmentsubmission
from ..shared import assignmenttype_enum as shared_assignmenttype_enum
from ..shared import googleclassroomcoursework as shared_googleclassroomcoursework
from ..shared import mediaattachment as shared_mediaattachment
from ..shared import microsoftgraphassignment as shared_microsoftgraphassignment
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AssignmentCanvas:
    r"""A Canvas LMS assignment"""
    
    alternate_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alternateLink'), 'exclude': lambda f: f is None }})
    r"""Link to Canvas assignment"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the course on Canvas assignment"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AssignmentLti:
    r"""An LTI assignment"""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Resource ID in the LMS"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AssignmentMfc:
    r"""A MusicFirst Classroom assignment"""
    
    alternate_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alternateLink'), 'exclude': lambda f: f is None }})
    r"""Link to MusicFirst Classroom task"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the course on MusicFirst Task"""  
    
class AssignmentStateEnum(str, Enum):
    r"""State of the assignment"""
    DRAFT = 'draft'
    ACTIVE = 'active'
    ARCHIVED = 'archived'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Assignment:
    r"""Assignment details"""
    
    attachments: Optional[list[shared_mediaattachment.MediaAttachment]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attachments'), 'exclude': lambda f: f is None }})  
    canvas: Optional[AssignmentCanvas] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canvas'), 'exclude': lambda f: f is None }})
    r"""A Canvas LMS assignment"""  
    classroom: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classroom'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of the class where this assignment was posted"""  
    cover: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cover'), 'exclude': lambda f: f is None }})
    r"""The URL of the cover to display"""  
    cover_file: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coverFile'), 'exclude': lambda f: f is None }})
    r"""The id of the cover to display"""  
    creation_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The creation date of this assignment"""  
    creator: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creator'), 'exclude': lambda f: f is None }})
    r"""The User unique identifier of the creator of this assignment"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description and content of the assignment"""  
    due_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dueDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The due date of this assignment, late submissions will be marked as
    paste due.
    """  
    google_classroom: Optional[shared_googleclassroomcoursework.GoogleClassroomCoursework] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('googleClassroom'), 'exclude': lambda f: f is None }})
    r"""A coursework on Google Classroom"""  
    lti: Optional[AssignmentLti] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lti'), 'exclude': lambda f: f is None }})
    r"""An LTI assignment"""  
    max_points: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxPoints'), 'exclude': lambda f: f is None }})
    r"""If set, the grading will be enabled for the assignement"""  
    mfc: Optional[AssignmentMfc] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mfc'), 'exclude': lambda f: f is None }})
    r"""A MusicFirst Classroom assignment"""  
    microsoft_graph: Optional[shared_microsoftgraphassignment.MicrosoftGraphAssignment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('microsoftGraph'), 'exclude': lambda f: f is None }})
    r"""A Microsoft Teams asignment"""  
    scheduled_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scheduledDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The publication (scheduled) date of the assignment.
    If this one is specified, the assignment will only be listed to the teachers of the class.
    """  
    state: Optional[AssignmentStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""State of the assignment"""  
    submissions: Optional[list[shared_assignmentsubmission.AssignmentSubmission]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('submissions'), 'exclude': lambda f: f is None }})  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Title of the assignment"""  
    type: Optional[shared_assignmenttype_enum.AssignmentTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of the assignment"""  
    