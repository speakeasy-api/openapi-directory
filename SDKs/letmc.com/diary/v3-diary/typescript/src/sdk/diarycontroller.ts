/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class DiaryController {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Submit appointment feedback
   */
  diaryControllerAddFeedbackForm(
    req: operations.DiaryControllerAddFeedbackFormRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DiaryControllerAddFeedbackFormResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DiaryControllerAddFeedbackFormRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/diary/{shortName}/appointment/feedback",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "feedbackSubmissionModel",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiaryControllerAddFeedbackFormResponse =
        new operations.DiaryControllerAddFeedbackFormResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.diaryControllerAddFeedbackForm200ApplicationJSONString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            res.diaryControllerAddFeedbackForm200ApplicationXMLString =
              httpRes?.data;
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.diaryControllerAddFeedbackForm200TextJSONString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            res.diaryControllerAddFeedbackForm200TextXMLString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Submit appointment feedback
   */
  diaryControllerAddFeedbackJson(
    req: operations.DiaryControllerAddFeedbackJsonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DiaryControllerAddFeedbackJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DiaryControllerAddFeedbackJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/diary/{shortName}/appointment/feedback",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "feedbackSubmissionModel",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiaryControllerAddFeedbackJsonResponse =
        new operations.DiaryControllerAddFeedbackJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.diaryControllerAddFeedbackJSON200ApplicationJSONString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            res.diaryControllerAddFeedbackJson200ApplicationXMLString =
              httpRes?.data;
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.diaryControllerAddFeedbackJSON200TextJSONString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            res.diaryControllerAddFeedbackJson200TextXMLString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Submit appointment feedback
   */
  diaryControllerAddFeedbackRaw(
    req: operations.DiaryControllerAddFeedbackRawRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DiaryControllerAddFeedbackRawResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DiaryControllerAddFeedbackRawRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/diary/{shortName}/appointment/feedback",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "raw"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiaryControllerAddFeedbackRawResponse =
        new operations.DiaryControllerAddFeedbackRawResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.diaryControllerAddFeedbackRaw200ApplicationJSONString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            res.diaryControllerAddFeedbackRaw200ApplicationXMLString =
              httpRes?.data;
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.diaryControllerAddFeedbackRaw200TextJSONString = JSON.stringify(
              httpRes?.data
            );
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            res.diaryControllerAddFeedbackRaw200TextXMLString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Cancel an existing appointment using its unique identifier
   */
  diaryControllerCancelAppointment(
    req: operations.DiaryControllerCancelAppointmentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DiaryControllerCancelAppointmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DiaryControllerCancelAppointmentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/diary/{shortName}/appointment/{appointmentID}/cancel",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "patch",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiaryControllerCancelAppointmentResponse =
        new operations.DiaryControllerCancelAppointmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.diaryControllerCancelAppointment200ApplicationJSONString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            res.diaryControllerCancelAppointment200ApplicationXMLString =
              httpRes?.data;
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.diaryControllerCancelAppointment200TextJSONString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            res.diaryControllerCancelAppointment200TextXMLString =
              JSON.stringify(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete an existing appointment using its unique identifier
   */
  diaryControllerDeleteAppointment(
    req: operations.DiaryControllerDeleteAppointmentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DiaryControllerDeleteAppointmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DiaryControllerDeleteAppointmentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/diary/{shortName}/appointment",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiaryControllerDeleteAppointmentResponse =
        new operations.DiaryControllerDeleteAppointmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.diaryControllerDeleteAppointment200ApplicationJSONString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            res.diaryControllerDeleteAppointment200ApplicationXMLString =
              httpRes?.data;
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.diaryControllerDeleteAppointment200TextJSONString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            res.diaryControllerDeleteAppointment200TextXMLString =
              JSON.stringify(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a list of all available allocations for a date + 7 days for a specified appointment type
   */
  diaryControllerGetAllocations(
    req: operations.DiaryControllerGetAllocationsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DiaryControllerGetAllocationsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DiaryControllerGetAllocationsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/diary/{shortName}/allocations",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiaryControllerGetAllocationsResponse =
        new operations.DiaryControllerGetAllocationsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.diaryBookingModels = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.diaryBookingModels = utils.objectToClass(
              httpRes?.data,
              shared.DiaryBookingModel,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.diaryBookingModels = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.diaryBookingModels = utils.objectToClass(
              httpRes?.data,
              shared.DiaryBookingModel,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get an appointment by ID
   */
  diaryControllerGetAppointment(
    req: operations.DiaryControllerGetAppointmentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DiaryControllerGetAppointmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DiaryControllerGetAppointmentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/diary/{shortName}/appointment",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiaryControllerGetAppointmentResponse =
        new operations.DiaryControllerGetAppointmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.diaryAppointmentModel = utils.objectToClass(
              httpRes?.data,
              shared.DiaryAppointmentModel
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.diaryAppointmentModel = utils.objectToClass(
              httpRes?.data,
              shared.DiaryAppointmentModel
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * A collection of all diary appointment types
   */
  diaryControllerGetAppointmentTypes(
    req: operations.DiaryControllerGetAppointmentTypesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DiaryControllerGetAppointmentTypesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DiaryControllerGetAppointmentTypesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/diary/{shortName}/appointmenttypes",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiaryControllerGetAppointmentTypesResponse =
        new operations.DiaryControllerGetAppointmentTypesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.diaryAppointmentTypeModelResults = utils.objectToClass(
              httpRes?.data,
              shared.DiaryAppointmentTypeModelResults
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.diaryAppointmentTypeModelResults = utils.objectToClass(
              httpRes?.data,
              shared.DiaryAppointmentTypeModelResults
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * A collection of diary appointments linked to a company filtered between specific dates and by appointment type
   */
  diaryControllerGetAppointmentsBetweenDates(
    req: operations.DiaryControllerGetAppointmentsBetweenDatesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DiaryControllerGetAppointmentsBetweenDatesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DiaryControllerGetAppointmentsBetweenDatesRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/diary/{shortName}/appointmentsbetweendates",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiaryControllerGetAppointmentsBetweenDatesResponse =
        new operations.DiaryControllerGetAppointmentsBetweenDatesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.diaryAppointmentModelResults = utils.objectToClass(
              httpRes?.data,
              shared.DiaryAppointmentModelResults
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.diaryAppointmentModelResults = utils.objectToClass(
              httpRes?.data,
              shared.DiaryAppointmentModelResults
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves all recurring appointments:-
   */
  diaryControllerGetRecurringAppointments(
    req: operations.DiaryControllerGetRecurringAppointmentsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DiaryControllerGetRecurringAppointmentsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DiaryControllerGetRecurringAppointmentsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/diary/{shortName}/recurringappointment",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiaryControllerGetRecurringAppointmentsResponse =
        new operations.DiaryControllerGetRecurringAppointmentsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.diaryAppointmentModelResults = utils.objectToClass(
              httpRes?.data,
              shared.DiaryAppointmentModelResults
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.diaryAppointmentModelResults = utils.objectToClass(
              httpRes?.data,
              shared.DiaryAppointmentModelResults
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Post an appointment into a valid diary allocation
   */
  diaryControllerPostAppointmentForm(
    req: operations.DiaryControllerPostAppointmentFormRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DiaryControllerPostAppointmentFormResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DiaryControllerPostAppointmentFormRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/diary/{shortName}/appointment",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "diaryAppointmentDetails",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiaryControllerPostAppointmentFormResponse =
        new operations.DiaryControllerPostAppointmentFormResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.diaryControllerPostAppointmentForm200ApplicationJSONString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            res.diaryControllerPostAppointmentForm200ApplicationXMLString =
              httpRes?.data;
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.diaryControllerPostAppointmentForm200TextJSONString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            res.diaryControllerPostAppointmentForm200TextXMLString =
              JSON.stringify(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Post an appointment into a valid diary allocation
   */
  diaryControllerPostAppointmentJson(
    req: operations.DiaryControllerPostAppointmentJsonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DiaryControllerPostAppointmentJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DiaryControllerPostAppointmentJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/diary/{shortName}/appointment",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "diaryAppointmentDetails",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiaryControllerPostAppointmentJsonResponse =
        new operations.DiaryControllerPostAppointmentJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.diaryControllerPostAppointmentJSON200ApplicationJSONString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            res.diaryControllerPostAppointmentJson200ApplicationXMLString =
              httpRes?.data;
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.diaryControllerPostAppointmentJSON200TextJSONString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            res.diaryControllerPostAppointmentJson200TextXMLString =
              JSON.stringify(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Post an appointment into a valid diary allocation
   */
  diaryControllerPostAppointmentRaw(
    req: operations.DiaryControllerPostAppointmentRawRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DiaryControllerPostAppointmentRawResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DiaryControllerPostAppointmentRawRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/diary/{shortName}/appointment",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "raw"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiaryControllerPostAppointmentRawResponse =
        new operations.DiaryControllerPostAppointmentRawResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.diaryControllerPostAppointmentRaw200ApplicationJSONString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            res.diaryControllerPostAppointmentRaw200ApplicationXMLString =
              httpRes?.data;
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.diaryControllerPostAppointmentRaw200TextJSONString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            res.diaryControllerPostAppointmentRaw200TextXMLString =
              JSON.stringify(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update an existing appointment using its unique identifier
   */
  diaryControllerPutAppointmentForm(
    req: operations.DiaryControllerPutAppointmentFormRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DiaryControllerPutAppointmentFormResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DiaryControllerPutAppointmentFormRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/diary/{shortName}/appointment",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "diaryAppointmentDetails",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiaryControllerPutAppointmentFormResponse =
        new operations.DiaryControllerPutAppointmentFormResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.diaryControllerPutAppointmentForm200ApplicationJSONString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            res.diaryControllerPutAppointmentForm200ApplicationXMLString =
              httpRes?.data;
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.diaryControllerPutAppointmentForm200TextJSONString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            res.diaryControllerPutAppointmentForm200TextXMLString =
              JSON.stringify(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update an existing appointment using its unique identifier
   */
  diaryControllerPutAppointmentJson(
    req: operations.DiaryControllerPutAppointmentJsonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DiaryControllerPutAppointmentJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DiaryControllerPutAppointmentJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/diary/{shortName}/appointment",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "diaryAppointmentDetails",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiaryControllerPutAppointmentJsonResponse =
        new operations.DiaryControllerPutAppointmentJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.diaryControllerPutAppointmentJSON200ApplicationJSONString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            res.diaryControllerPutAppointmentJson200ApplicationXMLString =
              httpRes?.data;
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.diaryControllerPutAppointmentJSON200TextJSONString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            res.diaryControllerPutAppointmentJson200TextXMLString =
              JSON.stringify(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update an existing appointment using its unique identifier
   */
  diaryControllerPutAppointmentRaw(
    req: operations.DiaryControllerPutAppointmentRawRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DiaryControllerPutAppointmentRawResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DiaryControllerPutAppointmentRawRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/diary/{shortName}/appointment",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "raw"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiaryControllerPutAppointmentRawResponse =
        new operations.DiaryControllerPutAppointmentRawResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.diaryControllerPutAppointmentRaw200ApplicationJSONString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            res.diaryControllerPutAppointmentRaw200ApplicationXMLString =
              httpRes?.data;
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.diaryControllerPutAppointmentRaw200TextJSONString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            res.diaryControllerPutAppointmentRaw200TextXMLString =
              JSON.stringify(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Match Guest Parameters with existing applicants
   */
  diaryControllerSearchGuest(
    req: operations.DiaryControllerSearchGuestRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DiaryControllerSearchGuestResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DiaryControllerSearchGuestRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/diary/{shortname}/{branchID}/guest/search",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiaryControllerSearchGuestResponse =
        new operations.DiaryControllerSearchGuestResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.guestDiaryParametersResultsModel = utils.objectToClass(
              httpRes?.data,
              shared.GuestDiaryParametersResultsModel
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.guestDiaryParametersResultsModel = utils.objectToClass(
              httpRes?.data,
              shared.GuestDiaryParametersResultsModel
            );
          }
          break;
      }

      return res;
    });
  }
}
