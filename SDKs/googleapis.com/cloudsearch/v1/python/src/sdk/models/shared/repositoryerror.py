"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class RepositoryErrorTypeEnum(str, Enum):
    r"""The type of error."""
    UNKNOWN = 'UNKNOWN'
    NETWORK_ERROR = 'NETWORK_ERROR'
    DNS_ERROR = 'DNS_ERROR'
    CONNECTION_ERROR = 'CONNECTION_ERROR'
    AUTHENTICATION_ERROR = 'AUTHENTICATION_ERROR'
    AUTHORIZATION_ERROR = 'AUTHORIZATION_ERROR'
    SERVER_ERROR = 'SERVER_ERROR'
    QUOTA_EXCEEDED = 'QUOTA_EXCEEDED'
    SERVICE_UNAVAILABLE = 'SERVICE_UNAVAILABLE'
    CLIENT_ERROR = 'CLIENT_ERROR'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RepositoryError:
    r"""Errors when the connector is communicating to the source repository."""
    
    error_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorMessage'), 'exclude': lambda f: f is None }})
    r"""Message that describes the error. The maximum allowable length of the message is 8192 characters."""  
    http_status_code: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('httpStatusCode'), 'exclude': lambda f: f is None }})
    r"""Error codes. Matches the definition of HTTP status codes."""  
    type: Optional[RepositoryErrorTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of error."""  
    