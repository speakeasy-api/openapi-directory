// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeSecurity struct {
	APIKey *string             `security:"scheme,type=apiKey,subtype=header,name=Authorization"`
	Basic  *shared.SchemeBasic `security:"scheme,type=http,subtype=basic"`
	Oauth2 *string             `security:"scheme,type=oauth2,name=Authorization"`
}

type PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeRequest struct {
	RequestBody map[string]interface{} `request:"mediaType=application/json"`
	// Default value is false.
	//
	//
	// When set to true, runs merge asynchronously and
	// immediately returns a 202 with polling link to
	// the task-status API in the Location header.
	//
	//
	// When set to false, runs merge and waits for it to
	// complete, returning 200 when it succeeds. If the
	// duration of the merge exceeds a timeout threshold,
	// the API returns a 202 with polling link to the
	// task-status API in the Location header.
	Async *bool `queryParam:"style=form,explode=true,name=async"`
	// The id of the pull request.
	PullRequestID int64 `pathParam:"style=simple,explode=false,name=pull_request_id"`
	// This can either be the repository slug or the UUID of the repository,
	// surrounded by curly-braces, for example: `{repository UUID}`.
	//
	RepoSlug string `pathParam:"style=simple,explode=false,name=repo_slug"`
	// This can either be the workspace ID (slug) or the workspace UUID
	// surrounded by curly-braces, for example: `{workspace UUID}`.
	//
	Workspace string `pathParam:"style=simple,explode=false,name=workspace"`
}

type PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// If the merge took too long and timed out.
	// In this case the caller should retry the request later
	Error map[string]interface{}
	// The pull request object.
	Pullrequest map[string]interface{}
}
