// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type MeetingRegistrantQuestionUpdateSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type MeetingRegistrantQuestionUpdatePathParams struct {
	// The meeting ID in **long** format. The data type of this field is "long"(represented as int64 in JSON).
	//
	// While storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits.
	MeetingID int64 `pathParam:"style=simple,explode=false,name=meetingId"`
}

// MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsCustomQuestionsTypeEnum - Type of the question being asked.
type MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsCustomQuestionsTypeEnum string

const (
	MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsCustomQuestionsTypeEnumShort  MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsCustomQuestionsTypeEnum = "short"
	MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsCustomQuestionsTypeEnumSingle MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsCustomQuestionsTypeEnum = "single"
)

func (e *MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsCustomQuestionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "short":
		fallthrough
	case "single":
		*e = MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsCustomQuestionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsCustomQuestionsTypeEnum: %s", s)
	}
}

type MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsCustomQuestions struct {
	// Answer choices for the question. Can not be used for `short` question type as this type of question requires registrants to type out the answer.
	Answers []string `json:"answers,omitempty"`
	// Indicates whether or not the custom question is required to be answered by participants or not.
	Required *bool `json:"required,omitempty"`
	// Title of the custom question.
	Title *string `json:"title,omitempty"`
	// Type of the question being asked.
	Type *MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsCustomQuestionsTypeEnum `json:"type,omitempty"`
}

// MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnum - Field name of the question.
type MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnum string

const (
	MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnumAddress               MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnum = "address"
	MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnumCity                  MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnum = "city"
	MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnumCountry               MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnum = "country"
	MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnumZip                   MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnum = "zip"
	MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnumState                 MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnum = "state"
	MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnumPhone                 MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnum = "phone"
	MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnumIndustry              MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnum = "industry"
	MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnumOrg                   MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnum = "org"
	MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnumJobTitle              MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnum = "job_title"
	MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnumPurchasingTimeFrame   MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnum = "purchasing_time_frame"
	MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnumRoleInPurchaseProcess MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnum = "role_in_purchase_process"
	MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnumNoOfEmployees         MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnum = "no_of_employees"
	MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnumComments              MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnum = "comments"
)

func (e *MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "address":
		fallthrough
	case "city":
		fallthrough
	case "country":
		fallthrough
	case "zip":
		fallthrough
	case "state":
		fallthrough
	case "phone":
		fallthrough
	case "industry":
		fallthrough
	case "org":
		fallthrough
	case "job_title":
		fallthrough
	case "purchasing_time_frame":
		fallthrough
	case "role_in_purchase_process":
		fallthrough
	case "no_of_employees":
		fallthrough
	case "comments":
		*e = MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnum: %s", s)
	}
}

type MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestions struct {
	// Field name of the question.
	FieldName *MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestionsFieldNameEnum `json:"field_name,omitempty"`
	// Indicates whether or not the displayed fields are required to be filled out by registrants.
	Required *bool `json:"required,omitempty"`
}

// MeetingRegistrantQuestionUpdateMeetingRegistrantQuestions - Meeting Registrant Questions
type MeetingRegistrantQuestionUpdateMeetingRegistrantQuestions struct {
	// Array of Registrant Custom Questions
	CustomQuestions []MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsCustomQuestions `json:"custom_questions,omitempty" multipartForm:"name=custom_questions,json"`
	// Array of Registrant Questions
	Questions []MeetingRegistrantQuestionUpdateMeetingRegistrantQuestionsQuestions `json:"questions,omitempty" multipartForm:"name=questions,json"`
}

type MeetingRegistrantQuestionUpdateRequest struct {
	PathParams MeetingRegistrantQuestionUpdatePathParams
	// Meeting Registrant Questions
	Request  MeetingRegistrantQuestionUpdateMeetingRegistrantQuestions `request:"mediaType=application/json"`
	Security MeetingRegistrantQuestionUpdateSecurity
}

type MeetingRegistrantQuestionUpdateResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
