"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import branch_protection as shared_branch_protection
from ..shared import commit as shared_commit
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BranchWithProtectionLinks:
    
    html: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html') }})  
    self_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('self') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BranchWithProtection:
    r"""Branch With Protection"""
    
    links: BranchWithProtectionLinks = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_links') }})  
    commit: shared_commit.Commit = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commit') }})
    r"""Commit"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    protected: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protected') }})  
    protection: shared_branch_protection.BranchProtection = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protection') }})
    r"""Branch Protection"""  
    protection_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protection_url') }})  
    pattern: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pattern'), 'exclude': lambda f: f is None }})  
    required_approving_review_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required_approving_review_count'), 'exclude': lambda f: f is None }})  
    