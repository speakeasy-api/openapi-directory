// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type IdcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type IdcerRequestBodyCertificateParameters struct {
	// Application Number
	Aplno string `json:"aplno"`
	// Certificate Number
	Certno string `json:"certno"`
	// Security Code
	Sccd string `json:"sccd"`
}

// IdcerRequestBodyFormatEnum - The format of the certificate in response.
type IdcerRequestBodyFormatEnum string

const (
	IdcerRequestBodyFormatEnumPdf IdcerRequestBodyFormatEnum = "pdf"
)

func (e IdcerRequestBodyFormatEnum) ToPointer() *IdcerRequestBodyFormatEnum {
	return &e
}

func (e *IdcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = IdcerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IdcerRequestBodyFormatEnum: %v", v)
	}
}

// IdcerRequestBody - Request format
type IdcerRequestBody struct {
	CertificateParameters *IdcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format IdcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Idcer504ApplicationJSONErrorEnum string

const (
	Idcer504ApplicationJSONErrorEnumGatewayTimeout Idcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Idcer504ApplicationJSONErrorEnum) ToPointer() *Idcer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Idcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Idcer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Idcer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Idcer504ApplicationJSONErrorDescriptionEnum string

const (
	Idcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Idcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Idcer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Idcer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Idcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Idcer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Idcer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Idcer504ApplicationJSON - Gateway timeout
type Idcer504ApplicationJSON struct {
	Error            *Idcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Idcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Idcer503ApplicationJSONErrorEnum string

const (
	Idcer503ApplicationJSONErrorEnumServiceUnavailable Idcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Idcer503ApplicationJSONErrorEnum) ToPointer() *Idcer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Idcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Idcer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Idcer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Idcer503ApplicationJSONErrorDescriptionEnum string

const (
	Idcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Idcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Idcer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Idcer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Idcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Idcer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Idcer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Idcer503ApplicationJSON - Service unavailable
type Idcer503ApplicationJSON struct {
	Error            *Idcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Idcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Idcer502ApplicationJSONErrorEnum string

const (
	Idcer502ApplicationJSONErrorEnumBadGatewy Idcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Idcer502ApplicationJSONErrorEnum) ToPointer() *Idcer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Idcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Idcer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Idcer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Idcer502ApplicationJSONErrorDescriptionEnum string

const (
	Idcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Idcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Idcer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Idcer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Idcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Idcer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Idcer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Idcer502ApplicationJSON - Bad gateway
type Idcer502ApplicationJSON struct {
	Error            *Idcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Idcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Idcer500ApplicationJSONErrorEnum string

const (
	Idcer500ApplicationJSONErrorEnumInternalServerError Idcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Idcer500ApplicationJSONErrorEnum) ToPointer() *Idcer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Idcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Idcer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Idcer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Idcer500ApplicationJSONErrorDescriptionEnum string

const (
	Idcer500ApplicationJSONErrorDescriptionEnumInternalServerError Idcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Idcer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Idcer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Idcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Idcer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Idcer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Idcer500ApplicationJSON - Internal server error
type Idcer500ApplicationJSON struct {
	Error            *Idcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Idcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Idcer404ApplicationJSONErrorEnum string

const (
	Idcer404ApplicationJSONErrorEnumRecordNotFound Idcer404ApplicationJSONErrorEnum = "record_not_found"
	Idcer404ApplicationJSONErrorEnumURLNotFound    Idcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Idcer404ApplicationJSONErrorEnum) ToPointer() *Idcer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Idcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Idcer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Idcer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Idcer404ApplicationJSONErrorDescriptionEnum string

const (
	Idcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Idcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Idcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Idcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Idcer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Idcer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Idcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Idcer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Idcer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Idcer404ApplicationJSON - No record found
type Idcer404ApplicationJSON struct {
	Error            *Idcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Idcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Idcer401ApplicationJSONErrorEnum string

const (
	Idcer401ApplicationJSONErrorEnumInvalidAuthentication Idcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Idcer401ApplicationJSONErrorEnumInvalidAuthorization  Idcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Idcer401ApplicationJSONErrorEnum) ToPointer() *Idcer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Idcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Idcer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Idcer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Idcer401ApplicationJSONErrorDescriptionEnum string

const (
	Idcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Idcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Idcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Idcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Idcer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Idcer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Idcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Idcer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Idcer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Idcer401ApplicationJSON - Unauthorized access
type Idcer401ApplicationJSON struct {
	Error            *Idcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Idcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Idcer400ApplicationJSONErrorEnum string

const (
	Idcer400ApplicationJSONErrorEnumMissingParameter Idcer400ApplicationJSONErrorEnum = "missing_parameter"
	Idcer400ApplicationJSONErrorEnumInvalidParameter Idcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Idcer400ApplicationJSONErrorEnumInvalidFormat    Idcer400ApplicationJSONErrorEnum = "invalid_format"
	Idcer400ApplicationJSONErrorEnumInvalidTxnid     Idcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Idcer400ApplicationJSONErrorEnumInvalidConsentid Idcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Idcer400ApplicationJSONErrorEnum) ToPointer() *Idcer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Idcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Idcer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Idcer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Idcer400ApplicationJSONErrorDescriptionEnum string

const (
	Idcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Idcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Idcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Idcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Idcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Idcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Idcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Idcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Idcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Idcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Idcer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Idcer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Idcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Idcer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Idcer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Idcer400ApplicationJSON - Bad request
type Idcer400ApplicationJSON struct {
	Error            *Idcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Idcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type IdcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Idcer400ApplicationJSONObject *Idcer400ApplicationJSON
	// Unauthorized access
	Idcer401ApplicationJSONObject *Idcer401ApplicationJSON
	// No record found
	Idcer404ApplicationJSONObject *Idcer404ApplicationJSON
	// Internal server error
	Idcer500ApplicationJSONObject *Idcer500ApplicationJSON
	// Bad gateway
	Idcer502ApplicationJSONObject *Idcer502ApplicationJSON
	// Service unavailable
	Idcer503ApplicationJSONObject *Idcer503ApplicationJSON
	// Gateway timeout
	Idcer504ApplicationJSONObject *Idcer504ApplicationJSON
}
