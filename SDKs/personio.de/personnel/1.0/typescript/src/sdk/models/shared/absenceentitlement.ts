/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export class AbsenceEntitlementValueAttributes extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "entitlement" })
  entitlement?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export enum AbsenceEntitlementValueTypeEnum {
  TimeOffType = "TimeOffType",
}

export class AbsenceEntitlementValue extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "attributes" })
  @Type(() => AbsenceEntitlementValueAttributes)
  attributes?: AbsenceEntitlementValueAttributes;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: AbsenceEntitlementValueTypeEnum;
}

export class AbsenceEntitlement extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "label" })
  label: string;

  @SpeakeasyMetadata({ elemType: AbsenceEntitlementValue })
  @Expose({ name: "value" })
  @Type(() => AbsenceEntitlementValue)
  value: AbsenceEntitlementValue[];
}
