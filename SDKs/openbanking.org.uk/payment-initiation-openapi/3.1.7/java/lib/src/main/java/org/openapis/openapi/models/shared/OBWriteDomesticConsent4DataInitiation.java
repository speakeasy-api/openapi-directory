/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * OBWriteDomesticConsent4DataInitiation - The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single domestic payment.
 */
public class OBWriteDomesticConsent4DataInitiation {
    /**
     * Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
     */
    @JsonProperty("CreditorAccount")
    public OBWriteDomesticConsent4DataInitiationCreditorAccount creditorAccount;

    public OBWriteDomesticConsent4DataInitiation withCreditorAccount(OBWriteDomesticConsent4DataInitiationCreditorAccount creditorAccount) {
        this.creditorAccount = creditorAccount;
        return this;
    }
    
    /**
     * Information that locates and identifies a specific address, as defined by postal services.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditorPostalAddress")
    public OBPostalAddress6 creditorPostalAddress;

    public OBWriteDomesticConsent4DataInitiation withCreditorPostalAddress(OBPostalAddress6 creditorPostalAddress) {
        this.creditorPostalAddress = creditorPostalAddress;
        return this;
    }
    
    /**
     * Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DebtorAccount")
    public OBWriteDomesticConsent4DataInitiationDebtorAccount debtorAccount;

    public OBWriteDomesticConsent4DataInitiation withDebtorAccount(OBWriteDomesticConsent4DataInitiationDebtorAccount debtorAccount) {
        this.debtorAccount = debtorAccount;
        return this;
    }
    
    /**
     * Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
     * Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
     * OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
     */
    @JsonProperty("EndToEndIdentification")
    public String endToEndIdentification;

    public OBWriteDomesticConsent4DataInitiation withEndToEndIdentification(String endToEndIdentification) {
        this.endToEndIdentification = endToEndIdentification;
        return this;
    }
    
    /**
     * Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
     * Usage: This amount has to be transported unchanged through the transaction chain.
     */
    @JsonProperty("InstructedAmount")
    public OBWriteDomesticConsent4DataInitiationInstructedAmount instructedAmount;

    public OBWriteDomesticConsent4DataInitiation withInstructedAmount(OBWriteDomesticConsent4DataInitiationInstructedAmount instructedAmount) {
        this.instructedAmount = instructedAmount;
        return this;
    }
    
    /**
     * Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
     * Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
     */
    @JsonProperty("InstructionIdentification")
    public String instructionIdentification;

    public OBWriteDomesticConsent4DataInitiation withInstructionIdentification(String instructionIdentification) {
        this.instructionIdentification = instructionIdentification;
        return this;
    }
    
    /**
     * User community specific instrument.
     * Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LocalInstrument")
    public String localInstrument;

    public OBWriteDomesticConsent4DataInitiation withLocalInstrument(String localInstrument) {
        this.localInstrument = localInstrument;
        return this;
    }
    
    /**
     * Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RemittanceInformation")
    public OBWriteDomesticConsent4DataInitiationRemittanceInformation remittanceInformation;

    public OBWriteDomesticConsent4DataInitiation withRemittanceInformation(OBWriteDomesticConsent4DataInitiationRemittanceInformation remittanceInformation) {
        this.remittanceInformation = remittanceInformation;
        return this;
    }
    
    /**
     * Additional information that can not be captured in the structured fields and/or any other specific block.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SupplementaryData")
    public java.util.Map<String, Object> supplementaryData;

    public OBWriteDomesticConsent4DataInitiation withSupplementaryData(java.util.Map<String, Object> supplementaryData) {
        this.supplementaryData = supplementaryData;
        return this;
    }
    
    public OBWriteDomesticConsent4DataInitiation(@JsonProperty("CreditorAccount") OBWriteDomesticConsent4DataInitiationCreditorAccount creditorAccount, @JsonProperty("EndToEndIdentification") String endToEndIdentification, @JsonProperty("InstructedAmount") OBWriteDomesticConsent4DataInitiationInstructedAmount instructedAmount, @JsonProperty("InstructionIdentification") String instructionIdentification) {
        this.creditorAccount = creditorAccount;
        this.endToEndIdentification = endToEndIdentification;
        this.instructedAmount = instructedAmount;
        this.instructionIdentification = instructionIdentification;
  }
}
