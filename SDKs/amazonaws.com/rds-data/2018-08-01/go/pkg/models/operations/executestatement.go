// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ExecuteStatementRequestBodyFormatRecordsAsEnum - <p>A value that indicates whether to format the result set as a single JSON string. This parameter only applies to <code>SELECT</code> statements and is ignored for other types of statements. Allowed values are <code>NONE</code> and <code>JSON</code>. The default value is <code>NONE</code>. The result is returned in the <code>formattedRecords</code> field.</p> <p>For usage information about the JSON format for result sets, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API</a> in the <i>Amazon Aurora User Guide</i>.</p>
type ExecuteStatementRequestBodyFormatRecordsAsEnum string

const (
	ExecuteStatementRequestBodyFormatRecordsAsEnumNone ExecuteStatementRequestBodyFormatRecordsAsEnum = "NONE"
	ExecuteStatementRequestBodyFormatRecordsAsEnumJSON ExecuteStatementRequestBodyFormatRecordsAsEnum = "JSON"
)

func (e ExecuteStatementRequestBodyFormatRecordsAsEnum) ToPointer() *ExecuteStatementRequestBodyFormatRecordsAsEnum {
	return &e
}

func (e *ExecuteStatementRequestBodyFormatRecordsAsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NONE":
		fallthrough
	case "JSON":
		*e = ExecuteStatementRequestBodyFormatRecordsAsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecuteStatementRequestBodyFormatRecordsAsEnum: %v", v)
	}
}

// ExecuteStatementRequestBodyResultSetOptions - Options that control how the result set is returned.
type ExecuteStatementRequestBodyResultSetOptions struct {
	DecimalReturnType *shared.DecimalReturnTypeEnum `json:"decimalReturnType,omitempty"`
	LongReturnType    *shared.LongReturnTypeEnum    `json:"longReturnType,omitempty"`
}

type ExecuteStatementRequestBody struct {
	// <p>A value that indicates whether to continue running the statement after the call times out. By default, the statement stops running when the call times out.</p> <note> <p>For DDL statements, we recommend continuing to run the statement after the call times out. When a DDL statement terminates before it is finished running, it can result in errors and possibly corrupted data structures.</p> </note>
	ContinueAfterTimeout *bool `json:"continueAfterTimeout,omitempty"`
	// The name of the database.
	Database *string `json:"database,omitempty"`
	// <p>A value that indicates whether to format the result set as a single JSON string. This parameter only applies to <code>SELECT</code> statements and is ignored for other types of statements. Allowed values are <code>NONE</code> and <code>JSON</code>. The default value is <code>NONE</code>. The result is returned in the <code>formattedRecords</code> field.</p> <p>For usage information about the JSON format for result sets, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API</a> in the <i>Amazon Aurora User Guide</i>.</p>
	FormatRecordsAs *ExecuteStatementRequestBodyFormatRecordsAsEnum `json:"formatRecordsAs,omitempty"`
	// A value that indicates whether to include metadata in the results.
	IncludeResultMetadata *bool `json:"includeResultMetadata,omitempty"`
	// <p>The parameters for the SQL statement.</p> <note> <p>Array parameters are not supported.</p> </note>
	Parameters []shared.SQLParameter `json:"parameters,omitempty"`
	// The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
	ResourceArn string `json:"resourceArn"`
	// Options that control how the result set is returned.
	ResultSetOptions *ExecuteStatementRequestBodyResultSetOptions `json:"resultSetOptions,omitempty"`
	// <p>The name of the database schema.</p> <note> <p>Currently, the <code>schema</code> parameter isn't supported.</p> </note>
	Schema *string `json:"schema,omitempty"`
	// <p>The ARN of the secret that enables access to the DB cluster. Enter the database user name and password for the credentials in the secret.</p> <p>For information about creating the secret, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/create_database_secret.html">Create a database secret</a>.</p>
	SecretArn string `json:"secretArn"`
	// The SQL statement to run.
	SQL string `json:"sql"`
	// <p>The identifier of a transaction that was started by using the <code>BeginTransaction</code> operation. Specify the transaction ID of the transaction that you want to include the SQL statement in.</p> <p>If the SQL statement is not part of a transaction, don't set this parameter.</p>
	TransactionID *string `json:"transactionId,omitempty"`
}

type ExecuteStatementRequest struct {
	RequestBody       ExecuteStatementRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type ExecuteStatementResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// BadRequestException
	BadRequestException interface{}
	ContentType         string
	// Success
	ExecuteStatementResponse *shared.ExecuteStatementResponse
	// ForbiddenException
	ForbiddenException interface{}
	// InternalServerErrorException
	InternalServerErrorException interface{}
	StatusCode                   int
	RawResponse                  *http.Response
	// ServiceUnavailableError
	ServiceUnavailableError interface{}
	// StatementTimeoutException
	StatementTimeoutException interface{}
}
