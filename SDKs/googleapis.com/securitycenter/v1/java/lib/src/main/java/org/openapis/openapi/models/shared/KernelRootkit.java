/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * KernelRootkit - Kernel mode rootkit signatures.
 */
public class KernelRootkit {
    /**
     * Rootkit name, when available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public KernelRootkit withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * True if unexpected modifications of kernel code memory are present.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unexpectedCodeModification")
    public Boolean unexpectedCodeModification;

    public KernelRootkit withUnexpectedCodeModification(Boolean unexpectedCodeModification) {
        this.unexpectedCodeModification = unexpectedCodeModification;
        return this;
    }
    
    /**
     * True if `ftrace` points are present with callbacks pointing to regions that are not in the expected kernel or module code range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unexpectedFtraceHandler")
    public Boolean unexpectedFtraceHandler;

    public KernelRootkit withUnexpectedFtraceHandler(Boolean unexpectedFtraceHandler) {
        this.unexpectedFtraceHandler = unexpectedFtraceHandler;
        return this;
    }
    
    /**
     * True if interrupt handlers that are are not in the expected kernel or module code regions are present.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unexpectedInterruptHandler")
    public Boolean unexpectedInterruptHandler;

    public KernelRootkit withUnexpectedInterruptHandler(Boolean unexpectedInterruptHandler) {
        this.unexpectedInterruptHandler = unexpectedInterruptHandler;
        return this;
    }
    
    /**
     * True if kernel code pages that are not in the expected kernel or module code regions are present.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unexpectedKernelCodePages")
    public Boolean unexpectedKernelCodePages;

    public KernelRootkit withUnexpectedKernelCodePages(Boolean unexpectedKernelCodePages) {
        this.unexpectedKernelCodePages = unexpectedKernelCodePages;
        return this;
    }
    
    /**
     * True if `kprobe` points are present with callbacks pointing to regions that are not in the expected kernel or module code range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unexpectedKprobeHandler")
    public Boolean unexpectedKprobeHandler;

    public KernelRootkit withUnexpectedKprobeHandler(Boolean unexpectedKprobeHandler) {
        this.unexpectedKprobeHandler = unexpectedKprobeHandler;
        return this;
    }
    
    /**
     * True if unexpected processes in the scheduler run queue are present. Such processes are in the run queue, but not in the process task list.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unexpectedProcessesInRunqueue")
    public Boolean unexpectedProcessesInRunqueue;

    public KernelRootkit withUnexpectedProcessesInRunqueue(Boolean unexpectedProcessesInRunqueue) {
        this.unexpectedProcessesInRunqueue = unexpectedProcessesInRunqueue;
        return this;
    }
    
    /**
     * True if unexpected modifications of kernel read-only data memory are present.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unexpectedReadOnlyDataModification")
    public Boolean unexpectedReadOnlyDataModification;

    public KernelRootkit withUnexpectedReadOnlyDataModification(Boolean unexpectedReadOnlyDataModification) {
        this.unexpectedReadOnlyDataModification = unexpectedReadOnlyDataModification;
        return this;
    }
    
    /**
     * True if system call handlers that are are not in the expected kernel or module code regions are present.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unexpectedSystemCallHandler")
    public Boolean unexpectedSystemCallHandler;

    public KernelRootkit withUnexpectedSystemCallHandler(Boolean unexpectedSystemCallHandler) {
        this.unexpectedSystemCallHandler = unexpectedSystemCallHandler;
        return this;
    }
    
    public KernelRootkit(){}
}
