"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GetQueryExtensionExtensionEnum(str, Enum):
    r"""extension"""
    ATOM = 'atom'
    RSS = 'rss'
    HTML = 'html'
    JSON = 'json'


@dataclasses.dataclass
class GetQueryExtensionRequest:
    
    extension: GetQueryExtensionExtensionEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'extension', 'style': 'simple', 'explode': False }})
    r"""extension"""  
    q: str = dataclasses.field(metadata={'query_param': { 'field_name': 'q', 'style': 'form', 'explode': True }})  
    count: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'count', 'style': 'form', 'explode': True }})  
    in_url_prefixes: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'inUrlPrefixes', 'style': 'form', 'explode': True }})  
    start: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'start', 'style': 'form', 'explode': True }})  
    subdomains: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'subdomains', 'style': 'form', 'explode': True }})  
    

@dataclasses.dataclass
class GetQueryExtensionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    