"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import automlconfig as shared_automlconfig
from ..shared import hpoconfig as shared_hpoconfig
from ..shared import optimizationobjective as shared_optimizationobjective
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SolutionConfig:
    r"""Describes the configuration properties for the solution."""
    
    algorithm_hyper_parameters: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('algorithmHyperParameters'), 'exclude': lambda f: f is None }})  
    auto_ml_config: Optional[shared_automlconfig.AutoMLConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoMLConfig'), 'exclude': lambda f: f is None }})  
    event_value_threshold: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventValueThreshold'), 'exclude': lambda f: f is None }})  
    feature_transformation_parameters: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('featureTransformationParameters'), 'exclude': lambda f: f is None }})  
    hpo_config: Optional[shared_hpoconfig.HPOConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hpoConfig'), 'exclude': lambda f: f is None }})  
    optimization_objective: Optional[shared_optimizationobjective.OptimizationObjective] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('optimizationObjective'), 'exclude': lambda f: f is None }})  
    