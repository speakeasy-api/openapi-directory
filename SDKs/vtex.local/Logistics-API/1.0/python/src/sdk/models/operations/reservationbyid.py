"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ReservationByIDRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand"""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Type of the content being sent"""  
    reservation_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'reservationId', 'style': 'simple', 'explode': False }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReservationByID200ApplicationJSONSLARequestItem1Dimension1:
    
    height: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height') }})  
    length: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('length') }})  
    max_sum_dimension: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxSumDimension') }})  
    weight: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weight') }})  
    width: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReservationByID200ApplicationJSONSLARequestItem1:
    
    additional_handling_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalHandlingTime') }})  
    dimension: ReservationByID200ApplicationJSONSLARequestItem1Dimension1 = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dimension') }})  
    group_item_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupItemId') }})  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    kit_item: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kitItem') }})  
    modal: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modal') }})  
    price: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price') }})  
    quantity: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity') }})  
    unlimited_quantity: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unlimitedQuantity') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReservationByID200ApplicationJSONSLARequestLocation1InStore1:
    
    is_checked_in: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsCheckedIn') }})  
    store_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StoreId') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReservationByID200ApplicationJSONSLARequestLocation1:
    
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})  
    delivery_point_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryPointId') }})  
    in_store: ReservationByID200ApplicationJSONSLARequestLocation1InStore1 = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inStore') }})  
    point: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('point') }})  
    zip_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zipCode') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReservationByID200ApplicationJSONSLARequest:
    
    delivery_windows: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryWindows'), 'exclude': lambda f: f is None }})  
    dock_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dockId'), 'exclude': lambda f: f is None }})  
    dock_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dockTime'), 'exclude': lambda f: f is None }})  
    freight_table_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('freightTableId'), 'exclude': lambda f: f is None }})  
    freight_table_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('freightTableName'), 'exclude': lambda f: f is None }})  
    item: Optional[ReservationByID200ApplicationJSONSLARequestItem1] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('item'), 'exclude': lambda f: f is None }})  
    list_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listPrice'), 'exclude': lambda f: f is None }})  
    location: Optional[ReservationByID200ApplicationJSONSLARequestLocation1] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})  
    pickup_store_info: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pickupStoreInfo'), 'exclude': lambda f: f is None }})  
    promotional_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('promotionalPrice'), 'exclude': lambda f: f is None }})  
    sla_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slaType'), 'exclude': lambda f: f is None }})  
    sla_type_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slaTypeName'), 'exclude': lambda f: f is None }})  
    time_to_dock_plus_dock_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeToDockPlusDockTime'), 'exclude': lambda f: f is None }})  
    total_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalTime'), 'exclude': lambda f: f is None }})  
    transit_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transitTime'), 'exclude': lambda f: f is None }})  
    ware_house_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wareHouseId'), 'exclude': lambda f: f is None }})  
    wms_end_point: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wmsEndPoint'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReservationByID200ApplicationJSON:
    r"""OK"""
    
    authorized_date_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuthorizedDateUtc'), 'exclude': lambda f: f is None }})
    r"""Authorized date in UTC."""  
    canceled_date_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CanceledDateUtc'), 'exclude': lambda f: f is None }})
    r"""Canceled date in UTC."""  
    confirmed_date_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConfirmedDateUtc'), 'exclude': lambda f: f is None }})
    r"""Confirmed date in UTC."""  
    errors: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Errors'), 'exclude': lambda f: f is None }})
    r"""Information on errors, if there are any."""  
    is_sucess: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsSucess'), 'exclude': lambda f: f is None }})  
    last_update_date_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastUpdateDateUtc'), 'exclude': lambda f: f is None }})
    r"""Date of the last update in UTC."""  
    lock_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LockId'), 'exclude': lambda f: f is None }})
    r"""Lock ID."""  
    maximum_confirmation_date_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaximumConfirmationDateUtc'), 'exclude': lambda f: f is None }})
    r"""Maximum confirmation date in UTC."""  
    pickup_point_item_options: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PickupPointItemOptions'), 'exclude': lambda f: f is None }})
    r"""Pickup point item options."""  
    reservation_date_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReservationDateUtc'), 'exclude': lambda f: f is None }})
    r"""Reservation date in UTC."""  
    sales_channel: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SalesChannel'), 'exclude': lambda f: f is None }})
    r"""Sales channel."""  
    sla_request: Optional[list[ReservationByID200ApplicationJSONSLARequest]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SlaRequest'), 'exclude': lambda f: f is None }})
    r"""Information on SLA request."""  
    status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})
    r"""Reservation status, being:
    
    `0`: `NotCommitted`
    
    `1`: `Authorized`
    
    `2`: `Confirmed`
    
    `3`: `Canceled_AbortedCommitted`
    
    `4`: `Canceled_AuthorizationExpired`
    
    `5`: `Canceled_Manually`
    """  
    

@dataclasses.dataclass
class ReservationByIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    reservation_by_id_200_application_json_object: Optional[ReservationByID200ApplicationJSON] = dataclasses.field(default=None)
    r"""OK"""  
    