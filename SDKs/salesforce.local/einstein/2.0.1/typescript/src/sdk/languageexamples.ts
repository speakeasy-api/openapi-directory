/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Resources that manage text examples.
 */
export class LanguageExamples {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get All Examples
   *
   * @remarks
   * Returns all the examples for the specified dataset,
   */
  getExamples(
    req: operations.GetExamplesRequest,
    security: operations.GetExamplesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetExamplesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetExamplesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/language/datasets/{datasetId}/examples",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetExamplesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetExamplesResponse =
        new operations.GetExamplesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.exampleList = utils.objectToClass(
              httpRes?.data,
              shared.ExampleList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get All Examples for Label
   *
   * @remarks
   * Returns all the examples for the specified label. Returns both uploaded examples and feedback examples.
   */
  getExamplesByLabel(
    req: operations.GetExamplesByLabelRequest,
    security: operations.GetExamplesByLabelSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetExamplesByLabelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetExamplesByLabelRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/language/examples";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetExamplesByLabelSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetExamplesByLabelResponse =
        new operations.GetExamplesByLabelResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.exampleList = utils.objectToClass(
              httpRes?.data,
              shared.ExampleList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a Feedback Example
   *
   * @remarks
   * Adds a feedback example to the dataset associated with the specified model.
   */
  provideFeedback(
    req: operations.ProvideFeedbackRequestBody,
    security: operations.ProvideFeedbackSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ProvideFeedbackResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProvideFeedbackRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/language/feedback";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ProvideFeedbackSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProvideFeedbackResponse =
        new operations.ProvideFeedbackResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.example = utils.objectToClass(httpRes?.data, shared.Example);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create Examples From a File
   *
   * @remarks
   * Adds examples from a .csv, .tsv, or .json file to a dataset.
   */
  updateDatasetAsync(
    req: operations.UpdateDatasetAsyncRequest,
    security: operations.UpdateDatasetAsyncSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateDatasetAsyncResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateDatasetAsyncRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/language/datasets/{datasetId}/upload",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateDatasetAsyncSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateDatasetAsyncResponse =
        new operations.UpdateDatasetAsyncResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dataset = utils.objectToClass(httpRes?.data, shared.Dataset);
          }
          break;
      }

      return res;
    });
  }
}
