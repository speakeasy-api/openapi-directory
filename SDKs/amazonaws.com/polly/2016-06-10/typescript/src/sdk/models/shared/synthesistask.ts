/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { EngineEnum } from "./engineenum";
import { LanguageCodeEnum } from "./languagecodeenum";
import { OutputFormatEnum } from "./outputformatenum";
import { SpeechMarkTypeEnum } from "./speechmarktypeenum";
import { TaskStatusEnum } from "./taskstatusenum";
import { TextTypeEnum } from "./texttypeenum";
import { VoiceIdEnum } from "./voiceidenum";
import { Expose, Transform } from "class-transformer";

/**
 * SynthesisTask object that provides information about a speech synthesis task.
 */
export class SynthesisTask extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "CreationTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Engine" })
  engine?: EngineEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "LanguageCode" })
  languageCode?: LanguageCodeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "LexiconNames" })
  lexiconNames?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "OutputFormat" })
  outputFormat?: OutputFormatEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "OutputUri" })
  outputUri?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "RequestCharacters" })
  requestCharacters?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "SampleRate" })
  sampleRate?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "SnsTopicArn" })
  snsTopicArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "SpeechMarkTypes" })
  speechMarkTypes?: SpeechMarkTypeEnum[];

  @SpeakeasyMetadata()
  @Expose({ name: "TaskId" })
  taskId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "TaskStatus" })
  taskStatus?: TaskStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "TaskStatusReason" })
  taskStatusReason?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "TextType" })
  textType?: TextTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "VoiceId" })
  voiceId?: VoiceIdEnum;
}
