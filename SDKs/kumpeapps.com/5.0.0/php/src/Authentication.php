<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Authentication 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Compromise app key
     * 
     * Pass an app key to mark it as compromised. This may be submitted by the app owner or a concerned party that has optained the compromised app key.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppkeyPatchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppkeyPatchResponse
     */
	public function appkeyPatch(
        \OpenAPI\OpenAPI\Models\Operations\AppkeyPatchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppkeyPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/appkey');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppkeyPatchRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppkeyPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse202 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse202', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Request app key
     * 
     * Request a new app key by passing username and password for app account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppkeyPostRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppkeyPostResponse
     */
	public function appkeyPost(
        \OpenAPI\OpenAPI\Models\Operations\AppkeyPostRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppkeyPostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/appkey');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppkeyPostRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppkeyPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse201 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse201', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deactivate app key
     * 
     * Pass your app key to deactivate the key
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppkeyPutRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppkeyPutSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppkeyPutResponse
     */
	public function appkeyPut(
        \OpenAPI\OpenAPI\Models\Operations\AppkeyPutRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppkeyPutSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppkeyPutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/appkey');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppkeyPutRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppkeyPutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse202 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse202', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Compromise app key
     * 
     * Pass an app key to mark it as compromised. This may be submitted by the app owner or a concerned party that has optained the compromised app key.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AuthAppkeyPatchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AuthAppkeyPatchResponse
     */
	public function authAppkeyPatch(
        \OpenAPI\OpenAPI\Models\Operations\AuthAppkeyPatchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AuthAppkeyPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/authentication/appkey');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AuthAppkeyPatchRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AuthAppkeyPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse202 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse202', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Request app key
     * 
     * Request a new app key by passing username and password for app account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AuthAppkeyPostRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AuthAppkeyPostResponse
     */
	public function authAppkeyPost(
        \OpenAPI\OpenAPI\Models\Operations\AuthAppkeyPostRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AuthAppkeyPostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/authentication/appkey');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AuthAppkeyPostRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AuthAppkeyPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse201 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse201', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deactivate app key
     * 
     * Pass your app key to deactivate the key
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AuthAppkeyPutRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AuthAppkeyPutSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AuthAppkeyPutResponse
     */
	public function authAppkeyPut(
        \OpenAPI\OpenAPI\Models\Operations\AuthAppkeyPutRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AuthAppkeyPutSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AuthAppkeyPutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/authentication/appkey');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AuthAppkeyPutRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AuthAppkeyPutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse202 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse202', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Request auth key for user (login user)
     * 
     * Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyGetResponse
     */
	public function authAuthkeyGet(
        \OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/authentication/authkey');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse2011 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse2011', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndThree = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndThree', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 449) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndFortyNine = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndFortyNine', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Compromise auth key
     * 
     * Mark user auth key as compromised
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyPatchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyPatchResponse
     */
	public function authAuthkeyPatch(
        \OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyPatchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/authentication/authkey');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyPatchRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse202 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse202', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Request auth key for user (login user)
     * 
     * Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyPostRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyPostSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyPostResponse
     */
	public function authAuthkeyPost(
        \OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyPostRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyPostSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyPostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/authentication/authkey');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyPostRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse2011 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse2011', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndThree = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndThree', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 449) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndFortyNine = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndFortyNine', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deactivate auth key (logout)
     * 
     * Deactivate auth key for user logging them out of your application
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyPutRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyPutSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyPutResponse
     */
	public function authAuthkeyPut(
        \OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyPutRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyPutSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyPutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/authentication/authkey');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyPutRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AuthAuthkeyPutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse202 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse202', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Verifies YubiKey OTP for authenticated user
     * 
     * Verifies YubiKey OTP for authenticated user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AuthVerifyotpGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AuthVerifyotpGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AuthVerifyotpGetResponse
     */
	public function authVerifyotpGet(
        \OpenAPI\OpenAPI\Models\Operations\AuthVerifyotpGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AuthVerifyotpGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AuthVerifyotpGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/authentication/verifyotp');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AuthVerifyotpGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AuthVerifyotpGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndThree = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndThree', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Request auth key for user (login user)
     * 
     * Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AuthkeyGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AuthkeyGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AuthkeyGetResponse
     */
	public function authkeyGet(
        \OpenAPI\OpenAPI\Models\Operations\AuthkeyGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AuthkeyGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AuthkeyGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/authkey');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AuthkeyGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AuthkeyGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse2011 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse2011', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndThree = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndThree', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 449) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndFortyNine = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndFortyNine', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Compromise auth key
     * 
     * Mark user auth key as compromised
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AuthkeyPatchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AuthkeyPatchResponse
     */
	public function authkeyPatch(
        \OpenAPI\OpenAPI\Models\Operations\AuthkeyPatchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AuthkeyPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/authkey');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AuthkeyPatchRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AuthkeyPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse202 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse202', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Request auth key for user (login user)
     * 
     * Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AuthkeyPostRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AuthkeyPostSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AuthkeyPostResponse
     */
	public function authkeyPost(
        \OpenAPI\OpenAPI\Models\Operations\AuthkeyPostRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AuthkeyPostSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AuthkeyPostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/authkey');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AuthkeyPostRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AuthkeyPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse2011 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse2011', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndThree = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndThree', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 449) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndFortyNine = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndFortyNine', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deactivate auth key (logout)
     * 
     * Deactivate auth key for user logging them out of your application
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AuthkeyPutRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AuthkeyPutSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AuthkeyPutResponse
     */
	public function authkeyPut(
        \OpenAPI\OpenAPI\Models\Operations\AuthkeyPutRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AuthkeyPutSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AuthkeyPutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/authkey');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AuthkeyPutRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AuthkeyPutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse202 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse202', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
}