/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class DashboardWebinarDetailSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth: string;
}

/**
 * The webinar type.
 */
export enum DashboardWebinarDetailTypeEnum {
  Past = "past",
  Live = "live",
}

export class DashboardWebinarDetailRequest extends SpeakeasyBase {
  /**
   * The webinar type.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=type" })
  type?: DashboardWebinarDetailTypeEnum;

  /**
   * The webinar ID or the webinar UUID.  If a webinar ID is provided in the request instead of a UUID, the response will be for the latest webinar instance.
   *
   * @remarks
   *
   * If a UUID starts with "/" or contains "//" (example: "/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=webinarId",
  })
  webinarId: string;
}

export class DashboardWebinarDetailWebinarMetricsCustomKeys extends SpeakeasyBase {
  /**
   * Custom key associated with the Webinar.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key?: string;

  /**
   * Value of the custom key associated with the Webinar.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

/**
 * Webinar metric details.
 */
export class DashboardWebinarDetailWebinarMetrics extends SpeakeasyBase {
  /**
   * Custom keys and values assigned to the Webinar.
   */
  @SpeakeasyMetadata({
    elemType: DashboardWebinarDetailWebinarMetricsCustomKeys,
  })
  @Expose({ name: "custom_keys" })
  @Type(() => DashboardWebinarDetailWebinarMetricsCustomKeys)
  customKeys?: DashboardWebinarDetailWebinarMetricsCustomKeys[];

  /**
   * Department of the host.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dept" })
  dept?: string;

  /**
   * Webinar duration, formatted as hh:mm:ss, for example: `10:00` for ten minutes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duration" })
  duration?: string;

  /**
   * User email.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * Webinar end time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "end_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime?: Date;

  /**
   * Indicates whether or not TSP was used for the Webinar.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_3rd_party_audio" })
  has3rdPartyAudio?: boolean;

  /**
   * Indicates whether or not PSTN was used for the Webinar.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_pstn" })
  hasPstn?: boolean;

  /**
   * Indicates whether or not recording was used for the Webinar.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_recording" })
  hasRecording?: boolean;

  /**
   * Indicates whether or not screen sharing was used for the Webinar.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_screen_share" })
  hasScreenShare?: boolean;

  /**
   * Indicates whether or not SIP was used for the Webinar.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_sip" })
  hasSip?: boolean;

  /**
   * Indicates whether or not video was used for the Webinar.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_video" })
  hasVideo?: boolean;

  /**
   * Indicates whether or not VoIP was used for the Webinar.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_voip" })
  hasVoip?: boolean;

  /**
   * User display name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "host" })
  host?: string;

  /**
   * Webinar ID in "**long**" format(represented as int64 data type in JSON), also known as the webinar number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * Webinar participant count.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "participants" })
  participants?: number;

  /**
   * Webinar start time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  /**
   * Webinar topic.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "topic" })
  topic?: string;

  /**
   * User type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_type" })
  userType?: string;

  /**
   * Webinar UUID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uuid" })
  uuid?: string;
}

export class DashboardWebinarDetailResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * **HTTP Status Code:** `200`<br>
   *
   * @remarks
   * Webinar details returned.<br>
   * Only available for paid accounts that have enabled the Dashboard feature.
   */
  @SpeakeasyMetadata()
  webinarMetrics?: DashboardWebinarDetailWebinarMetrics;
}
