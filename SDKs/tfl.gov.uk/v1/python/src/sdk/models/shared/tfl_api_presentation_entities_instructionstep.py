"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import tfl_api_presentation_entities_pathattribute as shared_tfl_api_presentation_entities_pathattribute
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TflAPIPresentationEntitiesInstructionStepSkyDirectionDescriptionEnum(str, Enum):
    NORTH = 'North'
    NORTH_EAST = 'NorthEast'
    EAST = 'East'
    SOUTH_EAST = 'SouthEast'
    SOUTH = 'South'
    SOUTH_WEST = 'SouthWest'
    WEST = 'West'
    NORTH_WEST = 'NorthWest'

class TflAPIPresentationEntitiesInstructionStepTrackTypeEnum(str, Enum):
    CYCLE_SUPER_HIGHWAY = 'CycleSuperHighway'
    CANAL_TOWPATH = 'CanalTowpath'
    QUIET_ROAD = 'QuietRoad'
    PROVISION_FOR_CYCLISTS = 'ProvisionForCyclists'
    BUSY_ROADS = 'BusyRoads'
    NONE = 'None'
    PUSH_BIKE = 'PushBike'
    QUIETWAY = 'Quietway'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TflAPIPresentationEntitiesInstructionStep:
    
    cumulative_distance: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cumulativeDistance'), 'exclude': lambda f: f is None }})  
    cumulative_travel_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cumulativeTravelTime'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    description_heading: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('descriptionHeading'), 'exclude': lambda f: f is None }})  
    distance: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distance'), 'exclude': lambda f: f is None }})  
    latitude: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latitude'), 'exclude': lambda f: f is None }})  
    longitude: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longitude'), 'exclude': lambda f: f is None }})  
    path_attribute: Optional[shared_tfl_api_presentation_entities_pathattribute.TflAPIPresentationEntitiesPathAttribute] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pathAttribute'), 'exclude': lambda f: f is None }})  
    sky_direction: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skyDirection'), 'exclude': lambda f: f is None }})  
    sky_direction_description: Optional[TflAPIPresentationEntitiesInstructionStepSkyDirectionDescriptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skyDirectionDescription'), 'exclude': lambda f: f is None }})  
    street_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('streetName'), 'exclude': lambda f: f is None }})  
    track_type: Optional[TflAPIPresentationEntitiesInstructionStepTrackTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trackType'), 'exclude': lambda f: f is None }})  
    turn_direction: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('turnDirection'), 'exclude': lambda f: f is None }})  
    