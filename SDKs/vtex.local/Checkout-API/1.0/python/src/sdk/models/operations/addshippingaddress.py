"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddShippingAddressRequestBodyLogisticsInfo:
    
    item_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemIndex'), 'exclude': lambda f: f is None }})
    r"""Index of item in items array"""  
    selected_delivery_channel: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selectedDeliveryChannel'), 'exclude': lambda f: f is None }})
    r"""Delivery channel selected by the customer. For example, `\\"delivery\\"` or `\\"pickup-in-point\\"`."""  
    selected_sla: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selectedSla'), 'exclude': lambda f: f is None }})
    r"""Selected SLA. For example, `\\"normal\\"` or `\\"express\\"`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddShippingAddressRequestBodySelectedAddresses:
    
    address_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressType'), 'exclude': lambda f: f is None }})
    r"""Type of address. For example, `Residential` or `Pickup`, among others."""  
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city'), 'exclude': lambda f: f is None }})
    r"""City of the shipping address."""  
    complement: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('complement'), 'exclude': lambda f: f is None }})
    r"""Complement to the shipping address in case it applies."""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})
    r"""Three letter ISO code of the country of the shipping address."""  
    geo_coordinates: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geoCoordinates'), 'exclude': lambda f: f is None }})
    r"""Array containing two floats with geocoordinates, first longitude, then latitude."""  
    neighborhood: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('neighborhood'), 'exclude': lambda f: f is None }})
    r"""Neighborhood of the shipping address."""  
    number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number'), 'exclude': lambda f: f is None }})
    r"""Number of the building, house or apartment in the shipping address."""  
    postal_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postalCode'), 'exclude': lambda f: f is None }})
    r"""Postal Code."""  
    receiver_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receiverName'), 'exclude': lambda f: f is None }})
    r"""Name of the person who is going to receive the order."""  
    reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference'), 'exclude': lambda f: f is None }})
    r"""Complement that might help locate the shipping address more precisely in case of delivery."""  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""State of the shipping address."""  
    street: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street'), 'exclude': lambda f: f is None }})
    r"""Street of the shipping address."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddShippingAddressRequestBody:
    
    clear_address_if_postal_code_not_found: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clearAddressIfPostalCodeNotFound'), 'exclude': lambda f: f is None }})
    r"""This field should be sent as `false` to prevent the address information from being filled in automatically based on the `postalCode` information."""  
    logistics_info: Optional[list[AddShippingAddressRequestBodyLogisticsInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logisticsInfo'), 'exclude': lambda f: f is None }})
    r"""Array with logistics information on each item of the `items` array in the `orderForm`."""  
    selected_addresses: Optional[list[AddShippingAddressRequestBodySelectedAddresses]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selectedAddresses'), 'exclude': lambda f: f is None }})
    r"""List of objects with addresses information."""  
    

@dataclasses.dataclass
class AddShippingAddressRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Type of the content being sent."""  
    order_form_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'orderFormId', 'style': 'simple', 'explode': False }})
    r"""ID of the orderForm that will receive client profile information."""  
    request_body: AddShippingAddressRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class AddShippingAddressResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    