// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ValueNullValueEnum - A null value.
type ValueNullValueEnum string

const (
	ValueNullValueEnumNullValue ValueNullValueEnum = "NULL_VALUE"
)

func (e ValueNullValueEnum) ToPointer() *ValueNullValueEnum {
	return &e
}

func (e *ValueNullValueEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NULL_VALUE":
		*e = ValueNullValueEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ValueNullValueEnum: %v", v)
	}
}

// Value - A message that can hold any of the supported value types and associated metadata.
type Value struct {
	// An array value.
	ArrayValue *ArrayValue `json:"arrayValue,omitempty"`
	// A blob value. May have at most 1,000,000 bytes. When `exclude_from_indexes` is false, may have at most 1500 bytes. In JSON requests, must be base64-encoded.
	BlobValue *string `json:"blobValue,omitempty"`
	// A boolean value.
	BooleanValue *bool `json:"booleanValue,omitempty"`
	// A double value.
	DoubleValue *float64 `json:"doubleValue,omitempty"`
	// A Datastore data object. An entity is limited to 1 megabyte when stored. That _roughly_ corresponds to a limit of 1 megabyte for the serialized form of this message.
	EntityValue *Entity `json:"entityValue,omitempty"`
	// If the value should be excluded from all indexes including those defined explicitly.
	ExcludeFromIndexes *bool `json:"excludeFromIndexes,omitempty"`
	// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
	GeoPointValue *LatLng `json:"geoPointValue,omitempty"`
	// An integer value.
	IntegerValue *string `json:"integerValue,omitempty"`
	// A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts.
	KeyValue *Key `json:"keyValue,omitempty"`
	// The `meaning` field should only be populated for backwards compatibility.
	Meaning *int `json:"meaning,omitempty"`
	// A null value.
	NullValue *ValueNullValueEnum `json:"nullValue,omitempty"`
	// A UTF-8 encoded string value. When `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes. Otherwise, may be set to at most 1,000,000 bytes.
	StringValue *string `json:"stringValue,omitempty"`
	// A timestamp value. When stored in the Datastore, precise only to microseconds; any additional precision is rounded down.
	TimestampValue *string `json:"timestampValue,omitempty"`
}
