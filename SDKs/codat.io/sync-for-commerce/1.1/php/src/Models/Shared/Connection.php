<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Connection - A connection represents the link between a `company` and a source of data.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Connection
{
	#[\JMS\Serializer\Annotation\SerializedName('additionalProperties')]
    #[\JMS\Serializer\Annotation\Type('mixed')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public mixed $additionalProperties = null;
    
    /**
     * $connectionInfo
     * 
     * @var ?array<string, string> $connectionInfo
     */
	#[\JMS\Serializer\Annotation\SerializedName('connectionInfo')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $connectionInfo = null;
    
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     * 
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * > Time zones
     * > 
     * > Not all dates from Codat will contain information about time zones.  
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     * 
     * @var string $created
     */
	#[\JMS\Serializer\Annotation\SerializedName('created')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $created;
    
    /**
     * $dataConnectionErrors
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\DataConnectionError> $dataConnectionErrors
     */
	#[\JMS\Serializer\Annotation\SerializedName('dataConnectionErrors')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\DataConnectionError>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $dataConnectionErrors = null;
    
    /**
     * Unique identifier for a company's data connection.
     * 
     * @var string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $id;
    
    /**
     * A Codat ID representing the integration.
     * 
     * @var string $integrationId
     */
	#[\JMS\Serializer\Annotation\SerializedName('integrationId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $integrationId;
    
    /**
     * A unique four-character ID that identifies the platform of the company's data connection. This ensures continuity if the platform changes its name in the future.
     * 
     * @var string $integrationKey
     */
	#[\JMS\Serializer\Annotation\SerializedName('integrationKey')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $integrationKey;
    
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     * 
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * > Time zones
     * > 
     * > Not all dates from Codat will contain information about time zones.  
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     * 
     * @var ?string $lastSync
     */
	#[\JMS\Serializer\Annotation\SerializedName('lastSync')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $lastSync = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('linkUrl')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $linkUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('platformName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $platformName;
    
    /**
     * A source-specific ID used to distinguish between different sources originating from the same data connection. In general, a data connection is a single data source. However, for TrueLayer, `sourceId` is associated with a specific bank and has a many-to-one relationship with the `integrationId`.
     * 
     * @var string $sourceId
     */
	#[\JMS\Serializer\Annotation\SerializedName('sourceId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $sourceId;
    
    /**
     * The type of platform of the connection.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\ConnectionSourceTypeEnum $sourceType
     */
	#[\JMS\Serializer\Annotation\SerializedName('sourceType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ConnectionSourceTypeEnum>')]
    public ConnectionSourceTypeEnum $sourceType;
    
    /**
     * The current authorization status of the data connection.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\DataConnectionStatusEnum $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\DataConnectionStatusEnum>')]
    public DataConnectionStatusEnum $status;
    
	public function __construct()
	{
		$this->additionalProperties = null;
		$this->connectionInfo = null;
		$this->created = "";
		$this->dataConnectionErrors = null;
		$this->id = "";
		$this->integrationId = "";
		$this->integrationKey = "";
		$this->lastSync = null;
		$this->linkUrl = "";
		$this->platformName = "";
		$this->sourceId = "";
		$this->sourceType = \OpenAPI\OpenAPI\Models\Shared\ConnectionSourceTypeEnum::ACCOUNTING;
		$this->status = \OpenAPI\OpenAPI\Models\Shared\DataConnectionStatusEnum::PENDING_AUTH;
	}
}
