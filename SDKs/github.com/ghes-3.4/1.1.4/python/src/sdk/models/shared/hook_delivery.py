"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HookDeliveryRequest:
    
    headers: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headers') }})
    r"""The request headers sent with the webhook delivery."""  
    payload: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payload') }})
    r"""The webhook payload."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HookDeliveryResponse:
    
    headers: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headers') }})
    r"""The response headers received when the delivery was made."""  
    payload: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payload') }})
    r"""The response payload received."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HookDelivery:
    r"""Delivery made by a webhook."""
    
    action: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action') }})
    r"""The type of activity for the event that triggered the delivery."""  
    delivered_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delivered_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Time when the delivery was delivered."""  
    duration: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration') }})
    r"""Time spent delivering."""  
    event: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event') }})
    r"""The event that triggered the delivery."""  
    guid: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('guid') }})
    r"""Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event)."""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Unique identifier of the delivery."""  
    installation_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('installation_id') }})
    r"""The id of the GitHub App installation associated with this event."""  
    redelivery: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redelivery') }})
    r"""Whether the delivery is a redelivery."""  
    repository_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repository_id') }})
    r"""The id of the repository associated with this event."""  
    request: HookDeliveryRequest = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request') }})  
    response: HookDeliveryResponse = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('response') }})  
    status: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Description of the status of the attempted delivery"""  
    status_code: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status_code') }})
    r"""Status code received when delivery was made."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""The URL target of the delivery."""  
    