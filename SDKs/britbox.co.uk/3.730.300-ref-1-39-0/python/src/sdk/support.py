"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Support:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def forgot_password(self, request: operations.ForgotPasswordRequest) -> operations.ForgotPasswordResponse:
        r"""Request the password of an account's primary profile be reset.
        
        Should be called when a user has forgotten their password.
        
        This will send an email with a password reset link to the email address of the
        primary profile of an account.
        
        The link, once clicked, should take the user to the \\"reset-password\\" page of the
        website. Here they will enter their new password and submit to the /reset-password
        endpoint here, along with the password reset token provided in the original link.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/request-password-reset'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "password_reset_email_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ForgotPasswordRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ForgotPasswordResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def get_subscription_data(self, request: operations.GetSubscriptionDataRequest) -> operations.GetSubscriptionDataResponse:
        r"""Returns the details of subscription data for a user with specified id."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSubscriptionDataRequest, base_url, '/check-subscription/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSubscriptionDataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SubscriptionDetails])
                res.subscription_details = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def reset_password(self, request: operations.ResetPasswordRequest) -> operations.ResetPasswordResponse:
        r"""When a user requests to reset their password via the /request-password-reset endpoint, an
        email is sent to the email address of the primary profile of the account. This email contains a link
        with a reset token as query parameter. The link should take the user to the \\"reset-password\\"
        page of the website.
        
        From the reset-password page a user should enter the new password they wish to use. 
        It should then be submitted to this endpoint,
        along with the reset token from the email link. 
        The token should be provided in the body as resetToken property.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/reset-password'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "password_reset_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ResetPasswordRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ResetPasswordResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def verify_email(self, request: operations.VerifyEmailRequest, security: operations.VerifyEmailSecurity) -> operations.VerifyEmailResponse:
        r"""When an account is created an email is sent to the email address of the new account.
        This contains a link, which once clicked, verifies the email address of the account is correct.
        
        The link contains a token as a query parameter which should be passed as the authorization
        bearer token to this endpoint to complete email verification.
        
        The token has en expiry, so if the link is not clicked before it expires, the account holder
        may need to request a new verification email be sent. This can be done via the endpoint
        /account/request-email-verification.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/verify-email'
        
        query_params = utils.get_query_params(operations.VerifyEmailRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VerifyEmailResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    