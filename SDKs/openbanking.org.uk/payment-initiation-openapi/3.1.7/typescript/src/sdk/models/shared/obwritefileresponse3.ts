/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Links } from "./links";
import { Meta } from "./meta";
import { OBActiveOrHistoricCurrencyAndAmount } from "./obactiveorhistoriccurrencyandamount";
import { OBCashAccountDebtor4 } from "./obcashaccountdebtor4";
import { OBChargeBearerType1CodeEnum } from "./obchargebearertype1codeenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Set of elements used to provide details of a charge for the payment initiation.
 */
export class OBWriteFileResponse3DataCharges extends SpeakeasyBase {
  /**
   * Amount of money associated with the charge type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Amount" })
  @Type(() => OBActiveOrHistoricCurrencyAndAmount)
  amount: OBActiveOrHistoricCurrencyAndAmount;

  /**
   * Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ChargeBearer" })
  chargeBearer: OBChargeBearerType1CodeEnum;

  /**
   * Charge type, in a coded form.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Type" })
  type: string;
}

/**
 * Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
 */
export class OBWriteFileResponse3DataInitiationDebtorAccount extends SpeakeasyBase {
  /**
   * Identification assigned by an institution to identify an account. This identification is known by the account owner.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Identification" })
  identification: string;

  /**
   * The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
   *
   * @remarks
   * Note, the account name is not the product name or the nickname of the account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name?: string;

  /**
   * Name of the identification scheme, in a coded form as published in an external list.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SchemeName" })
  schemeName: string;

  /**
   * This is secondary identification of the account, as assigned by the account servicing institution.
   *
   * @remarks
   * This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SecondaryIdentification" })
  secondaryIdentification?: string;
}

/**
 * Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
 */
export class OBWriteFileResponse3DataInitiationRemittanceInformation extends SpeakeasyBase {
  /**
   * Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
   *
   * @remarks
   * Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
   * If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
   * OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Reference" })
  reference?: string;

  /**
   * Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Unstructured" })
  unstructured?: string;
}

/**
 * The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds using a payment file.
 */
export class OBWriteFileResponse3DataInitiation extends SpeakeasyBase {
  /**
   * Total of all individual amounts included in the group, irrespective of currencies.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ControlSum" })
  controlSum?: number;

  /**
   * Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DebtorAccount" })
  @Type(() => OBWriteFileResponse3DataInitiationDebtorAccount)
  debtorAccount?: OBWriteFileResponse3DataInitiationDebtorAccount;

  /**
   * A base64 encoding of a SHA256 hash of the file to be uploaded.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FileHash" })
  fileHash: string;

  /**
   * Reference for the file.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FileReference" })
  fileReference?: string;

  /**
   * Specifies the payment file type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FileType" })
  fileType: string;

  /**
   * User community specific instrument.
   *
   * @remarks
   * Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LocalInstrument" })
  localInstrument?: string;

  /**
   * Number of individual transactions contained in the payment information group.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NumberOfTransactions" })
  numberOfTransactions?: string;

  /**
   * Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RemittanceInformation" })
  @Type(() => OBWriteFileResponse3DataInitiationRemittanceInformation)
  remittanceInformation?: OBWriteFileResponse3DataInitiationRemittanceInformation;

  /**
   * Date at which the initiating party requests the clearing agent to process the payment.
   *
   * @remarks
   * Usage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format.
   * All date-time fields in responses must include the timezone. An example is below:
   * 2017-04-05T10:43:07+00:00
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RequestedExecutionDateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  requestedExecutionDateTime?: Date;

  /**
   * Additional information that can not be captured in the structured fields and/or any other specific block.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SupplementaryData" })
  supplementaryData?: Record<string, any>;
}

/**
 * Specifies the status of the authorisation flow in code form.
 */
export enum OBWriteFileResponse3DataMultiAuthorisationStatusEnum {
  Authorised = "Authorised",
  AwaitingFurtherAuthorisation = "AwaitingFurtherAuthorisation",
  Rejected = "Rejected",
}

/**
 * The multiple authorisation flow response from the ASPSP.
 */
export class OBWriteFileResponse3DataMultiAuthorisation extends SpeakeasyBase {
  /**
   * Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format.
   *
   * @remarks
   * All date-time fields in responses must include the timezone. An example is below:
   * 2017-04-05T10:43:07+00:00
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ExpirationDateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expirationDateTime?: Date;

  /**
   * Last date and time at the authorisation flow was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format.
   *
   * @remarks
   * All date-time fields in responses must include the timezone. An example is below:
   * 2017-04-05T10:43:07+00:00
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LastUpdateDateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUpdateDateTime?: Date;

  /**
   * Number of authorisations received.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NumberReceived" })
  numberReceived?: number;

  /**
   * Number of authorisations required for payment order (total required at the start of the multi authorisation journey).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NumberRequired" })
  numberRequired?: number;

  /**
   * Specifies the status of the authorisation flow in code form.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  status: OBWriteFileResponse3DataMultiAuthorisationStatusEnum;
}

/**
 * Specifies the status of the payment order resource.
 */
export enum OBWriteFileResponse3DataStatusEnum {
  InitiationCompleted = "InitiationCompleted",
  InitiationFailed = "InitiationFailed",
  InitiationPending = "InitiationPending",
}

export class OBWriteFileResponse3Data extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: OBWriteFileResponse3DataCharges })
  @Expose({ name: "Charges" })
  @Type(() => OBWriteFileResponse3DataCharges)
  charges?: OBWriteFileResponse3DataCharges[];

  /**
   * OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ConsentId" })
  consentId: string;

  /**
   * Date and time at which the message was created.All dates in the JSON payloads are represented in ISO 8601 date-time format.
   *
   * @remarks
   * All date-time fields in responses must include the timezone. An example is below:
   * 2017-04-05T10:43:07+00:00
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CreationDateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationDateTime: Date;

  /**
   * ^ Only incuded in the response if `Data. ReadRefundAccount` is set to `Yes` in the consent.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Debtor" })
  @Type(() => OBCashAccountDebtor4)
  debtor?: OBCashAccountDebtor4;

  /**
   * OB: Unique identification as assigned by the ASPSP to uniquely identify the file payment resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FilePaymentId" })
  filePaymentId: string;

  /**
   * The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds using a payment file.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Initiation" })
  @Type(() => OBWriteFileResponse3DataInitiation)
  initiation: OBWriteFileResponse3DataInitiation;

  /**
   * The multiple authorisation flow response from the ASPSP.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MultiAuthorisation" })
  @Type(() => OBWriteFileResponse3DataMultiAuthorisation)
  multiAuthorisation?: OBWriteFileResponse3DataMultiAuthorisation;

  /**
   * Specifies the status of the payment order resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  status: OBWriteFileResponse3DataStatusEnum;

  /**
   * Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format.
   *
   * @remarks
   * All date-time fields in responses must include the timezone. An example is below:
   * 2017-04-05T10:43:07+00:00
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StatusUpdateDateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  statusUpdateDateTime: Date;
}

/**
 * File Payments Created
 */
export class OBWriteFileResponse3 extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Data" })
  @Type(() => OBWriteFileResponse3Data)
  data: OBWriteFileResponse3Data;

  /**
   * Links relevant to the payload
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Links" })
  @Type(() => Links)
  links?: Links;

  /**
   * Meta Data relevant to the payload
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Meta" })
  @Type(() => Meta)
  meta?: Meta;
}
