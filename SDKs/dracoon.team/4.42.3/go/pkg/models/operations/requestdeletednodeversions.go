// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// RequestDeletedNodeVersionsXSdsDateFormatEnum - Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
type RequestDeletedNodeVersionsXSdsDateFormatEnum string

const (
	RequestDeletedNodeVersionsXSdsDateFormatEnumUtc    RequestDeletedNodeVersionsXSdsDateFormatEnum = "UTC"
	RequestDeletedNodeVersionsXSdsDateFormatEnumLocal  RequestDeletedNodeVersionsXSdsDateFormatEnum = "LOCAL"
	RequestDeletedNodeVersionsXSdsDateFormatEnumOffset RequestDeletedNodeVersionsXSdsDateFormatEnum = "OFFSET"
	RequestDeletedNodeVersionsXSdsDateFormatEnumEpoch  RequestDeletedNodeVersionsXSdsDateFormatEnum = "EPOCH"
	RequestDeletedNodeVersionsXSdsDateFormatEnumLeet   RequestDeletedNodeVersionsXSdsDateFormatEnum = "LEET"
)

func (e RequestDeletedNodeVersionsXSdsDateFormatEnum) ToPointer() *RequestDeletedNodeVersionsXSdsDateFormatEnum {
	return &e
}

func (e *RequestDeletedNodeVersionsXSdsDateFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UTC":
		fallthrough
	case "LOCAL":
		fallthrough
	case "OFFSET":
		fallthrough
	case "EPOCH":
		fallthrough
	case "LEET":
		*e = RequestDeletedNodeVersionsXSdsDateFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestDeletedNodeVersionsXSdsDateFormatEnum: %v", v)
	}
}

type RequestDeletedNodeVersionsRequest struct {
	// Authentication token
	XSdsAuthToken *string `header:"style=simple,explode=false,name=X-Sds-Auth-Token"`
	// Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
	XSdsDateFormat *RequestDeletedNodeVersionsXSdsDateFormatEnum `header:"style=simple,explode=false,name=X-Sds-Date-Format"`
	// Range limit.
	//
	// Maximum 500.
	//
	//  For more results please use paging (`offset` + `limit`).
	Limit *int `queryParam:"style=form,explode=true,name=limit"`
	// Node name
	Name string `queryParam:"style=form,explode=true,name=name"`
	// Parent ID (room or folder ID)
	NodeID int64 `pathParam:"style=simple,explode=false,name=node_id"`
	// Range offset
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// Sort string
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Node type
	Type string `queryParam:"style=form,explode=true,name=type"`
}

type RequestDeletedNodeVersionsResponse struct {
	ContentType string
	// OK
	DeletedNodeVersionsList *shared.DeletedNodeVersionsList
	// Bad Request
	ErrorResponse *shared.ErrorResponse
	StatusCode    int
	RawResponse   *http.Response
}
