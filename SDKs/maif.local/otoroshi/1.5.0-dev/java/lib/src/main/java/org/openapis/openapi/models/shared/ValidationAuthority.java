/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ValidationAuthority - Settings to access a validation authority server
 */
public class ValidationAuthority {
    /**
     * Bypass http calls, every certificates are valids
     */
    @JsonProperty("alwaysValid")
    public Boolean alwaysValid;

    public ValidationAuthority withAlwaysValid(Boolean alwaysValid) {
        this.alwaysValid = alwaysValid;
        return this;
    }
    
    /**
     * The TTL for invalid access response caching
     */
    @JsonProperty("badTtl")
    public Long badTtl;

    public ValidationAuthority withBadTtl(Long badTtl) {
        this.badTtl = badTtl;
        return this;
    }
    
    /**
     * The description of the settings
     */
    @JsonProperty("description")
    public String description;

    public ValidationAuthority withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The TTL for valid access response caching
     */
    @JsonProperty("goodTtl")
    public Long goodTtl;

    public ValidationAuthority withGoodTtl(Long goodTtl) {
        this.goodTtl = goodTtl;
        return this;
    }
    
    /**
     * HTTP call headers
     */
    @JsonProperty("headers")
    public java.util.Map<String, String> headers;

    public ValidationAuthority withHeaders(java.util.Map<String, String> headers) {
        this.headers = headers;
        return this;
    }
    
    /**
     * The host of the server
     */
    @JsonProperty("host")
    public String host;

    public ValidationAuthority withHost(String host) {
        this.host = host;
        return this;
    }
    
    /**
     * The id of the settings
     */
    @JsonProperty("id")
    public String id;

    public ValidationAuthority withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The HTTP method
     */
    @JsonProperty("method")
    public String method;

    public ValidationAuthority withMethod(String method) {
        this.method = method;
        return this;
    }
    
    /**
     * The name of the settings
     */
    @JsonProperty("name")
    public String name;

    public ValidationAuthority withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Avoid caching responses
     */
    @JsonProperty("noCache")
    public Boolean noCache;

    public ValidationAuthority withNoCache(Boolean noCache) {
        this.noCache = noCache;
        return this;
    }
    
    /**
     * The URL path
     */
    @JsonProperty("path")
    public String path;

    public ValidationAuthority withPath(String path) {
        this.path = path;
        return this;
    }
    
    /**
     * The call timeout
     */
    @JsonProperty("timeout")
    public Long timeout;

    public ValidationAuthority withTimeout(Long timeout) {
        this.timeout = timeout;
        return this;
    }
    
    /**
     * The URL of the server
     */
    @JsonProperty("url")
    public String url;

    public ValidationAuthority withUrl(String url) {
        this.url = url;
        return this;
    }
    
    public ValidationAuthority(@JsonProperty("alwaysValid") Boolean alwaysValid, @JsonProperty("badTtl") Long badTtl, @JsonProperty("description") String description, @JsonProperty("goodTtl") Long goodTtl, @JsonProperty("headers") java.util.Map<String, String> headers, @JsonProperty("host") String host, @JsonProperty("id") String id, @JsonProperty("method") String method, @JsonProperty("name") String name, @JsonProperty("noCache") Boolean noCache, @JsonProperty("path") String path, @JsonProperty("timeout") Long timeout, @JsonProperty("url") String url) {
        this.alwaysValid = alwaysValid;
        this.badTtl = badTtl;
        this.description = description;
        this.goodTtl = goodTtl;
        this.headers = headers;
        this.host = host;
        this.id = id;
        this.method = method;
        this.name = name;
        this.noCache = noCache;
        this.path = path;
        this.timeout = timeout;
        this.url = url;
  }
}
