// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ConditionIamEnum - Trusted attributes supplied by the IAM system.
type ConditionIamEnum string

const (
	ConditionIamEnumNoAttr            ConditionIamEnum = "NO_ATTR"
	ConditionIamEnumAuthority         ConditionIamEnum = "AUTHORITY"
	ConditionIamEnumAttribution       ConditionIamEnum = "ATTRIBUTION"
	ConditionIamEnumSecurityRealm     ConditionIamEnum = "SECURITY_REALM"
	ConditionIamEnumApprover          ConditionIamEnum = "APPROVER"
	ConditionIamEnumJustificationType ConditionIamEnum = "JUSTIFICATION_TYPE"
	ConditionIamEnumCredentialsType   ConditionIamEnum = "CREDENTIALS_TYPE"
	ConditionIamEnumCredsAssertion    ConditionIamEnum = "CREDS_ASSERTION"
)

func (e *ConditionIamEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NO_ATTR":
		fallthrough
	case "AUTHORITY":
		fallthrough
	case "ATTRIBUTION":
		fallthrough
	case "SECURITY_REALM":
		fallthrough
	case "APPROVER":
		fallthrough
	case "JUSTIFICATION_TYPE":
		fallthrough
	case "CREDENTIALS_TYPE":
		fallthrough
	case "CREDS_ASSERTION":
		*e = ConditionIamEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConditionIamEnum: %s", s)
	}
}

// ConditionOpEnum - An operator to apply the subject with.
type ConditionOpEnum string

const (
	ConditionOpEnumNoOp       ConditionOpEnum = "NO_OP"
	ConditionOpEnumEquals     ConditionOpEnum = "EQUALS"
	ConditionOpEnumNotEquals  ConditionOpEnum = "NOT_EQUALS"
	ConditionOpEnumIn         ConditionOpEnum = "IN"
	ConditionOpEnumNotIn      ConditionOpEnum = "NOT_IN"
	ConditionOpEnumDischarged ConditionOpEnum = "DISCHARGED"
)

func (e *ConditionOpEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NO_OP":
		fallthrough
	case "EQUALS":
		fallthrough
	case "NOT_EQUALS":
		fallthrough
	case "IN":
		fallthrough
	case "NOT_IN":
		fallthrough
	case "DISCHARGED":
		*e = ConditionOpEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConditionOpEnum: %s", s)
	}
}

// ConditionSysEnum - Trusted attributes supplied by any service that owns resources and uses the IAM system for access control.
type ConditionSysEnum string

const (
	ConditionSysEnumNoAttr  ConditionSysEnum = "NO_ATTR"
	ConditionSysEnumRegion  ConditionSysEnum = "REGION"
	ConditionSysEnumService ConditionSysEnum = "SERVICE"
	ConditionSysEnumName    ConditionSysEnum = "NAME"
	ConditionSysEnumIP      ConditionSysEnum = "IP"
)

func (e *ConditionSysEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NO_ATTR":
		fallthrough
	case "REGION":
		fallthrough
	case "SERVICE":
		fallthrough
	case "NAME":
		fallthrough
	case "IP":
		*e = ConditionSysEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConditionSysEnum: %s", s)
	}
}

// Condition - A condition to be met.
type Condition struct {
	// Trusted attributes supplied by the IAM system.
	Iam *ConditionIamEnum `json:"iam,omitempty"`
	// An operator to apply the subject with.
	Op *ConditionOpEnum `json:"op,omitempty"`
	// Trusted attributes discharged by the service.
	Svc *string `json:"svc,omitempty"`
	// Trusted attributes supplied by any service that owns resources and uses the IAM system for access control.
	Sys *ConditionSysEnum `json:"sys,omitempty"`
	// The objects of the condition.
	Values []string `json:"values,omitempty"`
}
