"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleidentityaccesscontextmanagerv1ingresssource as shared_googleidentityaccesscontextmanagerv1ingresssource
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleIdentityAccesscontextmanagerV1IngressFromIdentityTypeEnum(str, Enum):
    r"""Specifies the type of identities that are allowed access from outside the perimeter. If left unspecified, then members of `identities` field will be allowed access."""
    IDENTITY_TYPE_UNSPECIFIED = 'IDENTITY_TYPE_UNSPECIFIED'
    ANY_IDENTITY = 'ANY_IDENTITY'
    ANY_USER_ACCOUNT = 'ANY_USER_ACCOUNT'
    ANY_SERVICE_ACCOUNT = 'ANY_SERVICE_ACCOUNT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleIdentityAccesscontextmanagerV1IngressFrom:
    r"""Defines the conditions under which an IngressPolicy matches a request. Conditions are based on information about the source of the request. The request must satisfy what is defined in `sources` AND identity related fields in order to match."""
    
    identities: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identities'), 'exclude': lambda f: f is None }})
    r"""A list of identities that are allowed access through this ingress policy. Should be in the format of email address. The email address should represent individual user or service account only."""  
    identity_type: Optional[GoogleIdentityAccesscontextmanagerV1IngressFromIdentityTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identityType'), 'exclude': lambda f: f is None }})
    r"""Specifies the type of identities that are allowed access from outside the perimeter. If left unspecified, then members of `identities` field will be allowed access."""  
    sources: Optional[list[shared_googleidentityaccesscontextmanagerv1ingresssource.GoogleIdentityAccesscontextmanagerV1IngressSource]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sources'), 'exclude': lambda f: f is None }})
    r"""Sources that this IngressPolicy authorizes access from."""  
    