// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// OBWriteFileResponse3DataCharges - Set of elements used to provide details of a charge for the payment initiation.
type OBWriteFileResponse3DataCharges struct {
	// Amount of money associated with the charge type.
	Amount OBActiveOrHistoricCurrencyAndAmount `json:"Amount"`
	// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
	ChargeBearer OBChargeBearerType1CodeEnum `json:"ChargeBearer"`
	// Charge type, in a coded form.
	Type string `json:"Type"`
}

// OBWriteFileResponse3DataInitiationDebtorAccount - Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
type OBWriteFileResponse3DataInitiationDebtorAccount struct {
	// Identification assigned by an institution to identify an account. This identification is known by the account owner.
	Identification string `json:"Identification"`
	// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
	// Note, the account name is not the product name or the nickname of the account.
	Name *string `json:"Name,omitempty"`
	// Name of the identification scheme, in a coded form as published in an external list.
	SchemeName string `json:"SchemeName"`
	// This is secondary identification of the account, as assigned by the account servicing institution.
	// This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
	SecondaryIdentification *string `json:"SecondaryIdentification,omitempty"`
}

// OBWriteFileResponse3DataInitiationRemittanceInformation - Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
type OBWriteFileResponse3DataInitiationRemittanceInformation struct {
	// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
	// Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
	// If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
	// OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
	Reference *string `json:"Reference,omitempty"`
	// Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
	Unstructured *string `json:"Unstructured,omitempty"`
}

// OBWriteFileResponse3DataInitiation - The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds using a payment file.
type OBWriteFileResponse3DataInitiation struct {
	// Total of all individual amounts included in the group, irrespective of currencies.
	ControlSum *float64 `json:"ControlSum,omitempty"`
	// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
	DebtorAccount *OBWriteFileResponse3DataInitiationDebtorAccount `json:"DebtorAccount,omitempty"`
	// A base64 encoding of a SHA256 hash of the file to be uploaded.
	FileHash string `json:"FileHash"`
	// Reference for the file.
	FileReference *string `json:"FileReference,omitempty"`
	// Specifies the payment file type.
	FileType string `json:"FileType"`
	// User community specific instrument.
	// Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
	LocalInstrument *string `json:"LocalInstrument,omitempty"`
	// Number of individual transactions contained in the payment information group.
	NumberOfTransactions *string `json:"NumberOfTransactions,omitempty"`
	// Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
	RemittanceInformation *OBWriteFileResponse3DataInitiationRemittanceInformation `json:"RemittanceInformation,omitempty"`
	// Date at which the initiating party requests the clearing agent to process the payment.
	// Usage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	RequestedExecutionDateTime *time.Time `json:"RequestedExecutionDateTime,omitempty"`
	// Additional information that can not be captured in the structured fields and/or any other specific block.
	SupplementaryData map[string]interface{} `json:"SupplementaryData,omitempty"`
}

// OBWriteFileResponse3DataMultiAuthorisationStatusEnum - Specifies the status of the authorisation flow in code form.
type OBWriteFileResponse3DataMultiAuthorisationStatusEnum string

const (
	OBWriteFileResponse3DataMultiAuthorisationStatusEnumAuthorised                   OBWriteFileResponse3DataMultiAuthorisationStatusEnum = "Authorised"
	OBWriteFileResponse3DataMultiAuthorisationStatusEnumAwaitingFurtherAuthorisation OBWriteFileResponse3DataMultiAuthorisationStatusEnum = "AwaitingFurtherAuthorisation"
	OBWriteFileResponse3DataMultiAuthorisationStatusEnumRejected                     OBWriteFileResponse3DataMultiAuthorisationStatusEnum = "Rejected"
)

func (e OBWriteFileResponse3DataMultiAuthorisationStatusEnum) ToPointer() *OBWriteFileResponse3DataMultiAuthorisationStatusEnum {
	return &e
}

func (e *OBWriteFileResponse3DataMultiAuthorisationStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authorised":
		fallthrough
	case "AwaitingFurtherAuthorisation":
		fallthrough
	case "Rejected":
		*e = OBWriteFileResponse3DataMultiAuthorisationStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OBWriteFileResponse3DataMultiAuthorisationStatusEnum: %v", v)
	}
}

// OBWriteFileResponse3DataMultiAuthorisation - The multiple authorisation flow response from the ASPSP.
type OBWriteFileResponse3DataMultiAuthorisation struct {
	// Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	ExpirationDateTime *time.Time `json:"ExpirationDateTime,omitempty"`
	// Last date and time at the authorisation flow was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	LastUpdateDateTime *time.Time `json:"LastUpdateDateTime,omitempty"`
	// Number of authorisations received.
	NumberReceived *int64 `json:"NumberReceived,omitempty"`
	// Number of authorisations required for payment order (total required at the start of the multi authorisation journey).
	NumberRequired *int64 `json:"NumberRequired,omitempty"`
	// Specifies the status of the authorisation flow in code form.
	Status OBWriteFileResponse3DataMultiAuthorisationStatusEnum `json:"Status"`
}

// OBWriteFileResponse3DataStatusEnum - Specifies the status of the payment order resource.
type OBWriteFileResponse3DataStatusEnum string

const (
	OBWriteFileResponse3DataStatusEnumInitiationCompleted OBWriteFileResponse3DataStatusEnum = "InitiationCompleted"
	OBWriteFileResponse3DataStatusEnumInitiationFailed    OBWriteFileResponse3DataStatusEnum = "InitiationFailed"
	OBWriteFileResponse3DataStatusEnumInitiationPending   OBWriteFileResponse3DataStatusEnum = "InitiationPending"
)

func (e OBWriteFileResponse3DataStatusEnum) ToPointer() *OBWriteFileResponse3DataStatusEnum {
	return &e
}

func (e *OBWriteFileResponse3DataStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "InitiationCompleted":
		fallthrough
	case "InitiationFailed":
		fallthrough
	case "InitiationPending":
		*e = OBWriteFileResponse3DataStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OBWriteFileResponse3DataStatusEnum: %v", v)
	}
}

type OBWriteFileResponse3Data struct {
	Charges []OBWriteFileResponse3DataCharges `json:"Charges,omitempty"`
	// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
	ConsentID string `json:"ConsentId"`
	// Date and time at which the message was created.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	CreationDateTime time.Time `json:"CreationDateTime"`
	// ^ Only incuded in the response if `Data. ReadRefundAccount` is set to `Yes` in the consent.
	Debtor *OBCashAccountDebtor4 `json:"Debtor,omitempty"`
	// OB: Unique identification as assigned by the ASPSP to uniquely identify the file payment resource.
	FilePaymentID string `json:"FilePaymentId"`
	// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds using a payment file.
	Initiation OBWriteFileResponse3DataInitiation `json:"Initiation"`
	// The multiple authorisation flow response from the ASPSP.
	MultiAuthorisation *OBWriteFileResponse3DataMultiAuthorisation `json:"MultiAuthorisation,omitempty"`
	// Specifies the status of the payment order resource.
	Status OBWriteFileResponse3DataStatusEnum `json:"Status"`
	// Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	StatusUpdateDateTime time.Time `json:"StatusUpdateDateTime"`
}

// OBWriteFileResponse3 - File Payments Created
type OBWriteFileResponse3 struct {
	Data OBWriteFileResponse3Data `json:"Data"`
	// Links relevant to the payload
	Links *Links `json:"Links,omitempty"`
	// Meta Data relevant to the payload
	Meta *Meta `json:"Meta,omitempty"`
}
