"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dailymaintenancewindow as shared_dailymaintenancewindow
from ..shared import recurringtimewindow as shared_recurringtimewindow
from ..shared import timewindow as shared_timewindow
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MaintenanceWindow:
    r"""MaintenanceWindow defines the maintenance window to be used for the cluster."""
    
    daily_maintenance_window: Optional[shared_dailymaintenancewindow.DailyMaintenanceWindow] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dailyMaintenanceWindow'), 'exclude': lambda f: f is None }})
    r"""Time window specified for daily maintenance operations."""  
    maintenance_exclusions: Optional[dict[str, shared_timewindow.TimeWindow]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maintenanceExclusions'), 'exclude': lambda f: f is None }})
    r"""Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows."""  
    recurring_window: Optional[shared_recurringtimewindow.RecurringTimeWindow] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recurringWindow'), 'exclude': lambda f: f is None }})
    r"""Represents an arbitrary window of time that recurs."""  
    