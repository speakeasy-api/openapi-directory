/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export enum GETCreateTrafficMirrorFilterRuleActionEnum {
  CreateTrafficMirrorFilterRule = "CreateTrafficMirrorFilterRule",
}

/**
 * Information about the Traffic Mirror filter rule port range.
 */
export class GETCreateTrafficMirrorFilterRuleDestinationPortRange extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "queryParam, name=FromPort" })
  fromPort?: number;

  @SpeakeasyMetadata({ data: "queryParam, name=ToPort" })
  toPort?: number;
}

/**
 * The action to take on the filtered traffic.
 */
export enum GETCreateTrafficMirrorFilterRuleRuleActionEnum {
  Accept = "accept",
  Reject = "reject",
}

/**
 * Information about the Traffic Mirror filter rule port range.
 */
export class GETCreateTrafficMirrorFilterRuleSourcePortRange extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "queryParam, name=FromPort" })
  fromPort?: number;

  @SpeakeasyMetadata({ data: "queryParam, name=ToPort" })
  toPort?: number;
}

/**
 * The type of traffic.
 */
export enum GETCreateTrafficMirrorFilterRuleTrafficDirectionEnum {
  Ingress = "ingress",
  Egress = "egress",
}

export enum GETCreateTrafficMirrorFilterRuleVersionEnum {
  TwoThousandAndSixteen1115 = "2016-11-15",
}

export class GETCreateTrafficMirrorFilterRuleRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Action",
  })
  action: GETCreateTrafficMirrorFilterRuleActionEnum;

  /**
   * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ClientToken",
  })
  clientToken?: string;

  /**
   * The description of the Traffic Mirror rule.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Description",
  })
  description?: string;

  /**
   * The destination CIDR block to assign to the Traffic Mirror rule.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=DestinationCidrBlock",
  })
  destinationCidrBlock: string;

  /**
   * The destination port range.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=DestinationPortRange",
  })
  destinationPortRange?: GETCreateTrafficMirrorFilterRuleDestinationPortRange;

  /**
   * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=DryRun",
  })
  dryRun?: boolean;

  /**
   * <p>The protocol, for example UDP, to assign to the Traffic Mirror rule.</p> <p>For information about the protocol value, see <a href="https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol Numbers</a> on the Internet Assigned Numbers Authority (IANA) website.</p>
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Protocol",
  })
  protocol?: number;

  /**
   * The action to take on the filtered traffic.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=RuleAction",
  })
  ruleAction: GETCreateTrafficMirrorFilterRuleRuleActionEnum;

  /**
   * The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=RuleNumber",
  })
  ruleNumber: number;

  /**
   * The source CIDR block to assign to the Traffic Mirror rule.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=SourceCidrBlock",
  })
  sourceCidrBlock: string;

  /**
   * The source port range.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=SourcePortRange",
  })
  sourcePortRange?: GETCreateTrafficMirrorFilterRuleSourcePortRange;

  /**
   * The type of traffic.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=TrafficDirection",
  })
  trafficDirection: GETCreateTrafficMirrorFilterRuleTrafficDirectionEnum;

  /**
   * The ID of the filter that this rule is associated with.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=TrafficMirrorFilterId",
  })
  trafficMirrorFilterId: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Version",
  })
  version: GETCreateTrafficMirrorFilterRuleVersionEnum;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class GETCreateTrafficMirrorFilterRuleResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
