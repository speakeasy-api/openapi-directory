"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import duplicateproductvalueconfiguration as shared_duplicateproductvalueconfiguration
from ..shared import inputconfiguration as shared_inputconfiguration
from ..shared import schedulingtype_enum as shared_schedulingtype_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AutoImportConfiguration:
    r"""Auto import configuration"""
    
    duplicate_product_configuration: shared_duplicateproductvalueconfiguration.DuplicateProductValueConfiguration = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duplicateProductConfiguration') }})
    r"""Describe how you want to manage the duplication of the product value"""  
    input: shared_inputconfiguration.InputConfiguration = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('input') }})
    r"""Describe the input configuration"""  
    input_configured_by_user_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inputConfiguredByUserId') }})
    r"""The user identifier"""  
    paused: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paused') }})
    r"""Indicate if the auto import is in pause or not."""  
    scheduling_type: shared_schedulingtype_enum.SchedulingTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schedulingType') }})
    r"""Indicate the scheduling type. Schedule or Interval. We recommand you to use interval for a better reporting."""  
    scheduling_value: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schedulingValue') }})
    r"""Indicate the scheduling value. If the scheduling type is Interval then the value will be a duration otherwise the values will be the time."""  
    pause_status_changed_by_user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pauseStatusChangedByUserId'), 'exclude': lambda f: f is None }})
    r"""The user identifier"""  
    pause_status_changed_utc_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pauseStatusChangedUtcDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Indicate when the pause status has changed in UTC date."""  
    scheduled_by_user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scheduledByUserId'), 'exclude': lambda f: f is None }})
    r"""The user identifier"""  
    scheduling_local_time_zone_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schedulingLocalTimeZoneName'), 'exclude': lambda f: f is None }})
    r"""Indicate the time zone name of the scheduling. If the scheduling type is \\"Schedule\\" """  
    