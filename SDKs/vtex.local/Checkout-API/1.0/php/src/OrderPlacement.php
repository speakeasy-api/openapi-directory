<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class OrderPlacement 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Place order
     * 
     * Places order without having any prior cart information. This means all information on items, client, payment and shipping must be sent in the body.
     * 
     * >⚠️ The authentication of this endpoint is required if you are creating an order with an item that has an attachment that creates a Subscription. For more information, access [Subscriptions API](https://developers.vtex.com/docs/api-reference/subscriptions-api-v3).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlaceOrderRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlaceOrderResponse
     */
	public function placeOrder(
        \OpenAPI\OpenAPI\Models\Operations\PlaceOrderRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlaceOrderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/checkout/pub/orders');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PlaceOrderRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlaceOrderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->placeOrder200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PlaceOrder200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Place order from an existing cart
     * 
     * This endpoint places an order from an existing `orderForm` object, meaning an existing cart.
     * 
     * 
     * After the creation of an order with this request, you have five minutes to send payment information and then request payment processing.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlaceOrderFromExistingOrderFormRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlaceOrderFromExistingOrderFormResponse
     */
	public function placeOrderFromExistingOrderForm(
        \OpenAPI\OpenAPI\Models\Operations\PlaceOrderFromExistingOrderFormRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlaceOrderFromExistingOrderFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/checkout/pub/orderForm/{orderFormId}/transaction', \OpenAPI\OpenAPI\Models\Operations\PlaceOrderFromExistingOrderFormRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlaceOrderFromExistingOrderFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->placeOrderFromExistingOrderForm200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Process order
     * 
     * Order processing callback request, which is made after an order's payment is approved.
     * 
     * 
     * > This request has to be made until five minutes after the [Place order](https://developers.vtex.com/docs/api-reference/checkout-api#put-/api/checkout/pub/orders) or [Place order from existing cart](https://developers.vtex.com/docs/api-reference/checkout-api#post-/api/checkout/pub/orderForm/-orderFormId-/transaction) request has been made, or else, the order will not be processed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProcessOrderRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProcessOrderResponse
     */
	public function processOrder(
        \OpenAPI\OpenAPI\Models\Operations\ProcessOrderRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProcessOrderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/checkout/pub/gatewayCallback/{orderGroup}', \OpenAPI\OpenAPI\Models\Operations\ProcessOrderRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProcessOrderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->processOrder500ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProcessOrder500ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}