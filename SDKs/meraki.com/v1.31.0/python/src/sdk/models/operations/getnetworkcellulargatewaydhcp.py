"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetNetworkCellularGatewayDhcpRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    
class GetNetworkCellularGatewayDhcp200ApplicationJSONDhcpLeaseTimeEnum(str, Enum):
    r"""DHCP Lease time for all MG in the network."""
    ONE_DAY = '1 day'
    ONE_HOUR = '1 hour'
    ONE_WEEK = '1 week'
    TWELVE_HOURS = '12 hours'
    THIRTY_MINUTES = '30 minutes'
    FOUR_HOURS = '4 hours'

class GetNetworkCellularGatewayDhcp200ApplicationJSONDNSNameserversEnum(str, Enum):
    r"""DNS name servers mode for all MG in the network."""
    CUSTOM = 'custom'
    GOOGLE_DNS = 'google_dns'
    OPENDNS = 'opendns'
    UPSTREAM_DNS = 'upstream_dns'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkCellularGatewayDhcp200ApplicationJSON:
    r"""Successful operation"""
    
    dhcp_lease_time: Optional[GetNetworkCellularGatewayDhcp200ApplicationJSONDhcpLeaseTimeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dhcpLeaseTime'), 'exclude': lambda f: f is None }})
    r"""DHCP Lease time for all MG in the network."""  
    dns_custom_nameservers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dnsCustomNameservers'), 'exclude': lambda f: f is None }})
    r"""List of fixed IPs representing the the DNS Name servers when the mode is 'custom'."""  
    dns_nameservers: Optional[GetNetworkCellularGatewayDhcp200ApplicationJSONDNSNameserversEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dnsNameservers'), 'exclude': lambda f: f is None }})
    r"""DNS name servers mode for all MG in the network."""  
    

@dataclasses.dataclass
class GetNetworkCellularGatewayDhcpResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_network_cellular_gateway_dhcp_200_application_json_object: Optional[GetNetworkCellularGatewayDhcp200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    