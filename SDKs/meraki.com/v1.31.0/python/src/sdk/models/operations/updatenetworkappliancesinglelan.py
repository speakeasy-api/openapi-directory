"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class UpdateNetworkApplianceSingleLanRequestBodyIpv6PrefixAssignmentsOriginTypeEnum(str, Enum):
    r"""Type of the origin"""
    INDEPENDENT = 'independent'
    INTERNET = 'internet'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkApplianceSingleLanRequestBodyIpv6PrefixAssignmentsOrigin:
    r"""The origin of the prefix"""
    
    type: UpdateNetworkApplianceSingleLanRequestBodyIpv6PrefixAssignmentsOriginTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of the origin"""  
    interfaces: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interfaces'), 'exclude': lambda f: f is None }})
    r"""Interfaces associated with the prefix"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkApplianceSingleLanRequestBodyIpv6PrefixAssignments:
    
    autonomous: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autonomous'), 'exclude': lambda f: f is None }})
    r"""Auto assign a /64 prefix from the origin to the VLAN"""  
    origin: Optional[UpdateNetworkApplianceSingleLanRequestBodyIpv6PrefixAssignmentsOrigin] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('origin'), 'exclude': lambda f: f is None }})
    r"""The origin of the prefix"""  
    static_appliance_ip6: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('staticApplianceIp6'), 'exclude': lambda f: f is None }})
    r"""Manual configuration of the IPv6 Appliance IP"""  
    static_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('staticPrefix'), 'exclude': lambda f: f is None }})
    r"""Manual configuration of a /64 prefix on the VLAN"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkApplianceSingleLanRequestBodyIpv6:
    r"""IPv6 configuration on the VLAN"""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Enable IPv6 on VLAN."""  
    prefix_assignments: Optional[list[UpdateNetworkApplianceSingleLanRequestBodyIpv6PrefixAssignments]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prefixAssignments'), 'exclude': lambda f: f is None }})
    r"""Prefix assignments on the VLAN"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkApplianceSingleLanRequestBodyMandatoryDhcp:
    r"""Mandatory DHCP will enforce that clients connecting to this LAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above"""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Enable Mandatory DHCP on LAN."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkApplianceSingleLanRequestBody:
    
    appliance_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applianceIp'), 'exclude': lambda f: f is None }})
    r"""The appliance IP address of the single LAN"""  
    ipv6: Optional[UpdateNetworkApplianceSingleLanRequestBodyIpv6] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipv6'), 'exclude': lambda f: f is None }})
    r"""IPv6 configuration on the VLAN"""  
    mandatory_dhcp: Optional[UpdateNetworkApplianceSingleLanRequestBodyMandatoryDhcp] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandatoryDhcp'), 'exclude': lambda f: f is None }})
    r"""Mandatory DHCP will enforce that clients connecting to this LAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above"""  
    subnet: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnet'), 'exclude': lambda f: f is None }})
    r"""The subnet of the single LAN configuration"""  
    

@dataclasses.dataclass
class UpdateNetworkApplianceSingleLanRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateNetworkApplianceSingleLanRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    
class UpdateNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum(str, Enum):
    r"""Type of the origin"""
    INDEPENDENT = 'independent'
    INTERNET = 'internet'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignmentsOrigin:
    r"""The origin of the prefix"""
    
    interfaces: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interfaces'), 'exclude': lambda f: f is None }})
    r"""Interfaces associated with the prefix"""  
    type: Optional[UpdateNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of the origin"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignments:
    
    autonomous: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autonomous'), 'exclude': lambda f: f is None }})
    r"""Auto assign a /64 prefix from the origin to the single LAN"""  
    origin: Optional[UpdateNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignmentsOrigin] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('origin'), 'exclude': lambda f: f is None }})
    r"""The origin of the prefix"""  
    static_appliance_ip6: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('staticApplianceIp6'), 'exclude': lambda f: f is None }})
    r"""Manual configuration of the IPv6 Appliance IP"""  
    static_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('staticPrefix'), 'exclude': lambda f: f is None }})
    r"""Manual configuration of a /64 prefix on the single LAN"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkApplianceSingleLan200ApplicationJSONIpv6:
    r"""IPv6 configuration on the single LAN"""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Enable IPv6 on single LAN"""  
    prefix_assignments: Optional[list[UpdateNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignments]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prefixAssignments'), 'exclude': lambda f: f is None }})
    r"""Prefix assignments on the single LAN"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkApplianceSingleLan200ApplicationJSONMandatoryDhcp:
    r"""Mandatory DHCP will enforce that clients connecting to this single LAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above"""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Enable Mandatory DHCP on single LAN."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkApplianceSingleLan200ApplicationJSON:
    r"""Successful operation"""
    
    appliance_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applianceIp'), 'exclude': lambda f: f is None }})
    r"""The local IP of the appliance on the single LAN"""  
    ipv6: Optional[UpdateNetworkApplianceSingleLan200ApplicationJSONIpv6] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipv6'), 'exclude': lambda f: f is None }})
    r"""IPv6 configuration on the single LAN"""  
    mandatory_dhcp: Optional[UpdateNetworkApplianceSingleLan200ApplicationJSONMandatoryDhcp] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandatoryDhcp'), 'exclude': lambda f: f is None }})
    r"""Mandatory DHCP will enforce that clients connecting to this single LAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above"""  
    subnet: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnet'), 'exclude': lambda f: f is None }})
    r"""The subnet of the single LAN"""  
    

@dataclasses.dataclass
class UpdateNetworkApplianceSingleLanResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_appliance_single_lan_200_application_json_object: Optional[UpdateNetworkApplianceSingleLan200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    