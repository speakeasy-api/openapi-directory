// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type UpdateActionStatusEnum string

const (
	UpdateActionStatusEnumNotApplied     UpdateActionStatusEnum = "not-applied"
	UpdateActionStatusEnumWaitingToStart UpdateActionStatusEnum = "waiting-to-start"
	UpdateActionStatusEnumInProgress     UpdateActionStatusEnum = "in-progress"
	UpdateActionStatusEnumStopping       UpdateActionStatusEnum = "stopping"
	UpdateActionStatusEnumStopped        UpdateActionStatusEnum = "stopped"
	UpdateActionStatusEnumComplete       UpdateActionStatusEnum = "complete"
	UpdateActionStatusEnumScheduling     UpdateActionStatusEnum = "scheduling"
	UpdateActionStatusEnumScheduled      UpdateActionStatusEnum = "scheduled"
	UpdateActionStatusEnumNotApplicable  UpdateActionStatusEnum = "not-applicable"
)

func (e UpdateActionStatusEnum) ToPointer() *UpdateActionStatusEnum {
	return &e
}

func (e *UpdateActionStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "not-applied":
		fallthrough
	case "waiting-to-start":
		fallthrough
	case "in-progress":
		fallthrough
	case "stopping":
		fallthrough
	case "stopped":
		fallthrough
	case "complete":
		fallthrough
	case "scheduling":
		fallthrough
	case "scheduled":
		fallthrough
	case "not-applicable":
		*e = UpdateActionStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateActionStatusEnum: %v", v)
	}
}
