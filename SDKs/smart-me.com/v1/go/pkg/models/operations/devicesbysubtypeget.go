// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DevicesBySubTypeGetMeterSubTypeEnum
type DevicesBySubTypeGetMeterSubTypeEnum string

const (
	DevicesBySubTypeGetMeterSubTypeEnumMeterSubTypeUnknown         DevicesBySubTypeGetMeterSubTypeEnum = "MeterSubTypeUnknown"
	DevicesBySubTypeGetMeterSubTypeEnumMeterSubTypeCold            DevicesBySubTypeGetMeterSubTypeEnum = "MeterSubTypeCold"
	DevicesBySubTypeGetMeterSubTypeEnumMeterSubTypeHeat            DevicesBySubTypeGetMeterSubTypeEnum = "MeterSubTypeHeat"
	DevicesBySubTypeGetMeterSubTypeEnumMeterSubTypeChargingStation DevicesBySubTypeGetMeterSubTypeEnum = "MeterSubTypeChargingStation"
	DevicesBySubTypeGetMeterSubTypeEnumMeterSubTypeElectricity     DevicesBySubTypeGetMeterSubTypeEnum = "MeterSubTypeElectricity"
	DevicesBySubTypeGetMeterSubTypeEnumMeterSubTypeWater           DevicesBySubTypeGetMeterSubTypeEnum = "MeterSubTypeWater"
	DevicesBySubTypeGetMeterSubTypeEnumMeterSubTypeGas             DevicesBySubTypeGetMeterSubTypeEnum = "MeterSubTypeGas"
	DevicesBySubTypeGetMeterSubTypeEnumMeterSubTypeElectricityHeat DevicesBySubTypeGetMeterSubTypeEnum = "MeterSubTypeElectricityHeat"
	DevicesBySubTypeGetMeterSubTypeEnumMeterSubTypeTemperature     DevicesBySubTypeGetMeterSubTypeEnum = "MeterSubTypeTemperature"
	DevicesBySubTypeGetMeterSubTypeEnumMeterSubTypeVirtualBattery  DevicesBySubTypeGetMeterSubTypeEnum = "MeterSubTypeVirtualBattery"
)

func (e *DevicesBySubTypeGetMeterSubTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MeterSubTypeUnknown":
		fallthrough
	case "MeterSubTypeCold":
		fallthrough
	case "MeterSubTypeHeat":
		fallthrough
	case "MeterSubTypeChargingStation":
		fallthrough
	case "MeterSubTypeElectricity":
		fallthrough
	case "MeterSubTypeWater":
		fallthrough
	case "MeterSubTypeGas":
		fallthrough
	case "MeterSubTypeElectricityHeat":
		fallthrough
	case "MeterSubTypeTemperature":
		fallthrough
	case "MeterSubTypeVirtualBattery":
		*e = DevicesBySubTypeGetMeterSubTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DevicesBySubTypeGetMeterSubTypeEnum: %s", s)
	}
}

type DevicesBySubTypeGetQueryParams struct {
	MeterSubType DevicesBySubTypeGetMeterSubTypeEnum `queryParam:"style=form,explode=true,name=meterSubType"`
}

type DevicesBySubTypeGetRequest struct {
	QueryParams DevicesBySubTypeGetQueryParams
}

type DevicesBySubTypeGetResponse struct {
	Body        []byte
	ContentType string
	// OK
	Devices     []shared.Device
	StatusCode  int
	RawResponse *http.Response
}
