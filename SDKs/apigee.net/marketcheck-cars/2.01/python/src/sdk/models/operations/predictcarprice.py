"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import error as shared_error
from ..shared import priceprediction as shared_priceprediction
from enum import Enum
from typing import Optional

class PredictCarPriceCarTypeEnum(str, Enum):
    r"""Car condition"""
    USED = 'used'
    NEW = 'new'

class PredictCarPriceCountryEnum(str, Enum):
    r"""Country for which car price will be predicted"""
    US = 'us'
    CA = 'ca'

class PredictCarPriceDrivetrainEnum(str, Enum):
    r"""Drivetrain on the car"""
    FOUR_WD = '4WD'
    AWD = 'AWD'
    FWD = 'FWD'
    RWD = 'RWD'

class PredictCarPriceEngineBlockEnum(str, Enum):
    r"""Engine Block of the car"""
    I = 'I'
    V = 'V'
    H = 'H'

class PredictCarPriceTransmissionEnum(str, Enum):
    r"""Transmission on the car"""
    MANUAL = 'Manual'
    AUTOMATIC = 'Automatic'


@dataclasses.dataclass
class PredictCarPriceRequest:
    
    car_type: PredictCarPriceCarTypeEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'car_type', 'style': 'form', 'explode': True }})
    r"""Car condition"""  
    api_key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'api_key', 'style': 'form', 'explode': True }})
    r"""The API Authentication Key. Mandatory with all API calls."""  
    base_exterior_color: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'base_exterior_color', 'style': 'form', 'explode': True }})
    r"""Base exterior color of the car"""  
    base_interior_color: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'base_interior_color', 'style': 'form', 'explode': True }})
    r"""Base interior color of the car"""  
    carfax_1_owner: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'carfax_1_owner', 'style': 'form', 'explode': True }})
    r"""Boolean to indicate car is carfax one owner or not"""  
    carfax_clean_title: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'carfax_clean_title', 'style': 'form', 'explode': True }})
    r"""Boolean to indicate car has clean title or not"""  
    city_mpg: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'city_mpg', 'style': 'form', 'explode': True }})
    r"""City mileage of the car"""  
    country: Optional[PredictCarPriceCountryEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'country', 'style': 'form', 'explode': True }})
    r"""Country for which car price will be predicted"""  
    cylinders: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cylinders', 'style': 'form', 'explode': True }})
    r"""Number of cylinders in the vehicle"""  
    doors: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'doors', 'style': 'form', 'explode': True }})
    r"""Number of doors in the vehicle"""  
    drivetrain: Optional[PredictCarPriceDrivetrainEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'drivetrain', 'style': 'form', 'explode': True }})
    r"""Drivetrain on the car"""  
    engine_block: Optional[PredictCarPriceEngineBlockEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'engine_block', 'style': 'form', 'explode': True }})
    r"""Engine Block of the car"""  
    engine_size: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'engine_size', 'style': 'form', 'explode': True }})
    r"""Engine Size of the car"""  
    highway_mpg: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'highway_mpg', 'style': 'form', 'explode': True }})
    r"""Highway mileage"""  
    is_certified: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'is_certified', 'style': 'form', 'explode': True }})
    r"""Boolean to indicate car is certified or not"""  
    latitude: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'latitude', 'style': 'form', 'explode': True }})
    r"""Latitude component of the location"""  
    longitude: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'longitude', 'style': 'form', 'explode': True }})
    r"""Longitude component of the location"""  
    make: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'make', 'style': 'form', 'explode': True }})
    r"""Car's make"""  
    miles: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'miles', 'style': 'form', 'explode': True }})
    r"""miles vehicle has driven in total"""  
    model: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'model', 'style': 'form', 'explode': True }})
    r"""Car's model"""  
    transmission: Optional[PredictCarPriceTransmissionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'transmission', 'style': 'form', 'explode': True }})
    r"""Transmission on the car"""  
    trim: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'trim', 'style': 'form', 'explode': True }})
    r"""Car's trim"""  
    vin: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'vin', 'style': 'form', 'explode': True }})
    r"""Predict price for a VIN"""  
    year: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'year', 'style': 'form', 'explode': True }})
    r"""Car manufacturing year"""  
    zip: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'zip', 'style': 'form', 'explode': True }})
    r"""Location zip"""  
    

@dataclasses.dataclass
class PredictCarPriceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error: Optional[shared_error.Error] = dataclasses.field(default=None)
    r"""Error"""  
    price_prediction: Optional[shared_priceprediction.PricePrediction] = dataclasses.field(default=None)
    r"""Predicted price of the car along with it's specifications"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    