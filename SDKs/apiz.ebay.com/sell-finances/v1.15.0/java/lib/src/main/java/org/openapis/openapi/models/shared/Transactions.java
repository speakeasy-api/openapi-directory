/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Transactions - This is the base response type of the &lt;b&gt;getTransactions&lt;/b&gt; method. The &lt;b&gt;getTransactions&lt;/b&gt; response includes details on one or more monetary transactions that match the input criteria, as well as pagination data. 
 */
public class Transactions {
    /**
     * The URI of the &lt;b&gt;getTransactions&lt;/b&gt; method request that produced the current page of the result set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("href")
    public String href;
    public Transactions withHref(String href) {
        this.href = href;
        return this;
    }
    
    /**
     * The maximum number of monetary transactions that may be returned per page of the result set. The &lt;strong&gt;limit&lt;/strong&gt; value can be passed in as a query parameter, or if omitted, its value defaults to &lt;code&gt;20&lt;/code&gt;. &lt;br&gt;&lt;br&gt;&lt;span class="tablenote"&gt;&lt;strong&gt;Note:&lt;/strong&gt; If this is the last or only page of the result set, the page may contain fewer monetary transactions than the &lt;strong&gt;limit&lt;/strong&gt; value.  To determine the number of pages in a result set, divide the &lt;b&gt;total&lt;/b&gt; value (total number of monetary transactions matching input criteria) by this &lt;strong&gt;limit&lt;/strong&gt; value, and then round up to the next integer. For example, if the &lt;b&gt;total&lt;/b&gt; value was &lt;code&gt;120&lt;/code&gt; (120 total monetary transactions) and the &lt;strong&gt;limit&lt;/strong&gt; value was &lt;code&gt;50&lt;/code&gt; (show 50 monetary transactions per page), the total number of pages in the result set is three, so the seller would have to make three separate &lt;strong&gt;getTransactions&lt;/strong&gt; calls to view all monetary transactions matching the input criteria. &lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Maximum:&lt;/b&gt; &lt;code&gt;200&lt;/code&gt; &lt;br&gt; &lt;b&gt;Default:&lt;/b&gt; &lt;code&gt;20&lt;/code&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limit")
    public Integer limit;
    public Transactions withLimit(Integer limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * The &lt;b&gt;getTransactions&lt;/b&gt; method URI to use if you wish to view the next page of the result set. &lt;br&gt;&lt;br&gt;This field is only returned if there is a next page of results to view based on the current input criteria.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("next")
    public String next;
    public Transactions withNext(String next) {
        this.next = next;
        return this;
    }
    
    /**
     * This integer value indicates the actual position that the first monetary transaction returned on the current page has in the results set. So, if you wanted to view the 11th monetary transaction of the result set, you would set the &lt;strong&gt;offset&lt;/strong&gt; value in the request to &lt;code&gt;10&lt;/code&gt;. &lt;br&gt;&lt;br&gt;In the request, you can use the &lt;b&gt;offset&lt;/b&gt; parameter in conjunction with the &lt;b&gt;limit&lt;/b&gt; parameter to control the pagination of the output. For example, if &lt;b&gt;offset&lt;/b&gt; is set to &lt;code&gt;30&lt;/code&gt; and &lt;b&gt;limit&lt;/b&gt; is set to &lt;code&gt;10&lt;/code&gt;, the method retrieves monetary transactions 31 thru 40 from the resulting collection of monetary transactions. &lt;br&gt;&lt;br&gt; &lt;span class="tablenote"&gt;&lt;strong&gt;Note:&lt;/strong&gt; This feature employs a zero-based list, where the first item in the list has an offset of &lt;code&gt;0&lt;/code&gt;.&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Default:&lt;/b&gt; &lt;code&gt;0&lt;/code&gt; (zero)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offset")
    public Integer offset;
    public Transactions withOffset(Integer offset) {
        this.offset = offset;
        return this;
    }
    
    /**
     * The &lt;b&gt;getTransactions&lt;/b&gt; method URI to use if you wish to view the previous page of the result set. &lt;br&gt;&lt;br&gt;This field is only returned if there is a previous page of results to view based on the current input criteria.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prev")
    public String prev;
    public Transactions withPrev(String prev) {
        this.prev = prev;
        return this;
    }
    
    /**
     * This integer value is the total amount of monetary transactions in the result set based on the current input criteria. Based on the total number of monetary transactions that match the criteria, and on the &lt;strong&gt;limit&lt;/strong&gt; and &lt;strong&gt;offset&lt;/strong&gt; values, there may be additional pages in the results set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total")
    public Integer total;
    public Transactions withTotal(Integer total) {
        this.total = total;
        return this;
    }
    
    /**
     * An array of one or more monetary transactions that match the input criteria. Details for each monetary transaction may include the unique identifier of the order associated with the monetary transaction, the status of the transaction, the amount of the order, the order's buyer, and the unique identifier of the payout (if a payout has been initiated/issued for the order).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactions")
    public Transaction[] transactions;
    public Transactions withTransactions(Transaction[] transactions) {
        this.transactions = transactions;
        return this;
    }
    
}
