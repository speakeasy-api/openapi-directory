"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Authentication:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_auth_token(self) -> operations.DeleteAuthTokenResponse:
        r"""Remove user access
        This endpoint removes the token in use.<br><br>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/auth/token'
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAuthTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_users_id_user_(self, request: operations.DeleteUsersIDUserRequest) -> operations.DeleteUsersIDUserResponse:
        r"""Delete the user
        This endpoint deletes the user.<br><br>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteUsersIDUserRequest, base_url, '/users/{id_user}', request)
        
        query_params = utils.get_query_params(operations.DeleteUsersIDUserRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteUsersIDUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.User])
                res.user = out

        return res

    def get_auth_token_code(self) -> operations.GetAuthTokenCodeResponse:
        r"""Generate a user temporary token
        This endpoint generates a new temporary token for the user.<br><br>In case the access_token is used by a trusted device, and you want to let another one (for example a web browser) access to user resources, use this service to create a token which will expire in 30 minutes.<br><br>Additionally, you can also generate a temporary single-use token by specifying 'type=singleAccess' as query parameter. A single-use token can only be used once no matter the endpoint being accessed.<br><br>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/auth/token/code'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAuthTokenCodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAuthTokenCode200ApplicationJSON])
                res.get_auth_token_code_200_application_json_object = out

        return res

    def get_certificate_type_(self, request: operations.GetCertificateTypeRequest) -> operations.GetCertificateTypeResponse:
        r"""Get the latest certificate of a type"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCertificateTypeRequest, base_url, '/certificate/{type}', request)
        
        query_params = utils.get_query_params(operations.GetCertificateTypeRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCertificateTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Certificate])
                res.certificate = out

        return res

    def get_users_id_user_(self, request: operations.GetUsersIDUserRequest) -> operations.GetUsersIDUserResponse:
        r"""Get a user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUsersIDUserRequest, base_url, '/users/{id_user}', request)
        
        query_params = utils.get_query_params(operations.GetUsersIDUserRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUsersIDUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.User])
                res.user = out

        return res

    def get_webauth(self, request: operations.GetWebauthRequestBody) -> operations.GetWebauthResponse:
        r"""First step to establish an oAuth2 connection.
        The route encapsulate 2 functionalities: 1. Create or update a connection through oAuth2 session.<br><br>2. Execute a transfer through OAuth2 session.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/webauth'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('GET', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWebauthResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_admin_jwt(self, request: operations.PostAdminJwtRequestBody) -> operations.PostAdminJwtResponse:
        r"""Generate a jwt manage token
        This endpoint generates a new jwt manage token. It requires an admin manage token to be used<br><br>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/jwt'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAdminJwtResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.post_admin_jwt_200_application_json_object = out

        return res

    def post_auth_init(self, request: operations.PostAuthInitRequestBody) -> operations.PostAuthInitResponse:
        r"""Create a new anonymous user
        This endpoint creates a new temporary token related to a new anonymous user.<br><br>It will expire 30 minutes after.<br><br>Note: if you supply client_id and client_secret, or if you call this endpoint with the manage_token, the token will be permanent.<br><br>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/auth/init'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAuthInitResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostAuthInit200ApplicationJSON])
                res.post_auth_init_200_application_json_object = out

        return res

    def post_auth_jwt(self, request: operations.PostAuthJwtRequestBody) -> operations.PostAuthJwtResponse:
        r"""Generate a user jwt token
        This endpoint generates a new jwt token for the user. This token will last the time in minutes given by the config key auth.default_token_expire (permanent if this the parameter expire=False is given)<br><br>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/auth/jwt'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAuthJwtResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostAuthJwt200ApplicationJSON])
                res.post_auth_jwt_200_application_json_object = out

        return res

    def post_auth_renew(self, request: operations.PostAuthRenewRequestBody) -> operations.PostAuthRenewResponse:
        r"""Get a new access token given an user id and client credentials"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/auth/renew'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAuthRenewResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostAuthRenew200ApplicationJSON])
                res.post_auth_renew_200_application_json_object = out

        return res

    def post_auth_token_access(self, request: operations.PostAuthTokenAccessRequestBody) -> operations.PostAuthTokenAccessResponse:
        r"""Transform a temporary code to a access_token
        In order to register a new user with the OAuth 2 process, the client has to call this endpoint to request a granted access_token with the received temporary code.<br><br>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/auth/token/access'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAuthTokenAccessResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostAuthTokenAccess200ApplicationJSON])
                res.post_auth_token_access_200_application_json_object = out

        return res

    def post_users_id_user_token(self, request: operations.PostUsersIDUserTokenRequest) -> operations.PostUsersIDUserTokenResponse:
        r"""Create a token
        Create an access_token for this user and get it.<br><br>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostUsersIDUserTokenRequest, base_url, '/users/{id_user}/token', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostUsersIDUserTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.post_users_id_user_token_200_application_json_object = out

        return res

    