"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateNetworkApplianceFirewallCellularFirewallRulesRequestBodyRulesPolicyEnum(str, Enum):
    r"""'allow' or 'deny' traffic specified by this rule"""
    ALLOW = 'allow'
    DENY = 'deny'

class UpdateNetworkApplianceFirewallCellularFirewallRulesRequestBodyRulesProtocolEnum(str, Enum):
    r"""The type of protocol (must be 'tcp', 'udp', 'icmp', 'icmp6' or 'any')"""
    ANY = 'any'
    ICMP = 'icmp'
    ICMP6 = 'icmp6'
    TCP = 'tcp'
    UDP = 'udp'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkApplianceFirewallCellularFirewallRulesRequestBodyRules:
    
    dest_cidr: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destCidr') }})
    r"""Comma-separated list of destination IP address(es) (in IP or CIDR notation), fully-qualified domain names (FQDN) or 'any'"""  
    policy: UpdateNetworkApplianceFirewallCellularFirewallRulesRequestBodyRulesPolicyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policy') }})
    r"""'allow' or 'deny' traffic specified by this rule"""  
    protocol: UpdateNetworkApplianceFirewallCellularFirewallRulesRequestBodyRulesProtocolEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocol') }})
    r"""The type of protocol (must be 'tcp', 'udp', 'icmp', 'icmp6' or 'any')"""  
    src_cidr: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('srcCidr') }})
    r"""Comma-separated list of source IP address(es) (in IP or CIDR notation), or 'any' (note: FQDN not supported for source addresses)"""  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment'), 'exclude': lambda f: f is None }})
    r"""Description of the rule (optional)"""  
    dest_port: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destPort'), 'exclude': lambda f: f is None }})
    r"""Comma-separated list of destination port(s) (integer in the range 1-65535), or 'any'"""  
    src_port: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('srcPort'), 'exclude': lambda f: f is None }})
    r"""Comma-separated list of source port(s) (integer in the range 1-65535), or 'any'"""  
    syslog_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('syslogEnabled'), 'exclude': lambda f: f is None }})
    r"""Log this rule to syslog (true or false, boolean value) - only applicable if a syslog has been configured (optional)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkApplianceFirewallCellularFirewallRulesRequestBody:
    
    rules: Optional[list[UpdateNetworkApplianceFirewallCellularFirewallRulesRequestBodyRules]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rules'), 'exclude': lambda f: f is None }})
    r"""An ordered array of the firewall rules (not including the default rule)"""  
    

@dataclasses.dataclass
class UpdateNetworkApplianceFirewallCellularFirewallRulesRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateNetworkApplianceFirewallCellularFirewallRulesRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateNetworkApplianceFirewallCellularFirewallRulesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_appliance_firewall_cellular_firewall_rules_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    