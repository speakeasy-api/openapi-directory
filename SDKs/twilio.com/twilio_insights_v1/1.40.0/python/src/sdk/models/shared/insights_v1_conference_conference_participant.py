"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import conference_participant_enum_call_direction_enum as shared_conference_participant_enum_call_direction_enum
from ..shared import conference_participant_enum_call_status_enum as shared_conference_participant_enum_call_status_enum
from ..shared import conference_participant_enum_call_type_enum as shared_conference_participant_enum_call_type_enum
from ..shared import conference_participant_enum_jitter_buffer_size_enum as shared_conference_participant_enum_jitter_buffer_size_enum
from ..shared import conference_participant_enum_processing_state_enum as shared_conference_participant_enum_processing_state_enum
from ..shared import conference_participant_enum_region_enum as shared_conference_participant_enum_region_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InsightsV1ConferenceConferenceParticipant:
    r"""OK"""
    
    account_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_sid'), 'exclude': lambda f: f is None }})
    r"""The unique SID identifier of the Account."""  
    call_direction: Optional[shared_conference_participant_enum_call_direction_enum.ConferenceParticipantEnumCallDirectionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('call_direction'), 'exclude': lambda f: f is None }})  
    call_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('call_sid'), 'exclude': lambda f: f is None }})
    r"""Unique SID identifier of the call that generated the Participant resource."""  
    call_status: Optional[shared_conference_participant_enum_call_status_enum.ConferenceParticipantEnumCallStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('call_status'), 'exclude': lambda f: f is None }})  
    call_type: Optional[shared_conference_participant_enum_call_type_enum.ConferenceParticipantEnumCallTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('call_type'), 'exclude': lambda f: f is None }})  
    coached_participants: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coached_participants'), 'exclude': lambda f: f is None }})
    r"""Call SIDs coached by this participant."""  
    conference_region: Optional[shared_conference_participant_enum_region_enum.ConferenceParticipantEnumRegionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conference_region'), 'exclude': lambda f: f is None }})  
    conference_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conference_sid'), 'exclude': lambda f: f is None }})
    r"""The unique SID identifier of the Conference."""  
    country_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country_code'), 'exclude': lambda f: f is None }})
    r"""ISO alpha-2 country code of the participant based on caller ID or called number."""  
    duration_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration_seconds'), 'exclude': lambda f: f is None }})
    r"""Participant durations in seconds."""  
    events: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('events'), 'exclude': lambda f: f is None }})
    r"""Object containing information of actions taken by participants. Contains a dictionary of URL links to nested resources of this Conference Participant."""  
    from_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from'), 'exclude': lambda f: f is None }})
    r"""Caller ID of the calling party."""  
    is_coach: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_coach'), 'exclude': lambda f: f is None }})
    r"""Boolean. Indicated whether participant was a coach."""  
    is_moderator: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_moderator'), 'exclude': lambda f: f is None }})
    r"""Boolean. Indicates whether participant had startConferenceOnEnter=true or endConferenceOnExit=true."""  
    jitter_buffer_size: Optional[shared_conference_participant_enum_jitter_buffer_size_enum.ConferenceParticipantEnumJitterBufferSizeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jitter_buffer_size'), 'exclude': lambda f: f is None }})  
    join_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('join_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""ISO 8601 timestamp of participant join event."""  
    label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label'), 'exclude': lambda f: f is None }})
    r"""The user-specified label of this participant."""  
    leave_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leave_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""ISO 8601 timestamp of participant leave event."""  
    metrics: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metrics'), 'exclude': lambda f: f is None }})
    r"""Object. Contains participant call quality metrics."""  
    outbound_queue_length: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outbound_queue_length'), 'exclude': lambda f: f is None }})
    r"""Add Participant API only. Estimated time in queue at call creation."""  
    outbound_time_in_queue: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outbound_time_in_queue'), 'exclude': lambda f: f is None }})
    r"""Add Participant API only. Actual time in queue in seconds."""  
    participant_region: Optional[shared_conference_participant_enum_region_enum.ConferenceParticipantEnumRegionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participant_region'), 'exclude': lambda f: f is None }})  
    participant_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participant_sid'), 'exclude': lambda f: f is None }})
    r"""SID for this participant."""  
    processing_state: Optional[shared_conference_participant_enum_processing_state_enum.ConferenceParticipantEnumProcessingStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processing_state'), 'exclude': lambda f: f is None }})  
    properties: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('properties'), 'exclude': lambda f: f is None }})
    r"""Participant properties and metadata."""  
    to: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to'), 'exclude': lambda f: f is None }})
    r"""Called party."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""The URL of this resource."""  
    