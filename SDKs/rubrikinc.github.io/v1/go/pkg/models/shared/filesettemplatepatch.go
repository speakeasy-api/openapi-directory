// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// FilesetTemplatePatchOperatingSystemTypeEnum - Operating system type of filesets created by template.
type FilesetTemplatePatchOperatingSystemTypeEnum string

const (
	FilesetTemplatePatchOperatingSystemTypeEnumUnixLike FilesetTemplatePatchOperatingSystemTypeEnum = "UnixLike"
	FilesetTemplatePatchOperatingSystemTypeEnumWindows  FilesetTemplatePatchOperatingSystemTypeEnum = "Windows"
)

func (e FilesetTemplatePatchOperatingSystemTypeEnum) ToPointer() *FilesetTemplatePatchOperatingSystemTypeEnum {
	return &e
}

func (e *FilesetTemplatePatchOperatingSystemTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UnixLike":
		fallthrough
	case "Windows":
		*e = FilesetTemplatePatchOperatingSystemTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilesetTemplatePatchOperatingSystemTypeEnum: %v", v)
	}
}

type FilesetTemplatePatchShareTypeEnum string

const (
	FilesetTemplatePatchShareTypeEnumNfs FilesetTemplatePatchShareTypeEnum = "NFS"
	FilesetTemplatePatchShareTypeEnumSmb FilesetTemplatePatchShareTypeEnum = "SMB"
)

func (e FilesetTemplatePatchShareTypeEnum) ToPointer() *FilesetTemplatePatchShareTypeEnum {
	return &e
}

func (e *FilesetTemplatePatchShareTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NFS":
		fallthrough
	case "SMB":
		*e = FilesetTemplatePatchShareTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilesetTemplatePatchShareTypeEnum: %v", v)
	}
}

// FilesetTemplatePatch - Provide an object with the fileset template definition.
type FilesetTemplatePatch struct {
	// Include or exclude hidden folders inside locally-mounted remote file systems from backups.
	AllowBackupHiddenFoldersInNetworkMounts *bool `json:"allowBackupHiddenFoldersInNetworkMounts,omitempty"`
	// Include or exclude locally-mounted remote file systems from backups.
	AllowBackupNetworkMounts *bool `json:"allowBackupNetworkMounts,omitempty"`
	// Action taken if script fails. Options are "abort", "continue".
	BackupScriptErrorHandling *string `json:"backupScriptErrorHandling,omitempty"`
	// Number of seconds after which the script is killed if it has not completed execution.
	BackupScriptTimeout *int64   `json:"backupScriptTimeout,omitempty"`
	Exceptions          []string `json:"exceptions,omitempty"`
	Excludes            []string `json:"excludes,omitempty"`
	ID                  string   `json:"id"`
	Includes            []string `json:"includes,omitempty"`
	Name                *string  `json:"name,omitempty"`
	// Operating system type of filesets created by template.
	OperatingSystemType *FilesetTemplatePatchOperatingSystemTypeEnum `json:"operatingSystemType,omitempty"`
	// Script to run after backup of this Fileset ends.
	PostBackupScript *string `json:"postBackupScript,omitempty"`
	// Script to run before backup of this Fileset starts.
	PreBackupScript *string                            `json:"preBackupScript,omitempty"`
	ShareType       *FilesetTemplatePatchShareTypeEnum `json:"shareType,omitempty"`
	// Use VSS during Windows backups.
	UseWindowsVss *bool `json:"useWindowsVss,omitempty"`
}
