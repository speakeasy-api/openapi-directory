// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DescribeVpcEndpointsResultVpcEndpointsDNSEntries - Describes a DNS entry.
type DescribeVpcEndpointsResultVpcEndpointsDNSEntries struct {
	DNSName      *string
	HostedZoneID *string
}

// DescribeVpcEndpointsResultVpcEndpointsDNSOptionsDNSRecordIPTypeEnum - The DNS records created for the endpoint.
type DescribeVpcEndpointsResultVpcEndpointsDNSOptionsDNSRecordIPTypeEnum string

const (
	DescribeVpcEndpointsResultVpcEndpointsDNSOptionsDNSRecordIPTypeEnumIpv4           DescribeVpcEndpointsResultVpcEndpointsDNSOptionsDNSRecordIPTypeEnum = "ipv4"
	DescribeVpcEndpointsResultVpcEndpointsDNSOptionsDNSRecordIPTypeEnumDualstack      DescribeVpcEndpointsResultVpcEndpointsDNSOptionsDNSRecordIPTypeEnum = "dualstack"
	DescribeVpcEndpointsResultVpcEndpointsDNSOptionsDNSRecordIPTypeEnumIpv6           DescribeVpcEndpointsResultVpcEndpointsDNSOptionsDNSRecordIPTypeEnum = "ipv6"
	DescribeVpcEndpointsResultVpcEndpointsDNSOptionsDNSRecordIPTypeEnumServiceDefined DescribeVpcEndpointsResultVpcEndpointsDNSOptionsDNSRecordIPTypeEnum = "service-defined"
)

func (e *DescribeVpcEndpointsResultVpcEndpointsDNSOptionsDNSRecordIPTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ipv4":
		fallthrough
	case "dualstack":
		fallthrough
	case "ipv6":
		fallthrough
	case "service-defined":
		*e = DescribeVpcEndpointsResultVpcEndpointsDNSOptionsDNSRecordIPTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVpcEndpointsResultVpcEndpointsDNSOptionsDNSRecordIPTypeEnum: %s", s)
	}
}

// DescribeVpcEndpointsResultVpcEndpointsDNSOptions - The DNS options for the endpoint.
type DescribeVpcEndpointsResultVpcEndpointsDNSOptions struct {
	DNSRecordIPType                          *DescribeVpcEndpointsResultVpcEndpointsDNSOptionsDNSRecordIPTypeEnum
	PrivateDNSOnlyForInboundResolverEndpoint *bool
}

// DescribeVpcEndpointsResultVpcEndpointsGroups - Describes a security group.
type DescribeVpcEndpointsResultVpcEndpointsGroups struct {
	GroupID   *string
	GroupName *string
}

// DescribeVpcEndpointsResultVpcEndpointsIPAddressTypeEnum - The IP address type for the endpoint.
type DescribeVpcEndpointsResultVpcEndpointsIPAddressTypeEnum string

const (
	DescribeVpcEndpointsResultVpcEndpointsIPAddressTypeEnumIpv4      DescribeVpcEndpointsResultVpcEndpointsIPAddressTypeEnum = "ipv4"
	DescribeVpcEndpointsResultVpcEndpointsIPAddressTypeEnumDualstack DescribeVpcEndpointsResultVpcEndpointsIPAddressTypeEnum = "dualstack"
	DescribeVpcEndpointsResultVpcEndpointsIPAddressTypeEnumIpv6      DescribeVpcEndpointsResultVpcEndpointsIPAddressTypeEnum = "ipv6"
)

func (e *DescribeVpcEndpointsResultVpcEndpointsIPAddressTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ipv4":
		fallthrough
	case "dualstack":
		fallthrough
	case "ipv6":
		*e = DescribeVpcEndpointsResultVpcEndpointsIPAddressTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVpcEndpointsResultVpcEndpointsIPAddressTypeEnum: %s", s)
	}
}

// DescribeVpcEndpointsResultVpcEndpointsLastError - The last error that occurred for endpoint.
type DescribeVpcEndpointsResultVpcEndpointsLastError struct {
	Code    *string
	Message *string
}

// DescribeVpcEndpointsResultVpcEndpointsStateEnum - The state of the endpoint.
type DescribeVpcEndpointsResultVpcEndpointsStateEnum string

const (
	DescribeVpcEndpointsResultVpcEndpointsStateEnumPendingAcceptance DescribeVpcEndpointsResultVpcEndpointsStateEnum = "PendingAcceptance"
	DescribeVpcEndpointsResultVpcEndpointsStateEnumPending           DescribeVpcEndpointsResultVpcEndpointsStateEnum = "Pending"
	DescribeVpcEndpointsResultVpcEndpointsStateEnumAvailable         DescribeVpcEndpointsResultVpcEndpointsStateEnum = "Available"
	DescribeVpcEndpointsResultVpcEndpointsStateEnumDeleting          DescribeVpcEndpointsResultVpcEndpointsStateEnum = "Deleting"
	DescribeVpcEndpointsResultVpcEndpointsStateEnumDeleted           DescribeVpcEndpointsResultVpcEndpointsStateEnum = "Deleted"
	DescribeVpcEndpointsResultVpcEndpointsStateEnumRejected          DescribeVpcEndpointsResultVpcEndpointsStateEnum = "Rejected"
	DescribeVpcEndpointsResultVpcEndpointsStateEnumFailed            DescribeVpcEndpointsResultVpcEndpointsStateEnum = "Failed"
	DescribeVpcEndpointsResultVpcEndpointsStateEnumExpired           DescribeVpcEndpointsResultVpcEndpointsStateEnum = "Expired"
)

func (e *DescribeVpcEndpointsResultVpcEndpointsStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PendingAcceptance":
		fallthrough
	case "Pending":
		fallthrough
	case "Available":
		fallthrough
	case "Deleting":
		fallthrough
	case "Deleted":
		fallthrough
	case "Rejected":
		fallthrough
	case "Failed":
		fallthrough
	case "Expired":
		*e = DescribeVpcEndpointsResultVpcEndpointsStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVpcEndpointsResultVpcEndpointsStateEnum: %s", s)
	}
}

// DescribeVpcEndpointsResultVpcEndpointsTags - Describes a tag.
type DescribeVpcEndpointsResultVpcEndpointsTags struct {
	Key   *string
	Value *string
}

// DescribeVpcEndpointsResultVpcEndpointsVpcEndpointTypeEnum - The type of endpoint.
type DescribeVpcEndpointsResultVpcEndpointsVpcEndpointTypeEnum string

const (
	DescribeVpcEndpointsResultVpcEndpointsVpcEndpointTypeEnumInterface           DescribeVpcEndpointsResultVpcEndpointsVpcEndpointTypeEnum = "Interface"
	DescribeVpcEndpointsResultVpcEndpointsVpcEndpointTypeEnumGateway             DescribeVpcEndpointsResultVpcEndpointsVpcEndpointTypeEnum = "Gateway"
	DescribeVpcEndpointsResultVpcEndpointsVpcEndpointTypeEnumGatewayLoadBalancer DescribeVpcEndpointsResultVpcEndpointsVpcEndpointTypeEnum = "GatewayLoadBalancer"
)

func (e *DescribeVpcEndpointsResultVpcEndpointsVpcEndpointTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Interface":
		fallthrough
	case "Gateway":
		fallthrough
	case "GatewayLoadBalancer":
		*e = DescribeVpcEndpointsResultVpcEndpointsVpcEndpointTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVpcEndpointsResultVpcEndpointsVpcEndpointTypeEnum: %s", s)
	}
}

// DescribeVpcEndpointsResultVpcEndpoints - Describes a VPC endpoint.
type DescribeVpcEndpointsResultVpcEndpoints struct {
	CreationTimestamp   *time.Time
	DNSEntries          []DescribeVpcEndpointsResultVpcEndpointsDNSEntries
	DNSOptions          *DescribeVpcEndpointsResultVpcEndpointsDNSOptions
	Groups              []DescribeVpcEndpointsResultVpcEndpointsGroups
	IPAddressType       *DescribeVpcEndpointsResultVpcEndpointsIPAddressTypeEnum
	LastError           *DescribeVpcEndpointsResultVpcEndpointsLastError
	NetworkInterfaceIds []string
	OwnerID             *string
	PolicyDocument      *string
	PrivateDNSEnabled   *bool
	RequesterManaged    *bool
	RouteTableIds       []string
	ServiceName         *string
	State               *DescribeVpcEndpointsResultVpcEndpointsStateEnum
	SubnetIds           []string
	Tags                []DescribeVpcEndpointsResultVpcEndpointsTags
	VpcEndpointID       *string
	VpcEndpointType     *DescribeVpcEndpointsResultVpcEndpointsVpcEndpointTypeEnum
	VpcID               *string
}

// DescribeVpcEndpointsResult - Success
type DescribeVpcEndpointsResult struct {
	NextToken    *string
	VpcEndpoints []DescribeVpcEndpointsResultVpcEndpoints
}
