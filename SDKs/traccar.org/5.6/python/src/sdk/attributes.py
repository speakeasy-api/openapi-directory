"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Attributes:
    r"""Computed attributes management"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_attributes_computed_id_(self, request: operations.DeleteAttributesComputedIDRequest) -> operations.DeleteAttributesComputedIDResponse:
        r"""Delete an Attribute"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteAttributesComputedIDRequest, base_url, '/attributes/computed/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAttributesComputedIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_attributes_computed(self, request: operations.GetAttributesComputedRequest) -> operations.GetAttributesComputedResponse:
        r"""Fetch a list of Attributes
        Without params, it returns a list of Attributes the user has access to
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/attributes/computed'
        
        query_params = utils.get_query_params(operations.GetAttributesComputedRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAttributesComputedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Attribute]])
                res.attributes = out

        return res

    def post_attributes_computed(self, request: shared.Attribute) -> operations.PostAttributesComputedResponse:
        r"""Create an Attribute"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/attributes/computed'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAttributesComputedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Attribute])
                res.attribute = out

        return res

    def put_attributes_computed_id_(self, request: operations.PutAttributesComputedIDRequest) -> operations.PutAttributesComputedIDResponse:
        r"""Update an Attribute"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutAttributesComputedIDRequest, base_url, '/attributes/computed/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "attribute", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutAttributesComputedIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Attribute])
                res.attribute = out

        return res

    