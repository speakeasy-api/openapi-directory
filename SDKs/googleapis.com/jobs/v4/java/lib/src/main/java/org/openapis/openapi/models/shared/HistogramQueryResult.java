/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * HistogramQueryResult - Histogram result that matches HistogramQuery specified in searches.
 */
public class HistogramQueryResult {
    /**
     * A map from the values of the facet associated with distinct values to the number of matching entries with corresponding value. The key format is: * (for string histogram) string values stored in the field. * (for named numeric bucket) name specified in `bucket()` function, like for `bucket(0, MAX, "non-negative")`, the key will be `non-negative`. * (for anonymous numeric bucket) range formatted as `-`, for example, `0-1000`, `MIN-0`, and `0-MAX`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("histogram")
    public java.util.Map<String, String> histogram;

    public HistogramQueryResult withHistogram(java.util.Map<String, String> histogram) {
        this.histogram = histogram;
        return this;
    }
    
    /**
     * Requested histogram expression.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("histogramQuery")
    public String histogramQuery;

    public HistogramQueryResult withHistogramQuery(String histogramQuery) {
        this.histogramQuery = histogramQuery;
        return this;
    }
    
    public HistogramQueryResult(){}
}
