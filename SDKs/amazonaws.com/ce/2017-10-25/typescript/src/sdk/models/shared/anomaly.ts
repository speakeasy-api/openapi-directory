/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AnomalyFeedbackTypeEnum } from "./anomalyfeedbacktypeenum";
import { AnomalyScore } from "./anomalyscore";
import { Impact } from "./impact";
import { RootCause } from "./rootcause";
import { Expose, Type } from "class-transformer";

/**
 * An unusual cost pattern. This consists of the detailed metadata and the current status of the anomaly object.
 */
export class Anomaly extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AnomalyEndDate" })
  anomalyEndDate?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "AnomalyId" })
  anomalyId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "AnomalyScore" })
  @Type(() => AnomalyScore)
  anomalyScore: AnomalyScore;

  @SpeakeasyMetadata()
  @Expose({ name: "AnomalyStartDate" })
  anomalyStartDate?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "DimensionValue" })
  dimensionValue?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Feedback" })
  feedback?: AnomalyFeedbackTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "Impact" })
  @Type(() => Impact)
  impact: Impact;

  @SpeakeasyMetadata()
  @Expose({ name: "MonitorArn" })
  monitorArn: string;

  @SpeakeasyMetadata({ elemType: RootCause })
  @Expose({ name: "RootCauses" })
  @Type(() => RootCause)
  rootCauses?: RootCause[];
}
