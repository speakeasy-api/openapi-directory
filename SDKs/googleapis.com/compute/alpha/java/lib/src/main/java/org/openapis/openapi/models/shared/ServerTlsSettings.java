/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ServerTlsSettings - The TLS settings for the server.
 */
public class ServerTlsSettings {
    /**
     * [Deprecated] The TLS settings for the client or server. The TLS settings for the client or server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("proxyTlsContext")
    public TlsContext proxyTlsContext;

    public ServerTlsSettings withProxyTlsContext(TlsContext proxyTlsContext) {
        this.proxyTlsContext = proxyTlsContext;
        return this;
    }
    
    /**
     * A list of alternate names to verify the subject identity in the certificate presented by the client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subjectAltNames")
    public String[] subjectAltNames;

    public ServerTlsSettings withSubjectAltNames(String[] subjectAltNames) {
        this.subjectAltNames = subjectAltNames;
        return this;
    }
    
    /**
     * Indicates whether connections should be secured using TLS. The value of this field determines how TLS is enforced. This field can be set to one of the following: - SIMPLE Secure connections with standard TLS semantics. - MUTUAL Secure connections to the backends using mutual TLS by presenting client certificates for authentication. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tlsMode")
    public ServerTlsSettingsTlsModeEnum tlsMode;

    public ServerTlsSettings withTlsMode(ServerTlsSettingsTlsModeEnum tlsMode) {
        this.tlsMode = tlsMode;
        return this;
    }
    
    public ServerTlsSettings(){}
}
