<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Customers 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Removes an existing Customer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomersDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CustomersDeleteResponse
     */
	public function customersDelete(
        \OpenAPI\OpenAPI\Models\Operations\CustomersDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CustomersDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/customers/{id}', \OpenAPI\OpenAPI\Models\Operations\CustomersDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CustomersDeleteRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CustomersDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customersDelete200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of company's Customers. Supports OData querying protocol.
     * Filtering is forbidden.
     * Ordering is allowed by "id" and "code" fields.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\CustomersGetResponse
     */
	public function customersGet(
    ): \OpenAPI\OpenAPI\Models\Operations\CustomersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/customers');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CustomersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pageResultCustomerQueryDto = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PageResultCustomerQueryDto', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of Customer's account transactions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomersGetAccountTransRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CustomersGetAccountTransResponse
     */
	public function customersGetAccountTrans(
        \OpenAPI\OpenAPI\Models\Operations\CustomersGetAccountTransRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CustomersGetAccountTransResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/customers/{itemId}/accountTrans', \OpenAPI\OpenAPI\Models\Operations\CustomersGetAccountTransRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CustomersGetAccountTransResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountTranDtos = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\AccountTranDto>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a Customer's opening balances, calculated for the next periods: current month, one month old, two months old, three and more months old.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomersGetOpeningBalanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CustomersGetOpeningBalanceResponse
     */
	public function customersGetOpeningBalance(
        \OpenAPI\OpenAPI\Models\Operations\CustomersGetOpeningBalanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CustomersGetOpeningBalanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/customers/{itemId}/openingBalance', \OpenAPI\OpenAPI\Models\Operations\CustomersGetOpeningBalanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CustomersGetOpeningBalanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ownerOpeningBalanceInPeriodsDto = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OwnerOpeningBalanceInPeriodsDto', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of Customer's opening balance transactions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomersGetOpeningBalanceListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CustomersGetOpeningBalanceListResponse
     */
	public function customersGetOpeningBalanceList(
        \OpenAPI\OpenAPI\Models\Operations\CustomersGetOpeningBalanceListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CustomersGetOpeningBalanceListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/customers/{itemId}/openingBalanceList', \OpenAPI\OpenAPI\Models\Operations\CustomersGetOpeningBalanceListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CustomersGetOpeningBalanceListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ownerOpeningBalanceDtos = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\OwnerOpeningBalanceDto>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of Customer's quotes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomersGetQuotesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CustomersGetQuotesResponse
     */
	public function customersGetQuotes(
        \OpenAPI\OpenAPI\Models\Operations\CustomersGetQuotesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CustomersGetQuotesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/customers/{itemId}/quotes', \OpenAPI\OpenAPI\Models\Operations\CustomersGetQuotesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CustomersGetQuotesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->quoteDtos = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\QuoteDto>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Customer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CustomerDto $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CustomersPostResponse
     */
	public function customersPost(
        \OpenAPI\OpenAPI\Models\Shared\CustomerDto $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CustomersPostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/customers');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CustomersPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customersPost200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Processes a batch of Customers.
     * 
     * @param array<\OpenAPI\OpenAPI\Models\Shared\BatchItemCustomerDto> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CustomersProcessBatchResponse
     */
	public function customersProcessBatch(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CustomersProcessBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/customers/batch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CustomersProcessBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customersProcessBatch200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing Customer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomersPutRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CustomersPutResponse
     */
	public function customersPut(
        \OpenAPI\OpenAPI\Models\Operations\CustomersPutRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CustomersPutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/customers/{id}', \OpenAPI\OpenAPI\Models\Operations\CustomersPutRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customerDto", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CustomersPutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customersPut200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns information about a single Customer. You may specify that Customer's ledger balance should be calculated.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV1CustomersIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV1CustomersIdResponse
     */
	public function getV1CustomersId(
        \OpenAPI\OpenAPI\Models\Operations\GetV1CustomersIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV1CustomersIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/customers/{id}', \OpenAPI\OpenAPI\Models\Operations\GetV1CustomersIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetV1CustomersIdRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV1CustomersIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customerDto = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomerDto', 'json');
            }
        }

        return $response;
    }
}