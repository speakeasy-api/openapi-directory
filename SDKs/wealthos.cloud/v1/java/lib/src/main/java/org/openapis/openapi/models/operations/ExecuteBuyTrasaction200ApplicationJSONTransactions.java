/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ExecuteBuyTrasaction200ApplicationJSONTransactions {
    /**
     * Additional external details of the transaction, This may be populated in reconciliation process
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additional_external_details")
    public java.util.Map<String, Object> additionalExternalDetails;
    public ExecuteBuyTrasaction200ApplicationJSONTransactions withAdditionalExternalDetails(java.util.Map<String, Object> additionalExternalDetails) {
        this.additionalExternalDetails = additionalExternalDetails;
        return this;
    }
    
    /**
     * (optional) Order identifier assigned by the wealth manager
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_order_id")
    public String clientOrderId;
    public ExecuteBuyTrasaction200ApplicationJSONTransactions withClientOrderId(String clientOrderId) {
        this.clientOrderId = clientOrderId;
        return this;
    }
    
    /**
     * Will indicate the date where this record was created
     */
    @JsonProperty("created_at")
    public String createdAt;
    public ExecuteBuyTrasaction200ApplicationJSONTransactions withCreatedAt(String createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Currency of the transaction
     */
    @JsonProperty("currency")
    public String currency;
    public ExecuteBuyTrasaction200ApplicationJSONTransactions withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * in = cash payment or pending buy transaction, out= cash out or pending sell transaction.
     */
    @JsonProperty("direction")
    public ExecuteBuyTrasaction200ApplicationJSONTransactionsDirectionEnum direction;
    public ExecuteBuyTrasaction200ApplicationJSONTransactions withDirection(ExecuteBuyTrasaction200ApplicationJSONTransactionsDirectionEnum direction) {
        this.direction = direction;
        return this;
    }
    
    /**
     * Executed price of the buy, sell transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("execution_price")
    public String executionPrice;
    public ExecuteBuyTrasaction200ApplicationJSONTransactions withExecutionPrice(String executionPrice) {
        this.executionPrice = executionPrice;
        return this;
    }
    
    /**
     * External Transaction Reference
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_transaction_reference")
    public String externalTransactionReference;
    public ExecuteBuyTrasaction200ApplicationJSONTransactions withExternalTransactionReference(String externalTransactionReference) {
        this.externalTransactionReference = externalTransactionReference;
        return this;
    }
    
    /**
     * Investment product id of the transaction. Will be 'cash' for cash transaction
     */
    @JsonProperty("investment_product_id")
    public String investmentProductId;
    public ExecuteBuyTrasaction200ApplicationJSONTransactions withInvestmentProductId(String investmentProductId) {
        this.investmentProductId = investmentProductId;
        return this;
    }
    
    /**
     * Origin of the transaction
     */
    @JsonProperty("origin")
    public ExecuteBuyTrasaction200ApplicationJSONTransactionsOriginEnum origin;
    public ExecuteBuyTrasaction200ApplicationJSONTransactions withOrigin(ExecuteBuyTrasaction200ApplicationJSONTransactionsOriginEnum origin) {
        this.origin = origin;
        return this;
    }
    
    /**
     * parent_transaction_id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_transaction_id")
    public String parentTransactionId;
    public ExecuteBuyTrasaction200ApplicationJSONTransactions withParentTransactionId(String parentTransactionId) {
        this.parentTransactionId = parentTransactionId;
        return this;
    }
    
    @JsonProperty("primary_transaction_type")
    public ExecuteBuyTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum primaryTransactionType;
    public ExecuteBuyTrasaction200ApplicationJSONTransactions withPrimaryTransactionType(ExecuteBuyTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum primaryTransactionType) {
        this.primaryTransactionType = primaryTransactionType;
        return this;
    }
    
    /**
     * Intended settlement date of the pending transaction or actual the settled day of the transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlement_date")
    public String settlementDate;
    public ExecuteBuyTrasaction200ApplicationJSONTransactions withSettlementDate(String settlementDate) {
        this.settlementDate = settlementDate;
        return this;
    }
    
    @JsonProperty("status")
    public ExecuteBuyTrasaction200ApplicationJSONTransactionsStatusEnum status;
    public ExecuteBuyTrasaction200ApplicationJSONTransactions withStatus(ExecuteBuyTrasaction200ApplicationJSONTransactionsStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Sub transaction type
     */
    @JsonProperty("sub_transaction_type")
    public ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum subTransactionType;
    public ExecuteBuyTrasaction200ApplicationJSONTransactions withSubTransactionType(ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum subTransactionType) {
        this.subTransactionType = subTransactionType;
        return this;
    }
    
    /**
     * Sub state of the transaction. instructed, confirmed, priced and scheduled sub_types are applicable for pending state and rejected, cancelled, settled sub_types applicable for archived state
     */
    @JsonProperty("sub_type")
    public ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTypeEnum subType;
    public ExecuteBuyTrasaction200ApplicationJSONTransactions withSubType(ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTypeEnum subType) {
        this.subType = subType;
        return this;
    }
    
    /**
     * Date the transaction was effected
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trade_date")
    public String tradeDate;
    public ExecuteBuyTrasaction200ApplicationJSONTransactions withTradeDate(String tradeDate) {
        this.tradeDate = tradeDate;
        return this;
    }
    
    /**
     * transaction_id of successful transaction
     */
    @JsonProperty("transaction_id")
    public String transactionId;
    public ExecuteBuyTrasaction200ApplicationJSONTransactions withTransactionId(String transactionId) {
        this.transactionId = transactionId;
        return this;
    }
    
    /**
     * (optional) quantity of the investment product, required for unit based orders
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transaction_quantity")
    public String transactionQuantity;
    public ExecuteBuyTrasaction200ApplicationJSONTransactions withTransactionQuantity(String transactionQuantity) {
        this.transactionQuantity = transactionQuantity;
        return this;
    }
    
    /**
     * (optional) value of the investment product, required for value based orders
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transaction_value")
    public String transactionValue;
    public ExecuteBuyTrasaction200ApplicationJSONTransactions withTransactionValue(String transactionValue) {
        this.transactionValue = transactionValue;
        return this;
    }
    
    /**
     * State of the transaction
     */
    @JsonProperty("type")
    public ExecuteBuyTrasaction200ApplicationJSONTransactionsTypeEnum type;
    public ExecuteBuyTrasaction200ApplicationJSONTransactions withType(ExecuteBuyTrasaction200ApplicationJSONTransactionsTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * Will indicate the date where this record was last changed
     */
    @JsonProperty("updated_at")
    public String updatedAt;
    public ExecuteBuyTrasaction200ApplicationJSONTransactions withUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
}
