"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Accounts:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def mybusinessnotifications_accounts_get_notification_setting(self, request: operations.MybusinessnotificationsAccountsGetNotificationSettingRequest) -> operations.MybusinessnotificationsAccountsGetNotificationSettingResponse:
        r"""Returns the pubsub notification settings for the account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MybusinessnotificationsAccountsGetNotificationSettingRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.MybusinessnotificationsAccountsGetNotificationSettingRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MybusinessnotificationsAccountsGetNotificationSettingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotificationSetting])
                res.notification_setting = out

        return res

    def mybusinessnotifications_accounts_update_notification_setting(self, request: operations.MybusinessnotificationsAccountsUpdateNotificationSettingRequest) -> operations.MybusinessnotificationsAccountsUpdateNotificationSettingResponse:
        r"""Sets the pubsub notification setting for the account informing Google which topic to send pubsub notifications for. Use the notification_types field within notification_setting to manipulate the events an account wants to subscribe to. An account will only have one notification setting resource, and only one pubsub topic can be set. To delete the setting, update with an empty notification_types"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MybusinessnotificationsAccountsUpdateNotificationSettingRequest, base_url, '/v1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "notification_setting", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MybusinessnotificationsAccountsUpdateNotificationSettingRequest, request)
        
        client = self._client
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MybusinessnotificationsAccountsUpdateNotificationSettingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotificationSetting])
                res.notification_setting = out

        return res

    