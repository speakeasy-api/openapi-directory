// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

type PostAdminRecordingsStartRequestBodyCaptureHeaders struct {
	CaseInsensitive *bool `json:"caseInsensitive,omitempty"`
}

// PostAdminRecordingsStartRequestBodyExtractBodyCriteria - Criteria for extracting response bodies to a separate file instead of including it in the stub mapping
type PostAdminRecordingsStartRequestBodyExtractBodyCriteria struct {
	// Size threshold for extracting binary response bodies. Supports humanized size strings, e.g. "56 Mb". Default unit is bytes.
	BinarySizeThreshold *string `json:"binarySizeThreshold,omitempty"`
	// Size threshold for extracting binary response bodies. Supports humanized size strings, e.g. "56 Mb". Default unit is bytes.
	TextSizeThreshold *string `json:"textSizeThreshold,omitempty"`
}

// PostAdminRecordingsStartRequestBodyFiltersBasicAuthCredentials - Pre-emptive basic auth credentials to match against
type PostAdminRecordingsStartRequestBodyFiltersBasicAuthCredentials struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

type PostAdminRecordingsStartRequestBodyFilters struct {
	// Pre-emptive basic auth credentials to match against
	BasicAuthCredentials *PostAdminRecordingsStartRequestBodyFiltersBasicAuthCredentials `json:"basicAuthCredentials,omitempty"`
	// Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
	BodyPatterns []map[string]interface{} `json:"bodyPatterns,omitempty"`
	// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
	Cookies map[string]interface{} `json:"cookies,omitempty"`
	// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The HTTP request method e.g. GET
	Method *string `json:"method,omitempty"`
	// Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
	QueryParameters map[string]interface{} `json:"queryParameters,omitempty"`
	// The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URL *string `json:"url,omitempty"`
	// The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPath *string `json:"urlPath,omitempty"`
	// The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPathPattern *string `json:"urlPathPattern,omitempty"`
	// The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPattern *string `json:"urlPattern,omitempty"`
}

type PostAdminRecordingsStartRequestBodyRequestBodyPattern4MatcherEnum string

const (
	PostAdminRecordingsStartRequestBodyRequestBodyPattern4MatcherEnumEqualToXML PostAdminRecordingsStartRequestBodyRequestBodyPattern4MatcherEnum = "equalToXml"
)

func (e *PostAdminRecordingsStartRequestBodyRequestBodyPattern4MatcherEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "equalToXml":
		*e = PostAdminRecordingsStartRequestBodyRequestBodyPattern4MatcherEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAdminRecordingsStartRequestBodyRequestBodyPattern4MatcherEnum: %s", s)
	}
}

// PostAdminRecordingsStartRequestBodyRequestBodyPattern4 - Always match request bodies using equalToXml
type PostAdminRecordingsStartRequestBodyRequestBodyPattern4 struct {
	Matcher *PostAdminRecordingsStartRequestBodyRequestBodyPattern4MatcherEnum `json:"matcher,omitempty"`
}

type PostAdminRecordingsStartRequestBodyRequestBodyPattern3MatcherEnum string

const (
	PostAdminRecordingsStartRequestBodyRequestBodyPattern3MatcherEnumEqualToJSON PostAdminRecordingsStartRequestBodyRequestBodyPattern3MatcherEnum = "equalToJson"
)

func (e *PostAdminRecordingsStartRequestBodyRequestBodyPattern3MatcherEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "equalToJson":
		*e = PostAdminRecordingsStartRequestBodyRequestBodyPattern3MatcherEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAdminRecordingsStartRequestBodyRequestBodyPattern3MatcherEnum: %s", s)
	}
}

// PostAdminRecordingsStartRequestBodyRequestBodyPattern3 - Always match request bodies using equalToJson
type PostAdminRecordingsStartRequestBodyRequestBodyPattern3 struct {
	// Ignore order of array elements
	IgnoreArrayOrder *bool `json:"ignoreArrayOrder,omitempty"`
	// Ignore extra elements in objects
	IgnoreExtraElements *bool                                                              `json:"ignoreExtraElements,omitempty"`
	Matcher             *PostAdminRecordingsStartRequestBodyRequestBodyPattern3MatcherEnum `json:"matcher,omitempty"`
}

type PostAdminRecordingsStartRequestBodyRequestBodyPattern2MatcherEnum string

const (
	PostAdminRecordingsStartRequestBodyRequestBodyPattern2MatcherEnumEqualTo PostAdminRecordingsStartRequestBodyRequestBodyPattern2MatcherEnum = "equalTo"
)

func (e *PostAdminRecordingsStartRequestBodyRequestBodyPattern2MatcherEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "equalTo":
		*e = PostAdminRecordingsStartRequestBodyRequestBodyPattern2MatcherEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAdminRecordingsStartRequestBodyRequestBodyPattern2MatcherEnum: %s", s)
	}
}

// PostAdminRecordingsStartRequestBodyRequestBodyPattern2 - Always match request bodies using equalTo
type PostAdminRecordingsStartRequestBodyRequestBodyPattern2 struct {
	// Match body using case-insensitive string comparison
	CaseInsensitive *bool                                                              `json:"caseInsensitive,omitempty"`
	Matcher         *PostAdminRecordingsStartRequestBodyRequestBodyPattern2MatcherEnum `json:"matcher,omitempty"`
}

type PostAdminRecordingsStartRequestBodyRequestBodyPattern1MatcherEnum string

const (
	PostAdminRecordingsStartRequestBodyRequestBodyPattern1MatcherEnumAuto PostAdminRecordingsStartRequestBodyRequestBodyPattern1MatcherEnum = "auto"
)

func (e *PostAdminRecordingsStartRequestBodyRequestBodyPattern1MatcherEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "auto":
		*e = PostAdminRecordingsStartRequestBodyRequestBodyPattern1MatcherEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAdminRecordingsStartRequestBodyRequestBodyPattern1MatcherEnum: %s", s)
	}
}

// PostAdminRecordingsStartRequestBodyRequestBodyPattern1 - Automatically determine matcher based on content type (the default)
type PostAdminRecordingsStartRequestBodyRequestBodyPattern1 struct {
	// If equalTo is used, match body use case-insensitive string comparison
	CaseInsensitive *bool `json:"caseInsensitive,omitempty"`
	// If equalToJson is used, ignore order of array elements
	IgnoreArrayOrder *bool `json:"ignoreArrayOrder,omitempty"`
	// If equalToJson is used, matcher ignores extra elements in objects
	IgnoreExtraElements *bool                                                              `json:"ignoreExtraElements,omitempty"`
	Matcher             *PostAdminRecordingsStartRequestBodyRequestBodyPattern1MatcherEnum `json:"matcher,omitempty"`
}

type PostAdminRecordingsStartRequestBodyRequestBodyPatternType string

const (
	PostAdminRecordingsStartRequestBodyRequestBodyPatternTypePostAdminRecordingsStartRequestBodyRequestBodyPattern1 PostAdminRecordingsStartRequestBodyRequestBodyPatternType = "post_/__admin/recordings/start_requestBody_requestBodyPattern_1"
	PostAdminRecordingsStartRequestBodyRequestBodyPatternTypePostAdminRecordingsStartRequestBodyRequestBodyPattern2 PostAdminRecordingsStartRequestBodyRequestBodyPatternType = "post_/__admin/recordings/start_requestBody_requestBodyPattern_2"
	PostAdminRecordingsStartRequestBodyRequestBodyPatternTypePostAdminRecordingsStartRequestBodyRequestBodyPattern3 PostAdminRecordingsStartRequestBodyRequestBodyPatternType = "post_/__admin/recordings/start_requestBody_requestBodyPattern_3"
	PostAdminRecordingsStartRequestBodyRequestBodyPatternTypePostAdminRecordingsStartRequestBodyRequestBodyPattern4 PostAdminRecordingsStartRequestBodyRequestBodyPatternType = "post_/__admin/recordings/start_requestBody_requestBodyPattern_4"
)

type PostAdminRecordingsStartRequestBodyRequestBodyPattern struct {
	PostAdminRecordingsStartRequestBodyRequestBodyPattern1 *PostAdminRecordingsStartRequestBodyRequestBodyPattern1
	PostAdminRecordingsStartRequestBodyRequestBodyPattern2 *PostAdminRecordingsStartRequestBodyRequestBodyPattern2
	PostAdminRecordingsStartRequestBodyRequestBodyPattern3 *PostAdminRecordingsStartRequestBodyRequestBodyPattern3
	PostAdminRecordingsStartRequestBodyRequestBodyPattern4 *PostAdminRecordingsStartRequestBodyRequestBodyPattern4

	Type PostAdminRecordingsStartRequestBodyRequestBodyPatternType
}

func CreatePostAdminRecordingsStartRequestBodyRequestBodyPatternPostAdminRecordingsStartRequestBodyRequestBodyPattern1(postAdminRecordingsStartRequestBodyRequestBodyPattern1 PostAdminRecordingsStartRequestBodyRequestBodyPattern1) PostAdminRecordingsStartRequestBodyRequestBodyPattern {
	typ := PostAdminRecordingsStartRequestBodyRequestBodyPatternTypePostAdminRecordingsStartRequestBodyRequestBodyPattern1

	return PostAdminRecordingsStartRequestBodyRequestBodyPattern{
		PostAdminRecordingsStartRequestBodyRequestBodyPattern1: &postAdminRecordingsStartRequestBodyRequestBodyPattern1,
		Type: typ,
	}
}

func CreatePostAdminRecordingsStartRequestBodyRequestBodyPatternPostAdminRecordingsStartRequestBodyRequestBodyPattern2(postAdminRecordingsStartRequestBodyRequestBodyPattern2 PostAdminRecordingsStartRequestBodyRequestBodyPattern2) PostAdminRecordingsStartRequestBodyRequestBodyPattern {
	typ := PostAdminRecordingsStartRequestBodyRequestBodyPatternTypePostAdminRecordingsStartRequestBodyRequestBodyPattern2

	return PostAdminRecordingsStartRequestBodyRequestBodyPattern{
		PostAdminRecordingsStartRequestBodyRequestBodyPattern2: &postAdminRecordingsStartRequestBodyRequestBodyPattern2,
		Type: typ,
	}
}

func CreatePostAdminRecordingsStartRequestBodyRequestBodyPatternPostAdminRecordingsStartRequestBodyRequestBodyPattern3(postAdminRecordingsStartRequestBodyRequestBodyPattern3 PostAdminRecordingsStartRequestBodyRequestBodyPattern3) PostAdminRecordingsStartRequestBodyRequestBodyPattern {
	typ := PostAdminRecordingsStartRequestBodyRequestBodyPatternTypePostAdminRecordingsStartRequestBodyRequestBodyPattern3

	return PostAdminRecordingsStartRequestBodyRequestBodyPattern{
		PostAdminRecordingsStartRequestBodyRequestBodyPattern3: &postAdminRecordingsStartRequestBodyRequestBodyPattern3,
		Type: typ,
	}
}

func CreatePostAdminRecordingsStartRequestBodyRequestBodyPatternPostAdminRecordingsStartRequestBodyRequestBodyPattern4(postAdminRecordingsStartRequestBodyRequestBodyPattern4 PostAdminRecordingsStartRequestBodyRequestBodyPattern4) PostAdminRecordingsStartRequestBodyRequestBodyPattern {
	typ := PostAdminRecordingsStartRequestBodyRequestBodyPatternTypePostAdminRecordingsStartRequestBodyRequestBodyPattern4

	return PostAdminRecordingsStartRequestBodyRequestBodyPattern{
		PostAdminRecordingsStartRequestBodyRequestBodyPattern4: &postAdminRecordingsStartRequestBodyRequestBodyPattern4,
		Type: typ,
	}
}

func (u *PostAdminRecordingsStartRequestBodyRequestBodyPattern) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	postAdminRecordingsStartRequestBodyRequestBodyPattern1 := new(PostAdminRecordingsStartRequestBodyRequestBodyPattern1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAdminRecordingsStartRequestBodyRequestBodyPattern1); err == nil {
		u.PostAdminRecordingsStartRequestBodyRequestBodyPattern1 = postAdminRecordingsStartRequestBodyRequestBodyPattern1
		u.Type = PostAdminRecordingsStartRequestBodyRequestBodyPatternTypePostAdminRecordingsStartRequestBodyRequestBodyPattern1
		return nil
	}

	postAdminRecordingsStartRequestBodyRequestBodyPattern2 := new(PostAdminRecordingsStartRequestBodyRequestBodyPattern2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAdminRecordingsStartRequestBodyRequestBodyPattern2); err == nil {
		u.PostAdminRecordingsStartRequestBodyRequestBodyPattern2 = postAdminRecordingsStartRequestBodyRequestBodyPattern2
		u.Type = PostAdminRecordingsStartRequestBodyRequestBodyPatternTypePostAdminRecordingsStartRequestBodyRequestBodyPattern2
		return nil
	}

	postAdminRecordingsStartRequestBodyRequestBodyPattern3 := new(PostAdminRecordingsStartRequestBodyRequestBodyPattern3)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAdminRecordingsStartRequestBodyRequestBodyPattern3); err == nil {
		u.PostAdminRecordingsStartRequestBodyRequestBodyPattern3 = postAdminRecordingsStartRequestBodyRequestBodyPattern3
		u.Type = PostAdminRecordingsStartRequestBodyRequestBodyPatternTypePostAdminRecordingsStartRequestBodyRequestBodyPattern3
		return nil
	}

	postAdminRecordingsStartRequestBodyRequestBodyPattern4 := new(PostAdminRecordingsStartRequestBodyRequestBodyPattern4)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAdminRecordingsStartRequestBodyRequestBodyPattern4); err == nil {
		u.PostAdminRecordingsStartRequestBodyRequestBodyPattern4 = postAdminRecordingsStartRequestBodyRequestBodyPattern4
		u.Type = PostAdminRecordingsStartRequestBodyRequestBodyPatternTypePostAdminRecordingsStartRequestBodyRequestBodyPattern4
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostAdminRecordingsStartRequestBodyRequestBodyPattern) MarshalJSON() ([]byte, error) {
	if u.PostAdminRecordingsStartRequestBodyRequestBodyPattern1 != nil {
		return json.Marshal(u.PostAdminRecordingsStartRequestBodyRequestBodyPattern1)
	}

	if u.PostAdminRecordingsStartRequestBodyRequestBodyPattern2 != nil {
		return json.Marshal(u.PostAdminRecordingsStartRequestBodyRequestBodyPattern2)
	}

	if u.PostAdminRecordingsStartRequestBodyRequestBodyPattern3 != nil {
		return json.Marshal(u.PostAdminRecordingsStartRequestBodyRequestBodyPattern3)
	}

	if u.PostAdminRecordingsStartRequestBodyRequestBodyPattern4 != nil {
		return json.Marshal(u.PostAdminRecordingsStartRequestBodyRequestBodyPattern4)
	}

	return nil, nil
}

type PostAdminRecordingsStartRequestBody struct {
	// Headers from the request to include in the generated stub mappings, mapped to parameter objects. The only parameter available is "caseInsensitive", which defaults to false
	CaptureHeaders map[string]PostAdminRecordingsStartRequestBodyCaptureHeaders `json:"captureHeaders,omitempty"`
	// Criteria for extracting response bodies to a separate file instead of including it in the stub mapping
	ExtractBodyCriteria *PostAdminRecordingsStartRequestBodyExtractBodyCriteria `json:"extractBodyCriteria,omitempty"`
	Filters             *PostAdminRecordingsStartRequestBodyFilters             `json:"filters,omitempty"`
	// Whether to save stub mappings to the file system or just return them
	Persist *bool `json:"persist,omitempty"`
	// When true, duplicate requests will be added to a Scenario. When false, duplicates are discarded
	RepeatsAsScenarios *bool `json:"repeatsAsScenarios,omitempty"`
	// Control the request body matcher used in generated stub mappings
	RequestBodyPattern *PostAdminRecordingsStartRequestBodyRequestBodyPattern `json:"requestBodyPattern,omitempty"`
	// Target URL when using the record and playback API
	TargetBaseURL *string `json:"targetBaseUrl,omitempty"`
	// List of names of stub mappings transformers to apply to generated stubs
	TransformerParameters map[string]interface{} `json:"transformerParameters,omitempty"`
	// Parameters to pass to stub mapping transformers
	Transformers []string `json:"transformers,omitempty"`
}

type PostAdminRecordingsStartRequest struct {
	Request PostAdminRecordingsStartRequestBody `request:"mediaType=application/json"`
}

type PostAdminRecordingsStartResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
