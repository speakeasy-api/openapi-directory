<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class OrderLine
{
    /**
     * URL to an image that can be later embedded in communications between Klarna and the customer. (max 1024 characters).
     * 
     *  A minimum of 250x250 px resolution is recommended for the image to look good in the Klarna app, and below 50x50 px won't even show. We recommend using a good sized image (650x650 px or more), however the file size must not exceed 12MB.
     * 
     * @var ?string $imageUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('image_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $imageUrl = null;
    
    /**
     * Used for storing merchant's internal order number or other reference. Pass through field. (max 1024 characters)
     * 
     * @var ?string $merchantData
     */
	#[\JMS\Serializer\Annotation\SerializedName('merchant_data')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $merchantData = null;
    
    /**
     * Descriptive name of the order line item.
     * 
     * @var string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
	#[\JMS\Serializer\Annotation\SerializedName('product_identifiers')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ProductIdentifiers')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ProductIdentifiers $productIdentifiers = null;
    
    /**
     * URL to the product in the merchant’s webshop that can be later used in communications between Klarna and the customer. (max 1024 characters)
     * 
     * @var ?string $productUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('product_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $productUrl = null;
    
    /**
     * Quantity of the order line item. Must be a non-negative number.
     * 
     * @var int $quantity
     */
	#[\JMS\Serializer\Annotation\SerializedName('quantity')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $quantity;
    
    /**
     * Unit used to describe the quantity, e.g. kg, pcs, etc. If defined the value has to be 1-8 characters.
     * 
     * @var ?string $quantityUnit
     */
	#[\JMS\Serializer\Annotation\SerializedName('quantity_unit')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $quantityUnit = null;
    
    /**
     * Client facing article number, SKU or similar. Max length is 256 characters.
     * 
     * @var ?string $reference
     */
	#[\JMS\Serializer\Annotation\SerializedName('reference')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $reference = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('subscription')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Subscription')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Subscription $subscription = null;
    
    /**
     * Tax rate of the order line. Non-negative value. The percentage value is represented with two implicit decimals. I.e 1900 = 19%.
     * 
     * @var ?int $taxRate
     */
	#[\JMS\Serializer\Annotation\SerializedName('tax_rate')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $taxRate = null;
    
    /**
     * Total amount of the order line. Must be defined as minor units. Includes tax and discount. Eg: 2500=25 euros
     * 
     * Value = (quantity x unit_price) - total_discount_amount. 
     * (max value: 100000000)
     * 
     * @var int $totalAmount
     */
	#[\JMS\Serializer\Annotation\SerializedName('total_amount')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $totalAmount;
    
    /**
     * Non-negative minor units. Includes tax. Eg: 500=5 euros
     * 
     * @var ?int $totalDiscountAmount
     */
	#[\JMS\Serializer\Annotation\SerializedName('total_discount_amount')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $totalDiscountAmount = null;
    
    /**
     * Total tax amount of the order line. Must be within ±1 of total_amount - total_amount 10000 / (10000 + tax_rate). Negative when type is discount.
     * 
     * @var ?int $totalTaxAmount
     */
	#[\JMS\Serializer\Annotation\SerializedName('total_tax_amount')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $totalTaxAmount = null;
    
    /**
     * Type of the order line item. The possible values are:
     * 
     * 
     * physical
     * discount
     * shipping_fee
     * sales_tax
     * digital
     * gift_card
     * store_credit
     * surcharge
     * 
     * @var ?string $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $type = null;
    
    /**
     * Price for a single unit of the order line. Must be defined as minor units. Includes tax, excludes discount. (max value: 100000000)
     * 
     * @var int $unitPrice
     */
	#[\JMS\Serializer\Annotation\SerializedName('unit_price')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $unitPrice;
    
	public function __construct()
	{
		$this->imageUrl = null;
		$this->merchantData = null;
		$this->name = "";
		$this->productIdentifiers = null;
		$this->productUrl = null;
		$this->quantity = 0;
		$this->quantityUnit = null;
		$this->reference = null;
		$this->subscription = null;
		$this->taxRate = null;
		$this->totalAmount = 0;
		$this->totalDiscountAmount = null;
		$this->totalTaxAmount = null;
		$this->type = null;
		$this->unitPrice = 0;
	}
}
