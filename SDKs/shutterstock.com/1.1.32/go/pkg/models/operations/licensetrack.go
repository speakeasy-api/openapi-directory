// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type LicenseTrackSecurity struct {
	CustomerAccessCode string `security:"scheme,type=oauth2,name=Authorization"`
}

// LicenseTrackLicenseEnum - License type
type LicenseTrackLicenseEnum string

const (
	LicenseTrackLicenseEnumAudioPlatform        LicenseTrackLicenseEnum = "audio_platform"
	LicenseTrackLicenseEnumPremierMusicBasic    LicenseTrackLicenseEnum = "premier_music_basic"
	LicenseTrackLicenseEnumPremierMusicExtended LicenseTrackLicenseEnum = "premier_music_extended"
	LicenseTrackLicenseEnumPremierMusicPro      LicenseTrackLicenseEnum = "premier_music_pro"
	LicenseTrackLicenseEnumPremierMusicComp     LicenseTrackLicenseEnum = "premier_music_comp"
	LicenseTrackLicenseEnumAssetAllMusic        LicenseTrackLicenseEnum = "asset_all_music"
)

func (e *LicenseTrackLicenseEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "audio_platform":
		fallthrough
	case "premier_music_basic":
		fallthrough
	case "premier_music_extended":
		fallthrough
	case "premier_music_pro":
		fallthrough
	case "premier_music_comp":
		fallthrough
	case "asset_all_music":
		*e = LicenseTrackLicenseEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LicenseTrackLicenseEnum: %s", s)
	}
}

type LicenseTrackRequest struct {
	// Tracks to license
	LicenseAudioRequest shared.LicenseAudioRequest `request:"mediaType=application/json"`
	// License type
	License *LicenseTrackLicenseEnum `queryParam:"style=form,explode=true,name=license"`
	// The ID of the search that led to licensing this track
	SearchID *string `queryParam:"style=form,explode=true,name=search_id"`
}

type LicenseTrackResponse struct {
	ContentType string
	// OK
	LicenseAudioResultDataList *shared.LicenseAudioResultDataList
	StatusCode                 int
	RawResponse                *http.Response
}
