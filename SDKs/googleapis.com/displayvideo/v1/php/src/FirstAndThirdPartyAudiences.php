<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class FirstAndThirdPartyAudiences 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a FirstAndThirdPartyAudience. Only supported for the following audience_type: * `CUSTOMER_MATCH_CONTACT_INFO` * `CUSTOMER_MATCH_DEVICE_ID`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesCreateResponse
     */
	public function displayvideoFirstAndThirdPartyAudiencesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/firstAndThirdPartyAudiences');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "firstAndThirdPartyAudienceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firstAndThirdPartyAudience = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirstAndThirdPartyAudience', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the member list of a Customer Match audience. Only supported for the following audience_type: * `CUSTOMER_MATCH_CONTACT_INFO` * `CUSTOMER_MATCH_DEVICE_ID`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesEditCustomerMatchMembersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesEditCustomerMatchMembersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesEditCustomerMatchMembersResponse
     */
	public function displayvideoFirstAndThirdPartyAudiencesEditCustomerMatchMembers(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesEditCustomerMatchMembersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesEditCustomerMatchMembersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesEditCustomerMatchMembersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/firstAndThirdPartyAudiences/{firstAndThirdPartyAudienceId}:editCustomerMatchMembers', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesEditCustomerMatchMembersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "editCustomerMatchMembersRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesEditCustomerMatchMembersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesEditCustomerMatchMembersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->editCustomerMatchMembersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EditCustomerMatchMembersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a first and third party audience.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesGetResponse
     */
	public function displayvideoFirstAndThirdPartyAudiencesGet(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/firstAndThirdPartyAudiences/{firstAndThirdPartyAudienceId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firstAndThirdPartyAudience = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirstAndThirdPartyAudience', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists first and third party audiences. The order is defined by the order_by parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesListResponse
     */
	public function displayvideoFirstAndThirdPartyAudiencesList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/firstAndThirdPartyAudiences');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFirstAndThirdPartyAudiencesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListFirstAndThirdPartyAudiencesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing FirstAndThirdPartyAudience. Only supported for the following audience_type: * `CUSTOMER_MATCH_CONTACT_INFO` * `CUSTOMER_MATCH_DEVICE_ID`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesPatchResponse
     */
	public function displayvideoFirstAndThirdPartyAudiencesPatch(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/firstAndThirdPartyAudiences/{firstAndThirdPartyAudienceId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "firstAndThirdPartyAudienceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoFirstAndThirdPartyAudiencesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firstAndThirdPartyAudience = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirstAndThirdPartyAudience', 'json');
            }
        }

        return $response;
    }
}