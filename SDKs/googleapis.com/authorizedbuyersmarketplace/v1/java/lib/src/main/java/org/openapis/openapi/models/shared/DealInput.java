/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DealInput - A deal represents a segment of inventory for displaying ads that contains the terms and targeting information that is used for serving as well as the deal stats and status. Note: A proposal may contain multiple deals.
 */
public class DealInput {
    /**
     * Represents an amount of money with its currency type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("estimatedGrossSpend")
    public Money estimatedGrossSpend;

    public DealInput withEstimatedGrossSpend(Money estimatedGrossSpend) {
        this.estimatedGrossSpend = estimatedGrossSpend;
        return this;
    }
    
    /**
     * Proposed flight end time of the deal. This will generally be stored in a granularity of a second. A value is not necessary for Private Auction deals.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flightEndTime")
    public String flightEndTime;

    public DealInput withFlightEndTime(String flightEndTime) {
        this.flightEndTime = flightEndTime;
        return this;
    }
    
    /**
     * Proposed flight start time of the deal. This will generally be stored in the granularity of one second since deal serving starts at seconds boundary. Any time specified with more granularity (for example, in milliseconds) will be truncated towards the start of time in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flightStartTime")
    public String flightStartTime;

    public DealInput withFlightStartTime(String flightStartTime) {
        this.flightStartTime = flightStartTime;
        return this;
    }
    
    /**
     * Immutable. The unique identifier of the deal. Auto-generated by the server when a deal is created. Format: buyers/{accountId}/proposals/{proposalId}/deals/{dealId}
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public DealInput withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Pricing terms for Preferred Deals.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preferredDealTerms")
    public PreferredDealTerms preferredDealTerms;

    public DealInput withPreferredDealTerms(PreferredDealTerms preferredDealTerms) {
        this.preferredDealTerms = preferredDealTerms;
        return this;
    }
    
    /**
     * Pricing terms for Private Auctions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("privateAuctionTerms")
    public PrivateAuctionTermsInput privateAuctionTerms;

    public DealInput withPrivateAuctionTerms(PrivateAuctionTermsInput privateAuctionTerms) {
        this.privateAuctionTerms = privateAuctionTerms;
        return this;
    }
    
    /**
     * Pricing terms for Programmatic Guaranteed Deals.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("programmaticGuaranteedTerms")
    public ProgrammaticGuaranteedTerms programmaticGuaranteedTerms;

    public DealInput withProgrammaticGuaranteedTerms(ProgrammaticGuaranteedTerms programmaticGuaranteedTerms) {
        this.programmaticGuaranteedTerms = programmaticGuaranteedTerms;
        return this;
    }
    
    /**
     * Immutable. Reference to the seller on the deal. Format: `buyers/{buyerAccountId}/publisherProfiles/{publisherProfileId}`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publisherProfile")
    public String publisherProfile;

    public DealInput withPublisherProfile(String publisherProfile) {
        this.publisherProfile = publisherProfile;
        return this;
    }
    
    /**
     * Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sellerTimeZone")
    public TimeZone sellerTimeZone;

    public DealInput withSellerTimeZone(TimeZone sellerTimeZone) {
        this.sellerTimeZone = sellerTimeZone;
        return this;
    }
    
    /**
     * Targeting represents different criteria that can be used to target inventory. For example, they can choose to target inventory only if the user is in the US. Multiple types of targeting are always applied as a logical AND, unless noted otherwise.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targeting")
    public MarketplaceTargeting targeting;

    public DealInput withTargeting(MarketplaceTargeting targeting) {
        this.targeting = targeting;
        return this;
    }
    
    public DealInput(){}
}
