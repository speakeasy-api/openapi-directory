/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Set this parameter to Y to limit the results to NYT Critics' Picks. To get only those movies that have not been highlighted by Times critics, specify critics-pick=N. (To get all reviews regardless of critics-pick status, simply omit this parameter.)
 *
 * @remarks
 *
 */
export enum GetReviewsSearchJsonCriticsPickEnum {
  Y = "Y",
  N = "N",
}

export class GetReviewsSearchJsonRequest extends SpeakeasyBase {
  /**
   * Set this parameter to Y to limit the results to NYT Critics' Picks. To get only those movies that have not been highlighted by Times critics, specify critics-pick=N. (To get all reviews regardless of critics-pick status, simply omit this parameter.)
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=critics-pick",
  })
  criticsPick?: GetReviewsSearchJsonCriticsPickEnum;

  /**
   * Positive integer, multiple of 20
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=offset",
  })
  offset?: number;

  /**
   * Single date: YYYY-MM-DD
   *
   * @remarks
   *
   * Start and end date: YYYY-MM-DD;YYYY-MM-DD
   *
   * The opening-date is the date the movie's opening date in the New York region.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=opening-date",
  })
  openingDate?: string;

  /**
   * Sets the sort order of the results.
   *
   * @remarks
   *
   * Results ordered by-title are in ascending alphabetical order. Results ordered by one of the date parameters are in reverse chronological order.
   *
   * If you do not specify a sort order, the results will be ordered by publication-date.
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=order" })
  order?: string;

  /**
   * Single date: YYYY-MM-DD
   *
   * @remarks
   *
   * Start and end date: YYYY-MM-DD;YYYY-MM-DD
   *
   * The publication-date is the date the review was first published in The Times.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=publication-date",
  })
  publicationDate?: string;

  /**
   * Search keywords; matches movie title and indexed terms
   *
   * @remarks
   *
   * To limit your search to exact matches only, surround your search string with single quotation marks (e.g., query='28+days+later'). Otherwise, responses will include partial matches ("head words") as well as exact matches (e.g., president will match president, presidents and presidential).
   *
   *   If you specify multiple terms without quotation marks, they will be combined in an OR search.
   *
   *   If you omit the query parameter, your request will be equivalent to a reviews and NYT Critics' Picks request.
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=query" })
  query?: string;

  /**
   * Include this parameter to limit your results to reviews by a specific critic. Reviewer names should be formatted like this: Manohla Dargis.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=reviewer",
  })
  reviewer?: string;
}

/**
 * An array of Movies
 */
export class GetReviewsSearchJson200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "copyright" })
  copyright?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "num_results" })
  numResults?: number;

  @SpeakeasyMetadata({ elemType: shared.Movie })
  @Expose({ name: "results" })
  @Type(() => shared.Movie)
  results?: shared.Movie[];

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: string;
}

export class GetReviewsSearchJsonResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * An array of Movies
   */
  @SpeakeasyMetadata()
  getReviewsSearchJSON200ApplicationJSONObject?: GetReviewsSearchJson200ApplicationJSON;
}
