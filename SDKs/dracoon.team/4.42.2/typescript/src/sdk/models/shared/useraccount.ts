/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RoleList } from "./rolelist";
import { UserAttributes } from "./userattributes";
import { UserAuthData } from "./userauthdata";
import { UserAuthMethod } from "./userauthmethod";
import { UserGroup } from "./usergroup";
import { Expose, Transform, Type } from "class-transformer";

/**
 * User information
 */
export class UserAccount extends SpeakeasyBase {
  /**
   * User Authentication Data
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authData" })
  @Type(() => UserAuthData)
  authData: UserAuthData;

  /**
   * &#128679; Deprecated since v4.13.0
   *
   * @remarks
   *
   * Authentication methods:
   *
   * * `sql`
   *
   * * `active_directory`
   *
   * * `radius`
   *
   * * `openid`
   *
   * use `authData` instead
   */
  @SpeakeasyMetadata({ elemType: UserAuthMethod })
  @Expose({ name: "authMethods" })
  @Type(() => UserAuthMethod)
  authMethods?: UserAuthMethod[];

  /**
   * Email
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * Expiration date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expireAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expireAt?: Date;

  /**
   * User first name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firstName" })
  firstName: string;

  /**
   * &#128679; Deprecated since v4.12.0
   *
   * @remarks
   *
   * Gender
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gender" })
  gender?: string;

  /**
   * User has manageable rooms
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hasManageableRooms" })
  hasManageableRooms: boolean;

  /**
   * Homeroom ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "homeRoomId" })
  homeRoomId?: number;

  /**
   * Unique identifier for the user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * User has generated private key.
   *
   * @remarks
   *
   * Possible if client-side encryption is active for this customer
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isEncryptionEnabled" })
  isEncryptionEnabled?: boolean;

  /**
   * User is locked:
   *
   * @remarks
   *
   * * `false` - unlocked
   *
   * * `true` - locked
   *
   *
   *
   * User is locked and can not login anymore.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isLocked" })
  isLocked: boolean;

  /**
   * &#128640; Since v4.20.0
   *
   * @remarks
   *
   * IETF language tag
   */
  @SpeakeasyMetadata()
  @Expose({ name: "language" })
  language: string;

  /**
   * Last failed logon date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastLoginFailAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastLoginFailAt?: Date;

  /**
   * &#128679; Deprecated since v4.6.0
   *
   * @remarks
   *
   * Last failed logon IP address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastLoginFailIp" })
  lastLoginFailIp?: string;

  /**
   * Last successful logon date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastLoginSuccessAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastLoginSuccessAt?: Date;

  /**
   * &#128679; Deprecated since v4.6.0
   *
   * @remarks
   *
   * Last successful logon IP address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastLoginSuccessIp" })
  lastLoginSuccessIp?: string;

  /**
   * User last name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastName" })
  lastName: string;

  /**
   * &#128679; Deprecated since v4.7.0
   *
   * @remarks
   *
   * User lock status:
   *
   * * `0` - locked
   *
   * * `1` - Web access allowed
   *
   * * `2` - Web and mobile access allowed
   *
   *
   *
   * Please use `isLocked` instead.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lockStatus" })
  lockStatus: number;

  /**
   * &#128679; Deprecated since v4.13.0
   *
   * @remarks
   *
   * User login name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "login" })
  login?: string;

  /**
   * &#128640; Since v4.13.0
   *
   * @remarks
   *
   * If `true`, the user must set the `email` at the first login.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mustSetEmail" })
  mustSetEmail?: boolean;

  /**
   * User has accepted EULA.
   *
   * @remarks
   *
   * Present, if EULA is system global active.
   *
   * cf. `GET system/config/settings/general` - `eulaEnabled`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "needsToAcceptEULA" })
  needsToAcceptEULA?: boolean;

  /**
   * &#128679; Deprecated since v4.13.0
   *
   * @remarks
   *
   * Determines whether user has to change his / her password
   */
  @SpeakeasyMetadata()
  @Expose({ name: "needsToChangePassword" })
  needsToChangePassword: boolean;

  /**
   * &#128679; Deprecated since v4.13.0
   *
   * @remarks
   *
   * If `true`, the user must change the `userName` at the first login.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "needsToChangeUserName" })
  needsToChangeUserName?: boolean;

  /**
   * Phone number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "phone" })
  phone?: string;

  /**
   * &#128679; Deprecated since v4.18.0
   *
   * @remarks
   *
   * Job title
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;

  /**
   * User custom attributes (list of key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userAttributes" })
  @Type(() => UserAttributes)
  userAttributes?: UserAttributes;

  /**
   * All groups the user is member of
   */
  @SpeakeasyMetadata({ elemType: UserGroup })
  @Expose({ name: "userGroups" })
  @Type(() => UserGroup)
  userGroups?: UserGroup[];

  /**
   * &#128640; Since v4.13.0
   *
   * @remarks
   *
   * Username
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userName" })
  userName: string;

  /**
   * List of roles
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userRoles" })
  @Type(() => RoleList)
  userRoles: RoleList;
}
