/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DeveloperMetadataLookup - Selects DeveloperMetadata that matches all of the specified fields. For example, if only a metadata ID is specified this considers the DeveloperMetadata with that particular unique ID. If a metadata key is specified, this considers all developer metadata with that key. If a key, visibility, and location type are all specified, this considers all developer metadata with that key and visibility that are associated with a location of that type. In general, this selects all DeveloperMetadata that matches the intersection of all the specified fields; any field or combination of fields may be specified.
 */
public class DeveloperMetadataLookup {
    /**
     * Determines how this lookup matches the location. If this field is specified as EXACT, only developer metadata associated on the exact location specified is matched. If this field is specified to INTERSECTING, developer metadata associated on intersecting locations is also matched. If left unspecified, this field assumes a default value of INTERSECTING. If this field is specified, a metadataLocation must also be specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locationMatchingStrategy")
    public DeveloperMetadataLookupLocationMatchingStrategyEnum locationMatchingStrategy;

    public DeveloperMetadataLookup withLocationMatchingStrategy(DeveloperMetadataLookupLocationMatchingStrategyEnum locationMatchingStrategy) {
        this.locationMatchingStrategy = locationMatchingStrategy;
        return this;
    }
    
    /**
     * Limits the selected developer metadata to those entries which are associated with locations of the specified type. For example, when this field is specified as ROW this lookup only considers developer metadata associated on rows. If the field is left unspecified, all location types are considered. This field cannot be specified as SPREADSHEET when the locationMatchingStrategy is specified as INTERSECTING or when the metadataLocation is specified as a non-spreadsheet location: spreadsheet metadata cannot intersect any other developer metadata location. This field also must be left unspecified when the locationMatchingStrategy is specified as EXACT.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locationType")
    public DeveloperMetadataLookupLocationTypeEnum locationType;

    public DeveloperMetadataLookup withLocationType(DeveloperMetadataLookupLocationTypeEnum locationType) {
        this.locationType = locationType;
        return this;
    }
    
    /**
     * Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadataId")
    public Integer metadataId;

    public DeveloperMetadataLookup withMetadataId(Integer metadataId) {
        this.metadataId = metadataId;
        return this;
    }
    
    /**
     * Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_key.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadataKey")
    public String metadataKey;

    public DeveloperMetadataLookup withMetadataKey(String metadataKey) {
        this.metadataKey = metadataKey;
        return this;
    }
    
    /**
     * A location where metadata may be associated in a spreadsheet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadataLocation")
    public DeveloperMetadataLocation metadataLocation;

    public DeveloperMetadataLookup withMetadataLocation(DeveloperMetadataLocation metadataLocation) {
        this.metadataLocation = metadataLocation;
        return this;
    }
    
    /**
     * Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadataValue")
    public String metadataValue;

    public DeveloperMetadataLookup withMetadataValue(String metadataValue) {
        this.metadataValue = metadataValue;
        return this;
    }
    
    /**
     * Limits the selected developer metadata to that which has a matching DeveloperMetadata.visibility. If left unspecified, all developer metadata visibile to the requesting project is considered.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visibility")
    public DeveloperMetadataLookupVisibilityEnum visibility;

    public DeveloperMetadataLookup withVisibility(DeveloperMetadataLookupVisibilityEnum visibility) {
        this.visibility = visibility;
        return this;
    }
    
    public DeveloperMetadataLookup(){}
}
