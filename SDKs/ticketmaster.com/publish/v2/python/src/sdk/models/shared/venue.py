"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import address as shared_address
from ..shared import city as shared_city
from ..shared import country as shared_country
from ..shared import dma as shared_dma
from ..shared import image as shared_image
from ..shared import location as shared_location
from ..shared import market as shared_market
from ..shared import social as shared_social
from ..shared import source as shared_source
from ..shared import state as shared_state
from ..shared import venueboxofficeinfo as shared_venueboxofficeinfo
from ..shared import venuegeneralinfo as shared_venuegeneralinfo
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class VenueTypeEnum(str, Enum):
    r"""Type of the entity"""
    EVENT = 'event'
    VENUE = 'venue'
    ATTRACTION = 'attraction'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Venue:
    r"""Venue"""
    
    type: VenueTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of the entity"""  
    accessible_seating_details: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessibleSeatingDetails'), 'exclude': lambda f: f is None }})
    r"""Venue accessible seating details - multi-lingual fields"""  
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})
    r"""Indicate if the entity is active, inactive entity won't appear in Discovery API"""  
    additional_infos: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalInfos'), 'exclude': lambda f: f is None }})
    r"""Additional informations of the entity - multi-lingual fields"""  
    address: Optional[shared_address.Address] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""Address"""  
    box_office_info: Optional[shared_venueboxofficeinfo.VenueBoxOfficeInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('boxOfficeInfo'), 'exclude': lambda f: f is None }})
    r"""Venue box office information"""  
    city: Optional[shared_city.City] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city'), 'exclude': lambda f: f is None }})
    r"""City"""  
    country: Optional[shared_country.Country] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})
    r"""Country"""  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""Default currency of ticket prices for events in this venue"""  
    descriptions: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('descriptions'), 'exclude': lambda f: f is None }})
    r"""Descriptions of the entity - multi-lingual fields"""  
    discoverable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('discoverable'), 'exclude': lambda f: f is None }})
    r"""True if the entity is dicoverable in discovery API"""  
    distance: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distance'), 'exclude': lambda f: f is None }})  
    dma: Optional[list[shared_dma.Dma]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dma'), 'exclude': lambda f: f is None }})
    r"""The list of associated DMAs (Designated Market Areas) of the venue"""  
    general_info: Optional[shared_venuegeneralinfo.VenueGeneralInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('generalInfo'), 'exclude': lambda f: f is None }})
    r"""Venue general information"""  
    images: Optional[list[shared_image.Image]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('images'), 'exclude': lambda f: f is None }})
    r"""Images of the entity"""  
    location: Optional[shared_location.Location] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})
    r"""Location"""  
    markets: Optional[list[shared_market.Market]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('markets'), 'exclude': lambda f: f is None }})
    r"""Markets of the venue"""  
    names: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('names'), 'exclude': lambda f: f is None }})
    r"""Names of the entity - multi-lingual fields"""  
    parking_details: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parkingDetails'), 'exclude': lambda f: f is None }})
    r"""Venue parking info - multi-lingual fields"""  
    postal_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postalCode'), 'exclude': lambda f: f is None }})
    r"""Postal code / zipcode of the venue"""  
    references: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('references'), 'exclude': lambda f: f is None }})
    r"""References of this entity in an other system. Reference is the exact same entity"""  
    relationships: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships'), 'exclude': lambda f: f is None }})
    r"""Relationships on the entity, like if the entity is a duplicate of another one"""  
    social: Optional[shared_social.Social] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('social'), 'exclude': lambda f: f is None }})
    r"""Social networks data"""  
    source: Optional[shared_source.Source] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})
    r"""Source"""  
    state: Optional[shared_state.State] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""State"""  
    test: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('test'), 'exclude': lambda f: f is None }})
    r"""Indicate if this is a test entity, by default test entities won't appear in discovery API"""  
    timezone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezone'), 'exclude': lambda f: f is None }})
    r"""Timezone of the venue"""  
    units: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('units'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""URL of a web site detail page of the entity"""  
    version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""Version of the entity. Version is to avoid updated an entity with an older version"""  
    