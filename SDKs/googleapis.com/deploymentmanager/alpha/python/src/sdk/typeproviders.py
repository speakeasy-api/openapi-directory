"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class TypeProviders:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def deploymentmanager_type_providers_delete(self, request: operations.DeploymentmanagerTypeProvidersDeleteRequest, security: operations.DeploymentmanagerTypeProvidersDeleteSecurity) -> operations.DeploymentmanagerTypeProvidersDeleteResponse:
        r"""Deletes a type provider."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeploymentmanagerTypeProvidersDeleteRequest, base_url, '/deploymentmanager/alpha/projects/{project}/global/typeProviders/{typeProvider}', request)
        
        query_params = utils.get_query_params(operations.DeploymentmanagerTypeProvidersDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeploymentmanagerTypeProvidersDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def deploymentmanager_type_providers_get(self, request: operations.DeploymentmanagerTypeProvidersGetRequest, security: operations.DeploymentmanagerTypeProvidersGetSecurity) -> operations.DeploymentmanagerTypeProvidersGetResponse:
        r"""Gets information about a specific type provider."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeploymentmanagerTypeProvidersGetRequest, base_url, '/deploymentmanager/alpha/projects/{project}/global/typeProviders/{typeProvider}', request)
        
        query_params = utils.get_query_params(operations.DeploymentmanagerTypeProvidersGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeploymentmanagerTypeProvidersGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TypeProvider])
                res.type_provider = out

        return res

    def deploymentmanager_type_providers_get_type(self, request: operations.DeploymentmanagerTypeProvidersGetTypeRequest, security: operations.DeploymentmanagerTypeProvidersGetTypeSecurity) -> operations.DeploymentmanagerTypeProvidersGetTypeResponse:
        r"""Gets a type info for a type provided by a TypeProvider."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeploymentmanagerTypeProvidersGetTypeRequest, base_url, '/deploymentmanager/alpha/projects/{project}/global/typeProviders/{typeProvider}/types/{type}', request)
        
        query_params = utils.get_query_params(operations.DeploymentmanagerTypeProvidersGetTypeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeploymentmanagerTypeProvidersGetTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TypeInfo])
                res.type_info = out

        return res

    def deploymentmanager_type_providers_insert(self, request: operations.DeploymentmanagerTypeProvidersInsertRequest, security: operations.DeploymentmanagerTypeProvidersInsertSecurity) -> operations.DeploymentmanagerTypeProvidersInsertResponse:
        r"""Creates a type provider."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeploymentmanagerTypeProvidersInsertRequest, base_url, '/deploymentmanager/alpha/projects/{project}/global/typeProviders', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "type_provider", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DeploymentmanagerTypeProvidersInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeploymentmanagerTypeProvidersInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def deploymentmanager_type_providers_list(self, request: operations.DeploymentmanagerTypeProvidersListRequest, security: operations.DeploymentmanagerTypeProvidersListSecurity) -> operations.DeploymentmanagerTypeProvidersListResponse:
        r"""Lists all resource type providers for Deployment Manager."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeploymentmanagerTypeProvidersListRequest, base_url, '/deploymentmanager/alpha/projects/{project}/global/typeProviders', request)
        
        query_params = utils.get_query_params(operations.DeploymentmanagerTypeProvidersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeploymentmanagerTypeProvidersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TypeProvidersListResponse])
                res.type_providers_list_response = out

        return res

    def deploymentmanager_type_providers_list_types(self, request: operations.DeploymentmanagerTypeProvidersListTypesRequest, security: operations.DeploymentmanagerTypeProvidersListTypesSecurity) -> operations.DeploymentmanagerTypeProvidersListTypesResponse:
        r"""Lists all the type info for a TypeProvider."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeploymentmanagerTypeProvidersListTypesRequest, base_url, '/deploymentmanager/alpha/projects/{project}/global/typeProviders/{typeProvider}/types', request)
        
        query_params = utils.get_query_params(operations.DeploymentmanagerTypeProvidersListTypesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeploymentmanagerTypeProvidersListTypesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TypeProvidersListTypesResponse])
                res.type_providers_list_types_response = out

        return res

    def deploymentmanager_type_providers_patch(self, request: operations.DeploymentmanagerTypeProvidersPatchRequest, security: operations.DeploymentmanagerTypeProvidersPatchSecurity) -> operations.DeploymentmanagerTypeProvidersPatchResponse:
        r"""Patches a type provider."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeploymentmanagerTypeProvidersPatchRequest, base_url, '/deploymentmanager/alpha/projects/{project}/global/typeProviders/{typeProvider}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "type_provider1", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DeploymentmanagerTypeProvidersPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeploymentmanagerTypeProvidersPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def deploymentmanager_type_providers_update(self, request: operations.DeploymentmanagerTypeProvidersUpdateRequest, security: operations.DeploymentmanagerTypeProvidersUpdateSecurity) -> operations.DeploymentmanagerTypeProvidersUpdateResponse:
        r"""Updates a type provider."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeploymentmanagerTypeProvidersUpdateRequest, base_url, '/deploymentmanager/alpha/projects/{project}/global/typeProviders/{typeProvider}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "type_provider1", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DeploymentmanagerTypeProvidersUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeploymentmanagerTypeProvidersUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    