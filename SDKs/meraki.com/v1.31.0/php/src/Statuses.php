<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Statuses 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Return the status for all the ports of a switch
     * 
     * Return the status for all the ports of a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesResponse
     */
	public function getDeviceSwitchPortsStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/ports/statuses', \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceSwitchPortsStatuses200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatuses200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the packet counters for all the ports of a switch
     * 
     * Return the packet counters for all the ports of a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesPacketsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesPacketsResponse
     */
	public function getDeviceSwitchPortsStatusesPackets(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesPacketsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesPacketsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/ports/statuses/packets', \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesPacketsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesPacketsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesPacketsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceSwitchPortsStatusesPackets200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the uplink status of every Meraki MX and Z series appliances in the organization
     * 
     * List the uplink status of every Meraki MX and Z series appliances in the organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceUplinkStatusesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceUplinkStatusesResponse
     */
	public function getOrganizationApplianceUplinkStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceUplinkStatusesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceUplinkStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/appliance/uplink/statuses', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceUplinkStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceUplinkStatusesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceUplinkStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationApplianceUplinkStatuses200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Show VPN status for networks in an organization
     * 
     * Show VPN status for networks in an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVpnStatusesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVpnStatusesResponse
     */
	public function getOrganizationApplianceVpnStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVpnStatusesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVpnStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/appliance/vpn/statuses', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVpnStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVpnStatusesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVpnStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationApplianceVpnStatuses200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch onboarding status of cameras
     * 
     * Fetch onboarding status of cameras
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraOnboardingStatusesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraOnboardingStatusesResponse
     */
	public function getOrganizationCameraOnboardingStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraOnboardingStatusesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraOnboardingStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/camera/onboarding/statuses', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraOnboardingStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraOnboardingStatusesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraOnboardingStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationCameraOnboardingStatuses200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the uplink status of every Meraki MG cellular gateway in the organization
     * 
     * List the uplink status of every Meraki MG cellular gateway in the organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCellularGatewayUplinkStatusesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCellularGatewayUplinkStatusesResponse
     */
	public function getOrganizationCellularGatewayUplinkStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCellularGatewayUplinkStatusesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCellularGatewayUplinkStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/cellularGateway/uplink/statuses', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCellularGatewayUplinkStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationCellularGatewayUplinkStatusesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCellularGatewayUplinkStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationCellularGatewayUplinkStatuses200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationCellularGatewayUplinkStatuses200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the power status information for devices in an organization
     * 
     * List the power status information for devices in an organization. The data returned by this endpoint is updated every 5 minutes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDeviceResponse
     */
	public function getOrganizationDevicesPowerModulesStatusesByDevice(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/devices/powerModules/statuses/byDevice', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDeviceRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the status of every Meraki device in the organization
     * 
     * List the status of every Meraki device in the organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesResponse
     */
	public function getOrganizationDevicesStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/devices/statuses', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationDevicesStatuses200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatuses200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return an overview of current device statuses
     * 
     * Return an overview of current device statuses
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverviewRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverviewResponse
     */
	public function getOrganizationDevicesStatusesOverview(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverviewRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverviewResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/devices/statuses/overview', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverviewRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverviewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationDevicesStatusesOverview200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverview200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the uplink status of every Meraki MX, MG and Z series devices in the organization
     * 
     * List the uplink status of every Meraki MX, MG and Z series devices in the organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksStatusesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksStatusesResponse
     */
	public function getOrganizationUplinksStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksStatusesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/uplinks/statuses', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksStatusesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationUplinksStatuses200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksStatuses200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Endpoint to see power status for wireless devices
     * 
     * Endpoint to see power status for wireless devices
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatusesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatusesResponse
     */
	public function getOrganizationWirelessDevicesEthernetStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatusesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/wireless/devices/ethernet/statuses', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatusesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Notify that credential handoff to camera has completed
     * 
     * Notify that credential handoff to camera has completed
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationCameraOnboardingStatusesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationCameraOnboardingStatusesResponse
     */
	public function updateOrganizationCameraOnboardingStatuses(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationCameraOnboardingStatusesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationCameraOnboardingStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/camera/onboarding/statuses', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationCameraOnboardingStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationCameraOnboardingStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationCameraOnboardingStatuses200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}