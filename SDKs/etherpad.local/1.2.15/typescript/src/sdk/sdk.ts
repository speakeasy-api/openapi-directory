/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import { Author } from "./author";
import { Group } from "./group";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { Pad } from "./pad";
import { Session } from "./session";
import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  "http://etherpad.local",
  "http://pads.mro.name/api/1.2.15",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.
 */
export class SDK {
  public author: Author;
  public group: Group;
  public pad: Pad;
  public session: Session;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }

    this.author = new Author(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.group = new Group(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.pad = new Pad(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.session = new Session(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }

  appendTextUsingGET(
    req: operations.AppendTextUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AppendTextUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppendTextUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/appendText";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppendTextUsingGETResponse =
        new operations.AppendTextUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appendTextUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AppendTextUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appendTextUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AppendTextUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appendTextUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AppendTextUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appendTextUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AppendTextUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  appendTextUsingPOST(
    req: operations.AppendTextUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AppendTextUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppendTextUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/appendText";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppendTextUsingPOSTResponse =
        new operations.AppendTextUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appendTextUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AppendTextUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appendTextUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AppendTextUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appendTextUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AppendTextUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appendTextUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AppendTextUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  copyPadUsingGET(
    req: operations.CopyPadUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CopyPadUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CopyPadUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/copyPad";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CopyPadUsingGETResponse =
        new operations.CopyPadUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.copyPadUsingGET200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CopyPadUsingGet200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.copyPadUsingGET400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CopyPadUsingGet400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.copyPadUsingGET401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CopyPadUsingGet401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.copyPadUsingGET500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CopyPadUsingGet500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  copyPadUsingPOST(
    req: operations.CopyPadUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CopyPadUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CopyPadUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/copyPad";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CopyPadUsingPOSTResponse =
        new operations.CopyPadUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.copyPadUsingPOST200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CopyPadUsingPost200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.copyPadUsingPOST400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CopyPadUsingPost400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.copyPadUsingPOST401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CopyPadUsingPost401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.copyPadUsingPOST500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CopyPadUsingPost500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  copyPadWithoutHistoryUsingGET(
    req: operations.CopyPadWithoutHistoryUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CopyPadWithoutHistoryUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CopyPadWithoutHistoryUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/copyPadWithoutHistory";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CopyPadWithoutHistoryUsingGETResponse =
        new operations.CopyPadWithoutHistoryUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.copyPadWithoutHistoryUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CopyPadWithoutHistoryUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.copyPadWithoutHistoryUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CopyPadWithoutHistoryUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.copyPadWithoutHistoryUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CopyPadWithoutHistoryUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.copyPadWithoutHistoryUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CopyPadWithoutHistoryUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  copyPadWithoutHistoryUsingPOST(
    req: operations.CopyPadWithoutHistoryUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CopyPadWithoutHistoryUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CopyPadWithoutHistoryUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/copyPadWithoutHistory";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CopyPadWithoutHistoryUsingPOSTResponse =
        new operations.CopyPadWithoutHistoryUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.copyPadWithoutHistoryUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CopyPadWithoutHistoryUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.copyPadWithoutHistoryUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CopyPadWithoutHistoryUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.copyPadWithoutHistoryUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CopyPadWithoutHistoryUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.copyPadWithoutHistoryUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CopyPadWithoutHistoryUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  getAttributePoolUsingGET(
    req: operations.GETAttributePoolUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETAttributePoolUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETAttributePoolUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getAttributePool";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETAttributePoolUsingGETResponse =
        new operations.GETAttributePoolUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAttributePoolUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETAttributePoolUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAttributePoolUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETAttributePoolUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAttributePoolUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETAttributePoolUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAttributePoolUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETAttributePoolUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  getAttributePoolUsingPOST(
    req: operations.GetAttributePoolUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAttributePoolUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAttributePoolUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getAttributePool";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAttributePoolUsingPOSTResponse =
        new operations.GetAttributePoolUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAttributePoolUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAttributePoolUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAttributePoolUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAttributePoolUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAttributePoolUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAttributePoolUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAttributePoolUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAttributePoolUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  getPadIDUsingGET(
    req: operations.GETPadIDUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETPadIDUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETPadIDUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getPadID";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETPadIDUsingGETResponse =
        new operations.GETPadIDUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPadIDUsingGET200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GETPadIDUsingGet200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPadIDUsingGET400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GETPadIDUsingGet400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPadIDUsingGET401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GETPadIDUsingGet401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPadIDUsingGET500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GETPadIDUsingGet500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  getPadIDUsingPOST(
    req: operations.GetPadIDUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPadIDUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPadIDUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getPadID";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPadIDUsingPOSTResponse =
        new operations.GetPadIDUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPadIDUsingPOST200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetPadIDUsingPost200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPadIDUsingPOST400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetPadIDUsingPost400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPadIDUsingPOST401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetPadIDUsingPost401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPadIDUsingPOST500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetPadIDUsingPost500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  getRevisionChangesetUsingGET(
    req: operations.GETRevisionChangesetUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETRevisionChangesetUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETRevisionChangesetUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getRevisionChangeset";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETRevisionChangesetUsingGETResponse =
        new operations.GETRevisionChangesetUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRevisionChangesetUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETRevisionChangesetUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRevisionChangesetUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETRevisionChangesetUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRevisionChangesetUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETRevisionChangesetUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRevisionChangesetUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETRevisionChangesetUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  getRevisionChangesetUsingPOST(
    req: operations.GetRevisionChangesetUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRevisionChangesetUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRevisionChangesetUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getRevisionChangeset";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRevisionChangesetUsingPOSTResponse =
        new operations.GetRevisionChangesetUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRevisionChangesetUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetRevisionChangesetUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRevisionChangesetUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetRevisionChangesetUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRevisionChangesetUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetRevisionChangesetUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRevisionChangesetUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetRevisionChangesetUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  getSavedRevisionsCountUsingGET(
    req: operations.GETSavedRevisionsCountUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETSavedRevisionsCountUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETSavedRevisionsCountUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getSavedRevisionsCount";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETSavedRevisionsCountUsingGETResponse =
        new operations.GETSavedRevisionsCountUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSavedRevisionsCountUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETSavedRevisionsCountUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSavedRevisionsCountUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETSavedRevisionsCountUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSavedRevisionsCountUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETSavedRevisionsCountUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSavedRevisionsCountUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETSavedRevisionsCountUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  getSavedRevisionsCountUsingPOST(
    req: operations.GetSavedRevisionsCountUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSavedRevisionsCountUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSavedRevisionsCountUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getSavedRevisionsCount";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSavedRevisionsCountUsingPOSTResponse =
        new operations.GetSavedRevisionsCountUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSavedRevisionsCountUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetSavedRevisionsCountUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSavedRevisionsCountUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetSavedRevisionsCountUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSavedRevisionsCountUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetSavedRevisionsCountUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSavedRevisionsCountUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetSavedRevisionsCountUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  getStatsUsingGET(
    config?: AxiosRequestConfig
  ): Promise<operations.GETStatsUsingGETResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getStats";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETStatsUsingGETResponse =
        new operations.GETStatsUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getStatsUsingGET200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GETStatsUsingGet200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getStatsUsingGET400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GETStatsUsingGet400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getStatsUsingGET401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GETStatsUsingGet401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getStatsUsingGET500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GETStatsUsingGet500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  getStatsUsingPOST(
    config?: AxiosRequestConfig
  ): Promise<operations.GetStatsUsingPOSTResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getStats";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetStatsUsingPOSTResponse =
        new operations.GetStatsUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getStatsUsingPOST200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetStatsUsingPost200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getStatsUsingPOST400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetStatsUsingPost400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getStatsUsingPOST401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetStatsUsingPost401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getStatsUsingPOST500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetStatsUsingPost500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  listSavedRevisionsUsingGET(
    req: operations.ListSavedRevisionsUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListSavedRevisionsUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListSavedRevisionsUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/listSavedRevisions";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListSavedRevisionsUsingGETResponse =
        new operations.ListSavedRevisionsUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSavedRevisionsUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListSavedRevisionsUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSavedRevisionsUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListSavedRevisionsUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSavedRevisionsUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListSavedRevisionsUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSavedRevisionsUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListSavedRevisionsUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  listSavedRevisionsUsingPOST(
    req: operations.ListSavedRevisionsUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListSavedRevisionsUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListSavedRevisionsUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/listSavedRevisions";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListSavedRevisionsUsingPOSTResponse =
        new operations.ListSavedRevisionsUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSavedRevisionsUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListSavedRevisionsUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSavedRevisionsUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListSavedRevisionsUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSavedRevisionsUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListSavedRevisionsUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSavedRevisionsUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListSavedRevisionsUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  movePadUsingGET(
    req: operations.MovePadUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MovePadUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MovePadUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/movePad";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MovePadUsingGETResponse =
        new operations.MovePadUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.movePadUsingGET200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.MovePadUsingGet200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.movePadUsingGET400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.MovePadUsingGet400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.movePadUsingGET401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.MovePadUsingGet401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.movePadUsingGET500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.MovePadUsingGet500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  movePadUsingPOST(
    req: operations.MovePadUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MovePadUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MovePadUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/movePad";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MovePadUsingPOSTResponse =
        new operations.MovePadUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.movePadUsingPOST200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.MovePadUsingPost200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.movePadUsingPOST400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.MovePadUsingPost400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.movePadUsingPOST401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.MovePadUsingPost401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.movePadUsingPOST500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.MovePadUsingPost500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  restoreRevisionUsingGET(
    req: operations.RestoreRevisionUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RestoreRevisionUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RestoreRevisionUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/restoreRevision";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RestoreRevisionUsingGETResponse =
        new operations.RestoreRevisionUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restoreRevisionUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RestoreRevisionUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restoreRevisionUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RestoreRevisionUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restoreRevisionUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RestoreRevisionUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restoreRevisionUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RestoreRevisionUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  restoreRevisionUsingPOST(
    req: operations.RestoreRevisionUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RestoreRevisionUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RestoreRevisionUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/restoreRevision";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RestoreRevisionUsingPOSTResponse =
        new operations.RestoreRevisionUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restoreRevisionUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RestoreRevisionUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restoreRevisionUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RestoreRevisionUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restoreRevisionUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RestoreRevisionUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restoreRevisionUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RestoreRevisionUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  saveRevisionUsingGET(
    req: operations.SaveRevisionUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SaveRevisionUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SaveRevisionUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/saveRevision";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SaveRevisionUsingGETResponse =
        new operations.SaveRevisionUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.saveRevisionUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SaveRevisionUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.saveRevisionUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SaveRevisionUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.saveRevisionUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SaveRevisionUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.saveRevisionUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SaveRevisionUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  saveRevisionUsingPOST(
    req: operations.SaveRevisionUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SaveRevisionUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SaveRevisionUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/saveRevision";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SaveRevisionUsingPOSTResponse =
        new operations.SaveRevisionUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.saveRevisionUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SaveRevisionUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.saveRevisionUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SaveRevisionUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.saveRevisionUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SaveRevisionUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.saveRevisionUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SaveRevisionUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
