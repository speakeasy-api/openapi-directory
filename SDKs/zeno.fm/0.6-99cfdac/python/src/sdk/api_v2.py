"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared

class APIV2:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_podcast(self, request: operations.CreatePodcastRequestBody) -> operations.CreatePodcastResponse:
        r"""Create podcast"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v2/podcasts/create'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreatePodcastResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def create_podcast_episode(self, request: operations.CreatePodcastEpisodeRequest) -> operations.CreatePodcastEpisodeResponse:
        r"""Create podcast episode"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreatePodcastEpisodeRequest, base_url, '/api/v2/podcasts/{podcastKey}/episodes/create', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreatePodcastEpisodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def delete_podcast(self, request: operations.DeletePodcastRequest) -> operations.DeletePodcastResponse:
        r"""Delete podcast"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletePodcastRequest, base_url, '/api/v2/podcasts/{podcastKey}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePodcastResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_podcast_1(self, request: operations.DeletePodcast1Request) -> operations.DeletePodcast1Response:
        r"""Delete podcast episode"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletePodcast1Request, base_url, '/api/v2/podcasts/{podcastKey}/episodes/{episodeKey}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePodcast1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_partner_aggregator_stations(self, request: operations.GetPartnerAggregatorStationsRequest) -> operations.GetPartnerAggregatorStationsResponse:
        r"""List stations"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v2/stations/list'
        
        query_params = utils.get_query_params(operations.GetPartnerAggregatorStationsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPartnerAggregatorStationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_podcast(self, request: operations.GetPodcastRequest) -> operations.GetPodcastResponse:
        r"""Get podcast"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPodcastRequest, base_url, '/api/v2/podcasts/{podcastKey}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPodcastResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_podcast_categories(self) -> operations.GetPodcastCategoriesResponse:
        r"""Get the list of Categories that can be used to filter podcasts in the search podcasts request"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v2/podcasts/categories'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPodcastCategoriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_podcast_countries(self) -> operations.GetPodcastCountriesResponse:
        r"""Get the list of Countries that can be used to filter podcasts in the search podcasts request"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v2/podcasts/countries'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPodcastCountriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_podcast_episode(self, request: operations.GetPodcastEpisodeRequest) -> operations.GetPodcastEpisodeResponse:
        r"""Get podcast episode"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPodcastEpisodeRequest, base_url, '/api/v2/podcasts/{podcastKey}/episodes/{episodeKey}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPodcastEpisodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_podcast_episodes(self, request: operations.GetPodcastEpisodesRequest) -> operations.GetPodcastEpisodesResponse:
        r"""Get podcast episodes"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPodcastEpisodesRequest, base_url, '/api/v2/podcasts/{podcastKey}/episodes', request)
        
        query_params = utils.get_query_params(operations.GetPodcastEpisodesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPodcastEpisodesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_podcast_languages(self) -> operations.GetPodcastLanguagesResponse:
        r"""Get the list of Languages that can be used to filter podcasts in the search podcasts request"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v2/podcasts/languages'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPodcastLanguagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_station_countries(self) -> operations.GetStationCountriesResponse:
        r"""Get the list of Countries that can be used to filter stations in the search stations request"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v2/stations/countries'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetStationCountriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_station_genres(self) -> operations.GetStationGenresResponse:
        r"""Get the list of Genres that can be used to filter stations in the search stations request"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v2/stations/genres'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetStationGenresResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_station_languages(self) -> operations.GetStationLanguagesResponse:
        r"""Get the list of Languages that can be used to filter stations in the search stations request"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v2/stations/languages'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetStationLanguagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def search_podcasts(self, request: shared.PodcastSearchParams) -> operations.SearchPodcastsResponse:
        r"""Search podcasts"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v2/podcasts/search'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchPodcastsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def search_stations(self, request: shared.StationSearchParams) -> operations.SearchStationsResponse:
        r"""Search stations"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v2/stations/search'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchStationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def update_podcast(self, request: operations.UpdatePodcastRequest) -> operations.UpdatePodcastResponse:
        r"""Update podcast"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdatePodcastRequest, base_url, '/api/v2/podcasts/{podcastKey}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatePodcastResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def update_podcast_episode(self, request: operations.UpdatePodcastEpisodeRequest) -> operations.UpdatePodcastEpisodeResponse:
        r"""Update podcast episode"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdatePodcastEpisodeRequest, base_url, '/api/v2/podcasts/{podcastKey}/episodes/{episodeKey}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatePodcastEpisodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    