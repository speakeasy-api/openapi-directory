"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import abortcriteria as shared_abortcriteria
from ..shared import createjobtemplateresponse as shared_createjobtemplateresponse
from ..shared import exponentialrolloutrate as shared_exponentialrolloutrate
from ..shared import maintenancewindow as shared_maintenancewindow
from ..shared import retrycriteria as shared_retrycriteria
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateJobTemplateRequestBodyAbortConfig:
    r"""The criteria that determine when and how a job abort takes place."""
    
    criteria_list: Optional[list[shared_abortcriteria.AbortCriteria]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('criteriaList'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateJobTemplateRequestBodyJobExecutionsRetryConfig:
    r"""The configuration that determines how many retries are allowed for each failure type for a job."""
    
    criteria_list: Optional[list[shared_retrycriteria.RetryCriteria]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('criteriaList'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateJobTemplateRequestBodyJobExecutionsRolloutConfig:
    r"""Allows you to create a staged rollout of a job."""
    
    exponential_rate: Optional[shared_exponentialrolloutrate.ExponentialRolloutRate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exponentialRate'), 'exclude': lambda f: f is None }})  
    maximum_per_minute: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximumPerMinute'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateJobTemplateRequestBodyPresignedURLConfig:
    r"""Configuration for pre-signed S3 URLs."""
    
    expires_in_sec: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiresInSec'), 'exclude': lambda f: f is None }})  
    role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roleArn'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateJobTemplateRequestBodyTimeoutConfig:
    r"""Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>."""
    
    in_progress_timeout_in_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inProgressTimeoutInMinutes'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateJobTemplateRequestBody:
    
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""A description of the job document."""  
    abort_config: Optional[CreateJobTemplateRequestBodyAbortConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('abortConfig'), 'exclude': lambda f: f is None }})
    r"""The criteria that determine when and how a job abort takes place."""  
    document: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('document'), 'exclude': lambda f: f is None }})
    r"""The job document. Required if you don't specify a value for <code>documentSource</code>."""  
    document_source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('documentSource'), 'exclude': lambda f: f is None }})
    r"""<p>An S3 link to the job document to use in the template. Required if you don't specify a value for <code>document</code>.</p> <note> <p>If the job document resides in an S3 bucket, you must use a placeholder link when specifying the document.</p> <p>The placeholder link is of the following form:</p> <p> <code>${aws:iot:s3-presigned-url:https://s3.amazonaws.com/<i>bucket</i>/<i>key</i>}</code> </p> <p>where <i>bucket</i> is your bucket name and <i>key</i> is the object in the bucket to which you are linking.</p> </note>"""  
    job_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobArn'), 'exclude': lambda f: f is None }})
    r"""The ARN of the job to use as the basis for the job template."""  
    job_executions_retry_config: Optional[CreateJobTemplateRequestBodyJobExecutionsRetryConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobExecutionsRetryConfig'), 'exclude': lambda f: f is None }})
    r"""The configuration that determines how many retries are allowed for each failure type for a job."""  
    job_executions_rollout_config: Optional[CreateJobTemplateRequestBodyJobExecutionsRolloutConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobExecutionsRolloutConfig'), 'exclude': lambda f: f is None }})
    r"""Allows you to create a staged rollout of a job."""  
    maintenance_windows: Optional[list[shared_maintenancewindow.MaintenanceWindow]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maintenanceWindows'), 'exclude': lambda f: f is None }})
    r"""Allows you to configure an optional maintenance window for the rollout of a job document to all devices in the target group for a job."""  
    presigned_url_config: Optional[CreateJobTemplateRequestBodyPresignedURLConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('presignedUrlConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration for pre-signed S3 URLs."""  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""Metadata that can be used to manage the job template."""  
    timeout_config: Optional[CreateJobTemplateRequestBodyTimeoutConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeoutConfig'), 'exclude': lambda f: f is None }})
    r"""Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>."""  
    

@dataclasses.dataclass
class CreateJobTemplateRequest:
    
    job_template_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'jobTemplateId', 'style': 'simple', 'explode': False }})
    r"""A unique identifier for the job template. We recommend using a UUID. Alpha-numeric characters, \\"-\\", and \\"_\\" are valid for use here."""  
    request_body: CreateJobTemplateRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateJobTemplateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    create_job_template_response: Optional[shared_createjobtemplateresponse.CreateJobTemplateResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalFailureException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""LimitExceededException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    