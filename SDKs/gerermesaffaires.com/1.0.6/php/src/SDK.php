<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - Sécurisez vos données en interfaçant votre logiciel métier avec le service en ligne GererMesAffaires
 * 
 * https://api.gerermesaffaires.com/ - Documentation fonctionnelle des API GererMesAffaires
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 * @see https://api.gerermesaffaires.com/
 */
class SDK
{
	public const SERVERS = [
        /** Sandbox server for integrators */
		'https://sandbox.gerermesaffaires.com/api/v1/',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	private ?Models\Shared\Security $_security;
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client	 
	 * @param Models\Shared\Security|null $security
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, ?Models\Shared\Security $security, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($security !== null) {
			$this->_security = $security;
			$this->_securityClient = Utils\Utils::configureSecurityClient($this->_defaultClient, $this->_security);
		}
		
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Remove a customer space from partner
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteBusinessGroupsIdSpacesSpaceIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteBusinessGroupsIdSpacesSpaceIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteBusinessGroupsIdSpacesSpaceIdResponse
     */
	public function deleteBusinessGroupsIdSpacesSpaceId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteBusinessGroupsIdSpacesSpaceIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteBusinessGroupsIdSpacesSpaceIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteBusinessGroupsIdSpacesSpaceIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/business-groups/{id}/spaces/{spaceId}', \OpenAPI\OpenAPI\Models\Operations\DeleteBusinessGroupsIdSpacesSpaceIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteBusinessGroupsIdSpacesSpaceIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a Space (only space not delivered to customer)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdResponse
     */
	public function deleteSpacesId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * delete a contact detail for a company entity
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdCompanyEntitiesPersonIdDetailsDesignationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdCompanyEntitiesPersonIdDetailsDesignationResponse
     */
	public function deleteSpacesIdCompanyEntitiesPersonIdDetailsDesignation(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdCompanyEntitiesPersonIdDetailsDesignationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdCompanyEntitiesPersonIdDetailsDesignationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/company-entities/{personId}/details/{designation}', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdCompanyEntitiesPersonIdDetailsDesignationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdCompanyEntitiesPersonIdDetailsDesignationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * delete access to a folder for a group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdGroupsGroupIdFoldersFolderIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdGroupsGroupIdFoldersFolderIdResponse
     */
	public function deleteSpacesIdGroupsGroupIdFoldersFolderId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdGroupsGroupIdFoldersFolderIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdGroupsGroupIdFoldersFolderIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/groups/{groupId}/folders/{folderId}', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdGroupsGroupIdFoldersFolderIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdGroupsGroupIdFoldersFolderIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a person of a group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdGroupsGroupIdPersonsMemberIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdGroupsGroupIdPersonsMemberIdResponse
     */
	public function deleteSpacesIdGroupsGroupIdPersonsMemberId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdGroupsGroupIdPersonsMemberIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdGroupsGroupIdPersonsMemberIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/groups/{groupId}/persons/{memberId}', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdGroupsGroupIdPersonsMemberIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdGroupsGroupIdPersonsMemberIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * delete a person
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdPersonsPersonIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdPersonsPersonIdResponse
     */
	public function deleteSpacesIdPersonsPersonId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdPersonsPersonIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdPersonsPersonIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/persons/{personId}', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdPersonsPersonIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdPersonsPersonIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * delete a contact detail for a person
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdPersonsPersonIdDetailsDesignationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdPersonsPersonIdDetailsDesignationResponse
     */
	public function deleteSpacesIdPersonsPersonIdDetailsDesignation(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdPersonsPersonIdDetailsDesignationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdPersonsPersonIdDetailsDesignationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/persons/{personId}/details/{designation}', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdPersonsPersonIdDetailsDesignationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdPersonsPersonIdDetailsDesignationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * delete a status of the space
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdStatusCodeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdStatusCodeResponse
     */
	public function deleteSpacesIdStatusCode(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdStatusCodeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdStatusCodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/status/{code}', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdStatusCodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdStatusCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Deletes a trigger for the space id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdTriggersNameRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdTriggersNameSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdTriggersNameResponse
     */
	public function deleteSpacesIdTriggersName(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdTriggersNameRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdTriggersNameSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdTriggersNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/triggers/{name}', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdTriggersNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesIdTriggersNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a common folder
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdCommonFoldersIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdCommonFoldersIdResponse
     */
	public function deleteSpacesSpaceIdCommonFoldersId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdCommonFoldersIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdCommonFoldersIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/common-folders/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdCommonFoldersIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdCommonFoldersIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * delete a bank statement
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdBankStatementsDocumentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdBankStatementsDocumentIdResponse
     */
	public function deleteSpacesSpaceIdFoldersFolderIdBankStatementsDocumentId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdBankStatementsDocumentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdBankStatementsDocumentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{folderId}/bank-statements/{documentId}', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdBankStatementsDocumentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdBankStatementsDocumentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * delete a contractual document
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdContractualDocumentsDocumentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdContractualDocumentsDocumentIdResponse
     */
	public function deleteSpacesSpaceIdFoldersFolderIdContractualDocumentsDocumentId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdContractualDocumentsDocumentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdContractualDocumentsDocumentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{folderId}/contractual-documents/{documentId}', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdContractualDocumentsDocumentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdContractualDocumentsDocumentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * delete a corporate tax declaration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdCorporateTaxDeclarationsDocumentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdCorporateTaxDeclarationsDocumentIdResponse
     */
	public function deleteSpacesSpaceIdFoldersFolderIdCorporateTaxDeclarationsDocumentId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdCorporateTaxDeclarationsDocumentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdCorporateTaxDeclarationsDocumentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{folderId}/corporate-tax-declarations/{documentId}', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdCorporateTaxDeclarationsDocumentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdCorporateTaxDeclarationsDocumentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * delete an expense proof
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdExpenseProofsDocumentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdExpenseProofsDocumentIdResponse
     */
	public function deleteSpacesSpaceIdFoldersFolderIdExpenseProofsDocumentId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdExpenseProofsDocumentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdExpenseProofsDocumentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{folderId}/expense-proofs/{documentId}', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdExpenseProofsDocumentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdExpenseProofsDocumentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * delete an expense report
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdExpenseReportsDocumentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdExpenseReportsDocumentIdResponse
     */
	public function deleteSpacesSpaceIdFoldersFolderIdExpenseReportsDocumentId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdExpenseReportsDocumentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdExpenseReportsDocumentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{folderId}/expense-reports/{documentId}', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdExpenseReportsDocumentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdExpenseReportsDocumentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * delete an invoice document
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdInvoicesDocumentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdInvoicesDocumentIdResponse
     */
	public function deleteSpacesSpaceIdFoldersFolderIdInvoicesDocumentId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdInvoicesDocumentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdInvoicesDocumentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{folderId}/invoices/{documentId}', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdInvoicesDocumentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdInvoicesDocumentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * delete a tax declaration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdOtherTaxesDocumentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdOtherTaxesDocumentIdResponse
     */
	public function deleteSpacesSpaceIdFoldersFolderIdOtherTaxesDocumentId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdOtherTaxesDocumentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdOtherTaxesDocumentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{folderId}/other-taxes/{documentId}', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdOtherTaxesDocumentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdOtherTaxesDocumentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * delete a payroll
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdResponse
     */
	public function deleteSpacesSpaceIdFoldersFolderIdPayrollsDocumentId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{folderId}/payrolls/{documentId}', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * delete a payslip
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdPayslipsDocumentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdPayslipsDocumentIdResponse
     */
	public function deleteSpacesSpaceIdFoldersFolderIdPayslipsDocumentId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdPayslipsDocumentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdPayslipsDocumentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{folderId}/payslips/{documentId}', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdPayslipsDocumentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdPayslipsDocumentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * delete a social contract
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdSocialContractsDocumentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdSocialContractsDocumentIdResponse
     */
	public function deleteSpacesSpaceIdFoldersFolderIdSocialContractsDocumentId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdSocialContractsDocumentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdSocialContractsDocumentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{folderId}/social-contracts/{documentId}', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdSocialContractsDocumentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdSocialContractsDocumentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * delete a social declaration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdSocialDeclarationsDocumentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdSocialDeclarationsDocumentIdResponse
     */
	public function deleteSpacesSpaceIdFoldersFolderIdSocialDeclarationsDocumentId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdSocialDeclarationsDocumentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdSocialDeclarationsDocumentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{folderId}/social-declarations/{documentId}', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdSocialDeclarationsDocumentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdSocialDeclarationsDocumentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * delete a VAT declaration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdVatDeclarationsDocumentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdVatDeclarationsDocumentIdResponse
     */
	public function deleteSpacesSpaceIdFoldersFolderIdVatDeclarationsDocumentId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdVatDeclarationsDocumentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdVatDeclarationsDocumentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{folderId}/vat-declarations/{documentId}', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdVatDeclarationsDocumentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersFolderIdVatDeclarationsDocumentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * delete an AccountingYear
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdAccountingYearRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdAccountingYearResponse
     */
	public function deleteSpacesSpaceIdFoldersIdAccountingYear(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdAccountingYearRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdAccountingYearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/accounting-year', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdAccountingYearRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdAccountingYearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a Folder (except Name, Class, ModificationDate and ArchivalDate) and Bank data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdBankRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdBankResponse
     */
	public function deleteSpacesSpaceIdFoldersIdBank(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdBankRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdBankResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/bank', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdBankRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdBankResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * delete a customer
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdCustomerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdCustomerResponse
     */
	public function deleteSpacesSpaceIdFoldersIdCustomer(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdCustomerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdCustomerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/customer', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdCustomerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdCustomerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a Folder (except Name, Class, ModificationDate and ArchivalDate) and Employee data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdEmployeeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdEmployeeResponse
     */
	public function deleteSpacesSpaceIdFoldersIdEmployee(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdEmployeeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdEmployeeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/employee', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdEmployeeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdEmployeeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a Folder (except Name, Class, ModificationDate and ArchivalDate) and Insurance data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdInsuranceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdInsuranceResponse
     */
	public function deleteSpacesSpaceIdFoldersIdInsurance(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdInsuranceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdInsuranceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/insurance', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdInsuranceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdInsuranceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a Folder (except Name, Class, ModificationDate and ArchivalDate) and Loan data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdLoanRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdLoanResponse
     */
	public function deleteSpacesSpaceIdFoldersIdLoan(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdLoanRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdLoanResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/loan', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdLoanRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdLoanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * delete a password
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdPasswordsPasswordIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdPasswordsPasswordIdResponse
     */
	public function deleteSpacesSpaceIdFoldersIdPasswordsPasswordId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdPasswordsPasswordIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdPasswordsPasswordIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/passwords/{passwordId}', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdPasswordsPasswordIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdPasswordsPasswordIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * delete a nominative social declaration in a folder social
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationResponse
     */
	public function deleteSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclaration(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/payrolls/{payrollId}/nominative-social-declaration', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * delete a secondary portfolio of a customer contract
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdPortfolioPortfolioIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdPortfolioPortfolioIdResponse
     */
	public function deleteSpacesSpaceIdFoldersIdPortfolioPortfolioId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdPortfolioPortfolioIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdPortfolioPortfolioIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/portfolio/{portfolioId}', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdPortfolioPortfolioIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdPortfolioPortfolioIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * delete a Professional Vehicle
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdProfessionalVehicleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdProfessionalVehicleResponse
     */
	public function deleteSpacesSpaceIdFoldersIdProfessionalVehicle(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdProfessionalVehicleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdProfessionalVehicleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/professional-vehicle', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdProfessionalVehicleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdProfessionalVehicleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * delete a provider
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdProviderRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdProviderResponse
     */
	public function deleteSpacesSpaceIdFoldersIdProvider(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdProviderRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdProviderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/provider', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdProviderRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdProviderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * delete a document from a required document
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidDocumentsDocumentIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidDocumentsDocumentIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidDocumentsDocumentIdResponse
     */
	public function deleteSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidDocumentsDocumentId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidDocumentsDocumentIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidDocumentsDocumentIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidDocumentsDocumentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/required-documents/{requireddocumentid}/documents/{documentId}', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidDocumentsDocumentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidDocumentsDocumentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * delete a social regime
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdSocialRegimesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdSocialRegimesResponse
     */
	public function deleteSpacesSpaceIdFoldersIdSocialRegimes(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdSocialRegimesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdSocialRegimesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/social-regimes', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdSocialRegimesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdSocialRegimesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a Folder (except Name, Class, ModificationDate and ArchivalDate) and tax contract data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdTaxContractRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdTaxContractResponse
     */
	public function deleteSpacesSpaceIdFoldersIdTaxContract(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdTaxContractRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdTaxContractResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/tax-contract', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdTaxContractRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdTaxContractResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * delete a class document
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdDocumentClassRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdDocumentClassResponse
     */
	public function deleteSpacesSpaceIdFoldersIdDocumentClass(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdDocumentClassRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdDocumentClassResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/{documentClass}', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdDocumentClassRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdFoldersIdDocumentClassResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * delete the invitation of a person in a space
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdPersonsIdGuestInSpaceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdPersonsIdGuestInSpaceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdPersonsIdGuestInSpaceResponse
     */
	public function deleteSpacesSpaceIdPersonsIdGuestInSpace(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdPersonsIdGuestInSpaceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdPersonsIdGuestInSpaceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdPersonsIdGuestInSpaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/persons/{id}/guest-in-space', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdPersonsIdGuestInSpaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdPersonsIdGuestInSpaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * delete the invitation of a person in a space
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdPersonsIdInvitationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdPersonsIdInvitationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdPersonsIdInvitationResponse
     */
	public function deleteSpacesSpaceIdPersonsIdInvitation(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdPersonsIdInvitationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdPersonsIdInvitationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdPersonsIdInvitationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/persons/{id}/invitation', \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdPersonsIdInvitationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpacesSpaceIdPersonsIdInvitationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Returns predefined folders and workbooks of the Box for all the spaces
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBoxMenusResponse
     */
	public function getBoxMenus(
    ): \OpenAPI\OpenAPI\Models\Operations\GetBoxMenusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/box/menus');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBoxMenusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getBoxMenus200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetBoxMenus200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of groups custom ordered by name
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsResponse
     */
	public function getBusinessGroups(
        \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/business-groups');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getBusinessGroups200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\BusinessGroup>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of groups custom for managers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsAllRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsAllSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsAllResponse
     */
	public function getBusinessGroupsAll(
        \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsAllRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsAllSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/business-groups/all');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsAllRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getBusinessGroupsAll200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\BusinessGroup>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsIdResponse
     */
	public function getBusinessGroupsId(
        \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/business-groups/{id}', \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getBusinessGroupsId200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsId200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns spaces of the business group with id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsIdSpacesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsIdSpacesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsIdSpacesResponse
     */
	public function getBusinessGroupsIdSpaces(
        \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsIdSpacesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsIdSpacesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsIdSpacesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/business-groups/{id}/spaces', \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsIdSpacesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsIdSpacesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsIdSpacesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getBusinessGroupsIdSpaces200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetBusinessGroupsIdSpaces200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns predefined folders and workbooks of the Hub for all the spaces of the business group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetHubBusinessGroupsIdMenusRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetHubBusinessGroupsIdMenusSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetHubBusinessGroupsIdMenusResponse
     */
	public function getHubBusinessGroupsIdMenus(
        \OpenAPI\OpenAPI\Models\Operations\GetHubBusinessGroupsIdMenusRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetHubBusinessGroupsIdMenusSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetHubBusinessGroupsIdMenusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hub/business-groups/{Id}/menus', \OpenAPI\OpenAPI\Models\Operations\GetHubBusinessGroupsIdMenusRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetHubBusinessGroupsIdMenusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getHubBusinessGroupsIdMenus200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetHubBusinessGroupsIdMenus200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns predefined folders and workbooks of the Hub for all the spaces
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetHubMenusResponse
     */
	public function getHubMenus(
    ): \OpenAPI\OpenAPI\Models\Operations\GetHubMenusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hub/menus');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetHubMenusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getHubMenus200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetHubMenus200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns predefined folders and workbooks of the Hub for all the spaces and customer spaces
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetHubMenusAllResponse
     */
	public function getHubMenusAll(
    ): \OpenAPI\OpenAPI\Models\Operations\GetHubMenusAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hub/menus/all');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetHubMenusAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getHubMenusAll200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetHubMenusAll200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns predefined folders and workbooks of the Hub for the space
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetHubSpacesSpaceIdMenusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetHubSpacesSpaceIdMenusResponse
     */
	public function getHubSpacesSpaceIdMenus(
        \OpenAPI\OpenAPI\Models\Operations\GetHubSpacesSpaceIdMenusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetHubSpacesSpaceIdMenusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hub/spaces/{spaceId}/menus', \OpenAPI\OpenAPI\Models\Operations\GetHubSpacesSpaceIdMenusRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetHubSpacesSpaceIdMenusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getHubSpacesSpaceIdMenus200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetHubSpacesSpaceIdMenus200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns predefined entries
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMenusResponse
     */
	public function getMenus(
    ): \OpenAPI\OpenAPI\Models\Operations\GetMenusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/menus');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMenusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getMenus200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetMenus200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns status of member
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProfileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProfileSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProfileResponse
     */
	public function getProfile(
        \OpenAPI\OpenAPI\Models\Operations\GetProfileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetProfileSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/profile');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProfileRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetProfile200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns status of member
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProfileIdFileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProfileIdFileResponse
     */
	public function getProfileIdFile(
        \OpenAPI\OpenAPI\Models\Operations\GetProfileIdFileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProfileIdFileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/profile/id-file');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProfileIdFileRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProfileIdFileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getProfileIdFile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetProfileIdFile200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'multipart/form-data')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns the method to get the validation code or the link to register after invitation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRegistrationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRegistrationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRegistrationResponse
     */
	public function getRegistration(
        \OpenAPI\OpenAPI\Models\Operations\GetRegistrationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetRegistrationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRegistrationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/registration');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRegistrationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRegistrationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getRegistration200ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns member id of user logged
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSessionResponse
     */
	public function getSession(
    ): \OpenAPI\OpenAPI\Models\Operations\GetSessionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/session');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSessionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->session = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Session', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns spaces of my group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesResponse
     */
	public function getSpaces(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpaces200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetSpaces200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all spaces
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesAllRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesAllResponse
     */
	public function getSpacesAll(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesAllRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/all');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesAllRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesAll200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetSpacesAll200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a space
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdResponse
     */
	public function getSpacesId(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}', \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesId200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSpacesId200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of accounting years for the space {id}
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdAccountingYearRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdAccountingYearResponse
     */
	public function getSpacesIdAccountingYear(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdAccountingYearRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdAccountingYearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/accounting-year', \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdAccountingYearRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesIdAccountingYearRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdAccountingYearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesIdAccountingYear200ApplicationJSONAnies = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetSpacesIdAccountingYear200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of collective decisions for the space {id}
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCollectiveDecisionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCollectiveDecisionResponse
     */
	public function getSpacesIdCollectiveDecision(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCollectiveDecisionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCollectiveDecisionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/collective-decision', \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCollectiveDecisionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCollectiveDecisionRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCollectiveDecisionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesIdCollectiveDecision200ApplicationJSONAnies = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCollectiveDecision200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of company entities
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCompanyEntitiesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCompanyEntitiesResponse
     */
	public function getSpacesIdCompanyEntities(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCompanyEntitiesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCompanyEntitiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/company-entities', \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCompanyEntitiesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCompanyEntitiesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCompanyEntitiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesIdCompanyEntities200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\CompanyEntity>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of company entities even company entities archived
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCompanyEntitiesAllRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCompanyEntitiesAllResponse
     */
	public function getSpacesIdCompanyEntitiesAll(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCompanyEntitiesAllRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCompanyEntitiesAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/company-entities/all', \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCompanyEntitiesAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCompanyEntitiesAllRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCompanyEntitiesAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesIdCompanyEntitiesAll200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\CompanyEntity>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a compay entity
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCompanyEntitiesCompanyIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCompanyEntitiesCompanyIdResponse
     */
	public function getSpacesIdCompanyEntitiesCompanyId(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCompanyEntitiesCompanyIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCompanyEntitiesCompanyIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/company-entities/{companyId}', \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCompanyEntitiesCompanyIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCompanyEntitiesCompanyIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyEntity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CompanyEntity', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all details of a company entity
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCompanyEntitiesPersonIdDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCompanyEntitiesPersonIdDetailsResponse
     */
	public function getSpacesIdCompanyEntitiesPersonIdDetails(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCompanyEntitiesPersonIdDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCompanyEntitiesPersonIdDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/company-entities/{personId}/details', \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCompanyEntitiesPersonIdDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCompanyEntitiesPersonIdDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesIdCompanyEntitiesPersonIdDetails200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetSpacesIdCompanyEntitiesPersonIdDetails200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * return the access of a person in a customer contract
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdFoldersFolderIdPersonsMemberIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdFoldersFolderIdPersonsMemberIdResponse
     */
	public function getSpacesIdFoldersFolderIdPersonsMemberId(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdFoldersFolderIdPersonsMemberIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdFoldersFolderIdPersonsMemberIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/folders/{folderId}/persons/{memberId}', \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdFoldersFolderIdPersonsMemberIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdFoldersFolderIdPersonsMemberIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesIdFoldersFolderIdPersonsMemberId200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetSpacesIdFoldersFolderIdPersonsMemberId200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of groups
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdGroupsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdGroupsResponse
     */
	public function getSpacesIdGroups(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdGroupsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/groups', \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdGroupsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesIdGroupsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesIdGroups200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Group>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of groups even archived of the space
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdGroupsAllRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdGroupsAllResponse
     */
	public function getSpacesIdGroupsAll(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdGroupsAllRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdGroupsAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/groups/all', \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdGroupsAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesIdGroupsAllRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdGroupsAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesIdGroupsAll200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Group>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdGroupsGroupIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdGroupsGroupIdResponse
     */
	public function getSpacesIdGroupsGroupId(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdGroupsGroupIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdGroupsGroupIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/groups/{groupId}', \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdGroupsGroupIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdGroupsGroupIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesIdGroupsGroupId200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSpacesIdGroupsGroupId200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns legal information of a space (except private)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdLegalRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdLegalResponse
     */
	public function getSpacesIdLegal(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdLegalRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdLegalResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/legal', \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdLegalRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdLegalResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legal = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Legal', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a space with the logo
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdLogoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdLogoResponse
     */
	public function getSpacesIdLogo(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdLogoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdLogoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/logo', \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdLogoRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdLogoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->space = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Space', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'multipart/form-data')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns list of persons
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsResponse
     */
	public function getSpacesIdPersons(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/persons', \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesIdPersons200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Person>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of persons even persons archived
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsAllRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsAllResponse
     */
	public function getSpacesIdPersonsAll(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsAllRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/persons/all', \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsAllRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesIdPersonsAll200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Person>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a person
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdResponse
     */
	public function getSpacesIdPersonsPersonId(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/persons/{personId}', \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesIdPersonsPersonId200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonId200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all details of a person
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdDetailsResponse
     */
	public function getSpacesIdPersonsPersonIdDetails(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/persons/{personId}/details', \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesIdPersonsPersonIdDetails200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdDetails200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of folders with exceptionnal access of the person personId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdFoldersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdFoldersResponse
     */
	public function getSpacesIdPersonsPersonIdFolders(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdFoldersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdFoldersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/persons/{personId}/folders', \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdFoldersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdFoldersRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdFoldersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesIdPersonsPersonIdFolders200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Folder>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of groups of the person personId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdGroupsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdGroupsResponse
     */
	public function getSpacesIdPersonsPersonIdGroups(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdGroupsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/persons/{personId}/groups', \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdGroupsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesIdPersonsPersonIdGroups200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Group>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of portfolios of the person personId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdPortfoliosRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdPortfoliosResponse
     */
	public function getSpacesIdPersonsPersonIdPortfolios(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdPortfoliosRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdPortfoliosResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/persons/{personId}/portfolios', \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdPortfoliosRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdPortfoliosResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesIdPersonsPersonIdPortfolios200ApplicationJSONAnies = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetSpacesIdPersonsPersonIdPortfolios200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of professionalvehicles for the space {id}
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdProfessionalVehiclesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdProfessionalVehiclesResponse
     */
	public function getSpacesIdProfessionalVehicles(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdProfessionalVehiclesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdProfessionalVehiclesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/professional-vehicles', \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdProfessionalVehiclesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesIdProfessionalVehiclesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdProfessionalVehiclesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesIdProfessionalVehicles200ApplicationJSONAnies = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetSpacesIdProfessionalVehicles200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns state of activation of logs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdSettingsNf203LogsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdSettingsNf203LogsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdSettingsNf203LogsResponse
     */
	public function getSpacesIdSettingsNf203Logs(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdSettingsNf203LogsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdSettingsNf203LogsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdSettingsNf203LogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/settings/nf203/logs', \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdSettingsNf203LogsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdSettingsNf203LogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesIdSettingsNf203Logs200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSpacesIdSettingsNf203Logs200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all status of the space
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdStatusResponse
     */
	public function getSpacesIdStatus(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/status', \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesIdStatus200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetSpacesIdStatus200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of tax contracts for the space {id}
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdTaxContractsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdTaxContractsResponse
     */
	public function getSpacesIdTaxContracts(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdTaxContractsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdTaxContractsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/tax-contracts', \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdTaxContractsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdTaxContractsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesIdTaxContracts200ApplicationJSONAnies = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetSpacesIdTaxContracts200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of triggers for the space {id}
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdTriggersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdTriggersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdTriggersResponse
     */
	public function getSpacesIdTriggers(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdTriggersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdTriggersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdTriggersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/triggers', \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdTriggersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesIdTriggersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesIdTriggers200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Trigger>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder of the company entity
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdCompanyEntitiesIdFollowUpsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdCompanyEntitiesIdFollowUpsResponse
     */
	public function getSpacesSpaceIdCompanyEntitiesIdFollowUps(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdCompanyEntitiesIdFollowUpsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdCompanyEntitiesIdFollowUpsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/company-entities/{id}/follow-ups', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdCompanyEntitiesIdFollowUpsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdCompanyEntitiesIdFollowUpsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdCompanyEntitiesIdFollowUps200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Folder>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder with Id and customer data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdCustomersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdCustomersResponse
     */
	public function getSpacesSpaceIdCustomers(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdCustomersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdCustomersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/customers', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdCustomersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdCustomersRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdCustomersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdCustomers200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Customer>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder with Id and customer data (even archived)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdCustomersAllRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdCustomersAllResponse
     */
	public function getSpacesSpaceIdCustomersAll(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdCustomersAllRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdCustomersAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/customers/all', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdCustomersAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdCustomersAllRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdCustomersAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdCustomersAll200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Customer>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns documents of the folder
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsResponse
     */
	public function getSpacesSpaceIdDocuments(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/documents', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdDocuments200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocuments200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * read the data of a document
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdExtendRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdExtendResponse
     */
	public function getSpacesSpaceIdDocumentsDocumentIdExtend(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdExtendRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdExtendResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/documents/{documentId}/extend', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdExtendRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdExtendResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdDocumentsDocumentIdExtend200ApplicationJSONAnies = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdExtend200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns versions of the document
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdFoldersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdFoldersResponse
     */
	public function getSpacesSpaceIdDocumentsDocumentIdFolders(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdFoldersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdFoldersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/documents/{documentId}/folders', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdFoldersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdFoldersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdDocumentsDocumentIdFolders200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdFolders200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * returns the number of pages and the price of the pdf to send by mail
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdMailingpriceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdMailingpriceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdMailingpriceResponse
     */
	public function getSpacesSpaceIdDocumentsDocumentIdMailingprice(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdMailingpriceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdMailingpriceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdMailingpriceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/documents/{documentId}/mailingprice', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdMailingpriceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdMailingpriceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdDocumentsDocumentIdMailingprice200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdMailingprice200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns versions of the document
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdVersionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdVersionsResponse
     */
	public function getSpacesSpaceIdDocumentsDocumentIdVersions(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdVersionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdVersionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/documents/{documentId}/versions', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdVersionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdVersionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdDocumentsDocumentIdVersions200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Document>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns current version of the document
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdVersionsCurrentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdVersionsCurrentResponse
     */
	public function getSpacesSpaceIdDocumentsDocumentIdVersionsCurrent(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdVersionsCurrentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdVersionsCurrentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/documents/{documentId}/versions/current', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdVersionsCurrentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdVersionsCurrentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdDocumentsDocumentIdVersionsCurrent200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsDocumentIdVersionsCurrent200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns accesses of one document
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsIdAccessRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsIdAccessResponse
     */
	public function getSpacesSpaceIdDocumentsIdAccess(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsIdAccessRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsIdAccessResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/documents/{id}/access', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsIdAccessRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsIdAccessResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdDocumentsIdAccess200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsIdAccess200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the document with the accounting property
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsIdAccountingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsIdAccountingResponse
     */
	public function getSpacesSpaceIdDocumentsIdAccounting(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsIdAccountingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsIdAccountingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/documents/{id}/accounting', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsIdAccountingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsIdAccountingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdDocumentsIdAccounting200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsIdAccounting200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns content of one document
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsIdDownloadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsIdDownloadResponse
     */
	public function getSpacesSpaceIdDocumentsIdDownload(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsIdDownloadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsIdDownloadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/documents/{id}/download', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsIdDownloadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsIdDownloadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'multipart/form-data')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdDocumentsIdDownload200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdDocumentsIdDownload200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folders with Id and employee data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdEmployeesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdEmployeesResponse
     */
	public function getSpacesSpaceIdEmployees(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdEmployeesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdEmployeesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/employees', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdEmployeesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdEmployeesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdEmployeesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdEmployees200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Employee>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folders with Id and employee data (even archived)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdEmployeesAllRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdEmployeesAllResponse
     */
	public function getSpacesSpaceIdEmployeesAll(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdEmployeesAllRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdEmployeesAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/employees/all', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdEmployeesAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdEmployeesAllRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdEmployeesAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdEmployeesAll200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Employee>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folders with Id and employer data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdEmployersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdEmployersResponse
     */
	public function getSpacesSpaceIdEmployers(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdEmployersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdEmployersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/employers', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdEmployersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdEmployersRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdEmployersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdEmployers200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Employee>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folders with Id and employer data (even archived)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdEmployersAllRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdEmployersAllResponse
     */
	public function getSpacesSpaceIdEmployersAll(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdEmployersAllRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdEmployersAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/employers/all', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdEmployersAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdEmployersAllRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdEmployersAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdEmployersAll200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Employee>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * read the data of a space
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdExtendRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdExtendResponse
     */
	public function getSpacesSpaceIdExtend(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdExtendRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdExtendResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/extend', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdExtendRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdExtendResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdExtend200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdExtend200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folders of the space
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersResponse
     */
	public function getSpacesSpaceIdFolders(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFolders200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Folder>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folders of the space (even archived)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersAllRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersAllResponse
     */
	public function getSpacesSpaceIdFoldersAll(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersAllRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/all', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersAllRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersAll200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Folder>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * get a nominative social declaration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersFolderIdNominativeSocialDeclarationsDocumentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersFolderIdNominativeSocialDeclarationsDocumentIdResponse
     */
	public function getSpacesSpaceIdFoldersFolderIdNominativeSocialDeclarationsDocumentId(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersFolderIdNominativeSocialDeclarationsDocumentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersFolderIdNominativeSocialDeclarationsDocumentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{folderId}/nominative-social-declarations/{documentId}', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersFolderIdNominativeSocialDeclarationsDocumentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersFolderIdNominativeSocialDeclarationsDocumentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersFolderIdNominativeSocialDeclarationsDocumentId200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersFolderIdNominativeSocialDeclarationsDocumentId200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder with Id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdResponse
     */
	public function getSpacesSpaceIdFoldersId(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersId200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersId200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns accountings documents of the folder (results and taxation or accountingyear)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdAccountingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdAccountingsResponse
     */
	public function getSpacesSpaceIdFoldersIdAccountings(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdAccountingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdAccountingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/accountings', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdAccountingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdAccountingsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdAccountingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdAccountings200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Accounting>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * journal of accountings document delivered to a customer
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdAccountingsJournalRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdAccountingsJournalResponse
     */
	public function getSpacesSpaceIdFoldersIdAccountingsJournal(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdAccountingsJournalRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdAccountingsJournalResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/accountings-journal', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdAccountingsJournalRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdAccountingsJournalRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdAccountingsJournalResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdAccountingsJournal200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdAccountingsJournal200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder with Id and bank data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdBankRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdBankResponse
     */
	public function getSpacesSpaceIdFoldersIdBank(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdBankRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdBankResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/bank', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdBankRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdBankResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bank = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Bank', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns bank statements of the folder bank
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdBankStatementsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdBankStatementsResponse
     */
	public function getSpacesSpaceIdFoldersIdBankStatements(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdBankStatementsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdBankStatementsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/bank-statements', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdBankStatementsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdBankStatementsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdBankStatementsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdBankStatements200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\BankStatement>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns common folders of a folder
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdCommonFoldersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdCommonFoldersResponse
     */
	public function getSpacesSpaceIdFoldersIdCommonFolders(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdCommonFoldersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdCommonFoldersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/common-folders', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdCommonFoldersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdCommonFoldersRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdCommonFoldersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdCommonFolders200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Folder>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns common folders (even archived) of a folder
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdCommonFoldersAllRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdCommonFoldersAllResponse
     */
	public function getSpacesSpaceIdFoldersIdCommonFoldersAll(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdCommonFoldersAllRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdCommonFoldersAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/common-folders/all', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdCommonFoldersAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdCommonFoldersAllRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdCommonFoldersAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdCommonFoldersAll200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Folder>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all contracting partners of a contract
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdContractingPartnerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdContractingPartnerResponse
     */
	public function getSpacesSpaceIdFoldersIdContractingPartner(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdContractingPartnerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdContractingPartnerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/contracting-partner', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdContractingPartnerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdContractingPartnerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdContractingPartner200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdContractingPartner200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns collector space of a contract
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdContractingPartnerSpaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdContractingPartnerSpaceResponse
     */
	public function getSpacesSpaceIdFoldersIdContractingPartnerSpace(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdContractingPartnerSpaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdContractingPartnerSpaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/contracting-partner/space', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdContractingPartnerSpaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdContractingPartnerSpaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdContractingPartnerSpace200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdContractingPartnerSpace200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns documents of the folder
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdContractualDocumentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdContractualDocumentsResponse
     */
	public function getSpacesSpaceIdFoldersIdContractualDocuments(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdContractualDocumentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdContractualDocumentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/contractual-documents', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdContractualDocumentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdContractualDocumentsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdContractualDocumentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdContractualDocuments200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ContractualDocument>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder with Id and contractual-relationship data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdContractualRelationshipRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdContractualRelationshipResponse
     */
	public function getSpacesSpaceIdFoldersIdContractualRelationship(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdContractualRelationshipRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdContractualRelationshipResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/contractual-relationship', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdContractualRelationshipRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdContractualRelationshipResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contractualRelationship = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContractualRelationship', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns corporate tax declarations
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdCoporateTaxDeclarationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdCoporateTaxDeclarationsResponse
     */
	public function getSpacesSpaceIdFoldersIdCoporateTaxDeclarations(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdCoporateTaxDeclarationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdCoporateTaxDeclarationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/coporate-tax-declarations', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdCoporateTaxDeclarationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdCoporateTaxDeclarationsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdCoporateTaxDeclarationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdCoporateTaxDeclarations200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\CorporateTaxDeclaration>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder with Id and customer data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdCustomerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdCustomerResponse
     */
	public function getSpacesSpaceIdFoldersIdCustomer(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdCustomerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdCustomerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/customer', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdCustomerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdCustomerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdCustomer200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdCustomer200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * journal of documents delivered to a customer
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdDeliveriesJournalRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdDeliveriesJournalResponse
     */
	public function getSpacesSpaceIdFoldersIdDeliveriesJournal(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdDeliveriesJournalRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdDeliveriesJournalResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/deliveries-journal', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdDeliveriesJournalRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdDeliveriesJournalRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdDeliveriesJournalResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdDeliveriesJournal200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdDeliveriesJournal200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns documents of the folder
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdDocumentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdDocumentsResponse
     */
	public function getSpacesSpaceIdFoldersIdDocuments(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdDocumentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdDocumentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/documents', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdDocumentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdDocumentsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdDocumentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdDocuments200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Document>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder with Id and employee data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdEmployeeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdEmployeeResponse
     */
	public function getSpacesSpaceIdFoldersIdEmployee(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdEmployeeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdEmployeeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/employee', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdEmployeeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdEmployeeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->employee = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Employee', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns expense proofs of the folder (social, followup or exchange)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdExpenseProofsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdExpenseProofsResponse
     */
	public function getSpacesSpaceIdFoldersIdExpenseProofs(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdExpenseProofsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdExpenseProofsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/expense-proofs', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdExpenseProofsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdExpenseProofsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdExpenseProofsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdExpenseProofs200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ExpenseProof>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns expense reports of the folder (social or followup)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdExpenseReportsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdExpenseReportsResponse
     */
	public function getSpacesSpaceIdFoldersIdExpenseReports(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdExpenseReportsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdExpenseReportsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/expense-reports', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdExpenseReportsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdExpenseReportsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdExpenseReportsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdExpenseReports200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ExpenseReport>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns expense proofs linked to the expenseReportId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdExpenseReportsExpenseReportIdExpenseProofsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdExpenseReportsExpenseReportIdExpenseProofsResponse
     */
	public function getSpacesSpaceIdFoldersIdExpenseReportsExpenseReportIdExpenseProofs(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdExpenseReportsExpenseReportIdExpenseProofsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdExpenseReportsExpenseReportIdExpenseProofsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/expense-reports/{expenseReportId}/expense-proofs', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdExpenseReportsExpenseReportIdExpenseProofsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdExpenseReportsExpenseReportIdExpenseProofsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdExpenseReportsExpenseReportIdExpenseProofsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdExpenseReportsExpenseReportIdExpenseProofs200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ExpenseProof>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder with Id and insurance data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdInsuranceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdInsuranceResponse
     */
	public function getSpacesSpaceIdFoldersIdInsurance(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdInsuranceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdInsuranceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/insurance', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdInsuranceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdInsuranceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->insurance = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Insurance', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns invoices of the folder (customer, provider, accountingyear or root folders customers or providers)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdInvoicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdInvoicesResponse
     */
	public function getSpacesSpaceIdFoldersIdInvoices(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdInvoicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdInvoicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/invoices', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdInvoicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdInvoicesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdInvoicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdInvoices200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Invoice>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns legal entity of a follow up folder
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdLegalEntityRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdLegalEntityResponse
     */
	public function getSpacesSpaceIdFoldersIdLegalEntity(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdLegalEntityRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdLegalEntityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/legal-entity', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdLegalEntityRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdLegalEntityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdLegalEntity200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdLegalEntity200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder with Id and loan data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdLoanRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdLoanResponse
     */
	public function getSpacesSpaceIdFoldersIdLoan(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdLoanRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdLoanResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/loan', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdLoanRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdLoanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->loan = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Loan', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns messages of the folder
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdMessagesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdMessagesResponse
     */
	public function getSpacesSpaceIdFoldersIdMessages(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdMessagesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdMessagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/messages', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdMessagesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdMessagesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdMessagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdMessages200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Message>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns message with Id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdMessagesMessageIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdMessagesMessageIdResponse
     */
	public function getSpacesSpaceIdFoldersIdMessagesMessageId(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdMessagesMessageIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdMessagesMessageIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/messages/{messageId}', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdMessagesMessageIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdMessagesMessageIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdMessagesMessageId200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdMessagesMessageId200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns nominative social declarations of the folder social
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdNominativeSocialDeclarationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdNominativeSocialDeclarationsResponse
     */
	public function getSpacesSpaceIdFoldersIdNominativeSocialDeclarations(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdNominativeSocialDeclarationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdNominativeSocialDeclarationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/nominative-social-declarations', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdNominativeSocialDeclarationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdNominativeSocialDeclarationsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdNominativeSocialDeclarationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdNominativeSocialDeclarations200ApplicationJSONAnies = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdNominativeSocialDeclarations200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns other taxes declarations
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdOtherTaxesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdOtherTaxesResponse
     */
	public function getSpacesSpaceIdFoldersIdOtherTaxes(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdOtherTaxesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdOtherTaxesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/other-taxes', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdOtherTaxesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdOtherTaxesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdOtherTaxesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdOtherTaxes200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\OtherTax>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns identifiers/passwords of the folder
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdPasswordsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdPasswordsResponse
     */
	public function getSpacesSpaceIdFoldersIdPasswords(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdPasswordsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdPasswordsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/passwords', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdPasswordsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdPasswordsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdPasswords200ApplicationJSONAnies = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdPasswords200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns password with Id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdPasswordsPasswordIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdPasswordsPasswordIdResponse
     */
	public function getSpacesSpaceIdFoldersIdPasswordsPasswordId(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdPasswordsPasswordIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdPasswordsPasswordIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/passwords/{passwordId}', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdPasswordsPasswordIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdPasswordsPasswordIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdPasswordsPasswordId200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdPasswordsPasswordId200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns payrolls of the folder social
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdPayrollsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdPayrollsResponse
     */
	public function getSpacesSpaceIdFoldersIdPayrolls(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdPayrollsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdPayrollsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/payrolls', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdPayrollsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdPayrollsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdPayrollsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdPayrolls200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Payroll>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns payslips of the folder employee
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdPayslipsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdPayslipsResponse
     */
	public function getSpacesSpaceIdFoldersIdPayslips(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdPayslipsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdPayslipsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/payslips', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdPayslipsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdPayslipsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdPayslipsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdPayslips200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PaySlip>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder with Id and provider data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdProviderRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdProviderResponse
     */
	public function getSpacesSpaceIdFoldersIdProvider(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdProviderRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdProviderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/provider', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdProviderRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdProviderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->provider = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Provider', 'json');
            }
        }

        return $response;
    }
	
    /**
     * list of the required documents for a person
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdRequiredDocumentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdRequiredDocumentsResponse
     */
	public function getSpacesSpaceIdFoldersIdRequiredDocuments(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdRequiredDocumentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdRequiredDocumentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/required-documents', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdRequiredDocumentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdRequiredDocumentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdRequiredDocuments200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdRequiredDocuments200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns sections of the folder
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSectionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSectionsResponse
     */
	public function getSpacesSpaceIdFoldersIdSections(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSectionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSectionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/sections', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSectionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSectionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdSections200ApplicationJSONAnies = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSections200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns social contracts of the folder employee
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSocialContractsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSocialContractsResponse
     */
	public function getSpacesSpaceIdFoldersIdSocialContracts(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSocialContractsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSocialContractsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/social-contracts', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSocialContractsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSocialContractsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSocialContractsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdSocialContracts200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SocialContract>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns social declarations
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSocialDeclarationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSocialDeclarationsResponse
     */
	public function getSpacesSpaceIdFoldersIdSocialDeclarations(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSocialDeclarationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSocialDeclarationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/social-declarations', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSocialDeclarationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSocialDeclarationsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSocialDeclarationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdSocialDeclarations200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SocialDeclaration>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder with Id and social regime data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSocialRegimesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSocialRegimesResponse
     */
	public function getSpacesSpaceIdFoldersIdSocialRegimes(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSocialRegimesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSocialRegimesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/social-regimes', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSocialRegimesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSocialRegimesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->socialRegime = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SocialRegime', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns sum of invoices of the folder (customer, provider, accountingyear or root folders customers or providers)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSumInvoicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSumInvoicesResponse
     */
	public function getSpacesSpaceIdFoldersIdSumInvoices(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSumInvoicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSumInvoicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/sum-invoices', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSumInvoicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSumInvoicesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSumInvoicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdSumInvoices200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdSumInvoices200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns vat declarations
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdVatDeclarationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdVatDeclarationsResponse
     */
	public function getSpacesSpaceIdFoldersIdVatDeclarations(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdVatDeclarationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdVatDeclarationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/vat-declarations', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdVatDeclarationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdVatDeclarationsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdVatDeclarationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdVatDeclarations200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\VATDeclaration>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns document of documentClass (without specific data) of the folder
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdDocumentClassRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdDocumentClassResponse
     */
	public function getSpacesSpaceIdFoldersIdDocumentClass(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdDocumentClassRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdDocumentClassResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/{documentClass}', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdDocumentClassRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdFoldersIdDocumentClassResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdFoldersIdDocumentClass200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Document>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of bank folders for a legal-entity
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdBanksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdBanksResponse
     */
	public function getSpacesSpaceIdLegalEntitiesIdBanks(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdBanksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdBanksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/legal-entities/{id}/banks', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdBanksRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdBanksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdLegalEntitiesIdBanks200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Bank>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder of the banks even archived
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdBanksAllRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdBanksAllResponse
     */
	public function getSpacesSpaceIdLegalEntitiesIdBanksAll(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdBanksAllRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdBanksAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/legal-entities/{id}/banks/all', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdBanksAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdBanksAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdLegalEntitiesIdBanksAll200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Bank>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all contract folders of the legal entity
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdContractsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdContractsResponse
     */
	public function getSpacesSpaceIdLegalEntitiesIdContracts(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdContractsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdContractsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/legal-entities/{id}/contracts', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdContractsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdContractsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdLegalEntitiesIdContracts200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Contract>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder of the others contract with legal entity
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdContractualRelationshipsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdContractualRelationshipsResponse
     */
	public function getSpacesSpaceIdLegalEntitiesIdContractualRelationships(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdContractualRelationshipsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdContractualRelationshipsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/legal-entities/{id}/contractual-relationships', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdContractualRelationshipsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdContractualRelationshipsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdLegalEntitiesIdContractualRelationships200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ContractualRelationship>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder of the others contract with legal entity (even archived)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdContractualRelationshipsAllRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdContractualRelationshipsAllResponse
     */
	public function getSpacesSpaceIdLegalEntitiesIdContractualRelationshipsAll(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdContractualRelationshipsAllRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdContractualRelationshipsAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/legal-entities/{id}/contractual-relationships/all', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdContractualRelationshipsAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdContractualRelationshipsAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdLegalEntitiesIdContractualRelationshipsAll200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ContractualRelationship>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder of the customer
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdCustomersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdCustomersResponse
     */
	public function getSpacesSpaceIdLegalEntitiesIdCustomers(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdCustomersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdCustomersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/legal-entities/{id}/customers', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdCustomersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdCustomersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdLegalEntitiesIdCustomers200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Customer>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder of the customers (even archived)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdCustomersAllRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdCustomersAllResponse
     */
	public function getSpacesSpaceIdLegalEntitiesIdCustomersAll(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdCustomersAllRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdCustomersAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/legal-entities/{id}/customers/all', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdCustomersAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdCustomersAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdLegalEntitiesIdCustomersAll200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Customer>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of insurance folders for a legal-entity
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdInsurancesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdInsurancesResponse
     */
	public function getSpacesSpaceIdLegalEntitiesIdInsurances(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdInsurancesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdInsurancesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/legal-entities/{id}/insurances', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdInsurancesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdInsurancesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdLegalEntitiesIdInsurances200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Insurance>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder of the insurances even archived
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdInsurancesAllRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdInsurancesAllResponse
     */
	public function getSpacesSpaceIdLegalEntitiesIdInsurancesAll(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdInsurancesAllRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdInsurancesAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/legal-entities/{id}/insurances/all', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdInsurancesAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdInsurancesAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdLegalEntitiesIdInsurancesAll200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Insurance>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder of the loan
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdLoansRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdLoansResponse
     */
	public function getSpacesSpaceIdLegalEntitiesIdLoans(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdLoansRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdLoansResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/legal-entities/{id}/loans', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdLoansRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdLoansResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdLegalEntitiesIdLoans200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Loan>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder of the loans even archived
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdLoansAllRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdLoansAllResponse
     */
	public function getSpacesSpaceIdLegalEntitiesIdLoansAll(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdLoansAllRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdLoansAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/legal-entities/{id}/loans/all', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdLoansAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdLoansAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdLegalEntitiesIdLoansAll200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Loan>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of providers folders for a legal-entity
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdProvidersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdProvidersResponse
     */
	public function getSpacesSpaceIdLegalEntitiesIdProviders(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdProvidersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdProvidersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/legal-entities/{id}/providers', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdProvidersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdProvidersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdLegalEntitiesIdProviders200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Provider>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder of the providers even archived
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdProvidersAllRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdProvidersAllResponse
     */
	public function getSpacesSpaceIdLegalEntitiesIdProvidersAll(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdProvidersAllRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdProvidersAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/legal-entities/{id}/providers/all', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdProvidersAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdProvidersAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdLegalEntitiesIdProvidersAll200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Provider>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of social regimes folders for a legal-entity
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdSocialRegimesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdSocialRegimesResponse
     */
	public function getSpacesSpaceIdLegalEntitiesIdSocialRegimes(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdSocialRegimesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdSocialRegimesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/legal-entities/{id}/social-regimes', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdSocialRegimesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdSocialRegimesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdLegalEntitiesIdSocialRegimes200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SocialRegime>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder of the social regimes even archived
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdSocialRegimesAllRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdSocialRegimesAllResponse
     */
	public function getSpacesSpaceIdLegalEntitiesIdSocialRegimesAll(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdSocialRegimesAllRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdSocialRegimesAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/legal-entities/{id}/social-regimes/all', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdSocialRegimesAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLegalEntitiesIdSocialRegimesAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdLegalEntitiesIdSocialRegimesAll200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SocialRegime>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of all loan folders of the space
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLoansRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLoansResponse
     */
	public function getSpacesSpaceIdLoans(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLoansRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLoansResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/loans', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLoansRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLoansResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdLoans200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Loan>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of all loan folders even archived of the space
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLoansAllRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLoansAllResponse
     */
	public function getSpacesSpaceIdLoansAll(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLoansAllRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLoansAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/loans/all', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLoansAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdLoansAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdLoansAll200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Loan>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder of the employee
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdEmployeesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdEmployeesResponse
     */
	public function getSpacesSpaceIdPersonsIdEmployees(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdEmployeesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdEmployeesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/persons/{id}/employees', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdEmployeesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdEmployeesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdPersonsIdEmployees200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Employee>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder of all employees (even archived)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdEmployeesAllRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdEmployeesAllResponse
     */
	public function getSpacesSpaceIdPersonsIdEmployeesAll(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdEmployeesAllRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdEmployeesAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/persons/{id}/employees/all', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdEmployeesAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdEmployeesAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdPersonsIdEmployeesAll200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Employee>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder exchange of the person
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdExchangeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdExchangeResponse
     */
	public function getSpacesSpaceIdPersonsIdExchange(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdExchangeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdExchangeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/persons/{id}/exchange', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdExchangeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdExchangeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdPersonsIdExchange200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdExchange200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder of the person
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdFollowUpsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdFollowUpsResponse
     */
	public function getSpacesSpaceIdPersonsIdFollowUps(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdFollowUpsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdFollowUpsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/persons/{id}/follow-ups', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdFollowUpsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdFollowUpsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->followUp = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FollowUp', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns invitation of a person
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdInvitationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdInvitationResponse
     */
	public function getSpacesSpaceIdPersonsIdInvitation(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdInvitationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdInvitationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/persons/{id}/invitation', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdInvitationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsIdInvitationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns folderId with the access of the person
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsMemberIdFoldersIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsMemberIdFoldersIdResponse
     */
	public function getSpacesSpaceIdPersonsMemberIdFoldersId(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsMemberIdFoldersIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsMemberIdFoldersIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/persons/{memberId}/folders/{id}', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsMemberIdFoldersIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsMemberIdFoldersIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdPersonsMemberIdFoldersId200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdPersonsMemberIdFoldersId200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder with Id and provider data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdProvidersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdProvidersResponse
     */
	public function getSpacesSpaceIdProviders(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdProvidersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdProvidersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/providers', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdProvidersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdProvidersRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdProvidersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdProviders200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Provider>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder with Id and provider data (even archived)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdProvidersAllRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdProvidersAllResponse
     */
	public function getSpacesSpaceIdProvidersAll(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdProvidersAllRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdProvidersAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/providers/all', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdProvidersAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdProvidersAllRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdProvidersAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdProvidersAll200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Provider>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder with Id and social regime data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdSocialRegimesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdSocialRegimesResponse
     */
	public function getSpacesSpaceIdSocialRegimes(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdSocialRegimesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdSocialRegimesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/social-regimes', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdSocialRegimesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdSocialRegimesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdSocialRegimesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdSocialRegimes200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SocialRegime>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns folder with Id and social regime data (even archived)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdSocialRegimesAllRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdSocialRegimesAllResponse
     */
	public function getSpacesSpaceIdSocialRegimesAll(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdSocialRegimesAllRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdSocialRegimesAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/social-regimes/all', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdSocialRegimesAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdSocialRegimesAllRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdSocialRegimesAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdSocialRegimesAll200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SocialRegime>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns CSV Invoicings of the spaces for the account of the spaceId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdSpacesInvoicingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdSpacesInvoicingsResponse
     */
	public function getSpacesSpaceIdSpacesInvoicings(
        \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdSpacesInvoicingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdSpacesInvoicingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/spaces-invoicings', \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdSpacesInvoicingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdSpacesInvoicingsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpacesSpaceIdSpacesInvoicingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpacesSpaceIdSpacesInvoicings200ApplicationJSONAllOfs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SpacesInvoicing>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modifies an object
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchBusinessGroupsRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchBusinessGroupsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchBusinessGroupsResponse
     */
	public function patchBusinessGroups(
        \OpenAPI\OpenAPI\Models\Operations\PatchBusinessGroupsRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchBusinessGroupsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchBusinessGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/business-groups');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchBusinessGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * modify email of profile
     * 
     * @param mixed $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchProfileEmailSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchProfileEmailResponse
     */
	public function patchProfileEmail(
        mixed $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchProfileEmailSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchProfileEmailResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/profile/email');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchProfileEmailResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * modify mobile of profile
     * 
     * @param mixed $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchProfileMobileSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchProfileMobileResponse
     */
	public function patchProfileMobile(
        mixed $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchProfileMobileSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchProfileMobileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/profile/mobile');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchProfileMobileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * modify infos of profile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchProfileApplicationJSON $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchProfileJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchProfileJsonResponse
     */
	public function patchProfileJson(
        \OpenAPI\OpenAPI\Models\Operations\PatchProfileApplicationJSON $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchProfileJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchProfileJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/profile');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchProfileJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * modify infos of profile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchProfileMultipartFormData1 $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchProfileMultipartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchProfileMultipartResponse
     */
	public function patchProfileMultipart(
        \OpenAPI\OpenAPI\Models\Operations\PatchProfileMultipartFormData1 $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchProfileMultipartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchProfileMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/profile');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchProfileMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Modify a Space (except private)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdResponse
     */
	public function patchSpacesId(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Modify a company entity
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdCompanyEntitiesCompanyIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdCompanyEntitiesCompanyIdResponse
     */
	public function patchSpacesIdCompanyEntitiesCompanyId(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdCompanyEntitiesCompanyIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdCompanyEntitiesCompanyIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/company-entities/{companyId}', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdCompanyEntitiesCompanyIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdCompanyEntitiesCompanyIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Add/Modify/Delete a person in a customer contract (except manager)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdFoldersFolderIdPersonsMemberIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdFoldersFolderIdPersonsMemberIdResponse
     */
	public function patchSpacesIdFoldersFolderIdPersonsMemberId(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdFoldersFolderIdPersonsMemberIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdFoldersFolderIdPersonsMemberIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/folders/{folderId}/persons/{memberId}', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdFoldersFolderIdPersonsMemberIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdFoldersFolderIdPersonsMemberIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * open an access
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdFoldersFolderIdPersonsMemberIdActiveaccessRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdFoldersFolderIdPersonsMemberIdActiveaccessResponse
     */
	public function patchSpacesIdFoldersFolderIdPersonsMemberIdActiveaccess(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdFoldersFolderIdPersonsMemberIdActiveaccessRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdFoldersFolderIdPersonsMemberIdActiveaccessResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/folders/{folderId}/persons/{memberId}/activeaccess', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdFoldersFolderIdPersonsMemberIdActiveaccessRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdFoldersFolderIdPersonsMemberIdActiveaccessResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * close an access
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdFoldersFolderIdPersonsMemberIdUnactiveaccessRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdFoldersFolderIdPersonsMemberIdUnactiveaccessResponse
     */
	public function patchSpacesIdFoldersFolderIdPersonsMemberIdUnactiveaccess(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdFoldersFolderIdPersonsMemberIdUnactiveaccessRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdFoldersFolderIdPersonsMemberIdUnactiveaccessResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/folders/{folderId}/persons/{memberId}/unactiveaccess', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdFoldersFolderIdPersonsMemberIdUnactiveaccessRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdFoldersFolderIdPersonsMemberIdUnactiveaccessResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Modify a group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdGroupsGroupIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdGroupsGroupIdResponse
     */
	public function patchSpacesIdGroupsGroupId(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdGroupsGroupIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdGroupsGroupIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/groups/{groupId}', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdGroupsGroupIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdGroupsGroupIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Add access to a folder for a group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdGroupsGroupIdFoldersFolderIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdGroupsGroupIdFoldersFolderIdResponse
     */
	public function patchSpacesIdGroupsGroupIdFoldersFolderId(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdGroupsGroupIdFoldersFolderIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdGroupsGroupIdFoldersFolderIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/groups/{groupId}/folders/{folderId}', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdGroupsGroupIdFoldersFolderIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdGroupsGroupIdFoldersFolderIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Add a person to a group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdGroupsGroupIdPersonsMemberIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdGroupsGroupIdPersonsMemberIdResponse
     */
	public function patchSpacesIdGroupsGroupIdPersonsMemberId(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdGroupsGroupIdPersonsMemberIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdGroupsGroupIdPersonsMemberIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/groups/{groupId}/persons/{memberId}', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdGroupsGroupIdPersonsMemberIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdGroupsGroupIdPersonsMemberIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Modify legal information of a Space (except private)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdLegalRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdLegalResponse
     */
	public function patchSpacesIdLegal(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdLegalRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdLegalResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/legal', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdLegalRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "legal", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdLegalResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Modify the role of a person
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdPersonsMemberIdPlayerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdPersonsMemberIdPlayerResponse
     */
	public function patchSpacesIdPersonsMemberIdPlayer(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdPersonsMemberIdPlayerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdPersonsMemberIdPlayerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/persons/{memberId}/player', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdPersonsMemberIdPlayerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdPersonsMemberIdPlayerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Modify a person
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdPersonsPersonIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdPersonsPersonIdResponse
     */
	public function patchSpacesIdPersonsPersonId(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdPersonsPersonIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdPersonsPersonIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/persons/{personId}', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdPersonsPersonIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdPersonsPersonIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Add/Modify/Delete a person in a portfolio (except manager)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdPortfoliosPortfolioIdPersonsMemberIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdPortfoliosPortfolioIdPersonsMemberIdResponse
     */
	public function patchSpacesIdPortfoliosPortfolioIdPersonsMemberId(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdPortfoliosPortfolioIdPersonsMemberIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdPortfoliosPortfolioIdPersonsMemberIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/portfolios/{portfolioId}/persons/{memberId}', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdPortfoliosPortfolioIdPersonsMemberIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesIdPortfoliosPortfolioIdPersonsMemberIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Modify a common folder
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdCommonFoldersIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdCommonFoldersIdResponse
     */
	public function patchSpacesSpaceIdCommonFoldersId(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdCommonFoldersIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdCommonFoldersIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/common-folders/{id}', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdCommonFoldersIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdCommonFoldersIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * modify a doc
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdDocumentsDocumentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdDocumentsDocumentIdResponse
     */
	public function patchSpacesSpaceIdDocumentsDocumentId(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdDocumentsDocumentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdDocumentsDocumentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/documents/{documentId}', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdDocumentsDocumentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdDocumentsDocumentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * modify a bank statement
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdBankStatementsDocumentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdBankStatementsDocumentIdResponse
     */
	public function patchSpacesSpaceIdFoldersFolderIdBankStatementsDocumentId(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdBankStatementsDocumentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdBankStatementsDocumentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{folderId}/bank-statements/{documentId}', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdBankStatementsDocumentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdBankStatementsDocumentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * modify a contractual document
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdContractualDocumentsDocumentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdContractualDocumentsDocumentIdResponse
     */
	public function patchSpacesSpaceIdFoldersFolderIdContractualDocumentsDocumentId(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdContractualDocumentsDocumentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdContractualDocumentsDocumentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{folderId}/contractual-documents/{documentId}', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdContractualDocumentsDocumentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdContractualDocumentsDocumentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * modify a coporate tax declaration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdCorporateTaxDeclarationsDocumentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdCorporateTaxDeclarationsDocumentIdResponse
     */
	public function patchSpacesSpaceIdFoldersFolderIdCorporateTaxDeclarationsDocumentId(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdCorporateTaxDeclarationsDocumentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdCorporateTaxDeclarationsDocumentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{folderId}/corporate-tax-declarations/{documentId}', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdCorporateTaxDeclarationsDocumentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdCorporateTaxDeclarationsDocumentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * modify an expense report
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdExpenseProofsDocumentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdExpenseProofsDocumentIdResponse
     */
	public function patchSpacesSpaceIdFoldersFolderIdExpenseProofsDocumentId(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdExpenseProofsDocumentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdExpenseProofsDocumentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{folderId}/expense-proofs/{documentId}', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdExpenseProofsDocumentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdExpenseProofsDocumentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * modify an expense report
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdExpenseReportsDocumentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdExpenseReportsDocumentIdResponse
     */
	public function patchSpacesSpaceIdFoldersFolderIdExpenseReportsDocumentId(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdExpenseReportsDocumentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdExpenseReportsDocumentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{folderId}/expense-reports/{documentId}', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdExpenseReportsDocumentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdExpenseReportsDocumentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * modify a invoice
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdInvoicesDocumentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdInvoicesDocumentIdResponse
     */
	public function patchSpacesSpaceIdFoldersFolderIdInvoicesDocumentId(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdInvoicesDocumentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdInvoicesDocumentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{folderId}/invoices/{documentId}', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdInvoicesDocumentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdInvoicesDocumentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * modify an other tax declaration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdOtherTaxesDocumentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdOtherTaxesDocumentIdResponse
     */
	public function patchSpacesSpaceIdFoldersFolderIdOtherTaxesDocumentId(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdOtherTaxesDocumentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdOtherTaxesDocumentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{folderId}/other-taxes/{documentId}', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdOtherTaxesDocumentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdOtherTaxesDocumentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * modify a payroll
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdResponse
     */
	public function patchSpacesSpaceIdFoldersFolderIdPayrollsDocumentId(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{folderId}/payrolls/{documentId}', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * modify a payslip
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdPayslipsDocumentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdPayslipsDocumentIdResponse
     */
	public function patchSpacesSpaceIdFoldersFolderIdPayslipsDocumentId(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdPayslipsDocumentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdPayslipsDocumentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{folderId}/payslips/{documentId}', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdPayslipsDocumentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdPayslipsDocumentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * modify a social contract
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdSocialContractsDocumentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdSocialContractsDocumentIdResponse
     */
	public function patchSpacesSpaceIdFoldersFolderIdSocialContractsDocumentId(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdSocialContractsDocumentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdSocialContractsDocumentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{folderId}/social-contracts/{documentId}', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdSocialContractsDocumentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdSocialContractsDocumentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * modify a social declaration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdSocialDeclarationsDocumentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdSocialDeclarationsDocumentIdResponse
     */
	public function patchSpacesSpaceIdFoldersFolderIdSocialDeclarationsDocumentId(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdSocialDeclarationsDocumentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdSocialDeclarationsDocumentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{folderId}/social-declarations/{documentId}', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdSocialDeclarationsDocumentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdSocialDeclarationsDocumentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * modify a vat declaration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdVatDeclarationsDocumentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdVatDeclarationsDocumentIdResponse
     */
	public function patchSpacesSpaceIdFoldersFolderIdVatDeclarationsDocumentId(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdVatDeclarationsDocumentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdVatDeclarationsDocumentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{folderId}/vat-declarations/{documentId}', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdVatDeclarationsDocumentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersFolderIdVatDeclarationsDocumentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Modify a Folder (except Name, Class, ModificationDate and ArchivalDate)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdResponse
     */
	public function patchSpacesSpaceIdFoldersId(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and AccountingYear data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdAccountingYearRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdAccountingYearResponse
     */
	public function patchSpacesSpaceIdFoldersIdAccountingYear(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdAccountingYearRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdAccountingYearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/accounting-year', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdAccountingYearRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdAccountingYearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Bank data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdBankRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdBankResponse
     */
	public function patchSpacesSpaceIdFoldersIdBank(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdBankRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdBankResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/bank', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdBankRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdBankResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Collective Decision data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdCollectiveDecisionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdCollectiveDecisionResponse
     */
	public function patchSpacesSpaceIdFoldersIdCollectiveDecision(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdCollectiveDecisionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdCollectiveDecisionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/collective-decision', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdCollectiveDecisionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdCollectiveDecisionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Customer data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdCustomerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdCustomerResponse
     */
	public function patchSpacesSpaceIdFoldersIdCustomer(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdCustomerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdCustomerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/customer', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdCustomerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdCustomerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Detach a doc of a folder
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdDocumentsDocumentIdDetachRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdDocumentsDocumentIdDetachResponse
     */
	public function patchSpacesSpaceIdFoldersIdDocumentsDocumentIdDetach(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdDocumentsDocumentIdDetachRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdDocumentsDocumentIdDetachResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/documents/{documentId}/detach', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdDocumentsDocumentIdDetachRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdDocumentsDocumentIdDetachResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Employee data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdEmployeeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdEmployeeResponse
     */
	public function patchSpacesSpaceIdFoldersIdEmployee(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdEmployeeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdEmployeeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/employee', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdEmployeeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdEmployeeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Insurance data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdInsuranceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdInsuranceResponse
     */
	public function patchSpacesSpaceIdFoldersIdInsurance(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdInsuranceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdInsuranceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/insurance', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdInsuranceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdInsuranceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Loan data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdLoanRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdLoanResponse
     */
	public function patchSpacesSpaceIdFoldersIdLoan(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdLoanRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdLoanResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/loan', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdLoanRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdLoanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Modify a Message
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdMessagesMessageIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdMessagesMessageIdResponse
     */
	public function patchSpacesSpaceIdFoldersIdMessagesMessageId(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdMessagesMessageIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdMessagesMessageIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/messages/{messageId}', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdMessagesMessageIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdMessagesMessageIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Modify a Password
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdPasswordsPasswordIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdPasswordsPasswordIdResponse
     */
	public function patchSpacesSpaceIdFoldersIdPasswordsPasswordId(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdPasswordsPasswordIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdPasswordsPasswordIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/passwords/{passwordId}', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdPasswordsPasswordIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdPasswordsPasswordIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Professional Vehicle data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdProfessionalVehicleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdProfessionalVehicleResponse
     */
	public function patchSpacesSpaceIdFoldersIdProfessionalVehicle(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdProfessionalVehicleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdProfessionalVehicleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/professional-vehicle', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdProfessionalVehicleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdProfessionalVehicleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Provider data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdProviderRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdProviderResponse
     */
	public function patchSpacesSpaceIdFoldersIdProvider(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdProviderRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdProviderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/provider', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdProviderRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdProviderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Modify the status of a requireddocument
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidResponse
     */
	public function patchSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentid(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/required-documents/{requireddocumentid}', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Social Regime data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdSocialRegimesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdSocialRegimesResponse
     */
	public function patchSpacesSpaceIdFoldersIdSocialRegimes(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdSocialRegimesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdSocialRegimesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/social-regimes', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdSocialRegimesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdSocialRegimesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Tax Contract data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdTaxContractRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdTaxContractResponse
     */
	public function patchSpacesSpaceIdFoldersIdTaxContract(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdTaxContractRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdTaxContractResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/tax-contract', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdTaxContractRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdFoldersIdTaxContractResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * modify the invitation of a person to collect documents
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsIdCallForDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsIdCallForDocumentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsIdCallForDocumentResponse
     */
	public function patchSpacesSpaceIdPersonsIdCallForDocument(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsIdCallForDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsIdCallForDocumentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsIdCallForDocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/persons/{id}/call-for-document', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsIdCallForDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "modifyCollect", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsIdCallForDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * invite a person in a space
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsIdGuestInSpaceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsIdGuestInSpaceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsIdGuestInSpaceResponse
     */
	public function patchSpacesSpaceIdPersonsIdGuestInSpace(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsIdGuestInSpaceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsIdGuestInSpaceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsIdGuestInSpaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/persons/{id}/guest-in-space', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsIdGuestInSpaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "modifyInvitation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsIdGuestInSpaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * modify an invitation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsIdInvitationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsIdInvitationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsIdInvitationResponse
     */
	public function patchSpacesSpaceIdPersonsIdInvitation(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsIdInvitationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsIdInvitationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsIdInvitationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/persons/{id}/invitation', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsIdInvitationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsIdInvitationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Modify an access
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsMemberIdFoldersIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsMemberIdFoldersIdResponse
     */
	public function patchSpacesSpaceIdPersonsMemberIdFoldersId(
        \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsMemberIdFoldersIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsMemberIdFoldersIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/persons/{memberId}/folders/{id}', \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsMemberIdFoldersIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSpacesSpaceIdPersonsMemberIdFoldersIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Adds a group (only for managers and ADN collaborators)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostBusinessGroupsRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostBusinessGroupsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostBusinessGroupsResponse
     */
	public function postBusinessGroups(
        \OpenAPI\OpenAPI\Models\Operations\PostBusinessGroupsRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\PostBusinessGroupsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostBusinessGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/business-groups');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostBusinessGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postBusinessGroups201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostBusinessGroups201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * send an invitation to manager the private space of personId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdGuestInSpaceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdGuestInSpaceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdGuestInSpaceResponse
     */
	public function postBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdGuestInSpace(
        \OpenAPI\OpenAPI\Models\Operations\PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdGuestInSpaceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdGuestInSpaceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdGuestInSpaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/business-groups/{id}/spaces/{spaceId}/legal-entities/{personId}/customers/{folderId}/guest-in-space', \OpenAPI\OpenAPI\Models\Operations\PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdGuestInSpaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdGuestInSpaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdGuestInSpace201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdGuestInSpace201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a Space in a group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdSpacesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdSpacesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdSpacesResponse
     */
	public function postBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdSpaces(
        \OpenAPI\OpenAPI\Models\Operations\PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdSpacesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdSpacesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdSpacesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/business-groups/{id}/spaces/{spaceId}/legal-entities/{personId}/customers/{folderId}/spaces', \OpenAPI\OpenAPI\Models\Operations\PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdSpacesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdSpacesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdSpaces201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdSpaces201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a document (this document is analyzed to be saved in the correct folder and correct space)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostHubDocumentsApplicationJSON $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostHubDocumentsJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostHubDocumentsJsonResponse
     */
	public function postHubDocumentsJson(
        \OpenAPI\OpenAPI\Models\Operations\PostHubDocumentsApplicationJSON $request,
        \OpenAPI\OpenAPI\Models\Operations\PostHubDocumentsJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostHubDocumentsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hub/documents');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostHubDocumentsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postHubDocumentsJSON201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostHubDocumentsJSON201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a document (this document is analyzed to be saved in the correct folder and correct space)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostHubDocumentsMultipartFormData1 $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostHubDocumentsMultipartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostHubDocumentsMultipartResponse
     */
	public function postHubDocumentsMultipart(
        \OpenAPI\OpenAPI\Models\Operations\PostHubDocumentsMultipartFormData1 $request,
        \OpenAPI\OpenAPI\Models\Operations\PostHubDocumentsMultipartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostHubDocumentsMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hub/documents');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostHubDocumentsMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postHubDocumentsMultipart201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostHubDocumentsMultipart201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a payslip (this document is analyzed to be saved in the correct folder and correct space)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostHubPayslipsApplicationJSON $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostHubPayslipsJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostHubPayslipsJsonResponse
     */
	public function postHubPayslipsJson(
        \OpenAPI\OpenAPI\Models\Operations\PostHubPayslipsApplicationJSON $request,
        \OpenAPI\OpenAPI\Models\Operations\PostHubPayslipsJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostHubPayslipsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hub/payslips');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostHubPayslipsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postHubPayslipsJSON201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostHubPayslipsJSON201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a payslip (this document is analyzed to be saved in the correct folder and correct space)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostHubPayslipsMultipartFormData1 $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostHubPayslipsMultipartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostHubPayslipsMultipartResponse
     */
	public function postHubPayslipsMultipart(
        \OpenAPI\OpenAPI\Models\Operations\PostHubPayslipsMultipartFormData1 $request,
        \OpenAPI\OpenAPI\Models\Operations\PostHubPayslipsMultipartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostHubPayslipsMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hub/payslips');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostHubPayslipsMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postHubPayslipsMultipart201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostHubPayslipsMultipart201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a document in a space (this document is analyzed to be saved in the correct folder)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdDocumentsJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdDocumentsJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdDocumentsJsonResponse
     */
	public function postHubSpacesSpaceIdDocumentsJson(
        \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdDocumentsJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdDocumentsJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdDocumentsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hub/spaces/{spaceId}/documents', \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdDocumentsJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdDocumentsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postHubSpacesSpaceIdDocumentsJSON201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdDocumentsJSON201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a document in a space (this document is analyzed to be saved in the correct folder)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdDocumentsMultipartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdDocumentsMultipartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdDocumentsMultipartResponse
     */
	public function postHubSpacesSpaceIdDocumentsMultipart(
        \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdDocumentsMultipartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdDocumentsMultipartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdDocumentsMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hub/spaces/{spaceId}/documents', \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdDocumentsMultipartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdDocumentsMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postHubSpacesSpaceIdDocumentsMultipart201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdDocumentsMultipart201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a payslip in a space (this document is analyzed to be saved in the correct folder)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdPayslipsJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdPayslipsJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdPayslipsJsonResponse
     */
	public function postHubSpacesSpaceIdPayslipsJson(
        \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdPayslipsJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdPayslipsJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdPayslipsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hub/spaces/{spaceId}/payslips', \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdPayslipsJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdPayslipsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postHubSpacesSpaceIdPayslipsJSON201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdPayslipsJSON201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a payslip in a space (this document is analyzed to be saved in the correct folder)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdPayslipsMultipartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdPayslipsMultipartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdPayslipsMultipartResponse
     */
	public function postHubSpacesSpaceIdPayslipsMultipart(
        \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdPayslipsMultipartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdPayslipsMultipartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdPayslipsMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hub/spaces/{spaceId}/payslips', \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdPayslipsMultipartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdPayslipsMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postHubSpacesSpaceIdPayslipsMultipart201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostHubSpacesSpaceIdPayslipsMultipart201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * add a document to the target menuId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMenusMenuIdDocumentsJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMenusMenuIdDocumentsJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostMenusMenuIdDocumentsJsonResponse
     */
	public function postMenusMenuIdDocumentsJson(
        \OpenAPI\OpenAPI\Models\Operations\PostMenusMenuIdDocumentsJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostMenusMenuIdDocumentsJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostMenusMenuIdDocumentsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/menus/{menuId}/documents', \OpenAPI\OpenAPI\Models\Operations\PostMenusMenuIdDocumentsJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostMenusMenuIdDocumentsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postMenusMenuIdDocumentsJSON201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostMenusMenuIdDocumentsJSON201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * add a document to the target menuId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMenusMenuIdDocumentsMultipartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMenusMenuIdDocumentsMultipartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostMenusMenuIdDocumentsMultipartResponse
     */
	public function postMenusMenuIdDocumentsMultipart(
        \OpenAPI\OpenAPI\Models\Operations\PostMenusMenuIdDocumentsMultipartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostMenusMenuIdDocumentsMultipartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostMenusMenuIdDocumentsMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/menus/{menuId}/documents', \OpenAPI\OpenAPI\Models\Operations\PostMenusMenuIdDocumentsMultipartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostMenusMenuIdDocumentsMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postMenusMenuIdDocumentsMultipart201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostMenusMenuIdDocumentsMultipart201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * create infos of profile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostProfileApplicationJSON $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostProfileJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostProfileJsonResponse
     */
	public function postProfileJson(
        \OpenAPI\OpenAPI\Models\Operations\PostProfileApplicationJSON $request,
        \OpenAPI\OpenAPI\Models\Operations\PostProfileJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostProfileJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/profile');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostProfileJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * create infos of profile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostProfileMultipartFormData1 $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostProfileMultipartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostProfileMultipartResponse
     */
	public function postProfileMultipart(
        \OpenAPI\OpenAPI\Models\Operations\PostProfileMultipartFormData1 $request,
        \OpenAPI\OpenAPI\Models\Operations\PostProfileMultipartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostProfileMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/profile');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostProfileMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * complete the invitation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRegistrationRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRegistrationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRegistrationResponse
     */
	public function postRegistration(
        \OpenAPI\OpenAPI\Models\Operations\PostRegistrationRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\PostRegistrationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRegistrationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/registration');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRegistrationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postRegistration201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostRegistration201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a Space in my group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesResponse
     */
	public function postSpaces(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpaces201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpaces201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a accounting year for the space id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdAccountingYearRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdAccountingYearSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdAccountingYearResponse
     */
	public function postSpacesIdAccountingYear(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdAccountingYearRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdAccountingYearSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdAccountingYearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/accounting-year', \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdAccountingYearRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdAccountingYearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesIdAccountingYear201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesIdAccountingYear201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a colletive decision for the space id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdCollectiveDecisionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdCollectiveDecisionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdCollectiveDecisionResponse
     */
	public function postSpacesIdCollectiveDecision(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdCollectiveDecisionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdCollectiveDecisionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdCollectiveDecisionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/collective-decision', \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdCollectiveDecisionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdCollectiveDecisionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesIdCollectiveDecision201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesIdCollectiveDecision201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a Company Entity in a Space
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdCompanyEntitiesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdCompanyEntitiesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdCompanyEntitiesResponse
     */
	public function postSpacesIdCompanyEntities(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdCompanyEntitiesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdCompanyEntitiesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdCompanyEntitiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/company-entities', \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdCompanyEntitiesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdCompanyEntitiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesIdCompanyEntities201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesIdCompanyEntities201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Replace or Add a contact detail for a person
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdCompanyEntitiesPersonIdDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdCompanyEntitiesPersonIdDetailsResponse
     */
	public function postSpacesIdCompanyEntitiesPersonIdDetails(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdCompanyEntitiesPersonIdDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdCompanyEntitiesPersonIdDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/company-entities/{personId}/details', \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdCompanyEntitiesPersonIdDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdCompanyEntitiesPersonIdDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * create an archive with documents
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdDocumentsDownloadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdDocumentsDownloadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdDocumentsDownloadResponse
     */
	public function postSpacesIdDocumentsDownload(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdDocumentsDownloadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdDocumentsDownloadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdDocumentsDownloadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/documents/download', \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdDocumentsDownloadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdDocumentsDownloadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesIdDocumentsDownload201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesIdDocumentsDownload201ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'multipart/form-data')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * invite a owner in a space
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdFoldersFolderIdPersonsPersonIdGuestInSpaceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdFoldersFolderIdPersonsPersonIdGuestInSpaceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdFoldersFolderIdPersonsPersonIdGuestInSpaceResponse
     */
	public function postSpacesIdFoldersFolderIdPersonsPersonIdGuestInSpace(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdFoldersFolderIdPersonsPersonIdGuestInSpaceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdFoldersFolderIdPersonsPersonIdGuestInSpaceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdFoldersFolderIdPersonsPersonIdGuestInSpaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/folders/{folderId}/persons/{personId}/guest-in-space', \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdFoldersFolderIdPersonsPersonIdGuestInSpaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "invitationPerson", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdFoldersFolderIdPersonsPersonIdGuestInSpaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Add a group in a Space
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdGroupsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdGroupsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdGroupsResponse
     */
	public function postSpacesIdGroups(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdGroupsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdGroupsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/groups', \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdGroupsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesIdGroups201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesIdGroups201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a Person in a Space
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdPersonsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdPersonsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdPersonsResponse
     */
	public function postSpacesIdPersons(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdPersonsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdPersonsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdPersonsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/persons', \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdPersonsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdPersonsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesIdPersons201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesIdPersons201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Replace or Add a contact detail for a person
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdPersonsPersonIdDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdPersonsPersonIdDetailsResponse
     */
	public function postSpacesIdPersonsPersonIdDetails(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdPersonsPersonIdDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdPersonsPersonIdDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/persons/{personId}/details', \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdPersonsPersonIdDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdPersonsPersonIdDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Create a portfolio for the person personId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdPersonsPersonIdPortfoliosRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdPersonsPersonIdPortfoliosSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdPersonsPersonIdPortfoliosResponse
     */
	public function postSpacesIdPersonsPersonIdPortfolios(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdPersonsPersonIdPortfoliosRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdPersonsPersonIdPortfoliosSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdPersonsPersonIdPortfoliosResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/persons/{personId}/portfolios', \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdPersonsPersonIdPortfoliosRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdPersonsPersonIdPortfoliosResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesIdPersonsPersonIdPortfolios201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesIdPersonsPersonIdPortfolios201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a professional vehicle for the space
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdProfessionalVehiclesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdProfessionalVehiclesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdProfessionalVehiclesResponse
     */
	public function postSpacesIdProfessionalVehicles(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdProfessionalVehiclesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdProfessionalVehiclesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdProfessionalVehiclesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/professional-vehicles', \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdProfessionalVehiclesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdProfessionalVehiclesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesIdProfessionalVehicles201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesIdProfessionalVehicles201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enable/Disable logs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdSettingsNf203LogsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdSettingsNf203LogsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdSettingsNf203LogsResponse
     */
	public function postSpacesIdSettingsNf203Logs(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdSettingsNf203LogsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdSettingsNf203LogsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdSettingsNf203LogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/settings/nf203/logs', \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdSettingsNf203LogsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdSettingsNf203LogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Replace or Add a status
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdStatusResponse
     */
	public function postSpacesIdStatus(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/status', \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Create a tax contract for the space
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdTaxContractsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdTaxContractsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdTaxContractsResponse
     */
	public function postSpacesIdTaxContracts(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdTaxContractsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdTaxContractsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdTaxContractsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/tax-contracts', \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdTaxContractsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdTaxContractsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesIdTaxContracts201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesIdTaxContracts201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a trigger for the space id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdTriggersNameRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdTriggersNameSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdTriggersNameResponse
     */
	public function postSpacesIdTriggersName(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdTriggersNameRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdTriggersNameSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdTriggersNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{id}/triggers/{name}', \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdTriggersNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesIdTriggersNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
        }

        return $response;
    }
	
    /**
     * Add a data to a document
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdExtendRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdExtendSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdExtendResponse
     */
	public function postSpacesSpaceIdDocumentsDocumentIdExtend(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdExtendRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdExtendSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdExtendResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/documents/{documentId}/extend', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdExtendRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdExtendResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdDocumentsDocumentIdExtend201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdExtend201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * send by mail a document
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdMailingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdMailingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdMailingResponse
     */
	public function postSpacesSpaceIdDocumentsDocumentIdMailing(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdMailingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdMailingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdMailingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/documents/{documentId}/mailing', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdMailingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdMailingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdDocumentsDocumentIdMailing200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdMailing200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a version to a document and set it as current
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdVersionsJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdVersionsJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdVersionsJsonResponse
     */
	public function postSpacesSpaceIdDocumentsDocumentIdVersionsJson(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdVersionsJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdVersionsJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdVersionsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/documents/{documentId}/versions', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdVersionsJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdVersionsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdDocumentsDocumentIdVersionsJSON201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdVersionsJSON201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a version to a document and set it as current
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdVersionsMultipartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdVersionsMultipartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdVersionsMultipartResponse
     */
	public function postSpacesSpaceIdDocumentsDocumentIdVersionsMultipart(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdVersionsMultipartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdVersionsMultipartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdVersionsMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/documents/{documentId}/versions', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdVersionsMultipartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdVersionsMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdDocumentsDocumentIdVersionsMultipart201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdDocumentsDocumentIdVersionsMultipart201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a data to a space
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdExtendRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdExtendSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdExtendResponse
     */
	public function postSpacesSpaceIdExtend(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdExtendRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdExtendSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdExtendResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/extend', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdExtendRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdExtendResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdExtend201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdExtend201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * recalculate a payroll
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdRefreshRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdRefreshResponse
     */
	public function postSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdRefresh(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdRefreshRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdRefreshResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{folderId}/payrolls/{documentId}/refresh', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdRefreshRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdRefreshResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdRefresh201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdRefresh201ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Add a bank statement in a folder bank
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdBankStatementsJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdBankStatementsJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdBankStatementsJsonResponse
     */
	public function postSpacesSpaceIdFoldersIdBankStatementsJson(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdBankStatementsJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdBankStatementsJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdBankStatementsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/bank-statements', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdBankStatementsJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdBankStatementsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdBankStatementsJSON201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdBankStatementsJSON201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a bank statement in a folder bank
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdBankStatementsMultipartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdBankStatementsMultipartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdBankStatementsMultipartResponse
     */
	public function postSpacesSpaceIdFoldersIdBankStatementsMultipart(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdBankStatementsMultipartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdBankStatementsMultipartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdBankStatementsMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/bank-statements', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdBankStatementsMultipartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdBankStatementsMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdBankStatementsMultipart201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdBankStatementsMultipart201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a common folder in another folder
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdCommonFoldersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdCommonFoldersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdCommonFoldersResponse
     */
	public function postSpacesSpaceIdFoldersIdCommonFolders(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdCommonFoldersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdCommonFoldersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdCommonFoldersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/common-folders', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdCommonFoldersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdCommonFoldersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdCommonFolders201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdCommonFolders201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a document in a folder
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdContractualDocumentsJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdContractualDocumentsJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdContractualDocumentsJsonResponse
     */
	public function postSpacesSpaceIdFoldersIdContractualDocumentsJson(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdContractualDocumentsJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdContractualDocumentsJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdContractualDocumentsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/contractual-documents', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdContractualDocumentsJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdContractualDocumentsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdContractualDocumentsJSON201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdContractualDocumentsJSON201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a document in a folder
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdContractualDocumentsMultipartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdContractualDocumentsMultipartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdContractualDocumentsMultipartResponse
     */
	public function postSpacesSpaceIdFoldersIdContractualDocumentsMultipart(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdContractualDocumentsMultipartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdContractualDocumentsMultipartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdContractualDocumentsMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/contractual-documents', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdContractualDocumentsMultipartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdContractualDocumentsMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdContractualDocumentsMultipart201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdContractualDocumentsMultipart201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a corporate tax declaration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsJsonResponse
     */
	public function postSpacesSpaceIdFoldersIdCoporateTaxDeclarationsJson(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/coporate-tax-declarations', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdCoporateTaxDeclarationsJSON201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsJSON201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a corporate tax declaration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsMultipartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsMultipartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsMultipartResponse
     */
	public function postSpacesSpaceIdFoldersIdCoporateTaxDeclarationsMultipart(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsMultipartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsMultipartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/coporate-tax-declarations', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsMultipartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdCoporateTaxDeclarationsMultipart201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsMultipart201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a document in a folder
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentsJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentsJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentsJsonResponse
     */
	public function postSpacesSpaceIdFoldersIdDocumentsJson(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentsJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentsJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/documents', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentsJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdDocumentsJSON201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentsJSON201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a document in a folder
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentsMultipartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentsMultipartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentsMultipartResponse
     */
	public function postSpacesSpaceIdFoldersIdDocumentsMultipart(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentsMultipartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentsMultipartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentsMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/documents', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentsMultipartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentsMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdDocumentsMultipart201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentsMultipart201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a expense proof in a folder followup or exchange
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseProofsJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseProofsJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseProofsJsonResponse
     */
	public function postSpacesSpaceIdFoldersIdExpenseProofsJson(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseProofsJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseProofsJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseProofsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/expense-proofs', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseProofsJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseProofsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdExpenseProofsJSON201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseProofsJSON201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a expense proof in a folder followup or exchange
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseProofsMultipartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseProofsMultipartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseProofsMultipartResponse
     */
	public function postSpacesSpaceIdFoldersIdExpenseProofsMultipart(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseProofsMultipartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseProofsMultipartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseProofsMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/expense-proofs', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseProofsMultipartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseProofsMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdExpenseProofsMultipart201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseProofsMultipart201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a expense report in a folder followup
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseReportsJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseReportsJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseReportsJsonResponse
     */
	public function postSpacesSpaceIdFoldersIdExpenseReportsJson(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseReportsJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseReportsJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseReportsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/expense-reports', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseReportsJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseReportsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdExpenseReportsJSON201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseReportsJSON201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a expense report in a folder followup
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseReportsMultipartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseReportsMultipartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseReportsMultipartResponse
     */
	public function postSpacesSpaceIdFoldersIdExpenseReportsMultipart(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseReportsMultipartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseReportsMultipartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseReportsMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/expense-reports', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseReportsMultipartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseReportsMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdExpenseReportsMultipart201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdExpenseReportsMultipart201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a invoice in a folder of a customer or a provider
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdInvoicesJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdInvoicesJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdInvoicesJsonResponse
     */
	public function postSpacesSpaceIdFoldersIdInvoicesJson(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdInvoicesJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdInvoicesJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdInvoicesJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/invoices', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdInvoicesJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdInvoicesJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdInvoicesJSON201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdInvoicesJSON201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a invoice in a folder of a customer or a provider
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdInvoicesMultipartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdInvoicesMultipartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdInvoicesMultipartResponse
     */
	public function postSpacesSpaceIdFoldersIdInvoicesMultipart(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdInvoicesMultipartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdInvoicesMultipartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdInvoicesMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/invoices', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdInvoicesMultipartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdInvoicesMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdInvoicesMultipart201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdInvoicesMultipart201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Write a message in the journal of a folder
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdMessagesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdMessagesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdMessagesResponse
     */
	public function postSpacesSpaceIdFoldersIdMessages(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdMessagesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdMessagesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdMessagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/messages', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdMessagesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdMessagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Add a tax declaration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdOtherTaxesJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdOtherTaxesJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdOtherTaxesJsonResponse
     */
	public function postSpacesSpaceIdFoldersIdOtherTaxesJson(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdOtherTaxesJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdOtherTaxesJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdOtherTaxesJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/other-taxes', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdOtherTaxesJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdOtherTaxesJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdOtherTaxesJSON201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdOtherTaxesJSON201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a tax declaration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdOtherTaxesMultipartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdOtherTaxesMultipartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdOtherTaxesMultipartResponse
     */
	public function postSpacesSpaceIdFoldersIdOtherTaxesMultipart(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdOtherTaxesMultipartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdOtherTaxesMultipartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdOtherTaxesMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/other-taxes', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdOtherTaxesMultipartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdOtherTaxesMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdOtherTaxesMultipart201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdOtherTaxesMultipart201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Write a identifier/password in aa folder
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPasswordsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPasswordsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPasswordsResponse
     */
	public function postSpacesSpaceIdFoldersIdPasswords(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPasswordsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPasswordsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPasswordsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/passwords', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPasswordsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPasswordsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Add a nominative social declaration in a folder social
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationJsonResponse
     */
	public function postSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationJson(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/payrolls/{payrollId}/nominative-social-declaration', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationJSON201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationJSON201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a nominative social declaration in a folder social
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationMultipartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationMultipartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationMultipartResponse
     */
	public function postSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationMultipart(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationMultipartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationMultipartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/payrolls/{payrollId}/nominative-social-declaration', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationMultipartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationMultipart201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationMultipart201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a payroll in a folder social
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsJsonResponse
     */
	public function postSpacesSpaceIdFoldersIdPayrollsJson(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/payrolls', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdPayrollsJSON201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsJSON201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a payroll in a folder social
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsMultipartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsMultipartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsMultipartResponse
     */
	public function postSpacesSpaceIdFoldersIdPayrollsMultipart(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsMultipartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsMultipartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/payrolls', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsMultipartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdPayrollsMultipart201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayrollsMultipart201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a payslip in a folder employee
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayslipsJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayslipsJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayslipsJsonResponse
     */
	public function postSpacesSpaceIdFoldersIdPayslipsJson(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayslipsJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayslipsJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayslipsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/payslips', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayslipsJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayslipsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdPayslipsJSON201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayslipsJSON201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a payslip in a folder employee
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayslipsMultipartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayslipsMultipartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayslipsMultipartResponse
     */
	public function postSpacesSpaceIdFoldersIdPayslipsMultipart(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayslipsMultipartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayslipsMultipartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayslipsMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/payslips', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayslipsMultipartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayslipsMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdPayslipsMultipart201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdPayslipsMultipart201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a required document to a line
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidJsonResponse
     */
	public function postSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidJson(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/required-documents/{requireddocumentid}', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidJSON201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidJSON201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a required document to a line
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidMultipartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidMultipartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidMultipartResponse
     */
	public function postSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidMultipart(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidMultipartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidMultipartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/required-documents/{requireddocumentid}', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidMultipartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidMultipart201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidMultipart201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a social contract in a folder employee
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialContractsJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialContractsJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialContractsJsonResponse
     */
	public function postSpacesSpaceIdFoldersIdSocialContractsJson(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialContractsJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialContractsJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialContractsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/social-contracts', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialContractsJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialContractsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdSocialContractsJSON201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialContractsJSON201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a social contract in a folder employee
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialContractsMultipartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialContractsMultipartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialContractsMultipartResponse
     */
	public function postSpacesSpaceIdFoldersIdSocialContractsMultipart(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialContractsMultipartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialContractsMultipartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialContractsMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/social-contracts', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialContractsMultipartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialContractsMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdSocialContractsMultipart201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialContractsMultipart201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a social declaration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialDeclarationsJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialDeclarationsJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialDeclarationsJsonResponse
     */
	public function postSpacesSpaceIdFoldersIdSocialDeclarationsJson(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialDeclarationsJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialDeclarationsJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialDeclarationsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/social-declarations', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialDeclarationsJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialDeclarationsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdSocialDeclarationsJSON201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialDeclarationsJSON201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a social declaration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialDeclarationsMultipartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialDeclarationsMultipartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialDeclarationsMultipartResponse
     */
	public function postSpacesSpaceIdFoldersIdSocialDeclarationsMultipart(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialDeclarationsMultipartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialDeclarationsMultipartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialDeclarationsMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/social-declarations', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialDeclarationsMultipartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialDeclarationsMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdSocialDeclarationsMultipart201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdSocialDeclarationsMultipart201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a vat declaration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdVatDeclarationsJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdVatDeclarationsJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdVatDeclarationsJsonResponse
     */
	public function postSpacesSpaceIdFoldersIdVatDeclarationsJson(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdVatDeclarationsJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdVatDeclarationsJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdVatDeclarationsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/vat-declarations', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdVatDeclarationsJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdVatDeclarationsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdVatDeclarationsJSON201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdVatDeclarationsJSON201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a vat declaration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdVatDeclarationsMultipartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdVatDeclarationsMultipartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdVatDeclarationsMultipartResponse
     */
	public function postSpacesSpaceIdFoldersIdVatDeclarationsMultipart(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdVatDeclarationsMultipartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdVatDeclarationsMultipartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdVatDeclarationsMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/vat-declarations', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdVatDeclarationsMultipartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdVatDeclarationsMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdVatDeclarationsMultipart201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdVatDeclarationsMultipart201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a document in a folder
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentClassJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentClassJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentClassJsonResponse
     */
	public function postSpacesSpaceIdFoldersIdDocumentClassJson(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentClassJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentClassJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentClassJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/{documentClass}', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentClassJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentClassJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdDocumentClassJSON201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentClassJSON201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a document in a folder
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentClassMultipartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentClassMultipartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentClassMultipartResponse
     */
	public function postSpacesSpaceIdFoldersIdDocumentClassMultipart(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentClassMultipartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentClassMultipartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentClassMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/folders/{id}/{documentClass}', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentClassMultipartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentClassMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdFoldersIdDocumentClassMultipart201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdFoldersIdDocumentClassMultipart201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a folder for a bank
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdBanksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdBanksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdBanksResponse
     */
	public function postSpacesSpaceIdLegalEntitiesIdBanks(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdBanksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdBanksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdBanksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/legal-entities/{id}/banks', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdBanksRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdBanksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdLegalEntitiesIdBanks201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdBanks201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a folder for a customer
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdCustomersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdCustomersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdCustomersResponse
     */
	public function postSpacesSpaceIdLegalEntitiesIdCustomers(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdCustomersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdCustomersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdCustomersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/legal-entities/{id}/customers', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdCustomersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdCustomersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdLegalEntitiesIdCustomers201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdCustomers201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a folder for a insurance
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdInsurancesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdInsurancesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdInsurancesResponse
     */
	public function postSpacesSpaceIdLegalEntitiesIdInsurances(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdInsurancesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdInsurancesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdInsurancesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/legal-entities/{id}/insurances', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdInsurancesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdInsurancesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdLegalEntitiesIdInsurances201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdInsurances201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a folder for a loan
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdLoansRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdLoansSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdLoansResponse
     */
	public function postSpacesSpaceIdLegalEntitiesIdLoans(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdLoansRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdLoansSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdLoansResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/legal-entities/{id}/loans', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdLoansRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdLoansResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdLegalEntitiesIdLoans201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdLoans201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a folder for a provider
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdProvidersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdProvidersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdProvidersResponse
     */
	public function postSpacesSpaceIdLegalEntitiesIdProviders(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdProvidersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdProvidersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdProvidersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/legal-entities/{id}/providers', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdProvidersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdProvidersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdLegalEntitiesIdProviders201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdProviders201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a folder for a social regime
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdSocialRegimesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdSocialRegimesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdSocialRegimesResponse
     */
	public function postSpacesSpaceIdLegalEntitiesIdSocialRegimes(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdSocialRegimesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdSocialRegimesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdSocialRegimesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/legal-entities/{id}/social-regimes', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdSocialRegimesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdSocialRegimesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdLegalEntitiesIdSocialRegimes201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdLegalEntitiesIdSocialRegimes201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * invite a person to collect documents
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdCallForDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdCallForDocumentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdCallForDocumentResponse
     */
	public function postSpacesSpaceIdPersonsIdCallForDocument(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdCallForDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdCallForDocumentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdCallForDocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/persons/{id}/call-for-document', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdCallForDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "callForDocument", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdCallForDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdPersonsIdCallForDocument201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdCallForDocument201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a folder for a employee
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdEmployeesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdEmployeesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdEmployeesResponse
     */
	public function postSpacesSpaceIdPersonsIdEmployees(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdEmployeesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdEmployeesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdEmployeesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/persons/{id}/employees', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdEmployeesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdEmployeesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdPersonsIdEmployees201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdEmployees201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * invite a person in a space
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdGuestInSpaceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdGuestInSpaceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdGuestInSpaceResponse
     */
	public function postSpacesSpaceIdPersonsIdGuestInSpace(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdGuestInSpaceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdGuestInSpaceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdGuestInSpaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/persons/{id}/guest-in-space', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdGuestInSpaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "guestInSpace", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdGuestInSpaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * create an invitation in a space for a person
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdInvitationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdInvitationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdInvitationResponse
     */
	public function postSpacesSpaceIdPersonsIdInvitation(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdInvitationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdInvitationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdInvitationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/persons/{id}/invitation', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdInvitationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdInvitationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdPersonsIdInvitation201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdInvitation201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * send the invitation of a person in a space
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdInvitationInvitationIdSendRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdInvitationInvitationIdSendSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdInvitationInvitationIdSendResponse
     */
	public function postSpacesSpaceIdPersonsIdInvitationInvitationIdSend(
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdInvitationInvitationIdSendRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdInvitationInvitationIdSendSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdInvitationInvitationIdSendResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spaces/{spaceId}/persons/{id}/invitation/{invitationId}/send', \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdInvitationInvitationIdSendRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdInvitationInvitationIdSendResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSpacesSpaceIdPersonsIdInvitationInvitationIdSend201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSpacesSpaceIdPersonsIdInvitationInvitationIdSend201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}