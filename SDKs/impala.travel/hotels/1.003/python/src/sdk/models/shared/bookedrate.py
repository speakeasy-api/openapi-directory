"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import cancellationpolicy as shared_cancellationpolicy
from ..shared import hotelagreementstub as shared_hotelagreementstub
from ..shared import money as shared_money
from ..shared import ratecomponent as shared_ratecomponent
from ..shared import taxorfee as shared_taxorfee
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookedRateRetailRateTaxesAndFees:
    r"""Breakdown of taxes (e.g. VAT, city tax) and fees (e.g. cleaning or resort fees)."""
    
    included_in_rate: Optional[list[shared_taxorfee.TaxOrFee]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('includedInRate'), 'exclude': lambda f: f is None }})
    r"""Taxes and fees that are included in the `retailRate.total` price paid at the time of booking."""  
    pay_at_hotel: Optional[list[shared_taxorfee.TaxOrFee]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payAtHotel'), 'exclude': lambda f: f is None }})
    r"""Taxes and fees that need to be payed at the hotel (often upon arrival or departure). This frequently happens for fees that only need to be collected based on certain conditions (e.g. a guest coming from abroad or being older than a certain age)."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookedRateRetailRate:
    r"""The public retail rate you should quote and charge your guest. You're not allowed to quote or charge an amount lower than this if your website or app is publicly accessible."""
    
    taxes_and_fees: BookedRateRetailRateTaxesAndFees = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxesAndFees') }})
    r"""Breakdown of taxes (e.g. VAT, city tax) and fees (e.g. cleaning or resort fees)."""  
    total: shared_money.Money = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""An amount of money in the specified currency (used in the context of prices, fees, refunds etc.)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookedRate:
    r"""Information on the price of the booked room, other components of the room (such as breakfast, lunch or a welcome drink) and the cancellation policies that apply."""
    
    cancellation_policies: list[shared_cancellationpolicy.CancellationPolicy] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cancellationPolicies') }})  
    components: list[shared_ratecomponent.RateComponent] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('components') }})  
    end: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})  
    hotel_agreement: shared_hotelagreementstub.HotelAgreementStub = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hotelAgreement') }})
    r"""Essential information on an agreement with a hotel."""  
    retail_rate: BookedRateRetailRate = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retailRate') }})
    r"""The public retail rate you should quote and charge your guest. You're not allowed to quote or charge an amount lower than this if your website or app is publicly accessible."""  
    seller_commission_percentage: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellerCommissionPercentage') }})
    r"""The commission percentage you as a seller will earn from this booking, based on `retailRate.total`."""  
    start: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})  
    max_occupancy: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxOccupancy'), 'exclude': lambda f: f is None }})  
    