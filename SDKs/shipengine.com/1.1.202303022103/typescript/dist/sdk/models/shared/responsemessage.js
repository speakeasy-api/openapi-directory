"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResponseMessage = exports.ResponseMessageAddressValidationMessageTypeEnum = exports.ResponseMessageAddressValidationDetailCodeEnum = exports.ResponseMessageAddressValidationCodeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * The error codes that can be returned by the address validation API
 */
var ResponseMessageAddressValidationCodeEnum;
(function (ResponseMessageAddressValidationCodeEnum) {
    ResponseMessageAddressValidationCodeEnum["A1000"] = "a1000";
    ResponseMessageAddressValidationCodeEnum["A1001"] = "a1001";
    ResponseMessageAddressValidationCodeEnum["A1002"] = "a1002";
    ResponseMessageAddressValidationCodeEnum["A1003"] = "a1003";
    ResponseMessageAddressValidationCodeEnum["A1004"] = "a1004";
    ResponseMessageAddressValidationCodeEnum["A1005"] = "a1005";
    ResponseMessageAddressValidationCodeEnum["A1006"] = "a1006";
    ResponseMessageAddressValidationCodeEnum["A1007"] = "a1007";
    ResponseMessageAddressValidationCodeEnum["A1008"] = "a1008";
    ResponseMessageAddressValidationCodeEnum["R1000"] = "r1000";
    ResponseMessageAddressValidationCodeEnum["R1001"] = "r1001";
    ResponseMessageAddressValidationCodeEnum["R1002"] = "r1002";
    ResponseMessageAddressValidationCodeEnum["R1003"] = "r1003";
})(ResponseMessageAddressValidationCodeEnum = exports.ResponseMessageAddressValidationCodeEnum || (exports.ResponseMessageAddressValidationCodeEnum = {}));
/**
 * The detailed error codes that can be returned by the address validation API
 */
var ResponseMessageAddressValidationDetailCodeEnum;
(function (ResponseMessageAddressValidationDetailCodeEnum) {
    ResponseMessageAddressValidationDetailCodeEnum["UnsupportedCountry"] = "unsupported_country";
    ResponseMessageAddressValidationDetailCodeEnum["NonSupportedCountry"] = "non_supported_country";
    ResponseMessageAddressValidationDetailCodeEnum["MinimumPostalCodeVerificationFailed"] = "minimum_postal_code_verification_failed";
    ResponseMessageAddressValidationDetailCodeEnum["StreetDoesNotMatchUniqueStreetName"] = "street_does_not_match_unique_street_name";
    ResponseMessageAddressValidationDetailCodeEnum["MultipleDirectionals"] = "multiple_directionals";
    ResponseMessageAddressValidationDetailCodeEnum["MultipleMatches"] = "multiple_matches";
    ResponseMessageAddressValidationDetailCodeEnum["SuiteNotValid"] = "suite_not_valid";
    ResponseMessageAddressValidationDetailCodeEnum["SuiteMissing"] = "suite_missing";
    ResponseMessageAddressValidationDetailCodeEnum["IncompatiblePairedLabels"] = "incompatible_paired_labels";
    ResponseMessageAddressValidationDetailCodeEnum["InvalidHouseNumber"] = "invalid_house_number";
    ResponseMessageAddressValidationDetailCodeEnum["MissingHouseNumber"] = "missing_house_number";
    ResponseMessageAddressValidationDetailCodeEnum["InvalidBoxNumber"] = "invalid_box_number";
    ResponseMessageAddressValidationDetailCodeEnum["InvalidChargeEvent"] = "invalid_charge_event";
    ResponseMessageAddressValidationDetailCodeEnum["MissingBoxNumber"] = "missing_box_number";
    ResponseMessageAddressValidationDetailCodeEnum["MissingCmraOrPrivateMailBoxNumber"] = "missing_cmra_or_private_mail_box_number";
    ResponseMessageAddressValidationDetailCodeEnum["SuiteHasNoSecondaries"] = "suite_has_no_secondaries";
    ResponseMessageAddressValidationDetailCodeEnum["PostalCodeChangedOrAdded"] = "postal_code_changed_or_added";
    ResponseMessageAddressValidationDetailCodeEnum["StateProvinceChangedOrAdded"] = "state_province_changed_or_added";
    ResponseMessageAddressValidationDetailCodeEnum["CityLocalityChangedOrAdded"] = "city_locality_changed_or_added";
    ResponseMessageAddressValidationDetailCodeEnum["UrbanizationChanged"] = "urbanization_changed";
    ResponseMessageAddressValidationDetailCodeEnum["StreetNameSpellingChangedOrAdded"] = "street_name_spelling_changed_or_added";
    ResponseMessageAddressValidationDetailCodeEnum["StreetNameTypeChangedOrAdded"] = "street_name_type_changed_or_added";
    ResponseMessageAddressValidationDetailCodeEnum["StreetDirectionChangedOrAdded"] = "street_direction_changed_or_added";
    ResponseMessageAddressValidationDetailCodeEnum["SuiteTypeChangedOrAdded"] = "suite_type_changed_or_added";
    ResponseMessageAddressValidationDetailCodeEnum["SuiteUnitNumberChangedOrAdded"] = "suite_unit_number_changed_or_added";
    ResponseMessageAddressValidationDetailCodeEnum["DoubleDependentLocalityChangedOrAdded"] = "double_dependent_locality_changed_or_added";
    ResponseMessageAddressValidationDetailCodeEnum["SubadministrativeAreaChangedOrAdded"] = "subadministrative_area_changed_or_added";
    ResponseMessageAddressValidationDetailCodeEnum["SubnationalAreaChangedOrAdded"] = "subnational_area_changed_or_added";
    ResponseMessageAddressValidationDetailCodeEnum["PoBoxChangedOrAdded"] = "po_box_changed_or_added";
    ResponseMessageAddressValidationDetailCodeEnum["PremiseTypeChangedOrAdded"] = "premise_type_changed_or_added";
    ResponseMessageAddressValidationDetailCodeEnum["HouseNumberChanged"] = "house_number_changed";
    ResponseMessageAddressValidationDetailCodeEnum["OrganizationChangedOrAdded"] = "organization_changed_or_added";
    ResponseMessageAddressValidationDetailCodeEnum["PartiallyVerifiedToStateLevel"] = "partially_verified_to_state_level";
    ResponseMessageAddressValidationDetailCodeEnum["PartiallyVerifiedToCityLevel"] = "partially_verified_to_city_level";
    ResponseMessageAddressValidationDetailCodeEnum["PartiallyVerifiedToStreetLevel"] = "partially_verified_to_street_level";
    ResponseMessageAddressValidationDetailCodeEnum["PartiallyVerifiedToPremiseLevel"] = "partially_verified_to_premise_level";
    ResponseMessageAddressValidationDetailCodeEnum["VerifiedToStateLevel"] = "verified_to_state_level";
    ResponseMessageAddressValidationDetailCodeEnum["VerifiedToCityLevel"] = "verified_to_city_level";
    ResponseMessageAddressValidationDetailCodeEnum["VerifiedToStreetLevel"] = "verified_to_street_level";
    ResponseMessageAddressValidationDetailCodeEnum["VerifiedToPremiseLevel"] = "verified_to_premise_level";
    ResponseMessageAddressValidationDetailCodeEnum["VerifiedToSuiteLevel"] = "verified_to_suite_level";
    ResponseMessageAddressValidationDetailCodeEnum["CodedToStreetLavel"] = "coded_to_street_lavel";
    ResponseMessageAddressValidationDetailCodeEnum["CodedToNeighborhoodLevel"] = "coded_to_neighborhood_level";
    ResponseMessageAddressValidationDetailCodeEnum["CodedToCommunityLevel"] = "coded_to_community_level";
    ResponseMessageAddressValidationDetailCodeEnum["CodedToStateLevel"] = "coded_to_state_level";
    ResponseMessageAddressValidationDetailCodeEnum["CodedToRooftopLevel"] = "coded_to_rooftop_level";
    ResponseMessageAddressValidationDetailCodeEnum["CodedToRooftopInterpolationLevel"] = "coded_to_rooftop_interpolation_level";
    ResponseMessageAddressValidationDetailCodeEnum["NameMaxLengthExceeded"] = "name_max_length_exceeded";
    ResponseMessageAddressValidationDetailCodeEnum["PhoneMaxLengthExceeded"] = "phone_max_length_exceeded";
    ResponseMessageAddressValidationDetailCodeEnum["CompanyNameMaxLengthExceeded"] = "company_name_max_length_exceeded";
    ResponseMessageAddressValidationDetailCodeEnum["Line1MinMaxLength"] = "line1_min_max_length";
    ResponseMessageAddressValidationDetailCodeEnum["Line2MaxLengthExceeded"] = "line2_max_length_exceeded";
    ResponseMessageAddressValidationDetailCodeEnum["Line3MaxLengthExceeded"] = "line3_max_length_exceeded";
    ResponseMessageAddressValidationDetailCodeEnum["CityLocalityMaxLengthExceeded"] = "city_locality_max_length_exceeded";
    ResponseMessageAddressValidationDetailCodeEnum["StateProvinceMaxLengthExceeded"] = "state_province_max_length_exceeded";
    ResponseMessageAddressValidationDetailCodeEnum["InvalidPostalCode"] = "invalid_postal_code";
    ResponseMessageAddressValidationDetailCodeEnum["CountryInvalidLength"] = "country_invalid_length";
    ResponseMessageAddressValidationDetailCodeEnum["AddressNotFound"] = "address_not_found";
})(ResponseMessageAddressValidationDetailCodeEnum = exports.ResponseMessageAddressValidationDetailCodeEnum || (exports.ResponseMessageAddressValidationDetailCodeEnum = {}));
/**
 * The different types of messages that can be returned by the address validation API
 */
var ResponseMessageAddressValidationMessageTypeEnum;
(function (ResponseMessageAddressValidationMessageTypeEnum) {
    ResponseMessageAddressValidationMessageTypeEnum["Error"] = "error";
    ResponseMessageAddressValidationMessageTypeEnum["Warning"] = "warning";
    ResponseMessageAddressValidationMessageTypeEnum["Info"] = "info";
})(ResponseMessageAddressValidationMessageTypeEnum = exports.ResponseMessageAddressValidationMessageTypeEnum || (exports.ResponseMessageAddressValidationMessageTypeEnum = {}));
/**
 * A response message that displays when additional info is needed for an address validation request.
 */
var ResponseMessage = /** @class */ (function (_super) {
    __extends(ResponseMessage, _super);
    function ResponseMessage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "code" }),
        __metadata("design:type", String)
    ], ResponseMessage.prototype, "code", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "detail_code" }),
        __metadata("design:type", String)
    ], ResponseMessage.prototype, "detailCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "message" }),
        __metadata("design:type", String)
    ], ResponseMessage.prototype, "message", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], ResponseMessage.prototype, "type", void 0);
    return ResponseMessage;
}(utils_1.SpeakeasyBase));
exports.ResponseMessage = ResponseMessage;
