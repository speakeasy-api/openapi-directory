/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Workspaces {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Gets a workspace. Returns NOT_FOUND if the workspace does not exist.
   */
  area120tablesWorkspacesGet(
    req: operations.Area120tablesWorkspacesGetRequest,
    security: operations.Area120tablesWorkspacesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.Area120tablesWorkspacesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.Area120tablesWorkspacesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1alpha1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.Area120tablesWorkspacesGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Area120tablesWorkspacesGetResponse =
        new operations.Area120tablesWorkspacesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.workspace = utils.objectToClass(
              httpRes?.data,
              shared.Workspace
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists workspaces for the user.
   */
  area120tablesWorkspacesList(
    req: operations.Area120tablesWorkspacesListRequest,
    security: operations.Area120tablesWorkspacesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.Area120tablesWorkspacesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.Area120tablesWorkspacesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1alpha1/workspaces";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.Area120tablesWorkspacesListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Area120tablesWorkspacesListResponse =
        new operations.Area120tablesWorkspacesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listWorkspacesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListWorkspacesResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
