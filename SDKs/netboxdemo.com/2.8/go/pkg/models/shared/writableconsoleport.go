// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type WritableConsolePortConnectionStatusEnum string

const (
	WritableConsolePortConnectionStatusEnumFalse WritableConsolePortConnectionStatusEnum = "false"
	WritableConsolePortConnectionStatusEnumTrue  WritableConsolePortConnectionStatusEnum = "true"
)

func (e *WritableConsolePortConnectionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "false":
		fallthrough
	case "true":
		*e = WritableConsolePortConnectionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableConsolePortConnectionStatusEnum: %s", s)
	}
}

// WritableConsolePortTypeEnum - Physical port type
type WritableConsolePortTypeEnum string

const (
	WritableConsolePortTypeEnumDe9       WritableConsolePortTypeEnum = "de-9"
	WritableConsolePortTypeEnumDb25      WritableConsolePortTypeEnum = "db-25"
	WritableConsolePortTypeEnumRj11      WritableConsolePortTypeEnum = "rj-11"
	WritableConsolePortTypeEnumRj12      WritableConsolePortTypeEnum = "rj-12"
	WritableConsolePortTypeEnumRj45      WritableConsolePortTypeEnum = "rj-45"
	WritableConsolePortTypeEnumUsbA      WritableConsolePortTypeEnum = "usb-a"
	WritableConsolePortTypeEnumUsbB      WritableConsolePortTypeEnum = "usb-b"
	WritableConsolePortTypeEnumUsbC      WritableConsolePortTypeEnum = "usb-c"
	WritableConsolePortTypeEnumUsbMiniA  WritableConsolePortTypeEnum = "usb-mini-a"
	WritableConsolePortTypeEnumUsbMiniB  WritableConsolePortTypeEnum = "usb-mini-b"
	WritableConsolePortTypeEnumUsbMicroA WritableConsolePortTypeEnum = "usb-micro-a"
	WritableConsolePortTypeEnumUsbMicroB WritableConsolePortTypeEnum = "usb-micro-b"
	WritableConsolePortTypeEnumOther     WritableConsolePortTypeEnum = "other"
)

func (e *WritableConsolePortTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "de-9":
		fallthrough
	case "db-25":
		fallthrough
	case "rj-11":
		fallthrough
	case "rj-12":
		fallthrough
	case "rj-45":
		fallthrough
	case "usb-a":
		fallthrough
	case "usb-b":
		fallthrough
	case "usb-c":
		fallthrough
	case "usb-mini-a":
		fallthrough
	case "usb-mini-b":
		fallthrough
	case "usb-micro-a":
		fallthrough
	case "usb-micro-b":
		fallthrough
	case "other":
		*e = WritableConsolePortTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableConsolePortTypeEnum: %s", s)
	}
}

type WritableConsolePortInput struct {
	Cable            *NestedCableInput                        `json:"cable,omitempty"`
	ConnectionStatus *WritableConsolePortConnectionStatusEnum `json:"connection_status,omitempty"`
	Description      *string                                  `json:"description,omitempty"`
	Device           int64                                    `json:"device"`
	Name             string                                   `json:"name"`
	Tags             []string                                 `json:"tags,omitempty"`
	// Physical port type
	Type *WritableConsolePortTypeEnum `json:"type,omitempty"`
}
