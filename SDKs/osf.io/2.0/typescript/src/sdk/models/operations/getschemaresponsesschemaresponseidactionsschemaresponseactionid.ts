/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class GetSchemaResponsesSchemaResponseIdActionsSchemaResponseActionIdRequest extends SpeakeasyBase {
  /**
   * The unique identifier of the Schema Response Action example `61b9eae1a7d8ac025c4c46d3`.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=schema_response_action_id",
  })
  schemaResponseActionId: string;

  /**
   * The unique identifier of the Schema Response example `61b9cd62eb66180215222669`.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=schema_response_id",
  })
  schemaResponseId: string;
}

/**
 * The name of the state of the Schema Response prior to the creation of the action.
 */
export enum GetSchemaResponsesSchemaResponseIdActionsSchemaResponseActionIdSchemaResponseActionsAttributesFromStateEnum {
  Initial = "initial",
  InProgress = "in_progress",
  Approved = "approved",
  PendingModeration = "pending_moderation",
}

/**
 * The name of the state of the Schema Response after the creation of the action
 */
export enum GetSchemaResponsesSchemaResponseIdActionsSchemaResponseActionIdSchemaResponseActionsAttributesToStateEnum {
  InProgress = "in_progress",
  Approved = "approved",
  PendingModeration = "pending_moderation",
}

/**
 * The name of the trigger that caused the action.
 */
export enum GetSchemaResponsesSchemaResponseIdActionsSchemaResponseActionIdSchemaResponseActionsAttributesTriggerEnum {
  Submit = "submit",
  Approve = "approve",
  Accept = "accept",
  AdminReject = "admin_reject",
  ModeratorReject = "moderator_reject",
}

export class GetSchemaResponsesSchemaResponseIdActionsSchemaResponseActionIdSchemaResponseActionsAttributes extends SpeakeasyBase {
  /**
   * Bool of representing whether a user created the action.
   */
  @SpeakeasyMetadata()
  auto?: boolean;

  /**
   * A comment made explaining the reasoning of the action.
   */
  @SpeakeasyMetadata()
  comment?: string;

  /**
   * The date the action was created.
   */
  @SpeakeasyMetadata()
  dateCreated?: string;

  /**
   * The name of the state of the Schema Response prior to the creation of the action.
   */
  @SpeakeasyMetadata()
  fromState?: GetSchemaResponsesSchemaResponseIdActionsSchemaResponseActionIdSchemaResponseActionsAttributesFromStateEnum;

  /**
   * The name of the state of the Schema Response after the creation of the action
   */
  @SpeakeasyMetadata()
  toState?: GetSchemaResponsesSchemaResponseIdActionsSchemaResponseActionIdSchemaResponseActionsAttributesToStateEnum;

  /**
   * The name of the trigger that caused the action.
   */
  @SpeakeasyMetadata()
  trigger?: GetSchemaResponsesSchemaResponseIdActionsSchemaResponseActionIdSchemaResponseActionsAttributesTriggerEnum;

  /**
   * Bool of representing whether the action is visible.
   */
  @SpeakeasyMetadata()
  visible?: boolean;
}

/**
 * URLs to alternative representations of the Registration Schema entity.
 */
export class GetSchemaResponsesSchemaResponseIdActionsSchemaResponseActionIdSchemaResponseActionsLinks extends SpeakeasyBase {
  /**
   * A link to the detail page for a Registration Schema.
   */
  @SpeakeasyMetadata()
  self?: string;
}

/**
 * Links to other entities or entity collections that have a relationship to the Schema Response Action entity.
 */
export class GetSchemaResponsesSchemaResponseIdActionsSchemaResponseActionIdSchemaResponseActionsRelationships extends SpeakeasyBase {
  /**
   * A link to the node the file is on.
   */
  @SpeakeasyMetadata()
  creator?: string;

  /**
   * A link to the node the file is on.
   */
  @SpeakeasyMetadata()
  target?: string;
}

/**
 * OK
 */
export class GetSchemaResponsesSchemaResponseIdActionsSchemaResponseActionIdSchemaResponseActions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  attributes?: GetSchemaResponsesSchemaResponseIdActionsSchemaResponseActionIdSchemaResponseActionsAttributes;

  /**
   * The unique identifier of the Schema Response Action.
   */
  @SpeakeasyMetadata()
  id?: string;

  /**
   * URLs to alternative representations of the Registration Schema entity.
   */
  @SpeakeasyMetadata()
  links?: GetSchemaResponsesSchemaResponseIdActionsSchemaResponseActionIdSchemaResponseActionsLinks;

  /**
   * Links to other entities or entity collections that have a relationship to the Schema Response Action entity.
   */
  @SpeakeasyMetadata()
  relationships?: GetSchemaResponsesSchemaResponseIdActionsSchemaResponseActionIdSchemaResponseActionsRelationships;

  /**
   * The type identifier of the Schema Response Action (`schema-response-actions`).
   */
  @SpeakeasyMetadata()
  type?: string;
}

export class GetSchemaResponsesSchemaResponseIdActionsSchemaResponseActionIdResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
