// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetCertificateAuthorityCsrXAmzTargetEnum
type GetCertificateAuthorityCsrXAmzTargetEnum string

const (
	GetCertificateAuthorityCsrXAmzTargetEnumAcmPrivateCaGetCertificateAuthorityCsr GetCertificateAuthorityCsrXAmzTargetEnum = "ACMPrivateCA.GetCertificateAuthorityCsr"
)

func (e GetCertificateAuthorityCsrXAmzTargetEnum) ToPointer() *GetCertificateAuthorityCsrXAmzTargetEnum {
	return &e
}

func (e *GetCertificateAuthorityCsrXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACMPrivateCA.GetCertificateAuthorityCsr":
		*e = GetCertificateAuthorityCsrXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCertificateAuthorityCsrXAmzTargetEnum: %v", v)
	}
}

type GetCertificateAuthorityCsrRequest struct {
	GetCertificateAuthorityCsrRequest shared.GetCertificateAuthorityCsrRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                     *string                                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                 *string                                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                    *string                                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                          *string                                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                 *string                                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                     *string                                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                 *string                                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                        GetCertificateAuthorityCsrXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetCertificateAuthorityCsrResponse struct {
	ContentType string
	// Success
	GetCertificateAuthorityCsrResponse *shared.GetCertificateAuthorityCsrResponse
	// InvalidArnException
	InvalidArnException interface{}
	// InvalidStateException
	InvalidStateException interface{}
	// RequestFailedException
	RequestFailedException interface{}
	// RequestInProgressException
	RequestInProgressException interface{}
	StatusCode                 int
	RawResponse                *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
}
