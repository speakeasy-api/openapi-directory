// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// LatestGetV2LatestLocationIDGetOrderByLocationsOrderEnum - An enumeration.
type LatestGetV2LatestLocationIDGetOrderByLocationsOrderEnum string

const (
	LatestGetV2LatestLocationIDGetOrderByLocationsOrderEnumCity         LatestGetV2LatestLocationIDGetOrderByLocationsOrderEnum = "city"
	LatestGetV2LatestLocationIDGetOrderByLocationsOrderEnumCountry      LatestGetV2LatestLocationIDGetOrderByLocationsOrderEnum = "country"
	LatestGetV2LatestLocationIDGetOrderByLocationsOrderEnumLocation     LatestGetV2LatestLocationIDGetOrderByLocationsOrderEnum = "location"
	LatestGetV2LatestLocationIDGetOrderByLocationsOrderEnumSourceName   LatestGetV2LatestLocationIDGetOrderByLocationsOrderEnum = "sourceName"
	LatestGetV2LatestLocationIDGetOrderByLocationsOrderEnumFirstUpdated LatestGetV2LatestLocationIDGetOrderByLocationsOrderEnum = "firstUpdated"
	LatestGetV2LatestLocationIDGetOrderByLocationsOrderEnumLastUpdated  LatestGetV2LatestLocationIDGetOrderByLocationsOrderEnum = "lastUpdated"
	LatestGetV2LatestLocationIDGetOrderByLocationsOrderEnumCount        LatestGetV2LatestLocationIDGetOrderByLocationsOrderEnum = "count"
	LatestGetV2LatestLocationIDGetOrderByLocationsOrderEnumRandom       LatestGetV2LatestLocationIDGetOrderByLocationsOrderEnum = "random"
)

func (e LatestGetV2LatestLocationIDGetOrderByLocationsOrderEnum) ToPointer() *LatestGetV2LatestLocationIDGetOrderByLocationsOrderEnum {
	return &e
}

func (e *LatestGetV2LatestLocationIDGetOrderByLocationsOrderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "city":
		fallthrough
	case "country":
		fallthrough
	case "location":
		fallthrough
	case "sourceName":
		fallthrough
	case "firstUpdated":
		fallthrough
	case "lastUpdated":
		fallthrough
	case "count":
		fallthrough
	case "random":
		*e = LatestGetV2LatestLocationIDGetOrderByLocationsOrderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LatestGetV2LatestLocationIDGetOrderByLocationsOrderEnum: %v", v)
	}
}

// LatestGetV2LatestLocationIDGetSortSortEnum - An enumeration.
type LatestGetV2LatestLocationIDGetSortSortEnum string

const (
	LatestGetV2LatestLocationIDGetSortSortEnumAsc  LatestGetV2LatestLocationIDGetSortSortEnum = "asc"
	LatestGetV2LatestLocationIDGetSortSortEnumDesc LatestGetV2LatestLocationIDGetSortSortEnum = "desc"
)

func (e LatestGetV2LatestLocationIDGetSortSortEnum) ToPointer() *LatestGetV2LatestLocationIDGetSortSortEnum {
	return &e
}

func (e *LatestGetV2LatestLocationIDGetSortSortEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = LatestGetV2LatestLocationIDGetSortSortEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LatestGetV2LatestLocationIDGetSortSortEnum: %v", v)
	}
}

type LatestGetV2LatestLocationIDGetRequest struct {
	//         Limit results by a certain city or cities.
	//         (ex. ?city=Chicago or ?city=Chicago&city=Boston)
	//
	City        []string `queryParam:"style=form,explode=true,name=city"`
	Coordinates *string  `queryParam:"style=form,explode=true,name=coordinates"`
	//         Limit results by a certain country using two letter country code.
	//         (ex. ?country=US or ?country=US&country=MX)
	//
	Country []string `queryParam:"style=form,explode=true,name=country"`
	//         Limit results by a certain country using two letter country code.
	//         (ex. /US)
	//
	CountryID *string `queryParam:"style=form,explode=true,name=country_id"`
	DumpRaw   *bool   `queryParam:"style=form,explode=true,name=dumpRaw"`
	// Source entity type.
	Entity *shared.EntityTypesEnum `queryParam:"style=form,explode=true,name=entity"`
	HasGeo *bool                   `queryParam:"style=form,explode=true,name=has_geo"`
	// Data is the product of a previous analysis/aggregation and not raw measurements
	IsAnalysis *bool `queryParam:"style=form,explode=true,name=isAnalysis"`
	// Location is mobile
	IsMobile *bool `queryParam:"style=form,explode=true,name=isMobile"`
	// Change the number of results returned.
	Limit      *int64        `queryParam:"style=form,explode=true,name=limit"`
	Location   []interface{} `queryParam:"style=form,explode=true,name=location"`
	LocationID int64         `pathParam:"style=simple,explode=false,name=location_id"`
	// Manufacturer of Sensor
	ManufacturerName []string `queryParam:"style=form,explode=true,name=manufacturerName"`
	// Model Name of Sensor
	ModelName []string `queryParam:"style=form,explode=true,name=modelName"`
	Offset    *int64   `queryParam:"style=form,explode=true,name=offset"`
	// Order by a field
	OrderBy *LatestGetV2LatestLocationIDGetOrderByLocationsOrderEnum `queryParam:"style=form,explode=true,name=order_by"`
	// Paginate through results.
	Page        *int64        `queryParam:"style=form,explode=true,name=page"`
	Parameter   []interface{} `queryParam:"style=form,explode=true,name=parameter"`
	ParameterID *int64        `queryParam:"style=form,explode=true,name=parameter_id"`
	Radius      *int64        `queryParam:"style=form,explode=true,name=radius"`
	// Type of Sensor
	SensorType *shared.SensorTypesEnum `queryParam:"style=form,explode=true,name=sensorType"`
	// Sort Direction
	Sort *LatestGetV2LatestLocationIDGetSortSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// Name of the data source
	SourceName []string `queryParam:"style=form,explode=true,name=sourceName"`
	Unit       []string `queryParam:"style=form,explode=true,name=unit"`
}

type LatestGetV2LatestLocationIDGetResponse struct {
	ContentType string
	// Validation Error
	HTTPValidationError *shared.HTTPValidationError
	// Successful Response
	OpenAQResult *shared.OpenAQResult
	StatusCode   int
	RawResponse  *http.Response
}
