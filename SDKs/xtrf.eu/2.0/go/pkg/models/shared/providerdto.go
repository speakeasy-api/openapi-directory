// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ProviderDTOStatusEnum string

const (
	ProviderDTOStatusEnumActive             ProviderDTOStatusEnum = "ACTIVE"
	ProviderDTOStatusEnumInactive           ProviderDTOStatusEnum = "INACTIVE"
	ProviderDTOStatusEnumWaitingForApproval ProviderDTOStatusEnum = "WAITING_FOR_APPROVAL"
	ProviderDTOStatusEnumRejected           ProviderDTOStatusEnum = "REJECTED"
	ProviderDTOStatusEnumTooExpensive       ProviderDTOStatusEnum = "TOO_EXPENSIVE"
	ProviderDTOStatusEnumIncompleteData     ProviderDTOStatusEnum = "INCOMPLETE_DATA"
	ProviderDTOStatusEnumPotential          ProviderDTOStatusEnum = "POTENTIAL"
	ProviderDTOStatusEnumNotConfirmed       ProviderDTOStatusEnum = "NOT_CONFIRMED"
)

func (e *ProviderDTOStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ACTIVE":
		fallthrough
	case "INACTIVE":
		fallthrough
	case "WAITING_FOR_APPROVAL":
		fallthrough
	case "REJECTED":
		fallthrough
	case "TOO_EXPENSIVE":
		fallthrough
	case "INCOMPLETE_DATA":
		fallthrough
	case "POTENTIAL":
		fallthrough
	case "NOT_CONFIRMED":
		*e = ProviderDTOStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProviderDTOStatusEnum: %s", s)
	}
}

// ProviderDTO - Success
type ProviderDTO struct {
	BillingAddress        *AddressDTO            `json:"billingAddress,omitempty"`
	BranchID              *int64                 `json:"branchId,omitempty"`
	Competencies          *CompetenciesDTO       `json:"competencies,omitempty"`
	Contact               *ContactDTO            `json:"contact,omitempty"`
	CorrespondenceAddress *AddressDTO            `json:"correspondenceAddress,omitempty"`
	CustomFields          []CustomFieldDTO       `json:"customFields,omitempty"`
	FullName              *string                `json:"fullName,omitempty"`
	ID                    *int64                 `json:"id,omitempty"`
	IDNumber              *string                `json:"idNumber,omitempty"`
	LeadSourceID          *int64                 `json:"leadSourceId,omitempty"`
	Name                  *string                `json:"name,omitempty"`
	Notes                 *string                `json:"notes,omitempty"`
	Persons               []ProviderPersonDTO    `json:"persons,omitempty"`
	Status                *ProviderDTOStatusEnum `json:"status,omitempty"`
}
