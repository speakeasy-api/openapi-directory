/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class GETPaymentRunSummaryResponse {
    /**
     * **Note:** This field is only available if you have the Credit Balance feature enabled.
     * 
     * The number of credit balance adjustments that are successfully processed in the payment run.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfCreditBalanceAdjustments")
    public Long numberOfCreditBalanceAdjustments;
    public GETPaymentRunSummaryResponse withNumberOfCreditBalanceAdjustments(Long numberOfCreditBalanceAdjustments) {
        this.numberOfCreditBalanceAdjustments = numberOfCreditBalanceAdjustments;
        return this;
    }
    
    /**
     * **Note:** This field is only available if you have the Invoice Settlement feature enabled.
     * 
     * The total number of credit memos that are successfully processed in the payment run.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfCreditMemos")
    public Long numberOfCreditMemos;
    public GETPaymentRunSummaryResponse withNumberOfCreditMemos(Long numberOfCreditMemos) {
        this.numberOfCreditMemos = numberOfCreditMemos;
        return this;
    }
    
    /**
     * **Note:** This field is only available if you have the Invoice Settlement feature enabled.
     * 
     * The total number of debit memos that are picked up for processing in the payment run.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfDebitMemos")
    public Long numberOfDebitMemos;
    public GETPaymentRunSummaryResponse withNumberOfDebitMemos(Long numberOfDebitMemos) {
        this.numberOfDebitMemos = numberOfDebitMemos;
        return this;
    }
    
    /**
     * The number of input data that are processed with errors.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfErrorInputData")
    public Long numberOfErrorInputData;
    public GETPaymentRunSummaryResponse withNumberOfErrorInputData(Long numberOfErrorInputData) {
        this.numberOfErrorInputData = numberOfErrorInputData;
        return this;
    }
    
    /**
     * The number of payments with the status of `Error` and `Processing`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfErrors")
    public Long numberOfErrors;
    public GETPaymentRunSummaryResponse withNumberOfErrors(Long numberOfErrors) {
        this.numberOfErrors = numberOfErrors;
        return this;
    }
    
    /**
     * The total number of input data.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfInputData")
    public Long numberOfInputData;
    public GETPaymentRunSummaryResponse withNumberOfInputData(Long numberOfInputData) {
        this.numberOfInputData = numberOfInputData;
        return this;
    }
    
    /**
     * **Note:** This field is only available if you have the Invoice Settlement feature enabled.
     * 
     * The total number of invoices that are picked up for processing in the payment run.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfInvoices")
    public Long numberOfInvoices;
    public GETPaymentRunSummaryResponse withNumberOfInvoices(Long numberOfInvoices) {
        this.numberOfInvoices = numberOfInvoices;
        return this;
    }
    
    /**
     * The number of payments that are successfully processed in the payment run.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfPayments")
    public Long numberOfPayments;
    public GETPaymentRunSummaryResponse withNumberOfPayments(Long numberOfPayments) {
        this.numberOfPayments = numberOfPayments;
        return this;
    }
    
    /**
     * The number of input data that are successfully processed.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfProcessedInputData")
    public Long numberOfProcessedInputData;
    public GETPaymentRunSummaryResponse withNumberOfProcessedInputData(Long numberOfProcessedInputData) {
        this.numberOfProcessedInputData = numberOfProcessedInputData;
        return this;
    }
    
    /**
     * The total number of receivables that are picked up for processing in the payment run.
     * 
     * The value of this field is the sum of the value of the `numberOfInvoices` field and that of the `numberOfDebitMemos` field.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfReceivables")
    public Long numberOfReceivables;
    public GETPaymentRunSummaryResponse withNumberOfReceivables(Long numberOfReceivables) {
        this.numberOfReceivables = numberOfReceivables;
        return this;
    }
    
    /**
     * **Note:** This field is only available if you have the Invoice Settlement feature enabled.
     * 
     * The number of unapplied payments that are successfully processed in the payment run.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfUnappliedPayments")
    public Long numberOfUnappliedPayments;
    public GETPaymentRunSummaryResponse withNumberOfUnappliedPayments(Long numberOfUnappliedPayments) {
        this.numberOfUnappliedPayments = numberOfUnappliedPayments;
        return this;
    }
    
    /**
     * **Note:** This field is only available if you have the Invoice Settlement feature enabled.
     * 
     * The number of debit memos with remaining positive balances after the payment run is completed.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfUnprocessedDebitMemos")
    public Long numberOfUnprocessedDebitMemos;
    public GETPaymentRunSummaryResponse withNumberOfUnprocessedDebitMemos(Long numberOfUnprocessedDebitMemos) {
        this.numberOfUnprocessedDebitMemos = numberOfUnprocessedDebitMemos;
        return this;
    }
    
    /**
     * **Note:** This field is only available if you have the Invoice Settlement feature enabled.
     * 
     * The number of invoices with remaining positive balances after the payment run is completed.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfUnprocessedInvoices")
    public Long numberOfUnprocessedInvoices;
    public GETPaymentRunSummaryResponse withNumberOfUnprocessedInvoices(Long numberOfUnprocessedInvoices) {
        this.numberOfUnprocessedInvoices = numberOfUnprocessedInvoices;
        return this;
    }
    
    /**
     * The number of receivables with remaining positive balances after the payment run is completed.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfUnprocessedReceivables")
    public Long numberOfUnprocessedReceivables;
    public GETPaymentRunSummaryResponse withNumberOfUnprocessedReceivables(Long numberOfUnprocessedReceivables) {
        this.numberOfUnprocessedReceivables = numberOfUnprocessedReceivables;
        return this;
    }
    
    /**
     * Returns `true` if the request was processed successfully.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("success")
    public Boolean success;
    public GETPaymentRunSummaryResponse withSuccess(Boolean success) {
        this.success = success;
        return this;
    }
    
    /**
     * Container for total values.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalValues")
    public GETPaymentRunSummaryTotalValues[] totalValues;
    public GETPaymentRunSummaryResponse withTotalValues(GETPaymentRunSummaryTotalValues[] totalValues) {
        this.totalValues = totalValues;
        return this;
    }
    
}
