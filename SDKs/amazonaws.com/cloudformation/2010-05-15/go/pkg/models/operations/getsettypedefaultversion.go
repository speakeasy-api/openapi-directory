// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETSetTypeDefaultVersionActionEnum
type GETSetTypeDefaultVersionActionEnum string

const (
	GETSetTypeDefaultVersionActionEnumSetTypeDefaultVersion GETSetTypeDefaultVersionActionEnum = "SetTypeDefaultVersion"
)

func (e *GETSetTypeDefaultVersionActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SetTypeDefaultVersion":
		*e = GETSetTypeDefaultVersionActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETSetTypeDefaultVersionActionEnum: %s", s)
	}
}

// GETSetTypeDefaultVersionTypeEnum - <p>The kind of extension.</p> <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
type GETSetTypeDefaultVersionTypeEnum string

const (
	GETSetTypeDefaultVersionTypeEnumResource GETSetTypeDefaultVersionTypeEnum = "RESOURCE"
	GETSetTypeDefaultVersionTypeEnumModule   GETSetTypeDefaultVersionTypeEnum = "MODULE"
	GETSetTypeDefaultVersionTypeEnumHook     GETSetTypeDefaultVersionTypeEnum = "HOOK"
)

func (e *GETSetTypeDefaultVersionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "RESOURCE":
		fallthrough
	case "MODULE":
		fallthrough
	case "HOOK":
		*e = GETSetTypeDefaultVersionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETSetTypeDefaultVersionTypeEnum: %s", s)
	}
}

// GETSetTypeDefaultVersionVersionEnum
type GETSetTypeDefaultVersionVersionEnum string

const (
	GETSetTypeDefaultVersionVersionEnumTwoThousandAndTen0515 GETSetTypeDefaultVersionVersionEnum = "2010-05-15"
)

func (e *GETSetTypeDefaultVersionVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2010-05-15":
		*e = GETSetTypeDefaultVersionVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETSetTypeDefaultVersionVersionEnum: %s", s)
	}
}

type GETSetTypeDefaultVersionQueryParams struct {
	Action GETSetTypeDefaultVersionActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The Amazon Resource Name (ARN) of the extension for which you want version summary information.</p> <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
	Arn *string `queryParam:"style=form,explode=true,name=Arn"`
	// <p>The kind of extension.</p> <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
	Type *GETSetTypeDefaultVersionTypeEnum `queryParam:"style=form,explode=true,name=Type"`
	// <p>The name of the extension.</p> <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
	TypeName *string                             `queryParam:"style=form,explode=true,name=TypeName"`
	Version  GETSetTypeDefaultVersionVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	// The ID of a specific version of the extension. The version ID is the value at the end of the Amazon Resource Name (ARN) assigned to the extension version when it is registered.
	VersionID *string `queryParam:"style=form,explode=true,name=VersionId"`
}

type GETSetTypeDefaultVersionHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETSetTypeDefaultVersionRequest struct {
	QueryParams GETSetTypeDefaultVersionQueryParams
	Headers     GETSetTypeDefaultVersionHeaders
}

type GETSetTypeDefaultVersionResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
