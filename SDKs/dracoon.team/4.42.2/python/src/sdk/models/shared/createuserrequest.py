"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import mfaconfig as shared_mfaconfig
from ..shared import objectexpiration as shared_objectexpiration
from ..shared import userauthdata as shared_userauthdata
from ..shared import userauthmethod as shared_userauthmethod
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateUserRequest:
    r"""Request model for creating an user"""
    
    first_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstName') }})
    r"""User first name"""  
    last_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastName') }})
    r"""User last name"""  
    auth_data: Optional[shared_userauthdata.UserAuthData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authData'), 'exclude': lambda f: f is None }})
    r"""User Authentication Data"""  
    auth_methods: Optional[list[shared_userauthmethod.UserAuthMethod]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authMethods'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.13.0
    
    Authentication methods:
    
    * `sql`
    
    * `active_directory`
    
    * `radius`
    
    * `openid`
    
    use `authData` instead
    """  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Email"""  
    expiration: Optional[shared_objectexpiration.ObjectExpiration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiration'), 'exclude': lambda f: f is None }})
    r"""Expiration information"""  
    gender: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gender'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.12.0
    
    Gender
    
    Do NOT use `gender`! It will be ignored.
    """  
    is_nonmember_viewer: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isNonmemberViewer'), 'exclude': lambda f: f is None }})
    r"""&#128640; Since v4.12.0
    
    Determines whether user has the role NONMEMBER_VIEWER
    """  
    login: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('login'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.13.0
    
    User login name
    """  
    mfa_config: Optional[shared_mfaconfig.MfaConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mfaConfig'), 'exclude': lambda f: f is None }})
    r"""Multi-factor authentication configuration"""  
    needs_to_change_password: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('needsToChangePassword'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.13.0
    
    Determines whether user has to change his / her initial password.
    
    use `authDate.mustChangePassword` instead
    """  
    notify_user: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notifyUser'), 'exclude': lambda f: f is None }})
    r"""&#128640; Since v4.9.0
    
    Notify user about his new account
    
    * default: `true` for `basic` auth type
    
    * default: `false` for `active_directory`, `openid` and `radius` auth types
    """  
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.13.0
    
    An initial password may be preset
    
    use `authData` instead
    """  
    phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone'), 'exclude': lambda f: f is None }})
    r"""Phone number"""  
    receiver_language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receiverLanguage'), 'exclude': lambda f: f is None }})
    r"""IETF language tag"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.18.0
    
    Job title
    """  
    user_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userName'), 'exclude': lambda f: f is None }})
    r"""&#128640; Since v4.13.0
    
    Username
    """  
    