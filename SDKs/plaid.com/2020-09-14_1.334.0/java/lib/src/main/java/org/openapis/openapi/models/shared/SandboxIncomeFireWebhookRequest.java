/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SandboxIncomeFireWebhookRequest - SandboxIncomeFireWebhookRequest defines the request schema for `/sandbox/income/fire_webhook`
 */
public class SandboxIncomeFireWebhookRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_id")
    public String clientId;
    public SandboxIncomeFireWebhookRequest withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }
    
    /**
     * The Item ID associated with the verification.
     */
    @JsonProperty("item_id")
    public String itemId;
    public SandboxIncomeFireWebhookRequest withItemId(String itemId) {
        this.itemId = itemId;
        return this;
    }
    
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secret")
    public String secret;
    public SandboxIncomeFireWebhookRequest withSecret(String secret) {
        this.secret = secret;
        return this;
    }
    
    /**
     * The Plaid `user_id` of the User associated with this webhook, warning, or error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    public String userId;
    public SandboxIncomeFireWebhookRequest withUserId(String userId) {
        this.userId = userId;
        return this;
    }
    
    /**
     * `VERIFICATION_STATUS_PROCESSING_COMPLETE`: The income verification status processing has completed. If the user uploaded multiple documents, this webhook will fire when all documents have finished processing. Call the `/income/verification/paystubs/get` endpoint and check the document metadata to see which documents were successfully parsed.
     * 
     * `VERIFICATION_STATUS_PROCESSING_FAILED`: A failure occurred when attempting to process the verification documentation.
     * 
     * `VERIFICATION_STATUS_PENDING_APPROVAL`: (deprecated) The income verification has been sent to the user for review.
     */
    @JsonProperty("verification_status")
    public SandboxIncomeFireWebhookRequestVerificationStatusEnum verificationStatus;
    public SandboxIncomeFireWebhookRequest withVerificationStatus(SandboxIncomeFireWebhookRequestVerificationStatusEnum verificationStatus) {
        this.verificationStatus = verificationStatus;
        return this;
    }
    
    /**
     * The URL to which the webhook should be sent.
     */
    @JsonProperty("webhook")
    public String webhook;
    public SandboxIncomeFireWebhookRequest withWebhook(String webhook) {
        this.webhook = webhook;
        return this;
    }
    
}
