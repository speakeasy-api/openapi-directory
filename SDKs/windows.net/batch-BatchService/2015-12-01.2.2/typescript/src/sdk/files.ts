/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Files {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Deletes the specified task file from the compute node.
   */
  fileDeleteFromComputeNode(
    req: operations.FileDeleteFromComputeNodeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.FileDeleteFromComputeNodeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FileDeleteFromComputeNodeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/pools/{poolId}/nodes/{nodeId}/files/{fileName}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FileDeleteFromComputeNodeResponse =
        new operations.FileDeleteFromComputeNodeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchError = utils.objectToClass(
              httpRes?.data,
              shared.BatchError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes the specified task file from the compute node where the task ran.
   */
  fileDeleteFromTask(
    req: operations.FileDeleteFromTaskRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.FileDeleteFromTaskResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FileDeleteFromTaskRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/jobs/{jobId}/tasks/{taskId}/files/{fileName}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FileDeleteFromTaskResponse =
        new operations.FileDeleteFromTaskResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchError = utils.objectToClass(
              httpRes?.data,
              shared.BatchError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the content of the specified task file.
   */
  fileGetFromComputeNode(
    req: operations.FileGetFromComputeNodeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.FileGetFromComputeNodeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FileGetFromComputeNodeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/pools/{poolId}/nodes/{nodeId}/files/{fileName}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FileGetFromComputeNodeResponse =
        new operations.FileGetFromComputeNodeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.fileGetFromComputeNode200ApplicationJSONBinaryString = out;
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchError = utils.objectToClass(
              httpRes?.data,
              shared.BatchError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the content of the specified task file.
   */
  fileGetFromTask(
    req: operations.FileGetFromTaskRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.FileGetFromTaskResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FileGetFromTaskRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/jobs/{jobId}/tasks/{taskId}/files/{fileName}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FileGetFromTaskResponse =
        new operations.FileGetFromTaskResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.fileGetFromTask200ApplicationJSONBinaryString = out;
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchError = utils.objectToClass(
              httpRes?.data,
              shared.BatchError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the properties of the specified compute node file.
   */
  fileGetNodeFilePropertiesFromComputeNode(
    req: operations.FileGetNodeFilePropertiesFromComputeNodeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.FileGetNodeFilePropertiesFromComputeNodeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FileGetNodeFilePropertiesFromComputeNodeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/pools/{poolId}/nodes/{nodeId}/files/{fileName}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "head",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FileGetNodeFilePropertiesFromComputeNodeResponse =
        new operations.FileGetNodeFilePropertiesFromComputeNodeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchError = utils.objectToClass(
              httpRes?.data,
              shared.BatchError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the properties of the specified task file.
   */
  fileGetNodeFilePropertiesFromTask(
    req: operations.FileGetNodeFilePropertiesFromTaskRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.FileGetNodeFilePropertiesFromTaskResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FileGetNodeFilePropertiesFromTaskRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/jobs/{jobId}/tasks/{taskId}/files/{fileName}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "head",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FileGetNodeFilePropertiesFromTaskResponse =
        new operations.FileGetNodeFilePropertiesFromTaskResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchError = utils.objectToClass(
              httpRes?.data,
              shared.BatchError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all of the files in task directories on the specified compute node.
   */
  fileListFromComputeNode(
    req: operations.FileListFromComputeNodeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.FileListFromComputeNodeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FileListFromComputeNodeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/pools/{poolId}/nodes/{nodeId}/files",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FileListFromComputeNodeResponse =
        new operations.FileListFromComputeNodeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nodeFileListResult = utils.objectToClass(
              httpRes?.data,
              shared.NodeFileListResult
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchError = utils.objectToClass(
              httpRes?.data,
              shared.BatchError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the files in a task's directory on its compute node.
   */
  fileListFromTask(
    req: operations.FileListFromTaskRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.FileListFromTaskResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FileListFromTaskRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/jobs/{jobId}/tasks/{taskId}/files",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FileListFromTaskResponse =
        new operations.FileListFromTaskResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nodeFileListResult = utils.objectToClass(
              httpRes?.data,
              shared.NodeFileListResult
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchError = utils.objectToClass(
              httpRes?.data,
              shared.BatchError
            );
          }
          break;
      }

      return res;
    });
  }
}
