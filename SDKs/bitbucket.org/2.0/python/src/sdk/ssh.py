"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class SSH:
    r"""The SSH resource allows you to manage SSH keys."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_users_selected_user_ssh_keys_key_id_(self, request: operations.DeleteUsersSelectedUserSSHKeysKeyIDRequest, security: operations.DeleteUsersSelectedUserSSHKeysKeyIDSecurity) -> operations.DeleteUsersSelectedUserSSHKeysKeyIDResponse:
        r"""Delete a SSH key
        Deletes a specific SSH public key from a user's account
        
        Example:
        ```
        $ curl -X DELETE https://api.bitbucket.org/2.0/users/{ed08f5e1-605b-4f4a-aee4-6c97628a673e}/ssh-keys/{b15b6026-9c02-4626-b4ad-b905f99f763a}
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteUsersSelectedUserSSHKeysKeyIDRequest, base_url, '/users/{selected_user}/ssh-keys/{key_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteUsersSelectedUserSSHKeysKeyIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 403]:
            pass
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_users_selected_user_ssh_keys(self, request: operations.GetUsersSelectedUserSSHKeysRequest, security: operations.GetUsersSelectedUserSSHKeysSecurity) -> operations.GetUsersSelectedUserSSHKeysResponse:
        r"""List SSH keys
        Returns a paginated list of the user's SSH public keys.
        
        Example:
        
        ```
        $ curl https://api.bitbucket.org/2.0/users/{ed08f5e1-605b-4f4a-aee4-6c97628a673e}/ssh-keys
        {
            \"page\": 1,
            \"pagelen\": 10,
            \"size\": 1,
            \"values\": [
                {
                    \"comment\": \"user@myhost\",
                    \"created_on\": \"2018-03-14T13:17:05.196003+00:00\",
                    \"key\": \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY\",
                    \"label\": \"\",
                    \"last_used\": \"2018-03-20T13:18:05.196003+00:00\",
                    \"links\": {
                        \"self\": {
                            \"href\": \"https://api.bitbucket.org/2.0/users/{ed08f5e1-605b-4f4a-aee4-6c97628a673e}/ssh-keys/b15b6026-9c02-4626-b4ad-b905f99f763a\"
                        }
                    },
                    \"owner\": {
                        \"display_name\": \"Mark Adams\",
                        \"links\": {
                            \"avatar\": {
                                \"href\": \"https://bitbucket.org/account/markadams-atl/avatar/32/\"
                            },
                            \"html\": {
                                \"href\": \"https://bitbucket.org/markadams-atl/\"
                            },
                            \"self\": {
                                \"href\": \"https://api.bitbucket.org/2.0/users/{ed08f5e1-605b-4f4a-aee4-6c97628a673e}\"
                            }
                        },
                        \"type\": \"user\",
                        \"username\": \"markadams-atl\",
                        \"nickname\": \"markadams-atl\",
                        \"uuid\": \"{d7dd0e2d-3994-4a50-a9ee-d260b6cefdab}\"
                    },
                    \"type\": \"ssh_key\",
                    \"uuid\": \"{b15b6026-9c02-4626-b4ad-b905f99f763a}\"
                }
            ]
        }
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUsersSelectedUserSSHKeysRequest, base_url, '/users/{selected_user}/ssh-keys', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUsersSelectedUserSSHKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedSSHUserKeys])
                res.paginated_ssh_user_keys = out
        elif http_res.status_code == 403:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_users_selected_user_ssh_keys_key_id_(self, request: operations.GetUsersSelectedUserSSHKeysKeyIDRequest, security: operations.GetUsersSelectedUserSSHKeysKeyIDSecurity) -> operations.GetUsersSelectedUserSSHKeysKeyIDResponse:
        r"""Get a SSH key
        Returns a specific SSH public key belonging to a user.
        
        Example:
        ```
        $ curl https://api.bitbucket.org/2.0/users/{ed08f5e1-605b-4f4a-aee4-6c97628a673e}/ssh-keys/{fbe4bbab-f6f7-4dde-956b-5c58323c54b3}
        
        {
            \"comment\": \"user@myhost\",
            \"created_on\": \"2018-03-14T13:17:05.196003+00:00\",
            \"key\": \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY\",
            \"label\": \"\",
            \"last_used\": \"2018-03-20T13:18:05.196003+00:00\",
            \"links\": {
                \"self\": {
                    \"href\": \"https://api.bitbucket.org/2.0/users/{ed08f5e1-605b-4f4a-aee4-6c97628a673e}/ssh-keys/b15b6026-9c02-4626-b4ad-b905f99f763a\"
                }
            },
            \"owner\": {
                \"display_name\": \"Mark Adams\",
                \"links\": {
                    \"avatar\": {
                        \"href\": \"https://bitbucket.org/account/markadams-atl/avatar/32/\"
                    },
                    \"html\": {
                        \"href\": \"https://bitbucket.org/markadams-atl/\"
                    },
                    \"self\": {
                        \"href\": \"https://api.bitbucket.org/2.0/users/{ed08f5e1-605b-4f4a-aee4-6c97628a673e}\"
                    }
                },
                \"type\": \"user\",
                \"username\": \"markadams-atl\",
                \"nickname\": \"markadams-atl\",
                \"uuid\": \"{d7dd0e2d-3994-4a50-a9ee-d260b6cefdab}\"
            },
            \"type\": \"ssh_key\",
            \"uuid\": \"{b15b6026-9c02-4626-b4ad-b905f99f763a}\"
        }
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUsersSelectedUserSSHKeysKeyIDRequest, base_url, '/users/{selected_user}/ssh-keys/{key_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUsersSelectedUserSSHKeysKeyIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.ssh_account_key = out
        elif http_res.status_code == 403:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def post_users_selected_user_ssh_keys(self, request: operations.PostUsersSelectedUserSSHKeysRequest, security: operations.PostUsersSelectedUserSSHKeysSecurity) -> operations.PostUsersSelectedUserSSHKeysResponse:
        r"""Add a new SSH key
        Adds a new SSH public key to the specified user account and returns the resulting key.
        
        Example:
        ```
        $ curl -X POST -H \"Content-Type: application/json\" -d '{\"key\": \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY user@myhost\"}' https://api.bitbucket.org/2.0/users/{ed08f5e1-605b-4f4a-aee4-6c97628a673e}/ssh-keys
        
        {
            \"comment\": \"user@myhost\",
            \"created_on\": \"2018-03-14T13:17:05.196003+00:00\",
            \"key\": \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY\",
            \"label\": \"\",
            \"last_used\": \"2018-03-20T13:18:05.196003+00:00\",
            \"links\": {
                \"self\": {
                    \"href\": \"https://api.bitbucket.org/2.0/users/{ed08f5e1-605b-4f4a-aee4-6c97628a673e}/ssh-keys/b15b6026-9c02-4626-b4ad-b905f99f763a\"
                }
            },
            \"owner\": {
                \"display_name\": \"Mark Adams\",
                \"links\": {
                    \"avatar\": {
                        \"href\": \"https://bitbucket.org/account/markadams-atl/avatar/32/\"
                    },
                    \"html\": {
                        \"href\": \"https://bitbucket.org/markadams-atl/\"
                    },
                    \"self\": {
                        \"href\": \"https://api.bitbucket.org/2.0/users/{ed08f5e1-605b-4f4a-aee4-6c97628a673e}\"
                    }
                },
                \"type\": \"user\",
                \"username\": \"markadams-atl\",
                \"nickname\": \"markadams-atl\",
                \"uuid\": \"{d7dd0e2d-3994-4a50-a9ee-d260b6cefdab}\"
            },
            \"type\": \"ssh_key\",
            \"uuid\": \"{b15b6026-9c02-4626-b4ad-b905f99f763a}\"
        }
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostUsersSelectedUserSSHKeysRequest, base_url, '/users/{selected_user}/ssh-keys', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostUsersSelectedUserSSHKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.ssh_account_key = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out
        elif http_res.status_code == 403:
            pass

        return res

    def put_users_selected_user_ssh_keys_key_id_(self, request: operations.PutUsersSelectedUserSSHKeysKeyIDRequest, security: operations.PutUsersSelectedUserSSHKeysKeyIDSecurity) -> operations.PutUsersSelectedUserSSHKeysKeyIDResponse:
        r"""Update a SSH key
        Updates a specific SSH public key on a user's account
        
        Note: Only the 'comment' field can be updated using this API. To modify the key or comment values, you must delete and add the key again.
        
        Example:
        ```
        $ curl -X PUT -H \"Content-Type: application/json\" -d '{\"label\": \"Work key\"}' https://api.bitbucket.org/2.0/users/{ed08f5e1-605b-4f4a-aee4-6c97628a673e}/ssh-keys/{b15b6026-9c02-4626-b4ad-b905f99f763a}
        
        {
            \"comment\": \"\",
            \"created_on\": \"2018-03-14T13:17:05.196003+00:00\",
            \"key\": \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY\",
            \"label\": \"Work key\",
            \"last_used\": \"2018-03-20T13:18:05.196003+00:00\",
            \"links\": {
                \"self\": {
                    \"href\": \"https://api.bitbucket.org/2.0/users/{ed08f5e1-605b-4f4a-aee4-6c97628a673e}/ssh-keys/b15b6026-9c02-4626-b4ad-b905f99f763a\"
                }
            },
            \"owner\": {
                \"display_name\": \"Mark Adams\",
                \"links\": {
                    \"avatar\": {
                        \"href\": \"https://bitbucket.org/account/markadams-atl/avatar/32/\"
                    },
                    \"html\": {
                        \"href\": \"https://bitbucket.org/markadams-atl/\"
                    },
                    \"self\": {
                        \"href\": \"https://api.bitbucket.org/2.0/users/{ed08f5e1-605b-4f4a-aee4-6c97628a673e}\"
                    }
                },
                \"type\": \"user\",
                \"username\": \"markadams-atl\",
                \"nickname\": \"markadams-atl\",
                \"uuid\": \"{d7dd0e2d-3994-4a50-a9ee-d260b6cefdab}\"
            },
            \"type\": \"ssh_key\",
            \"uuid\": \"{b15b6026-9c02-4626-b4ad-b905f99f763a}\"
        }
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutUsersSelectedUserSSHKeysKeyIDRequest, base_url, '/users/{selected_user}/ssh-keys/{key_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutUsersSelectedUserSSHKeysKeyIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.ssh_account_key = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out
        elif http_res.status_code == 403:
            pass

        return res

    