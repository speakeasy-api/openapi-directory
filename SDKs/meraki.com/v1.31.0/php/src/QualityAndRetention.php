<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class QualityAndRetention 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Returns quality and retention settings for the given camera
     * 
     * Returns quality and retention settings for the given camera
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraQualityAndRetentionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraQualityAndRetentionResponse
     */
	public function getDeviceCameraQualityAndRetention(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraQualityAndRetentionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraQualityAndRetentionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/qualityAndRetention', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraQualityAndRetentionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraQualityAndRetentionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCameraQualityAndRetention200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update quality and retention settings for the given camera
     * 
     * Update quality and retention settings for the given camera
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraQualityAndRetentionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraQualityAndRetentionResponse
     */
	public function updateDeviceCameraQualityAndRetention(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraQualityAndRetentionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraQualityAndRetentionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/qualityAndRetention', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraQualityAndRetentionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraQualityAndRetentionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceCameraQualityAndRetention200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}