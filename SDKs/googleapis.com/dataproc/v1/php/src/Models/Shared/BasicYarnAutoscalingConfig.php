<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * BasicYarnAutoscalingConfig - Basic autoscaling configurations for YARN.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class BasicYarnAutoscalingConfig
{
    /**
     * Required. Timeout for YARN graceful decommissioning of Node Managers. Specifies the duration to wait for jobs to complete before forcefully removing workers (and potentially interrupting jobs). Only applicable to downscaling operations.Bounds: 0s, 1d.
     * 
     * @var ?string $gracefulDecommissionTimeout
     */
	#[\JMS\Serializer\Annotation\SerializedName('gracefulDecommissionTimeout')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $gracefulDecommissionTimeout = null;
    
    /**
     * Required. Fraction of average YARN pending memory in the last cooldown period for which to remove workers. A scale-down factor of 1 will result in scaling down so that there is no available memory remaining after the update (more aggressive scaling). A scale-down factor of 0 disables removing workers, which can be beneficial for autoscaling a single job. See How autoscaling works (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/autoscaling#how_autoscaling_works) for more information.Bounds: 0.0, 1.0.
     * 
     * @var ?float $scaleDownFactor
     */
	#[\JMS\Serializer\Annotation\SerializedName('scaleDownFactor')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $scaleDownFactor = null;
    
    /**
     * Optional. Minimum scale-down threshold as a fraction of total cluster size before scaling occurs. For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler must recommend at least a 2 worker scale-down for the cluster to scale. A threshold of 0 means the autoscaler will scale down on any recommended change.Bounds: 0.0, 1.0. Default: 0.0.
     * 
     * @var ?float $scaleDownMinWorkerFraction
     */
	#[\JMS\Serializer\Annotation\SerializedName('scaleDownMinWorkerFraction')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $scaleDownMinWorkerFraction = null;
    
    /**
     * Required. Fraction of average YARN pending memory in the last cooldown period for which to add workers. A scale-up factor of 1.0 will result in scaling up so that there is no pending memory remaining after the update (more aggressive scaling). A scale-up factor closer to 0 will result in a smaller magnitude of scaling up (less aggressive scaling). See How autoscaling works (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/autoscaling#how_autoscaling_works) for more information.Bounds: 0.0, 1.0.
     * 
     * @var ?float $scaleUpFactor
     */
	#[\JMS\Serializer\Annotation\SerializedName('scaleUpFactor')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $scaleUpFactor = null;
    
    /**
     * Optional. Minimum scale-up threshold as a fraction of total cluster size before scaling occurs. For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler must recommend at least a 2-worker scale-up for the cluster to scale. A threshold of 0 means the autoscaler will scale up on any recommended change.Bounds: 0.0, 1.0. Default: 0.0.
     * 
     * @var ?float $scaleUpMinWorkerFraction
     */
	#[\JMS\Serializer\Annotation\SerializedName('scaleUpMinWorkerFraction')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $scaleUpMinWorkerFraction = null;
    
	public function __construct()
	{
		$this->gracefulDecommissionTimeout = null;
		$this->scaleDownFactor = null;
		$this->scaleDownMinWorkerFraction = null;
		$this->scaleUpFactor = null;
		$this->scaleUpMinWorkerFraction = null;
	}
}
