"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import piientitiesdetectionmaskmode_enum as shared_piientitiesdetectionmaskmode_enum
from ..shared import piientitytype_enum as shared_piientitytype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RedactionConfig:
    r"""Provides configuration parameters for PII entity redaction."""
    
    mask_character: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaskCharacter'), 'exclude': lambda f: f is None }})  
    mask_mode: Optional[shared_piientitiesdetectionmaskmode_enum.PiiEntitiesDetectionMaskModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaskMode'), 'exclude': lambda f: f is None }})  
    pii_entity_types: Optional[list[shared_piientitytype_enum.PiiEntityTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PiiEntityTypes'), 'exclude': lambda f: f is None }})  
    