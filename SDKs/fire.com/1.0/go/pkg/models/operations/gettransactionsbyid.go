// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type GetTransactionsByIDPathParams struct {
	Ican int64 `pathParam:"style=simple,explode=false,name=ican"`
}

type GetTransactionsByIDRequest struct {
	PathParams GetTransactionsByIDPathParams
}

type GetTransactionsByIDTransactionRelatedCard struct {
	Alias              *string    `json:"alias,omitempty"`
	CardID             *float64   `json:"cardId,omitempty"`
	EmbossBusinessName *string    `json:"embossBusinessName,omitempty"`
	EmbossCardName     *string    `json:"embossCardName,omitempty"`
	ExpiryDate         *time.Time `json:"expiryDate,omitempty"`
	MaskedPan          *string    `json:"maskedPan,omitempty"`
	Provider           *string    `json:"provider,omitempty"`
}

type GetTransactionsByIDTransactionFxTrade struct {
	// amount of buyCurrency being bought
	BuyAmount *int64 `json:"buyAmount,omitempty"`
	// currency which is being bought
	BuyCurrency *string `json:"buyCurrency,omitempty"`
	// type of trade
	FixedSide *string `json:"fixedSide,omitempty"`
	// exchange rate
	Rate4d *int64 `json:"rate4d,omitempty"`
	// amount of sellCurrency being sold
	SellAmount *int64 `json:"sellAmount,omitempty"`
	// currency which is being sold
	SellCurrency *string `json:"sellCurrency,omitempty"`
}

type GetTransactionsByIDTransactionRelatedPartyRelatedPartyCardPaymentCardMerchant struct {
	AcquirerIDDe32      *string  `json:"acquirerIdDe32,omitempty"`
	AdditionalAmtDe54   *string  `json:"additionalAmtDe54,omitempty"`
	AdditionalDataDe124 *string  `json:"additionalDataDe124,omitempty"`
	AdditionalDataDe48  *string  `json:"additionalDataDe48,omitempty"`
	AuthCodeDe38        *string  `json:"authCodeDe38,omitempty"`
	AuthorisedByGps     *string  `json:"authorisedByGps,omitempty"`
	AvsResult           *string  `json:"avsResult,omitempty"`
	BillAmt             *float64 `json:"billAmt,omitempty"`
	BillCcy             *string  `json:"billCcy,omitempty"`
	ExpiryDate          *string  `json:"expiryDate,omitempty"`
	MccCode             *string  `json:"mccCode,omitempty"`
	MerchIDDe42         *string  `json:"merchIdDe42,omitempty"`
	MerchNameDe43       *string  `json:"merchNameDe43,omitempty"`
	MtID                *string  `json:"mtId,omitempty"`
	PosDataDe22         *string  `json:"posDataDe22,omitempty"`
	PosDataDe61         *string  `json:"posDataDe61,omitempty"`
	PosTermnlDe41       *string  `json:"posTermnlDe41,omitempty"`
	ProcCode            *string  `json:"procCode,omitempty"`
	RecordDataDe120     *string  `json:"recordDataDe120,omitempty"`
	RespCodeDe39        *string  `json:"respCodeDe39,omitempty"`
	RetRefNoDe37        *string  `json:"retRefNoDe37,omitempty"`
	StatusCode          *string  `json:"statusCode,omitempty"`
	Token               *string  `json:"token,omitempty"`
	TxnAmt4d            *float64 `json:"txnAmt4d,omitempty"`
	TxnCcy              *string  `json:"txnCcy,omitempty"`
	TxnCtry             *string  `json:"txnCtry,omitempty"`
	TxnDesc             *string  `json:"txnDesc,omitempty"`
	TxnStatCode         *string  `json:"txnStatCode,omitempty"`
	TxnType             *string  `json:"txnType,omitempty"`
}

type GetTransactionsByIDTransactionRelatedPartyRelatedPartyCardPaymentTypeEnum string

const (
	GetTransactionsByIDTransactionRelatedPartyRelatedPartyCardPaymentTypeEnumCardMerchant GetTransactionsByIDTransactionRelatedPartyRelatedPartyCardPaymentTypeEnum = "CARD_MERCHANT"
	GetTransactionsByIDTransactionRelatedPartyRelatedPartyCardPaymentTypeEnumCardAtm      GetTransactionsByIDTransactionRelatedPartyRelatedPartyCardPaymentTypeEnum = "CARD_ATM"
)

func (e *GetTransactionsByIDTransactionRelatedPartyRelatedPartyCardPaymentTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CARD_MERCHANT":
		fallthrough
	case "CARD_ATM":
		*e = GetTransactionsByIDTransactionRelatedPartyRelatedPartyCardPaymentTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTransactionsByIDTransactionRelatedPartyRelatedPartyCardPaymentTypeEnum: %s", s)
	}
}

type GetTransactionsByIDTransactionRelatedPartyRelatedPartyCardPayment struct {
	CardMerchant *GetTransactionsByIDTransactionRelatedPartyRelatedPartyCardPaymentCardMerchant `json:"cardMerchant,omitempty"`
	Type         *GetTransactionsByIDTransactionRelatedPartyRelatedPartyCardPaymentTypeEnum     `json:"type,omitempty"`
}

type GetTransactionsByIDTransactionRelatedPartyRelatedPartyPayeeAccount struct {
	// The account number of the Withdrawl account in reference
	AccountNumber *string `json:"accountNumber,omitempty"`
	// The Alias name of the Withdrawl account in reference
	Alias *string `json:"alias,omitempty"`
	// The BIC of the Withdrawl account in reference
	Bic *string `json:"bic,omitempty"`
	// The BIC of the Withdrawl account in reference
	Iban *string `json:"iban,omitempty"`
	// The ID number of the Withdrawl account in reference
	ID *int64 `json:"id,omitempty"`
	// (Conditional) Provide this field if using Mode 2 and the payee account is in GBP.
	Nsc *string `json:"nsc,omitempty"`
}

type GetTransactionsByIDTransactionRelatedPartyRelatedPartyPayeeTypeEnum string

const (
	GetTransactionsByIDTransactionRelatedPartyRelatedPartyPayeeTypeEnumWithdrawalAccount GetTransactionsByIDTransactionRelatedPartyRelatedPartyPayeeTypeEnum = "WITHDRAWAL_ACCOUNT"
)

func (e *GetTransactionsByIDTransactionRelatedPartyRelatedPartyPayeeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "WITHDRAWAL_ACCOUNT":
		*e = GetTransactionsByIDTransactionRelatedPartyRelatedPartyPayeeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTransactionsByIDTransactionRelatedPartyRelatedPartyPayeeTypeEnum: %s", s)
	}
}

type GetTransactionsByIDTransactionRelatedPartyRelatedPartyPayee struct {
	Account *GetTransactionsByIDTransactionRelatedPartyRelatedPartyPayeeAccount  `json:"account,omitempty"`
	Type    *GetTransactionsByIDTransactionRelatedPartyRelatedPartyPayeeTypeEnum `json:"type,omitempty"`
}

type GetTransactionsByIDTransactionRelatedPartyRelatedPartyExternalAccountAccount struct {
	AccountNumber *string `json:"accountNumber,omitempty"`
	Alias         *string `json:"alias,omitempty"`
	Bic           *string `json:"bic,omitempty"`
	Iban          *string `json:"iban,omitempty"`
	ID            *int64  `json:"id,omitempty"`
	Nsc           *string `json:"nsc,omitempty"`
}

type GetTransactionsByIDTransactionRelatedPartyRelatedPartyExternalAccountTypeEnum string

const (
	GetTransactionsByIDTransactionRelatedPartyRelatedPartyExternalAccountTypeEnumExternalAccount GetTransactionsByIDTransactionRelatedPartyRelatedPartyExternalAccountTypeEnum = "EXTERNAL_ACCOUNT"
)

func (e *GetTransactionsByIDTransactionRelatedPartyRelatedPartyExternalAccountTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXTERNAL_ACCOUNT":
		*e = GetTransactionsByIDTransactionRelatedPartyRelatedPartyExternalAccountTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTransactionsByIDTransactionRelatedPartyRelatedPartyExternalAccountTypeEnum: %s", s)
	}
}

type GetTransactionsByIDTransactionRelatedPartyRelatedPartyExternalAccount struct {
	Account *GetTransactionsByIDTransactionRelatedPartyRelatedPartyExternalAccountAccount  `json:"account,omitempty"`
	Type    *GetTransactionsByIDTransactionRelatedPartyRelatedPartyExternalAccountTypeEnum `json:"type,omitempty"`
}

type GetTransactionsByIDTransactionRelatedPartyRelatedPartyFireAccountAccount struct {
	// the Account Number of the account.
	AccountNumber *string `json:"accountNumber,omitempty"`
	// the name the user gives to the account to help them identify it.
	Alias *string `json:"alias,omitempty"`
	// the BIC of the account (provided if currency is EUR).
	Bic *string `json:"bic,omitempty"`
	// the IBAN of the account (provided if currency is EUR).
	Iban *string `json:"iban,omitempty"`
	// identifier for the fire.com account (assigned by fire.com)
	ID *int64 `json:"id,omitempty"`
	// the Sort Code of the account.
	Nsc *string `json:"nsc,omitempty"`
}

type GetTransactionsByIDTransactionRelatedPartyRelatedPartyFireAccountTypeEnum string

const (
	GetTransactionsByIDTransactionRelatedPartyRelatedPartyFireAccountTypeEnumFireAccount GetTransactionsByIDTransactionRelatedPartyRelatedPartyFireAccountTypeEnum = "FIRE_ACCOUNT"
)

func (e *GetTransactionsByIDTransactionRelatedPartyRelatedPartyFireAccountTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FIRE_ACCOUNT":
		*e = GetTransactionsByIDTransactionRelatedPartyRelatedPartyFireAccountTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTransactionsByIDTransactionRelatedPartyRelatedPartyFireAccountTypeEnum: %s", s)
	}
}

type GetTransactionsByIDTransactionRelatedPartyRelatedPartyFireAccount struct {
	Account *GetTransactionsByIDTransactionRelatedPartyRelatedPartyFireAccountAccount  `json:"account,omitempty"`
	Type    *GetTransactionsByIDTransactionRelatedPartyRelatedPartyFireAccountTypeEnum `json:"type,omitempty"`
}

type GetTransactionsByIDTransactionRelatedPartyType string

const (
	GetTransactionsByIDTransactionRelatedPartyTypeGetTransactionsByIDTransactionRelatedPartyRelatedPartyFireAccount     GetTransactionsByIDTransactionRelatedPartyType = "getTransactionsById_Transaction_RelatedParty_RelatedPartyFireAccount"
	GetTransactionsByIDTransactionRelatedPartyTypeGetTransactionsByIDTransactionRelatedPartyRelatedPartyExternalAccount GetTransactionsByIDTransactionRelatedPartyType = "getTransactionsById_Transaction_RelatedParty_RelatedPartyExternalAccount"
	GetTransactionsByIDTransactionRelatedPartyTypeGetTransactionsByIDTransactionRelatedPartyRelatedPartyPayee           GetTransactionsByIDTransactionRelatedPartyType = "getTransactionsById_Transaction_RelatedParty_RelatedPartyPayee"
	GetTransactionsByIDTransactionRelatedPartyTypeGetTransactionsByIDTransactionRelatedPartyRelatedPartyCardPayment     GetTransactionsByIDTransactionRelatedPartyType = "getTransactionsById_Transaction_RelatedParty_RelatedPartyCardPayment"
)

type GetTransactionsByIDTransactionRelatedParty struct {
	GetTransactionsByIDTransactionRelatedPartyRelatedPartyFireAccount     *GetTransactionsByIDTransactionRelatedPartyRelatedPartyFireAccount
	GetTransactionsByIDTransactionRelatedPartyRelatedPartyExternalAccount *GetTransactionsByIDTransactionRelatedPartyRelatedPartyExternalAccount
	GetTransactionsByIDTransactionRelatedPartyRelatedPartyPayee           *GetTransactionsByIDTransactionRelatedPartyRelatedPartyPayee
	GetTransactionsByIDTransactionRelatedPartyRelatedPartyCardPayment     *GetTransactionsByIDTransactionRelatedPartyRelatedPartyCardPayment

	Type GetTransactionsByIDTransactionRelatedPartyType
}

func CreateGetTransactionsByIDTransactionRelatedPartyGetTransactionsByIDTransactionRelatedPartyRelatedPartyFireAccount(getTransactionsByIDTransactionRelatedPartyRelatedPartyFireAccount GetTransactionsByIDTransactionRelatedPartyRelatedPartyFireAccount) GetTransactionsByIDTransactionRelatedParty {
	typ := GetTransactionsByIDTransactionRelatedPartyTypeGetTransactionsByIDTransactionRelatedPartyRelatedPartyFireAccount

	return GetTransactionsByIDTransactionRelatedParty{
		GetTransactionsByIDTransactionRelatedPartyRelatedPartyFireAccount: &getTransactionsByIDTransactionRelatedPartyRelatedPartyFireAccount,
		Type: typ,
	}
}

func CreateGetTransactionsByIDTransactionRelatedPartyGetTransactionsByIDTransactionRelatedPartyRelatedPartyExternalAccount(getTransactionsByIDTransactionRelatedPartyRelatedPartyExternalAccount GetTransactionsByIDTransactionRelatedPartyRelatedPartyExternalAccount) GetTransactionsByIDTransactionRelatedParty {
	typ := GetTransactionsByIDTransactionRelatedPartyTypeGetTransactionsByIDTransactionRelatedPartyRelatedPartyExternalAccount

	return GetTransactionsByIDTransactionRelatedParty{
		GetTransactionsByIDTransactionRelatedPartyRelatedPartyExternalAccount: &getTransactionsByIDTransactionRelatedPartyRelatedPartyExternalAccount,
		Type: typ,
	}
}

func CreateGetTransactionsByIDTransactionRelatedPartyGetTransactionsByIDTransactionRelatedPartyRelatedPartyPayee(getTransactionsByIDTransactionRelatedPartyRelatedPartyPayee GetTransactionsByIDTransactionRelatedPartyRelatedPartyPayee) GetTransactionsByIDTransactionRelatedParty {
	typ := GetTransactionsByIDTransactionRelatedPartyTypeGetTransactionsByIDTransactionRelatedPartyRelatedPartyPayee

	return GetTransactionsByIDTransactionRelatedParty{
		GetTransactionsByIDTransactionRelatedPartyRelatedPartyPayee: &getTransactionsByIDTransactionRelatedPartyRelatedPartyPayee,
		Type: typ,
	}
}

func CreateGetTransactionsByIDTransactionRelatedPartyGetTransactionsByIDTransactionRelatedPartyRelatedPartyCardPayment(getTransactionsByIDTransactionRelatedPartyRelatedPartyCardPayment GetTransactionsByIDTransactionRelatedPartyRelatedPartyCardPayment) GetTransactionsByIDTransactionRelatedParty {
	typ := GetTransactionsByIDTransactionRelatedPartyTypeGetTransactionsByIDTransactionRelatedPartyRelatedPartyCardPayment

	return GetTransactionsByIDTransactionRelatedParty{
		GetTransactionsByIDTransactionRelatedPartyRelatedPartyCardPayment: &getTransactionsByIDTransactionRelatedPartyRelatedPartyCardPayment,
		Type: typ,
	}
}

func (u *GetTransactionsByIDTransactionRelatedParty) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	getTransactionsByIDTransactionRelatedPartyRelatedPartyFireAccount := new(GetTransactionsByIDTransactionRelatedPartyRelatedPartyFireAccount)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getTransactionsByIDTransactionRelatedPartyRelatedPartyFireAccount); err == nil {
		u.GetTransactionsByIDTransactionRelatedPartyRelatedPartyFireAccount = getTransactionsByIDTransactionRelatedPartyRelatedPartyFireAccount
		u.Type = GetTransactionsByIDTransactionRelatedPartyTypeGetTransactionsByIDTransactionRelatedPartyRelatedPartyFireAccount
		return nil
	}

	getTransactionsByIDTransactionRelatedPartyRelatedPartyExternalAccount := new(GetTransactionsByIDTransactionRelatedPartyRelatedPartyExternalAccount)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getTransactionsByIDTransactionRelatedPartyRelatedPartyExternalAccount); err == nil {
		u.GetTransactionsByIDTransactionRelatedPartyRelatedPartyExternalAccount = getTransactionsByIDTransactionRelatedPartyRelatedPartyExternalAccount
		u.Type = GetTransactionsByIDTransactionRelatedPartyTypeGetTransactionsByIDTransactionRelatedPartyRelatedPartyExternalAccount
		return nil
	}

	getTransactionsByIDTransactionRelatedPartyRelatedPartyPayee := new(GetTransactionsByIDTransactionRelatedPartyRelatedPartyPayee)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getTransactionsByIDTransactionRelatedPartyRelatedPartyPayee); err == nil {
		u.GetTransactionsByIDTransactionRelatedPartyRelatedPartyPayee = getTransactionsByIDTransactionRelatedPartyRelatedPartyPayee
		u.Type = GetTransactionsByIDTransactionRelatedPartyTypeGetTransactionsByIDTransactionRelatedPartyRelatedPartyPayee
		return nil
	}

	getTransactionsByIDTransactionRelatedPartyRelatedPartyCardPayment := new(GetTransactionsByIDTransactionRelatedPartyRelatedPartyCardPayment)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getTransactionsByIDTransactionRelatedPartyRelatedPartyCardPayment); err == nil {
		u.GetTransactionsByIDTransactionRelatedPartyRelatedPartyCardPayment = getTransactionsByIDTransactionRelatedPartyRelatedPartyCardPayment
		u.Type = GetTransactionsByIDTransactionRelatedPartyTypeGetTransactionsByIDTransactionRelatedPartyRelatedPartyCardPayment
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetTransactionsByIDTransactionRelatedParty) MarshalJSON() ([]byte, error) {
	if u.GetTransactionsByIDTransactionRelatedPartyRelatedPartyFireAccount != nil {
		return json.Marshal(u.GetTransactionsByIDTransactionRelatedPartyRelatedPartyFireAccount)
	}

	if u.GetTransactionsByIDTransactionRelatedPartyRelatedPartyExternalAccount != nil {
		return json.Marshal(u.GetTransactionsByIDTransactionRelatedPartyRelatedPartyExternalAccount)
	}

	if u.GetTransactionsByIDTransactionRelatedPartyRelatedPartyPayee != nil {
		return json.Marshal(u.GetTransactionsByIDTransactionRelatedPartyRelatedPartyPayee)
	}

	if u.GetTransactionsByIDTransactionRelatedPartyRelatedPartyCardPayment != nil {
		return json.Marshal(u.GetTransactionsByIDTransactionRelatedPartyRelatedPartyCardPayment)
	}

	return nil, nil
}

// GetTransactionsByIDTransaction - An array of transaction objects for the account with a count (`total`).
type GetTransactionsByIDTransaction struct {
	// Net amount lodged or taken from the account after fees and charges were applied.
	AmountAfterCharges *int64 `json:"amountAfterCharges,omitempty"`
	// Amount of the transaction before the fees and taxes were applied.
	AmountBeforeCharges *int64 `json:"amountBeforeCharges,omitempty"`
	// the balance of the account (in minor currency units - pence, cent etc. 434050 == 4,340.50 GBP for a GBP account).
	Balance  *int64                                                                                                   `json:"balance,omitempty"`
	Card     *GetTransactionsByIDTransactionRelatedCard                                                               `json:"card,omitempty"`
	Currency *shared.OneaccountsGetResponses200ContentApplication1jsonSchemaPropertiesAccountsItemsPropertiesCurrency `json:"currency,omitempty"`
	// Date of the transaction
	Date             *time.Time `json:"date,omitempty"`
	DateAcknowledged *time.Time `json:"dateAcknowledged,omitempty"`
	// The amount of the fee, if any.
	FeeAmount      *int64                                 `json:"feeAmount,omitempty"`
	FxTradeDetails *GetTransactionsByIDTransactionFxTrade `json:"fxTradeDetails,omitempty"`
	// identifier for the fire.com account (assigned by fire.com) This field is only used in the condensed version.
	Ican *int64 `json:"ican,omitempty"`
	// The comment/reference on the transaction
	MyRef *string `json:"myRef,omitempty"`
	// The code that was returned when you created the payment request.
	PaymentRequestPublicCode *string `json:"paymentRequestPublicCode,omitempty"`
	// The id of the transaction.
	RefID        *int64                                      `json:"refId,omitempty"`
	RelatedParty *GetTransactionsByIDTransactionRelatedParty `json:"relatedParty,omitempty"`
	// The amount of the tax, if any (e.g. Stamp duty for ATM transactions)
	TaxAmount *int64 `json:"taxAmount,omitempty"`
	// The id of this side of the transaction (each transaction has two sides - a to and a from). This is used to get the details of the transaction.
	TxnID *int64 `json:"txnId,omitempty"`
	// Retrieve a filtered list of transactions against an account.
	// * `LODGEMENT` - Bank Transfer received
	// * `PIS_LODGEMENT` - Fire Open Payments Lodgement received
	// * `MANUAL_TRANSFER` - Manual Transfer to
	// * `WITHDRAWAL` - Bank Transfer sent
	// * `REVERSAL` - Credit Reversal
	// * `INTERNAL_TRANSFER_TO` - Internal Transfer sent (between two of my accounts of the same currency)
	// * `INTERNAL_TRANSFER_FROM` - Internal Transfer received (between two of my accounts of the same currency)
	// * `WITHDRAWAL_RETURNED` - Bank Transfer sent returned
	// * `LODGEMENT_REVERSED` - Bank Transfer received returned
	// * `FX_INTERNAL_TRANSFER_FROM` - FX Internal Transfer received (between two of my accounts of different currency)
	// * `FX_INTERNAL_TRANSFER_TO` - FX Internal Transfer sent (between two of my accounts of different currency)
	// * `CARD_POS_CONTACT_DEBIT` - Card used in store; read by magnetic stripe or pin
	// * `CARD_POS_CONTACT_CREDIT` - Card used in store; read by magnetic stripe or pin
	// * `CARD_POS_CONTACTLESS_DEBIT` - Card used in store; read by NFC
	// * `CARD_POS_CONTACTLESS_CREDIT` - Card used in store; read by NFC
	// * `CARD_ECOMMERCE_DEBIT` - Card used on the internet
	// * `CARD_ECOMMERCE_CREDIT` - Card used on the internet
	// * `CARD_ATM_DEBIT` - Card used in an ATM
	// * `CARD_ATM_CREDIT` - Card used in an ATM
	// * `CARD_INTERNATIONAL_POS_CONTACT_DEBIT` - Card used in store in non-processing currency; read by magnetic stripe or pin
	// * `CARD_INTERNATIONAL_POS_CONTACT_CREDIT` - Card used in store in non-processing currency; read by magnetic stripe or pin
	// * `CARD_INTERNATIONAL_POS_CONTACTLESS_DEBIT` - Card used in store in non-processing currency; read by NFC
	// * `CARD_INTERNATIONAL_POS_CONTACTLESS_CREDIT` - Card used in store in non-processing currency; read by NFC
	// * `CARD_INTERNATIONAL_ECOMMERCE_DEBIT	` - Card used on the internet in non-processing currency
	// * `CARD_INTERNATIONAL_ECOMMERCE_CREDIT` - Card used on the internet in non-processing currency
	// * `CARD_INTERNATIONAL_ATM_DEBIT` - Card used in an ATM in non-processing currency
	// * `CARD_INTERNATIONAL_ATM_CREDIT` - Card used in an ATM in non-processing currency
	// * `CARD_POS_CONTACT_DEBIT_REVERSAL` - Card used in store; read by magnetic stripe or pin - reversed
	// * `CARD_POS_CONTACT_CREDIT_REVERSAL` - Card used in store; read by magnetic stripe or pin - reversed
	// * `CARD_POS_CONTACTLESS_DEBIT_REVERSAL` - Card used in store; read by NFC - reversed
	// * `CARD_POS_CONTACTLESS_CREDIT_REVERSAL` - Card used in store; read by NFC - reversed
	// * `CARD_ECOMMERCE_DEBIT_REVERSAL	` - Card used on the internet - reversed
	// * `CARD_ECOMMERCE_CREDIT_REVERSAL` - Card used on the internet - reversed
	// * `CARD_ATM_DEBIT_REVERSAL` - Card used in an ATM - reversed
	// * `CARD_ATM_CREDIT_REVERSAL` - Card used in an ATM - reversed
	// * `CARD_INTERNATIONAL_POS_CONTACT_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by magnetic stripe or pin - reversed
	// * `CARD_INTERNATIONAL_POS_CONTACT_CREDIT_REVERSAL` - Card used in store in non-processing currency; read by magnetic stripe or pin - reversed
	// * `CARD_INTERNATIONAL_POS_CONTACTLESS_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed
	// * `CARD_INTERNATIONAL_POS_CONTACTLESS_CREDIT_REVERSAL` - One or more of the transaction types above. This field can be repeated multiple times to allow for multiple transaction types.
	// * `CARD_INTERNATIONAL_ECOMMERCE_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed
	// * `CARD_INTERNATIONAL_ECOMMERCE_CREDIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed
	// * `CARD_INTERNATIONAL_ATM_DEBIT_REVERSAL` - Card used on the internet in non-processing currency - reversed
	// * `CARD_INTERNATIONAL_ATM_CREDIT_REVERSAL` - Card used on the internet in non-processing currency - reversed
	//
	Type *string `json:"type,omitempty"`
}

type GetTransactionsByIDResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// An array of transaction objects for the account with a count (`total`).
	Transaction *GetTransactionsByIDTransaction
}
