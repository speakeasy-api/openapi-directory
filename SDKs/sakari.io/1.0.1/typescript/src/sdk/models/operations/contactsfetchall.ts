/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class ContactsFetchAllSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  sakariAuth: string;
}

export class ContactsFetchAllRequest extends SpeakeasyBase {
  /**
   * Account to apply operations to
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=accountId",
  })
  accountId: string;

  /**
   * Filter by email or part of
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=email" })
  email?: string;

  /**
   * Filter by first name or part of
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=firstName",
  })
  firstName?: string;

  /**
   * Filter by last name or part of
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=lastName",
  })
  lastName?: string;

  /**
   * Maximum number of results to return
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  /**
   * Filter by mobile or part of
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=mobile",
  })
  mobile?: string;

  /**
   * Results to skip when paginating through a result set
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=offset",
  })
  offset?: number;

  /**
   * Filter by tag(s)
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=tags" })
  tags?: string;
}

export class ContactsFetchAllResponse extends SpeakeasyBase {
  /**
   * successful operation
   */
  @SpeakeasyMetadata()
  contactsResponse?: shared.ContactsResponse;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * invalid request
   */
  @SpeakeasyMetadata()
  errorResponse?: shared.ErrorResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
