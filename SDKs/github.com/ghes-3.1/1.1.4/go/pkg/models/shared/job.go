// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// JobStatusEnum - The phase of the lifecycle that the job is currently in.
type JobStatusEnum string

const (
	JobStatusEnumQueued     JobStatusEnum = "queued"
	JobStatusEnumInProgress JobStatusEnum = "in_progress"
	JobStatusEnumCompleted  JobStatusEnum = "completed"
)

func (e *JobStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "queued":
		fallthrough
	case "in_progress":
		fallthrough
	case "completed":
		*e = JobStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for JobStatusEnum: %s", s)
	}
}

// JobStepsStatusEnum - The phase of the lifecycle that the job is currently in.
type JobStepsStatusEnum string

const (
	JobStepsStatusEnumQueued     JobStepsStatusEnum = "queued"
	JobStepsStatusEnumInProgress JobStepsStatusEnum = "in_progress"
	JobStepsStatusEnumCompleted  JobStepsStatusEnum = "completed"
)

func (e *JobStepsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "queued":
		fallthrough
	case "in_progress":
		fallthrough
	case "completed":
		*e = JobStepsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for JobStepsStatusEnum: %s", s)
	}
}

type JobSteps struct {
	// The time that the job finished, in ISO 8601 format.
	CompletedAt *time.Time `json:"completed_at,omitempty"`
	// The outcome of the job.
	Conclusion string `json:"conclusion"`
	// The name of the job.
	Name   string `json:"name"`
	Number int64  `json:"number"`
	// The time that the step started, in ISO 8601 format.
	StartedAt *time.Time `json:"started_at,omitempty"`
	// The phase of the lifecycle that the job is currently in.
	Status JobStepsStatusEnum `json:"status"`
}

// Job - Information of a job execution in a workflow run
type Job struct {
	CheckRunURL string `json:"check_run_url"`
	// The time that the job finished, in ISO 8601 format.
	CompletedAt time.Time `json:"completed_at"`
	// The outcome of the job.
	Conclusion string `json:"conclusion"`
	// The SHA of the commit that is being run.
	HeadSha string `json:"head_sha"`
	HTMLURL string `json:"html_url"`
	// The id of the job.
	ID int64 `json:"id"`
	// The name of the job.
	Name   string `json:"name"`
	NodeID string `json:"node_id"`
	// The id of the associated workflow run.
	RunID  int64  `json:"run_id"`
	RunURL string `json:"run_url"`
	// The time that the job started, in ISO 8601 format.
	StartedAt time.Time `json:"started_at"`
	// The phase of the lifecycle that the job is currently in.
	Status JobStatusEnum `json:"status"`
	// Steps in this job.
	Steps []JobSteps `json:"steps,omitempty"`
	URL   string     `json:"url"`
}
