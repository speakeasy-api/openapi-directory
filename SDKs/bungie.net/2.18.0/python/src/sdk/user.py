"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class User:
    r"""user"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def user_get_available_themes(self) -> operations.UserGetAvailableThemesResponse:
        r"""Returns a list of all available user themes."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/User/GetAvailableThemes/'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UserGetAvailableThemesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def user_get_bungie_net_user_by_id(self, request: operations.UserGetBungieNetUserByIDRequest) -> operations.UserGetBungieNetUserByIDResponse:
        r"""Loads a bungienet user by membership id."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UserGetBungieNetUserByIDRequest, base_url, '/User/GetBungieNetUserById/{id}/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UserGetBungieNetUserByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def user_get_credential_types_for_target_account(self, request: operations.UserGetCredentialTypesForTargetAccountRequest) -> operations.UserGetCredentialTypesForTargetAccountResponse:
        r"""Returns a list of credential types attached to the requested account"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UserGetCredentialTypesForTargetAccountRequest, base_url, '/User/GetCredentialTypesForTargetAccount/{membershipId}/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UserGetCredentialTypesForTargetAccountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def user_get_membership_data_by_id(self, request: operations.UserGetMembershipDataByIDRequest) -> operations.UserGetMembershipDataByIDResponse:
        r"""Returns a list of accounts associated with the supplied membership ID and membership type. This will include all linked accounts (even when hidden) if supplied credentials permit it."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UserGetMembershipDataByIDRequest, base_url, '/User/GetMembershipsById/{membershipId}/{membershipType}/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UserGetMembershipDataByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def user_get_membership_data_for_current_user(self) -> operations.UserGetMembershipDataForCurrentUserResponse:
        r"""Returns a list of accounts associated with signed in user. This is useful for OAuth implementations that do not give you access to the token response."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/User/GetMembershipsForCurrentUser/'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UserGetMembershipDataForCurrentUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def user_get_membership_from_hard_linked_credential(self, request: operations.UserGetMembershipFromHardLinkedCredentialRequest) -> operations.UserGetMembershipFromHardLinkedCredentialResponse:
        r"""Gets any hard linked membership given a credential. Only works for credentials that are public (just SteamID64 right now). Cross Save aware."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UserGetMembershipFromHardLinkedCredentialRequest, base_url, '/User/GetMembershipFromHardLinkedCredential/{crType}/{credential}/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UserGetMembershipFromHardLinkedCredentialResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def user_get_sanitized_platform_display_names(self, request: operations.UserGetSanitizedPlatformDisplayNamesRequest) -> operations.UserGetSanitizedPlatformDisplayNamesResponse:
        r"""Gets a list of all display names linked to this membership id but sanitized (profanity filtered). Obeys all visibility rules of calling user and is heavily cached."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UserGetSanitizedPlatformDisplayNamesRequest, base_url, '/User/GetSanitizedPlatformDisplayNames/{membershipId}/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UserGetSanitizedPlatformDisplayNamesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def user_search_by_global_name_post(self, request: operations.UserSearchByGlobalNamePostRequest) -> operations.UserSearchByGlobalNamePostResponse:
        r"""Given the prefix of a global display name, returns all users who share that name."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UserSearchByGlobalNamePostRequest, base_url, '/User/Search/GlobalName/{page}/', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UserSearchByGlobalNamePostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def user_search_by_global_name_prefix(self, request: operations.UserSearchByGlobalNamePrefixRequest) -> operations.UserSearchByGlobalNamePrefixResponse:
        r"""[OBSOLETE] Do not use this to search users, use SearchByGlobalNamePost instead."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UserSearchByGlobalNamePrefixRequest, base_url, '/User/Search/Prefix/{displayNamePrefix}/{page}/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UserSearchByGlobalNamePrefixResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    