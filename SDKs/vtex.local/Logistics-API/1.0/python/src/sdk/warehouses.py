"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Warehouses:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def activate_warehouse(self, request: operations.ActivateWarehouseRequest) -> operations.ActivateWarehouseResponse:
        r"""Activate warehouse
        Activates a given warehouse, by warehouse ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActivateWarehouseRequest, base_url, '/api/logistics/pvt/configuration/warehouses/{warehouseId}/activation', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActivateWarehouseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def all_warehouses(self, request: operations.AllWarehousesRequest) -> operations.AllWarehousesResponse:
        r"""List all warehouses
        Lists information about all warehouses set up in your store.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/logistics/pvt/configuration/warehouses'
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AllWarehousesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.AllWarehouses200ApplicationJSON]])
                res.all_warehouses_200_application_json_objects = out

        return res

    def create_update_warehouse(self, request: operations.CreateUpdateWarehouseRequest) -> operations.CreateUpdateWarehouseResponse:
        r"""Create/update warehouse
        Creates or updates your store's warehouses
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/logistics/pvt/configuration/warehouses'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateUpdateWarehouseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def deactivate_warehouse(self, request: operations.DeactivateWarehouseRequest) -> operations.DeactivateWarehouseResponse:
        r"""Deactivate warehouse
        Deactivates a given warehouse by warehouse ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeactivateWarehouseRequest, base_url, '/api/logistics/pvt/configuration/warehouses/{warehouseId}/deactivation', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeactivateWarehouseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def remove_warehouse(self, request: operations.RemoveWarehouseRequest) -> operations.RemoveWarehouseResponse:
        r"""Remove warehouse
        Deletes given warehouse by warehouse ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveWarehouseRequest, base_url, '/api/logistics/pvt/configuration/warehouses/{warehouseId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveWarehouseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def warehouse_by_id(self, request: operations.WarehouseByIDRequest) -> operations.WarehouseByIDResponse:
        r"""List warehouse by ID
        Lists the information of a given warehouse, searching by warehouse ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.WarehouseByIDRequest, base_url, '/api/logistics/pvt/configuration/warehouses/{warehouseId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WarehouseByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.WarehouseByID200ApplicationJSON])
                res.warehouse_by_id_200_application_json_object = out

        return res

    