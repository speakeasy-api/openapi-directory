/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 * The SNS platform type (e.g. GCM, SDM, APNS, APNS_SANDBOX).
 */
export enum RegisterDeviceRequestBodyPlatformEnum {
  Apns = "APNS",
  ApnsSandbox = "APNS_SANDBOX",
  Gcm = "GCM",
  Adm = "ADM",
}

export class RegisterDeviceRequestBody extends SpeakeasyBase {
  /**
   * The SNS platform type (e.g. GCM, SDM, APNS, APNS_SANDBOX).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Platform" })
  platform: RegisterDeviceRequestBodyPlatformEnum;

  /**
   * The push token.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Token" })
  token: string;
}

export class RegisterDeviceRequest extends SpeakeasyBase {
  /**
   * The unique ID for this identity.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=IdentityId",
  })
  identityId: string;

  /**
   * A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. Here, the ID of the pool that the identity belongs to.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=IdentityPoolId",
  })
  identityPoolId: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: RegisterDeviceRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class RegisterDeviceResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalErrorException
   */
  @SpeakeasyMetadata()
  internalErrorException?: any;

  /**
   * InvalidConfigurationException
   */
  @SpeakeasyMetadata()
  invalidConfigurationException?: any;

  /**
   * InvalidParameterException
   */
  @SpeakeasyMetadata()
  invalidParameterException?: any;

  /**
   * NotAuthorizedException
   */
  @SpeakeasyMetadata()
  notAuthorizedException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  registerDeviceResponse?: shared.RegisterDeviceResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: any;
}
