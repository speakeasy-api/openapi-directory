"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import challengev3 as shared_challengev3
from ..shared import companyv3 as shared_companyv3
from ..shared import individualv3 as shared_individualv3
from ..shared import payeeaddressv3 as shared_payeeaddressv3
from ..shared import payeetypeenum_enum as shared_payeetypeenum_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdatePayeeDetailsRequestV3Input:
    r"""Request to update payee details"""
    
    address: Optional[shared_payeeaddressv3.PayeeAddressV3] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})  
    challenge: Optional[shared_challengev3.ChallengeV3] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('challenge'), 'exclude': lambda f: f is None }})  
    company: Optional[shared_companyv3.CompanyV3] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('company'), 'exclude': lambda f: f is None }})  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})  
    individual: Optional[shared_individualv3.IndividualV3Input] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individual'), 'exclude': lambda f: f is None }})  
    language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language'), 'exclude': lambda f: f is None }})
    r"""An IETF BCP 47 language code which has been configured for use within this Velo environment.<BR>
    See the /v1/supportedLanguages endpoint to list the available codes for an environment.
    """  
    payee_type: Optional[shared_payeetypeenum_enum.PayeeTypeEnumEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payeeType'), 'exclude': lambda f: f is None }})
    r"""The type of the payee"""  
    