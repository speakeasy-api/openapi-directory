/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * IdProviderAuthDomainSummary - Returns a summary of the newly created IdP authentication domain.
 */
public class IdProviderAuthDomainSummary {
    /**
     * Entity ID of the Id Provider (IdP).
     */
    @JsonProperty("entityId")
    public String entityId;

    public IdProviderAuthDomainSummary withEntityId(String entityId) {
        this.entityId = entityId;
        return this;
    }
    
    /**
     * ID of this authentication domain.
     */
    @JsonProperty("id")
    public String id;

    public IdProviderAuthDomainSummary withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Domain name.
     */
    @JsonProperty("name")
    public String name;

    public IdProviderAuthDomainSummary withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * ID of the organization that added the authentication domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organizationId")
    public String organizationId;

    public IdProviderAuthDomainSummary withOrganizationId(String organizationId) {
        this.organizationId = organizationId;
        return this;
    }
    
    /**
     * The Identity Provider (IdP) X509 certificate, stored using the PEM format, used to sign the SAML assertion.
     */
    @JsonProperty("signCert")
    public String signCert;

    public IdProviderAuthDomainSummary withSignCert(String signCert) {
        this.signCert = signCert;
        return this;
    }
    
    /**
     * The expiry date of the Identity Provider (IdP) X509 certificate. The date is a string with the ISO-8601 format like 2017-01-23T20:12:45.000Z with milliseconds precision.
     */
    @JsonProperty("signCertExpiryDate")
    public String signCertExpiryDate;

    public IdProviderAuthDomainSummary withSignCertExpiryDate(String signCertExpiryDate) {
        this.signCertExpiryDate = signCertExpiryDate;
        return this;
    }
    
    /**
     * The clock skewness tolerance, in seconds, between the Identity Provider (IdP) and the Rubrik cluster.
     */
    @JsonProperty("skewnessInSec")
    public Long skewnessInSec;

    public IdProviderAuthDomainSummary withSkewnessInSec(Long skewnessInSec) {
        this.skewnessInSec = skewnessInSec;
        return this;
    }
    
    /**
     * The Identity Provider (IdP) endpoint that Rubrik sends authentication request to in order to initiate SSO login.
     */
    @JsonProperty("ssoUrl")
    public String ssoUrl;

    public IdProviderAuthDomainSummary withSsoUrl(String ssoUrl) {
        this.ssoUrl = ssoUrl;
        return this;
    }
    
    public IdProviderAuthDomainSummary(@JsonProperty("entityId") String entityId, @JsonProperty("id") String id, @JsonProperty("name") String name, @JsonProperty("signCert") String signCert, @JsonProperty("signCertExpiryDate") String signCertExpiryDate, @JsonProperty("skewnessInSec") Long skewnessInSec, @JsonProperty("ssoUrl") String ssoUrl) {
        this.entityId = entityId;
        this.id = id;
        this.name = name;
        this.signCert = signCert;
        this.signCertExpiryDate = signCertExpiryDate;
        this.skewnessInSec = skewnessInSec;
        this.ssoUrl = ssoUrl;
  }
}
