"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class UnitOfMeasure:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def object_delete_unit_of_measure(self, request: operations.ObjectDELETEUnitOfMeasureRequest) -> operations.ObjectDELETEUnitOfMeasureResponse:
        r"""CRUD: Delete a unit of measure"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ObjectDELETEUnitOfMeasureRequest, base_url, '/v1/object/unit-of-measure/{id}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ObjectDELETEUnitOfMeasureResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyDeleteResponse])
                res.proxy_delete_response = out
        elif http_res.status_code == 401:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyUnauthorizedResponse])
                res.proxy_unauthorized_response = out

        return res

    def object_get_unit_of_measure(self, request: operations.ObjectGETUnitOfMeasureRequest) -> operations.ObjectGETUnitOfMeasureResponse:
        r"""CRUD: Retrieve a unit of measure"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ObjectGETUnitOfMeasureRequest, base_url, '/v1/object/unit-of-measure/{id}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ObjectGETUnitOfMeasureRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ObjectGETUnitOfMeasureResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyGetUnitOfMeasure])
                res.proxy_get_unit_of_measure = out
        elif http_res.status_code == 401:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyUnauthorizedResponse])
                res.proxy_unauthorized_response = out
        elif http_res.status_code == 404:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyNoDataResponse])
                res.proxy_no_data_response = out

        return res

    def object_post_unit_of_measure(self, request: operations.ObjectPOSTUnitOfMeasureRequest) -> operations.ObjectPOSTUnitOfMeasureResponse:
        r"""CRUD: Create a unit of measure"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/object/unit-of-measure'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "proxy_create_unit_of_measure", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ObjectPOSTUnitOfMeasureRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ObjectPOSTUnitOfMeasureResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyCreateOrModifyResponse])
                res.proxy_create_or_modify_response = out
        elif http_res.status_code == 400:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyBadRequestResponse])
                res.proxy_bad_request_response = out
        elif http_res.status_code == 401:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyUnauthorizedResponse])
                res.proxy_unauthorized_response = out

        return res

    def object_put_unit_of_measure(self, request: operations.ObjectPUTUnitOfMeasureRequest) -> operations.ObjectPUTUnitOfMeasureResponse:
        r"""CRUD: Update a unit of measure"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ObjectPUTUnitOfMeasureRequest, base_url, '/v1/object/unit-of-measure/{id}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "proxy_modify_unit_of_measure", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ObjectPUTUnitOfMeasureRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ObjectPUTUnitOfMeasureResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyCreateOrModifyResponse])
                res.proxy_create_or_modify_response = out
        elif http_res.status_code == 401:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyUnauthorizedResponse])
                res.proxy_unauthorized_response = out

        return res

    