/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { POSTAccountTypeBillToContact } from "./postaccounttypebilltocontact";
import { POSTAccountTypeCreditCard } from "./postaccounttypecreditcard";
import { POSTAccountTypePaymentMethod } from "./postaccounttypepaymentmethod";
import { POSTAccountTypeSoldToContact } from "./postaccounttypesoldtocontact";
import { POSTAccountTypeSubscription } from "./postaccounttypesubscription";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Value of the Customer Type field for the corresponding customer account in NetSuite. The Customer Type field is used when the customer account is created in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
 *
 * @remarks
 *
 */
export enum POSTAccountTypeCustomerTypeNSEnum {
  Company = "Company",
  Individual = "Individual",
}

/**
 * Specifies whether the account should be synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
 *
 * @remarks
 *
 */
export enum POSTAccountTypeSynctoNetSuiteNSEnum {
  Yes = "Yes",
  No = "No",
}

/**
 * Creates an invoice for a subscription. If you have the Invoice Settlement feature enabled, a credit memo might also be created based on the [invoice and credit memo generation rule.](https://knowledgecenter.zuora.com/CB_Billing/Invoice_Settlement/Credit_and_Debit_Memos/Rules_for_Generating_Invoices_and_Credit_Memos).
 *
 * @remarks
 *
 *
 * The billing documents generated
 * in this operation is only for this subscription, not for the entire
 * customer account.
 *
 *
 * Possible values:
 *
 * - `true`: An invoice is created. If you have the Invoice Settlement feature enabled, a credit memo might also be created.
 *
 *
 * - `false`: No invoice is created.
 *
 *
 * **Note:** This field is in Zuora REST API version control. Supported
 * minor versions are `211.0` or later. To use this field in the method,
 * you must set the `zuora-version` parameter to the minor version number
 * in the request header.
 *
 */
export enum POSTAccountTypeRunBillingEnum {
  True = "true",
  False = "false",
}

/**
 * Container for tax exempt information, used to establish the tax exempt status of a customer account.
 *
 * @remarks
 *
 */
export class POSTAccountTypeTaxInfo extends SpeakeasyBase {
  /**
   * EU Value Added Tax ID.
   *
   * @remarks
   *
   * **Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com).
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "VATId" })
  vatId?: string;

  /**
   * Unique code that identifies a company account in Avalara. Use this field to calculate taxes based on origin and sold-to addresses in Avalara.
   *
   * @remarks
   *
   * **Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com).
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "companyCode" })
  companyCode?: string;

  /**
   * ID of the customer tax exemption certificate. Requires Zuora Tax.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exemptCertificateId" })
  exemptCertificateId?: string;

  /**
   * Type of tax exemption certificate that the customer holds. Requires Zuora Tax.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exemptCertificateType" })
  exemptCertificateType?: string;

  /**
   * Description of the tax exemption certificate that the customer holds. Requires Zuora Tax.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exemptDescription" })
  exemptDescription?: string;

  /**
   * Date when the customer tax exemption starts. Requires Zuora Tax.
   *
   * @remarks
   *
   * Format: `yyyy-mm-dd`. Defaults to the current date.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exemptEffectiveDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  exemptEffectiveDate?: Date;

  /**
   * A unique entity use code to apply exemptions in Avalara AvaTax.
   *
   * @remarks
   *
   * This account-level field is required only when you choose Avalara as your tax engine. See [Exempt Transactions](https://developer.avalara.com/avatax/handling-tax-exempt-customers/)for more details.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exemptEntityUseCode" })
  exemptEntityUseCode?: string;

  /**
   * Date when the customer tax exemption expires. Requires Zuora Tax.
   *
   * @remarks
   *
   * Format: `yyyy-mm-dd`. Defaults to the current date.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exemptExpirationDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  exemptExpirationDate?: Date;

  /**
   * Jurisdiction in which the customer tax exemption certificate was issued.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exemptIssuingJurisdiction" })
  exemptIssuingJurisdiction?: string;

  /**
   * Status of the account tax exemption. Requires Zuora Tax.
   *
   * @remarks
   *
   * Required if you use Zuora Tax. This field is unavailable if Zuora Tax is not used.
   *
   * Values: `Yes`, `No`, `pendingVerification`.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exemptStatus" })
  exemptStatus?: string;
}

/**
 * Container for custom fields of an Account object.
 *
 * @remarks
 *
 */
export class POSTAccountType extends SpeakeasyBase {
  /**
   * Value of the Class field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Class__NS" })
  classNS?: string;

  /**
   * Value of the Customer Type field for the corresponding customer account in NetSuite. The Customer Type field is used when the customer account is created in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CustomerType__NS" })
  customerTypeNS?: POSTAccountTypeCustomerTypeNSEnum;

  /**
   * Value of the Department field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Department__NS" })
  departmentNS?: string;

  /**
   * ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "IntegrationId__NS" })
  integrationIdNS?: string;

  /**
   * Status of the account's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "IntegrationStatus__NS" })
  integrationStatusNS?: string;

  /**
   * Value of the Location field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Location__NS" })
  locationNS?: string;

  /**
   * Value of the Subsidiary field for the corresponding customer account in NetSuite. The Subsidiary field is required if you use NetSuite OneWorld. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Subsidiary__NS" })
  subsidiaryNS?: string;

  /**
   * Date when the account was sychronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SyncDate__NS" })
  syncDateNS?: string;

  /**
   * Specifies whether the account should be synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SynctoNetSuite__NS" })
  synctoNetSuiteNS?: POSTAccountTypeSynctoNetSuiteNSEnum;

  /**
   * A unique account number, up to 50 characters that do not begin with the default account number prefix.  If no account number is specified, one is generated.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountNumber" })
  accountNumber?: string;

  /**
   * A list of additional email addresses to receive emailed invoices. Use a comma to separate each email address.
   *
   * @remarks
   *
   * **Note:** Invoices are emailed to the email addresses specified in this field only when the `invoiceDeliveryPrefsEmail` field is `true`.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "additionalEmailAddresses" })
  additionalEmailAddresses?: string[];

  /**
   * The priority order to apply credit memos and/or unapplied payments to an invoice. Possible item values are: `CreditMemo`, `UnappliedPayment`.
   *
   * @remarks
   *
   * **Note:**
   *   - This field is valid only if the `applyCredit` field is set to `true`.
   *   - If no value is specified for this field, the default priority order is used, ["CreditMemo", "UnappliedPayment"], to apply credit memos first and then apply unapplied payments.
   *   - If only one item is specified, only the items of the spedified type are applied to invoices. For example, if the value is `["CreditMemo"]`, only credit memos are used to apply to invoices.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "applicationOrder" })
  applicationOrder?: string[];

  /**
   * Whether to automatically apply credit memos or unapplied payments, or both to an invoice.
   *
   * @remarks
   *
   * If the value is `true`, the credit memo or unapplied payment, or both will be automatically applied to the invoice. If no value is specified or the value is `false`, no action is taken.
   *
   * **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "applyCredit" })
  applyCredit?: boolean;

  /**
   * Applies a credit balance to an invoice.
   *
   * @remarks
   *
   * If the value is `true`, the credit balance is applied to the invoice. If the value is `false`, no action is taken.
   *
   * Prerequisite: `invoice` must be `true`.
   *
   * To view the credit balance adjustment, retrieve the details of the invoice using the Get Invoices method.
   *
   *
   * **Note:**
   *   - If you are using the field `invoiceCollect` rather than the field `invoice`, the `invoiceCollect` value must be `true`.
   *   - This field is deprecated if you have the Invoice Settlement feature enabled.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "applyCreditBalance" })
  applyCreditBalance?: boolean;

  /**
   * Whether future payments are to be automatically billed when they are due.
   *
   * @remarks
   *
   * - If this field is set to `true`, you must specify either the `creditCard` field or the `hpmCreditCardPaymentMethodId` field, but not both.
   * - If this field is set to `false`, you can specify neither the `creditCard` field nor the `hpmCreditCardPaymentMethodId` field.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "autoPay" })
  autoPay?: boolean;

  /**
   * The alias name given to a batch. A string of 50 characters or less.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "batch" })
  batch?: string;

  /**
   * The account's bill cycle day (BCD), when bill runs generate invoices for the account.  Specify any day of the month (1-31, where 31 = end-of-month), or 0 for auto-set.
   *
   * @remarks
   *
   * Required if no subscription will be created.
   *
   * Optional if a subscription is created and defaults to the day-of-the-month of the subscription's `contractEffectiveDate`.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "billCycleDay" })
  billCycleDay?: number;

  /**
   * Container for bill-to contact information for this account. If you do not provide a sold-to contact, the bill-to contact is copied to sold-to contact. Once the sold-to contact is created, changes to billToContact will not affect soldToContact and vice versa.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "billToContact" })
  @Type(() => POSTAccountTypeBillToContact)
  billToContact: POSTAccountTypeBillToContact;

  /**
   * Collects an automatic payment for a subscription. The collection generated in this operation is only for this subscription, not for the entire customer account.
   *
   * @remarks
   *
   * If the value is `true`, the automatic payment is collected. If the value is `false`, no action is taken.
   *
   * Prerequisite: The `invoice` or `runBilling` field must be `true`.
   *
   * **Note**: This field is only available if you set the `zuora-version` request header to `196.0` or later.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "collect" })
  collect?: boolean;

  /**
   * The ID of a communication profile.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "communicationProfileId" })
  communicationProfileId?: string;

  /**
   * **Note:** This field has been deprecated, and is currently available only for backward compatibility. Use the `paymentMethod` field instead to create a payment method associated with this account.
   *
   * @remarks
   *
   * Container for information on a credit card to associate with this account.
   *   If the `autoPay` field is set to `true`, you must provide either this field or the `hpmCreditCardPaymentMethodId` field, but not both.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creditCard" })
  @Type(() => POSTAccountTypeCreditCard)
  creditCard?: POSTAccountTypeCreditCard;

  /**
   * **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
   *
   * @remarks
   *
   * The unique ID of the credit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08a6246fdf101626b1b3fe0144b.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creditMemoTemplateId" })
  creditMemoTemplateId?: string;

  /**
   * CRM account ID for the account, up to 100 characters.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "crmId" })
  crmId?: string;

  /**
   * A currency as defined in Billing Settings in the Zuora UI.
   *
   * @remarks
   *
   * For payment method authorization, if the `paymentMethod` > `currencyCode` field is specified, `currencyCode` is used. Otherwise, this `currency` field is used for payment method authorization. If no currency is specified for the account, the default currency of the account is then used.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: string;

  /**
   * **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
   *
   * @remarks
   *
   * The unique ID of the debit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08d62470a8501626b19d24f19e2.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "debitMemoTemplateId" })
  debitMemoTemplateId?: string;

  /**
   * The date of the billing document, in `yyyy-mm-dd` format. It represents the invoice date for invoices, credit memo date for credit memos, and debit memo date for debit memos.
   *
   * @remarks
   *
   * - If this field is specified, the specified date is used as the billing document date.
   * - If this field is not specified, the date specified in the `targetDate` is used as the billing document date.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "documentDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  documentDate?: Date;

  /**
   * The ID of the payment method associated with this account. The payment method specified for this field will be set as the default payment method of the account.
   *
   * @remarks
   *
   * If the `autoPay` field is set to `true`, you must provide the credit card payment method ID for either this field or the `creditCard` field, but not both.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hpmCreditCardPaymentMethodId" })
  hpmCreditCardPaymentMethodId?: string;

  /**
   * **Note:** This field has been replaced by the `runBilling` field. The
   *
   * @remarks
   * `invoice` field is only available for backward compatibility.
   *
   * Creates an invoice for a subscription. The invoice generated in this
   * operation is only for this subscription, not for the entire customer
   * account.
   *
   * If the value is `true`, an invoice is created. If the value is
   * `false`, no action is taken.
   *
   * **Note**: This field is only available if you set the `zuora-version` request header to `196.0` or `207.0`.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "invoice" })
  invoice?: boolean;

  /**
   *
   * @remarks
   * **Note:** This field has been replaced by the `invoice` field
   * and the `collect` field. `invoiceCollect` is available only for backward
   * compatibility.
   *
   *
   * If this field is set to `true`, and a subscription is created, an invoice is generated at account creation time and payment is immediately collected using the account's default payment method.
   *
   *
   * **Note**: This field is only available if you set the `zuora-version` request header to `186.0`, `187.0`, `188.0`, or `189.0`.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "invoiceCollect" })
  invoiceCollect?: boolean;

  /**
   * Whether the customer wants to receive invoices through email.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "invoiceDeliveryPrefsEmail" })
  invoiceDeliveryPrefsEmail?: boolean;

  /**
   * Whether the customer wants to receive printed invoices, such as through postal mail.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "invoiceDeliveryPrefsPrint" })
  invoiceDeliveryPrefsPrint?: boolean;

  /**
   * **Note:** This field has been replaced by the `targetDate` field. The
   *
   * @remarks
   * `invoiceTargetDate` field is only available for backward
   * compatibility.
   *
   *
   * Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.
   *
   *
   * This field is in REST API minor version control. To use this field in
   * the method, you can set the `zuora-version` parameter to the minor
   * version number in the request header. Supported minor versions are
   * `207.0` and earlier.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "invoiceTargetDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  invoiceTargetDate?: Date;

  /**
   * Invoice template ID, configured in Billing Settings in the Zuora UI.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "invoiceTemplateId" })
  invoiceTemplateId?: string;

  /**
   * Account name, up to 255 characters.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * A string of up to 65,535 characters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notes" })
  notes?: string;

  /**
   * Identifier of the parent customer account for this Account object. The length is 32 characters. Use this field if you have customer hierarchy enabled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parentId" })
  parentId?: string;

  /**
   * The name of the payment gateway instance. If null or left unassigned, the Account will use the Default Gateway.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paymentGateway" })
  paymentGateway?: string;

  /**
   * Container for information on payment methods to associate with this account. To create a credit card payment method when creating an account, Zuora recommends that you use this field instead of the `creditCard` field.
   *
   * @remarks
   *
   * Note that you can not use this field together with `creditCard` or `hpmCreditCardPaymentMethodId` to create a payment method.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paymentMethod" })
  @Type(() => POSTAccountTypePaymentMethod)
  paymentMethod?: POSTAccountTypePaymentMethod;

  /**
   * Payment terms for this account. Possible values are: `Due Upon Receipt`, `Net 30`, `Net 60`, `Net 90`.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paymentTerm" })
  paymentTerm?: string;

  /**
   * Creates an invoice for a subscription. If you have the Invoice Settlement feature enabled, a credit memo might also be created based on the [invoice and credit memo generation rule.](https://knowledgecenter.zuora.com/CB_Billing/Invoice_Settlement/Credit_and_Debit_Memos/Rules_for_Generating_Invoices_and_Credit_Memos).
   *
   * @remarks
   *
   *
   * The billing documents generated
   * in this operation is only for this subscription, not for the entire
   * customer account.
   *
   *
   * Possible values:
   *
   * - `true`: An invoice is created. If you have the Invoice Settlement feature enabled, a credit memo might also be created.
   *
   *
   * - `false`: No invoice is created.
   *
   *
   * **Note:** This field is in Zuora REST API version control. Supported
   * minor versions are `211.0` or later. To use this field in the method,
   * you must set the `zuora-version` parameter to the minor version number
   * in the request header.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "runBilling" })
  runBilling?: POSTAccountTypeRunBillingEnum;

  /**
   * The name of the sales representative associated with this account, if applicable. Maximum of 50 characters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "salesRep" })
  salesRep?: string;

  /**
   * The ID of the billing document sequence set to assign to the customer account.
   *
   * @remarks
   *
   * The billing documents to generate for this account will adopt the prefix and starting document number configured in the sequence set.
   *
   * If a customer account has no assigned billing document sequence set, billing documents generated for this account adopt the prefix and starting document number from the default sequence set.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sequenceSetId" })
  sequenceSetId?: string;

  /**
   * Container for optional sold-to contact; uses the same field structure as the bill-to contact (above). If a sold-to contact is not specified, one is created from the bill-to contact. Once created, these are two separate data entities, and future changes to one do not affect the other.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "soldToContact" })
  @Type(() => POSTAccountTypeSoldToContact)
  soldToContact?: POSTAccountTypeSoldToContact;

  /**
   * Whether the sold-to contact and bill-to contact are the same entity.
   *
   * @remarks
   *
   * The created account has the same bill-to contact and sold-to contact entity only when all the following conditions are met in the request body:
   *
   * - This field is set to `true`.
   * - A bill-to contact is specified.
   * - No sold-to contact is specified.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "soldToSameAsBillTo" })
  soldToSameAsBillTo?: boolean;

  /**
   * Container for subscription information, used if creating a subscription for the new account at the time of account creation.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subscription" })
  @Type(() => POSTAccountTypeSubscription)
  subscription?: POSTAccountTypeSubscription;

  @SpeakeasyMetadata()
  @Expose({ name: "tagging" })
  tagging?: string;

  /**
   * Date through which to calculate charges if an invoice or a credit memo is generated, as yyyy-mm-dd. Default is current date.
   *
   * @remarks
   *
   * **Note:** The credit memo is only available only if you have the Invoice Settlement feature enabled.
   *
   * This field is in Zuora REST API version control. Supported minor versions are `211.0` and later. To use this field in the method, you must set the  `zuora-version` parameter to the minor version number in the request header.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "targetDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  targetDate?: Date;

  /**
   * Container for tax exempt information, used to establish the tax exempt status of a customer account.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "taxInfo" })
  @Type(() => POSTAccountTypeTaxInfo)
  taxInfo?: POSTAccountTypeTaxInfo;
}
