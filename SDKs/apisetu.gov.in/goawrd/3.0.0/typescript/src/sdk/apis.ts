/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class APIs {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Registration Certificate of Establishment Employing Contract Labour
   *
   * @remarks
   * API to verify Registration Certificate of Establishment Employing Contract Labour.
   */
  ercer(
    req: operations.ErcerRequestBody,
    security: operations.ErcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ErcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ErcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/ercer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ErcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ErcerResponse = new operations.ErcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ercer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ercer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ercer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ercer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ercer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ercer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ercer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ercer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ercer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ercer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ercer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ercer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ercer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ercer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Permission/ Certificate for Well
   *
   * @remarks
   * API to verify Permission/ Certificate for Well.
   */
  pfdaw(
    req: operations.PfdawRequestBody,
    security: operations.PfdawSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PfdawResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PfdawRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/pfdaw/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PfdawSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PfdawResponse = new operations.PfdawResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pfdaw400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Pfdaw400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pfdaw401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Pfdaw401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pfdaw404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Pfdaw404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pfdaw500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Pfdaw500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pfdaw502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Pfdaw502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pfdaw503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Pfdaw503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pfdaw504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Pfdaw504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Permission/ Certificate for Transportation (Petroleum Products, Water etc.)
   *
   * @remarks
   * API to verify Permission/ Certificate for Transportation (Petroleum Products, Water etc.).
   */
  tpcer(
    req: operations.TpcerRequestBody,
    security: operations.TpcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TpcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TpcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/tpcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TpcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TpcerResponse = new operations.TpcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tpcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tpcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tpcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tpcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tpcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tpcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tpcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tpcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tpcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tpcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tpcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tpcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tpcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tpcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
