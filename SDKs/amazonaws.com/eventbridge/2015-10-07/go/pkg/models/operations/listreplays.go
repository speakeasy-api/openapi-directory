// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListReplaysXAmzTargetEnum
type ListReplaysXAmzTargetEnum string

const (
	ListReplaysXAmzTargetEnumAwsEventsListReplays ListReplaysXAmzTargetEnum = "AWSEvents.ListReplays"
)

func (e *ListReplaysXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWSEvents.ListReplays":
		*e = ListReplaysXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListReplaysXAmzTargetEnum: %s", s)
	}
}

type ListReplaysRequest struct {
	ListReplaysRequest shared.ListReplaysRequest `request:"mediaType=application/json"`
	XAmzAlgorithm      *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256  *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential     *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate           *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken  *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature      *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders  *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget         ListReplaysXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListReplaysResponse struct {
	ContentType string
	// InternalException
	InternalException interface{}
	// Success
	ListReplaysResponse *shared.ListReplaysResponse
	StatusCode          int
	RawResponse         *http.Response
}
