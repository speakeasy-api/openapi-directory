// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListMapRunsXAmzTargetEnum
type ListMapRunsXAmzTargetEnum string

const (
	ListMapRunsXAmzTargetEnumAwsStepFunctionsListMapRuns ListMapRunsXAmzTargetEnum = "AWSStepFunctions.ListMapRuns"
)

func (e ListMapRunsXAmzTargetEnum) ToPointer() *ListMapRunsXAmzTargetEnum {
	return &e
}

func (e *ListMapRunsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSStepFunctions.ListMapRuns":
		*e = ListMapRunsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListMapRunsXAmzTargetEnum: %v", v)
	}
}

type ListMapRunsRequest struct {
	ListMapRunsInput  shared.ListMapRunsInput   `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListMapRunsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=maxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

type ListMapRunsResponse struct {
	ContentType string
	// ExecutionDoesNotExist
	ExecutionDoesNotExist interface{}
	// InvalidArn
	InvalidArn interface{}
	// InvalidToken
	InvalidToken interface{}
	// Success
	ListMapRunsOutput *shared.ListMapRunsOutput
	StatusCode        int
	RawResponse       *http.Response
}
