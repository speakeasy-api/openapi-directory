"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import apppkg_operationalstate_enum as shared_apppkg_operationalstate_enum
from ..shared import apppkginfo_links as shared_apppkginfo_links
from ..shared import checksum as shared_checksum
from ..shared import onboardingstate_enum as shared_onboardingstate_enum
from ..shared import usagestate_enum as shared_usagestate_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AppPkgInfo:
    r"""'The data type AppPkgInfo represents the parameters for an application package resource'"""
    
    links: shared_apppkginfo_links.AppPkgInfoLinks = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_links') }})
    r"""Links to resources related to this resource."""  
    app_d_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appDId') }})
    r"""Identifier of this MEC application descriptor. This attribute shall be globally unique."""  
    app_d_version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appDVersion') }})
    r"""Identifies the version of the application descriptor."""  
    app_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appName') }})
    r"""Name to identify the MEC application."""  
    app_software_version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appSoftwareVersion') }})
    r"""Software version of the application. This is updated when there is any change to the software in the onboarded application package."""  
    checksum: shared_checksum.Checksum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checksum') }})  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Identifier of the onboarded application package."""  
    onboarding_state: shared_onboardingstate_enum.OnboardingStateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('onboardingState') }})
    r"""Onboarding state of application package"""  
    operational_state: shared_apppkg_operationalstate_enum.AppPkgOperationalStateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operationalState') }})
    r"""Operational state of the onboarded application package: Ã¢â‚¬Â¢ENABLED: the application package can be used for instantiation of new application instances. Ã¢â‚¬Â¢DISABLED: the application package cannot be used for further application instantiation requests."""  
    software_images: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('softwareImages') }})
    r"""Information of application software image in application package. Type is TBD"""  
    usage_state: shared_usagestate_enum.UsageStateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usageState') }})
    r"""Usage state of the onboarded instance of the application package"""  
    additional_artifacts: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalArtifacts'), 'exclude': lambda f: f is None }})
    r"""Additional information of application package artifacts that are not application software images. Type is TBD"""  
    app_provider: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appProvider'), 'exclude': lambda f: f is None }})
    r"""Provider of the application and of the AppD."""  
    user_defined_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userDefinedData'), 'exclude': lambda f: f is None }})
    r"""'This data type represents a list of key-value pairs. The order of the pairs in the list is not significant. In JSON, a set of key-value pairs is represented as an object. It shall comply with the provisions defined in clause 4 of IETF RFC 8259'"""  
    