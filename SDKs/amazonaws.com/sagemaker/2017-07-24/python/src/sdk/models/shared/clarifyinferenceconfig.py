"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import clarifyfeaturetype_enum as shared_clarifyfeaturetype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClarifyInferenceConfig:
    r"""The inference configuration parameter for the model container."""
    
    content_template: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContentTemplate'), 'exclude': lambda f: f is None }})  
    feature_headers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FeatureHeaders'), 'exclude': lambda f: f is None }})  
    features_attribute: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FeaturesAttribute'), 'exclude': lambda f: f is None }})  
    feature_types: Optional[list[shared_clarifyfeaturetype_enum.ClarifyFeatureTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FeatureTypes'), 'exclude': lambda f: f is None }})  
    label_attribute: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LabelAttribute'), 'exclude': lambda f: f is None }})  
    label_headers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LabelHeaders'), 'exclude': lambda f: f is None }})  
    label_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LabelIndex'), 'exclude': lambda f: f is None }})  
    max_payload_in_mb: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxPayloadInMB'), 'exclude': lambda f: f is None }})  
    max_record_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxRecordCount'), 'exclude': lambda f: f is None }})  
    probability_attribute: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProbabilityAttribute'), 'exclude': lambda f: f is None }})  
    probability_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProbabilityIndex'), 'exclude': lambda f: f is None }})  
    