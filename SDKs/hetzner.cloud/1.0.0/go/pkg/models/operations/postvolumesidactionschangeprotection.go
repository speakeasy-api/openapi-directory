// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostVolumesIDActionsChangeProtectionPathParams struct {
	// ID of the Volume
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

type PostVolumesIDActionsChangeProtectionRequestBody struct {
	// If true, prevents the Volume from being deleted
	Delete *bool `json:"delete,omitempty"`
}

type PostVolumesIDActionsChangeProtectionRequest struct {
	PathParams PostVolumesIDActionsChangeProtectionPathParams
	Request    *PostVolumesIDActionsChangeProtectionRequestBody `request:"mediaType=application/json"`
}

// PostVolumesIDActionsChangeProtectionActionResponseActionError - Error message for the Action if error occurred, otherwise null
type PostVolumesIDActionsChangeProtectionActionResponseActionError struct {
	// Fixed machine readable code
	Code string `json:"code"`
	// Humanized error message
	Message string `json:"message"`
}

type PostVolumesIDActionsChangeProtectionActionResponseActionResources struct {
	// ID of the Resource
	ID int64 `json:"id"`
	// Type of resource referenced
	Type string `json:"type"`
}

// PostVolumesIDActionsChangeProtectionActionResponseActionStatusEnum - Status of the Action
type PostVolumesIDActionsChangeProtectionActionResponseActionStatusEnum string

const (
	PostVolumesIDActionsChangeProtectionActionResponseActionStatusEnumSuccess PostVolumesIDActionsChangeProtectionActionResponseActionStatusEnum = "success"
	PostVolumesIDActionsChangeProtectionActionResponseActionStatusEnumRunning PostVolumesIDActionsChangeProtectionActionResponseActionStatusEnum = "running"
	PostVolumesIDActionsChangeProtectionActionResponseActionStatusEnumError   PostVolumesIDActionsChangeProtectionActionResponseActionStatusEnum = "error"
)

func (e *PostVolumesIDActionsChangeProtectionActionResponseActionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "running":
		fallthrough
	case "error":
		*e = PostVolumesIDActionsChangeProtectionActionResponseActionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostVolumesIDActionsChangeProtectionActionResponseActionStatusEnum: %s", s)
	}
}

type PostVolumesIDActionsChangeProtectionActionResponseAction struct {
	// Command executed in the Action
	Command string `json:"command"`
	// Error message for the Action if error occurred, otherwise null
	Error PostVolumesIDActionsChangeProtectionActionResponseActionError `json:"error"`
	// Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
	Finished string `json:"finished"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Progress of Action in percent
	Progress float64 `json:"progress"`
	// Resources the Action relates to
	Resources []PostVolumesIDActionsChangeProtectionActionResponseActionResources `json:"resources"`
	// Point in time when the Action was started (in ISO-8601 format)
	Started string `json:"started"`
	// Status of the Action
	Status PostVolumesIDActionsChangeProtectionActionResponseActionStatusEnum `json:"status"`
}

// PostVolumesIDActionsChangeProtectionActionResponse - The `action` key contains the `change_protection` Action
type PostVolumesIDActionsChangeProtectionActionResponse struct {
	Action PostVolumesIDActionsChangeProtectionActionResponseAction `json:"action"`
}

type PostVolumesIDActionsChangeProtectionResponse struct {
	// The `action` key contains the `change_protection` Action
	ActionResponse *PostVolumesIDActionsChangeProtectionActionResponse
	ContentType    string
	StatusCode     int
	RawResponse    *http.Response
}
