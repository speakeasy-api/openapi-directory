<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Account 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create an Account Image
     * 
     * Create an Account Image
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateAccountSettingsImageRequestBodyInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAccountImageResponse
     */
	public function createAccountImage(
        \OpenAPI\OpenAPI\Models\Shared\CreateAccountSettingsImageRequestBodyInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAccountImageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/account/settings/images');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAccountImageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAccountSettingsImagesResponseBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetAccountSettingsImagesResponseBody', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponseBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponseBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete Account Image By Id
     * 
     * Delete Account Image By Id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAccountImageByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAccountImageByIdResponse
     */
	public function deleteAccountImageById(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAccountImageByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAccountImageByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/account/settings/images/{label_image_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteAccountImageByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAccountImageByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->emptyResponseBody = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->emptyResponseBody = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponseBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponseBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Account Image By ID
     * 
     * Retrieve information for an account image.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountSettingsImagesByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountSettingsImagesByIdResponse
     */
	public function getAccountSettingsImagesById(
        \OpenAPI\OpenAPI\Models\Operations\GetAccountSettingsImagesByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountSettingsImagesByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/account/settings/images/{label_image_id}', \OpenAPI\OpenAPI\Models\Operations\GetAccountSettingsImagesByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountSettingsImagesByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAccountSettingsImagesResponseBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetAccountSettingsImagesResponseBody', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponseBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponseBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Account Images
     * 
     * List all account images for the ShipEngine account
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAccountImagesResponse
     */
	public function listAccountImages(
    ): \OpenAPI\OpenAPI\Models\Operations\ListAccountImagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/account/settings/images');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAccountImagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAccountSettingsImagesResponseBody = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponseBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponseBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Account Settings
     * 
     * List all account settings for the ShipEngine account
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAccountSettingsResponse
     */
	public function listAccountSettings(
    ): \OpenAPI\OpenAPI\Models\Operations\ListAccountSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/account/settings');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAccountSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAccountSettingsResponseBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetAccountSettingsResponseBody', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponseBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponseBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Account Image By ID
     * 
     * Update information for an account image.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAccountSettingsImagesByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateAccountSettingsImagesByIdResponse
     */
	public function updateAccountSettingsImagesById(
        \OpenAPI\OpenAPI\Models\Operations\UpdateAccountSettingsImagesByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateAccountSettingsImagesByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/account/settings/images/{label_image_id}', \OpenAPI\OpenAPI\Models\Operations\UpdateAccountSettingsImagesByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateAccountSettingsImageRequestBodyInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateAccountSettingsImagesByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->emptyResponseBody = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->emptyResponseBody = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponseBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponseBody', 'json');
            }
        }

        return $response;
    }
}