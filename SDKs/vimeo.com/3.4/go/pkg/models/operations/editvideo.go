// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type EditVideoSecurity struct {
	Oauth2 shared.SchemeOauth2 `security:"scheme,type=oauth2"`
}

type EditVideoPathParams struct {
	// The ID of the video.
	VideoID float64 `pathParam:"style=simple,explode=false,name=video_id"`
}

type EditVideoRequestBodyEmbedButtons struct {
	// Show or hide the Embed button.
	Embed *bool `json:"embed,omitempty"`
	// Show or hide the Fullscreen button.
	Fullscreen *bool `json:"fullscreen,omitempty"`
	// Show or hide the HD button.
	Hd *bool `json:"hd,omitempty"`
	// Show or hide the Like button.
	Like *bool `json:"like,omitempty"`
	// Show or hide the Scaling button (shown only in Fullscreen mode).
	Scaling *bool `json:"scaling,omitempty"`
	// Show or hide the Share button.
	Share *bool `json:"share,omitempty"`
	// Show or hide the Watch Later button.
	Watchlater *bool `json:"watchlater,omitempty"`
}

type EditVideoRequestBodyEmbedLogosCustom struct {
	// Show or hide your custom logo.
	Active *bool `json:"active,omitempty"`
	// The URL that loads when the user clicks your custom logo.
	Link *string `json:"link,omitempty"`
	// Whether always to show the custom logo or to hide it after time with the rest of the UI.
	Sticky *bool `json:"sticky,omitempty"`
}

type EditVideoRequestBodyEmbedLogos struct {
	Custom *EditVideoRequestBodyEmbedLogosCustom `json:"custom,omitempty"`
	// Show or hide the Vimeo logo.
	Vimeo *bool `json:"vimeo,omitempty"`
}

// EditVideoRequestBodyEmbedTitleNameEnum - Show or hide the video title, or enable the user to determine whether the video title appears.
type EditVideoRequestBodyEmbedTitleNameEnum string

const (
	EditVideoRequestBodyEmbedTitleNameEnumHide EditVideoRequestBodyEmbedTitleNameEnum = "hide"
	EditVideoRequestBodyEmbedTitleNameEnumShow EditVideoRequestBodyEmbedTitleNameEnum = "show"
	EditVideoRequestBodyEmbedTitleNameEnumUser EditVideoRequestBodyEmbedTitleNameEnum = "user"
)

func (e *EditVideoRequestBodyEmbedTitleNameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "hide":
		fallthrough
	case "show":
		fallthrough
	case "user":
		*e = EditVideoRequestBodyEmbedTitleNameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EditVideoRequestBodyEmbedTitleNameEnum: %s", s)
	}
}

// EditVideoRequestBodyEmbedTitleOwnerEnum - Show or hide the owner information, or enable the user to determine whether the owner information appears.
type EditVideoRequestBodyEmbedTitleOwnerEnum string

const (
	EditVideoRequestBodyEmbedTitleOwnerEnumHide EditVideoRequestBodyEmbedTitleOwnerEnum = "hide"
	EditVideoRequestBodyEmbedTitleOwnerEnumShow EditVideoRequestBodyEmbedTitleOwnerEnum = "show"
	EditVideoRequestBodyEmbedTitleOwnerEnumUser EditVideoRequestBodyEmbedTitleOwnerEnum = "user"
)

func (e *EditVideoRequestBodyEmbedTitleOwnerEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "hide":
		fallthrough
	case "show":
		fallthrough
	case "user":
		*e = EditVideoRequestBodyEmbedTitleOwnerEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EditVideoRequestBodyEmbedTitleOwnerEnum: %s", s)
	}
}

// EditVideoRequestBodyEmbedTitlePortraitEnum - Show or hide the owner portrait, or enable the user to determine whether the owner portrait appears.
type EditVideoRequestBodyEmbedTitlePortraitEnum string

const (
	EditVideoRequestBodyEmbedTitlePortraitEnumHide EditVideoRequestBodyEmbedTitlePortraitEnum = "hide"
	EditVideoRequestBodyEmbedTitlePortraitEnumShow EditVideoRequestBodyEmbedTitlePortraitEnum = "show"
	EditVideoRequestBodyEmbedTitlePortraitEnumUser EditVideoRequestBodyEmbedTitlePortraitEnum = "user"
)

func (e *EditVideoRequestBodyEmbedTitlePortraitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "hide":
		fallthrough
	case "show":
		fallthrough
	case "user":
		*e = EditVideoRequestBodyEmbedTitlePortraitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EditVideoRequestBodyEmbedTitlePortraitEnum: %s", s)
	}
}

type EditVideoRequestBodyEmbedTitle struct {
	// Show or hide the video title, or enable the user to determine whether the video title appears.
	Name *EditVideoRequestBodyEmbedTitleNameEnum `json:"name,omitempty"`
	// Show or hide the owner information, or enable the user to determine whether the owner information appears.
	Owner *EditVideoRequestBodyEmbedTitleOwnerEnum `json:"owner,omitempty"`
	// Show or hide the owner portrait, or enable the user to determine whether the owner portrait appears.
	Portrait *EditVideoRequestBodyEmbedTitlePortraitEnum `json:"portrait,omitempty"`
}

type EditVideoRequestBodyEmbed struct {
	Buttons *EditVideoRequestBodyEmbedButtons `json:"buttons,omitempty"`
	// The main color of the embed player.
	Color *string                         `json:"color,omitempty"`
	Logos *EditVideoRequestBodyEmbedLogos `json:"logos,omitempty"`
	// Show or hide the playbar.
	Playbar *bool                           `json:"playbar,omitempty"`
	Title   *EditVideoRequestBodyEmbedTitle `json:"title,omitempty"`
	// Show or hide the volume selector.
	Volume *bool `json:"volume,omitempty"`
}

// EditVideoRequestBodyLicenseEnum - The Creative Commons license.
type EditVideoRequestBodyLicenseEnum string

const (
	EditVideoRequestBodyLicenseEnumBy     EditVideoRequestBodyLicenseEnum = "by"
	EditVideoRequestBodyLicenseEnumByNc   EditVideoRequestBodyLicenseEnum = "by-nc"
	EditVideoRequestBodyLicenseEnumByNcNd EditVideoRequestBodyLicenseEnum = "by-nc-nd"
	EditVideoRequestBodyLicenseEnumByNcSa EditVideoRequestBodyLicenseEnum = "by-nc-sa"
	EditVideoRequestBodyLicenseEnumByNd   EditVideoRequestBodyLicenseEnum = "by-nd"
	EditVideoRequestBodyLicenseEnumBySa   EditVideoRequestBodyLicenseEnum = "by-sa"
	EditVideoRequestBodyLicenseEnumCc0    EditVideoRequestBodyLicenseEnum = "cc0"
)

func (e *EditVideoRequestBodyLicenseEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "by":
		fallthrough
	case "by-nc":
		fallthrough
	case "by-nc-nd":
		fallthrough
	case "by-nc-sa":
		fallthrough
	case "by-nd":
		fallthrough
	case "by-sa":
		fallthrough
	case "cc0":
		*e = EditVideoRequestBodyLicenseEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EditVideoRequestBodyLicenseEnum: %s", s)
	}
}

// EditVideoRequestBodyPrivacyCommentsEnum - The privacy level required to comment on the video.
type EditVideoRequestBodyPrivacyCommentsEnum string

const (
	EditVideoRequestBodyPrivacyCommentsEnumAnybody  EditVideoRequestBodyPrivacyCommentsEnum = "anybody"
	EditVideoRequestBodyPrivacyCommentsEnumContacts EditVideoRequestBodyPrivacyCommentsEnum = "contacts"
	EditVideoRequestBodyPrivacyCommentsEnumNobody   EditVideoRequestBodyPrivacyCommentsEnum = "nobody"
)

func (e *EditVideoRequestBodyPrivacyCommentsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "nobody":
		*e = EditVideoRequestBodyPrivacyCommentsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EditVideoRequestBodyPrivacyCommentsEnum: %s", s)
	}
}

// EditVideoRequestBodyPrivacyEmbedEnum - The video's new embed settings. The `whitelist` value enables you to define all valid embed domains. See our [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains) for details on adding and removing domains.
type EditVideoRequestBodyPrivacyEmbedEnum string

const (
	EditVideoRequestBodyPrivacyEmbedEnumPrivate   EditVideoRequestBodyPrivacyEmbedEnum = "private"
	EditVideoRequestBodyPrivacyEmbedEnumPublic    EditVideoRequestBodyPrivacyEmbedEnum = "public"
	EditVideoRequestBodyPrivacyEmbedEnumWhitelist EditVideoRequestBodyPrivacyEmbedEnum = "whitelist"
)

func (e *EditVideoRequestBodyPrivacyEmbedEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "private":
		fallthrough
	case "public":
		fallthrough
	case "whitelist":
		*e = EditVideoRequestBodyPrivacyEmbedEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EditVideoRequestBodyPrivacyEmbedEnum: %s", s)
	}
}

// EditVideoRequestBodyPrivacyViewEnum - The video's new privacy setting. When privacy is `users`, `application/json` is the only valid content type. Basic users can't set privacy to `unlisted`.
type EditVideoRequestBodyPrivacyViewEnum string

const (
	EditVideoRequestBodyPrivacyViewEnumAnybody  EditVideoRequestBodyPrivacyViewEnum = "anybody"
	EditVideoRequestBodyPrivacyViewEnumContacts EditVideoRequestBodyPrivacyViewEnum = "contacts"
	EditVideoRequestBodyPrivacyViewEnumDisable  EditVideoRequestBodyPrivacyViewEnum = "disable"
	EditVideoRequestBodyPrivacyViewEnumNobody   EditVideoRequestBodyPrivacyViewEnum = "nobody"
	EditVideoRequestBodyPrivacyViewEnumPassword EditVideoRequestBodyPrivacyViewEnum = "password"
	EditVideoRequestBodyPrivacyViewEnumUnlisted EditVideoRequestBodyPrivacyViewEnum = "unlisted"
	EditVideoRequestBodyPrivacyViewEnumUsers    EditVideoRequestBodyPrivacyViewEnum = "users"
)

func (e *EditVideoRequestBodyPrivacyViewEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "disable":
		fallthrough
	case "nobody":
		fallthrough
	case "password":
		fallthrough
	case "unlisted":
		fallthrough
	case "users":
		*e = EditVideoRequestBodyPrivacyViewEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EditVideoRequestBodyPrivacyViewEnum: %s", s)
	}
}

type EditVideoRequestBodyPrivacy struct {
	// Whether a user can add the video to an album, channel, or group.
	Add *bool `json:"add,omitempty"`
	// The privacy level required to comment on the video.
	Comments *EditVideoRequestBodyPrivacyCommentsEnum `json:"comments,omitempty"`
	// Whether a user can download the video. Not available to users with a Basic membership.
	Download *bool `json:"download,omitempty"`
	// The video's new embed settings. The `whitelist` value enables you to define all valid embed domains. See our [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains) for details on adding and removing domains.
	Embed *EditVideoRequestBodyPrivacyEmbedEnum `json:"embed,omitempty"`
	// The video's new privacy setting. When privacy is `users`, `application/json` is the only valid content type. Basic users can't set privacy to `unlisted`.
	View *EditVideoRequestBodyPrivacyViewEnum `json:"view,omitempty"`
}

// EditVideoRequestBodyRatingsMpaaReasonEnum - The reason for the video's MPAA rating.
//
// Option descriptions:
//   - `at` - Adult themes
//   - `bn` - Brief nudity
//   - `n` - Nudity
//   - `sl` - Strong language
//   - `ss` - Sexual situations
//   - `v` - Violence
type EditVideoRequestBodyRatingsMpaaReasonEnum string

const (
	EditVideoRequestBodyRatingsMpaaReasonEnumAt EditVideoRequestBodyRatingsMpaaReasonEnum = "at"
	EditVideoRequestBodyRatingsMpaaReasonEnumBn EditVideoRequestBodyRatingsMpaaReasonEnum = "bn"
	EditVideoRequestBodyRatingsMpaaReasonEnumN  EditVideoRequestBodyRatingsMpaaReasonEnum = "n"
	EditVideoRequestBodyRatingsMpaaReasonEnumSl EditVideoRequestBodyRatingsMpaaReasonEnum = "sl"
	EditVideoRequestBodyRatingsMpaaReasonEnumSs EditVideoRequestBodyRatingsMpaaReasonEnum = "ss"
	EditVideoRequestBodyRatingsMpaaReasonEnumV  EditVideoRequestBodyRatingsMpaaReasonEnum = "v"
)

func (e *EditVideoRequestBodyRatingsMpaaReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "at":
		fallthrough
	case "bn":
		fallthrough
	case "n":
		fallthrough
	case "sl":
		fallthrough
	case "ss":
		fallthrough
	case "v":
		*e = EditVideoRequestBodyRatingsMpaaReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EditVideoRequestBodyRatingsMpaaReasonEnum: %s", s)
	}
}

type EditVideoRequestBodyRatingsMpaa struct {
	// The reason for the video's MPAA rating.
	//
	// Option descriptions:
	//  * `at` - Adult themes
	//  * `bn` - Brief nudity
	//  * `n` - Nudity
	//  * `sl` - Strong language
	//  * `ss` - Sexual situations
	//  * `v` - Violence
	//
	Reason *EditVideoRequestBodyRatingsMpaaReasonEnum `json:"reason,omitempty"`
}

// EditVideoRequestBodyRatingsTvReasonEnum - The reason for the video's TV rating.
//
// Option descriptions:
//   - `d` - Suggestive dialogue
//   - `fv` - Fantasy violence
//   - `l` - Language
//   - `ss` - Sexual situations
//   - `v` - Violence
type EditVideoRequestBodyRatingsTvReasonEnum string

const (
	EditVideoRequestBodyRatingsTvReasonEnumD  EditVideoRequestBodyRatingsTvReasonEnum = "d"
	EditVideoRequestBodyRatingsTvReasonEnumFv EditVideoRequestBodyRatingsTvReasonEnum = "fv"
	EditVideoRequestBodyRatingsTvReasonEnumL  EditVideoRequestBodyRatingsTvReasonEnum = "l"
	EditVideoRequestBodyRatingsTvReasonEnumSs EditVideoRequestBodyRatingsTvReasonEnum = "ss"
	EditVideoRequestBodyRatingsTvReasonEnumV  EditVideoRequestBodyRatingsTvReasonEnum = "v"
)

func (e *EditVideoRequestBodyRatingsTvReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "d":
		fallthrough
	case "fv":
		fallthrough
	case "l":
		fallthrough
	case "ss":
		fallthrough
	case "v":
		*e = EditVideoRequestBodyRatingsTvReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EditVideoRequestBodyRatingsTvReasonEnum: %s", s)
	}
}

type EditVideoRequestBodyRatingsTv struct {
	// The reason for the video's TV rating.
	//
	// Option descriptions:
	//  * `d` - Suggestive dialogue
	//  * `fv` - Fantasy violence
	//  * `l` - Language
	//  * `ss` - Sexual situations
	//  * `v` - Violence
	//
	Reason *EditVideoRequestBodyRatingsTvReasonEnum `json:"reason,omitempty"`
}

type EditVideoRequestBodyRatings struct {
	Mpaa *EditVideoRequestBodyRatingsMpaa `json:"mpaa,omitempty"`
	Tv   *EditVideoRequestBodyRatingsTv   `json:"tv,omitempty"`
}

type EditVideoRequestBodyReviewPage struct {
	// Enable or disable video review.
	Active *bool `json:"active,omitempty"`
}

type EditVideoRequestBodySpatialDirectorTimeline struct {
	// The timeline pitch. This value must be between -90 and 90.
	Pitch float64 `json:"pitch"`
	// The timeline roll.
	Roll *float64 `json:"roll,omitempty"`
	// The 360 director timeline time code.
	TimeCode float64 `json:"time_code"`
	// The timeline yaw. This value must be between 0 and 360.
	Yaw float64 `json:"yaw"`
}

// EditVideoRequestBodySpatialProjectionEnum - The 360 spatial projection.
type EditVideoRequestBodySpatialProjectionEnum string

const (
	EditVideoRequestBodySpatialProjectionEnumCubical         EditVideoRequestBodySpatialProjectionEnum = "cubical"
	EditVideoRequestBodySpatialProjectionEnumCylindrical     EditVideoRequestBodySpatialProjectionEnum = "cylindrical"
	EditVideoRequestBodySpatialProjectionEnumDome            EditVideoRequestBodySpatialProjectionEnum = "dome"
	EditVideoRequestBodySpatialProjectionEnumEquirectangular EditVideoRequestBodySpatialProjectionEnum = "equirectangular"
	EditVideoRequestBodySpatialProjectionEnumPyramid         EditVideoRequestBodySpatialProjectionEnum = "pyramid"
)

func (e *EditVideoRequestBodySpatialProjectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "cubical":
		fallthrough
	case "cylindrical":
		fallthrough
	case "dome":
		fallthrough
	case "equirectangular":
		fallthrough
	case "pyramid":
		*e = EditVideoRequestBodySpatialProjectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EditVideoRequestBodySpatialProjectionEnum: %s", s)
	}
}

// EditVideoRequestBodySpatialStereoFormatEnum - The 360 spatial stereo format.
type EditVideoRequestBodySpatialStereoFormatEnum string

const (
	EditVideoRequestBodySpatialStereoFormatEnumLeftRight EditVideoRequestBodySpatialStereoFormatEnum = "left-right"
	EditVideoRequestBodySpatialStereoFormatEnumMono      EditVideoRequestBodySpatialStereoFormatEnum = "mono"
	EditVideoRequestBodySpatialStereoFormatEnumTopBottom EditVideoRequestBodySpatialStereoFormatEnum = "top-bottom"
)

func (e *EditVideoRequestBodySpatialStereoFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "left-right":
		fallthrough
	case "mono":
		fallthrough
	case "top-bottom":
		*e = EditVideoRequestBodySpatialStereoFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EditVideoRequestBodySpatialStereoFormatEnum: %s", s)
	}
}

type EditVideoRequestBodySpatial struct {
	// The 360 director timeline.
	DirectorTimeline []EditVideoRequestBodySpatialDirectorTimeline `json:"director_timeline,omitempty"`
	// The 360 field of view: default 50, minimum 30, maximum 90.
	FieldOfView *float64 `json:"field_of_view,omitempty"`
	// The 360 spatial projection.
	Projection *EditVideoRequestBodySpatialProjectionEnum `json:"projection,omitempty"`
	// The 360 spatial stereo format.
	StereoFormat *EditVideoRequestBodySpatialStereoFormatEnum `json:"stereo_format,omitempty"`
}

type EditVideoRequestBody struct {
	// A list of values describing the content in this video. You can find the full list in the [`/contentratings`](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings) endpoint.
	ContentRating []string `json:"content_rating,omitempty"`
	// The new description of the video.
	Description *string                    `json:"description,omitempty"`
	Embed       *EditVideoRequestBodyEmbed `json:"embed,omitempty"`
	// The Creative Commons license.
	License *EditVideoRequestBodyLicenseEnum `json:"license,omitempty"`
	// The video's default language. For a full list of valid languages, use the [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages) endpoint.
	Locale *string `json:"locale,omitempty"`
	// The new title for the video.
	Name *string `json:"name,omitempty"`
	// The password. When you set `privacy.view` to `password`, you must provide the password as an additional parameter.
	Password   *string                         `json:"password,omitempty"`
	Privacy    *EditVideoRequestBodyPrivacy    `json:"privacy,omitempty"`
	Ratings    *EditVideoRequestBodyRatings    `json:"ratings,omitempty"`
	ReviewPage *EditVideoRequestBodyReviewPage `json:"review_page,omitempty"`
	Spatial    *EditVideoRequestBodySpatial    `json:"spatial,omitempty"`
}

type EditVideoRequest struct {
	PathParams EditVideoPathParams
	Request    EditVideoRequestBody `request:"mediaType=application/vnd.vimeo.video+json"`
	Security   EditVideoSecurity
}

type EditVideoResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// A parameter is invalid.
	LegacyError *shared.LegacyError
	// The video was edited.
	Video *shared.Video
}
