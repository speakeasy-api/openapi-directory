// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ExecuteCommandXAmzTargetEnum
type ExecuteCommandXAmzTargetEnum string

const (
	ExecuteCommandXAmzTargetEnumAmazonEc2ContainerServiceV20141113ExecuteCommand ExecuteCommandXAmzTargetEnum = "AmazonEC2ContainerServiceV20141113.ExecuteCommand"
)

func (e ExecuteCommandXAmzTargetEnum) ToPointer() *ExecuteCommandXAmzTargetEnum {
	return &e
}

func (e *ExecuteCommandXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AmazonEC2ContainerServiceV20141113.ExecuteCommand":
		*e = ExecuteCommandXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecuteCommandXAmzTargetEnum: %v", v)
	}
}

type ExecuteCommandRequest struct {
	ExecuteCommandRequest shared.ExecuteCommandRequest `request:"mediaType=application/json"`
	XAmzAlgorithm         *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256     *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential        *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate              *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken     *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature         *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders     *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget            ExecuteCommandXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ExecuteCommandResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ClientException
	ClientException interface{}
	// ClusterNotFoundException
	ClusterNotFoundException interface{}
	ContentType              string
	// Success
	ExecuteCommandResponse *shared.ExecuteCommandResponse
	// InvalidParameterException
	InvalidParameterException interface{}
	// ServerException
	ServerException interface{}
	StatusCode      int
	RawResponse     *http.Response
	// TargetNotConnectedException
	TargetNotConnectedException interface{}
}
