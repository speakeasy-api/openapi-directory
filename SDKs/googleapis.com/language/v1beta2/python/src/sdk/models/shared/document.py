"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DocumentBoilerplateHandlingEnum(str, Enum):
    r"""Indicates how detected boilerplate(e.g. advertisements, copyright declarations, banners) should be handled for this document. If not specified, boilerplate will be treated the same as content."""
    BOILERPLATE_HANDLING_UNSPECIFIED = 'BOILERPLATE_HANDLING_UNSPECIFIED'
    SKIP_BOILERPLATE = 'SKIP_BOILERPLATE'
    KEEP_BOILERPLATE = 'KEEP_BOILERPLATE'

class DocumentTypeEnum(str, Enum):
    r"""Required. If the type is not set or is `TYPE_UNSPECIFIED`, returns an `INVALID_ARGUMENT` error."""
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    PLAIN_TEXT = 'PLAIN_TEXT'
    HTML = 'HTML'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Document:
    r"""Represents the input to API methods."""
    
    boilerplate_handling: Optional[DocumentBoilerplateHandlingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('boilerplateHandling'), 'exclude': lambda f: f is None }})
    r"""Indicates how detected boilerplate(e.g. advertisements, copyright declarations, banners) should be handled for this document. If not specified, boilerplate will be treated the same as content."""  
    content: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content'), 'exclude': lambda f: f is None }})
    r"""The content of the input in string format. Cloud audit logging exempt since it is based on user data."""  
    gcs_content_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gcsContentUri'), 'exclude': lambda f: f is None }})
    r"""The Google Cloud Storage URI where the file content is located. This URI must be of the form: gs://bucket_name/object_name. For more details, see https://cloud.google.com/storage/docs/reference-uris. NOTE: Cloud Storage object versioning is not supported."""  
    language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language'), 'exclude': lambda f: f is None }})
    r"""The language of the document (if not specified, the language is automatically detected). Both ISO and BCP-47 language codes are accepted. [Language Support](https://cloud.google.com/natural-language/docs/languages) lists currently supported languages for each API method. If the language (either specified by the caller or automatically detected) is not supported by the called API method, an `INVALID_ARGUMENT` error is returned."""  
    reference_web_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('referenceWebUri'), 'exclude': lambda f: f is None }})
    r"""The web URI where the document comes from. This URI is not used for fetching the content, but as a hint for analyzing the document."""  
    type: Optional[DocumentTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Required. If the type is not set or is `TYPE_UNSPECIFIED`, returns an `INVALID_ARGUMENT` error."""  
    