"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Orders:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_orders_json(self, request: operations.GetOrdersJSONRequest) -> operations.GetOrdersJSONResponse:
        r"""Retrieve all Orders."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/orders.json'
        
        query_params = utils.get_query_params(operations.GetOrdersJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrdersJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Order]])
                res.orders = out

        return res

    def get_orders_after_id_json(self, request: operations.GetOrdersAfterIDJSONRequest) -> operations.GetOrdersAfterIDJSONResponse:
        r"""Retrieve orders filtered by Order Id.
        For example the GET /orders/after/5000 will return Order 5001, 5002, 5003, etc.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrdersAfterIDJSONRequest, base_url, '/orders/after/{id}.json', request)
        
        query_params = utils.get_query_params(operations.GetOrdersAfterIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrdersAfterIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Order])
                res.order = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_orders_count_json(self, request: operations.GetOrdersCountJSONRequest) -> operations.GetOrdersCountJSONResponse:
        r"""Count all Orders."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/orders/count.json'
        
        query_params = utils.get_query_params(operations.GetOrdersCountJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrdersCountJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Count])
                res.count = out

        return res

    def get_orders_status_status_json(self, request: operations.GetOrdersStatusStatusJSONRequest) -> operations.GetOrdersStatusStatusJSONResponse:
        r"""Retrieve orders filtered by status."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrdersStatusStatusJSONRequest, base_url, '/orders/status/{status}.json', request)
        
        query_params = utils.get_query_params(operations.GetOrdersStatusStatusJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrdersStatusStatusJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Order]])
                res.orders = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StatusInvalid])
                res.status_invalid = out

        return res

    def get_orders_id_json(self, request: operations.GetOrdersIDJSONRequest) -> operations.GetOrdersIDJSONResponse:
        r"""Retrieve a single Order."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrdersIDJSONRequest, base_url, '/orders/{id}.json', request)
        
        query_params = utils.get_query_params(operations.GetOrdersIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrdersIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Order])
                res.order = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_orders_id_history_json(self, request: operations.GetOrdersIDHistoryJSONRequest) -> operations.GetOrdersIDHistoryJSONResponse:
        r"""Retrieve all Order History."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrdersIDHistoryJSONRequest, base_url, '/orders/{id}/history.json', request)
        
        query_params = utils.get_query_params(operations.GetOrdersIDHistoryJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrdersIDHistoryJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OrderHistory]])
                res.order_histories = out

        return res

    def post_orders_json(self, request: operations.PostOrdersJSONRequest) -> operations.PostOrdersJSONResponse:
        r"""Create a new Order.
        Orders created externally keep the given order product's values (bypassing internal promotion or product amounts).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/orders.json'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "order_create", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PostOrdersJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrdersJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Order])
                res.order = out

        return res

    def post_orders_id_history_json(self, request: operations.PostOrdersIDHistoryJSONRequest) -> operations.PostOrdersIDHistoryJSONResponse:
        r"""Create a new Order History Entry."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrdersIDHistoryJSONRequest, base_url, '/orders/{id}/history.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "order_history_edit", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PostOrdersIDHistoryJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrdersIDHistoryJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OrderHistory])
                res.order_history = out

        return res

    def put_orders_id_json(self, request: operations.PutOrdersIDJSONRequest) -> operations.PutOrdersIDJSONResponse:
        r"""Modify an existing Order.
        Only `status`, `shipment_status`, `tracking_number`, `tracking_company`, `tracking_url`, `additional_information` and `additional_fields` are available for update. An email is send if `shipment_status` changes.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutOrdersIDJSONRequest, base_url, '/orders/{id}.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "order_edit", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PutOrdersIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutOrdersIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Order])
                res.order = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    