// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PsprtSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type PsprtRequestBodyCertificateParameters struct {
	// Applicant Name
	Name string `json:"Name"`
	// Certificate Id
	RefNo string `json:"RefNo"`
}

// PsprtRequestBodyFormatEnum - The format of the certificate in response.
type PsprtRequestBodyFormatEnum string

const (
	PsprtRequestBodyFormatEnumPdf PsprtRequestBodyFormatEnum = "pdf"
)

func (e *PsprtRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = PsprtRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PsprtRequestBodyFormatEnum: %s", s)
	}
}

// PsprtRequestBody - Request format
type PsprtRequestBody struct {
	CertificateParameters *PsprtRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format PsprtRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type PsprtRequest struct {
	// Request format
	Request  *PsprtRequestBody `request:"mediaType=application/json"`
	Security PsprtSecurity
}

type Psprt504ApplicationJSONErrorEnum string

const (
	Psprt504ApplicationJSONErrorEnumGatewayTimeout Psprt504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Psprt504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Psprt504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Psprt504ApplicationJSONErrorEnum: %s", s)
	}
}

type Psprt504ApplicationJSONErrorDescriptionEnum string

const (
	Psprt504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Psprt504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Psprt504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Psprt504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Psprt504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Psprt504ApplicationJSON - Gateway timeout
type Psprt504ApplicationJSON struct {
	Error            *Psprt504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Psprt504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Psprt503ApplicationJSONErrorEnum string

const (
	Psprt503ApplicationJSONErrorEnumServiceUnavailable Psprt503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Psprt503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Psprt503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Psprt503ApplicationJSONErrorEnum: %s", s)
	}
}

type Psprt503ApplicationJSONErrorDescriptionEnum string

const (
	Psprt503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Psprt503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Psprt503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Psprt503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Psprt503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Psprt503ApplicationJSON - Service unavailable
type Psprt503ApplicationJSON struct {
	Error            *Psprt503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Psprt503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Psprt502ApplicationJSONErrorEnum string

const (
	Psprt502ApplicationJSONErrorEnumBadGatewy Psprt502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Psprt502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Psprt502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Psprt502ApplicationJSONErrorEnum: %s", s)
	}
}

type Psprt502ApplicationJSONErrorDescriptionEnum string

const (
	Psprt502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Psprt502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Psprt502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Psprt502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Psprt502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Psprt502ApplicationJSON - Bad gateway
type Psprt502ApplicationJSON struct {
	Error            *Psprt502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Psprt502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Psprt500ApplicationJSONErrorEnum string

const (
	Psprt500ApplicationJSONErrorEnumInternalServerError Psprt500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Psprt500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Psprt500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Psprt500ApplicationJSONErrorEnum: %s", s)
	}
}

type Psprt500ApplicationJSONErrorDescriptionEnum string

const (
	Psprt500ApplicationJSONErrorDescriptionEnumInternalServerError Psprt500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Psprt500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Psprt500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Psprt500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Psprt500ApplicationJSON - Internal server error
type Psprt500ApplicationJSON struct {
	Error            *Psprt500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Psprt500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Psprt404ApplicationJSONErrorEnum string

const (
	Psprt404ApplicationJSONErrorEnumRecordNotFound Psprt404ApplicationJSONErrorEnum = "record_not_found"
	Psprt404ApplicationJSONErrorEnumURLNotFound    Psprt404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Psprt404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Psprt404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Psprt404ApplicationJSONErrorEnum: %s", s)
	}
}

type Psprt404ApplicationJSONErrorDescriptionEnum string

const (
	Psprt404ApplicationJSONErrorDescriptionEnumNoRecordFound               Psprt404ApplicationJSONErrorDescriptionEnum = "No record found"
	Psprt404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Psprt404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Psprt404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Psprt404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Psprt404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Psprt404ApplicationJSON - No record found
type Psprt404ApplicationJSON struct {
	Error            *Psprt404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Psprt404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Psprt401ApplicationJSONErrorEnum string

const (
	Psprt401ApplicationJSONErrorEnumInvalidAuthentication Psprt401ApplicationJSONErrorEnum = "invalid_authentication"
	Psprt401ApplicationJSONErrorEnumInvalidAuthorization  Psprt401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Psprt401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Psprt401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Psprt401ApplicationJSONErrorEnum: %s", s)
	}
}

type Psprt401ApplicationJSONErrorDescriptionEnum string

const (
	Psprt401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Psprt401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Psprt401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Psprt401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Psprt401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Psprt401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Psprt401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Psprt401ApplicationJSON - Unauthorized access
type Psprt401ApplicationJSON struct {
	Error            *Psprt401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Psprt401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Psprt400ApplicationJSONErrorEnum string

const (
	Psprt400ApplicationJSONErrorEnumMissingParameter Psprt400ApplicationJSONErrorEnum = "missing_parameter"
	Psprt400ApplicationJSONErrorEnumInvalidParameter Psprt400ApplicationJSONErrorEnum = "invalid_parameter"
	Psprt400ApplicationJSONErrorEnumInvalidFormat    Psprt400ApplicationJSONErrorEnum = "invalid_format"
	Psprt400ApplicationJSONErrorEnumInvalidTxnid     Psprt400ApplicationJSONErrorEnum = "invalid_txnid"
	Psprt400ApplicationJSONErrorEnumInvalidConsentid Psprt400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Psprt400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Psprt400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Psprt400ApplicationJSONErrorEnum: %s", s)
	}
}

type Psprt400ApplicationJSONErrorDescriptionEnum string

const (
	Psprt400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Psprt400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Psprt400ApplicationJSONErrorDescriptionEnumBadRequest                              Psprt400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Psprt400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Psprt400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Psprt400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Psprt400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Psprt400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Psprt400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Psprt400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Psprt400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Psprt400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Psprt400ApplicationJSON - Bad request
type Psprt400ApplicationJSON struct {
	Error            *Psprt400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Psprt400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type PsprtResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Psprt400ApplicationJSONObject *Psprt400ApplicationJSON
	// Unauthorized access
	Psprt401ApplicationJSONObject *Psprt401ApplicationJSON
	// No record found
	Psprt404ApplicationJSONObject *Psprt404ApplicationJSON
	// Internal server error
	Psprt500ApplicationJSONObject *Psprt500ApplicationJSON
	// Bad gateway
	Psprt502ApplicationJSONObject *Psprt502ApplicationJSON
	// Service unavailable
	Psprt503ApplicationJSONObject *Psprt503ApplicationJSON
	// Gateway timeout
	Psprt504ApplicationJSONObject *Psprt504ApplicationJSON
}
