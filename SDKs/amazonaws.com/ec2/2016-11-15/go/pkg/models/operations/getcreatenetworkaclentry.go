// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETCreateNetworkACLEntryActionEnum
type GETCreateNetworkACLEntryActionEnum string

const (
	GETCreateNetworkACLEntryActionEnumCreateNetworkACLEntry GETCreateNetworkACLEntryActionEnum = "CreateNetworkAclEntry"
)

func (e *GETCreateNetworkACLEntryActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CreateNetworkAclEntry":
		*e = GETCreateNetworkACLEntryActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateNetworkACLEntryActionEnum: %s", s)
	}
}

// GETCreateNetworkACLEntryIcmp - Describes the ICMP type and code.
type GETCreateNetworkACLEntryIcmp struct {
	Code *int64 `queryParam:"name=Code"`
	Type *int64 `queryParam:"name=Type"`
}

// GETCreateNetworkACLEntryPortRange - Describes a range of ports.
type GETCreateNetworkACLEntryPortRange struct {
	From *int64 `queryParam:"name=From"`
	To   *int64 `queryParam:"name=To"`
}

// GETCreateNetworkACLEntryRuleActionEnum - Indicates whether to allow or deny the traffic that matches the rule.
type GETCreateNetworkACLEntryRuleActionEnum string

const (
	GETCreateNetworkACLEntryRuleActionEnumAllow GETCreateNetworkACLEntryRuleActionEnum = "allow"
	GETCreateNetworkACLEntryRuleActionEnumDeny  GETCreateNetworkACLEntryRuleActionEnum = "deny"
)

func (e *GETCreateNetworkACLEntryRuleActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "allow":
		fallthrough
	case "deny":
		*e = GETCreateNetworkACLEntryRuleActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateNetworkACLEntryRuleActionEnum: %s", s)
	}
}

// GETCreateNetworkACLEntryVersionEnum
type GETCreateNetworkACLEntryVersionEnum string

const (
	GETCreateNetworkACLEntryVersionEnumTwoThousandAndSixteen1115 GETCreateNetworkACLEntryVersionEnum = "2016-11-15"
)

func (e *GETCreateNetworkACLEntryVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETCreateNetworkACLEntryVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateNetworkACLEntryVersionEnum: %s", s)
	}
}

type GETCreateNetworkACLEntryQueryParams struct {
	Action GETCreateNetworkACLEntryActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The IPv4 network range to allow or deny, in CIDR notation (for example <code>172.16.0.0/24</code>). We modify the specified CIDR block to its canonical form; for example, if you specify <code>100.68.0.18/18</code>, we modify it to <code>100.68.0.0/18</code>.
	CidrBlock *string `queryParam:"style=form,explode=true,name=CidrBlock"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet).
	Egress bool `queryParam:"style=form,explode=true,name=Egress"`
	// ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol 1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.
	Icmp *GETCreateNetworkACLEntryIcmp `queryParam:"style=form,explode=true,name=Icmp"`
	// The IPv6 network range to allow or deny, in CIDR notation (for example <code>2001:db8:1234:1a00::/64</code>).
	Ipv6CidrBlock *string `queryParam:"style=form,explode=true,name=Ipv6CidrBlock"`
	// The ID of the network ACL.
	NetworkACLID string `queryParam:"style=form,explode=true,name=NetworkAclId"`
	// TCP or UDP protocols: The range of ports the rule applies to. Required if specifying protocol 6 (TCP) or 17 (UDP).
	PortRange *GETCreateNetworkACLEntryPortRange `queryParam:"style=form,explode=true,name=PortRange"`
	// The protocol number. A value of "-1" means all protocols. If you specify "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code.
	Protocol string `queryParam:"style=form,explode=true,name=Protocol"`
	// Indicates whether to allow or deny the traffic that matches the rule.
	RuleAction GETCreateNetworkACLEntryRuleActionEnum `queryParam:"style=form,explode=true,name=RuleAction"`
	// <p>The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number.</p> <p>Constraints: Positive integer from 1 to 32766. The range 32767 to 65535 is reserved for internal use.</p>
	RuleNumber int64                               `queryParam:"style=form,explode=true,name=RuleNumber"`
	Version    GETCreateNetworkACLEntryVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETCreateNetworkACLEntryHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETCreateNetworkACLEntryRequest struct {
	QueryParams GETCreateNetworkACLEntryQueryParams
	Headers     GETCreateNetworkACLEntryHeaders
}

type GETCreateNetworkACLEntryResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
