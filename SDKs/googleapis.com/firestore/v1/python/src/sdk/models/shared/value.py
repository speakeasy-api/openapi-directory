"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import arrayvalue as shared_arrayvalue
from ..shared import latlng as shared_latlng
from ..shared import mapvalue as shared_mapvalue
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ValueNullValueEnum(str, Enum):
    r"""A null value."""
    NULL_VALUE = 'NULL_VALUE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Value:
    r"""A message that can hold any of the supported value types."""
    
    array_value: Optional[shared_arrayvalue.ArrayValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('arrayValue'), 'exclude': lambda f: f is None }})
    r"""An array value."""  
    boolean_value: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('booleanValue'), 'exclude': lambda f: f is None }})
    r"""A boolean value."""  
    bytes_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bytesValue'), 'exclude': lambda f: f is None }})
    r"""A bytes value. Must not exceed 1 MiB - 89 bytes. Only the first 1,500 bytes are considered by queries."""  
    double_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doubleValue'), 'exclude': lambda f: f is None }})
    r"""A double value."""  
    geo_point_value: Optional[shared_latlng.LatLng] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geoPointValue'), 'exclude': lambda f: f is None }})
    r"""An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges."""  
    integer_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('integerValue'), 'exclude': lambda f: f is None }})
    r"""An integer value."""  
    map_value: Optional[shared_mapvalue.MapValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mapValue'), 'exclude': lambda f: f is None }})
    r"""A map value."""  
    null_value: Optional[ValueNullValueEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nullValue'), 'exclude': lambda f: f is None }})
    r"""A null value."""  
    reference_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('referenceValue'), 'exclude': lambda f: f is None }})
    r"""A reference to a document. For example: `projects/{project_id}/databases/{database_id}/documents/{document_path}`."""  
    string_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stringValue'), 'exclude': lambda f: f is None }})
    r"""A string value. The string, represented as UTF-8, must not exceed 1 MiB - 89 bytes. Only the first 1,500 bytes of the UTF-8 representation are considered by queries."""  
    timestamp_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestampValue'), 'exclude': lambda f: f is None }})
    r"""A timestamp value. Precise only to microseconds. When stored, any additional precision is rounded down."""  
    