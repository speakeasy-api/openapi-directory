"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Challenge:
    r"""Result message for VerifiedAccess.GenerateChallenge."""
    
    alternative_challenge: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alternativeChallenge'), 'exclude': lambda f: f is None }})
    r"""Challenge generated with the old signing key, the bytes representation of SignedData (this will only be present during key rotation)."""  
    challenge: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('challenge'), 'exclude': lambda f: f is None }})
    r"""Generated challenge, the bytes representation of SignedData."""  
    