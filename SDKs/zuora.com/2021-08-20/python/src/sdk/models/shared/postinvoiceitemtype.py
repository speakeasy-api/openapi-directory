"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import posttaxationitemtype as shared_posttaxationitemtype
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class PostInvoiceItemTypeRevRecTriggerConditionEnum(str, Enum):
    r"""The date when revenue recognition is triggered."""
    CONTRACT_EFFECTIVE_DATE = 'ContractEffectiveDate'
    SERVICE_ACTIVATION_DATE = 'ServiceActivationDate'
    CUSTOMER_ACCEPTANCE_DATE = 'CustomerAcceptanceDate'

class PostInvoiceItemTypeTaxModeEnum(str, Enum):
    r"""The tax mode of the invoice item, indicating whether the amount of the invoice item includes tax.
    
    **Note** This field is only available only when Taxation enabled.
    """
    TAX_INCLUSIVE = 'TaxInclusive'
    TAX_EXCLUSIVE = 'TaxExclusive'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostInvoiceItemType:
    r"""Container for custom fields of an Invoice Item object."""
    
    amount: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""The amount of the invoice item.
    
    - For tax-inclusive invoice items, the amount indicates the invoice item amount including tax. 
    - For tax-exclusive invoice items, the amount indicates the invoice item amount excluding tax.
    """  
    service_start_date: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceStartDate'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The service start date of the invoice item."""  
    accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountingCode'), 'exclude': lambda f: f is None }})
    r"""The accounting code associated with the invoice item."""  
    booking_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookingReference'), 'exclude': lambda f: f is None }})
    r"""The booking reference of the invoice item."""  
    charge_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chargeDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the invoice item is charged."""  
    charge_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chargeName'), 'exclude': lambda f: f is None }})
    r"""The name of the charge associated with the invoice item.
    
    This field is required if the `productRatePlanChargeId` field is not specified in the request.
    """  
    deferred_revenue_accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deferredRevenueAccountingCode'), 'exclude': lambda f: f is None }})
    r"""The accounting code for the deferred revenue, such as Monthly Recurring Liability.
    
    **Note:** This field is only available if you have Zuora Finance enabled.
    """  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the invoice item."""  
    integration_id_ns: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IntegrationId__NS'), 'exclude': lambda f: f is None }})
    r"""ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265)."""  
    integration_status_ns: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IntegrationStatus__NS'), 'exclude': lambda f: f is None }})
    r"""Status of the invoice item's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265)."""  
    item_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemType'), 'exclude': lambda f: f is None }})
    r"""The type of the invoice item."""  
    product_rate_plan_charge_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productRatePlanChargeId'), 'exclude': lambda f: f is None }})
    r"""The ID of the product rate plan charge that the invoice item is created from.
    
    If you specify a value for the `productRatePlanChargeId` field in the request, Zuora directly copies the values of the following fields from the corresponding product rate plan charge, regardless of the values specified in the request body:
    - `chargeName`
    - `sku`
    - `uom`
    - `taxCode`
    - `taxMode`
    - `accountingCode`
    - `deferredRevenueAccountingCode` 
    - `recognizedRevenueAccountingCode`
    """  
    purchase_order_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purchaseOrderNumber'), 'exclude': lambda f: f is None }})
    r"""The purchase order number associated with the invoice item."""  
    quantity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""The number of units for the invoice item."""  
    recognized_revenue_accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recognizedRevenueAccountingCode'), 'exclude': lambda f: f is None }})
    r"""The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.
    
    **Note:** This field is only available if you have Zuora Finance enabled.
    """  
    revenue_recognition_rule_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revenueRecognitionRuleName'), 'exclude': lambda f: f is None }})
    r"""The name of the revenue recognition rule governing the revenue schedule.
    
    **Note:** This field is only available if you have Zuora Finance enabled.
    """  
    rev_rec_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revRecCode'), 'exclude': lambda f: f is None }})
    r"""The revenue recognition code."""  
    rev_rec_trigger_condition: Optional[PostInvoiceItemTypeRevRecTriggerConditionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revRecTriggerCondition'), 'exclude': lambda f: f is None }})
    r"""The date when revenue recognition is triggered."""  
    service_end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceEndDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The service end date of the invoice item."""  
    sku: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sku'), 'exclude': lambda f: f is None }})
    r"""The SKU of the invoice item."""  
    sync_date_ns: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SyncDate__NS'), 'exclude': lambda f: f is None }})
    r"""Date when the invoice item was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265)."""  
    tax_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxCode'), 'exclude': lambda f: f is None }})
    r"""The tax code identifies which tax rules and tax rates to apply to the invoice item.
    
    **Note** This field is only available only when Taxation enabled.
    """  
    tax_items: Optional[list[shared_posttaxationitemtype.PostTaxationItemType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxItems'), 'exclude': lambda f: f is None }})
    r"""Container for taxation items. The maximum number of taxation items is 5."""  
    tax_mode: Optional[PostInvoiceItemTypeTaxModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxMode'), 'exclude': lambda f: f is None }})
    r"""The tax mode of the invoice item, indicating whether the amount of the invoice item includes tax.
    
    **Note** This field is only available only when Taxation enabled.
    """  
    unit_price: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unitPrice'), 'exclude': lambda f: f is None }})
    r"""The per-unit price of the invoice item."""  
    uom: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uom'), 'exclude': lambda f: f is None }})
    r"""The unit of measure."""  
    