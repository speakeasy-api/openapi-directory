/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * FileInput - The metadata for a file.
 */
public class FileInput {
    /**
     * A link for opening the file in a relevant Google editor or viewer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alternateLink")
    public String alternateLink;
    public FileInput withAlternateLink(String alternateLink) {
        this.alternateLink = alternateLink;
        return this;
    }
    
    /**
     * Whether this file is in the Application Data folder.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appDataContents")
    public Boolean appDataContents;
    public FileInput withAppDataContents(Boolean appDataContents) {
        this.appDataContents = appDataContents;
        return this;
    }
    
    /**
     * Deprecated: use capabilities/canComment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canComment")
    public Boolean canComment;
    public FileInput withCanComment(Boolean canComment) {
        this.canComment = canComment;
        return this;
    }
    
    /**
     * Deprecated: use capabilities/canReadRevisions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canReadRevisions")
    public Boolean canReadRevisions;
    public FileInput withCanReadRevisions(Boolean canReadRevisions) {
        this.canReadRevisions = canReadRevisions;
        return this;
    }
    
    /**
     * Capabilities the current user has on this file. Each capability corresponds to a fine-grained action that a user may take.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("capabilities")
    public FileCapabilities capabilities;
    public FileInput withCapabilities(FileCapabilities capabilities) {
        this.capabilities = capabilities;
        return this;
    }
    
    /**
     * Restrictions for accessing the content of the file. Only populated if such a restriction exists.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contentRestrictions")
    public ContentRestriction[] contentRestrictions;
    public FileInput withContentRestrictions(ContentRestriction[] contentRestrictions) {
        this.contentRestrictions = contentRestrictions;
        return this;
    }
    
    /**
     * Whether the options to copy, print, or download this file, should be disabled for readers and commenters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("copyRequiresWriterPermission")
    public Boolean copyRequiresWriterPermission;
    public FileInput withCopyRequiresWriterPermission(Boolean copyRequiresWriterPermission) {
        this.copyRequiresWriterPermission = copyRequiresWriterPermission;
        return this;
    }
    
    /**
     * Deprecated: use capabilities/canCopy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("copyable")
    public Boolean copyable;
    public FileInput withCopyable(Boolean copyable) {
        this.copyable = copyable;
        return this;
    }
    
    /**
     * Create time for this file (formatted RFC 3339 timestamp).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdDate")
    public OffsetDateTime createdDate;
    public FileInput withCreatedDate(OffsetDateTime createdDate) {
        this.createdDate = createdDate;
        return this;
    }
    
    /**
     * A link to open this file with the user's default app for this file. Only populated when the drive.apps.readonly scope is used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultOpenWithLink")
    public String defaultOpenWithLink;
    public FileInput withDefaultOpenWithLink(String defaultOpenWithLink) {
        this.defaultOpenWithLink = defaultOpenWithLink;
        return this;
    }
    
    /**
     * A short description of the file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public FileInput withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Short lived download URL for the file. This field is only populated for files with content stored in Google Drive; it isn't populated for Docs Editors or shortcut files.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("downloadUrl")
    public String downloadUrl;
    public FileInput withDownloadUrl(String downloadUrl) {
        this.downloadUrl = downloadUrl;
        return this;
    }
    
    /**
     * ID of the shared drive the file resides in. Only populated for items in shared drives.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("driveId")
    public String driveId;
    public FileInput withDriveId(String driveId) {
        this.driveId = driveId;
        return this;
    }
    
    /**
     * Deprecated: use capabilities/canEdit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("editable")
    public Boolean editable;
    public FileInput withEditable(Boolean editable) {
        this.editable = editable;
        return this;
    }
    
    /**
     * A link for embedding the file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("embedLink")
    public String embedLink;
    public FileInput withEmbedLink(String embedLink) {
        this.embedLink = embedLink;
        return this;
    }
    
    /**
     * ETag of the file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;
    public FileInput withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * Whether this file has been explicitly trashed, as opposed to recursively trashed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("explicitlyTrashed")
    public Boolean explicitlyTrashed;
    public FileInput withExplicitlyTrashed(Boolean explicitlyTrashed) {
        this.explicitlyTrashed = explicitlyTrashed;
        return this;
    }
    
    /**
     * The final component of fullFileExtension with trailing text that does not appear to be part of the extension removed. This field is only populated for files with content stored in Google Drive; it isn't populated for Docs Editors or shortcut files.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileExtension")
    public String fileExtension;
    public FileInput withFileExtension(String fileExtension) {
        this.fileExtension = fileExtension;
        return this;
    }
    
    /**
     * The size of the file's content in bytes. This field is populated for files with binary content stored in Google Drive and for Docs Editors files; it is not populated for shortcuts or folders.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileSize")
    public String fileSize;
    public FileInput withFileSize(String fileSize) {
        this.fileSize = fileSize;
        return this;
    }
    
    /**
     * Folder color as an RGB hex string if the file is a folder or a shortcut to a folder. The list of supported colors is available in the folderColorPalette field of the About resource. If an unsupported color is specified, it will be changed to the closest color in the palette.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("folderColorRgb")
    public String folderColorRgb;
    public FileInput withFolderColorRgb(String folderColorRgb) {
        this.folderColorRgb = folderColorRgb;
        return this;
    }
    
    /**
     * The full file extension; extracted from the title. May contain multiple concatenated extensions, such as "tar.gz". Removing an extension from the title does not clear this field; however, changing the extension on the title does update this field. This field is only populated for files with content stored in Google Drive; it isn't populated for Docs Editors or shortcut files.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fullFileExtension")
    public String fullFileExtension;
    public FileInput withFullFileExtension(String fullFileExtension) {
        this.fullFileExtension = fullFileExtension;
        return this;
    }
    
    /**
     * Whether there are permissions directly on this file. This field is only populated for items in shared drives.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasAugmentedPermissions")
    public Boolean hasAugmentedPermissions;
    public FileInput withHasAugmentedPermissions(Boolean hasAugmentedPermissions) {
        this.hasAugmentedPermissions = hasAugmentedPermissions;
        return this;
    }
    
    /**
     * Whether this file has a thumbnail. This does not indicate whether the requesting app has access to the thumbnail. To check access, look for the presence of the thumbnailLink field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasThumbnail")
    public Boolean hasThumbnail;
    public FileInput withHasThumbnail(Boolean hasThumbnail) {
        this.hasThumbnail = hasThumbnail;
        return this;
    }
    
    /**
     * The ID of the file's head revision. This field is only populated for files with content stored in Google Drive; it isn't populated for Docs Editors or shortcut files.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("headRevisionId")
    public String headRevisionId;
    public FileInput withHeadRevisionId(String headRevisionId) {
        this.headRevisionId = headRevisionId;
        return this;
    }
    
    /**
     * A link to the file's icon.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iconLink")
    public String iconLink;
    public FileInput withIconLink(String iconLink) {
        this.iconLink = iconLink;
        return this;
    }
    
    /**
     * The ID of the file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public FileInput withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Metadata about image media. This will only be present for image types, and its contents will depend on what can be parsed from the image content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imageMediaMetadata")
    public FileImageMediaMetadata imageMediaMetadata;
    public FileInput withImageMediaMetadata(FileImageMediaMetadata imageMediaMetadata) {
        this.imageMediaMetadata = imageMediaMetadata;
        return this;
    }
    
    /**
     * Indexable text attributes for the file (can only be written). For more information, see Manage file metadata.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("indexableText")
    public FileIndexableText indexableText;
    public FileInput withIndexableText(FileIndexableText indexableText) {
        this.indexableText = indexableText;
        return this;
    }
    
    /**
     * Whether the file was created or opened by the requesting app.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isAppAuthorized")
    public Boolean isAppAuthorized;
    public FileInput withIsAppAuthorized(Boolean isAppAuthorized) {
        this.isAppAuthorized = isAppAuthorized;
        return this;
    }
    
    /**
     * The type of file. This is always drive#file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public FileInput withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * An overview of the labels on the file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labelInfo")
    public FileLabelInfo labelInfo;
    public FileInput withLabelInfo(FileLabelInfo labelInfo) {
        this.labelInfo = labelInfo;
        return this;
    }
    
    /**
     * A group of labels for the file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public FileLabels labels;
    public FileInput withLabels(FileLabels labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Information about a Drive user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastModifyingUser")
    public User lastModifyingUser;
    public FileInput withLastModifyingUser(User lastModifyingUser) {
        this.lastModifyingUser = lastModifyingUser;
        return this;
    }
    
    /**
     * Name of the last user to modify this file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastModifyingUserName")
    public String lastModifyingUserName;
    public FileInput withLastModifyingUserName(String lastModifyingUserName) {
        this.lastModifyingUserName = lastModifyingUserName;
        return this;
    }
    
    /**
     * Last time this file was viewed by the user (formatted RFC 3339 timestamp).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastViewedByMeDate")
    public OffsetDateTime lastViewedByMeDate;
    public FileInput withLastViewedByMeDate(OffsetDateTime lastViewedByMeDate) {
        this.lastViewedByMeDate = lastViewedByMeDate;
        return this;
    }
    
    /**
     * Contains details about the link URLs that clients are using to refer to this item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("linkShareMetadata")
    public FileLinkShareMetadata linkShareMetadata;
    public FileInput withLinkShareMetadata(FileLinkShareMetadata linkShareMetadata) {
        this.linkShareMetadata = linkShareMetadata;
        return this;
    }
    
    /**
     * Deprecated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("markedViewedByMeDate")
    public OffsetDateTime markedViewedByMeDate;
    public FileInput withMarkedViewedByMeDate(OffsetDateTime markedViewedByMeDate) {
        this.markedViewedByMeDate = markedViewedByMeDate;
        return this;
    }
    
    /**
     * An MD5 checksum for the content of this file. This field is only populated for files with content stored in Google Drive; it isn't populated for Docs Editors or shortcut files.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("md5Checksum")
    public String md5Checksum;
    public FileInput withMd5Checksum(String md5Checksum) {
        this.md5Checksum = md5Checksum;
        return this;
    }
    
    /**
     * The MIME type of the file. This is only mutable on update when uploading new content. This field can be left blank, and the mimetype will be determined from the uploaded content's MIME type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mimeType")
    public String mimeType;
    public FileInput withMimeType(String mimeType) {
        this.mimeType = mimeType;
        return this;
    }
    
    /**
     * Last time this file was modified by the user (formatted RFC 3339 timestamp). Note that setting modifiedDate will also update the modifiedByMe date for the user which set the date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("modifiedByMeDate")
    public OffsetDateTime modifiedByMeDate;
    public FileInput withModifiedByMeDate(OffsetDateTime modifiedByMeDate) {
        this.modifiedByMeDate = modifiedByMeDate;
        return this;
    }
    
    /**
     * Last time this file was modified by anyone (formatted RFC 3339 timestamp). This is only mutable on update when the setModifiedDate parameter is set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("modifiedDate")
    public OffsetDateTime modifiedDate;
    public FileInput withModifiedDate(OffsetDateTime modifiedDate) {
        this.modifiedDate = modifiedDate;
        return this;
    }
    
    /**
     * A map of the id of each of the user's apps to a link to open this file with that app. Only populated when the drive.apps.readonly scope is used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("openWithLinks")
    public java.util.Map<String, String> openWithLinks;
    public FileInput withOpenWithLinks(java.util.Map<String, String> openWithLinks) {
        this.openWithLinks = openWithLinks;
        return this;
    }
    
    /**
     * The original filename of the uploaded content if available, or else the original value of the title field. This is only available for files with binary content in Google Drive.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originalFilename")
    public String originalFilename;
    public FileInput withOriginalFilename(String originalFilename) {
        this.originalFilename = originalFilename;
        return this;
    }
    
    /**
     * Whether the file is owned by the current user. Not populated for items in shared drives.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ownedByMe")
    public Boolean ownedByMe;
    public FileInput withOwnedByMe(Boolean ownedByMe) {
        this.ownedByMe = ownedByMe;
        return this;
    }
    
    /**
     * Name(s) of the owner(s) of this file. Not populated for items in shared drives.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ownerNames")
    public String[] ownerNames;
    public FileInput withOwnerNames(String[] ownerNames) {
        this.ownerNames = ownerNames;
        return this;
    }
    
    /**
     * The owner of this file. Only certain legacy files may have more than one owner. This field isn't populated for items in shared drives.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owners")
    public User[] owners;
    public FileInput withOwners(User[] owners) {
        this.owners = owners;
        return this;
    }
    
    /**
     * Collection of parent folders which contain this file.
     * If not specified as part of an insert request, the file will be placed directly in the user's My Drive folder. If not specified as part of a copy request, the file will inherit any discoverable parents of the source file. Update requests can also use the addParents and removeParents parameters to modify the parents list.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parents")
    public ParentReference[] parents;
    public FileInput withParents(ParentReference[] parents) {
        this.parents = parents;
        return this;
    }
    
    /**
     * List of permission IDs for users with access to this file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissionIds")
    public String[] permissionIds;
    public FileInput withPermissionIds(String[] permissionIds) {
        this.permissionIds = permissionIds;
        return this;
    }
    
    /**
     * The list of permissions for users with access to this file. Not populated for items in shared drives.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissions")
    public PermissionInput[] permissions;
    public FileInput withPermissions(PermissionInput[] permissions) {
        this.permissions = permissions;
        return this;
    }
    
    /**
     * The list of properties.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("properties")
    public Property[] properties;
    public FileInput withProperties(Property[] properties) {
        this.properties = properties;
        return this;
    }
    
    /**
     * The number of quota bytes used by this file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quotaBytesUsed")
    public String quotaBytesUsed;
    public FileInput withQuotaBytesUsed(String quotaBytesUsed) {
        this.quotaBytesUsed = quotaBytesUsed;
        return this;
    }
    
    /**
     * A key needed to access the item via a shared link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resourceKey")
    public String resourceKey;
    public FileInput withResourceKey(String resourceKey) {
        this.resourceKey = resourceKey;
        return this;
    }
    
    /**
     * A link back to this file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfLink")
    public String selfLink;
    public FileInput withSelfLink(String selfLink) {
        this.selfLink = selfLink;
        return this;
    }
    
    /**
     * The SHA1 checksum associated with this file, if available. This field is only populated for files with content stored in Google Drive; it isn't populated for Docs Editors or shortcut files.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sha1Checksum")
    public String sha1Checksum;
    public FileInput withSha1Checksum(String sha1Checksum) {
        this.sha1Checksum = sha1Checksum;
        return this;
    }
    
    /**
     * The SHA256 checksum associated with this file, if available. This field is only populated for files with content stored in Google Drive; it isn't populated for Docs Editors or shortcut files.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sha256Checksum")
    public String sha256Checksum;
    public FileInput withSha256Checksum(String sha256Checksum) {
        this.sha256Checksum = sha256Checksum;
        return this;
    }
    
    /**
     * Deprecated: use capabilities/canShare.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shareable")
    public Boolean shareable;
    public FileInput withShareable(Boolean shareable) {
        this.shareable = shareable;
        return this;
    }
    
    /**
     * Whether the file has been shared. Not populated for items in shared drives.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shared")
    public Boolean shared;
    public FileInput withShared(Boolean shared) {
        this.shared = shared;
        return this;
    }
    
    /**
     * Time at which this file was shared with the user (formatted RFC 3339 timestamp).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("sharedWithMeDate")
    public OffsetDateTime sharedWithMeDate;
    public FileInput withSharedWithMeDate(OffsetDateTime sharedWithMeDate) {
        this.sharedWithMeDate = sharedWithMeDate;
        return this;
    }
    
    /**
     * Information about a Drive user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sharingUser")
    public User sharingUser;
    public FileInput withSharingUser(User sharingUser) {
        this.sharingUser = sharingUser;
        return this;
    }
    
    /**
     * Shortcut file details. Only populated for shortcut files, which have the mimeType field set to application/vnd.google-apps.shortcut.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shortcutDetails")
    public FileShortcutDetails shortcutDetails;
    public FileInput withShortcutDetails(FileShortcutDetails shortcutDetails) {
        this.shortcutDetails = shortcutDetails;
        return this;
    }
    
    /**
     * The list of spaces which contain the file. Supported values are 'drive', 'appDataFolder' and 'photos'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("spaces")
    public String[] spaces;
    public FileInput withSpaces(String[] spaces) {
        this.spaces = spaces;
        return this;
    }
    
    /**
     * Deprecated - use driveId instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("teamDriveId")
    public String teamDriveId;
    public FileInput withTeamDriveId(String teamDriveId) {
        this.teamDriveId = teamDriveId;
        return this;
    }
    
    /**
     * A thumbnail for the file. This will only be used if a standard thumbnail cannot be generated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnail")
    public FileThumbnail thumbnail;
    public FileInput withThumbnail(FileThumbnail thumbnail) {
        this.thumbnail = thumbnail;
        return this;
    }
    
    /**
     * A short-lived link to the file's thumbnail. Typically lasts on the order of hours. Only populated when the requesting app can access the file's content. If the file isn't shared publicly, the URL returned in Files.thumbnailLink must be fetched using a credentialed request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnailLink")
    public String thumbnailLink;
    public FileInput withThumbnailLink(String thumbnailLink) {
        this.thumbnailLink = thumbnailLink;
        return this;
    }
    
    /**
     * The thumbnail version for use in thumbnail cache invalidation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnailVersion")
    public String thumbnailVersion;
    public FileInput withThumbnailVersion(String thumbnailVersion) {
        this.thumbnailVersion = thumbnailVersion;
        return this;
    }
    
    /**
     * The title of this file. Note that for immutable items such as the top level folders of shared drives, My Drive root folder, and Application Data folder the title is constant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;
    public FileInput withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * The time that the item was trashed (formatted RFC 3339 timestamp). Only populated for items in shared drives.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("trashedDate")
    public OffsetDateTime trashedDate;
    public FileInput withTrashedDate(OffsetDateTime trashedDate) {
        this.trashedDate = trashedDate;
        return this;
    }
    
    /**
     * Information about a Drive user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trashingUser")
    public User trashingUser;
    public FileInput withTrashingUser(User trashingUser) {
        this.trashingUser = trashingUser;
        return this;
    }
    
    /**
     * A permission for a file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userPermission")
    public PermissionInput userPermission;
    public FileInput withUserPermission(PermissionInput userPermission) {
        this.userPermission = userPermission;
        return this;
    }
    
    /**
     * A monotonically increasing version number for the file. This reflects every change made to the file on the server, even those not visible to the requesting user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public String version;
    public FileInput withVersion(String version) {
        this.version = version;
        return this;
    }
    
    /**
     * Metadata about video media. This will only be present for video types.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("videoMediaMetadata")
    public FileVideoMediaMetadata videoMediaMetadata;
    public FileInput withVideoMediaMetadata(FileVideoMediaMetadata videoMediaMetadata) {
        this.videoMediaMetadata = videoMediaMetadata;
        return this;
    }
    
    /**
     * A link for downloading the content of the file in a browser using cookie based authentication. In cases where the content is shared publicly, the content can be downloaded without any credentials.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webContentLink")
    public String webContentLink;
    public FileInput withWebContentLink(String webContentLink) {
        this.webContentLink = webContentLink;
        return this;
    }
    
    /**
     * A link only available on public folders for viewing their static web assets (HTML, CSS, JS, etc) via Google Drive's Website Hosting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webViewLink")
    public String webViewLink;
    public FileInput withWebViewLink(String webViewLink) {
        this.webViewLink = webViewLink;
        return this;
    }
    
    /**
     * Whether writers can share the document with other users. Not populated for items in shared drives.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("writersCanShare")
    public Boolean writersCanShare;
    public FileInput withWritersCanShare(Boolean writersCanShare) {
        this.writersCanShare = writersCanShare;
        return this;
    }
    
}
