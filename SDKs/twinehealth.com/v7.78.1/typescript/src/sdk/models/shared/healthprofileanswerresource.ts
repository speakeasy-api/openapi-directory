/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * The details of a previous answer for a health profile question
 */
export class HealthProfileAnswerResourceAttributesHistory extends SpeakeasyBase {
  /**
   * The id of the patient or coach who answered the health profile question
   */
  @SpeakeasyMetadata()
  @Expose({ name: "_created_by" })
  createdBy?: string;

  /**
   * The date when the health profile question is answered
   */
  @SpeakeasyMetadata()
  @Expose({ name: "answered_at" })
  answeredAt?: string;

  /**
   * The value of the answer entered for the health profile question
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

/**
 * The details of the latest answer for a health profile question
 */
export class HealthProfileAnswerResourceAttributesLatest extends SpeakeasyBase {
  /**
   * The id of the patient or coach who answered the health profile question
   */
  @SpeakeasyMetadata()
  @Expose({ name: "_created_by" })
  createdBy?: string;

  /**
   * The date when the health profile question is answered
   */
  @SpeakeasyMetadata()
  @Expose({ name: "answered_at" })
  answeredAt?: string;

  /**
   * The value of the answer entered for the health profile question
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

export class HealthProfileAnswerResourceAttributes extends SpeakeasyBase {
  /**
   * List of details of previous answers for a health profile question
   */
  @SpeakeasyMetadata({ elemType: HealthProfileAnswerResourceAttributesHistory })
  @Expose({ name: "history" })
  @Type(() => HealthProfileAnswerResourceAttributesHistory)
  history?: HealthProfileAnswerResourceAttributesHistory[];

  /**
   * The details of the latest answer for a health profile question
   */
  @SpeakeasyMetadata()
  @Expose({ name: "latest" })
  @Type(() => HealthProfileAnswerResourceAttributesLatest)
  latest?: HealthProfileAnswerResourceAttributesLatest;

  @SpeakeasyMetadata()
  @Expose({ name: "question_id" })
  questionId?: string;
}

export class HealthProfileAnswerResourceLinks extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "self" })
  self: string;
}

export class HealthProfileAnswerResourceRelationshipsPatientData extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

export class HealthProfileAnswerResourceRelationshipsPatientLinks extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "related" })
  related?: string;
}

export class HealthProfileAnswerResourceRelationshipsPatient extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  @Type(() => HealthProfileAnswerResourceRelationshipsPatientData)
  data?: HealthProfileAnswerResourceRelationshipsPatientData;

  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  @Type(() => HealthProfileAnswerResourceRelationshipsPatientLinks)
  links?: HealthProfileAnswerResourceRelationshipsPatientLinks;
}

export class HealthProfileAnswerResourceRelationships extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "patient" })
  @Type(() => HealthProfileAnswerResourceRelationshipsPatient)
  patient?: HealthProfileAnswerResourceRelationshipsPatient;
}

export class HealthProfileAnswerResource extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "attributes" })
  @Type(() => HealthProfileAnswerResourceAttributes)
  attributes?: HealthProfileAnswerResourceAttributes;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  @Type(() => HealthProfileAnswerResourceLinks)
  links?: HealthProfileAnswerResourceLinks;

  @SpeakeasyMetadata()
  @Expose({ name: "relationships" })
  @Type(() => HealthProfileAnswerResourceRelationships)
  relationships?: HealthProfileAnswerResourceRelationships;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}
