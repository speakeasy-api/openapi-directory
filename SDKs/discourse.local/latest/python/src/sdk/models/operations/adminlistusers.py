"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class AdminListUsersAscEnum(str, Enum):
    TRUE = 'true'

class AdminListUsersFlagEnum(str, Enum):
    ACTIVE = 'active'
    NEW = 'new'
    STAFF = 'staff'
    SUSPENDED = 'suspended'
    BLOCKED = 'blocked'
    SUSPECT = 'suspect'

class AdminListUsersOrderEnum(str, Enum):
    CREATED = 'created'
    LAST_EMAILED = 'last_emailed'
    SEEN = 'seen'
    USERNAME = 'username'
    EMAIL = 'email'
    TRUST_LEVEL = 'trust_level'
    DAYS_VISITED = 'days_visited'
    POSTS_READ = 'posts_read'
    TOPICS_VIEWED = 'topics_viewed'
    POSTS = 'posts'
    READ_TIME = 'read_time'


@dataclasses.dataclass
class AdminListUsersRequest:
    
    flag: AdminListUsersFlagEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'flag', 'style': 'simple', 'explode': False }})  
    asc: Optional[AdminListUsersAscEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'asc', 'style': 'form', 'explode': True }})  
    order: Optional[AdminListUsersOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'order', 'style': 'form', 'explode': True }})  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})  
    show_emails: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'show_emails', 'style': 'form', 'explode': True }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdminListUsers200ApplicationJSON:
    
    active: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active') }})  
    admin: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('admin') }})  
    avatar_template: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avatar_template') }})  
    created_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at') }})  
    created_at_age: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at_age') }})  
    days_visited: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('days_visited') }})  
    flag_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flag_level') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    last_emailed_age: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_emailed_age') }})  
    last_emailed_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_emailed_at') }})  
    last_seen_age: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_seen_age') }})  
    last_seen_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_seen_at') }})  
    manual_locked_trust_level: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manual_locked_trust_level') }})  
    moderator: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moderator') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    post_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_count') }})  
    posts_read_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('posts_read_count') }})  
    staged: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('staged') }})  
    time_read: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_read') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    topics_entered: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topics_entered') }})  
    trust_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trust_level') }})  
    username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username') }})  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})  
    secondary_emails: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondary_emails'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class AdminListUsersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    admin_list_users_200_application_json_objects: Optional[list[AdminListUsers200ApplicationJSON]] = dataclasses.field(default=None)
    r"""response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    