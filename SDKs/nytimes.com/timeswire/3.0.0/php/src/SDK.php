<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - With the Times Newswire API, you can get links and metadata for Times articles and blog posts as soon as they are published on NYTimes.com. The Times Newswire API provides an up-to-the-minute stream of published items.
 * 
 * http://developer.nytimes.com/
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 * @see http://developer.nytimes.com/
 */
class SDK
{
	public const SERVERS = [
		'http://api.nytimes.com/svc/news/v3',
		'https://api.nytimes.com/svc/news/v3',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	private ?Models\Shared\Security $_security;
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client	 
	 * @param Models\Shared\Security|null $security
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, ?Models\Shared\Security $security, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($security !== null) {
			$this->_security = $security;
			$this->_securityClient = Utils\Utils::configureSecurityClient($this->_defaultClient, $this->_security);
		}
		
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * getContentJson
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContentJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContentJsonResponse
     */
	public function getContentJson(
        \OpenAPI\OpenAPI\Models\Operations\GetContentJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContentJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/content.json');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetContentJsonRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContentJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getContentJSON200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetContentJSON200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getContentSourceSectionJson
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContentSourceSectionJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContentSourceSectionJsonResponse
     */
	public function getContentSourceSectionJson(
        \OpenAPI\OpenAPI\Models\Operations\GetContentSourceSectionJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContentSourceSectionJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/content/{source}/{section}.json', \OpenAPI\OpenAPI\Models\Operations\GetContentSourceSectionJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetContentSourceSectionJsonRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContentSourceSectionJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getContentSourceSectionJSON200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetContentSourceSectionJSON200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getContentSourceSectionTimePeriodJson
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContentSourceSectionTimePeriodJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContentSourceSectionTimePeriodJsonResponse
     */
	public function getContentSourceSectionTimePeriodJson(
        \OpenAPI\OpenAPI\Models\Operations\GetContentSourceSectionTimePeriodJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContentSourceSectionTimePeriodJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/content/{source}/{section}/{time-period}.json', \OpenAPI\OpenAPI\Models\Operations\GetContentSourceSectionTimePeriodJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetContentSourceSectionTimePeriodJsonRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContentSourceSectionTimePeriodJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getContentSourceSectionTimePeriodJSON200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetContentSourceSectionTimePeriodJSON200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}