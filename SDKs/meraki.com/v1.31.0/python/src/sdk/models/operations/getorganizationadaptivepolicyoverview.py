"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetOrganizationAdaptivePolicyOverviewRequest:
    
    organization_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'organizationId', 'style': 'simple', 'explode': False }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationAdaptivePolicyOverview200ApplicationJSONCounts:
    r"""The current amount of various adaptive policy objects."""
    
    allow_policies: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowPolicies'), 'exclude': lambda f: f is None }})
    r"""Number of adaptive policies currently in the organization that allow all traffic."""  
    custom_acls: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customAcls'), 'exclude': lambda f: f is None }})
    r"""Number of user-created adaptive policy ACLs currently in the organization."""  
    custom_groups: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customGroups'), 'exclude': lambda f: f is None }})
    r"""Number of user-created adaptive policy groups currently in the organization."""  
    deny_policies: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('denyPolicies'), 'exclude': lambda f: f is None }})
    r"""Number of adaptive policies currently in the organization that deny all traffic."""  
    groups: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groups'), 'exclude': lambda f: f is None }})
    r"""Number of adaptive policy groups currently in the organization."""  
    policies: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policies'), 'exclude': lambda f: f is None }})
    r"""Number of adaptive policies currently in the organization."""  
    policy_objects: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policyObjects'), 'exclude': lambda f: f is None }})
    r"""Number of policy objects (with the adaptive policy type) currently in the organization."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationAdaptivePolicyOverview200ApplicationJSONLimits:
    r"""The current limits of various adaptive policy objects."""
    
    acls_in_a_policy: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aclsInAPolicy'), 'exclude': lambda f: f is None }})
    r"""Maximum number of adaptive policy ACLs that can be assigned to an adaptive policy in the organization."""  
    custom_groups: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customGroups'), 'exclude': lambda f: f is None }})
    r"""Maximum number of user-created adaptive policy groups allowed in the organization."""  
    policy_objects: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policyObjects'), 'exclude': lambda f: f is None }})
    r"""Maximum number of policy objects (with the adaptive policy type) allowed in the organization."""  
    rules_in_an_acl: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rulesInAnAcl'), 'exclude': lambda f: f is None }})
    r"""Maximum number of rules allowed in an adaptive policy ACL in the organization."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationAdaptivePolicyOverview200ApplicationJSON:
    r"""Successful operation"""
    
    counts: Optional[GetOrganizationAdaptivePolicyOverview200ApplicationJSONCounts] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('counts'), 'exclude': lambda f: f is None }})
    r"""The current amount of various adaptive policy objects."""  
    limits: Optional[GetOrganizationAdaptivePolicyOverview200ApplicationJSONLimits] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limits'), 'exclude': lambda f: f is None }})
    r"""The current limits of various adaptive policy objects."""  
    

@dataclasses.dataclass
class GetOrganizationAdaptivePolicyOverviewResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_organization_adaptive_policy_overview_200_application_json_object: Optional[GetOrganizationAdaptivePolicyOverview200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    