"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class QuotesSmartV2:
    r"""To change the description use /examples/TagsDescriptions.json"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_files_2(self, request: operations.AddFiles2Request) -> operations.AddFiles2Response:
        r"""Adds files to the quote as added by PM.
        Adds files to the quote as added by PM. The files have to be uploaded beforehand (see \"POST v2/quotes/{quoteId}/files/upload\" operation). The following properties can be specified for each file:<ul><li>category (required, 400 Bad Request is returned otherwise)</li><li>languageIds – when the file category depends on a list of languages</li><li>languageCombinationIds – when the file category depends on a list of language combinations</li></ul>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddFiles2Request, base_url, '/v2/quotes/{quoteId}/files/add', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "time_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddFiles2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def archive_1(self, request: shared.FilesDto) -> operations.Archive1Response:
        r"""Prepares a ZIP archive that contains the specified files.
        Prepares a ZIP archive that contains the specified files.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/quotes/files/archive'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Archive1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FilesArchiveDto])
                res.files_archive_dto = out

        return res

    def change_status_3(self, request: operations.ChangeStatus3Request) -> operations.ChangeStatus3Response:
        r"""Changes quote status if possible (400 Bad Request is returned otherwise).
        Changes quote status if possible (400 Bad Request is returned otherwise). The status has to be specified using one of the following keys: <ul><li>PENDING – available when the job has one of the following statuses: REQUESTED, REJECTED</li><li>SENT – available when the job has one of the following statuses: PENDING</li><li>APPROVED – available when the job has one of the following statuses: REQUESTED, PENDING, SENT, APPROVED_BY_CLIENT</li><li>REJECTED – available when the job has one of the following statuses: REQUESTED, PENDING, SENT</li></ul>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChangeStatus3Request, base_url, '/v2/quotes/{quoteId}/status', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "project_status_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChangeStatus3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def create_payable_3(self, request: operations.CreatePayable3Request) -> operations.CreatePayable3Response:
        r"""Adds a payable to a quote.
        Adds a payable to a quote.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreatePayable3Request, base_url, '/v2/quotes/{quoteId}/finance/payables', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "payable_create_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreatePayable3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PayableDTO])
                res.payable_dto = out

        return res

    def create_receivable_3(self, request: operations.CreateReceivable3Request) -> operations.CreateReceivable3Response:
        r"""Adds a receivable to a quote.
        Adds a receivable to a quote.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateReceivable3Request, base_url, '/v2/quotes/{quoteId}/finance/receivables', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "receivable_create_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateReceivable3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReceivableDTO])
                res.receivable_dto = out

        return res

    def create_7(self, request: shared.QuoteCreateDTO) -> operations.Create7Response:
        r"""Creates a new Smart Quote.
        Creates a new Smart Quote. If the specified service ID refers to Classic Quote, 400 Bad Request is returned instead.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/quotes'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Create7Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.QuoteDTOv2])
                res.quote_dt_ov2 = out

        return res

    def delete_payable_3(self, request: operations.DeletePayable3Request) -> operations.DeletePayable3Response:
        r"""Deletes a payable.
        Deletes a payable.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletePayable3Request, base_url, '/v2/quotes/{quoteId}/finance/payables/{payableId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePayable3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_receivable_3(self, request: operations.DeleteReceivable3Request) -> operations.DeleteReceivable3Response:
        r"""Deletes a receivable.
        Deletes a receivable.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteReceivable3Request, base_url, '/v2/quotes/{quoteId}/finance/receivables/{receivableId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteReceivable3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_by_id_10(self, request: operations.GetByID10Request) -> operations.GetByID10Response:
        r"""Returns quote details.
        Returns quote details. If the specified quote ID refers to Classic Quote, 400 Bad Request is returned instead.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetByID10Request, base_url, '/v2/quotes/{quoteId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetByID10Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.QuoteDTOv2])
                res.quote_dt_ov2 = out

        return res

    def get_contacts_3(self, request: operations.GetContacts3Request) -> operations.GetContacts3Response:
        r"""Returns Client Contacts information for a quote.
        Returns Client Contacts information for a quote.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetContacts3Request, base_url, '/v2/quotes/{quoteId}/clientContacts', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetContacts3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SmartContactsDTO])
                res.smart_contacts_dto = out

        return res

    def get_custom_fields_9(self, request: operations.GetCustomFields9Request) -> operations.GetCustomFields9Response:
        r"""Returns a list of custom field keys and values for a project.
        Returns a list of custom field keys and values for a project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCustomFields9Request, base_url, '/v2/quotes/{quoteId}/customFields', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomFields9Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CustomFieldDTO]])
                res.custom_fields_dto = out

        return res

    def get_file_by_id_3(self, request: operations.GetFileByID3Request) -> operations.GetFileByID3Response:
        r"""Returns details of a file.
        Returns details of a file.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFileByID3Request, base_url, '/v2/quotes/files/{fileId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFileByID3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProjectFileDto])
                res.project_file_dto = out

        return res

    def get_file_content_by_id_1(self, request: operations.GetFileContentByID1Request) -> operations.GetFileContentByID1Response:
        r"""Downloads a file content.
        Downloads a file content.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFileContentByID1Request, base_url, '/v2/quotes/files/{fileId}/download/{fileName}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFileContentByID1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_files_1(self, request: operations.GetFiles1Request) -> operations.GetFiles1Response:
        r"""Returns list of files in a quote.
        Returns list of files in a quote. Only files added to the quote (i.e. files that have assigned category and languages) are listed.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFiles1Request, base_url, '/v2/quotes/{quoteId}/files', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFiles1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ProjectFileDto]])
                res.project_file_dtos = out

        return res

    def get_finance_3(self, request: operations.GetFinance3Request) -> operations.GetFinance3Response:
        r"""Returns finance information for a quote.
        Returns finance information for a quote.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFinance3Request, base_url, '/v2/quotes/{quoteId}/finance', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFinance3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FinanceDTO])
                res.finance_dto = out

        return res

    def get_jobs_1(self, request: operations.GetJobs1Request) -> operations.GetJobs1Response:
        r"""Returns list of jobs in a quote.
        Returns list of jobs in a quote.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetJobs1Request, base_url, '/v2/quotes/{quoteId}/jobs', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetJobs1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.JobDto]])
                res.job_dtos = out

        return res

    def update_business_days(self, request: operations.UpdateBusinessDaysRequest) -> operations.UpdateBusinessDaysResponse:
        r"""Updates Business Days for a quote.
        Updates Business Days for a quote.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateBusinessDaysRequest, base_url, '/v2/quotes/{quoteId}/businessDays', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateBusinessDaysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_client_notes_1(self, request: operations.UpdateClientNotes1Request) -> operations.UpdateClientNotes1Response:
        r"""Updates Client Notes for a quote.
        Updates Client Notes for a quote.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateClientNotes1Request, base_url, '/v2/quotes/{quoteId}/clientNotes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "string_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateClientNotes1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_client_reference_number_1(self, request: operations.UpdateClientReferenceNumber1Request) -> operations.UpdateClientReferenceNumber1Response:
        r"""Updates Client Reference Number for a quote.
        Updates Client Reference Number for a quote.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateClientReferenceNumber1Request, base_url, '/v2/quotes/{quoteId}/clientReferenceNumber', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "string_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateClientReferenceNumber1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_contacts_3(self, request: operations.UpdateContacts3Request) -> operations.UpdateContacts3Response:
        r"""Updates Client Contacts for a quote.
        Updates Client Contacts for a quote.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateContacts3Request, base_url, '/v2/quotes/{quoteId}/clientContacts', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "smart_contacts_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateContacts3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SmartContactsDTO])
                res.smart_contacts_dto = out

        return res

    def update_custom_field_3(self, request: operations.UpdateCustomField3Request) -> operations.UpdateCustomField3Response:
        r"""Updates a custom field with a specified key in a quote.
        Updates a custom field with a specified key in a quote.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateCustomField3Request, base_url, '/v2/quotes/{quoteId}/customFields/{key}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "smart_custom_field_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateCustomField3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_expected_delivery_date(self, request: operations.UpdateExpectedDeliveryDateRequest) -> operations.UpdateExpectedDeliveryDateResponse:
        r"""Updates Expected Delivery Date for a quote.
        Updates Expected Delivery Date for a quote.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateExpectedDeliveryDateRequest, base_url, '/v2/quotes/{quoteId}/expectedDeliveryDate', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "time_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateExpectedDeliveryDateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_internal_notes_1(self, request: operations.UpdateInternalNotes1Request) -> operations.UpdateInternalNotes1Response:
        r"""Updates Internal Notes for a quote.
        Updates Internal Notes for a quote.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateInternalNotes1Request, base_url, '/v2/quotes/{quoteId}/internalNotes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "string_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateInternalNotes1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_payable_3(self, request: operations.UpdatePayable3Request) -> operations.UpdatePayable3Response:
        r"""Updates a payable.
        Updates a payable.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdatePayable3Request, base_url, '/v2/quotes/{quoteId}/finance/payables/{payableId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "payable_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatePayable3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PayableDTO])
                res.payable_dto = out

        return res

    def update_quote_expiry(self, request: operations.UpdateQuoteExpiryRequest) -> operations.UpdateQuoteExpiryResponse:
        r"""Updates Quote Expiry Date for a quote.
        Updates Quote Expiry Date for a quote.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateQuoteExpiryRequest, base_url, '/v2/quotes/{quoteId}/quoteExpiry', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "time_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateQuoteExpiryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_receivable_3(self, request: operations.UpdateReceivable3Request) -> operations.UpdateReceivable3Response:
        r"""Updates a receivable.
        Updates a receivable.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateReceivable3Request, base_url, '/v2/quotes/{quoteId}/finance/receivables/{receivableId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "receivable_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateReceivable3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReceivableDTO])
                res.receivable_dto = out

        return res

    def update_source_language_1(self, request: operations.UpdateSourceLanguage1Request) -> operations.UpdateSourceLanguage1Response:
        r"""Updates source language for a quote.
        Updates source language for a quote.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateSourceLanguage1Request, base_url, '/v2/quotes/{quoteId}/sourceLanguage', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "source_language_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSourceLanguage1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_specialization_1(self, request: operations.UpdateSpecialization1Request) -> operations.UpdateSpecialization1Response:
        r"""Updates specialization for a quote.
        Updates specialization for a quote.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateSpecialization1Request, base_url, '/v2/quotes/{quoteId}/specialization', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "specialization_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSpecialization1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_target_languages_1(self, request: operations.UpdateTargetLanguages1Request) -> operations.UpdateTargetLanguages1Response:
        r"""Updates target languages for a quote.
        Updates target languages for a quote.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateTargetLanguages1Request, base_url, '/v2/quotes/{quoteId}/targetLanguages', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "target_languages_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateTargetLanguages1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_vendor_instructions_1(self, request: operations.UpdateVendorInstructions1Request) -> operations.UpdateVendorInstructions1Response:
        r"""Updates instructions for all vendors performing the jobs in a quote.
        Updates instructions for all vendors performing the jobs in a quote. See also \"PUT /jobs/{jobId}/instructions\" for updating instructions for a specific job in a project or quote.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateVendorInstructions1Request, base_url, '/v2/quotes/{quoteId}/vendorInstructions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "string_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateVendorInstructions1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_volume_1(self, request: operations.UpdateVolume1Request) -> operations.UpdateVolume1Response:
        r"""Updates volume for a quote.
        Updates volume for a quote.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateVolume1Request, base_url, '/v2/quotes/{quoteId}/volume', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "big_decimal_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateVolume1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def upload_file_3(self, request: operations.UploadFile3Request) -> operations.UploadFile3Response:
        r"""Uploads file to the quote as a file uploaded by PM.
        Uploads file to the quote as a file uploaded by PM. Only one file can be uploaded at once. When the upload is finished the file has to be added by specifying its category and languages (see \"PUT /v2/quotes/{quoteId}/files/add\" operation).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UploadFile3Request, base_url, '/v2/quotes/{quoteId}/files/upload', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "file_to_upload_dto", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UploadFile3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FileDto1])
                res.file_dto = out

        return res

    