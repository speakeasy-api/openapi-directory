/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * EnterpriseCrmEventbusProtoTaskMetadata - TaskMetadata are attributes that are associated to every common Task we have.
 */
public class EnterpriseCrmEventbusProtoTaskMetadata {
    /**
     * The new task name to replace the current task if it is deprecated. Otherwise, it is the same as the current task name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("activeTaskName")
    public String activeTaskName;

    public EnterpriseCrmEventbusProtoTaskMetadata withActiveTaskName(String activeTaskName) {
        this.activeTaskName = activeTaskName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("admins")
    public EnterpriseCrmEventbusProtoTaskMetadataAdmin[] admins;

    public EnterpriseCrmEventbusProtoTaskMetadata withAdmins(EnterpriseCrmEventbusProtoTaskMetadataAdmin[] admins) {
        this.admins = admins;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category")
    public EnterpriseCrmEventbusProtoTaskMetadataCategoryEnum category;

    public EnterpriseCrmEventbusProtoTaskMetadata withCategory(EnterpriseCrmEventbusProtoTaskMetadataCategoryEnum category) {
        this.category = category;
        return this;
    }
    
    /**
     * The Code Search link to the Task Java file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("codeSearchLink")
    public String codeSearchLink;

    public EnterpriseCrmEventbusProtoTaskMetadata withCodeSearchLink(String codeSearchLink) {
        this.codeSearchLink = codeSearchLink;
        return this;
    }
    
    /**
     * Controls whether JSON workflow parameters are validated against provided schemas before and/or after this task's execution.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultJsonValidationOption")
    public EnterpriseCrmEventbusProtoTaskMetadataDefaultJsonValidationOptionEnum defaultJsonValidationOption;

    public EnterpriseCrmEventbusProtoTaskMetadata withDefaultJsonValidationOption(EnterpriseCrmEventbusProtoTaskMetadataDefaultJsonValidationOptionEnum defaultJsonValidationOption) {
        this.defaultJsonValidationOption = defaultJsonValidationOption;
        return this;
    }
    
    /**
     * Contains the initial configuration of the task with default values set. For now, The string should be compatible to an ASCII-proto format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultSpec")
    public String defaultSpec;

    public EnterpriseCrmEventbusProtoTaskMetadata withDefaultSpec(String defaultSpec) {
        this.defaultSpec = defaultSpec;
        return this;
    }
    
    /**
     * In a few sentences, describe the purpose and usage of the task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public EnterpriseCrmEventbusProtoTaskMetadata withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The string name to show on the task list on the Workflow editor screen. This should be a very short, one to two words name for the task. (e.g. "Send Mail")
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("descriptiveName")
    public String descriptiveName;

    public EnterpriseCrmEventbusProtoTaskMetadata withDescriptiveName(String descriptiveName) {
        this.descriptiveName = descriptiveName;
        return this;
    }
    
    /**
     * Snippet of markdown documentation to embed in the RHP for this task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("docMarkdown")
    public String docMarkdown;

    public EnterpriseCrmEventbusProtoTaskMetadata withDocMarkdown(String docMarkdown) {
        this.docMarkdown = docMarkdown;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalCategory")
    public EnterpriseCrmEventbusProtoTaskMetadataExternalCategoryEnum externalCategory;

    public EnterpriseCrmEventbusProtoTaskMetadata withExternalCategory(EnterpriseCrmEventbusProtoTaskMetadataExternalCategoryEnum externalCategory) {
        this.externalCategory = externalCategory;
        return this;
    }
    
    /**
     * Sequence with which the task in specific category to be displayed in task discovery panel for external users.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalCategorySequence")
    public Integer externalCategorySequence;

    public EnterpriseCrmEventbusProtoTaskMetadata withExternalCategorySequence(Integer externalCategorySequence) {
        this.externalCategorySequence = externalCategorySequence;
        return this;
    }
    
    /**
     * External-facing documention embedded in the RHP for this task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalDocHtml")
    public String externalDocHtml;

    public EnterpriseCrmEventbusProtoTaskMetadata withExternalDocHtml(String externalDocHtml) {
        this.externalDocHtml = externalDocHtml;
        return this;
    }
    
    /**
     * Doc link for external-facing documentation (separate from g3doc).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalDocLink")
    public String externalDocLink;

    public EnterpriseCrmEventbusProtoTaskMetadata withExternalDocLink(String externalDocLink) {
        this.externalDocLink = externalDocLink;
        return this;
    }
    
    /**
     * DEPRECATED: Use external_doc_html.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalDocMarkdown")
    public String externalDocMarkdown;

    public EnterpriseCrmEventbusProtoTaskMetadata withExternalDocMarkdown(String externalDocMarkdown) {
        this.externalDocMarkdown = externalDocMarkdown;
        return this;
    }
    
    /**
     * URL to the associated G3 Doc for the task if available
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("g3DocLink")
    public String g3DocLink;

    public EnterpriseCrmEventbusProtoTaskMetadata withG3DocLink(String g3DocLink) {
        this.g3DocLink = g3DocLink;
        return this;
    }
    
    /**
     * URL to gstatic image icon for this task. This icon shows up on the task list panel along with the task name in the Workflow Editor screen. Use the 24p, 2x, gray color icon image format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iconLink")
    public String iconLink;

    public EnterpriseCrmEventbusProtoTaskMetadata withIconLink(String iconLink) {
        this.iconLink = iconLink;
        return this;
    }
    
    /**
     * The deprecation status of the current task. Default value is false;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isDeprecated")
    public Boolean isDeprecated;

    public EnterpriseCrmEventbusProtoTaskMetadata withIsDeprecated(Boolean isDeprecated) {
        this.isDeprecated = isDeprecated;
        return this;
    }
    
    /**
     * The actual class name or the annotated name of the task. Task Author should initialize this field with value from the getName() method of the Task class.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public EnterpriseCrmEventbusProtoTaskMetadata withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * External-facing documention for standalone IP in pantheon embedded in the RHP for this task. Non null only if different from external_doc_html
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("standaloneExternalDocHtml")
    public String standaloneExternalDocHtml;

    public EnterpriseCrmEventbusProtoTaskMetadata withStandaloneExternalDocHtml(String standaloneExternalDocHtml) {
        this.standaloneExternalDocHtml = standaloneExternalDocHtml;
        return this;
    }
    
    /**
     * Allows author to indicate if the task is ready to use or not. If not set, then it will default to INACTIVE.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public EnterpriseCrmEventbusProtoTaskMetadataStatusEnum status;

    public EnterpriseCrmEventbusProtoTaskMetadata withStatus(EnterpriseCrmEventbusProtoTaskMetadataStatusEnum status) {
        this.status = status;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("system")
    public EnterpriseCrmEventbusProtoTaskMetadataSystemEnum system;

    public EnterpriseCrmEventbusProtoTaskMetadata withSystem(EnterpriseCrmEventbusProtoTaskMetadataSystemEnum system) {
        this.system = system;
        return this;
    }
    
    /**
     * A set of tags that pertain to a particular task. This can be used to improve the searchability of tasks with several names ("REST Caller" vs. "Call REST Endpoint") or to help users find tasks based on related words.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public String[] tags;

    public EnterpriseCrmEventbusProtoTaskMetadata withTags(String[] tags) {
        this.tags = tags;
        return this;
    }
    
    public EnterpriseCrmEventbusProtoTaskMetadata(){}
}
