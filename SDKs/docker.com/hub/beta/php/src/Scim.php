<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Scim 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * List resource types
     * 
     * Returns all resource types supported for the SCIM configuration.
     * 
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20ResourceTypesResponse
     */
	public function getV2Scim20ResourceTypes(
    ): \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20ResourceTypesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/scim/2.0/ResourceTypes');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20ResourceTypesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getV2Scim20ResourceTypes200ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetV2Scim20ResourceTypes200ApplicationScimPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getV2Scim20ResourceTypes401ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetV2Scim20ResourceTypes401ApplicationScimPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getV2Scim20ResourceTypes500ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetV2Scim20ResourceTypes500ApplicationScimPlusJson', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a resource type
     * 
     * Returns a resource type by name.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20ResourceTypesNameRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20ResourceTypesNameResponse
     */
	public function getV2Scim20ResourceTypesName(
        \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20ResourceTypesNameRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20ResourceTypesNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/scim/2.0/ResourceTypes/{name}', \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20ResourceTypesNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20ResourceTypesNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scimResourceType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScimResourceType', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getV2Scim20ResourceTypesName401ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetV2Scim20ResourceTypesName401ApplicationScimPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getV2Scim20ResourceTypesName404ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetV2Scim20ResourceTypesName404ApplicationScimPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getV2Scim20ResourceTypesName500ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetV2Scim20ResourceTypesName500ApplicationScimPlusJson', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List schemas
     * 
     * Returns all schemas supported for the SCIM configuration.
     * 
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20SchemasResponse
     */
	public function getV2Scim20Schemas(
    ): \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20SchemasResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/scim/2.0/Schemas');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20SchemasResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getV2Scim20Schemas200ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetV2Scim20Schemas200ApplicationScimPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getV2Scim20Schemas401ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetV2Scim20Schemas401ApplicationScimPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getV2Scim20Schemas500ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetV2Scim20Schemas500ApplicationScimPlusJson', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a schema
     * 
     * Returns a schema by ID.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20SchemasIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20SchemasIdResponse
     */
	public function getV2Scim20SchemasId(
        \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20SchemasIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20SchemasIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/scim/2.0/Schemas/{id}', \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20SchemasIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20SchemasIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scimSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScimSchema', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getV2Scim20SchemasId401ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetV2Scim20SchemasId401ApplicationScimPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getV2Scim20SchemasId404ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetV2Scim20SchemasId404ApplicationScimPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getV2Scim20SchemasId500ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetV2Scim20SchemasId500ApplicationScimPlusJson', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get service provider config
     * 
     * Returns a service provider config for Docker's configuration.
     * 
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20ServiceProviderConfigResponse
     */
	public function getV2Scim20ServiceProviderConfig(
    ): \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20ServiceProviderConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/scim/2.0/ServiceProviderConfig');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20ServiceProviderConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scimServiceProviderConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScimServiceProviderConfig', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getV2Scim20ServiceProviderConfig401ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetV2Scim20ServiceProviderConfig401ApplicationScimPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getV2Scim20ServiceProviderConfig500ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetV2Scim20ServiceProviderConfig500ApplicationScimPlusJson', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List users
     * 
     * List users, returns paginated users for an organization. Use `startIndex`
     * and `count` query parameters to receive paginated results.
     * 
     * **Sorting:**<br>
     * Sorting lets you to specify the order of returned resources by specifying
     * a combination of `sortBy` and `sortOrder` query parameters.
     * 
     * The `sortBy` parameter specifies the attribute whose value will be used
     * to order the returned responses. The `sortOrder` parameter defines the
     * order in which the `sortBy` parameter is applied. Allowed values are
     * "ascending" and "descending".
     * 
     * **Filtering:**<br>
     * You can request a subset of resources by specifying the `filter` query
     * parameter containing a filter expression. Attribute names and attribute
     * operators used in filters are case insensitive. The filter parameter
     * must contain at least one valid expression. Each expression must contain
     * an attribute name followed by an attribute operator and an optional
     * value.
     * 
     * Supported operators are listed below.
     * 
     * - `eq` equal
     * - `ne` not equal
     * - `co` contains
     * - `sw` starts with
     * - `and` Logical "and"
     * - `or` Logical "or"
     * - `not` "Not" function
     * - `()` Precedence grouping
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20UsersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20UsersResponse
     */
	public function getV2Scim20Users(
        \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20UsersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20UsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/scim/2.0/Users');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetV2Scim20UsersRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20UsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getV2Scim20Users200ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetV2Scim20Users200ApplicationScimPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getV2Scim20Users400ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetV2Scim20Users400ApplicationScimPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getV2Scim20Users401ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetV2Scim20Users401ApplicationScimPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getV2Scim20Users403ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetV2Scim20Users403ApplicationScimPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getV2Scim20Users404ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetV2Scim20Users404ApplicationScimPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getV2Scim20Users500ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetV2Scim20Users500ApplicationScimPlusJson', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a user
     * 
     * Returns a user by ID.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20UsersIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20UsersIdResponse
     */
	public function getV2Scim20UsersId(
        \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20UsersIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20UsersIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/scim/2.0/Users/{id}', \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20UsersIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV2Scim20UsersIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scimUser = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScimUser', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getV2Scim20UsersId400ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetV2Scim20UsersId400ApplicationScimPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getV2Scim20UsersId401ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetV2Scim20UsersId401ApplicationScimPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getV2Scim20UsersId403ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetV2Scim20UsersId403ApplicationScimPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getV2Scim20UsersId404ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetV2Scim20UsersId404ApplicationScimPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getV2Scim20UsersId500ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetV2Scim20UsersId500ApplicationScimPlusJson', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create user
     * 
     * Creates a user. If the user already exists by email, they are assigned
     * to the organization on the "company" team.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV2Scim20UsersRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV2Scim20UsersResponse
     */
	public function postV2Scim20Users(
        \OpenAPI\OpenAPI\Models\Operations\PostV2Scim20UsersRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV2Scim20UsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/scim/2.0/Users');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV2Scim20UsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scimUser = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScimUser', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postV2Scim20Users400ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostV2Scim20Users400ApplicationScimPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postV2Scim20Users401ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostV2Scim20Users401ApplicationScimPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postV2Scim20Users403ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostV2Scim20Users403ApplicationScimPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postV2Scim20Users404ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostV2Scim20Users404ApplicationScimPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postV2Scim20Users409ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostV2Scim20Users409ApplicationScimPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postV2Scim20Users500ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostV2Scim20Users500ApplicationScimPlusJson', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a user
     * 
     * Updates a user. Use this route to change the user's name, activate,
     * and deactivate the user.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutV2Scim20UsersIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutV2Scim20UsersIdResponse
     */
	public function putV2Scim20UsersId(
        \OpenAPI\OpenAPI\Models\Operations\PutV2Scim20UsersIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutV2Scim20UsersIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/scim/2.0/Users/{id}', \OpenAPI\OpenAPI\Models\Operations\PutV2Scim20UsersIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutV2Scim20UsersIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scimUser = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScimUser', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putV2Scim20UsersId400ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutV2Scim20UsersId400ApplicationScimPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putV2Scim20UsersId401ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutV2Scim20UsersId401ApplicationScimPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putV2Scim20UsersId403ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutV2Scim20UsersId403ApplicationScimPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putV2Scim20UsersId404ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutV2Scim20UsersId404ApplicationScimPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putV2Scim20UsersId409ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutV2Scim20UsersId409ApplicationScimPlusJson', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putV2Scim20UsersId500ApplicationScimPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutV2Scim20UsersId500ApplicationScimPlusJson', 'json');
            }
        }

        return $response;
    }
}