/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Federation - Represents a federation of multiple backend metastores.
 */
public class Federation {
    /**
     * A map from BackendMetastore rank to BackendMetastores from which the federation service serves metadata at query time. The map key represents the order in which BackendMetastores should be evaluated to resolve database names at query time and should be greater than or equal to zero. A BackendMetastore with a lower number will be evaluated before a BackendMetastore with a higher number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backendMetastores")
    public java.util.Map<String, BackendMetastore> backendMetastores;

    public Federation withBackendMetastores(java.util.Map<String, BackendMetastore> backendMetastores) {
        this.backendMetastores = backendMetastores;
        return this;
    }
    
    /**
     * Output only. The time when the metastore federation was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;

    public Federation withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Output only. The federation endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endpointUri")
    public String endpointUri;

    public Federation withEndpointUri(String endpointUri) {
        this.endpointUri = endpointUri;
        return this;
    }
    
    /**
     * User-defined labels for the metastore federation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public Federation withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Immutable. The relative resource name of the federation, of the form: projects/{project_number}/locations/{location_id}/federations/{federation_id}`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Federation withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Output only. The current state of the federation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public FederationStateEnum state;

    public Federation withState(FederationStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Output only. Additional information about the current state of the metastore federation, if available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stateMessage")
    public String stateMessage;

    public Federation withStateMessage(String stateMessage) {
        this.stateMessage = stateMessage;
        return this;
    }
    
    /**
     * Output only. The globally unique resource identifier of the metastore federation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uid")
    public String uid;

    public Federation withUid(String uid) {
        this.uid = uid;
        return this;
    }
    
    /**
     * Output only. The time when the metastore federation was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;

    public Federation withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
    /**
     * Immutable. The Apache Hive metastore version of the federation. All backend metastore versions must be compatible with the federation version.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public String version;

    public Federation withVersion(String version) {
        this.version = version;
        return this;
    }
    
    public Federation(){}
}
