/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetSpotByIdRequest extends SpeakeasyBase {
  /**
   * Unique identifier
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: string;
}

export class GetSpotById200ApplicationJson3AntennaReportLocations extends SpeakeasyBase {
  /**
   * Antenna number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "antenna_number" })
  antennaNumber?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "report_location" })
  @Type(() => shared.Location)
  reportLocation?: shared.Location;

  /**
   * Unique identifier for resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "report_location_id" })
  reportLocationId?: string;

  /**
   * Url to the individual resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "report_location_url" })
  reportLocationUrl?: string;
}

export class GetSpotById200ApplicationJson3 extends SpeakeasyBase {
  /**
   * You may configure this field to an object which couples individual antenna ports to locations.
   */
  @SpeakeasyMetadata({
    elemType: GetSpotById200ApplicationJson3AntennaReportLocations,
  })
  @Expose({ name: "antenna_report_locations" })
  @Type(() => GetSpotById200ApplicationJson3AntennaReportLocations)
  antennaReportLocations?: GetSpotById200ApplicationJson3AntennaReportLocations[];

  /**
   * JSON object with possible settings. Refer to individual service documentation for a good overview.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "config" })
  config?: Record<string, any>;

  /**
   * Object containing the new configuration. This will be applied automatically when the values are valid.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "config_request" })
  configRequest?: Record<string, any>;

  /**
   * Last known geolocation estimate of this object. Not guaranteed to be included in response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "geo_coords" })
  @Type(() => shared.GeoCoords)
  geoCoords?: shared.GeoCoords;

  /**
   * Unique identifier for resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Whether or not this resource is actively connected to the Brain.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_online" })
  isOnline?: boolean;

  /**
   * Url to the individual resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "report_location_url" })
  reportLocationUrl?: string;

  /**
   * The total number of HTTP requests that this resource has done.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "request_counter" })
  requestCounter?: number;

  /**
   * Senses are values that in most cases are generated inside the spot (number of presences, spot booted etc.). We also have a few senses that can be controlled by the brain. See [Sense & Control](https://intellifi.zendesk.com/hc/en-us/sections/360001568254) documentation for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "senses" })
  senses?: Record<string, any>;

  /**
   * Object containing the new senses configuration. See [Sense & Control](https://intellifi.zendesk.com/hc/en-us/sections/360001568254) documentation for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "senses_request" })
  sensesRequest?: Record<string, any>;

  /**
   * This is the fixed and unique spot number. It's assigned during the production process and used to identify an individual device during its lifetime.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serial_number" })
  serialNumber?: number;

  /**
   * An object with specific information about the spot, directly send by the spot itself when the connection is created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: any;

  /**
   * [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time_created" })
  timeCreated?: string;

  /**
   * [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was updated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time_updated" })
  timeUpdated?: string;

  /**
   * Url to the individual resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

export class GetSpotById200ApplicationJson2AntennaReportLocations extends SpeakeasyBase {
  /**
   * Antenna number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "antenna_number" })
  antennaNumber?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "report_location" })
  @Type(() => shared.Location)
  reportLocation?: shared.Location;

  /**
   * Unique identifier for resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "report_location_id" })
  reportLocationId?: string;

  /**
   * Url to the individual resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "report_location_url" })
  reportLocationUrl?: string;
}

export class GetSpotById200ApplicationJson2 extends SpeakeasyBase {
  /**
   * You may configure this field to an object which couples individual antenna ports to locations.
   */
  @SpeakeasyMetadata({
    elemType: GetSpotById200ApplicationJson2AntennaReportLocations,
  })
  @Expose({ name: "antenna_report_locations" })
  @Type(() => GetSpotById200ApplicationJson2AntennaReportLocations)
  antennaReportLocations?: GetSpotById200ApplicationJson2AntennaReportLocations[];

  /**
   * JSON object with possible settings. Refer to individual service documentation for a good overview.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "config" })
  config?: Record<string, any>;

  /**
   * Object containing the new configuration. This will be applied automatically when the values are valid.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "config_request" })
  configRequest?: Record<string, any>;

  /**
   * Last known geolocation estimate of this object. Not guaranteed to be included in response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "geo_coords" })
  @Type(() => shared.GeoCoords)
  geoCoords?: shared.GeoCoords;

  /**
   * Unique identifier for resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Whether or not this resource is actively connected to the Brain.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_online" })
  isOnline?: boolean;

  /**
   * Unique identifier for resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "report_location_id" })
  reportLocationId?: string;

  /**
   * The total number of HTTP requests that this resource has done.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "request_counter" })
  requestCounter?: number;

  /**
   * Senses are values that in most cases are generated inside the spot (number of presences, spot booted etc.). We also have a few senses that can be controlled by the brain. See [Sense & Control](https://intellifi.zendesk.com/hc/en-us/sections/360001568254) documentation for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "senses" })
  senses?: Record<string, any>;

  /**
   * Object containing the new senses configuration. See [Sense & Control](https://intellifi.zendesk.com/hc/en-us/sections/360001568254) documentation for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "senses_request" })
  sensesRequest?: Record<string, any>;

  /**
   * This is the fixed and unique spot number. It's assigned during the production process and used to identify an individual device during its lifetime.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serial_number" })
  serialNumber?: number;

  /**
   * An object with specific information about the spot, directly send by the spot itself when the connection is created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: any;

  /**
   * [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time_created" })
  timeCreated?: string;

  /**
   * [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was updated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time_updated" })
  timeUpdated?: string;

  /**
   * Url to the individual resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

export class GetSpotById200ApplicationJson1AntennaReportLocations extends SpeakeasyBase {
  /**
   * Antenna number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "antenna_number" })
  antennaNumber?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "report_location" })
  @Type(() => shared.Location)
  reportLocation?: shared.Location;

  /**
   * Unique identifier for resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "report_location_id" })
  reportLocationId?: string;

  /**
   * Url to the individual resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "report_location_url" })
  reportLocationUrl?: string;
}

export class GetSpotById200ApplicationJson1 extends SpeakeasyBase {
  /**
   * You may configure this field to an object which couples individual antenna ports to locations.
   */
  @SpeakeasyMetadata({
    elemType: GetSpotById200ApplicationJson1AntennaReportLocations,
  })
  @Expose({ name: "antenna_report_locations" })
  @Type(() => GetSpotById200ApplicationJson1AntennaReportLocations)
  antennaReportLocations?: GetSpotById200ApplicationJson1AntennaReportLocations[];

  /**
   * JSON object with possible settings. Refer to individual service documentation for a good overview.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "config" })
  config?: Record<string, any>;

  /**
   * Object containing the new configuration. This will be applied automatically when the values are valid.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "config_request" })
  configRequest?: Record<string, any>;

  /**
   * Last known geolocation estimate of this object. Not guaranteed to be included in response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "geo_coords" })
  @Type(() => shared.GeoCoords)
  geoCoords?: shared.GeoCoords;

  /**
   * Unique identifier for resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Whether or not this resource is actively connected to the Brain.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_online" })
  isOnline?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "report_location" })
  @Type(() => shared.Location)
  reportLocation?: shared.Location;

  /**
   * The total number of HTTP requests that this resource has done.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "request_counter" })
  requestCounter?: number;

  /**
   * Senses are values that in most cases are generated inside the spot (number of presences, spot booted etc.). We also have a few senses that can be controlled by the brain. See [Sense & Control](https://intellifi.zendesk.com/hc/en-us/sections/360001568254) documentation for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "senses" })
  senses?: Record<string, any>;

  /**
   * Object containing the new senses configuration. See [Sense & Control](https://intellifi.zendesk.com/hc/en-us/sections/360001568254) documentation for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "senses_request" })
  sensesRequest?: Record<string, any>;

  /**
   * This is the fixed and unique spot number. It's assigned during the production process and used to identify an individual device during its lifetime.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serial_number" })
  serialNumber?: number;

  /**
   * An object with specific information about the spot, directly send by the spot itself when the connection is created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: any;

  /**
   * [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time_created" })
  timeCreated?: string;

  /**
   * [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was updated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time_updated" })
  timeUpdated?: string;

  /**
   * Url to the individual resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

export class GetSpotByIdResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * A JSON object containing the spot
   */
  @SpeakeasyMetadata()
  spotGet?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
