// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ReleaseChannelChannelEnum - channel specifies which release channel the cluster is subscribed to.
type ReleaseChannelChannelEnum string

const (
	ReleaseChannelChannelEnumUnspecified ReleaseChannelChannelEnum = "UNSPECIFIED"
	ReleaseChannelChannelEnumRapid       ReleaseChannelChannelEnum = "RAPID"
	ReleaseChannelChannelEnumRegular     ReleaseChannelChannelEnum = "REGULAR"
	ReleaseChannelChannelEnumStable      ReleaseChannelChannelEnum = "STABLE"
)

func (e ReleaseChannelChannelEnum) ToPointer() *ReleaseChannelChannelEnum {
	return &e
}

func (e *ReleaseChannelChannelEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNSPECIFIED":
		fallthrough
	case "RAPID":
		fallthrough
	case "REGULAR":
		fallthrough
	case "STABLE":
		*e = ReleaseChannelChannelEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleaseChannelChannelEnum: %v", v)
	}
}

// ReleaseChannel - ReleaseChannel indicates which release channel a cluster is subscribed to. Release channels are arranged in order of risk. When a cluster is subscribed to a release channel, Google maintains both the master version and the node version. Node auto-upgrade defaults to true and cannot be disabled.
type ReleaseChannel struct {
	// channel specifies which release channel the cluster is subscribed to.
	Channel *ReleaseChannelChannelEnum `json:"channel,omitempty"`
}
