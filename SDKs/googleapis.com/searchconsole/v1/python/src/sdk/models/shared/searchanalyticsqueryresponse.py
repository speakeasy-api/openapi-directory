"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import apidatarow as shared_apidatarow
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class SearchAnalyticsQueryResponseResponseAggregationTypeEnum(str, Enum):
    r"""How the results were aggregated."""
    AUTO = 'AUTO'
    BY_PROPERTY = 'BY_PROPERTY'
    BY_PAGE = 'BY_PAGE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchAnalyticsQueryResponse:
    r"""A list of rows, one per result, grouped by key. Metrics in each row are aggregated for all data grouped by that key either by page or property, as specified by the aggregation type parameter."""
    
    response_aggregation_type: Optional[SearchAnalyticsQueryResponseResponseAggregationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('responseAggregationType'), 'exclude': lambda f: f is None }})
    r"""How the results were aggregated."""  
    rows: Optional[list[shared_apidatarow.APIDataRow]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rows'), 'exclude': lambda f: f is None }})
    r"""A list of rows grouped by the key values in the order given in the query."""  
    