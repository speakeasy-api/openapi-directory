// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SasPortalNrqzValidationStateEnum - State of the NRQZ validation info.
type SasPortalNrqzValidationStateEnum string

const (
	SasPortalNrqzValidationStateEnumStateUnspecified SasPortalNrqzValidationStateEnum = "STATE_UNSPECIFIED"
	SasPortalNrqzValidationStateEnumDraft            SasPortalNrqzValidationStateEnum = "DRAFT"
	SasPortalNrqzValidationStateEnumFinal            SasPortalNrqzValidationStateEnum = "FINAL"
)

func (e *SasPortalNrqzValidationStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "DRAFT":
		fallthrough
	case "FINAL":
		*e = SasPortalNrqzValidationStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SasPortalNrqzValidationStateEnum: %s", s)
	}
}

// SasPortalNrqzValidation - Information about National Radio Quiet Zone validation.
type SasPortalNrqzValidation struct {
	// Validation case ID.
	CaseID *string `json:"caseId,omitempty"`
	// CPI who signed the validation.
	CpiID *string `json:"cpiId,omitempty"`
	// Device latitude that's associated with the validation.
	Latitude *float64 `json:"latitude,omitempty"`
	// Device longitude that's associated with the validation.
	Longitude *float64 `json:"longitude,omitempty"`
	// State of the NRQZ validation info.
	State *SasPortalNrqzValidationStateEnum `json:"state,omitempty"`
}
