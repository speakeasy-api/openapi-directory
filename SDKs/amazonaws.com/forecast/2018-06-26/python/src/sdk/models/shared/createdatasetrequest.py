"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import datasettype_enum as shared_datasettype_enum
from ..shared import domain_enum as shared_domain_enum
from ..shared import encryptionconfig as shared_encryptionconfig
from ..shared import schema as shared_schema
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateDatasetRequest:
    
    dataset_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DatasetName') }})  
    dataset_type: shared_datasettype_enum.DatasetTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DatasetType') }})  
    domain: shared_domain_enum.DomainEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Domain') }})  
    schema: shared_schema.Schema = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Schema') }})  
    data_frequency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataFrequency'), 'exclude': lambda f: f is None }})  
    encryption_config: Optional[shared_encryptionconfig.EncryptionConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EncryptionConfig'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    