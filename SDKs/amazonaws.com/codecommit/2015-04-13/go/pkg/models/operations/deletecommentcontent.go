// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeleteCommentContentXAmzTargetEnum
type DeleteCommentContentXAmzTargetEnum string

const (
	DeleteCommentContentXAmzTargetEnumCodeCommit20150413DeleteCommentContent DeleteCommentContentXAmzTargetEnum = "CodeCommit_20150413.DeleteCommentContent"
)

func (e *DeleteCommentContentXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeCommit_20150413.DeleteCommentContent":
		*e = DeleteCommentContentXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteCommentContentXAmzTargetEnum: %s", s)
	}
}

type DeleteCommentContentRequest struct {
	DeleteCommentContentInput shared.DeleteCommentContentInput   `request:"mediaType=application/json"`
	XAmzAlgorithm             *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256         *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential            *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                  *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken         *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature             *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders         *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                DeleteCommentContentXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeleteCommentContentResponse struct {
	// CommentDeletedException
	CommentDeletedException interface{}
	// CommentDoesNotExistException
	CommentDoesNotExistException interface{}
	// CommentIdRequiredException
	CommentIDRequiredException interface{}
	ContentType                string
	// Success
	DeleteCommentContentOutput *shared.DeleteCommentContentOutput
	// InvalidCommentIdException
	InvalidCommentIDException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
