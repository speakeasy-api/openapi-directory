/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Proposals {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get a proposal given its id
   */
  adexchangebuyerProposalsGet(
    req: operations.AdexchangebuyerProposalsGetRequest,
    security: operations.AdexchangebuyerProposalsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdexchangebuyerProposalsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdexchangebuyerProposalsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/proposals/{proposalId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdexchangebuyerProposalsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdexchangebuyerProposalsGetResponse =
        new operations.AdexchangebuyerProposalsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.proposal = utils.objectToClass(httpRes?.data, shared.Proposal);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create the given list of proposals
   */
  adexchangebuyerProposalsInsert(
    req: operations.AdexchangebuyerProposalsInsertRequest,
    security: operations.AdexchangebuyerProposalsInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdexchangebuyerProposalsInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdexchangebuyerProposalsInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/proposals/insert";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "createOrdersRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdexchangebuyerProposalsInsertSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdexchangebuyerProposalsInsertResponse =
        new operations.AdexchangebuyerProposalsInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createOrdersResponse = utils.objectToClass(
              httpRes?.data,
              shared.CreateOrdersResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update the given proposal. This method supports patch semantics.
   */
  adexchangebuyerProposalsPatch(
    req: operations.AdexchangebuyerProposalsPatchRequest,
    security: operations.AdexchangebuyerProposalsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdexchangebuyerProposalsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdexchangebuyerProposalsPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/proposals/{proposalId}/{revisionNumber}/{updateAction}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "proposal",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdexchangebuyerProposalsPatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdexchangebuyerProposalsPatchResponse =
        new operations.AdexchangebuyerProposalsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.proposal = utils.objectToClass(httpRes?.data, shared.Proposal);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Search for proposals using pql query
   */
  adexchangebuyerProposalsSearch(
    req: operations.AdexchangebuyerProposalsSearchRequest,
    security: operations.AdexchangebuyerProposalsSearchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdexchangebuyerProposalsSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdexchangebuyerProposalsSearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/proposals/search";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdexchangebuyerProposalsSearchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdexchangebuyerProposalsSearchResponse =
        new operations.AdexchangebuyerProposalsSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getOrdersResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetOrdersResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update the given proposal to indicate that setup has been completed.
   */
  adexchangebuyerProposalsSetupcomplete(
    req: operations.AdexchangebuyerProposalsSetupcompleteRequest,
    security: operations.AdexchangebuyerProposalsSetupcompleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdexchangebuyerProposalsSetupcompleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdexchangebuyerProposalsSetupcompleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/proposals/{proposalId}/setupcomplete",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdexchangebuyerProposalsSetupcompleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdexchangebuyerProposalsSetupcompleteResponse =
        new operations.AdexchangebuyerProposalsSetupcompleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Update the given proposal
   */
  adexchangebuyerProposalsUpdate(
    req: operations.AdexchangebuyerProposalsUpdateRequest,
    security: operations.AdexchangebuyerProposalsUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdexchangebuyerProposalsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdexchangebuyerProposalsUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/proposals/{proposalId}/{revisionNumber}/{updateAction}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "proposal",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdexchangebuyerProposalsUpdateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdexchangebuyerProposalsUpdateResponse =
        new operations.AdexchangebuyerProposalsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.proposal = utils.objectToClass(httpRes?.data, shared.Proposal);
          }
          break;
      }

      return res;
    });
  }
}
