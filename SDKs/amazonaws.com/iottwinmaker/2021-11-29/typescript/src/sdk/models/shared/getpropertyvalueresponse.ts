/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { DataValue } from "./datavalue";
import { PropertyLatestValue } from "./propertylatestvalue";
import { Expose, Transform } from "class-transformer";

/**
 * Success
 */
export class GetPropertyValueResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "nextToken" })
  nextToken?: string;

  @SpeakeasyMetadata({ elemType: PropertyLatestValue })
  @Expose({ name: "propertyValues" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, PropertyLatestValue> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], PropertyLatestValue);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  propertyValues?: Record<string, PropertyLatestValue>;

  @SpeakeasyMetadata({ elemType: DataValue, elemDepth: 3 })
  @Expose({ name: "tabularPropertyValues" })
  @Transform(
    ({ value }) => {
      const arr: Record<string, DataValue>[][] = [];
      for (const item of value) {
        arr.push(objectToClass(item, DataValue));
      }
      return arr;
    },
    { toClassOnly: true }
  )
  tabularPropertyValues?: Record<string, DataValue>[][];
}
