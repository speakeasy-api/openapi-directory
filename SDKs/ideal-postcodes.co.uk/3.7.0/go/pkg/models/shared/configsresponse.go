// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConfigsResponseCodeEnum string

const (
	ConfigsResponseCodeEnumTwoThousand ConfigsResponseCodeEnum = "2000"
)

func (e *ConfigsResponseCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2000":
		*e = ConfigsResponseCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfigsResponseCodeEnum: %s", s)
	}
}

type ConfigsResponseMessageEnum string

const (
	ConfigsResponseMessageEnumSuccess ConfigsResponseMessageEnum = "Success"
)

func (e *ConfigsResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Success":
		*e = ConfigsResponseMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfigsResponseMessageEnum: %s", s)
	}
}

// ConfigsResponseResult - List of configurations
type ConfigsResponseResult struct {
	Configs []Config `json:"configs"`
}

// ConfigsResponse - Success
type ConfigsResponse struct {
	Code    ConfigsResponseCodeEnum    `json:"code"`
	Message ConfigsResponseMessageEnum `json:"message"`
	// List of configurations
	Result ConfigsResponseResult `json:"result"`
}
