/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class RepoSearchQueryParams {
    /**
     * show only archived, non-archived or all repositories (defaults to all)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=archived")
    public Boolean archived;
    public RepoSearchQueryParams withArchived(Boolean archived) {
        this.archived = archived;
        return this;
    }
    
    /**
     * if `uid` is given, search only for repos that the user owns
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=exclusive")
    public Boolean exclusive;
    public RepoSearchQueryParams withExclusive(Boolean exclusive) {
        this.exclusive = exclusive;
        return this;
    }
    
    /**
     * include search of keyword within repository description
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=includeDesc")
    public Boolean includeDesc;
    public RepoSearchQueryParams withIncludeDesc(Boolean includeDesc) {
        this.includeDesc = includeDesc;
        return this;
    }
    
    /**
     * show only pubic, private or all repositories (defaults to all)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=is_private")
    public Boolean isPrivate;
    public RepoSearchQueryParams withIsPrivate(Boolean isPrivate) {
        this.isPrivate = isPrivate;
        return this;
    }
    
    /**
     * page size of results
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    public Long limit;
    public RepoSearchQueryParams withLimit(Long limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * type of repository to search for. Supported values are "fork", "source", "mirror" and "collaborative"
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=mode")
    public String mode;
    public RepoSearchQueryParams withMode(String mode) {
        this.mode = mode;
        return this;
    }
    
    /**
     * sort order, either "asc" (ascending) or "desc" (descending). Default is "asc", ignored if "sort" is not specified.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=order")
    public String order;
    public RepoSearchQueryParams withOrder(String order) {
        this.order = order;
        return this;
    }
    
    /**
     * page number of results to return (1-based)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    public Long page;
    public RepoSearchQueryParams withPage(Long page) {
        this.page = page;
        return this;
    }
    
    /**
     * repo owner to prioritize in the results
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=priority_owner_id")
    public Long priorityOwnerId;
    public RepoSearchQueryParams withPriorityOwnerId(Long priorityOwnerId) {
        this.priorityOwnerId = priorityOwnerId;
        return this;
    }
    
    /**
     * include private repositories this user has access to (defaults to true)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=private")
    public Boolean private_;
    public RepoSearchQueryParams withPrivate(Boolean private_) {
        this.private_ = private_;
        return this;
    }
    
    /**
     * keyword
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=q")
    public String q;
    public RepoSearchQueryParams withQ(String q) {
        this.q = q;
        return this;
    }
    
    /**
     * sort repos by attribute. Supported values are "alpha", "created", "updated", "size", and "id". Default is "alpha"
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    public String sort;
    public RepoSearchQueryParams withSort(String sort) {
        this.sort = sort;
        return this;
    }
    
    /**
     * search only for repos that the user with the given id has starred
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=starredBy")
    public Long starredBy;
    public RepoSearchQueryParams withStarredBy(Long starredBy) {
        this.starredBy = starredBy;
        return this;
    }
    
    /**
     * search only for repos that belong to the given team id
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=team_id")
    public Long teamId;
    public RepoSearchQueryParams withTeamId(Long teamId) {
        this.teamId = teamId;
        return this;
    }
    
    /**
     * include template repositories this user has access to (defaults to true)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=template")
    public Boolean template;
    public RepoSearchQueryParams withTemplate(Boolean template) {
        this.template = template;
        return this;
    }
    
    /**
     * Limit search to repositories with keyword as topic
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=topic")
    public Boolean topic;
    public RepoSearchQueryParams withTopic(Boolean topic) {
        this.topic = topic;
        return this;
    }
    
    /**
     * search only for repos that the user with the given id owns or contributes to
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=uid")
    public Long uid;
    public RepoSearchQueryParams withUid(Long uid) {
        this.uid = uid;
        return this;
    }
    
}
