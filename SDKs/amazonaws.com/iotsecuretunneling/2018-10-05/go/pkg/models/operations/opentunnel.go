// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// OpenTunnelXAmzTargetEnum
type OpenTunnelXAmzTargetEnum string

const (
	OpenTunnelXAmzTargetEnumIoTSecuredTunnelingOpenTunnel OpenTunnelXAmzTargetEnum = "IoTSecuredTunneling.OpenTunnel"
)

func (e *OpenTunnelXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "IoTSecuredTunneling.OpenTunnel":
		*e = OpenTunnelXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenTunnelXAmzTargetEnum: %s", s)
	}
}

type OpenTunnelHeaders struct {
	XAmzAlgorithm     *string                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        OpenTunnelXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type OpenTunnelRequest struct {
	Headers OpenTunnelHeaders
	Request shared.OpenTunnelRequest `request:"mediaType=application/json"`
}

type OpenTunnelResponse struct {
	ContentType string
	// LimitExceededException
	LimitExceededException interface{}
	// Success
	OpenTunnelResponse *shared.OpenTunnelResponse
	StatusCode         int
	RawResponse        *http.Response
}
