"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class CodePushDeploymentsCreateSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodePushDeploymentsCreateRequestBodyLatestReleaseDiffPackageMap:
    
    size: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    
class CodePushDeploymentsCreateRequestBodyLatestReleaseReleaseMethodEnum(str, Enum):
    r"""The release method is unknown if unspecified"""
    UPLOAD = 'Upload'
    PROMOTE = 'Promote'
    ROLLBACK = 'Rollback'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodePushDeploymentsCreateRequestBodyLatestRelease:
    
    blob_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blob_url'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    diff_package_map: Optional[dict[str, CodePushDeploymentsCreateRequestBodyLatestReleaseDiffPackageMap]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diff_package_map'), 'exclude': lambda f: f is None }})  
    is_disabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_disabled'), 'exclude': lambda f: f is None }})  
    is_mandatory: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_mandatory'), 'exclude': lambda f: f is None }})  
    label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label'), 'exclude': lambda f: f is None }})  
    original_deployment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('original_deployment'), 'exclude': lambda f: f is None }})
    r"""Set on 'Promote'"""  
    original_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('original_label'), 'exclude': lambda f: f is None }})
    r"""Set on 'Promote' and 'Rollback'"""  
    package_hash: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('package_hash'), 'exclude': lambda f: f is None }})  
    release_method: Optional[CodePushDeploymentsCreateRequestBodyLatestReleaseReleaseMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('release_method'), 'exclude': lambda f: f is None }})
    r"""The release method is unknown if unspecified"""  
    released_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('released_by'), 'exclude': lambda f: f is None }})  
    rollout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rollout'), 'exclude': lambda f: f is None }})  
    size: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})  
    target_binary_range: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target_binary_range'), 'exclude': lambda f: f is None }})  
    upload_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upload_time'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodePushDeploymentsCreateRequestBody:
    r"""Deployment to be created"""
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})  
    latest_release: Optional[CodePushDeploymentsCreateRequestBodyLatestRelease] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latest_release'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class CodePushDeploymentsCreateRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    request_body: CodePushDeploymentsCreateRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Deployment to be created"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodePushDeploymentsCreateDefaultApplicationJSON:
    r"""Error"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodePushDeploymentsCreate201ApplicationJSONLatestReleaseDiffPackageMap:
    
    size: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    
class CodePushDeploymentsCreate201ApplicationJSONLatestReleaseReleaseMethodEnum(str, Enum):
    r"""The release method is unknown if unspecified"""
    UPLOAD = 'Upload'
    PROMOTE = 'Promote'
    ROLLBACK = 'Rollback'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodePushDeploymentsCreate201ApplicationJSONLatestRelease:
    
    blob_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blob_url'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    diff_package_map: Optional[dict[str, CodePushDeploymentsCreate201ApplicationJSONLatestReleaseDiffPackageMap]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diff_package_map'), 'exclude': lambda f: f is None }})  
    is_disabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_disabled'), 'exclude': lambda f: f is None }})  
    is_mandatory: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_mandatory'), 'exclude': lambda f: f is None }})  
    label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label'), 'exclude': lambda f: f is None }})  
    original_deployment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('original_deployment'), 'exclude': lambda f: f is None }})
    r"""Set on 'Promote'"""  
    original_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('original_label'), 'exclude': lambda f: f is None }})
    r"""Set on 'Promote' and 'Rollback'"""  
    package_hash: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('package_hash'), 'exclude': lambda f: f is None }})  
    release_method: Optional[CodePushDeploymentsCreate201ApplicationJSONLatestReleaseReleaseMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('release_method'), 'exclude': lambda f: f is None }})
    r"""The release method is unknown if unspecified"""  
    released_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('released_by'), 'exclude': lambda f: f is None }})  
    rollout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rollout'), 'exclude': lambda f: f is None }})  
    size: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})  
    target_binary_range: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target_binary_range'), 'exclude': lambda f: f is None }})  
    upload_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upload_time'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodePushDeploymentsCreate201ApplicationJSON:
    r"""Success"""
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})  
    latest_release: Optional[CodePushDeploymentsCreate201ApplicationJSONLatestRelease] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latest_release'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class CodePushDeploymentsCreateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    code_push_deployments_create_201_application_json_object: Optional[CodePushDeploymentsCreate201ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    code_push_deployments_create_default_application_json_object: Optional[CodePushDeploymentsCreateDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    