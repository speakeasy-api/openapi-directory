<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Workspaces 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a webhook for a workspace
     * 
     * Deletes the specified webhook subscription from the given workspace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspacesWorkspaceHooksUidRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspacesWorkspaceHooksUidSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspacesWorkspaceHooksUidResponse
     */
	public function deleteWorkspacesWorkspaceHooksUid(
        \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspacesWorkspaceHooksUidRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspacesWorkspaceHooksUidSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspacesWorkspaceHooksUidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workspaces/{workspace}/hooks/{uid}', \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspacesWorkspaceHooksUidRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspacesWorkspaceHooksUidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List workspaces for the current user
     * 
     * Returns an object for each workspace the caller is a member of, and
     * their effective role - the highest level of privilege the caller has.
     * If a user is a member of multiple groups with distinct roles, only the
     * highest level is returned.
     * 
     * Permissions can be:
     * 
     * * `owner`
     * * `collaborator`
     * * `member`
     * 
     * **The `collaborator` role is being removed from the Bitbucket Cloud API. For more information,
     * see the [deprecation announcement](/cloud/bitbucket/deprecation-notice-collaborator-role/).**
     * 
     * Example:
     * 
     * ```
     * $ curl https://api.bitbucket.org/2.0/user/permissions/workspaces
     * 
     * {
     *   "pagelen": 10,
     *   "page": 1,
     *   "size": 1,
     *   "values": [
     *     {
     *       "type": "workspace_membership",
     *       "permission": "owner",
     *       "last_accessed": "2019-03-07T12:35:02.900024+00:00",
     *       "added_on": "2018-10-11T17:42:02.961424+00:00",
     *       "user": {
     *         "type": "user",
     *         "uuid": "{470c176d-3574-44ea-bb41-89e8638bcca4}",
     *         "nickname": "evzijst",
     *         "display_name": "Erik van Zijst",
     *       },
     *       "workspace": {
     *         "type": "workspace",
     *         "uuid": "{a15fb181-db1f-48f7-b41f-e1eff06929d6}",
     *         "slug": "bbworkspace1",
     *         "name": "Atlassian Bitbucket",
     *       }
     *     }
     *   ]
     * }
     * ```
     * 
     * Results may be further [filtered or sorted](/cloud/bitbucket/rest/intro/#filtering) by
     * workspace or permission by adding the following query string parameters:
     * 
     * * `q=workspace.slug="bbworkspace1"` or `q=permission="owner"`
     * * `sort=workspace.slug`
     * 
     * Note that the query parameter values need to be URL escaped so that `=`
     * would become `%3D`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserPermissionsWorkspacesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserPermissionsWorkspacesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserPermissionsWorkspacesResponse
     */
	public function getUserPermissionsWorkspaces(
        \OpenAPI\OpenAPI\Models\Operations\GetUserPermissionsWorkspacesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetUserPermissionsWorkspacesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserPermissionsWorkspacesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/permissions/workspaces');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUserPermissionsWorkspacesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserPermissionsWorkspacesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedWorkspaceMemberships = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedWorkspaceMemberships', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List workspaces for user
     * 
     * Returns a list of workspaces accessible by the authenticated user.
     * 
     * Example:
     * 
     * ```
     * $ curl https://api.bitbucket.org/2.0/workspaces
     * 
     * {
     *   "pagelen": 10,
     *   "page": 1,
     *   "size": 1,
     *   "values": [
     *     {
     *         "uuid": "{a15fb181-db1f-48f7-b41f-e1eff06929d6}",
     *         "links": {
     *             "owners": {
     *                 "href": "https://api.bitbucket.org/2.0/workspaces/bbworkspace1/members?q=permission%3D%22owner%22"
     *             },
     *             "self": {
     *                 "href": "https://api.bitbucket.org/2.0/workspaces/bbworkspace1"
     *             },
     *             "repositories": {
     *                 "href": "https://api.bitbucket.org/2.0/repositories/bbworkspace1"
     *             },
     *             "snippets": {
     *                 "href": "https://api.bitbucket.org/2.0/snippets/bbworkspace1"
     *             },
     *             "html": {
     *                 "href": "https://bitbucket.org/bbworkspace1/"
     *             },
     *             "avatar": {
     *                 "href": "https://bitbucket.org/workspaces/bbworkspace1/avatar/?ts=1543465801"
     *             },
     *             "members": {
     *                 "href": "https://api.bitbucket.org/2.0/workspaces/bbworkspace1/members"
     *             },
     *             "projects": {
     *                 "href": "https://api.bitbucket.org/2.0/workspaces/bbworkspace1/projects"
     *             }
     *         },
     *         "created_on": "2018-11-14T19:15:05.058566+00:00",
     *         "type": "workspace",
     *         "slug": "bbworkspace1",
     *         "is_private": true,
     *         "name": "Atlassian Bitbucket"
     *     }
     *   ]
     * }
     * ```
     * 
     * Results may be further [filtered or sorted](/cloud/bitbucket/rest/intro/#filtering) by
     * workspace or permission by adding the following query string parameters:
     * 
     * * `q=slug="bbworkspace1"` or `q=is_private=true`
     * * `sort=created_on`
     * 
     * Note that the query parameter values need to be URL escaped so that `=`
     * would become `%3D`.
     * 
     * **The `collaborator` role is being removed from the Bitbucket Cloud API. For more information,
     * see the [deprecation announcement](/cloud/bitbucket/deprecation-notice-collaborator-role/).**
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesResponse
     */
	public function getWorkspaces(
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workspaces');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetWorkspacesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedWorkspaces = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedWorkspaces', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a workspace
     * 
     * Returns the requested workspace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceResponse
     */
	public function getWorkspacesWorkspace(
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workspaces/{workspace}', \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->workspace = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List webhooks for a workspace
     * 
     * Returns a paginated list of webhooks installed on this workspace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksResponse
     */
	public function getWorkspacesWorkspaceHooks(
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workspaces/{workspace}/hooks', \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedWebhookSubscriptions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedWebhookSubscriptions', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a webhook for a workspace
     * 
     * Returns the webhook with the specified id installed on the given
     * workspace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksUidRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksUidSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksUidResponse
     */
	public function getWorkspacesWorkspaceHooksUid(
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksUidRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksUidSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksUidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workspaces/{workspace}/hooks/{uid}', \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksUidRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksUidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->webhookSubscription = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List users in a workspace
     * 
     * Returns all members of the requested workspace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceMembersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceMembersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceMembersResponse
     */
	public function getWorkspacesWorkspaceMembers(
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceMembersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceMembersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceMembersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workspaces/{workspace}/members', \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceMembersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceMembersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedWorkspaceMemberships = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedWorkspaceMemberships', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get user membership for a workspace
     * 
     * Returns the workspace membership, which includes
     * a `User` object for the member and a `Workspace` object
     * for the requested workspace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceMembersMemberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceMembersMemberSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceMembersMemberResponse
     */
	public function getWorkspacesWorkspaceMembersMember(
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceMembersMemberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceMembersMemberSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceMembersMemberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workspaces/{workspace}/members/{member}', \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceMembersMemberRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceMembersMemberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->workspaceMembership = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List user permissions in a workspace
     * 
     * Returns the list of members in a workspace
     * and their permission levels.
     * Permission can be:
     * * `owner`
     * * `collaborator`
     * * `member`
     * 
     * **The `collaborator` role is being removed from the Bitbucket Cloud API. For more information,
     * see the [deprecation announcement](/cloud/bitbucket/deprecation-notice-collaborator-role/).**
     * 
     * Example:
     * 
     * ```
     * $ curl -X https://api.bitbucket.org/2.0/workspaces/bbworkspace1/permissions
     * 
     * {
     *     "pagelen": 10,
     *     "values": [
     *         {
     *             "permission": "owner",
     *             "type": "workspace_membership",
     *             "user": {
     *                 "type": "user",
     *                 "uuid": "{470c176d-3574-44ea-bb41-89e8638bcca4}",
     *                 "display_name": "Erik van Zijst",
     *             },
     *             "workspace": {
     *                 "type": "workspace",
     *                 "uuid": "{a15fb181-db1f-48f7-b41f-e1eff06929d6}",
     *                 "slug": "bbworkspace1",
     *                 "name": "Atlassian Bitbucket",
     *             }
     *         },
     *         {
     *             "permission": "member",
     *             "type": "workspace_membership",
     *             "user": {
     *                 "type": "user",
     *                 "nickname": "seanaty",
     *                 "display_name": "Sean Conaty",
     *                 "uuid": "{504c3b62-8120-4f0c-a7bc-87800b9d6f70}"
     *             },
     *             "workspace": {
     *                 "type": "workspace",
     *                 "uuid": "{a15fb181-db1f-48f7-b41f-e1eff06929d6}",
     *                 "slug": "bbworkspace1",
     *                 "name": "Atlassian Bitbucket",
     *             }
     *         }
     *     ],
     *     "page": 1,
     *     "size": 2
     * }
     * ```
     * 
     * Results may be further [filtered](/cloud/bitbucket/rest/intro/#filtering) by
     * permission by adding the following query string parameters:
     * 
     * * `q=permission="owner"`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspacePermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspacePermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspacePermissionsResponse
     */
	public function getWorkspacesWorkspacePermissions(
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspacePermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspacePermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspacePermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workspaces/{workspace}/permissions', \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspacePermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspacePermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspacePermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedWorkspaceMemberships = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedWorkspaceMemberships', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all repository permissions for a workspace
     * 
     * Returns an object for each repository permission for all of a
     * workspace's repositories.
     * 
     * Permissions returned are effective permissions: the highest level of
     * permission the user has. This does not distinguish between direct and
     * indirect (group) privileges.
     * 
     * Only users with admin permission for the team may access this resource.
     * 
     * Permissions can be:
     * 
     * * `admin`
     * * `write`
     * * `read`
     * 
     * Example:
     * 
     * ```
     * $ curl https://api.bitbucket.org/2.0/workspaces/atlassian_tutorial/permissions/repositories
     * 
     * {
     *   "pagelen": 10,
     *   "values": [
     *     {
     *       "type": "repository_permission",
     *       "user": {
     *         "type": "user",
     *         "display_name": "Erik van Zijst",
     *         "uuid": "{d301aafa-d676-4ee0-88be-962be7417567}"
     *       },
     *       "repository": {
     *         "type": "repository",
     *         "name": "geordi",
     *         "full_name": "atlassian_tutorial/geordi",
     *         "uuid": "{85d08b4e-571d-44e9-a507-fa476535aa98}"
     *       },
     *       "permission": "admin"
     *     },
     *     {
     *       "type": "repository_permission",
     *       "user": {
     *         "type": "user",
     *         "display_name": "Sean Conaty",
     *         "uuid": "{504c3b62-8120-4f0c-a7bc-87800b9d6f70}"
     *       },
     *       "repository": {
     *         "type": "repository",
     *         "name": "geordi",
     *         "full_name": "atlassian_tutorial/geordi",
     *         "uuid": "{85d08b4e-571d-44e9-a507-fa476535aa98}"
     *       },
     *       "permission": "write"
     *     },
     *     {
     *       "type": "repository_permission",
     *       "user": {
     *         "type": "user",
     *         "display_name": "Jeff Zeng",
     *         "uuid": "{47f92a9a-c3a3-4d0b-bc4e-782a969c5c72}"
     *       },
     *       "repository": {
     *         "type": "repository",
     *         "name": "whee",
     *         "full_name": "atlassian_tutorial/whee",
     *         "uuid": "{30ba25e9-51ff-4555-8dd0-fc7ee2fa0895}"
     *       },
     *       "permission": "admin"
     *     }
     *   ],
     *   "page": 1,
     *   "size": 3
     * }
     * ```
     * 
     * Results may be further [filtered or sorted](/cloud/bitbucket/rest/intro/#filtering)
     * by repository, user, or permission by adding the following query string
     * parameters:
     * 
     * * `q=repository.name="geordi"` or `q=permission>"read"`
     * * `sort=user.display_name`
     * 
     * Note that the query parameter values need to be URL escaped so that `=`
     * would become `%3D`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspacePermissionsRepositoriesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspacePermissionsRepositoriesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspacePermissionsRepositoriesResponse
     */
	public function getWorkspacesWorkspacePermissionsRepositories(
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspacePermissionsRepositoriesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspacePermissionsRepositoriesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspacePermissionsRepositoriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workspaces/{workspace}/permissions/repositories', \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspacePermissionsRepositoriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspacePermissionsRepositoriesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspacePermissionsRepositoriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedRepositoryPermissions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedRepositoryPermissions', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List a repository permissions for a workspace
     * 
     * Returns an object for the repository permission of each user in the
     * requested repository.
     * 
     * Permissions returned are effective permissions: the highest level of
     * permission the user has. This does not distinguish between direct and
     * indirect (group) privileges.
     * 
     * Only users with admin permission for the repository may access this resource.
     * 
     * Permissions can be:
     * 
     * * `admin`
     * * `write`
     * * `read`
     * 
     * Example:
     * 
     * ```
     * $ curl https://api.bitbucket.org/2.0/workspaces/atlassian_tutorial/permissions/repositories/geordi
     * 
     * {
     *   "pagelen": 10,
     *   "values": [
     *     {
     *       "type": "repository_permission",
     *       "user": {
     *         "type": "user",
     *         "display_name": "Erik van Zijst",
     *         "uuid": "{d301aafa-d676-4ee0-88be-962be7417567}"
     *       },
     *       "repository": {
     *         "type": "repository",
     *         "name": "geordi",
     *         "full_name": "atlassian_tutorial/geordi",
     *         "uuid": "{85d08b4e-571d-44e9-a507-fa476535aa98}"
     *       },
     *       "permission": "admin"
     *     },
     *     {
     *       "type": "repository_permission",
     *       "user": {
     *         "type": "user",
     *         "display_name": "Sean Conaty",
     *         "uuid": "{504c3b62-8120-4f0c-a7bc-87800b9d6f70}"
     *       },
     *       "repository": {
     *         "type": "repository",
     *         "name": "geordi",
     *         "full_name": "atlassian_tutorial/geordi",
     *         "uuid": "{85d08b4e-571d-44e9-a507-fa476535aa98}"
     *       },
     *       "permission": "write"
     *     }
     *   ],
     *   "page": 1,
     *   "size": 2
     * }
     * ```
     * 
     * Results may be further [filtered or sorted](/cloud/bitbucket/rest/intro/#filtering)
     * by user, or permission by adding the following query string parameters:
     * 
     * * `q=permission>"read"`
     * * `sort=user.display_name`
     * 
     * Note that the query parameter values need to be URL escaped so that `=`
     * would become `%3D`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspacePermissionsRepositoriesRepoSlugRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspacePermissionsRepositoriesRepoSlugSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspacePermissionsRepositoriesRepoSlugResponse
     */
	public function getWorkspacesWorkspacePermissionsRepositoriesRepoSlug(
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspacePermissionsRepositoriesRepoSlugRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspacePermissionsRepositoriesRepoSlugSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspacePermissionsRepositoriesRepoSlugResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workspaces/{workspace}/permissions/repositories/{repo_slug}', \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspacePermissionsRepositoriesRepoSlugRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspacePermissionsRepositoriesRepoSlugRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspacePermissionsRepositoriesRepoSlugResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedRepositoryPermissions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedRepositoryPermissions', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List projects in a workspace
     * 
     * Returns the list of projects in this workspace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceProjectsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceProjectsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceProjectsResponse
     */
	public function getWorkspacesWorkspaceProjects(
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceProjectsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceProjectsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceProjectsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workspaces/{workspace}/projects', \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceProjectsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceProjectsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedProjects = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedProjects', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a project for a workspace
     * 
     * Returns the requested project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceProjectsProjectKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceProjectsProjectKeySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceProjectsProjectKeyResponse
     */
	public function getWorkspacesWorkspaceProjectsProjectKey(
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceProjectsProjectKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceProjectsProjectKeySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceProjectsProjectKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workspaces/{workspace}/projects/{project_key}', \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceProjectsProjectKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceProjectsProjectKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->project = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a webhook for a workspace
     * 
     * Creates a new webhook on the specified workspace.
     * 
     * Workspace webhooks are fired for events from all repositories contained
     * by that workspace.
     * 
     * Example:
     * 
     * ```
     * $ curl -X POST -u credentials -H 'Content-Type: application/json'
     *   https://api.bitbucket.org/2.0/workspaces/my-workspace/hooks
     *   -d '
     *     {
     *       "description": "Webhook Description",
     *       "url": "https://example.com/",
     *       "active": true,
     *       "events": [
     *         "repo:push",
     *         "issue:created",
     *         "issue:updated"
     *       ]
     *     }'
     * ```
     * 
     * This call requires the webhook scope, as well as any scope
     * that applies to the events that the webhook subscribes to. In the
     * example above that means: `webhook`, `repository` and `issue`.
     * 
     * The `url` must properly resolve and cannot be an internal, non-routed address.
     * 
     * Only workspace owners can install webhooks on workspaces.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostWorkspacesWorkspaceHooksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostWorkspacesWorkspaceHooksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostWorkspacesWorkspaceHooksResponse
     */
	public function postWorkspacesWorkspaceHooks(
        \OpenAPI\OpenAPI\Models\Operations\PostWorkspacesWorkspaceHooksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostWorkspacesWorkspaceHooksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostWorkspacesWorkspaceHooksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workspaces/{workspace}/hooks', \OpenAPI\OpenAPI\Models\Operations\PostWorkspacesWorkspaceHooksRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostWorkspacesWorkspaceHooksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->webhookSubscription = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a webhook for a workspace
     * 
     * Updates the specified webhook subscription.
     * 
     * The following properties can be mutated:
     * 
     * * `description`
     * * `url`
     * * `active`
     * * `events`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutWorkspacesWorkspaceHooksUidRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutWorkspacesWorkspaceHooksUidSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutWorkspacesWorkspaceHooksUidResponse
     */
	public function putWorkspacesWorkspaceHooksUid(
        \OpenAPI\OpenAPI\Models\Operations\PutWorkspacesWorkspaceHooksUidRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutWorkspacesWorkspaceHooksUidSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutWorkspacesWorkspaceHooksUidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workspaces/{workspace}/hooks/{uid}', \OpenAPI\OpenAPI\Models\Operations\PutWorkspacesWorkspaceHooksUidRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutWorkspacesWorkspaceHooksUidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->webhookSubscription = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}