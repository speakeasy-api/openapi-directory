// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"context"
	"fmt"
	"net/http"
	"openapi/pkg/models/operations"
	"openapi/pkg/utils"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	"https://api.bitbucket.org/2.0",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// SDK - Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
// https://bitbucket.org/api
type SDK struct {
	// Addon - The addon resource is intended to use used by Bitbucket Cloud Connect
	// Apps, and only supports JWT authentication.
	//
	Addon *addon
	// BranchRestrictions - Repository owners and administrators can set branch management
	// rules on a repository that control what can be pushed by whom.
	// Through these rules, you can enforce a project or team
	// workflow. For example, owners or administrators can:
	//
	// * Limit push powers
	// * Prevent branch deletion
	// * Prevent history re-writes (Git only)
	//
	BranchRestrictions *branchRestrictions
	// BranchingModel - The branching model resource is used to modify the branching model
	// for a repository.
	//
	// You can use the branching model to define a branch based workflow
	// for your repositories. When you map your workflow to branch types,
	// you can ensure that branches are named consistently by configuring
	// which branch types to make available.
	//
	BranchingModel *branchingModel
	// CommitStatuses - Commit statuses provide a way to tag commits with meta data,
	// like automated build results.
	//
	CommitStatuses *commitStatuses
	// Commits - These are the repository's commits. They are paginated and returned in
	// reverse chronological order, similar to the output of git log.
	//
	Commits *commits
	// Deployments - Teams are deploying code faster than ever, thanks to continuous
	// delivery practices and tools like Bitbucket Pipelines. Bitbucket
	// Deployments gives teams visibility into their deployment
	// environments and helps teams to track how far changes have
	// progressed in their deployment pipeline.
	//
	Deployments *deployments
	// Downloads - Access the list of download links associated with the repository.
	Downloads *downloads
	// IssueTracker - The issue resources provide functionality for getting information on
	// issues in an issue tracker, creating new issues, updating them and deleting
	// them.
	//
	// You can access public issues without authentication, but you can't gain access
	// to private repositories' issues. By authenticating, you will get the ability
	// to create issues, as well as access to updating data or deleting issues you
	// have access to.
	//
	IssueTracker *issueTracker
	// Pipelines - Bitbucket Pipelines brings continuous delivery to Bitbucket
	// Cloud, empowering teams with full branching to deployment
	// visibility and faster feedback loops.
	//
	Pipelines *pipelines
	// Projects - Bitbucket Cloud projects make it easier for teams to focus on
	// a goal, product, or process by organizing their repositories.
	//
	Projects *projects
	// Pullrequests - Pull requests are a feature that makes it easier for developers
	// to collaborate using Bitbucket. They provide a user-friendly web
	// interface for discussing proposed changes before integrating them
	// into the official project.
	//
	Pullrequests *pullrequests
	// Refs - The refs resource allows you access branches and tags in a repository.
	// By default, results will be in the order the underlying source control
	// system returns them and identical to the ordering one sees when running
	// "$ git show-ref". Note that this follows simple lexical ordering of the
	//  ref names.
	//
	Refs *refs
	// Reports - Code insights provides reports, annotations, and metrics to help you
	// and your team improve code quality in pull requests throughout the code
	// review process. Some of the available code insights are static analysis
	// reports, security scan results, artifact links, unit tests, and build
	// status.
	//
	Reports *reports
	// Repositories - A Git repository is a virtual storage of your project. It
	// allows you to save versions of your code, which you can access
	// when needed. The repo resource allows you to access public repos,
	// or repos that belong to a specific workspace.
	//
	Repositories *repositories
	Search       *search
	// Snippets - Snippets allow you share code segments or files with yourself, members of
	// your workspace, or the world.
	//
	// Like pull requests, repositories and workspaces, the full set of snippets
	// is defined by what the current user has access to. This includes all
	// snippets owned by any of the workspaces the user is a member of, or
	// snippets by other users that the current user is either watching or has
	//  collaborated on (for instance by commenting on it).
	//
	Snippets *snippets
	// Source - Browse the source code in the repository and
	//                               create new commits by uploading.
	Source *source
	// SSH - The SSH resource allows you to manage SSH keys.
	//
	SSH *ssh
	// Teams - The teams resource has been deprecated, and the workspaces
	// endpoint should be used instead.
	//
	// The teams resource returns all the teams that the authenticated
	// user is associated with.
	//
	Teams *teams
	// Users - The users resource allows you to access public information
	// associated with a user account. Most resources in the users
	// endpoint have been deprecated in favor of workspaces.
	//
	Users *users
	// Webhooks - Webhooks provide a way to configure Bitbucket Cloud to make requests to
	// your server (or another external service) whenever certain events occur in
	// Bitbucket Cloud.
	//
	// A webhook consists of:
	//
	// * A subject -- The resource that generates the events. Currently, this resource
	// is the repository, user account, or team where you create the webhook.
	// * One or more event -- The default event is a repository push, but you can
	// select multiple events that can trigger the webhook.
	// * A URL -- The endpoint where you want Bitbucket to send the event payloads
	// when a matching event happens.
	//
	// There are two parts to getting a webhook to work: creating the webhook and
	// triggering the webhook. After you create a webhook for an event, every time
	// that event occurs, Bitbucket sends a payload request that describes the event
	// to the specified URL. Thus, you can think of webhooks as a kind of
	// notification system.
	//
	// Use webhooks to integrate applications with Bitbucket Cloud. The following
	// use cases provides examples of when you would want to use webhooks:
	//
	// * Every time a user pushes commits in a repository, you may want to notify
	// your CI server to start a build.
	// * Every time a user pushes commits or creates a pull request, you may want to
	// display a notification in your application.
	//
	Webhooks *webhooks
	// Workspaces - A workspace is where you create repositories, collaborate on
	// your code, and organize different streams of work in your Bitbucket
	// Cloud account. Workspaces replace the use of teams and users in API
	// calls.
	//
	Workspaces *workspaces
	Properties *properties

	// Non-idiomatic field names below are to namespace fields from the fields names above to avoid name conflicts
	_defaultClient  HTTPClient
	_securityClient HTTPClient

	_serverURL  string
	_language   string
	_sdkVersion string
	_genVersion string
}

type SDKOption func(*SDK)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *SDK) {
		sdk._serverURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *SDK) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk._serverURL = serverURL
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *SDK) {
		sdk._defaultClient = client
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *SDK {
	sdk := &SDK{
		_language:   "go",
		_sdkVersion: "0.0.1",
		_genVersion: "internal",
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk._defaultClient == nil {
		sdk._defaultClient = &http.Client{Timeout: 60 * time.Second}
	}
	if sdk._securityClient == nil {
		sdk._securityClient = sdk._defaultClient
	}

	if sdk._serverURL == "" {
		sdk._serverURL = ServerList[0]
	}

	sdk.Addon = newAddon(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.BranchRestrictions = newBranchRestrictions(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.BranchingModel = newBranchingModel(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.CommitStatuses = newCommitStatuses(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Commits = newCommits(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Deployments = newDeployments(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Downloads = newDownloads(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.IssueTracker = newIssueTracker(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Pipelines = newPipelines(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Projects = newProjects(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Pullrequests = newPullrequests(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Refs = newRefs(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Reports = newReports(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Repositories = newRepositories(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Search = newSearch(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Snippets = newSnippets(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Source = newSource(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.SSH = newSSH(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Teams = newTeams(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Users = newUsers(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Webhooks = newWebhooks(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Workspaces = newWorkspaces(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Properties = newProperties(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	return sdk
}

func (s *SDK) GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDLogsLogUUID(ctx context.Context, request operations.GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDLogsLogUUIDRequest) (*operations.GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDLogsLogUUIDResponse, error) {
	baseURL := s._serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}/logs/{log_uuid}", request.PathParams, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := s._defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDLogsLogUUIDResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	default:
	}

	return res, nil
}
func (s *SDK) GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReports(ctx context.Context, request operations.GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsRequest) (*operations.GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsResponse, error) {
	baseURL := s._serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}/test_reports", request.PathParams, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := s._defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	default:
	}

	return res, nil
}
func (s *SDK) GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsTestCases(ctx context.Context, request operations.GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsTestCasesRequest) (*operations.GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsTestCasesResponse, error) {
	baseURL := s._serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}/test_reports/test_cases", request.PathParams, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := s._defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsTestCasesResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	default:
	}

	return res, nil
}
func (s *SDK) GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsTestCasesTestCaseUUIDTestCaseReasons(ctx context.Context, request operations.GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsTestCasesTestCaseUUIDTestCaseReasonsRequest) (*operations.GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsTestCasesTestCaseUUIDTestCaseReasonsResponse, error) {
	baseURL := s._serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}/test_reports/test_cases/{test_case_uuid}/test_case_reasons", request.PathParams, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := s._defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsTestCasesTestCaseUUIDTestCaseReasonsResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	default:
	}

	return res, nil
}
func (s *SDK) GetWorkspacesWorkspacePipelinesConfigIdentityOidcWellKnownOpenidConfiguration(ctx context.Context, request operations.GetWorkspacesWorkspacePipelinesConfigIdentityOidcWellKnownOpenidConfigurationRequest) (*operations.GetWorkspacesWorkspacePipelinesConfigIdentityOidcWellKnownOpenidConfigurationResponse, error) {
	baseURL := s._serverURL
	url := utils.GenerateURL(ctx, baseURL, "/workspaces/{workspace}/pipelines-config/identity/oidc/.well-known/openid-configuration", request.PathParams, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := s._defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetWorkspacesWorkspacePipelinesConfigIdentityOidcWellKnownOpenidConfigurationResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	default:
	}

	return res, nil
}
func (s *SDK) GetWorkspacesWorkspacePipelinesConfigIdentityOidcKeysJSON(ctx context.Context, request operations.GetWorkspacesWorkspacePipelinesConfigIdentityOidcKeysJSONRequest) (*operations.GetWorkspacesWorkspacePipelinesConfigIdentityOidcKeysJSONResponse, error) {
	baseURL := s._serverURL
	url := utils.GenerateURL(ctx, baseURL, "/workspaces/{workspace}/pipelines-config/identity/oidc/keys.json", request.PathParams, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := s._defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetWorkspacesWorkspacePipelinesConfigIdentityOidcKeysJSONResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	default:
	}

	return res, nil
}
