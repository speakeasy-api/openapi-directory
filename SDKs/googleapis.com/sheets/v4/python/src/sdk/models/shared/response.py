"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import addbandingresponse as shared_addbandingresponse
from ..shared import addchartresponse as shared_addchartresponse
from ..shared import adddatasourceresponse as shared_adddatasourceresponse
from ..shared import adddimensiongroupresponse as shared_adddimensiongroupresponse
from ..shared import addfilterviewresponse as shared_addfilterviewresponse
from ..shared import addnamedrangeresponse as shared_addnamedrangeresponse
from ..shared import addprotectedrangeresponse as shared_addprotectedrangeresponse
from ..shared import addsheetresponse as shared_addsheetresponse
from ..shared import addslicerresponse as shared_addslicerresponse
from ..shared import createdevelopermetadataresponse as shared_createdevelopermetadataresponse
from ..shared import deleteconditionalformatruleresponse as shared_deleteconditionalformatruleresponse
from ..shared import deletedevelopermetadataresponse as shared_deletedevelopermetadataresponse
from ..shared import deletedimensiongroupresponse as shared_deletedimensiongroupresponse
from ..shared import deleteduplicatesresponse as shared_deleteduplicatesresponse
from ..shared import duplicatefilterviewresponse as shared_duplicatefilterviewresponse
from ..shared import duplicatesheetresponse as shared_duplicatesheetresponse
from ..shared import findreplaceresponse as shared_findreplaceresponse
from ..shared import refreshdatasourceresponse as shared_refreshdatasourceresponse
from ..shared import trimwhitespaceresponse as shared_trimwhitespaceresponse
from ..shared import updateconditionalformatruleresponse as shared_updateconditionalformatruleresponse
from ..shared import updatedatasourceresponse as shared_updatedatasourceresponse
from ..shared import updatedevelopermetadataresponse as shared_updatedevelopermetadataresponse
from ..shared import updateembeddedobjectpositionresponse as shared_updateembeddedobjectpositionresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Response:
    r"""A single response from an update."""
    
    add_banding: Optional[shared_addbandingresponse.AddBandingResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addBanding'), 'exclude': lambda f: f is None }})
    r"""The result of adding a banded range."""  
    add_chart: Optional[shared_addchartresponse.AddChartResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addChart'), 'exclude': lambda f: f is None }})
    r"""The result of adding a chart to a spreadsheet."""  
    add_data_source: Optional[shared_adddatasourceresponse.AddDataSourceResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addDataSource'), 'exclude': lambda f: f is None }})
    r"""The result of adding a data source."""  
    add_dimension_group: Optional[shared_adddimensiongroupresponse.AddDimensionGroupResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addDimensionGroup'), 'exclude': lambda f: f is None }})
    r"""The result of adding a group."""  
    add_filter_view: Optional[shared_addfilterviewresponse.AddFilterViewResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addFilterView'), 'exclude': lambda f: f is None }})
    r"""The result of adding a filter view."""  
    add_named_range: Optional[shared_addnamedrangeresponse.AddNamedRangeResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addNamedRange'), 'exclude': lambda f: f is None }})
    r"""The result of adding a named range."""  
    add_protected_range: Optional[shared_addprotectedrangeresponse.AddProtectedRangeResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addProtectedRange'), 'exclude': lambda f: f is None }})
    r"""The result of adding a new protected range."""  
    add_sheet: Optional[shared_addsheetresponse.AddSheetResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addSheet'), 'exclude': lambda f: f is None }})
    r"""The result of adding a sheet."""  
    add_slicer: Optional[shared_addslicerresponse.AddSlicerResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addSlicer'), 'exclude': lambda f: f is None }})
    r"""The result of adding a slicer to a spreadsheet."""  
    create_developer_metadata: Optional[shared_createdevelopermetadataresponse.CreateDeveloperMetadataResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createDeveloperMetadata'), 'exclude': lambda f: f is None }})
    r"""The response from creating developer metadata."""  
    delete_conditional_format_rule: Optional[shared_deleteconditionalformatruleresponse.DeleteConditionalFormatRuleResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deleteConditionalFormatRule'), 'exclude': lambda f: f is None }})
    r"""The result of deleting a conditional format rule."""  
    delete_developer_metadata: Optional[shared_deletedevelopermetadataresponse.DeleteDeveloperMetadataResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deleteDeveloperMetadata'), 'exclude': lambda f: f is None }})
    r"""The response from deleting developer metadata."""  
    delete_dimension_group: Optional[shared_deletedimensiongroupresponse.DeleteDimensionGroupResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deleteDimensionGroup'), 'exclude': lambda f: f is None }})
    r"""The result of deleting a group."""  
    delete_duplicates: Optional[shared_deleteduplicatesresponse.DeleteDuplicatesResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deleteDuplicates'), 'exclude': lambda f: f is None }})
    r"""The result of removing duplicates in a range."""  
    duplicate_filter_view: Optional[shared_duplicatefilterviewresponse.DuplicateFilterViewResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duplicateFilterView'), 'exclude': lambda f: f is None }})
    r"""The result of a filter view being duplicated."""  
    duplicate_sheet: Optional[shared_duplicatesheetresponse.DuplicateSheetResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duplicateSheet'), 'exclude': lambda f: f is None }})
    r"""The result of duplicating a sheet."""  
    find_replace: Optional[shared_findreplaceresponse.FindReplaceResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('findReplace'), 'exclude': lambda f: f is None }})
    r"""The result of the find/replace."""  
    refresh_data_source: Optional[shared_refreshdatasourceresponse.RefreshDataSourceResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refreshDataSource'), 'exclude': lambda f: f is None }})
    r"""The response from refreshing one or multiple data source objects."""  
    trim_whitespace: Optional[shared_trimwhitespaceresponse.TrimWhitespaceResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trimWhitespace'), 'exclude': lambda f: f is None }})
    r"""The result of trimming whitespace in cells."""  
    update_conditional_format_rule: Optional[shared_updateconditionalformatruleresponse.UpdateConditionalFormatRuleResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateConditionalFormatRule'), 'exclude': lambda f: f is None }})
    r"""The result of updating a conditional format rule."""  
    update_data_source: Optional[shared_updatedatasourceresponse.UpdateDataSourceResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateDataSource'), 'exclude': lambda f: f is None }})
    r"""The response from updating data source."""  
    update_developer_metadata: Optional[shared_updatedevelopermetadataresponse.UpdateDeveloperMetadataResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateDeveloperMetadata'), 'exclude': lambda f: f is None }})
    r"""The response from updating developer metadata."""  
    update_embedded_object_position: Optional[shared_updateembeddedobjectpositionresponse.UpdateEmbeddedObjectPositionResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateEmbeddedObjectPosition'), 'exclude': lambda f: f is None }})
    r"""The result of updating an embedded object's position."""  
    