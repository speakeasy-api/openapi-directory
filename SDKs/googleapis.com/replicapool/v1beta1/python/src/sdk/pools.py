"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Pools:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def replicapool_pools_delete(self, request: operations.ReplicapoolPoolsDeleteRequest, security: operations.ReplicapoolPoolsDeleteSecurity) -> operations.ReplicapoolPoolsDeleteResponse:
        r"""Deletes a replica pool."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReplicapoolPoolsDeleteRequest, base_url, '/{projectName}/zones/{zone}/pools/{poolName}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "pools_delete_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ReplicapoolPoolsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReplicapoolPoolsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def replicapool_pools_get(self, request: operations.ReplicapoolPoolsGetRequest, security: operations.ReplicapoolPoolsGetSecurity) -> operations.ReplicapoolPoolsGetResponse:
        r"""Gets information about a single replica pool."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReplicapoolPoolsGetRequest, base_url, '/{projectName}/zones/{zone}/pools/{poolName}', request)
        
        query_params = utils.get_query_params(operations.ReplicapoolPoolsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReplicapoolPoolsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def replicapool_pools_insert(self, request: operations.ReplicapoolPoolsInsertRequest, security: operations.ReplicapoolPoolsInsertSecurity) -> operations.ReplicapoolPoolsInsertResponse:
        r"""Inserts a new replica pool."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReplicapoolPoolsInsertRequest, base_url, '/{projectName}/zones/{zone}/pools', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "pool", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ReplicapoolPoolsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReplicapoolPoolsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def replicapool_pools_list(self, request: operations.ReplicapoolPoolsListRequest, security: operations.ReplicapoolPoolsListSecurity) -> operations.ReplicapoolPoolsListResponse:
        r"""List all replica pools."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReplicapoolPoolsListRequest, base_url, '/{projectName}/zones/{zone}/pools', request)
        
        query_params = utils.get_query_params(operations.ReplicapoolPoolsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReplicapoolPoolsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def replicapool_pools_resize(self, request: operations.ReplicapoolPoolsResizeRequest, security: operations.ReplicapoolPoolsResizeSecurity) -> operations.ReplicapoolPoolsResizeResponse:
        r"""Resize a pool. This is an asynchronous operation, and multiple overlapping resize requests can be made. Replica Pools will use the information from the last resize request."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReplicapoolPoolsResizeRequest, base_url, '/{projectName}/zones/{zone}/pools/{poolName}/resize', request)
        
        query_params = utils.get_query_params(operations.ReplicapoolPoolsResizeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReplicapoolPoolsResizeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def replicapool_pools_updatetemplate(self, request: operations.ReplicapoolPoolsUpdatetemplateRequest, security: operations.ReplicapoolPoolsUpdatetemplateSecurity) -> operations.ReplicapoolPoolsUpdatetemplateResponse:
        r"""Update the template used by the pool."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReplicapoolPoolsUpdatetemplateRequest, base_url, '/{projectName}/zones/{zone}/pools/{poolName}/updateTemplate', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "template", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ReplicapoolPoolsUpdatetemplateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReplicapoolPoolsUpdatetemplateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    