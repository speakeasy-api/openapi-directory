// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"time"
)

type ListPastMeetingPollsSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type ListPastMeetingPollsRequest struct {
	// The meeting ID or the meeting UUID.  If a meeting ID is provided in the request instead of a UUID, the response will be for the latest meeting instance.
	//
	// If a UUID starts with "/" or contains "//" (example: "/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request.
	MeetingID string `pathParam:"style=simple,explode=false,name=meetingId"`
}

type ListPastMeetingPolls200ApplicationXMLQuestionsQuestionDetails struct {
	// Answer submitted by the user.
	Answer *string
	// Date and time at which the answer to the poll was submitted.
	DateTime *time.Time
	// Unique identifier of the poll.
	PollingID *string
	// Question asked during the poll.
	Question *string
}

type ListPastMeetingPolls200ApplicationXMLQuestions struct {
	// Email address of the user who submitted answers to the poll.
	Email *string
	// Name of the user who submitted answers to the poll. If "anonymous" option is enabled for a poll, the participant's polling information will be kept anonymous and the value of `name` field will be "Anonymous Attendee".
	Name            *string
	QuestionDetails []ListPastMeetingPolls200ApplicationXMLQuestionsQuestionDetails
}

// ListPastMeetingPolls200ApplicationXML - **HTTP Status Code:** `200` **OK**<br>
// Polls returned successfully.
type ListPastMeetingPolls200ApplicationXML struct {
	// [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
	ID        *int64
	Questions []ListPastMeetingPolls200ApplicationXMLQuestions
	// The start time of the meeting.
	StartTime *time.Time
	// Meeting UUID.
	UUID *string
}

type ListPastMeetingPolls200ApplicationJSONQuestionsQuestionDetails struct {
	// Answer submitted by the user.
	Answer *string `json:"answer,omitempty"`
	// Date and time at which the answer to the poll was submitted.
	DateTime *time.Time `json:"date_time,omitempty"`
	// Unique identifier of the poll.
	PollingID *string `json:"polling_id,omitempty"`
	// Question asked during the poll.
	Question *string `json:"question,omitempty"`
}

type ListPastMeetingPolls200ApplicationJSONQuestions struct {
	// Email address of the user who submitted answers to the poll.
	Email *string `json:"email,omitempty"`
	// Name of the user who submitted answers to the poll. If "anonymous" option is enabled for a poll, the participant's polling information will be kept anonymous and the value of `name` field will be "Anonymous Attendee".
	Name            *string                                                          `json:"name,omitempty"`
	QuestionDetails []ListPastMeetingPolls200ApplicationJSONQuestionsQuestionDetails `json:"question_details,omitempty"`
}

// ListPastMeetingPolls200ApplicationJSON - **HTTP Status Code:** `200` **OK**<br>
// Polls returned successfully.
type ListPastMeetingPolls200ApplicationJSON struct {
	// [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
	ID        *int64                                            `json:"id,omitempty"`
	Questions []ListPastMeetingPolls200ApplicationJSONQuestions `json:"questions,omitempty"`
	// The start time of the meeting.
	StartTime *time.Time `json:"start_time,omitempty"`
	// Meeting UUID.
	UUID *string `json:"uuid,omitempty"`
}

type ListPastMeetingPollsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200` **OK**<br>
	// Polls returned successfully.
	ListPastMeetingPolls200ApplicationJSONObject *ListPastMeetingPolls200ApplicationJSON
}
