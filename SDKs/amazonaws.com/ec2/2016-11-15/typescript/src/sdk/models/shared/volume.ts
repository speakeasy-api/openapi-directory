/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * The attachment state of the volume.
 */
export enum VolumeAttachmentsStateEnum {
  Attaching = "attaching",
  Attached = "attached",
  Detaching = "detaching",
  Detached = "detached",
  Busy = "busy",
}

/**
 * Describes volume attachment details.
 */
export class VolumeAttachments extends SpeakeasyBase {
  @SpeakeasyMetadata()
  attachTime?: Date;

  @SpeakeasyMetadata()
  deleteOnTermination?: boolean;

  @SpeakeasyMetadata()
  device?: string;

  @SpeakeasyMetadata()
  instanceId?: string;

  @SpeakeasyMetadata()
  state?: VolumeAttachmentsStateEnum;

  @SpeakeasyMetadata()
  volumeId?: string;
}

/**
 * The volume state.
 */
export enum VolumeStateEnum {
  Creating = "creating",
  Available = "available",
  InUse = "in-use",
  Deleting = "deleting",
  Deleted = "deleted",
  Error = "error",
}

/**
 * Describes a tag.
 */
export class VolumeTags extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * The volume type.
 */
export enum VolumeVolumeTypeEnum {
  Standard = "standard",
  Io1 = "io1",
  Io2 = "io2",
  Gp2 = "gp2",
  Sc1 = "sc1",
  St1 = "st1",
  Gp3 = "gp3",
}

/**
 * Describes a volume.
 */
export class Volume extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: VolumeAttachments })
  attachments?: VolumeAttachments[];

  @SpeakeasyMetadata()
  availabilityZone?: string;

  @SpeakeasyMetadata()
  createTime?: Date;

  @SpeakeasyMetadata()
  encrypted?: boolean;

  @SpeakeasyMetadata()
  fastRestored?: boolean;

  @SpeakeasyMetadata()
  iops?: number;

  @SpeakeasyMetadata()
  kmsKeyId?: string;

  @SpeakeasyMetadata()
  multiAttachEnabled?: boolean;

  @SpeakeasyMetadata()
  outpostArn?: string;

  @SpeakeasyMetadata()
  size?: number;

  @SpeakeasyMetadata()
  snapshotId?: string;

  @SpeakeasyMetadata()
  state?: VolumeStateEnum;

  @SpeakeasyMetadata({ elemType: VolumeTags })
  tags?: VolumeTags[];

  @SpeakeasyMetadata()
  throughput?: number;

  @SpeakeasyMetadata()
  volumeId?: string;

  @SpeakeasyMetadata()
  volumeType?: VolumeVolumeTypeEnum;
}
