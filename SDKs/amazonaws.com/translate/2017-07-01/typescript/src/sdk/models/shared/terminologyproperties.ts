/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DirectionalityEnum } from "./directionalityenum";
import { EncryptionKey } from "./encryptionkey";
import { TerminologyDataFormatEnum } from "./terminologydataformatenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The properties of the custom terminology.
 */
export class TerminologyProperties extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Arn" })
  arn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "CreatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Directionality" })
  directionality?: DirectionalityEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "EncryptionKey" })
  @Type(() => EncryptionKey)
  encryptionKey?: EncryptionKey;

  @SpeakeasyMetadata()
  @Expose({ name: "Format" })
  format?: TerminologyDataFormatEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "LastUpdatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUpdatedAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Message" })
  message?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "SizeBytes" })
  sizeBytes?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "SkippedTermCount" })
  skippedTermCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "SourceLanguageCode" })
  sourceLanguageCode?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "TargetLanguageCodes" })
  targetLanguageCodes?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "TermCount" })
  termCount?: number;
}
