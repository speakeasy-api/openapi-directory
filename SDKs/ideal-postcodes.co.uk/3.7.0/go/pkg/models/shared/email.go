// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EmailResultEnum string

const (
	EmailResultEnumDeliverable    EmailResultEnum = "deliverable"
	EmailResultEnumNotDeliverable EmailResultEnum = "not_deliverable"
)

func (e *EmailResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "deliverable":
		fallthrough
	case "not_deliverable":
		*e = EmailResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EmailResultEnum: %s", s)
	}
}

type Email struct {
	// Returns `true` if this domain accepts all emails regardless of username
	Catchall bool `json:"catchall"`
	// Returns `true` if the email can be delivered
	Deliverable bool `json:"deliverable"`
	// Returns `true` if email comes from a disposable email service like temp-mail
	Disposable bool `json:"disposable"`
	// Returns `true` if the email originates from a free service like Outlook or Gmail.
	Free   bool            `json:"free"`
	Result EmailResultEnum `json:"result"`
	// Returns `true` if email address represents an organisational role like `admin`, `support`, `postmaster` etc
	Role bool `json:"role"`
}
