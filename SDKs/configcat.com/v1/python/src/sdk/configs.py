"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Configs:
    r"""With these endpoints you can manage your Configs.
    This also can be used to manage [Feature Flags and Settings](#tag/Feature-Flags-and-Settings) and their 
    [served values](#tag/Feature-Flag-and-Setting-values) through this API.
    
    <a href=\"https://configcat.com/docs/main-concepts/#config\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about the concept of Configs.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_config(self, request: operations.CreateConfigRequest) -> operations.CreateConfigResponse:
        r"""Create Config
        This endpoint creates a new Config in a specified Product 
        identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateConfigRequest, base_url, '/v1/products/{productId}/configs', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_config_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/hal+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConfigModelHaljson])
                res.config_model_haljson = out
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConfigModel])
                res.config_model = out
        elif http_res.status_code in [400, 401, 404, 429]:
            pass

        return res

    def delete_config(self, request: operations.DeleteConfigRequest) -> operations.DeleteConfigResponse:
        r"""Delete Config
        This endpoint removes a Config identified by the `configId` parameter.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteConfigRequest, base_url, '/v1/configs/{configId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_config(self, request: operations.GetConfigRequest) -> operations.GetConfigResponse:
        r"""Get Config
        This endpoint returns the metadata of a Config
        identified by the `configId`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetConfigRequest, base_url, '/v1/configs/{configId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/hal+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConfigModelHaljson])
                res.config_model_haljson = out
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConfigModel])
                res.config_model = out
        elif http_res.status_code in [400, 401, 404, 429]:
            pass

        return res

    def get_configs(self, request: operations.GetConfigsRequest) -> operations.GetConfigsResponse:
        r"""List Configs
        This endpoint returns the list of the Configs that belongs to the given Product identified by the
        `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetConfigsRequest, base_url, '/v1/products/{productId}/configs', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetConfigsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/hal+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ConfigModelHaljson]])
                res.config_model_haljsons = out
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ConfigModel]])
                res.config_models = out
        elif http_res.status_code in [400, 401, 404, 429]:
            pass

        return res

    def update_config(self, request: operations.UpdateConfigRequest) -> operations.UpdateConfigResponse:
        r"""Update Config
        This endpoint updates a Config identified by the `configId` parameter.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateConfigRequest, base_url, '/v1/configs/{configId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_config_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/hal+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConfigModelHaljson])
                res.config_model_haljson = out
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConfigModel])
                res.config_model = out
        elif http_res.status_code in [400, 401, 404, 429]:
            pass

        return res

    