"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PaginationOptionsItemTypeEnum(str, Enum):
    r"""Specific item type filter."""
    MOVIE = 'movie'
    SHOW = 'show'
    SEASON = 'season'
    EPISODE = 'episode'
    PROGRAM = 'program'
    LINK = 'link'
    TRAILER = 'trailer'
    CHANNEL = 'channel'
    CUSTOM_ASSET = 'customAsset'

class PaginationOptionsOrderEnum(str, Enum):
    r"""The applied sort order if any."""
    ASC = 'asc'
    DESC = 'desc'

class PaginationOptionsOrderByEnum(str, Enum):
    r"""The applied sort ordering property if any."""
    A_Z = 'a-z'
    RELEASE_YEAR = 'release-year'
    DATE_ADDED = 'date-added'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PaginationOptions:
    
    completed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completed'), 'exclude': lambda f: f is None }})
    r"""Items filtered by whether they've been fully watched or not.
    
    Only available on the `/account/profile/watched/list` endpoint currently.
    """  
    item_type: Optional[PaginationOptionsItemTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemType'), 'exclude': lambda f: f is None }})
    r"""Specific item type filter."""  
    max_rating: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxRating'), 'exclude': lambda f: f is None }})
    r"""The maximum rating (inclusive) of items returned, e.g. 'AUOFLC-PG'."""  
    order: Optional[PaginationOptionsOrderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order'), 'exclude': lambda f: f is None }})
    r"""The applied sort order if any."""  
    order_by: Optional[PaginationOptionsOrderByEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderBy'), 'exclude': lambda f: f is None }})
    r"""The applied sort ordering property if any."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pageSize'), 'exclude': lambda f: f is None }})
    r"""The number of items to return in a list page."""  
    