"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import allocationpolicy as shared_allocationpolicy
from ..shared import jobnotification as shared_jobnotification
from ..shared import jobstatus as shared_jobstatus
from ..shared import logspolicy as shared_logspolicy
from ..shared import taskgroup as shared_taskgroup
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Job:
    r"""The Cloud Batch Job description."""
    
    allocation_policy: Optional[shared_allocationpolicy.AllocationPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allocationPolicy'), 'exclude': lambda f: f is None }})
    r"""A Job's resource allocation policy describes when, where, and how compute resources should be allocated for the Job."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. When the Job was created."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Labels for the Job. Labels could be user provided or system generated. For example, \\"labels\\": { \\"department\\": \\"finance\\", \\"environment\\": \\"test\\" } You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with \\"goog-\\" or \\"google-\\" are reserved."""  
    logs_policy: Optional[shared_logspolicy.LogsPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logsPolicy'), 'exclude': lambda f: f is None }})
    r"""LogsPolicy describes how outputs from a Job's Tasks (stdout/stderr) will be preserved."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. Job name. For example: \\"projects/123456/locations/us-central1/jobs/job01\\"."""  
    notifications: Optional[list[shared_jobnotification.JobNotification]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notifications'), 'exclude': lambda f: f is None }})
    r"""Notification configurations."""  
    priority: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priority'), 'exclude': lambda f: f is None }})
    r"""Priority of the Job. The valid value range is [0, 100). Default value is 0. Higher value indicates higher priority. A job with higher priority value is more likely to run earlier if all other requirements are satisfied."""  
    status: Optional[shared_jobstatus.JobStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Job status."""  
    task_groups: Optional[list[shared_taskgroup.TaskGroup]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskGroups'), 'exclude': lambda f: f is None }})
    r"""Required. TaskGroups in the Job. Only one TaskGroup is supported now."""  
    uid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uid'), 'exclude': lambda f: f is None }})
    r"""Output only. A system generated unique ID (in UUID4 format) for the Job."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The last time the Job was updated."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JobInput:
    r"""The Cloud Batch Job description."""
    
    allocation_policy: Optional[shared_allocationpolicy.AllocationPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allocationPolicy'), 'exclude': lambda f: f is None }})
    r"""A Job's resource allocation policy describes when, where, and how compute resources should be allocated for the Job."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Labels for the Job. Labels could be user provided or system generated. For example, \\"labels\\": { \\"department\\": \\"finance\\", \\"environment\\": \\"test\\" } You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with \\"goog-\\" or \\"google-\\" are reserved."""  
    logs_policy: Optional[shared_logspolicy.LogsPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logsPolicy'), 'exclude': lambda f: f is None }})
    r"""LogsPolicy describes how outputs from a Job's Tasks (stdout/stderr) will be preserved."""  
    notifications: Optional[list[shared_jobnotification.JobNotification]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notifications'), 'exclude': lambda f: f is None }})
    r"""Notification configurations."""  
    priority: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priority'), 'exclude': lambda f: f is None }})
    r"""Priority of the Job. The valid value range is [0, 100). Default value is 0. Higher value indicates higher priority. A job with higher priority value is more likely to run earlier if all other requirements are satisfied."""  
    status: Optional[shared_jobstatus.JobStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Job status."""  
    task_groups: Optional[list[shared_taskgroup.TaskGroupInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskGroups'), 'exclude': lambda f: f is None }})
    r"""Required. TaskGroups in the Job. Only one TaskGroup is supported now."""  
    