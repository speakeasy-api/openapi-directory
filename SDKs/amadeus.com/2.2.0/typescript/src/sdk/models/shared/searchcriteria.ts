/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CoverageEnum } from "./coverageenum";
import { ExtendedPricingOptions } from "./extendedpricingoptions";
import { TravelClassEnum } from "./travelclassenum";
import { Expose, Type } from "class-transformer";

export class SearchCriteriaAdditionalInformation extends SpeakeasyBase {
  /**
   * If true, returns the fare family name for each flight-offer which supports fare family
   */
  @SpeakeasyMetadata()
  @Expose({ name: "brandedFares" })
  brandedFares?: boolean;

  /**
   * If true, returns the price of the first additional bag when the airline is an "Amadeus Ancillary Services" member.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "chargeableCheckedBags" })
  chargeableCheckedBags?: boolean;
}

export class SearchCriteriaFlightFiltersCabinRestriction extends SpeakeasyBase {
  /**
   * quality of service offered in the cabin where the seat is located in this flight. Economy, premium economy, business or first class
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cabin" })
  cabin?: TravelClassEnum;

  /**
   * part of the trip covered by the travel class restriction (ALL_SEGMENTS if ommited)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "coverage" })
  coverage?: CoverageEnum;

  /**
   * The list of originDestination identifiers for which the cabinRestriction applies
   */
  @SpeakeasyMetadata()
  @Expose({ name: "originDestinationIds" })
  originDestinationIds?: string[];
}

/**
 * Restriction towards carriers.
 */
export class SearchCriteriaFlightFiltersCarrierRestrictions extends SpeakeasyBase {
  /**
   * This flag enable/disable filtering of blacklisted airline by EU. The list of the banned airlines is published in the Official Journal of the European Union, where they are included as annexes A and B to the Commission Regulation. The blacklist of an airline can concern all its flights or some specific aircraft types pertaining to the airline
   */
  @SpeakeasyMetadata()
  @Expose({ name: "blacklistedInEUAllowed" })
  blacklistedInEUAllowed?: boolean;

  /**
   * This option ensures that the system will only consider these airlines.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "excludedCarrierCodes" })
  excludedCarrierCodes?: string[];

  /**
   * This option ensures that the system will only consider these airlines.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "includedCarrierCodes" })
  includedCarrierCodes?: string[];
}

/**
 * Restriction towards number of connections.
 */
export class SearchCriteriaFlightFiltersConnectionRestriction extends SpeakeasyBase {
  /**
   * Allow to change airport during connection
   */
  @SpeakeasyMetadata()
  @Expose({ name: "airportChangeAllowed" })
  airportChangeAllowed?: boolean;

  /**
   * The maximal number of connections for each itinerary. Value can be 0, 1 or 2.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxNumberOfConnections" })
  maxNumberOfConnections?: number;

  /**
   * This option allows the single segment to have one or more intermediate stops (technical stops).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "technicalStopsAllowed" })
  technicalStopsAllowed?: boolean;
}

export class SearchCriteriaFlightFilters extends SpeakeasyBase {
  /**
   * This flag enable/disable filtering of bus segment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "busSegmentAllowed" })
  busSegmentAllowed?: boolean;

  /**
   * Restriction towards cabins.
   */
  @SpeakeasyMetadata({ elemType: SearchCriteriaFlightFiltersCabinRestriction })
  @Expose({ name: "cabinRestrictions" })
  @Type(() => SearchCriteriaFlightFiltersCabinRestriction)
  cabinRestrictions?: SearchCriteriaFlightFiltersCabinRestriction[];

  /**
   * Restriction towards carriers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "carrierRestrictions" })
  @Type(() => SearchCriteriaFlightFiltersCarrierRestrictions)
  carrierRestrictions?: SearchCriteriaFlightFiltersCarrierRestrictions;

  /**
   * Restriction towards number of connections.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connectionRestriction" })
  @Type(() => SearchCriteriaFlightFiltersConnectionRestriction)
  connectionRestriction?: SearchCriteriaFlightFiltersConnectionRestriction;

  /**
   * Allows to search a location outside the borders when a radius around a location is specified. Default is false.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "crossBorderAllowed" })
  crossBorderAllowed?: boolean;

  /**
   * This option allows to modify the value for the Elapsed Flying Time (EFT) masterPricer option
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxFlightTime" })
  maxFlightTime?: number;

  /**
   * This flag enables/disables the possibility to have more overnight flights in Low Fare Search
   */
  @SpeakeasyMetadata()
  @Expose({ name: "moreOvernightsAllowed" })
  moreOvernightsAllowed?: boolean;

  /**
   * This flag enable/disable filtering of rail segment (TGV AIR, RAIL ...)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "railSegmentAllowed" })
  railSegmentAllowed?: boolean;

  /**
   * This option force to retrieve flight-offer with a departure and a return in the same airport
   */
  @SpeakeasyMetadata()
  @Expose({ name: "returnToDepartureAirport" })
  returnToDepartureAirport?: boolean;
}

export class SearchCriteria extends SpeakeasyBase {
  /**
   * This option allows activate the one-way combinable feature
   */
  @SpeakeasyMetadata()
  @Expose({ name: "addOneWayOffers" })
  addOneWayOffers?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "additionalInformation" })
  @Type(() => SearchCriteriaAdditionalInformation)
  additionalInformation?: SearchCriteriaAdditionalInformation;

  /**
   * This option allows to default to a standard fareOption if no offers are found for the selected fareOption.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowAlternativeFareOptions" })
  allowAlternativeFareOptions?: boolean;

  /**
   * This option allows to exclude the isAllotment flag associated to a booking class in the search response when it exist.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "excludeAllotments" })
  excludeAllotments?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "flightFilters" })
  @Type(() => SearchCriteriaFlightFilters)
  flightFilters?: SearchCriteriaFlightFilters;

  /**
   * Maximum number of flight offers returned (Max 250)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxFlightOffers" })
  maxFlightOffers?: number;

  /**
   * maximum price per traveler. By default, no limit is applied. If specified, the value should be a positive number with no decimals
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxPrice" })
  maxPrice?: number;

  /**
   * Requests the system to find at least one flight-offer per day, if possible, when a range of dates is specified. Default is false.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "oneFlightOfferPerDay" })
  oneFlightOfferPerDay?: boolean;

  /**
   * fare filter options
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pricingOptions" })
  @Type(() => ExtendedPricingOptions)
  pricingOptions?: ExtendedPricingOptions;
}
