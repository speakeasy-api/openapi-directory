/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * The Investor endpoint allows you to create investors, update investors and retrieve investor records in bulk or individually. If a KYC/AML service has been set-up through WealthOS (e.g. Onfido), then the investor will be verified using this service.
 *
 * @remarks
 *
 * When retrieving the investor, the following fields will provide information regarding the investorâ€™s status that can be used for deciding on what subsequent investor action must be permitted.
 *
 * * dealing_status: Normally set to Active once KYC/AML passes, however may be independently set by administrators if required.
 *
 * * kyc_aml_status - the status of the KYC/AML check
 *
 * * Status - ultimate status of the investor derived from dealing_status and kcy_aml_status.
 *
 * If WealthOS is not set-up to manage the KYC/AML service then the wealth manager must specify the `kyc_aml_status` and `dealing_status` on investor creation and update. The `status` of the investor will be consider active only when the `kyc_aml_status : "clear"` and `dealing_status : "active"`
 */
export class Investors {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create Investor
   *
   * @remarks
   * Create a new investor in the system.
   */
  createInvestor(
    req: operations.CreateInvestorRequest,
    security: operations.CreateInvestorSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateInvestorResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateInvestorRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/tenant/investors/v1";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateInvestorSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateInvestorResponse =
        new operations.CreateInvestorResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rootTypeForInvestorCreationResponse = utils.objectToClass(
              httpRes?.data,
              operations.CreateInvestorRootTypeForInvestorCreationResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createInvestor400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateInvestor400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createInvestor401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateInvestor401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createInvestor403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateInvestor403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createInvestor429ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateInvestor429ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createInvestor500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateInvestor500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get All Investors
   *
   * @remarks
   * Returns all the investors in an array
   */
  getAllInvestors(
    req: operations.GetAllInvestorsRequest,
    security: operations.GetAllInvestorsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAllInvestorsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAllInvestorsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/tenant/investors/v1";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetAllInvestorsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAllInvestorsResponse =
        new operations.GetAllInvestorsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllInvestors200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetAllInvestors200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllInvestors400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetAllInvestors400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllInvestors401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetAllInvestors401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllInvestors403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetAllInvestors403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllInvestors429ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetAllInvestors429ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllInvestors500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetAllInvestors500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Investor
   *
   * @remarks
   * Get details of an investor
   */
  getInvestor(
    req: operations.GetInvestorRequest,
    security: operations.GetInvestorSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetInvestorResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetInvestorRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tenant/investors/v1/{investor_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetInvestorSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetInvestorResponse =
        new operations.GetInvestorResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rootTypeForInvestor = utils.objectToClass(
              httpRes?.data,
              operations.GetInvestorRootTypeForInvestor
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getInvestor400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetInvestor400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getInvestor401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetInvestor401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getInvestor403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetInvestor403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getInvestor404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetInvestor404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getInvestor429ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetInvestor429ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getInvestor500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetInvestor500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update Investor
   *
   * @remarks
   * Update an existing investor. WealthOS will update only the fields sent in the request. Field mentioned as Nullable can be deleted by updating those values with null.
   */
  updateInvestor(
    req: operations.UpdateInvestorRequest,
    security: operations.UpdateInvestorSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateInvestorResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateInvestorRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tenant/investors/v1/{investor_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateInvestorSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateInvestorResponse =
        new operations.UpdateInvestorResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rootTypeForInvestor = utils.objectToClass(
              httpRes?.data,
              operations.UpdateInvestorRootTypeForInvestor
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateInvestor400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateInvestor400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateInvestor401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateInvestor401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateInvestor403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateInvestor403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateInvestor404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateInvestor404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateInvestor409ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateInvestor409ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateInvestor429ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateInvestor429ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateInvestor500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateInvestor500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
