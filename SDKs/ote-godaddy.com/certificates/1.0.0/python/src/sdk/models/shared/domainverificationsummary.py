"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DomainVerificationSummaryStatusEnum(str, Enum):
    r"""Domain verification status:
      * `AWAITING` - Verification pending customer input
      * `INVALID` - SAN connected to a cancelled request
      * `COMPLETED` - Verification completed
      * `FAILED_VERIFICATION` - Verification failed
      * `PENDING_POSSIBLE_FRAUD` - Flagged for a system level fraud review
      * `VERIFIED_POSSIBLE_FRAUD` - Fraud detection reviewed but verified
      * `DROPPED` - SAN dropped from request
      * `REVOKED_CERT` - Certificate revoked
      * `DROPPED_GOOGLE_SAFE_BROWSING` - SAN dropped from request due to Google Safe Browsing check
      * `DROPPED_CERTIFICATE_AUTHORITY_AUTHORIZATION` - SAN dropped from request due to Certificate Authorization Authority DNS record check
    """
    COMPLETED = 'COMPLETED'
    FAILED_VERIFICATION = 'FAILED_VERIFICATION'
    VERIFIED_POSSIBLE_FRAUD = 'VERIFIED_POSSIBLE_FRAUD'
    DROPPED = 'DROPPED'
    DROPPED_CERTIFICATE_AUTHORITY_AUTHORIZATION = 'DROPPED_CERTIFICATE_AUTHORITY_AUTHORIZATION'
    DROPPED_GOOGLE_SAFE_BROWSING = 'DROPPED_GOOGLE_SAFE_BROWSING'
    INVALID = 'INVALID'
    AWAITING = 'AWAITING'
    PENDING_POSSIBLE_FRAUD = 'PENDING_POSSIBLE_FRAUD'
    REVOKED_CERTIFICATE = 'REVOKED_CERTIFICATE'

class DomainVerificationSummaryTypeEnum(str, Enum):
    r"""Domain verification type:
      * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMIN` - Domain verified using domain control verification email sent to admin@<your.domain.com>
      * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMINSTRATOR` - Domain verified using domain control verification email sent to administrator@<your.domain.com>
      * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_HOST_MASTER` - Domain verified using domain control verification email sent to hostmaster@<your.domain.com>
      * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_POST_MASTER` - Domain verified using domain control verification email sent to postmaster@<your.domain.com>
      * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_WEB_MASTER` - Domain verified using domain control verification email sent to webmaster@<your.domain.com>
      * `DOMAIN_ACCESS_EMAIL` - Domain verified using a domain access email
      * `DOMAIN_ACCESS_LETTER` - Customer completed a domain access letter which was used for domain verification
      * `DOMAIN_CONTROL_EMAIL` - Domain verified using HTML file or DNS zone file text value
      * `DOMAIN_ZONE_CONTROL` - DNS zone file containing a pre-generated text value used for domain verification
      * `MANUAL_DOMAIN_ACCESS_EMAIL` - DAE sent to an email address manually entered by a rep
      * `PREVIOUS_DOMAIN_ACCESS_EMAIL` - Customers domain access email for a prior certificate request was used for domain verification
      * `REGISTRATION_AUTHORITY_DOMAIN_ACCESS_LETTER` - Representative reviewed a customer provided domain access letter and verified domain
      * `REGISTRATION_AUTHORITY_DOMAIN_ZONE_CONTROL` - Representative verified domain using a manual domain zone control check
      * `REGISTRATION_AUTHORITY_OVERRIDE` - Representative verified domain using alternative methods
      * `REGISTRATION_AUTHORITY_WEBSITE_CONTROL` - Representative verified domain using a manual website control check
      * `CUSTOMER_OWNED` - Validated customer account information used for domain control verification
      * `WEBSITE_CONTROL` - HTML file in root website directory containing pre-generated value used for domain control verification
    """
    DOMAIN_CONTROL_EMAIL = 'DOMAIN_CONTROL_EMAIL'
    AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMIN = 'AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMIN'
    AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMINSTRATOR = 'AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMINSTRATOR'
    AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_HOST_MASTER = 'AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_HOST_MASTER'
    AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_POST_MASTER = 'AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_POST_MASTER'
    AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_WEB_MASTER = 'AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_WEB_MASTER'
    DOMAIN_ACCESS_EMAIL = 'DOMAIN_ACCESS_EMAIL'
    DOMAIN_ACCESS_LETTER = 'DOMAIN_ACCESS_LETTER'
    DOMAIN_ZONE_CONTROL = 'DOMAIN_ZONE_CONTROL'
    MANUAL_DOMAIN_ACCESS_EMAIL = 'MANUAL_DOMAIN_ACCESS_EMAIL'
    PREVIOUS_DOMAIN_ACCESS_EMAIL = 'PREVIOUS_DOMAIN_ACCESS_EMAIL'
    REGISTRATION_AUTHORITY_DOMAIN_ACCESS_LETTER = 'REGISTRATION_AUTHORITY_DOMAIN_ACCESS_LETTER'
    REGISTRATION_AUTHORITY_DOMAIN_ZONE_CONTROL = 'REGISTRATION_AUTHORITY_DOMAIN_ZONE_CONTROL'
    REGISTRATION_AUTHORITY_OVERRIDE = 'REGISTRATION_AUTHORITY_OVERRIDE'
    REGISTRATION_AUTHORITY_WEBSITE_CONTROL = 'REGISTRATION_AUTHORITY_WEBSITE_CONTROL'
    CUSTOMER_OWNED = 'CUSTOMER_OWNED'
    WEBSITE_CONTROL = 'WEBSITE_CONTROL'

class DomainVerificationSummaryUsageEnum(str, Enum):
    r"""Type of domain name used for domain verification"""
    COMMON_NAME = 'COMMON_NAME'
    SUBJECT_ALTERNATIVE_NAME = 'SUBJECT_ALTERNATIVE_NAME'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DomainVerificationSummary:
    
    created_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt') }})
    r"""Timestamp indicating when the domain verification process was started"""  
    domain: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain') }})
    r"""Domain name"""  
    domain_entity_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domainEntityId') }})
    r"""A unique identifier that can be leveraged for retrieving domain verification related information. Primarily used when troubleshooting a request"""  
    modified_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modifiedAt') }})
    r"""Timestamp indicating when the domain verification process was last updated"""  
    status: DomainVerificationSummaryStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Domain verification status:
      * `AWAITING` - Verification pending customer input
      * `INVALID` - SAN connected to a cancelled request
      * `COMPLETED` - Verification completed
      * `FAILED_VERIFICATION` - Verification failed
      * `PENDING_POSSIBLE_FRAUD` - Flagged for a system level fraud review
      * `VERIFIED_POSSIBLE_FRAUD` - Fraud detection reviewed but verified
      * `DROPPED` - SAN dropped from request
      * `REVOKED_CERT` - Certificate revoked
      * `DROPPED_GOOGLE_SAFE_BROWSING` - SAN dropped from request due to Google Safe Browsing check
      * `DROPPED_CERTIFICATE_AUTHORITY_AUTHORIZATION` - SAN dropped from request due to Certificate Authorization Authority DNS record check
    """  
    type: DomainVerificationSummaryTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Domain verification type:
      * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMIN` - Domain verified using domain control verification email sent to admin@<your.domain.com>
      * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMINSTRATOR` - Domain verified using domain control verification email sent to administrator@<your.domain.com>
      * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_HOST_MASTER` - Domain verified using domain control verification email sent to hostmaster@<your.domain.com>
      * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_POST_MASTER` - Domain verified using domain control verification email sent to postmaster@<your.domain.com>
      * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_WEB_MASTER` - Domain verified using domain control verification email sent to webmaster@<your.domain.com>
      * `DOMAIN_ACCESS_EMAIL` - Domain verified using a domain access email
      * `DOMAIN_ACCESS_LETTER` - Customer completed a domain access letter which was used for domain verification
      * `DOMAIN_CONTROL_EMAIL` - Domain verified using HTML file or DNS zone file text value
      * `DOMAIN_ZONE_CONTROL` - DNS zone file containing a pre-generated text value used for domain verification
      * `MANUAL_DOMAIN_ACCESS_EMAIL` - DAE sent to an email address manually entered by a rep
      * `PREVIOUS_DOMAIN_ACCESS_EMAIL` - Customers domain access email for a prior certificate request was used for domain verification
      * `REGISTRATION_AUTHORITY_DOMAIN_ACCESS_LETTER` - Representative reviewed a customer provided domain access letter and verified domain
      * `REGISTRATION_AUTHORITY_DOMAIN_ZONE_CONTROL` - Representative verified domain using a manual domain zone control check
      * `REGISTRATION_AUTHORITY_OVERRIDE` - Representative verified domain using alternative methods
      * `REGISTRATION_AUTHORITY_WEBSITE_CONTROL` - Representative verified domain using a manual website control check
      * `CUSTOMER_OWNED` - Validated customer account information used for domain control verification
      * `WEBSITE_CONTROL` - HTML file in root website directory containing pre-generated value used for domain control verification
    """  
    usage: DomainVerificationSummaryUsageEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usage') }})
    r"""Type of domain name used for domain verification"""  
    dce_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dceToken'), 'exclude': lambda f: f is None }})
    r"""DCE verification type token (if DCE verification type)."""  
    