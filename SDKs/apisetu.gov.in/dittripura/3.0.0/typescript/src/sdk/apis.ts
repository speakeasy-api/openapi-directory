/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class APIs {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Character Certificate
   *
   * @remarks
   * API to verify Character Certificate.
   */
  chcer(
    req: operations.ChcerRequestBody,
    security: operations.ChcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ChcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ChcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/chcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ChcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ChcerResponse = new operations.ChcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.chcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Chcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.chcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Chcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.chcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Chcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.chcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Chcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.chcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Chcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.chcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Chcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.chcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Chcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Distance Certificate
   *
   * @remarks
   * API to verify Distance Certificate.
   */
  dncer(
    req: operations.DncerRequestBody,
    security: operations.DncerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DncerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DncerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/dncer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DncerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DncerResponse = new operations.DncerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dncer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dncer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dncer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dncer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dncer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dncer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dncer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dncer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dncer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dncer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dncer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dncer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dncer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dncer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Dependency Certificate
   *
   * @remarks
   * API to verify Dependency Certificate.
   */
  dpcer(
    req: operations.DpcerRequestBody,
    security: operations.DpcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DpcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DpcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/dpcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DpcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DpcerResponse = new operations.DpcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dpcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dpcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dpcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dpcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dpcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dpcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dpcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dpcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dpcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dpcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dpcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dpcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dpcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Dpcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Food Stuff License
   *
   * @remarks
   * API to verify Food Stuff License.
   */
  fslcs(
    req: operations.FslcsRequestBody,
    security: operations.FslcsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FslcsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FslcsRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/fslcs/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FslcsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FslcsResponse = new operations.FslcsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fslcs400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Fslcs400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fslcs401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Fslcs401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fslcs404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Fslcs404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fslcs500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Fslcs500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fslcs502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Fslcs502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fslcs503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Fslcs503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fslcs504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Fslcs504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Grievance Redressal/ Registration
   *
   * @remarks
   * API to verify Grievance Redressal/ Registration.
   */
  grred(
    req: operations.GrredRequestBody,
    security: operations.GrredSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GrredResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GrredRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/grred/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GrredSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GrredResponse = new operations.GrredResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.grred400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Grred400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.grred401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Grred401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.grred404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Grred404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.grred500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Grred500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.grred502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Grred502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.grred503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Grred503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.grred504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Grred504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Income Certificate
   *
   * @remarks
   * API to verify Income Certificate.
   */
  incer(
    req: operations.IncerRequestBody,
    security: operations.IncerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.IncerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.IncerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/incer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.IncerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IncerResponse = new operations.IncerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.incer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Incer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.incer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Incer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.incer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Incer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.incer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Incer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.incer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Incer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.incer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Incer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.incer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Incer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Issue of Arm Licence
   *
   * @remarks
   * API to verify Issue of Arm Licence.
   */
  isoal(
    req: operations.IsoalRequestBody,
    security: operations.IsoalSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.IsoalResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.IsoalRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/isoal/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.IsoalSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IsoalResponse = new operations.IsoalResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.isoal400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Isoal400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.isoal401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Isoal401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.isoal404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Isoal404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.isoal500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Isoal500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.isoal502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Isoal502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.isoal503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Isoal503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.isoal504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Isoal504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Land Valuation/ Holding/ Record Certificate
   *
   * @remarks
   * API to verify Land Valuation/ Holding/ Record Certificate.
   */
  lvcer(
    req: operations.LvcerRequestBody,
    security: operations.LvcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.LvcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LvcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/lvcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.LvcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LvcerResponse = new operations.LvcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lvcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Lvcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lvcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Lvcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lvcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Lvcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lvcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Lvcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lvcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Lvcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lvcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Lvcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lvcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Lvcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Manufacturer License
   *
   * @remarks
   * API to verify Manufacturer License.
   */
  malcs(
    req: operations.MalcsRequestBody,
    security: operations.MalcsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MalcsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MalcsRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/malcs/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.MalcsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MalcsResponse = new operations.MalcsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.malcs400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Malcs400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.malcs401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Malcs401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.malcs404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Malcs404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.malcs500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Malcs500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.malcs502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Malcs502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.malcs503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Malcs503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.malcs504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Malcs504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Small Savings Agent License
   *
   * @remarks
   * API to verify Small Savings Agent License.
   */
  mpkby(
    req: operations.MpkbyRequestBody,
    security: operations.MpkbySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MpkbyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MpkbyRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/mpkby/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.MpkbySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MpkbyResponse = new operations.MpkbyResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mpkby400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Mpkby400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mpkby401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Mpkby401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mpkby404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Mpkby404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mpkby500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Mpkby500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mpkby502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Mpkby502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mpkby503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Mpkby503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mpkby504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Mpkby504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * OBC Certificate
   *
   * @remarks
   * API to verify OBC Certificate.
   */
  obcer(
    req: operations.ObcerRequestBody,
    security: operations.ObcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ObcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ObcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/obcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ObcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ObcerResponse = new operations.ObcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Obcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Obcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Obcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Obcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Obcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Obcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Obcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Right to Information
   *
   * @remarks
   * API to verify Right to Information.
   */
  ritin(
    req: operations.RitinRequestBody,
    security: operations.RitinSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RitinResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RitinRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/ritin/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RitinSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RitinResponse = new operations.RitinResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ritin400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ritin400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ritin401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ritin401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ritin404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ritin404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ritin500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ritin500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ritin502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ritin502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ritin503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ritin503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ritin504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ritin504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Marriage Certificate
   *
   * @remarks
   * API to verify Marriage Certificate.
   */
  rmcer(
    req: operations.RmcerRequestBody,
    security: operations.RmcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RmcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RmcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/rmcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RmcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RmcerResponse = new operations.RmcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rmcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Rmcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rmcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Rmcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rmcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Rmcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rmcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Rmcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rmcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Rmcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rmcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Rmcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rmcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Rmcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Residence Certificate
   *
   * @remarks
   * API to verify Residence Certificate.
   */
  rscer(
    req: operations.RscerRequestBody,
    security: operations.RscerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RscerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RscerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/rscer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RscerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RscerResponse = new operations.RscerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rscer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Rscer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rscer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Rscer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rscer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Rscer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rscer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Rscer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rscer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Rscer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rscer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Rscer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rscer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Rscer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * SC/ST  Certificate
   *
   * @remarks
   * API to verify SC/ST  Certificate.
   */
  shcer(
    req: operations.ShcerRequestBody,
    security: operations.ShcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ShcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ShcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/shcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ShcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ShcerResponse = new operations.ShcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.shcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Shcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.shcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Shcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.shcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Shcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.shcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Shcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.shcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Shcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.shcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Shcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.shcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Shcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Surviving Member Certificate
   *
   * @remarks
   * API to verify Surviving Member Certificate.
   */
  smcer(
    req: operations.SmcerRequestBody,
    security: operations.SmcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SmcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SmcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/smcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SmcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SmcerResponse = new operations.SmcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.smcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Smcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.smcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Smcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.smcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Smcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.smcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Smcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.smcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Smcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.smcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Smcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.smcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Smcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Standardized Agency Systems (SAS) Agent License
   *
   * @remarks
   * API to verify Standardized Agency Systems (SAS) Agent License.
   */
  sslcs(
    req: operations.SslcsRequestBody,
    security: operations.SslcsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SslcsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SslcsRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/sslcs/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SslcsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SslcsResponse = new operations.SslcsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sslcs400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sslcs400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sslcs401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sslcs401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sslcs404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sslcs404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sslcs500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sslcs500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sslcs502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sslcs502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sslcs503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sslcs503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sslcs504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sslcs504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * License/ Verification of Weights, Measures and Instruments
   *
   * @remarks
   * API to verify License/ Verification of Weights, Measures and Instruments.
   */
  vrwmi(
    req: operations.VrwmiRequestBody,
    security: operations.VrwmiSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VrwmiResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.VrwmiRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/vrwmi/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.VrwmiSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VrwmiResponse = new operations.VrwmiResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.vrwmi400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Vrwmi400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.vrwmi401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Vrwmi401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.vrwmi404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Vrwmi404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.vrwmi500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Vrwmi500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.vrwmi502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Vrwmi502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.vrwmi503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Vrwmi503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.vrwmi504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Vrwmi504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
