"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import calltoaction as shared_calltoaction
from ..shared import localpostevent as shared_localpostevent
from ..shared import localpostoffer as shared_localpostoffer
from ..shared import mediaitem as shared_mediaitem
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class LocalPostAlertTypeEnum(str, Enum):
    r"""The type of alert the post is created for. This field is only applicable for posts of topic_type Alert, and behaves as a sub-type of Alerts."""
    ALERT_TYPE_UNSPECIFIED = 'ALERT_TYPE_UNSPECIFIED'
    COVID_19 = 'COVID_19'

class LocalPostStateEnum(str, Enum):
    r"""Output only. The state of the post, indicating what part of its lifecycle it is in."""
    LOCAL_POST_STATE_UNSPECIFIED = 'LOCAL_POST_STATE_UNSPECIFIED'
    REJECTED = 'REJECTED'
    LIVE = 'LIVE'
    PROCESSING = 'PROCESSING'

class LocalPostTopicTypeEnum(str, Enum):
    r"""Required. The topic type of the post: standard, event, offer, or alert."""
    LOCAL_POST_TOPIC_TYPE_UNSPECIFIED = 'LOCAL_POST_TOPIC_TYPE_UNSPECIFIED'
    STANDARD = 'STANDARD'
    EVENT = 'EVENT'
    OFFER = 'OFFER'
    ALERT = 'ALERT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LocalPost:
    r"""Represents a [local post](https://support.google.com/business/answer/7662907) for a location."""
    
    alert_type: Optional[LocalPostAlertTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alertType'), 'exclude': lambda f: f is None }})
    r"""The type of alert the post is created for. This field is only applicable for posts of topic_type Alert, and behaves as a sub-type of Alerts."""  
    call_to_action: Optional[shared_calltoaction.CallToAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callToAction'), 'exclude': lambda f: f is None }})
    r"""An action that is performed when the user clicks through the post"""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Time of the creation of the post."""  
    event: Optional[shared_localpostevent.LocalPostEvent] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event'), 'exclude': lambda f: f is None }})
    r"""All the information pertaining to an event featured in a local post."""  
    language_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languageCode'), 'exclude': lambda f: f is None }})
    r"""The language of the local post."""  
    media: Optional[list[shared_mediaitem.MediaItem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('media'), 'exclude': lambda f: f is None }})
    r"""The media associated with the post. source_url is the only supported data field for a LocalPost MediaItem."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. Google identifier for this local post in the form: `accounts/{account_id}/locations/{location_id}/localPosts/{local_post_id}`"""  
    offer: Optional[shared_localpostoffer.LocalPostOffer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offer'), 'exclude': lambda f: f is None }})
    r"""Specific fields for offer posts."""  
    search_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('searchUrl'), 'exclude': lambda f: f is None }})
    r"""Output only. The link to the local post in Google search. This link can be used to share the post via social media, email, text, etc."""  
    state: Optional[LocalPostStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. The state of the post, indicating what part of its lifecycle it is in."""  
    summary: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('summary'), 'exclude': lambda f: f is None }})
    r"""Description/body of the local post."""  
    topic_type: Optional[LocalPostTopicTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topicType'), 'exclude': lambda f: f is None }})
    r"""Required. The topic type of the post: standard, event, offer, or alert."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Time of the last modification of the post made by the user."""  
    