// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetOrganizationSwitchPortsBySwitchRequest struct {
	// Optional parameter to filter results by switches where the configuration has been updated after the given timestamp.
	ConfigurationUpdatedAfter *string `queryParam:"style=form,explode=true,name=configurationUpdatedAfter"`
	// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	EndingBefore *string `queryParam:"style=form,explode=true,name=endingBefore"`
	// Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match.
	Mac *string `queryParam:"style=form,explode=true,name=mac"`
	// Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match.
	Macs []string `queryParam:"style=form,explode=false,name=macs"`
	// Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match.
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// Optional parameter to filter switchports by network.
	NetworkIds     []string `queryParam:"style=form,explode=false,name=networkIds"`
	OrganizationID string   `pathParam:"style=simple,explode=false,name=organizationId"`
	// The number of entries per page returned. Acceptable range is 3 - 50. Default is 50.
	PerPage *int64 `queryParam:"style=form,explode=true,name=perPage"`
	// Optional parameter to filter switchports belonging to the specified switchport profiles.
	PortProfileIds []string `queryParam:"style=form,explode=false,name=portProfileIds"`
	// Optional parameter to filter switchports belonging to switches by serial number. All returned switches will have a serial number that contains the search term or is an exact match.
	Serial *string `queryParam:"style=form,explode=true,name=serial"`
	// Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match.
	Serials []string `queryParam:"style=form,explode=false,name=serials"`
	// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	StartingAfter *string `queryParam:"style=form,explode=true,name=startingAfter"`
}

// GetOrganizationSwitchPortsBySwitch200ApplicationJSONNetwork - The network that the switch belongs to
type GetOrganizationSwitchPortsBySwitch200ApplicationJSONNetwork struct {
	// ID of the network
	ID *string `json:"id,omitempty"`
	// Name of the network
	Name *string `json:"name,omitempty"`
}

// GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsAccessPolicyTypeEnum - The type of the access policy of the switch port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
type GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsAccessPolicyTypeEnum string

const (
	GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsAccessPolicyTypeEnumCustomAccessPolicy GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsAccessPolicyTypeEnum = "Custom access policy"
	GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsAccessPolicyTypeEnumMacAllowList       GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsAccessPolicyTypeEnum = "MAC allow list"
	GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsAccessPolicyTypeEnumOpen               GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsAccessPolicyTypeEnum = "Open"
	GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsAccessPolicyTypeEnumStickyMacAllowList GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsAccessPolicyTypeEnum = "Sticky MAC allow list"
)

func (e GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsAccessPolicyTypeEnum) ToPointer() *GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsAccessPolicyTypeEnum {
	return &e
}

func (e *GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsAccessPolicyTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Custom access policy":
		fallthrough
	case "MAC allow list":
		fallthrough
	case "Open":
		fallthrough
	case "Sticky MAC allow list":
		*e = GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsAccessPolicyTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsAccessPolicyTypeEnum: %v", v)
	}
}

// GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsStpGuardEnum - The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
type GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsStpGuardEnum string

const (
	GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsStpGuardEnumBpduGuard GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsStpGuardEnum = "bpdu guard"
	GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsStpGuardEnumDisabled  GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsStpGuardEnum = "disabled"
	GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsStpGuardEnumLoopGuard GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsStpGuardEnum = "loop guard"
	GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsStpGuardEnumRootGuard GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsStpGuardEnum = "root guard"
)

func (e GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsStpGuardEnum) ToPointer() *GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsStpGuardEnum {
	return &e
}

func (e *GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsStpGuardEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bpdu guard":
		fallthrough
	case "disabled":
		fallthrough
	case "loop guard":
		fallthrough
	case "root guard":
		*e = GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsStpGuardEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsStpGuardEnum: %v", v)
	}
}

// GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsTypeEnum - The type of the switch port ('trunk' or 'access').
type GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsTypeEnum string

const (
	GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsTypeEnumAccess GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsTypeEnum = "access"
	GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsTypeEnumTrunk  GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsTypeEnum = "trunk"
)

func (e GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsTypeEnum) ToPointer() *GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsTypeEnum {
	return &e
}

func (e *GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "access":
		fallthrough
	case "trunk":
		*e = GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsTypeEnum: %v", v)
	}
}

type GetOrganizationSwitchPortsBySwitch200ApplicationJSONPorts struct {
	// The type of the access policy of the switch port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
	AccessPolicyType *GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsAccessPolicyTypeEnum `json:"accessPolicyType,omitempty"`
	// The VLANs allowed on the switch port. Only applicable to trunk ports.
	AllowedVlans *string `json:"allowedVlans,omitempty"`
	// The status of the switch port.
	Enabled *bool `json:"enabled,omitempty"`
	// The link speed for the switch port.
	LinkNegotiation *string `json:"linkNegotiation,omitempty"`
	// The name of the switch port.
	Name *string `json:"name,omitempty"`
	// The PoE status of the switch port.
	PoeEnabled *bool `json:"poeEnabled,omitempty"`
	// The identifier of the switch port.
	PortID *string `json:"portId,omitempty"`
	// The rapid spanning tree protocol status.
	RstpEnabled *bool `json:"rstpEnabled,omitempty"`
	// The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
	StickyMacAllowList []string `json:"stickyMacAllowList,omitempty"`
	// The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
	StickyMacAllowListLimit *int64 `json:"stickyMacAllowListLimit,omitempty"`
	// The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
	StpGuard *GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsStpGuardEnum `json:"stpGuard,omitempty"`
	// The list of tags of the switch port.
	Tags []string `json:"tags,omitempty"`
	// The type of the switch port ('trunk' or 'access').
	Type *GetOrganizationSwitchPortsBySwitch200ApplicationJSONPortsTypeEnum `json:"type,omitempty"`
	// The VLAN of the switch port. A null value will clear the value set for trunk ports.
	Vlan *int64 `json:"vlan,omitempty"`
	// The voice VLAN of the switch port. Only applicable to access ports.
	VoiceVlan *int64 `json:"voiceVlan,omitempty"`
}

type GetOrganizationSwitchPortsBySwitch200ApplicationJSON struct {
	// MAC address of the switch
	Mac *string `json:"mac,omitempty"`
	// Model of the switch
	Model *string `json:"model,omitempty"`
	// Name of the switch
	Name *string `json:"name,omitempty"`
	// The network that the switch belongs to
	Network *GetOrganizationSwitchPortsBySwitch200ApplicationJSONNetwork `json:"network,omitempty"`
	// Ports belonging to the switch
	Ports []GetOrganizationSwitchPortsBySwitch200ApplicationJSONPorts `json:"ports,omitempty"`
	// Serial of the switch
	Serial *string `json:"serial,omitempty"`
}

type GetOrganizationSwitchPortsBySwitchResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetOrganizationSwitchPortsBySwitch200ApplicationJSONObjects []GetOrganizationSwitchPortsBySwitch200ApplicationJSON
}
