<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Account 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create a new credential
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CredentialOptions $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAccountCredentialSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAccountCredentialResponse
     */
	public function createAccountCredential(
        \OpenAPI\OpenAPI\Models\Shared\CredentialOptions $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateAccountCredentialSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAccountCredentialResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/credentials');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAccountCredentialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->credential = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Credential', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Create a new group
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\GroupPost $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAccountGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAccountGroupResponse
     */
	public function createAccountGroup(
        \OpenAPI\OpenAPI\Models\Shared\GroupPost $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateAccountGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAccountGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/groups');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAccountGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Create a new SSO group mapping
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\GroupMapping $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAccountGroupMappingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAccountGroupMappingResponse
     */
	public function createAccountGroupMapping(
        \OpenAPI\OpenAPI\Models\Shared\GroupMapping $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateAccountGroupMappingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAccountGroupMappingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/sso/groups');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAccountGroupMappingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Create a new key
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\APIKeyOptions $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAccountKeySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAccountKeyResponse
     */
	public function createAccountKey(
        \OpenAPI\OpenAPI\Models\Shared\APIKeyOptions $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateAccountKeySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAccountKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/keys');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAccountKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\APIKey', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Create a new organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\OrgOptions $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAccountOrganizationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAccountOrganizationResponse
     */
	public function createAccountOrganization(
        \OpenAPI\OpenAPI\Models\Shared\OrgOptions $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateAccountOrganizationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAccountOrganizationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/orgs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAccountOrganizationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organization = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Organization', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Create a new scan template
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ScanTemplateOptions $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAccountScanTemplateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAccountScanTemplateResponse
     */
	public function createAccountScanTemplate(
        \OpenAPI\OpenAPI\Models\Shared\ScanTemplateOptions $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateAccountScanTemplateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAccountScanTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/tasks/templates');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAccountScanTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scanTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScanTemplate', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 422) {
        }

        return $response;
    }
	
    /**
     * Create a new user account
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\UserOptions $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAccountUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAccountUserResponse
     */
	public function createAccountUser(
        \OpenAPI\OpenAPI\Models\Shared\UserOptions $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateAccountUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAccountUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/users');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAccountUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Create a new user account and send an email invite
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\UserInviteOptions $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAccountUserInviteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAccountUserInviteResponse
     */
	public function createAccountUserInvite(
        \OpenAPI\OpenAPI\Models\Shared\UserInviteOptions $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateAccountUserInviteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAccountUserInviteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/users/invite');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAccountUserInviteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Removes the export token from the specified organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAccountOrganizationExportTokenRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAccountOrganizationExportTokenSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAccountOrganizationExportTokenResponse
     */
	public function deleteAccountOrganizationExportToken(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAccountOrganizationExportTokenRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteAccountOrganizationExportTokenSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAccountOrganizationExportTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/orgs/{org_id}/exportToken', \OpenAPI\OpenAPI\Models\Operations\DeleteAccountOrganizationExportTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAccountOrganizationExportTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * System event log as JSON
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportEventsJSONRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportEventsJSONSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportEventsJSONResponse
     */
	public function exportEventsJSON(
        \OpenAPI\OpenAPI\Models\Operations\ExportEventsJSONRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportEventsJSONSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportEventsJSONResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/events.json');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ExportEventsJSONRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportEventsJSONResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->events = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Event>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * System event log as JSON line-delimited
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportEventsJSONLRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportEventsJSONLSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportEventsJSONLResponse
     */
	public function exportEventsJSONL(
        \OpenAPI\OpenAPI\Models\Operations\ExportEventsJSONLRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportEventsJSONLSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportEventsJSONLResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/events.jsonl');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ExportEventsJSONLRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportEventsJSONLResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->events = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Event>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get all agents across all organizations
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountAgentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountAgentsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountAgentsResponse
     */
	public function getAccountAgents(
        \OpenAPI\OpenAPI\Models\Operations\GetAccountAgentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAccountAgentsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountAgentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/agents');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAccountAgentsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountAgentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->agents = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Agent>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get credential details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountCredentialRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountCredentialSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountCredentialResponse
     */
	public function getAccountCredential(
        \OpenAPI\OpenAPI\Models\Operations\GetAccountCredentialRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAccountCredentialSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountCredentialResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/credentials/{credential_id}', \OpenAPI\OpenAPI\Models\Operations\GetAccountCredentialRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountCredentialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->credential = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Credential', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get all account credentials
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountCredentialsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountCredentialsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountCredentialsResponse
     */
	public function getAccountCredentials(
        \OpenAPI\OpenAPI\Models\Operations\GetAccountCredentialsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAccountCredentialsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountCredentialsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/credentials');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAccountCredentialsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountCredentialsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->credentials = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Credential>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get group details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountGroupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountGroupResponse
     */
	public function getAccountGroup(
        \OpenAPI\OpenAPI\Models\Operations\GetAccountGroupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAccountGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/groups/{group_id}', \OpenAPI\OpenAPI\Models\Operations\GetAccountGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get SSO group mapping details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountGroupMappingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountGroupMappingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountGroupMappingResponse
     */
	public function getAccountGroupMapping(
        \OpenAPI\OpenAPI\Models\Operations\GetAccountGroupMappingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAccountGroupMappingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountGroupMappingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/sso/groups/{group_mapping_id}', \OpenAPI\OpenAPI\Models\Operations\GetAccountGroupMappingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountGroupMappingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get all SSO group mappings
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountGroupMappingsResponse
     */
	public function getAccountGroupMappings(
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountGroupMappingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/sso/groups');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountGroupMappingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get all groups
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountGroupsResponse
     */
	public function getAccountGroups(
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/groups');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get key details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountKeySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountKeyResponse
     */
	public function getAccountKey(
        \OpenAPI\OpenAPI\Models\Operations\GetAccountKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAccountKeySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/keys/{key_id}', \OpenAPI\OpenAPI\Models\Operations\GetAccountKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get all active API keys
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountKeysResponse
     */
	public function getAccountKeys(
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/keys');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiKeys = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\APIKey>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get license details
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountLicenseResponse
     */
	public function getAccountLicense(
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountLicenseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/license');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountLicenseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get organization details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountOrganizationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountOrganizationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountOrganizationResponse
     */
	public function getAccountOrganization(
        \OpenAPI\OpenAPI\Models\Operations\GetAccountOrganizationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAccountOrganizationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountOrganizationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/orgs/{org_id}', \OpenAPI\OpenAPI\Models\Operations\GetAccountOrganizationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountOrganizationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get all organization details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountOrganizationsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountOrganizationsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountOrganizationsResponse
     */
	public function getAccountOrganizations(
        \OpenAPI\OpenAPI\Models\Operations\GetAccountOrganizationsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAccountOrganizationsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountOrganizationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/orgs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAccountOrganizationsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountOrganizationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Organization>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get scan template details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountScanTemplateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountScanTemplateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountScanTemplateResponse
     */
	public function getAccountScanTemplate(
        \OpenAPI\OpenAPI\Models\Operations\GetAccountScanTemplateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAccountScanTemplateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountScanTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/tasks/templates/{scan_template_id}', \OpenAPI\OpenAPI\Models\Operations\GetAccountScanTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountScanTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scanTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScanTemplate', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
        }

        return $response;
    }
	
    /**
     * Get all scan templates across all organizations (up to 1000)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountScanTemplatesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountScanTemplatesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountScanTemplatesResponse
     */
	public function getAccountScanTemplates(
        \OpenAPI\OpenAPI\Models\Operations\GetAccountScanTemplatesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAccountScanTemplatesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountScanTemplatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/tasks/templates');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAccountScanTemplatesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountScanTemplatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scanTemplates = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ScanTemplate>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 422) {
        }

        return $response;
    }
	
    /**
     * Get all sites details across all organizations
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountSitesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountSitesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountSitesResponse
     */
	public function getAccountSites(
        \OpenAPI\OpenAPI\Models\Operations\GetAccountSitesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAccountSitesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountSitesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/sites');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAccountSitesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountSitesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sites = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Site>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get all task details across all organizations (up to 1000)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountTasksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountTasksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountTasksResponse
     */
	public function getAccountTasks(
        \OpenAPI\OpenAPI\Models\Operations\GetAccountTasksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAccountTasksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountTasksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/tasks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAccountTasksRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountTasksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tasks = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Task>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get user details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountUserResponse
     */
	public function getAccountUser(
        \OpenAPI\OpenAPI\Models\Operations\GetAccountUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAccountUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/users/{user_id}', \OpenAPI\OpenAPI\Models\Operations\GetAccountUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get all users
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountUsersResponse
     */
	public function getAccountUsers(
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/users');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->users = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\User>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Remove this credential
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveAccountCredentialRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveAccountCredentialSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveAccountCredentialResponse
     */
	public function removeAccountCredential(
        \OpenAPI\OpenAPI\Models\Operations\RemoveAccountCredentialRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemoveAccountCredentialSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveAccountCredentialResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/credentials/{credential_id}', \OpenAPI\OpenAPI\Models\Operations\RemoveAccountCredentialRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveAccountCredentialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Remove this group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveAccountGroupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveAccountGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveAccountGroupResponse
     */
	public function removeAccountGroup(
        \OpenAPI\OpenAPI\Models\Operations\RemoveAccountGroupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemoveAccountGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveAccountGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/groups/{group_id}', \OpenAPI\OpenAPI\Models\Operations\RemoveAccountGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveAccountGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Remove this SSO group mapping
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveAccountGroupMappingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveAccountGroupMappingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveAccountGroupMappingResponse
     */
	public function removeAccountGroupMapping(
        \OpenAPI\OpenAPI\Models\Operations\RemoveAccountGroupMappingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemoveAccountGroupMappingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveAccountGroupMappingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/sso/groups/{group_mapping_id}', \OpenAPI\OpenAPI\Models\Operations\RemoveAccountGroupMappingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveAccountGroupMappingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Remove this key
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveAccountKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveAccountKeySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveAccountKeyResponse
     */
	public function removeAccountKey(
        \OpenAPI\OpenAPI\Models\Operations\RemoveAccountKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemoveAccountKeySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveAccountKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/keys/{key_id}', \OpenAPI\OpenAPI\Models\Operations\RemoveAccountKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveAccountKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Remove this organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveAccountOrganizationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveAccountOrganizationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveAccountOrganizationResponse
     */
	public function removeAccountOrganization(
        \OpenAPI\OpenAPI\Models\Operations\RemoveAccountOrganizationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemoveAccountOrganizationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveAccountOrganizationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/orgs/{org_id}', \OpenAPI\OpenAPI\Models\Operations\RemoveAccountOrganizationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveAccountOrganizationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Remove scan template
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveAccountScanTemplateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveAccountScanTemplateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveAccountScanTemplateResponse
     */
	public function removeAccountScanTemplate(
        \OpenAPI\OpenAPI\Models\Operations\RemoveAccountScanTemplateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemoveAccountScanTemplateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveAccountScanTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/tasks/templates/{scan_template_id}', \OpenAPI\OpenAPI\Models\Operations\RemoveAccountScanTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveAccountScanTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scanTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScanTemplate', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
        }

        return $response;
    }
	
    /**
     * Remove this user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveAccountUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveAccountUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveAccountUserResponse
     */
	public function removeAccountUser(
        \OpenAPI\OpenAPI\Models\Operations\RemoveAccountUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemoveAccountUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveAccountUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/users/{user_id}', \OpenAPI\OpenAPI\Models\Operations\RemoveAccountUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveAccountUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Resets the user's lockout status
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ResetAccountUserLockoutRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ResetAccountUserLockoutSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ResetAccountUserLockoutResponse
     */
	public function resetAccountUserLockout(
        \OpenAPI\OpenAPI\Models\Operations\ResetAccountUserLockoutRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ResetAccountUserLockoutSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ResetAccountUserLockoutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/users/{user_id}/resetLockout', \OpenAPI\OpenAPI\Models\Operations\ResetAccountUserLockoutRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResetAccountUserLockoutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Resets the user's MFA tokens
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ResetAccountUserMFARequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ResetAccountUserMFASecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ResetAccountUserMFAResponse
     */
	public function resetAccountUserMFA(
        \OpenAPI\OpenAPI\Models\Operations\ResetAccountUserMFARequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ResetAccountUserMFASecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ResetAccountUserMFAResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/users/{user_id}/resetMFA', \OpenAPI\OpenAPI\Models\Operations\ResetAccountUserMFARequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResetAccountUserMFAResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Sends the user a password reset email
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ResetAccountUserPasswordRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ResetAccountUserPasswordSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ResetAccountUserPasswordResponse
     */
	public function resetAccountUserPassword(
        \OpenAPI\OpenAPI\Models\Operations\ResetAccountUserPasswordRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ResetAccountUserPasswordSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ResetAccountUserPasswordResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/users/{user_id}/resetPassword', \OpenAPI\OpenAPI\Models\Operations\ResetAccountUserPasswordRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResetAccountUserPasswordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Rotates the key secret
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RotateAccountKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RotateAccountKeySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RotateAccountKeyResponse
     */
	public function rotateAccountKey(
        \OpenAPI\OpenAPI\Models\Operations\RotateAccountKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RotateAccountKeySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RotateAccountKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/keys/{key_id}/rotate', \OpenAPI\OpenAPI\Models\Operations\RotateAccountKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RotateAccountKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\APIKey', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Rotates the organization export token and returns the updated organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RotateAccountOrganizationExportTokenRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RotateAccountOrganizationExportTokenSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RotateAccountOrganizationExportTokenResponse
     */
	public function rotateAccountOrganizationExportToken(
        \OpenAPI\OpenAPI\Models\Operations\RotateAccountOrganizationExportTokenRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RotateAccountOrganizationExportTokenSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RotateAccountOrganizationExportTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/orgs/{org_id}/exportToken/rotate', \OpenAPI\OpenAPI\Models\Operations\RotateAccountOrganizationExportTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RotateAccountOrganizationExportTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organization = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Organization', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Update an existing group
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\GroupPut $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAccountGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateAccountGroupResponse
     */
	public function updateAccountGroup(
        \OpenAPI\OpenAPI\Models\Shared\GroupPut $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateAccountGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateAccountGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/groups');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateAccountGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Update an existing SSO group mapping
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\GroupMapping $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAccountGroupMappingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateAccountGroupMappingResponse
     */
	public function updateAccountGroupMapping(
        \OpenAPI\OpenAPI\Models\Shared\GroupMapping $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateAccountGroupMappingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateAccountGroupMappingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/sso/groups');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateAccountGroupMappingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Update organization details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAccountOrganizationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAccountOrganizationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateAccountOrganizationResponse
     */
	public function updateAccountOrganization(
        \OpenAPI\OpenAPI\Models\Operations\UpdateAccountOrganizationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateAccountOrganizationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateAccountOrganizationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/orgs/{org_id}', \OpenAPI\OpenAPI\Models\Operations\UpdateAccountOrganizationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "orgOptions", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateAccountOrganizationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organization = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Organization', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Update scan template
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ScanTemplate $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAccountScanTemplateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateAccountScanTemplateResponse
     */
	public function updateAccountScanTemplate(
        \OpenAPI\OpenAPI\Models\Shared\ScanTemplate $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateAccountScanTemplateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateAccountScanTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/tasks/templates');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateAccountScanTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scanTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScanTemplate', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
        }

        return $response;
    }
	
    /**
     * Update a user's details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAccountUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAccountUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateAccountUserResponse
     */
	public function updateAccountUser(
        \OpenAPI\OpenAPI\Models\Operations\UpdateAccountUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateAccountUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateAccountUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/users/{user_id}', \OpenAPI\OpenAPI\Models\Operations\UpdateAccountUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "userOptions", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateAccountUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
}