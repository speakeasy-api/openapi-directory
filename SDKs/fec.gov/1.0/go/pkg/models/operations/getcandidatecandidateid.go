// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetCandidateCandidateIDPathParams struct {
	// A unique identifier assigned to each candidate registered with the FEC.
	// If a person runs for several offices, that person will have separate candidate IDs for each office.
	//
	CandidateID string `pathParam:"style=simple,explode=false,name=candidate_id"`
}

type GetCandidateCandidateIDCandidateStatusEnum string

const (
	GetCandidateCandidateIDCandidateStatusEnumUnknown GetCandidateCandidateIDCandidateStatusEnum = ""
	GetCandidateCandidateIDCandidateStatusEnumC       GetCandidateCandidateIDCandidateStatusEnum = "C"
	GetCandidateCandidateIDCandidateStatusEnumF       GetCandidateCandidateIDCandidateStatusEnum = "F"
	GetCandidateCandidateIDCandidateStatusEnumN       GetCandidateCandidateIDCandidateStatusEnum = "N"
	GetCandidateCandidateIDCandidateStatusEnumP       GetCandidateCandidateIDCandidateStatusEnum = "P"
)

func (e *GetCandidateCandidateIDCandidateStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "C":
		fallthrough
	case "F":
		fallthrough
	case "N":
		fallthrough
	case "P":
		*e = GetCandidateCandidateIDCandidateStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCandidateCandidateIDCandidateStatusEnum: %s", s)
	}
}

type GetCandidateCandidateIDIncumbentChallengeEnum string

const (
	GetCandidateCandidateIDIncumbentChallengeEnumUnknown GetCandidateCandidateIDIncumbentChallengeEnum = ""
	GetCandidateCandidateIDIncumbentChallengeEnumI       GetCandidateCandidateIDIncumbentChallengeEnum = "I"
	GetCandidateCandidateIDIncumbentChallengeEnumC       GetCandidateCandidateIDIncumbentChallengeEnum = "C"
	GetCandidateCandidateIDIncumbentChallengeEnumO       GetCandidateCandidateIDIncumbentChallengeEnum = "O"
)

func (e *GetCandidateCandidateIDIncumbentChallengeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "I":
		fallthrough
	case "C":
		fallthrough
	case "O":
		*e = GetCandidateCandidateIDIncumbentChallengeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCandidateCandidateIDIncumbentChallengeEnum: %s", s)
	}
}

type GetCandidateCandidateIDOfficeEnum string

const (
	GetCandidateCandidateIDOfficeEnumUnknown GetCandidateCandidateIDOfficeEnum = ""
	GetCandidateCandidateIDOfficeEnumH       GetCandidateCandidateIDOfficeEnum = "H"
	GetCandidateCandidateIDOfficeEnumS       GetCandidateCandidateIDOfficeEnum = "S"
	GetCandidateCandidateIDOfficeEnumP       GetCandidateCandidateIDOfficeEnum = "P"
)

func (e *GetCandidateCandidateIDOfficeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "H":
		fallthrough
	case "S":
		fallthrough
	case "P":
		*e = GetCandidateCandidateIDOfficeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCandidateCandidateIDOfficeEnum: %s", s)
	}
}

type GetCandidateCandidateIDQueryParams struct {
	// API key for https://api.data.gov. Get one at https://api.data.gov/signup.
	//
	APIKey string `queryParam:"style=form,explode=true,name=api_key"`
	// One-letter code explaining if the candidate is:
	//         - C present candidate
	//         - F future candidate
	//         - N not yet a candidate
	//         - P prior candidate
	//
	CandidateStatus []GetCandidateCandidateIDCandidateStatusEnum `queryParam:"style=form,explode=true,name=candidate_status"`
	// Two-year election cycle in which a candidate runs for office.
	// Calculated from Form 2. The cycle begins with
	// an odd year and is named for its ending, even year. This cycle follows
	// the traditional house election cycle and subdivides the presidential
	// and Senate elections into comparable two-year blocks. To retrieve data for
	// the entire four years of a presidential term or six years of a senatorial term,
	// you will need the `election_full` flag.
	//
	Cycle []int `queryParam:"style=form,explode=true,name=cycle"`
	// Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
	District []string `queryParam:"style=form,explode=true,name=district"`
	// Year of election
	ElectionYear []int `queryParam:"style=form,explode=true,name=election_year"`
	// A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
	FederalFundsFlag *bool `queryParam:"style=form,explode=true,name=federal_funds_flag"`
	// A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
	HasRaisedFunds *bool `queryParam:"style=form,explode=true,name=has_raised_funds"`
	// One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
	IncumbentChallenge []GetCandidateCandidateIDIncumbentChallengeEnum `queryParam:"style=form,explode=true,name=incumbent_challenge"`
	// Name (candidate or committee) to search for. Alias for 'q'.
	Name []string `queryParam:"style=form,explode=true,name=name"`
	// Federal office candidate runs for: H, S or P
	Office []GetCandidateCandidateIDOfficeEnum `queryParam:"style=form,explode=true,name=office"`
	// For paginating through results, starting at page 1
	Page *int `queryParam:"style=form,explode=true,name=page"`
	// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
	Party []string `queryParam:"style=form,explode=true,name=party"`
	// The number of results returned per page. Defaults to 20.
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// Provide a field to sort by. Use `-` for descending order.
	//
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Hide null values on sorted column(s).
	SortHideNull *bool `queryParam:"style=form,explode=true,name=sort_hide_null"`
	// Toggle that filters out all rows having sort column that is non-null
	SortNullOnly *bool `queryParam:"style=form,explode=true,name=sort_null_only"`
	// Toggle that sorts null values last
	SortNullsLast *bool `queryParam:"style=form,explode=true,name=sort_nulls_last"`
	// US state or territory where a candidate runs for office
	State []string `queryParam:"style=form,explode=true,name=state"`
	// Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
	Year *string `queryParam:"style=form,explode=true,name=year"`
}

type GetCandidateCandidateIDRequest struct {
	PathParams  GetCandidateCandidateIDPathParams
	QueryParams GetCandidateCandidateIDQueryParams
}

type GetCandidateCandidateIDResponse struct {
	CandidateDetailPage *shared.CandidateDetailPage
	ContentType         string
	StatusCode          int
	RawResponse         *http.Response
}
