"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import apierror as shared_apierror
from ..shared import geocodeaddressresponse as shared_geocodeaddressresponse
from typing import Optional


@dataclasses.dataclass
class GeocodeAddressRequest:
    
    address: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'address', 'style': 'form', 'explode': True }})
    r"""The full address, partial address or name of a place to try and locate. Comma separated address components are preferred."""  
    city: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'city', 'style': 'form', 'explode': True }})
    r"""The city/town name to locate"""  
    country_code: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'country-code', 'style': 'form', 'explode': True }})
    r"""Limit result to this country (the default is no country bias)"""  
    county: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'county', 'style': 'form', 'explode': True }})
    r"""The county/region name to locate"""  
    fuzzy_search: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fuzzy-search', 'style': 'form', 'explode': True }})
    r"""If no matches are found for the given address, start performing a recursive fuzzy search until a geolocation is found. This option is recommended for processing user input or implementing auto-complete. We use a combination of approximate string matching and data cleansing to find possible location matches"""  
    house_number: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'house-number', 'style': 'form', 'explode': True }})
    r"""The house/building number to locate"""  
    language_code: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'language-code', 'style': 'form', 'explode': True }})
    r"""The language to display results in, available languages are: <ul> <li>de, en, es, fr, it, pt, ru, zh</li> </ul>"""  
    postal_code: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'postal-code', 'style': 'form', 'explode': True }})
    r"""The postal code to locate"""  
    state: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'state', 'style': 'form', 'explode': True }})
    r"""The state name to locate"""  
    street: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'street', 'style': 'form', 'explode': True }})
    r"""The street/road name to locate"""  
    

@dataclasses.dataclass
class GeocodeAddressResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    api_error: Optional[shared_apierror.APIError] = dataclasses.field(default=None)
    r"""Your API request has been rejected. Check error code for details"""  
    geocode_address_response: Optional[shared_geocodeaddressresponse.GeocodeAddressResponse] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    