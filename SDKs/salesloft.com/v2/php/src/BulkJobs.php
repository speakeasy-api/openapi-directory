<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class BulkJobs 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * List bulk jobs
     * 
     * Fetches multiple bulk job records. The records can be filtered, paged, and sorted according to the respective parameters.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV2BulkJobsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV2BulkJobsResponse
     */
	public function getV2BulkJobs(
        \OpenAPI\OpenAPI\Models\Operations\GetV2BulkJobsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV2BulkJobsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bulk_jobs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetV2BulkJobsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV2BulkJobsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Fetch a bulk job
     * 
     * Fetches a bulk job, by ID only.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV2BulkJobsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV2BulkJobsIdResponse
     */
	public function getV2BulkJobsId(
        \OpenAPI\OpenAPI\Models\Operations\GetV2BulkJobsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV2BulkJobsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bulk_jobs/{id}', \OpenAPI\OpenAPI\Models\Operations\GetV2BulkJobsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV2BulkJobsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Create a bulk job
     * 
     * Creates a bulk job. The type of the bulk job must be included when created.
     * 
     * For additional information on creating bulk jobs, the types of supported bulk jobs, and examples of the bulk job flow, visit the <a href="/bulk.html" target="_blank" rel="noopener noreferrer">bulk job details page</a>.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV2BulkJobsRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV2BulkJobsResponse
     */
	public function postV2BulkJobs(
        \OpenAPI\OpenAPI\Models\Operations\PostV2BulkJobsRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV2BulkJobsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bulk_jobs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV2BulkJobsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update a bulk job
     * 
     * Updates a bulk job's name and / or marks a bulk job as 'ready_to_execute'.  May only be updated if the bulk job is still in an "open" state.
     * 
     * For additional information on creating bulk jobs, the types of supported bulk jobs, and examples of the bulk job flow, visit the <a href="/bulk.html" target="_blank" rel="noopener noreferrer">bulk job details page</a>.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutV2BulkJobsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutV2BulkJobsIdResponse
     */
	public function putV2BulkJobsId(
        \OpenAPI\OpenAPI\Models\Operations\PutV2BulkJobsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutV2BulkJobsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bulk_jobs/{id}', \OpenAPI\OpenAPI\Models\Operations\PutV2BulkJobsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutV2BulkJobsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}