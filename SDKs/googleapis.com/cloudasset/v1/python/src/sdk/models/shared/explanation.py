"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import permissions as shared_permissions
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Explanation:
    r"""Explanation about the IAM policy search result."""
    
    matched_permissions: Optional[dict[str, shared_permissions.Permissions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matchedPermissions'), 'exclude': lambda f: f is None }})
    r"""The map from roles to their included permissions that match the permission query (i.e., a query containing `policy.role.permissions:`). Example: if query `policy.role.permissions:compute.disk.get` matches a policy binding that contains owner role, the matched_permissions will be `{\\"roles/owner\\": [\\"compute.disk.get\\"]}`. The roles can also be found in the returned `policy` bindings. Note that the map is populated only for requests with permission queries."""  
    