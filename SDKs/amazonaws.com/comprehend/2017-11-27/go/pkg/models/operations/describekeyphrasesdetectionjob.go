// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeKeyPhrasesDetectionJobXAmzTargetEnum
type DescribeKeyPhrasesDetectionJobXAmzTargetEnum string

const (
	DescribeKeyPhrasesDetectionJobXAmzTargetEnumComprehend20171127DescribeKeyPhrasesDetectionJob DescribeKeyPhrasesDetectionJobXAmzTargetEnum = "Comprehend_20171127.DescribeKeyPhrasesDetectionJob"
)

func (e *DescribeKeyPhrasesDetectionJobXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Comprehend_20171127.DescribeKeyPhrasesDetectionJob":
		*e = DescribeKeyPhrasesDetectionJobXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeKeyPhrasesDetectionJobXAmzTargetEnum: %s", s)
	}
}

type DescribeKeyPhrasesDetectionJobHeaders struct {
	XAmzAlgorithm     *string                                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DescribeKeyPhrasesDetectionJobXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeKeyPhrasesDetectionJobRequest struct {
	Headers DescribeKeyPhrasesDetectionJobHeaders
	Request shared.DescribeKeyPhrasesDetectionJobRequest `request:"mediaType=application/json"`
}

type DescribeKeyPhrasesDetectionJobResponse struct {
	ContentType string
	// Success
	DescribeKeyPhrasesDetectionJobResponse *shared.DescribeKeyPhrasesDetectionJobResponse
	// InternalServerException
	InternalServerException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// JobNotFoundException
	JobNotFoundException interface{}
	StatusCode           int
	RawResponse          *http.Response
	// TooManyRequestsException
	TooManyRequestsException interface{}
}
