// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TransactionTypeEnum - The type for this transaction
type TransactionTypeEnum string

const (
	TransactionTypeEnumPayment TransactionTypeEnum = "payment"
	TransactionTypeEnumRefund  TransactionTypeEnum = "refund"
)

func (e TransactionTypeEnum) ToPointer() *TransactionTypeEnum {
	return &e
}

func (e *TransactionTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "refund":
		*e = TransactionTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionTypeEnum: %v", v)
	}
}

// Transaction - A transaction for an app initiated by a user
type Transaction struct {
	// The total amount paid in cents
	Amount int64
	// The id of the app involved with this transaction
	AppID string
	// A custom JSON object that you can create and attach to this record
	CustomData map[string]interface{}
	// The date (in millis) of when this transaction occurred
	Date int64
	// The total amount paid to the developer in cents
	DeveloperAmount *int64
	// The id of the developer involved with this transaction
	DeveloperID string
	// The total amount paid to payment processing fees in cents
	FeeAmount *int64
	// The total amount paid to the marketplace owner in cents
	MarketplaceAmount *int64
	// The id for the ownership associated with this transaction
	OwnershipID string
	// The id for this transaction
	TransactionID string
	// The type for this transaction
	Type TransactionTypeEnum
	// The id of the user making the transaction
	UserID string
}
