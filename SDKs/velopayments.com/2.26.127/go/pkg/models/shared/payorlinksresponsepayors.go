// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PayorLinksResponsePayorsKycStateEnum string

const (
	PayorLinksResponsePayorsKycStateEnumFailedKyc   PayorLinksResponsePayorsKycStateEnum = "FAILED_KYC"
	PayorLinksResponsePayorsKycStateEnumPassedKyc   PayorLinksResponsePayorsKycStateEnum = "PASSED_KYC"
	PayorLinksResponsePayorsKycStateEnumRequiresKyc PayorLinksResponsePayorsKycStateEnum = "REQUIRES_KYC"
)

func (e *PayorLinksResponsePayorsKycStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FAILED_KYC":
		fallthrough
	case "PASSED_KYC":
		fallthrough
	case "REQUIRES_KYC":
		*e = PayorLinksResponsePayorsKycStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PayorLinksResponsePayorsKycStateEnum: %s", s)
	}
}

type PayorLinksResponsePayors struct {
	KycState            *PayorLinksResponsePayorsKycStateEnum `json:"kycState,omitempty"`
	PayorID             string                                `json:"payorId"`
	PayorName           string                                `json:"payorName"`
	PrimaryContactEmail *string                               `json:"primaryContactEmail,omitempty"`
}
