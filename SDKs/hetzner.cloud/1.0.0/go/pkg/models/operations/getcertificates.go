// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetCertificatesSortEnum - Can be used multiple times.
type GetCertificatesSortEnum string

const (
	GetCertificatesSortEnumID          GetCertificatesSortEnum = "id"
	GetCertificatesSortEnumIDAsc       GetCertificatesSortEnum = "id:asc"
	GetCertificatesSortEnumIDDesc      GetCertificatesSortEnum = "id:desc"
	GetCertificatesSortEnumName        GetCertificatesSortEnum = "name"
	GetCertificatesSortEnumNameAsc     GetCertificatesSortEnum = "name:asc"
	GetCertificatesSortEnumNameDesc    GetCertificatesSortEnum = "name:desc"
	GetCertificatesSortEnumCreated     GetCertificatesSortEnum = "created"
	GetCertificatesSortEnumCreatedAsc  GetCertificatesSortEnum = "created:asc"
	GetCertificatesSortEnumCreatedDesc GetCertificatesSortEnum = "created:desc"
)

func (e *GetCertificatesSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "id":
		fallthrough
	case "id:asc":
		fallthrough
	case "id:desc":
		fallthrough
	case "name":
		fallthrough
	case "name:asc":
		fallthrough
	case "name:desc":
		fallthrough
	case "created":
		fallthrough
	case "created:asc":
		fallthrough
	case "created:desc":
		*e = GetCertificatesSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCertificatesSortEnum: %s", s)
	}
}

// GetCertificatesTypeParameterTypeEnum - Can be used multiple times. The response will only contain Certificates matching the type.
type GetCertificatesTypeParameterTypeEnum string

const (
	GetCertificatesTypeParameterTypeEnumUploaded GetCertificatesTypeParameterTypeEnum = "uploaded"
	GetCertificatesTypeParameterTypeEnumManaged  GetCertificatesTypeParameterTypeEnum = "managed"
)

func (e *GetCertificatesTypeParameterTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "uploaded":
		fallthrough
	case "managed":
		*e = GetCertificatesTypeParameterTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCertificatesTypeParameterTypeEnum: %s", s)
	}
}

type GetCertificatesQueryParams struct {
	// Can be used to filter resources by labels. The response will only contain resources matching the label selector.
	LabelSelector *string `queryParam:"style=form,explode=true,name=label_selector"`
	// Can be used to filter resources by their name. The response will only contain the resources matching the specified name
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// Can be used multiple times.
	Sort *GetCertificatesSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// Can be used multiple times. The response will only contain Certificates matching the type.
	Type *GetCertificatesTypeParameterTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type GetCertificatesRequest struct {
	QueryParams GetCertificatesQueryParams
}

// GetCertificatesCertificatesResponseCertificateStatusError - If issuance or renewal reports `failed`, this property contains information about what happened
type GetCertificatesCertificatesResponseCertificateStatusError struct {
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// GetCertificatesCertificatesResponseCertificateStatusIssuanceEnum - Status of the issuance process of the Certificate
type GetCertificatesCertificatesResponseCertificateStatusIssuanceEnum string

const (
	GetCertificatesCertificatesResponseCertificateStatusIssuanceEnumPending   GetCertificatesCertificatesResponseCertificateStatusIssuanceEnum = "pending"
	GetCertificatesCertificatesResponseCertificateStatusIssuanceEnumCompleted GetCertificatesCertificatesResponseCertificateStatusIssuanceEnum = "completed"
	GetCertificatesCertificatesResponseCertificateStatusIssuanceEnumFailed    GetCertificatesCertificatesResponseCertificateStatusIssuanceEnum = "failed"
)

func (e *GetCertificatesCertificatesResponseCertificateStatusIssuanceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending":
		fallthrough
	case "completed":
		fallthrough
	case "failed":
		*e = GetCertificatesCertificatesResponseCertificateStatusIssuanceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCertificatesCertificatesResponseCertificateStatusIssuanceEnum: %s", s)
	}
}

// GetCertificatesCertificatesResponseCertificateStatusRenewalEnum - Status of the renewal process of the Certificate.
type GetCertificatesCertificatesResponseCertificateStatusRenewalEnum string

const (
	GetCertificatesCertificatesResponseCertificateStatusRenewalEnumScheduled   GetCertificatesCertificatesResponseCertificateStatusRenewalEnum = "scheduled"
	GetCertificatesCertificatesResponseCertificateStatusRenewalEnumPending     GetCertificatesCertificatesResponseCertificateStatusRenewalEnum = "pending"
	GetCertificatesCertificatesResponseCertificateStatusRenewalEnumFailed      GetCertificatesCertificatesResponseCertificateStatusRenewalEnum = "failed"
	GetCertificatesCertificatesResponseCertificateStatusRenewalEnumUnavailable GetCertificatesCertificatesResponseCertificateStatusRenewalEnum = "unavailable"
)

func (e *GetCertificatesCertificatesResponseCertificateStatusRenewalEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "scheduled":
		fallthrough
	case "pending":
		fallthrough
	case "failed":
		fallthrough
	case "unavailable":
		*e = GetCertificatesCertificatesResponseCertificateStatusRenewalEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCertificatesCertificatesResponseCertificateStatusRenewalEnum: %s", s)
	}
}

// GetCertificatesCertificatesResponseCertificateStatus - Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates
type GetCertificatesCertificatesResponseCertificateStatus struct {
	// If issuance or renewal reports `failed`, this property contains information about what happened
	Error *GetCertificatesCertificatesResponseCertificateStatusError `json:"error,omitempty"`
	// Status of the issuance process of the Certificate
	Issuance *GetCertificatesCertificatesResponseCertificateStatusIssuanceEnum `json:"issuance,omitempty"`
	// Status of the renewal process of the Certificate.
	Renewal *GetCertificatesCertificatesResponseCertificateStatusRenewalEnum `json:"renewal,omitempty"`
}

// GetCertificatesCertificatesResponseCertificateTypeEnum - Type of the Certificate
type GetCertificatesCertificatesResponseCertificateTypeEnum string

const (
	GetCertificatesCertificatesResponseCertificateTypeEnumUploaded GetCertificatesCertificatesResponseCertificateTypeEnum = "uploaded"
	GetCertificatesCertificatesResponseCertificateTypeEnumManaged  GetCertificatesCertificatesResponseCertificateTypeEnum = "managed"
)

func (e *GetCertificatesCertificatesResponseCertificateTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "uploaded":
		fallthrough
	case "managed":
		*e = GetCertificatesCertificatesResponseCertificateTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCertificatesCertificatesResponseCertificateTypeEnum: %s", s)
	}
}

type GetCertificatesCertificatesResponseCertificateUsedBy struct {
	// ID of resource referenced
	ID int64 `json:"id"`
	// Type of resource referenced
	Type string `json:"type"`
}

type GetCertificatesCertificatesResponseCertificate struct {
	// Certificate and chain in PEM format, in order so that each record directly certifies the one preceding
	Certificate string `json:"certificate"`
	// Point in time when the Resource was created (in ISO-8601 format)
	Created string `json:"created"`
	// Domains and subdomains covered by the Certificate
	DomainNames []string `json:"domain_names"`
	// SHA256 fingerprint of the Certificate
	Fingerprint string `json:"fingerprint"`
	// ID of the Resource
	ID int64 `json:"id"`
	// User-defined labels (key-value pairs)
	Labels map[string]string `json:"labels"`
	// Name of the Resource. Must be unique per Project.
	Name string `json:"name"`
	// Point in time when the Certificate stops being valid (in ISO-8601 format)
	NotValidAfter string `json:"not_valid_after"`
	// Point in time when the Certificate becomes valid (in ISO-8601 format)
	NotValidBefore string `json:"not_valid_before"`
	// Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates
	Status *GetCertificatesCertificatesResponseCertificateStatus `json:"status,omitempty"`
	// Type of the Certificate
	Type *GetCertificatesCertificatesResponseCertificateTypeEnum `json:"type,omitempty"`
	// Resources currently using the Certificate
	UsedBy []GetCertificatesCertificatesResponseCertificateUsedBy `json:"used_by"`
}

type GetCertificatesCertificatesResponseMetaPagination struct {
	// ID of the last page available. Can be null if the current page is the last one.
	LastPage float64 `json:"last_page"`
	// ID of the next page. Can be null if the current page is the last one.
	NextPage float64 `json:"next_page"`
	// Current page number
	Page float64 `json:"page"`
	// Maximum number of items shown per page in the response
	PerPage float64 `json:"per_page"`
	// ID of the previous page. Can be null if the current page is the first one.
	PreviousPage float64 `json:"previous_page"`
	// The total number of entries that exist in the database for this query. Nullable if unknown.
	TotalEntries float64 `json:"total_entries"`
}

type GetCertificatesCertificatesResponseMeta struct {
	Pagination GetCertificatesCertificatesResponseMetaPagination `json:"pagination"`
}

// GetCertificatesCertificatesResponse - The `certificates` key contains an array of Certificate objects
type GetCertificatesCertificatesResponse struct {
	Certificates []GetCertificatesCertificatesResponseCertificate `json:"certificates"`
	Meta         *GetCertificatesCertificatesResponseMeta         `json:"meta,omitempty"`
}

type GetCertificatesResponse struct {
	// The `certificates` key contains an array of Certificate objects
	CertificatesResponse *GetCertificatesCertificatesResponse
	ContentType          string
	StatusCode           int
	RawResponse          *http.Response
}
