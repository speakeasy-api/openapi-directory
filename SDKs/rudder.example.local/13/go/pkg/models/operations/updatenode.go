// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdateNodePathParams struct {
	// Id of the target node
	NodeID string `pathParam:"style=simple,explode=false,name=nodeId"`
}

type UpdateNodeRequest struct {
	PathParams UpdateNodePathParams
	Request    *shared.NodeSettings `request:"mediaType=application/json"`
}

// UpdateNode200ApplicationJSONActionEnum - The id of the action
type UpdateNode200ApplicationJSONActionEnum string

const (
	UpdateNode200ApplicationJSONActionEnumUpdateNode UpdateNode200ApplicationJSONActionEnum = "updateNode"
)

func (e *UpdateNode200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "updateNode":
		*e = UpdateNode200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNode200ApplicationJSONActionEnum: %s", s)
	}
}

// UpdateNode200ApplicationJSONData - Information about the node
type UpdateNode200ApplicationJSONData struct {
	Nodes []shared.NodeFull `json:"nodes"`
}

// UpdateNode200ApplicationJSONResultEnum - Result of the request
type UpdateNode200ApplicationJSONResultEnum string

const (
	UpdateNode200ApplicationJSONResultEnumSuccess UpdateNode200ApplicationJSONResultEnum = "success"
	UpdateNode200ApplicationJSONResultEnumError   UpdateNode200ApplicationJSONResultEnum = "error"
)

func (e *UpdateNode200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = UpdateNode200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNode200ApplicationJSONResultEnum: %s", s)
	}
}

// UpdateNode200ApplicationJSON - Nodes
type UpdateNode200ApplicationJSON struct {
	// The id of the action
	Action UpdateNode200ApplicationJSONActionEnum `json:"action"`
	// Information about the node
	Data UpdateNode200ApplicationJSONData `json:"data"`
	// Result of the request
	Result UpdateNode200ApplicationJSONResultEnum `json:"result"`
}

type UpdateNodeResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Nodes
	UpdateNode200ApplicationJSONObject *UpdateNode200ApplicationJSON
}
