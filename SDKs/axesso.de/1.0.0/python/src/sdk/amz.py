"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Amz:
    r"""APIs for request on Amazon
    http://api.axesso.de/ - Find out more
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def keyword_search(self, request: operations.KeywordSearchRequest) -> operations.KeywordSearchResponse:
        r"""fetch results auf a keyword search on Amazon"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/amz/amazon-search-by-keyword'
        
        query_params = utils.get_query_params(operations.KeywordSearchRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KeywordSearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.KeywordSearchResponse])
                res.keyword_search_response = out
        elif http_res.status_code in [400, 404]:
            pass

        return res

    def request_buy_recommendation(self, request: operations.RequestBuyRecommendationRequest) -> operations.RequestBuyRecommendationResponse:
        r"""request buy recommendations to a given product"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/amz/amazon-lookup-buy-recommendations'
        
        query_params = utils.get_query_params(operations.RequestBuyRecommendationRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RequestBuyRecommendationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BuyRecommendationResponse])
                res.buy_recommendation_response = out
        elif http_res.status_code in [400, 404, 406]:
            pass

        return res

    def request_product(self, request: operations.RequestProductRequest) -> operations.RequestProductResponse:
        r"""lookup product information"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/amz/amazon-lookup-product'
        
        query_params = utils.get_query_params(operations.RequestProductRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RequestProductResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProductDetailsResponse])
                res.product_details_response = out
        elif http_res.status_code in [400, 404, 406]:
            pass

        return res

    def sort_options(self) -> operations.SortOptionsResponse:
        r"""request available sort options to use in keyword search"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/amz/sort-options'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SortOptionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SortOptionResponse])
                res.sort_option_response = out

        return res

    