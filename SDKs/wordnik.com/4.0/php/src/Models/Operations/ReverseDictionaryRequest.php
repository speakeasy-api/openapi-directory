<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class ReverseDictionaryRequest
{
    /**
     * Exclude these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)
     * 
     * @var ?string $excludePartOfSpeech
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=excludePartOfSpeech')]
    public ?string $excludePartOfSpeech = null;
    
    /**
     * Exclude these comma-delimited source dictionaries
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\ReverseDictionaryExcludeSourceDictionariesEnum $excludeSourceDictionaries
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=excludeSourceDictionaries')]
    public ?ReverseDictionaryExcludeSourceDictionariesEnum $excludeSourceDictionaries = null;
    
    /**
     * Expand terms
     * 
     * @var ?string $expandTerms
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=expandTerms')]
    public ?string $expandTerms = null;
    
    /**
     * Restricts words and finds closest sense
     * 
     * @var ?string $findSenseForWord
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=findSenseForWord')]
    public ?string $findSenseForWord = null;
    
    /**
     * Only include these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)
     * 
     * @var ?string $includePartOfSpeech
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=includePartOfSpeech')]
    public ?string $includePartOfSpeech = null;
    
    /**
     * Only include these comma-delimited source dictionaries
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\ReverseDictionaryIncludeSourceDictionariesEnum $includeSourceDictionaries
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=includeSourceDictionaries')]
    public ?ReverseDictionaryIncludeSourceDictionariesEnum $includeSourceDictionaries = null;
    
    /**
     * Return a closed set of XML tags in response
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\ReverseDictionaryIncludeTagsEnum $includeTags
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=includeTags')]
    public ?ReverseDictionaryIncludeTagsEnum $includeTags = null;
    
    /**
     * Maximum number of results to return
     * 
     * @var ?int $limit
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=limit')]
    public ?int $limit = null;
    
    /**
     * Maximum corpus frequency for terms
     * 
     * @var ?int $maxCorpusCount
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=maxCorpusCount')]
    public ?int $maxCorpusCount = null;
    
    /**
     * Maximum word length
     * 
     * @var ?int $maxLength
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=maxLength')]
    public ?int $maxLength = null;
    
    /**
     * Minimum corpus frequency for terms
     * 
     * @var ?int $minCorpusCount
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=minCorpusCount')]
    public ?int $minCorpusCount = null;
    
    /**
     * Minimum word length
     * 
     * @var ?int $minLength
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=minLength')]
    public ?int $minLength = null;
    
    /**
     * Search term
     * 
     * @var string $query
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=query')]
    public string $query;
    
    /**
     * Results to skip
     * 
     * @var ?string $skip
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=skip')]
    public ?string $skip = null;
    
    /**
     * Attribute to sort by
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\ReverseDictionarySortByEnum $sortBy
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sortBy')]
    public ?ReverseDictionarySortByEnum $sortBy = null;
    
    /**
     * Sort direction
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\ReverseDictionarySortOrderEnum $sortOrder
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sortOrder')]
    public ?ReverseDictionarySortOrderEnum $sortOrder = null;
    
	public function __construct()
	{
		$this->excludePartOfSpeech = null;
		$this->excludeSourceDictionaries = null;
		$this->expandTerms = null;
		$this->findSenseForWord = null;
		$this->includePartOfSpeech = null;
		$this->includeSourceDictionaries = null;
		$this->includeTags = null;
		$this->limit = null;
		$this->maxCorpusCount = null;
		$this->maxLength = null;
		$this->minCorpusCount = null;
		$this->minLength = null;
		$this->query = "";
		$this->skip = null;
		$this->sortBy = null;
		$this->sortOrder = null;
	}
}
