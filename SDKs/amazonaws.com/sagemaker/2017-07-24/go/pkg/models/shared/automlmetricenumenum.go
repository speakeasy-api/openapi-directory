// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AutoMLMetricEnumEnum string

const (
	AutoMLMetricEnumEnumAccuracy         AutoMLMetricEnumEnum = "Accuracy"
	AutoMLMetricEnumEnumMse              AutoMLMetricEnumEnum = "MSE"
	AutoMLMetricEnumEnumF1               AutoMLMetricEnumEnum = "F1"
	AutoMLMetricEnumEnumF1macro          AutoMLMetricEnumEnum = "F1macro"
	AutoMLMetricEnumEnumAuc              AutoMLMetricEnumEnum = "AUC"
	AutoMLMetricEnumEnumRmse             AutoMLMetricEnumEnum = "RMSE"
	AutoMLMetricEnumEnumMae              AutoMLMetricEnumEnum = "MAE"
	AutoMLMetricEnumEnumR2               AutoMLMetricEnumEnum = "R2"
	AutoMLMetricEnumEnumBalancedAccuracy AutoMLMetricEnumEnum = "BalancedAccuracy"
	AutoMLMetricEnumEnumPrecision        AutoMLMetricEnumEnum = "Precision"
	AutoMLMetricEnumEnumPrecisionMacro   AutoMLMetricEnumEnum = "PrecisionMacro"
	AutoMLMetricEnumEnumRecall           AutoMLMetricEnumEnum = "Recall"
	AutoMLMetricEnumEnumRecallMacro      AutoMLMetricEnumEnum = "RecallMacro"
)

func (e AutoMLMetricEnumEnum) ToPointer() *AutoMLMetricEnumEnum {
	return &e
}

func (e *AutoMLMetricEnumEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Accuracy":
		fallthrough
	case "MSE":
		fallthrough
	case "F1":
		fallthrough
	case "F1macro":
		fallthrough
	case "AUC":
		fallthrough
	case "RMSE":
		fallthrough
	case "MAE":
		fallthrough
	case "R2":
		fallthrough
	case "BalancedAccuracy":
		fallthrough
	case "Precision":
		fallthrough
	case "PrecisionMacro":
		fallthrough
	case "Recall":
		fallthrough
	case "RecallMacro":
		*e = AutoMLMetricEnumEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AutoMLMetricEnumEnum: %v", v)
	}
}
