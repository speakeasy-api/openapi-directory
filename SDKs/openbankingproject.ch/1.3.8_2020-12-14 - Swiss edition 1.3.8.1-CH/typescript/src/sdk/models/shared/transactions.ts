/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { AccountReference16CH } from "./accountreference16ch";
import { AdditionalInformationStructured } from "./additionalinformationstructured";
import { Amount } from "./amount";
import { Balance } from "./balance";
import { EntryDetailsElement } from "./entrydetailselement";
import { HrefType } from "./hreftype";
import { PurposeCodeEnum } from "./purposecodeenum";
import { RemittanceInformationStructured } from "./remittanceinformationstructured";
import { ReportExchangeRate } from "./reportexchangerate";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Transaction details.
 */
export class Transactions extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: HrefType })
  @Expose({ name: "_links" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, HrefType> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], HrefType);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  links?: Record<string, HrefType>;

  /**
   * Might be used by the ASPSP to transport additional transaction related information to the PSU
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "additionalInformation" })
  additionalInformation?: string;

  /**
   * Is used if and only if the bookingStatus entry equals "information".
   *
   * @remarks
   * Every active standing order related to the dedicated payment account result into one entry.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "additionalInformationStructured" })
  @Type(() => AdditionalInformationStructured)
  additionalInformationStructured?: AdditionalInformationStructured;

  /**
   * A single balance element.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "balanceAfterTransaction" })
  @Type(() => Balance)
  balanceAfterTransaction?: Balance;

  /**
   * Bank transaction code as used by the ASPSP and using the sub elements of this structured code defined by ISO 20022.
   *
   * @remarks
   *
   * This code type is concatenating the three ISO20022 Codes
   *   * Domain Code,
   *   * Family Code, and
   *   * SubFamiliy Code
   * by hyphens, resulting in 'DomainCode'-'FamilyCode'-'SubFamilyCode'.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bankTransactionCode" })
  bankTransactionCode?: string;

  /**
   * If this indicator equals true, then the related entry is a batch entry.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "batchIndicator" })
  batchIndicator?: boolean;

  /**
   * Shall be used if and only if the batchIndicator is contained and equals true.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "batchNumberOfTransactions" })
  batchNumberOfTransactions?: number;

  /**
   * The date when an entry is posted to an account on the ASPSPs books.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bookingDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  bookingDate?: Date;

  /**
   * Identification of a Cheque.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "checkId" })
  checkId?: string;

  /**
   * Reference to an account by either
   *
   * @remarks
   *   * IBAN, of a payment accounts, or
   *   * otherAccountIdentification, for payment accounts if there is no IBAN
   * adapted from ISO pain.001.001.03.ch.02 CashAccount16-CH_IdTpCcy
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creditorAccount" })
  @Type(() => AccountReference16CH)
  creditorAccount?: AccountReference16CH;

  /**
   * BICFI
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creditorAgent" })
  creditorAgent?: string;

  /**
   * Identification of Creditors, e.g. a SEPA Creditor ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creditorId" })
  creditorId?: string;

  /**
   * Creditor name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creditorName" })
  creditorName?: string;

  /**
   * Array of exchange rates.
   */
  @SpeakeasyMetadata({ elemType: ReportExchangeRate })
  @Expose({ name: "currencyExchange" })
  @Type(() => ReportExchangeRate)
  currencyExchange?: ReportExchangeRate[];

  /**
   * Reference to an account by either
   *
   * @remarks
   *   * IBAN, of a payment accounts, or
   *   * otherAccountIdentification, for payment accounts if there is no IBAN
   * adapted from ISO pain.001.001.03.ch.02 CashAccount16-CH_IdTpCcy
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "debtorAccount" })
  @Type(() => AccountReference16CH)
  debtorAccount?: AccountReference16CH;

  /**
   * BICFI
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "debtorAgent" })
  debtorAgent?: string;

  /**
   * Debtor name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "debtorName" })
  debtorName?: string;

  /**
   * Unique end to end identity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "endToEndId" })
  endToEndId?: string;

  /**
   * Might be used by the ASPSP to transport details about transactions within a batch.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({ elemType: EntryDetailsElement })
  @Expose({ name: "entryDetails" })
  @Type(() => EntryDetailsElement)
  entryDetails?: EntryDetailsElement[];

  /**
   * Is the identification of the transaction as used e.g. for reference for deltafunction on application level.
   *
   * @remarks
   * The same identification as for example used within camt.05x messages.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "entryReference" })
  entryReference?: string;

  /**
   * Identification of Mandates, e.g. a SEPA Mandate ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mandateId" })
  mandateId?: string;

  /**
   * Proprietary bank transaction code as used within a community or within an ASPSP e.g.
   *
   * @remarks
   * for MT94x based transaction reports.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "proprietaryBankTransactionCode" })
  proprietaryBankTransactionCode?: string;

  /**
   * ExternalPurpose1Code from ISO 20022.
   *
   * @remarks
   *
   * Values from ISO 20022 External Code List ExternalCodeSets_1Q2018 June 2018.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "purposeCode" })
  purposeCode?: PurposeCodeEnum;

  /**
   * Structured remittance information Max
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "remittanceInformationStructured" })
  remittanceInformationStructured?: string;

  /**
   * Array of structured remittance information.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({ elemType: RemittanceInformationStructured })
  @Expose({ name: "remittanceInformationStructuredArray" })
  @Type(() => RemittanceInformationStructured)
  remittanceInformationStructuredArray?: RemittanceInformationStructured[];

  /**
   * Unstructured remittance information.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "remittanceInformationUnstructured" })
  remittanceInformationUnstructured?: string;

  /**
   * Array of unstructured remittance information.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "remittanceInformationUnstructuredArray" })
  remittanceInformationUnstructuredArray?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "transactionAmount" })
  @Type(() => Amount)
  transactionAmount: Amount;

  /**
   * This identification is given by the attribute transactionId of the corresponding entry of a transaction list.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transactionId" })
  transactionId?: string;

  /**
   * Ultimate creditor.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ultimateCreditor" })
  ultimateCreditor?: string;

  /**
   * Ultimate debtor.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ultimateDebtor" })
  ultimateDebtor?: string;

  /**
   * The Date at which assets become available to the account owner in case of a credit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "valueDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  valueDate?: Date;
}
