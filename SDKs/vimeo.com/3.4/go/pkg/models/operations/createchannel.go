// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateChannelSecurity struct {
	Oauth2 shared.SchemeOauth2 `security:"scheme,type=oauth2"`
}

// CreateChannelRequestBodyPrivacyEnum - The privacy level of the channel.
type CreateChannelRequestBodyPrivacyEnum string

const (
	CreateChannelRequestBodyPrivacyEnumAnybody    CreateChannelRequestBodyPrivacyEnum = "anybody"
	CreateChannelRequestBodyPrivacyEnumModerators CreateChannelRequestBodyPrivacyEnum = "moderators"
	CreateChannelRequestBodyPrivacyEnumUser       CreateChannelRequestBodyPrivacyEnum = "user"
)

func (e *CreateChannelRequestBodyPrivacyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "moderators":
		fallthrough
	case "user":
		*e = CreateChannelRequestBodyPrivacyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateChannelRequestBodyPrivacyEnum: %s", s)
	}
}

type CreateChannelRequestBody struct {
	// The description of the channel.
	Description *string `json:"description,omitempty"`
	// The link to access the channel. You can use a custom name in the URL in place of a numeric channel ID, as in `/channels/{url_custom}`.
	Link *string `json:"link,omitempty"`
	// The name of the channel.
	Name string `json:"name"`
	// The privacy level of the channel.
	Privacy CreateChannelRequestBodyPrivacyEnum `json:"privacy"`
}

type CreateChannelRequest struct {
	Request  CreateChannelRequestBody `request:"mediaType=application/vnd.vimeo.channel+json"`
	Security CreateChannelSecurity
}

type CreateChannelResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The channel was created.
	Channel *shared.Channel
	// A parameter is invalid.
	LegacyError *shared.LegacyError
}
