/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ChannelCatalog } from "./channelcatalog";
import { ChannelCatalogListLinks } from "./channelcataloglistlinks";
import { ChannelCatalogListLovLinks } from "./channelcataloglistlovlinks";
import { Expose, Transform, Type } from "class-transformer";

/**
 * This is the index of the channel catalog API
 */
export class ChannelCatalogList extends SpeakeasyBase {
  /**
   * The channel catalog list. The key is the channel catalog identifier
   */
  @SpeakeasyMetadata({ elemType: ChannelCatalog })
  @Expose({ name: "channelCatalogs" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ChannelCatalog> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ChannelCatalog);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  channelCatalogs?: Record<string, ChannelCatalog>;

  /**
   * Indicates how global actions you can do like how to create a channel catalog, exclusion filter operators, etc...
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  @Type(() => ChannelCatalogListLinks)
  links?: ChannelCatalogListLinks;

  @SpeakeasyMetadata()
  @Expose({ name: "lovLinks" })
  @Type(() => ChannelCatalogListLovLinks)
  lovLinks?: ChannelCatalogListLovLinks;
}
