// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetDocumentsOrderByEnum
type GetDocumentsOrderByEnum string

const (
	GetDocumentsOrderByEnumID        GetDocumentsOrderByEnum = "id"
	GetDocumentsOrderByEnumUpdatedAt GetDocumentsOrderByEnum = "updated_at"
	GetDocumentsOrderByEnumCreatedAt GetDocumentsOrderByEnum = "created_at"
	GetDocumentsOrderByEnumName      GetDocumentsOrderByEnum = "name"
)

func (e GetDocumentsOrderByEnum) ToPointer() *GetDocumentsOrderByEnum {
	return &e
}

func (e *GetDocumentsOrderByEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "id":
		fallthrough
	case "updated_at":
		fallthrough
	case "created_at":
		fallthrough
	case "name":
		*e = GetDocumentsOrderByEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDocumentsOrderByEnum: %v", v)
	}
}

// GetDocumentsTypeFilterEnum
type GetDocumentsTypeFilterEnum string

const (
	GetDocumentsTypeFilterEnumAll           GetDocumentsTypeFilterEnum = "ALL"
	GetDocumentsTypeFilterEnumTextDocuments GetDocumentsTypeFilterEnum = "TEXT_DOCUMENTS"
	GetDocumentsTypeFilterEnumPresentations GetDocumentsTypeFilterEnum = "PRESENTATIONS"
	GetDocumentsTypeFilterEnumSpreadsheets  GetDocumentsTypeFilterEnum = "SPREADSHEETS"
	GetDocumentsTypeFilterEnumPdfs          GetDocumentsTypeFilterEnum = "PDFS"
	GetDocumentsTypeFilterEnumImages        GetDocumentsTypeFilterEnum = "IMAGES"
	GetDocumentsTypeFilterEnumSubtitles     GetDocumentsTypeFilterEnum = "SUBTITLES"
	GetDocumentsTypeFilterEnumDesigns       GetDocumentsTypeFilterEnum = "DESIGNS"
	GetDocumentsTypeFilterEnumLocalization  GetDocumentsTypeFilterEnum = "LOCALIZATION"
	GetDocumentsTypeFilterEnumWeb           GetDocumentsTypeFilterEnum = "WEB"
	GetDocumentsTypeFilterEnumStyleGuides   GetDocumentsTypeFilterEnum = "STYLE_GUIDES"
	GetDocumentsTypeFilterEnumGlossaries    GetDocumentsTypeFilterEnum = "GLOSSARIES"
)

func (e GetDocumentsTypeFilterEnum) ToPointer() *GetDocumentsTypeFilterEnum {
	return &e
}

func (e *GetDocumentsTypeFilterEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALL":
		fallthrough
	case "TEXT_DOCUMENTS":
		fallthrough
	case "PRESENTATIONS":
		fallthrough
	case "SPREADSHEETS":
		fallthrough
	case "PDFS":
		fallthrough
	case "IMAGES":
		fallthrough
	case "SUBTITLES":
		fallthrough
	case "DESIGNS":
		fallthrough
	case "LOCALIZATION":
		fallthrough
	case "WEB":
		fallthrough
	case "STYLE_GUIDES":
		fallthrough
	case "GLOSSARIES":
		*e = GetDocumentsTypeFilterEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDocumentsTypeFilterEnum: %v", v)
	}
}

type GetDocumentsWithEnum string

const (
	GetDocumentsWithEnumPreview GetDocumentsWithEnum = "preview"
	GetDocumentsWithEnumEditors GetDocumentsWithEnum = "editors"
)

func (e GetDocumentsWithEnum) ToPointer() *GetDocumentsWithEnum {
	return &e
}

func (e *GetDocumentsWithEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preview":
		fallthrough
	case "editors":
		*e = GetDocumentsWithEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDocumentsWithEnum: %v", v)
	}
}

type GetDocumentsRequest struct {
	// searches in source language of documents, in source and target languages of document's quote
	LanguageCode *string                   `queryParam:"style=form,explode=true,name=language_code"`
	OrderBy      *GetDocumentsOrderByEnum  `queryParam:"style=form,explode=true,name=order_by"`
	OrderType    *shared.ListOrderTypeEnum `queryParam:"style=form,explode=true,name=order_type"`
	Page         *int64                    `queryParam:"style=form,explode=true,name=page"`
	PerPage      *int64                    `queryParam:"style=form,explode=true,name=per_page"`
	// When true, this will return the most 4 recent active documents.
	Recent     *bool                       `queryParam:"style=form,explode=true,name=recent"`
	Search     *string                     `queryParam:"style=form,explode=true,name=search"`
	TypeFilter *GetDocumentsTypeFilterEnum `queryParam:"style=form,explode=true,name=type_filter"`
	// Attach further information. Possible values 'preview' to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]=preview for single document/style guide calls.
	With []GetDocumentsWithEnum `queryParam:"style=form,explode=true,name=with[]"`
}

type GetDocumentsResponse struct {
	ContentType string
	// Document list
	DocumentList *shared.DocumentList
	StatusCode   int
	RawResponse  *http.Response
}
