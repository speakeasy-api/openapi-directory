"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JobInfoJobInfoErrors:
    r"""The job infos' errors"""
    
    error: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Error'), 'exclude': lambda f: f is None }})  
    
class JobInfoJobInfoJobStatusEnum(str, Enum):
    r"""The job infos' job status"""
    NEW = 'New'
    PENDING = 'Pending'
    IN_PROGRESS = 'InProgress'
    SUCCESS = 'Success'
    FAILED = 'Failed'
    ON_HOLD = 'OnHold'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JobInfoJobInfo:
    
    created: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Created'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The job infos' created"""  
    employer_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmployerKey'), 'exclude': lambda f: f is None }})
    r"""The job infos' employer key"""  
    errors: Optional[JobInfoJobInfoErrors] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Errors'), 'exclude': lambda f: f is None }})
    r"""The job infos' errors"""  
    holding_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HoldingDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The job infos' holding date"""  
    job_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobId'), 'exclude': lambda f: f is None }})
    r"""The job infos' job id"""  
    job_status: Optional[JobInfoJobInfoJobStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobStatus'), 'exclude': lambda f: f is None }})
    r"""The job infos' job status"""  
    job_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobType'), 'exclude': lambda f: f is None }})
    r"""The job infos' job type"""  
    last_updated: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastUpdated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The job infos' last updated"""  
    progress: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Progress'), 'exclude': lambda f: f is None }})
    r"""The job infos' progress"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JobInfo:
    r"""The job info object."""
    
    job_info: Optional[JobInfoJobInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobInfo'), 'exclude': lambda f: f is None }})  
    