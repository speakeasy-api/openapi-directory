// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type DistributionGroupsListUsersSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type DistributionGroupsListUsersRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the distribution group
	DistributionGroupName string `pathParam:"style=simple,explode=false,name=distribution_group_name"`
	// Whether to exclude pending invitations in the response
	ExcludePendingInvitations *bool `queryParam:"style=form,explode=true,name=exclude_pending_invitations"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type DistributionGroupsListUsersDefaultApplicationJSONErrorCodeEnum string

const (
	DistributionGroupsListUsersDefaultApplicationJSONErrorCodeEnumBadRequest          DistributionGroupsListUsersDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	DistributionGroupsListUsersDefaultApplicationJSONErrorCodeEnumConflict            DistributionGroupsListUsersDefaultApplicationJSONErrorCodeEnum = "Conflict"
	DistributionGroupsListUsersDefaultApplicationJSONErrorCodeEnumNotAcceptable       DistributionGroupsListUsersDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	DistributionGroupsListUsersDefaultApplicationJSONErrorCodeEnumNotFound            DistributionGroupsListUsersDefaultApplicationJSONErrorCodeEnum = "NotFound"
	DistributionGroupsListUsersDefaultApplicationJSONErrorCodeEnumInternalServerError DistributionGroupsListUsersDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	DistributionGroupsListUsersDefaultApplicationJSONErrorCodeEnumUnauthorized        DistributionGroupsListUsersDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	DistributionGroupsListUsersDefaultApplicationJSONErrorCodeEnumTooManyRequests     DistributionGroupsListUsersDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e DistributionGroupsListUsersDefaultApplicationJSONErrorCodeEnum) ToPointer() *DistributionGroupsListUsersDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *DistributionGroupsListUsersDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = DistributionGroupsListUsersDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DistributionGroupsListUsersDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type DistributionGroupsListUsersDefaultApplicationJSONError struct {
	Code    DistributionGroupsListUsersDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                         `json:"message"`
}

// DistributionGroupsListUsersDefaultApplicationJSON - Error
type DistributionGroupsListUsersDefaultApplicationJSON struct {
	Error DistributionGroupsListUsersDefaultApplicationJSONError `json:"error"`
}

type DistributionGroupsListUsers200ApplicationJSON struct {
	// The avatar URL of the user
	AvatarURL *string `json:"avatar_url,omitempty"`
	// User is required to send an old password in order to change the password.
	CanChangePassword *bool `json:"can_change_password,omitempty"`
	// The full name of the user. Might for example be first and last name
	DisplayName *string `json:"display_name,omitempty"`
	// The email address of the user
	Email string `json:"email"`
	// The unique id (UUID) of the user
	ID *string `json:"id,omitempty"`
	// Whether the has accepted the invite. Available when an invite is pending, and the value will be "true".
	InvitePending *bool `json:"invite_pending,omitempty"`
	// The unique name that is used to identify the user.
	Name *string `json:"name,omitempty"`
}

type DistributionGroupsListUsersResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	DistributionGroupsListUsers200ApplicationJSONObjects []DistributionGroupsListUsers200ApplicationJSON
	// Error
	DistributionGroupsListUsersDefaultApplicationJSONObject *DistributionGroupsListUsersDefaultApplicationJSON
}
