/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CashDrawerDevice } from "./cashdrawerdevice";
import { Money } from "./money";
import { Expose, Type } from "class-transformer";

/**
 * This model gives the details of a cash drawer shift.
 *
 * @remarks
 * The cash_payment_money, cash_refund_money, cash_paid_in_money,
 * and cash_paid_out_money fields are all computed by summing their respective
 * event types.
 */
export class CashDrawerShift extends SpeakeasyBase {
  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   *
   * @remarks
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cash_paid_in_money" })
  @Type(() => Money)
  cashPaidInMoney?: Money;

  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   *
   * @remarks
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cash_paid_out_money" })
  @Type(() => Money)
  cashPaidOutMoney?: Money;

  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   *
   * @remarks
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cash_payment_money" })
  @Type(() => Money)
  cashPaymentMoney?: Money;

  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   *
   * @remarks
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cash_refunds_money" })
  @Type(() => Money)
  cashRefundsMoney?: Money;

  /**
   * The time when the shift was closed, in ISO 8601 format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "closed_at" })
  closedAt?: string;

  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   *
   * @remarks
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "closed_cash_money" })
  @Type(() => Money)
  closedCashMoney?: Money;

  /**
   * The ID of the employee that closed the cash drawer shift by auditing
   *
   * @remarks
   * the cash drawer contents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "closing_employee_id" })
  closingEmployeeId?: string;

  /**
   * The free-form text description of a cash drawer by an employee.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "device" })
  @Type(() => CashDrawerDevice)
  device?: CashDrawerDevice;

  /**
   * The IDs of all employees that were logged into Square Point of Sale at any
   *
   * @remarks
   * point while the cash drawer shift was open.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "employee_ids" })
  employeeIds?: string[];

  /**
   * The time when the shift ended, in ISO 8601 format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ended_at" })
  endedAt?: string;

  /**
   * The ID of the employee that ended the cash drawer shift.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ending_employee_id" })
  endingEmployeeId?: string;

  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   *
   * @remarks
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expected_cash_money" })
  @Type(() => Money)
  expectedCashMoney?: Money;

  /**
   * The shift unique ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The time when the shift began, in ISO 8601 format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "opened_at" })
  openedAt?: string;

  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   *
   * @remarks
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "opened_cash_money" })
  @Type(() => Money)
  openedCashMoney?: Money;

  /**
   * The ID of the employee that started the cash drawer shift.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "opening_employee_id" })
  openingEmployeeId?: string;

  /**
   * The shift current state.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: string;
}
