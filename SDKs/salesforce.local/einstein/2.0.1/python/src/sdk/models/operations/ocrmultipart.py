"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import ocrpredictresponse as shared_ocrpredictresponse
from typing import Optional


@dataclasses.dataclass
class OcrMultipartSecurity:
    
    bearer_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'bearer', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class OcrMultipartRequestBodySampleContent:
    
    content: bytes = dataclasses.field(metadata={'multipart_form': { 'content': True }})  
    sample_content: str = dataclasses.field(metadata={'multipart_form': { 'field_name': 'sampleContent' }})  
    

@dataclasses.dataclass
class OcrMultipartRequestBody:
    
    model_id: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'modelId' }})
    r"""ID of the model that makes the prediction. Valid values are OCRModel and tabulatev2."""  
    sample_content: Optional[OcrMultipartRequestBodySampleContent] = dataclasses.field(default=None, metadata={'multipart_form': { 'file': True }})
    r"""Binary content of image file uploaded as multipart/form-data. Optional."""  
    sample_id: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'sampleId' }})
    r"""String that you can pass in to tag the prediction. Optional. Can be any value, and is returned in the response."""  
    sample_location: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'sampleLocation' }})
    r"""URL of the image file. Use this parameter when sending in a file from a web location. Optional."""  
    task: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'task' }})
    r"""Optional. Designates the type of data in the image. Default is text. Valid values: contact, table, and text."""  
    

@dataclasses.dataclass
class OcrMultipartResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    ocr_predict_response: Optional[shared_ocrpredictresponse.OCRPredictResponse] = dataclasses.field(default=None)
    r"""OCR Result"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    