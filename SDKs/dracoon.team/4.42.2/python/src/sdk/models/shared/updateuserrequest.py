"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import mfaconfig as shared_mfaconfig
from ..shared import objectexpiration as shared_objectexpiration
from ..shared import userauthdataupdaterequest as shared_userauthdataupdaterequest
from ..shared import userauthmethod as shared_userauthmethod
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateUserRequest:
    r"""Request model for updating user's metadata"""
    
    auth_data: Optional[shared_userauthdataupdaterequest.UserAuthDataUpdateRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authData'), 'exclude': lambda f: f is None }})
    r"""User Authentication Data Update Request"""  
    auth_methods: Optional[list[shared_userauthmethod.UserAuthMethod]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authMethods'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.13.0
    
    Authentication methods:
    
    * `sql`
    
    * `active_directory`
    
    * `radius`
    
    * `openid`
    
    use `authData` instead
    """  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Email"""  
    expiration: Optional[shared_objectexpiration.ObjectExpiration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiration'), 'exclude': lambda f: f is None }})
    r"""Expiration information"""  
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstName'), 'exclude': lambda f: f is None }})
    r"""User first name"""  
    gender: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gender'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.12.0
    
    Gender
    
    Do NOT use `gender`! It will be ignored.
    """  
    is_locked: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isLocked'), 'exclude': lambda f: f is None }})
    r"""User is locked:
    
    * `false` - unlocked
    
    * `true` - locked
    
    
    
    User is locked and can not login anymore.
    """  
    last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastName'), 'exclude': lambda f: f is None }})
    r"""User last name"""  
    lock_status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lockStatus'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.7.0
    
    User lock status:
    
    * `0` - locked
    
    * `1` - Web access allowed
    
    * `2` - Web and mobile access allowed
    
    
    
    Please use `isLocked` instead.
    """  
    mfa_config: Optional[shared_mfaconfig.MfaConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mfaConfig'), 'exclude': lambda f: f is None }})
    r"""Multi-factor authentication configuration"""  
    phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone'), 'exclude': lambda f: f is None }})
    r"""Phone number"""  
    receiver_language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receiverLanguage'), 'exclude': lambda f: f is None }})
    r"""IETF language tag"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.18.0
    
    Job title
    """  
    user_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userName'), 'exclude': lambda f: f is None }})
    r"""&#128640; Since v4.13.0
    
    Username
    """  
    