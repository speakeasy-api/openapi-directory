"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudrecommenderv1beta1insightrecommendationreference as shared_googlecloudrecommenderv1beta1insightrecommendationreference
from ..shared import googlecloudrecommenderv1beta1insightstateinfo as shared_googlecloudrecommenderv1beta1insightstateinfo
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class GoogleCloudRecommenderV1beta1InsightCategoryEnum(str, Enum):
    r"""Category being targeted by the insight."""
    CATEGORY_UNSPECIFIED = 'CATEGORY_UNSPECIFIED'
    COST = 'COST'
    SECURITY = 'SECURITY'
    PERFORMANCE = 'PERFORMANCE'
    MANAGEABILITY = 'MANAGEABILITY'
    SUSTAINABILITY = 'SUSTAINABILITY'
    RELIABILITY = 'RELIABILITY'

class GoogleCloudRecommenderV1beta1InsightSeverityEnum(str, Enum):
    r"""Insight's severity."""
    SEVERITY_UNSPECIFIED = 'SEVERITY_UNSPECIFIED'
    LOW = 'LOW'
    MEDIUM = 'MEDIUM'
    HIGH = 'HIGH'
    CRITICAL = 'CRITICAL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudRecommenderV1beta1Insight:
    r"""An insight along with the information used to derive the insight. The insight may have associated recommendations as well."""
    
    associated_recommendations: Optional[list[shared_googlecloudrecommenderv1beta1insightrecommendationreference.GoogleCloudRecommenderV1beta1InsightRecommendationReference]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('associatedRecommendations'), 'exclude': lambda f: f is None }})
    r"""Recommendations derived from this insight."""  
    category: Optional[GoogleCloudRecommenderV1beta1InsightCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""Category being targeted by the insight."""  
    content: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content'), 'exclude': lambda f: f is None }})
    r"""A struct of custom fields to explain the insight. Example: \\"grantedPermissionsCount\\": \\"1000\\" """  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Free-form human readable summary in English. The maximum length is 500 characters."""  
    etag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('etag'), 'exclude': lambda f: f is None }})
    r"""Fingerprint of the Insight. Provides optimistic locking when updating states."""  
    insight_subtype: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insightSubtype'), 'exclude': lambda f: f is None }})
    r"""Insight subtype. Insight content schema will be stable for a given subtype."""  
    last_refresh_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastRefreshTime'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the latest data used to generate the insight."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the insight."""  
    observation_period: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('observationPeriod'), 'exclude': lambda f: f is None }})
    r"""Observation period that led to the insight. The source data used to generate the insight ends at last_refresh_time and begins at (last_refresh_time - observation_period)."""  
    severity: Optional[GoogleCloudRecommenderV1beta1InsightSeverityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('severity'), 'exclude': lambda f: f is None }})
    r"""Insight's severity."""  
    state_info: Optional[shared_googlecloudrecommenderv1beta1insightstateinfo.GoogleCloudRecommenderV1beta1InsightStateInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stateInfo'), 'exclude': lambda f: f is None }})
    r"""Information related to insight state."""  
    target_resources: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetResources'), 'exclude': lambda f: f is None }})
    r"""Fully qualified resource names that this insight is targeting."""  
    