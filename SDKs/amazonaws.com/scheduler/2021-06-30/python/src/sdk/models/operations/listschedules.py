"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import listschedulesoutput as shared_listschedulesoutput
from enum import Enum
from typing import Any, Optional

class ListSchedulesStateEnum(str, Enum):
    r"""If specified, only lists the schedules whose current state matches the given filter."""
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


@dataclasses.dataclass
class ListSchedulesRequest:
    
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'MaxResults', 'style': 'form', 'explode': True }})
    r"""If specified, limits the number of results returned by this operation. The operation also returns a <code>NextToken</code> which you can use in a subsequent operation to retrieve the next set of results."""  
    name_prefix: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'NamePrefix', 'style': 'form', 'explode': True }})
    r"""Schedule name prefix to return the filtered list of resources."""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'NextToken', 'style': 'form', 'explode': True }})
    r"""The token returned by a previous call to retrieve the next set of results."""  
    schedule_group: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ScheduleGroup', 'style': 'form', 'explode': True }})
    r"""If specified, only lists the schedules whose associated schedule group matches the given filter."""  
    state: Optional[ListSchedulesStateEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'State', 'style': 'form', 'explode': True }})
    r"""If specified, only lists the schedules whose current state matches the given filter."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ListSchedulesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    list_schedules_output: Optional[shared_listschedulesoutput.ListSchedulesOutput] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    