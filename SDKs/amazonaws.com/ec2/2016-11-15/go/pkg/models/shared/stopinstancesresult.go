// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// StopInstancesResultStoppingInstancesCurrentStateNameEnum - The current state of the instance.
type StopInstancesResultStoppingInstancesCurrentStateNameEnum string

const (
	StopInstancesResultStoppingInstancesCurrentStateNameEnumPending      StopInstancesResultStoppingInstancesCurrentStateNameEnum = "pending"
	StopInstancesResultStoppingInstancesCurrentStateNameEnumRunning      StopInstancesResultStoppingInstancesCurrentStateNameEnum = "running"
	StopInstancesResultStoppingInstancesCurrentStateNameEnumShuttingDown StopInstancesResultStoppingInstancesCurrentStateNameEnum = "shutting-down"
	StopInstancesResultStoppingInstancesCurrentStateNameEnumTerminated   StopInstancesResultStoppingInstancesCurrentStateNameEnum = "terminated"
	StopInstancesResultStoppingInstancesCurrentStateNameEnumStopping     StopInstancesResultStoppingInstancesCurrentStateNameEnum = "stopping"
	StopInstancesResultStoppingInstancesCurrentStateNameEnumStopped      StopInstancesResultStoppingInstancesCurrentStateNameEnum = "stopped"
)

func (e *StopInstancesResultStoppingInstancesCurrentStateNameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending":
		fallthrough
	case "running":
		fallthrough
	case "shutting-down":
		fallthrough
	case "terminated":
		fallthrough
	case "stopping":
		fallthrough
	case "stopped":
		*e = StopInstancesResultStoppingInstancesCurrentStateNameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StopInstancesResultStoppingInstancesCurrentStateNameEnum: %s", s)
	}
}

// StopInstancesResultStoppingInstancesCurrentState - The current state of the instance.
type StopInstancesResultStoppingInstancesCurrentState struct {
	Code *int64
	Name *StopInstancesResultStoppingInstancesCurrentStateNameEnum
}

// StopInstancesResultStoppingInstancesPreviousStateNameEnum - The current state of the instance.
type StopInstancesResultStoppingInstancesPreviousStateNameEnum string

const (
	StopInstancesResultStoppingInstancesPreviousStateNameEnumPending      StopInstancesResultStoppingInstancesPreviousStateNameEnum = "pending"
	StopInstancesResultStoppingInstancesPreviousStateNameEnumRunning      StopInstancesResultStoppingInstancesPreviousStateNameEnum = "running"
	StopInstancesResultStoppingInstancesPreviousStateNameEnumShuttingDown StopInstancesResultStoppingInstancesPreviousStateNameEnum = "shutting-down"
	StopInstancesResultStoppingInstancesPreviousStateNameEnumTerminated   StopInstancesResultStoppingInstancesPreviousStateNameEnum = "terminated"
	StopInstancesResultStoppingInstancesPreviousStateNameEnumStopping     StopInstancesResultStoppingInstancesPreviousStateNameEnum = "stopping"
	StopInstancesResultStoppingInstancesPreviousStateNameEnumStopped      StopInstancesResultStoppingInstancesPreviousStateNameEnum = "stopped"
)

func (e *StopInstancesResultStoppingInstancesPreviousStateNameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending":
		fallthrough
	case "running":
		fallthrough
	case "shutting-down":
		fallthrough
	case "terminated":
		fallthrough
	case "stopping":
		fallthrough
	case "stopped":
		*e = StopInstancesResultStoppingInstancesPreviousStateNameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StopInstancesResultStoppingInstancesPreviousStateNameEnum: %s", s)
	}
}

// StopInstancesResultStoppingInstancesPreviousState - The previous state of the instance.
type StopInstancesResultStoppingInstancesPreviousState struct {
	Code *int64
	Name *StopInstancesResultStoppingInstancesPreviousStateNameEnum
}

// StopInstancesResultStoppingInstances - Describes an instance state change.
type StopInstancesResultStoppingInstances struct {
	CurrentState  *StopInstancesResultStoppingInstancesCurrentState
	InstanceID    *string
	PreviousState *StopInstancesResultStoppingInstancesPreviousState
}

// StopInstancesResult - Success
type StopInstancesResult struct {
	StoppingInstances []StopInstancesResultStoppingInstances
}
