"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import _xgafv_enum as shared__xgafv_enum
from ..shared import alt_enum as shared_alt_enum
from ..shared import floodlightactivitieslistresponse as shared_floodlightactivitieslistresponse
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class DfareportingFloodlightActivitiesListSecurity:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class DfareportingFloodlightActivitiesListFloodlightActivityGroupTypeEnum(str, Enum):
    r"""Select only floodlight activities with the specified floodlight activity group type."""
    COUNTER = 'COUNTER'
    SALE = 'SALE'

class DfareportingFloodlightActivitiesListSortFieldEnum(str, Enum):
    r"""Field by which to sort the list."""
    ID = 'ID'
    NAME = 'NAME'

class DfareportingFloodlightActivitiesListSortOrderEnum(str, Enum):
    r"""Order of sorted results."""
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


@dataclasses.dataclass
class DfareportingFloodlightActivitiesListRequest:
    
    profile_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'profileId', 'style': 'simple', 'explode': False }})
    r"""User profile ID associated with this request."""  
    dollar_xgafv: Optional[shared__xgafv_enum.XgafvEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$.xgafv', 'style': 'form', 'explode': True }})
    r"""V1 error format."""  
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'access_token', 'style': 'form', 'explode': True }})
    r"""OAuth access token."""  
    advertiser_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'advertiserId', 'style': 'form', 'explode': True }})
    r"""Select only floodlight activities for the specified advertiser ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result."""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for response."""  
    callback: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'callback', 'style': 'form', 'explode': True }})
    r"""JSONP"""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    floodlight_activity_group_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'floodlightActivityGroupIds', 'style': 'form', 'explode': True }})
    r"""Select only floodlight activities with the specified floodlight activity group IDs."""  
    floodlight_activity_group_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'floodlightActivityGroupName', 'style': 'form', 'explode': True }})
    r"""Select only floodlight activities with the specified floodlight activity group name."""  
    floodlight_activity_group_tag_string: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'floodlightActivityGroupTagString', 'style': 'form', 'explode': True }})
    r"""Select only floodlight activities with the specified floodlight activity group tag string."""  
    floodlight_activity_group_type: Optional[DfareportingFloodlightActivitiesListFloodlightActivityGroupTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'floodlightActivityGroupType', 'style': 'form', 'explode': True }})
    r"""Select only floodlight activities with the specified floodlight activity group type."""  
    floodlight_configuration_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'floodlightConfigurationId', 'style': 'form', 'explode': True }})
    r"""Select only floodlight activities for the specified floodlight configuration ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result."""  
    ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ids', 'style': 'form', 'explode': True }})
    r"""Select only floodlight activities with the specified IDs. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""Maximum number of results to return."""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pageToken', 'style': 'form', 'explode': True }})
    r"""Value of the nextPageToken from the previous result page."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."""  
    search_string: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'searchString', 'style': 'form', 'explode': True }})
    r"""Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \\"floodlightactivity*2015\\" will return objects with names like \\"floodlightactivity June 2015\\", \\"floodlightactivity April 2015\\", or simply \\"floodlightactivity 2015\\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \\"floodlightactivity\\" will match objects with name \\"my floodlightactivity activity\\", \\"floodlightactivity 2015\\", or simply \\"floodlightactivity\\"."""  
    sort_field: Optional[DfareportingFloodlightActivitiesListSortFieldEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sortField', 'style': 'form', 'explode': True }})
    r"""Field by which to sort the list."""  
    sort_order: Optional[DfareportingFloodlightActivitiesListSortOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sortOrder', 'style': 'form', 'explode': True }})
    r"""Order of sorted results."""  
    tag_string: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tagString', 'style': 'form', 'explode': True }})
    r"""Select only floodlight activities with the specified tag string."""  
    upload_protocol: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'upload_protocol', 'style': 'form', 'explode': True }})
    r"""Upload protocol for media (e.g. \\"raw\\", \\"multipart\\")."""  
    upload_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'uploadType', 'style': 'form', 'explode': True }})
    r"""Legacy upload protocol for media (e.g. \\"media\\", \\"multipart\\")."""  
    

@dataclasses.dataclass
class DfareportingFloodlightActivitiesListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    floodlight_activities_list_response: Optional[shared_floodlightactivitieslistresponse.FloodlightActivitiesListResponse] = dataclasses.field(default=None)
    r"""Successful response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    