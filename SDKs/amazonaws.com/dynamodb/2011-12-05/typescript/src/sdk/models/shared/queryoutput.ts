/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { AttributeValue } from "./attributevalue";
import { Key } from "./key";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Success
 */
export class QueryOutput extends SpeakeasyBase {
  /**
   * The number of Capacity Units of the provisioned throughput of the table consumed during the operation. <code>GetItem</code>, <code>BatchGetItem</code>, <code>BatchWriteItem</code>, <code>Query</code>, and <code>Scan</code> operations consume <code>ReadCapacityUnits</code>, while <code>PutItem</code>, <code>UpdateItem</code>, and <code>DeleteItem</code> operations consume <code>WriteCapacityUnits</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ConsumedCapacityUnits" })
  consumedCapacityUnits?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "Count" })
  count?: number;

  @SpeakeasyMetadata({ elemType: AttributeValue, elemDepth: 2 })
  @Expose({ name: "Items" })
  @Transform(
    ({ value }) => {
      const arr: Record<string, AttributeValue>[] = [];
      for (const item of value) {
        arr.push(objectToClass(item, AttributeValue));
      }
      return arr;
    },
    { toClassOnly: true }
  )
  items?: Record<string, AttributeValue>[];

  @SpeakeasyMetadata()
  @Expose({ name: "LastEvaluatedKey" })
  @Type(() => Key)
  lastEvaluatedKey?: Key;
}
