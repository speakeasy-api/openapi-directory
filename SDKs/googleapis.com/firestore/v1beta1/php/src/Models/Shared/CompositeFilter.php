<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * CompositeFilter - A filter that merges multiple other filters using the given operator.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class CompositeFilter
{
    /**
     * The list of filters to combine. Requires: * At least one filter is present.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\Filter> $filters
     */
	#[\JMS\Serializer\Annotation\SerializedName('filters')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Filter>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $filters = null;
    
    /**
     * The operator for combining multiple filters.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CompositeFilterOpEnum $op
     */
	#[\JMS\Serializer\Annotation\SerializedName('op')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\CompositeFilterOpEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CompositeFilterOpEnum $op = null;
    
	public function __construct()
	{
		$this->filters = null;
		$this->op = null;
	}
}
