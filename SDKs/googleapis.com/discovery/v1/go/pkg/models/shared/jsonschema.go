// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// JSONSchemaAnnotations - Additional information about this property.
type JSONSchemaAnnotations struct {
	// A list of methods for which this property is required on requests.
	Required []string `json:"required,omitempty"`
}

type JSONSchemaVariantMap struct {
	DollarRef *string `json:"$ref,omitempty"`
	TypeValue *string `json:"type_value,omitempty"`
}

// JSONSchemaVariant - In a variant data type, the value of one property is used to determine how to interpret the entire entity. Its value must exist in a map of descriminant values to schema names.
type JSONSchemaVariant struct {
	// The name of the type discriminant property.
	Discriminant *string `json:"discriminant,omitempty"`
	// The map of discriminant value to schema to use for parsing..
	Map []JSONSchemaVariantMap `json:"map,omitempty"`
}

type JSONSchema struct {
	// A reference to another schema. The value of this property is the "id" of another schema.
	DollarRef            *string     `json:"$ref,omitempty"`
	AdditionalProperties *JSONSchema `json:"additionalProperties,omitempty"`
	// Additional information about this property.
	Annotations *JSONSchemaAnnotations `json:"annotations,omitempty"`
	// A description of this object.
	Description *string `json:"description,omitempty"`
	// Values this parameter may take (if it is an enum).
	Enum []string `json:"enum,omitempty"`
	// The descriptions for the enums. Each position maps to the corresponding value in the "enum" array.
	EnumDescriptions []string `json:"enumDescriptions,omitempty"`
	// An additional regular expression or key that helps constrain the value. For more details see: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.23
	Format *string `json:"format,omitempty"`
	// Unique identifier for this schema.
	ID    *string     `json:"id,omitempty"`
	Items *JSONSchema `json:"items,omitempty"`
	// Whether this parameter goes in the query or the path for REST requests.
	Location *string `json:"location,omitempty"`
	// The maximum value of this parameter.
	Maximum *string `json:"maximum,omitempty"`
	// The minimum value of this parameter.
	Minimum *string `json:"minimum,omitempty"`
	// The regular expression this parameter must conform to. Uses Java 6 regex format: http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html
	Pattern *string `json:"pattern,omitempty"`
	// If this is a schema for an object, list the schema for each property of this object.
	Properties map[string]JSONSchema `json:"properties,omitempty"`
	// The value is read-only, generated by the service. The value cannot be modified by the client. If the value is included in a POST, PUT, or PATCH request, it is ignored by the service.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// Whether this parameter may appear multiple times.
	Repeated *bool `json:"repeated,omitempty"`
	// Whether the parameter is required.
	Required *bool `json:"required,omitempty"`
	// The value type for this schema. A list of values can be found here: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.1
	Type *string `json:"type,omitempty"`
	// In a variant data type, the value of one property is used to determine how to interpret the entire entity. Its value must exist in a map of descriminant values to schema names.
	Variant *JSONSchemaVariant `json:"variant,omitempty"`
}
