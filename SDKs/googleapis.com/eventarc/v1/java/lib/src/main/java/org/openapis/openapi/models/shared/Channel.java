/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Channel - A representation of the Channel resource. A Channel is a resource on which event providers publish their events. The published events are delivered through the transport associated with the channel. Note that a channel is associated with exactly one event provider.
 */
public class Channel {
    /**
     * Output only. The activation token for the channel. The token must be used by the provider to register the channel for publishing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("activationToken")
    public String activationToken;

    public Channel withActivationToken(String activationToken) {
        this.activationToken = activationToken;
        return this;
    }
    
    /**
     * Output only. The creation time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;

    public Channel withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must match the pattern `projects/* /locations/* /keyRings/* /cryptoKeys/*`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cryptoKeyName")
    public String cryptoKeyName;

    public Channel withCryptoKeyName(String cryptoKeyName) {
        this.cryptoKeyName = cryptoKeyName;
        return this;
    }
    
    /**
     * Required. The resource name of the channel. Must be unique within the location on the project and must be in `projects/{project}/locations/{location}/channels/{channel_id}` format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Channel withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The name of the event provider (e.g. Eventarc SaaS partner) associated with the channel. This provider will be granted permissions to publish events to the channel. Format: `projects/{project}/locations/{location}/providers/{provider_id}`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provider")
    public String provider;

    public Channel withProvider(String provider) {
        this.provider = provider;
        return this;
    }
    
    /**
     * Output only. The name of the Pub/Sub topic created and managed by Eventarc system as a transport for the event delivery. Format: `projects/{project}/topics/{topic_id}`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pubsubTopic")
    public String pubsubTopic;

    public Channel withPubsubTopic(String pubsubTopic) {
        this.pubsubTopic = pubsubTopic;
        return this;
    }
    
    /**
     * Output only. The state of a Channel.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public ChannelStateEnum state;

    public Channel withState(ChannelStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Output only. Server assigned unique identifier for the channel. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uid")
    public String uid;

    public Channel withUid(String uid) {
        this.uid = uid;
        return this;
    }
    
    /**
     * Output only. The last-modified time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;

    public Channel withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
    public Channel(){}
}
