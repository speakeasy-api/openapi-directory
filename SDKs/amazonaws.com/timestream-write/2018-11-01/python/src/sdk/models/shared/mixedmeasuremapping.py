"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import measurevaluetype_enum as shared_measurevaluetype_enum
from ..shared import multimeasureattributemapping as shared_multimeasureattributemapping
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MixedMeasureMapping:
    r"""<p/>"""
    
    measure_value_type: shared_measurevaluetype_enum.MeasureValueTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MeasureValueType') }})  
    measure_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MeasureName'), 'exclude': lambda f: f is None }})  
    multi_measure_attribute_mappings: Optional[list[shared_multimeasureattributemapping.MultiMeasureAttributeMapping]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MultiMeasureAttributeMappings'), 'exclude': lambda f: f is None }})  
    source_column: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourceColumn'), 'exclude': lambda f: f is None }})  
    target_measure_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TargetMeasureName'), 'exclude': lambda f: f is None }})  
    