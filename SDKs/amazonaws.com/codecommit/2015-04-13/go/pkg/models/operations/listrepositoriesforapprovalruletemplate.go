// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListRepositoriesForApprovalRuleTemplateQueryParams struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=maxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

// ListRepositoriesForApprovalRuleTemplateXAmzTargetEnum
type ListRepositoriesForApprovalRuleTemplateXAmzTargetEnum string

const (
	ListRepositoriesForApprovalRuleTemplateXAmzTargetEnumCodeCommit20150413ListRepositoriesForApprovalRuleTemplate ListRepositoriesForApprovalRuleTemplateXAmzTargetEnum = "CodeCommit_20150413.ListRepositoriesForApprovalRuleTemplate"
)

func (e *ListRepositoriesForApprovalRuleTemplateXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeCommit_20150413.ListRepositoriesForApprovalRuleTemplate":
		*e = ListRepositoriesForApprovalRuleTemplateXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListRepositoriesForApprovalRuleTemplateXAmzTargetEnum: %s", s)
	}
}

type ListRepositoriesForApprovalRuleTemplateHeaders struct {
	XAmzAlgorithm     *string                                               `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                               `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                               `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                               `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                               `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                               `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                               `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListRepositoriesForApprovalRuleTemplateXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListRepositoriesForApprovalRuleTemplateRequest struct {
	QueryParams ListRepositoriesForApprovalRuleTemplateQueryParams
	Headers     ListRepositoriesForApprovalRuleTemplateHeaders
	Request     shared.ListRepositoriesForApprovalRuleTemplateInput `request:"mediaType=application/json"`
}

type ListRepositoriesForApprovalRuleTemplateResponse struct {
	// ApprovalRuleTemplateDoesNotExistException
	ApprovalRuleTemplateDoesNotExistException interface{}
	// ApprovalRuleTemplateNameRequiredException
	ApprovalRuleTemplateNameRequiredException interface{}
	ContentType                               string
	// EncryptionIntegrityChecksFailedException
	EncryptionIntegrityChecksFailedException interface{}
	// EncryptionKeyAccessDeniedException
	EncryptionKeyAccessDeniedException interface{}
	// EncryptionKeyDisabledException
	EncryptionKeyDisabledException interface{}
	// EncryptionKeyNotFoundException
	EncryptionKeyNotFoundException interface{}
	// EncryptionKeyUnavailableException
	EncryptionKeyUnavailableException interface{}
	// InvalidApprovalRuleTemplateNameException
	InvalidApprovalRuleTemplateNameException interface{}
	// InvalidContinuationTokenException
	InvalidContinuationTokenException interface{}
	// InvalidMaxResultsException
	InvalidMaxResultsException interface{}
	// Success
	ListRepositoriesForApprovalRuleTemplateOutput *shared.ListRepositoriesForApprovalRuleTemplateOutput
	StatusCode                                    int
	RawResponse                                   *http.Response
}
