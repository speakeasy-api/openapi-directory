/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ArimaForecastingMetrics - Model evaluation metrics for ARIMA forecasting models.
 */
public class ArimaForecastingMetrics {
    /**
     * Arima model fitting metrics.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("arimaFittingMetrics")
    public ArimaFittingMetrics[] arimaFittingMetrics;
    public ArimaForecastingMetrics withArimaFittingMetrics(ArimaFittingMetrics[] arimaFittingMetrics) {
        this.arimaFittingMetrics = arimaFittingMetrics;
        return this;
    }
    
    /**
     * Repeated as there can be many metric sets (one for each model) in auto-arima and the large-scale case.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("arimaSingleModelForecastingMetrics")
    public ArimaSingleModelForecastingMetrics[] arimaSingleModelForecastingMetrics;
    public ArimaForecastingMetrics withArimaSingleModelForecastingMetrics(ArimaSingleModelForecastingMetrics[] arimaSingleModelForecastingMetrics) {
        this.arimaSingleModelForecastingMetrics = arimaSingleModelForecastingMetrics;
        return this;
    }
    
    /**
     * Whether Arima model fitted with drift or not. It is always false when d is not 1.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasDrift")
    public Boolean[] hasDrift;
    public ArimaForecastingMetrics withHasDrift(Boolean[] hasDrift) {
        this.hasDrift = hasDrift;
        return this;
    }
    
    /**
     * Non-seasonal order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nonSeasonalOrder")
    public ArimaOrder[] nonSeasonalOrder;
    public ArimaForecastingMetrics withNonSeasonalOrder(ArimaOrder[] nonSeasonalOrder) {
        this.nonSeasonalOrder = nonSeasonalOrder;
        return this;
    }
    
    /**
     * Seasonal periods. Repeated because multiple periods are supported for one time series.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("seasonalPeriods")
    public ArimaForecastingMetricsSeasonalPeriodsEnum[] seasonalPeriods;
    public ArimaForecastingMetrics withSeasonalPeriods(ArimaForecastingMetricsSeasonalPeriodsEnum[] seasonalPeriods) {
        this.seasonalPeriods = seasonalPeriods;
        return this;
    }
    
    /**
     * Id to differentiate different time series for the large-scale case.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeSeriesId")
    public String[] timeSeriesId;
    public ArimaForecastingMetrics withTimeSeriesId(String[] timeSeriesId) {
        this.timeSeriesId = timeSeriesId;
        return this;
    }
    
}
