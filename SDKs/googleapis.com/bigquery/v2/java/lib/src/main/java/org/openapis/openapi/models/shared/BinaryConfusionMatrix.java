/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * BinaryConfusionMatrix - Confusion matrix for binary classification models.
 */
public class BinaryConfusionMatrix {
    /**
     * The fraction of predictions given the correct label.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accuracy")
    public Double accuracy;

    public BinaryConfusionMatrix withAccuracy(Double accuracy) {
        this.accuracy = accuracy;
        return this;
    }
    
    /**
     * The equally weighted average of recall and precision.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("f1Score")
    public Double f1Score;

    public BinaryConfusionMatrix withF1Score(Double f1Score) {
        this.f1Score = f1Score;
        return this;
    }
    
    /**
     * Number of false samples predicted as false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("falseNegatives")
    public String falseNegatives;

    public BinaryConfusionMatrix withFalseNegatives(String falseNegatives) {
        this.falseNegatives = falseNegatives;
        return this;
    }
    
    /**
     * Number of false samples predicted as true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("falsePositives")
    public String falsePositives;

    public BinaryConfusionMatrix withFalsePositives(String falsePositives) {
        this.falsePositives = falsePositives;
        return this;
    }
    
    /**
     * Threshold value used when computing each of the following metric.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("positiveClassThreshold")
    public Double positiveClassThreshold;

    public BinaryConfusionMatrix withPositiveClassThreshold(Double positiveClassThreshold) {
        this.positiveClassThreshold = positiveClassThreshold;
        return this;
    }
    
    /**
     * The fraction of actual positive predictions that had positive actual labels.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("precision")
    public Double precision;

    public BinaryConfusionMatrix withPrecision(Double precision) {
        this.precision = precision;
        return this;
    }
    
    /**
     * The fraction of actual positive labels that were given a positive prediction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recall")
    public Double recall;

    public BinaryConfusionMatrix withRecall(Double recall) {
        this.recall = recall;
        return this;
    }
    
    /**
     * Number of true samples predicted as false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trueNegatives")
    public String trueNegatives;

    public BinaryConfusionMatrix withTrueNegatives(String trueNegatives) {
        this.trueNegatives = trueNegatives;
        return this;
    }
    
    /**
     * Number of true samples predicted as true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("truePositives")
    public String truePositives;

    public BinaryConfusionMatrix withTruePositives(String truePositives) {
        this.truePositives = truePositives;
        return this;
    }
    
    public BinaryConfusionMatrix(){}
}
