"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import botaliaslocalesettings as shared_botaliaslocalesettings
from ..shared import botaliasstatus_enum as shared_botaliasstatus_enum
from ..shared import conversationlogsettings as shared_conversationlogsettings
from ..shared import sentimentanalysissettings as shared_sentimentanalysissettings
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBotAliasResponse:
    r"""Success"""
    
    bot_alias_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('botAliasId'), 'exclude': lambda f: f is None }})  
    bot_alias_locale_settings: Optional[dict[str, shared_botaliaslocalesettings.BotAliasLocaleSettings]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('botAliasLocaleSettings'), 'exclude': lambda f: f is None }})  
    bot_alias_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('botAliasName'), 'exclude': lambda f: f is None }})  
    bot_alias_status: Optional[shared_botaliasstatus_enum.BotAliasStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('botAliasStatus'), 'exclude': lambda f: f is None }})  
    bot_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('botId'), 'exclude': lambda f: f is None }})  
    bot_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('botVersion'), 'exclude': lambda f: f is None }})  
    conversation_log_settings: Optional[shared_conversationlogsettings.ConversationLogSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conversationLogSettings'), 'exclude': lambda f: f is None }})  
    creation_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    sentiment_analysis_settings: Optional[shared_sentimentanalysissettings.SentimentAnalysisSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sentimentAnalysisSettings'), 'exclude': lambda f: f is None }})
    r"""Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances."""  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    