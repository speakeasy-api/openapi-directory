// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MessageCode401SBSEnum - Message codes defined for signing baskets for HTTP Error code 401 (UNAUTHORIZED).
type MessageCode401SBSEnum string

const (
	MessageCode401SBSEnumCertificateInvalid    MessageCode401SBSEnum = "CERTIFICATE_INVALID"
	MessageCode401SBSEnumRoleInvalid           MessageCode401SBSEnum = "ROLE_INVALID"
	MessageCode401SBSEnumCertificateExpired    MessageCode401SBSEnum = "CERTIFICATE_EXPIRED"
	MessageCode401SBSEnumCertificateBlocked    MessageCode401SBSEnum = "CERTIFICATE_BLOCKED"
	MessageCode401SBSEnumCertificateRevoke     MessageCode401SBSEnum = "CERTIFICATE_REVOKE"
	MessageCode401SBSEnumCertificateMissing    MessageCode401SBSEnum = "CERTIFICATE_MISSING"
	MessageCode401SBSEnumSignatureInvalid      MessageCode401SBSEnum = "SIGNATURE_INVALID"
	MessageCode401SBSEnumSignatureMissing      MessageCode401SBSEnum = "SIGNATURE_MISSING"
	MessageCode401SBSEnumCorporateIDInvalid    MessageCode401SBSEnum = "CORPORATE_ID_INVALID"
	MessageCode401SBSEnumPsuCredentialsInvalid MessageCode401SBSEnum = "PSU_CREDENTIALS_INVALID"
	MessageCode401SBSEnumConsentInvalid        MessageCode401SBSEnum = "CONSENT_INVALID"
	MessageCode401SBSEnumConsentExpired        MessageCode401SBSEnum = "CONSENT_EXPIRED"
	MessageCode401SBSEnumTokenUnknown          MessageCode401SBSEnum = "TOKEN_UNKNOWN"
	MessageCode401SBSEnumTokenInvalid          MessageCode401SBSEnum = "TOKEN_INVALID"
	MessageCode401SBSEnumTokenExpired          MessageCode401SBSEnum = "TOKEN_EXPIRED"
)

func (e MessageCode401SBSEnum) ToPointer() *MessageCode401SBSEnum {
	return &e
}

func (e *MessageCode401SBSEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CERTIFICATE_INVALID":
		fallthrough
	case "ROLE_INVALID":
		fallthrough
	case "CERTIFICATE_EXPIRED":
		fallthrough
	case "CERTIFICATE_BLOCKED":
		fallthrough
	case "CERTIFICATE_REVOKE":
		fallthrough
	case "CERTIFICATE_MISSING":
		fallthrough
	case "SIGNATURE_INVALID":
		fallthrough
	case "SIGNATURE_MISSING":
		fallthrough
	case "CORPORATE_ID_INVALID":
		fallthrough
	case "PSU_CREDENTIALS_INVALID":
		fallthrough
	case "CONSENT_INVALID":
		fallthrough
	case "CONSENT_EXPIRED":
		fallthrough
	case "TOKEN_UNKNOWN":
		fallthrough
	case "TOKEN_INVALID":
		fallthrough
	case "TOKEN_EXPIRED":
		*e = MessageCode401SBSEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageCode401SBSEnum: %v", v)
	}
}
