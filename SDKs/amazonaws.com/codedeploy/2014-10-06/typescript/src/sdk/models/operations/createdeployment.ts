/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum CreateDeploymentXAmzTargetEnum {
  CodeDeploy20141006CreateDeployment = "CodeDeploy_20141006.CreateDeployment",
}

export class CreateDeploymentRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  createDeploymentInput: shared.CreateDeploymentInput;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Target",
  })
  xAmzTarget: CreateDeploymentXAmzTargetEnum;
}

export class CreateDeploymentResponse extends SpeakeasyBase {
  /**
   * AlarmsLimitExceededException
   */
  @SpeakeasyMetadata()
  alarmsLimitExceededException?: any;

  /**
   * ApplicationDoesNotExistException
   */
  @SpeakeasyMetadata()
  applicationDoesNotExistException?: any;

  /**
   * ApplicationNameRequiredException
   */
  @SpeakeasyMetadata()
  applicationNameRequiredException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createDeploymentOutput?: shared.CreateDeploymentOutput;

  /**
   * DeploymentConfigDoesNotExistException
   */
  @SpeakeasyMetadata()
  deploymentConfigDoesNotExistException?: any;

  /**
   * DeploymentGroupDoesNotExistException
   */
  @SpeakeasyMetadata()
  deploymentGroupDoesNotExistException?: any;

  /**
   * DeploymentGroupNameRequiredException
   */
  @SpeakeasyMetadata()
  deploymentGroupNameRequiredException?: any;

  /**
   * DeploymentLimitExceededException
   */
  @SpeakeasyMetadata()
  deploymentLimitExceededException?: any;

  /**
   * DescriptionTooLongException
   */
  @SpeakeasyMetadata()
  descriptionTooLongException?: any;

  /**
   * InvalidAlarmConfigException
   */
  @SpeakeasyMetadata()
  invalidAlarmConfigException?: any;

  /**
   * InvalidApplicationNameException
   */
  @SpeakeasyMetadata()
  invalidApplicationNameException?: any;

  /**
   * InvalidAutoRollbackConfigException
   */
  @SpeakeasyMetadata()
  invalidAutoRollbackConfigException?: any;

  /**
   * InvalidAutoScalingGroupException
   */
  @SpeakeasyMetadata()
  invalidAutoScalingGroupException?: any;

  /**
   * InvalidDeploymentConfigNameException
   */
  @SpeakeasyMetadata()
  invalidDeploymentConfigNameException?: any;

  /**
   * InvalidDeploymentGroupNameException
   */
  @SpeakeasyMetadata()
  invalidDeploymentGroupNameException?: any;

  /**
   * InvalidFileExistsBehaviorException
   */
  @SpeakeasyMetadata()
  invalidFileExistsBehaviorException?: any;

  /**
   * InvalidGitHubAccountTokenException
   */
  @SpeakeasyMetadata()
  invalidGitHubAccountTokenException?: any;

  /**
   * InvalidIgnoreApplicationStopFailuresValueException
   */
  @SpeakeasyMetadata()
  invalidIgnoreApplicationStopFailuresValueException?: any;

  /**
   * InvalidLoadBalancerInfoException
   */
  @SpeakeasyMetadata()
  invalidLoadBalancerInfoException?: any;

  /**
   * InvalidRevisionException
   */
  @SpeakeasyMetadata()
  invalidRevisionException?: any;

  /**
   * InvalidRoleException
   */
  @SpeakeasyMetadata()
  invalidRoleException?: any;

  /**
   * InvalidTargetInstancesException
   */
  @SpeakeasyMetadata()
  invalidTargetInstancesException?: any;

  /**
   * InvalidTrafficRoutingConfigurationException
   */
  @SpeakeasyMetadata()
  invalidTrafficRoutingConfigurationException?: any;

  /**
   * InvalidUpdateOutdatedInstancesOnlyValueException
   */
  @SpeakeasyMetadata()
  invalidUpdateOutdatedInstancesOnlyValueException?: any;

  /**
   * RevisionDoesNotExistException
   */
  @SpeakeasyMetadata()
  revisionDoesNotExistException?: any;

  /**
   * RevisionRequiredException
   */
  @SpeakeasyMetadata()
  revisionRequiredException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;
}
