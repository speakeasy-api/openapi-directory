/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { FieldConfig } from "./fieldconfig";
import { FormActionTypeEnum } from "./formactiontypeenum";
import { FormCTA } from "./formcta";
import { FormDataTypeConfig } from "./formdatatypeconfig";
import { FormStyle } from "./formstyle";
import { SectionalElement } from "./sectionalelement";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Contains the configuration settings for a <code>Form</code> user interface (UI) element for an Amplify app. A form is a component you can add to your project by specifying a data source as the default configuration for the form.
 */
export class Form extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "appId" })
  appId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "cta" })
  @Type(() => FormCTA)
  cta?: FormCTA;

  @SpeakeasyMetadata()
  @Expose({ name: "dataType" })
  @Type(() => FormDataTypeConfig)
  dataType: FormDataTypeConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "environmentName" })
  environmentName: string;

  @SpeakeasyMetadata({ elemType: FieldConfig })
  @Expose({ name: "fields" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, FieldConfig> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], FieldConfig);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  fields: Record<string, FieldConfig>;

  @SpeakeasyMetadata()
  @Expose({ name: "formActionType" })
  formActionType: FormActionTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  @SpeakeasyMetadata()
  @Expose({ name: "schemaVersion" })
  schemaVersion: string;

  @SpeakeasyMetadata({ elemType: SectionalElement })
  @Expose({ name: "sectionalElements" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, SectionalElement> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], SectionalElement);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  sectionalElements: Record<string, SectionalElement>;

  @SpeakeasyMetadata()
  @Expose({ name: "style" })
  @Type(() => FormStyle)
  style: FormStyle;

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;
}
