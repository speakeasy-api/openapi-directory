// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// InviteUserRequestMfaTypeEnum - <p>The MFA type that the user will use</p>
// <p>The type may be conditional on the role(s) the user has</p>
type InviteUserRequestMfaTypeEnum string

const (
	InviteUserRequestMfaTypeEnumSms     InviteUserRequestMfaTypeEnum = "SMS"
	InviteUserRequestMfaTypeEnumYubikey InviteUserRequestMfaTypeEnum = "YUBIKEY"
	InviteUserRequestMfaTypeEnumTotp    InviteUserRequestMfaTypeEnum = "TOTP"
)

func (e *InviteUserRequestMfaTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SMS":
		fallthrough
	case "YUBIKEY":
		fallthrough
	case "TOTP":
		*e = InviteUserRequestMfaTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InviteUserRequestMfaTypeEnum: %s", s)
	}
}

// InviteUserRequest - Details of User to invite
type InviteUserRequest struct {
	// the email address of the invited user
	Email string `json:"email"`
	// The payorId or null if the user is not a payor user
	//
	EntityID  *string `json:"entityId,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	// <p>The MFA type that the user will use</p>
	// <p>The type may be conditional on the role(s) the user has</p>
	//
	MfaType InviteUserRequestMfaTypeEnum `json:"mfaType"`
	// The main contact number for the user
	//
	PrimaryContactNumber string `json:"primaryContactNumber"`
	// The role(s) for the user
	// The role must exist
	// The role can be a custom role or a system role but the invoker must have the permissions to assign the role
	// System roles are: backoffice.admin, payor.master_admin, payor.admin, payor.support
	//
	Roles []string `json:"roles"`
	// The secondary contact number for the user
	//
	SecondaryContactNumber *string `json:"secondaryContactNumber,omitempty"`
	// The phone number of a device that the user can receive sms messages on
	//
	SmsNumber string `json:"smsNumber"`
	// Optional property that MUST be suppied when manually verifying a user
	// The user's smsNumber is registered via a separate endpoint and an OTP sent to them
	//
	VerificationCode *string `json:"verificationCode,omitempty"`
}
