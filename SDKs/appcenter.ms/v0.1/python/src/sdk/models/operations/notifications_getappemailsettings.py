"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class NotificationsGetAppEmailSettingsSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclasses.dataclass
class NotificationsGetAppEmailSettingsRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    
class NotificationsGetAppEmailSettingsDefaultApplicationJSONCodeEnum(str, Enum):
    r"""The status code return by the API. It can be 400 or 404 or 409 or 500."""
    FOUR_HUNDRED = '400'
    FOUR_HUNDRED_AND_FOUR = '404'
    FOUR_HUNDRED_AND_NINE = '409'
    FIVE_HUNDRED = '500'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NotificationsGetAppEmailSettingsDefaultApplicationJSON:
    r"""Generic result for any alerting API operation"""
    
    code: NotificationsGetAppEmailSettingsDefaultApplicationJSONCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""The status code return by the API. It can be 400 or 404 or 409 or 500."""  
    request_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_id') }})
    r"""Unique request identifier for tracking"""  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""The reason for the request failed"""  
    
class NotificationsGetAppEmailSettings200ApplicationJSONSettingsDefaultValueEnum(str, Enum):
    r"""Default frequency of event"""
    DISABLED = 'Disabled'
    INDIVIDUAL = 'Individual'
    DAILY = 'Daily'
    DAILY_AND_INDIVIDUAL = 'DailyAndIndividual'

class NotificationsGetAppEmailSettings200ApplicationJSONSettingsEventTypeEnum(str, Enum):
    r"""Event Name"""
    CRASH_NEW_CRASH_GROUP_CREATED = 'crash_newCrashGroupCreated'

class NotificationsGetAppEmailSettings200ApplicationJSONSettingsValueEnum(str, Enum):
    r"""Frequency of event"""
    DISABLED = 'Disabled'
    INDIVIDUAL = 'Individual'
    DAILY = 'Daily'
    DAILY_AND_INDIVIDUAL = 'DailyAndIndividual'
    DEFAULT = 'Default'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NotificationsGetAppEmailSettings200ApplicationJSONSettings:
    r"""Event Setting"""
    
    event_type: NotificationsGetAppEmailSettings200ApplicationJSONSettingsEventTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event_type') }})
    r"""Event Name"""  
    value: NotificationsGetAppEmailSettings200ApplicationJSONSettingsValueEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""Frequency of event"""  
    default_value: Optional[NotificationsGetAppEmailSettings200ApplicationJSONSettingsDefaultValueEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_value'), 'exclude': lambda f: f is None }})
    r"""Default frequency of event"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NotificationsGetAppEmailSettings200ApplicationJSON:
    r"""Generic result for any alerting API operation"""
    
    enabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled') }})
    r"""Allows to forcefully disable emails on app or user level"""  
    request_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_id') }})
    r"""Unique request identifier for tracking"""  
    settings: list[NotificationsGetAppEmailSettings200ApplicationJSONSettings] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settings') }})
    r"""The settings the user has for the app"""  
    user_enabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_enabled') }})
    r"""A flag indicating if settings are enabled at user/global level"""  
    app_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appId'), 'exclude': lambda f: f is None }})
    r"""Application ID"""  
    e_tag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eTag'), 'exclude': lambda f: f is None }})
    r"""The ETag of the entity"""  
    user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userId'), 'exclude': lambda f: f is None }})
    r"""The unique id (UUID) of the user"""  
    

@dataclasses.dataclass
class NotificationsGetAppEmailSettingsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    notifications_get_app_email_settings_200_application_json_object: Optional[NotificationsGetAppEmailSettings200ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    notifications_get_app_email_settings_default_application_json_object: Optional[NotificationsGetAppEmailSettingsDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error code with reason"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    