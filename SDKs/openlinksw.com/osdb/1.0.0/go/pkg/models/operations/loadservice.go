// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// LoadServiceRequestBody - Service to register with OSDB
type LoadServiceRequestBody struct {
	// The URL of the resource containing the service description to load.
	ServiceDescriptionURL string `json:"service_description_url"`
	// Service ID to be used to uniquely identify the service. (Optional: Required for anonymous services or to override the service name in the service description.)
	ServiceMoniker *string `json:"service_moniker,omitempty"`
}

type LoadService200ApplicationJSONStatusEnum string

const (
	LoadService200ApplicationJSONStatusEnumSuccess LoadService200ApplicationJSONStatusEnum = "success"
)

func (e LoadService200ApplicationJSONStatusEnum) ToPointer() *LoadService200ApplicationJSONStatusEnum {
	return &e
}

func (e *LoadService200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		*e = LoadService200ApplicationJSONStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoadService200ApplicationJSONStatusEnum: %v", v)
	}
}

// LoadService200ApplicationJSON - loadService response
type LoadService200ApplicationJSON struct {
	// The path of the REST API method
	API string `json:"api"`
	// The name of the REST API method
	Method string `json:"method"`
	// Confirmation message
	Response string                                  `json:"response"`
	Status   LoadService200ApplicationJSONStatusEnum `json:"status"`
}

type LoadServiceResponse struct {
	ContentType string
	// Error response
	ErrorModel  *shared.ErrorModel
	StatusCode  int
	RawResponse *http.Response
	// loadService response
	LoadService200ApplicationJSONObject *LoadService200ApplicationJSON
}
