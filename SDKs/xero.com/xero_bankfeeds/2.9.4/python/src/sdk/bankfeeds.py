"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class BankFeeds:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_feed_connections(self, request: operations.CreateFeedConnectionsRequest, security: operations.CreateFeedConnectionsSecurity) -> operations.CreateFeedConnectionsResponse:
        r"""Create one or more new feed connection
        By passing in the FeedConnections array object in the body, you can create one or more new feed connections
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/FeedConnections'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "feed_connections", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateFeedConnectionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FeedConnections])
                res.feed_connections = out
        elif http_res.status_code == 400:
            pass
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def create_statements(self, request: operations.CreateStatementsRequest, security: operations.CreateStatementsSecurity) -> operations.CreateStatementsResponse:
        r"""Creates one or more new statements"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Statements'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "statements", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateStatementsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Statements])
                res.statements = out
        elif http_res.status_code in [400, 409, 413, 422, 500]:
            if utils.match_content_type(content_type, 'application/problem+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Statements])
                res.statements = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/problem+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def delete_feed_connections(self, request: operations.DeleteFeedConnectionsRequest, security: operations.DeleteFeedConnectionsSecurity) -> operations.DeleteFeedConnectionsResponse:
        r"""Delete an existing feed connection
        By passing in FeedConnections array object in the body, you can delete a feed connection.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/FeedConnections/DeleteRequests'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "feed_connections", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteFeedConnectionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FeedConnections])
                res.feed_connections = out
        elif http_res.status_code == 400:
            pass

        return res

    def get_feed_connection(self, request: operations.GetFeedConnectionRequest, security: operations.GetFeedConnectionSecurity) -> operations.GetFeedConnectionResponse:
        r"""Retrieve single feed connection based on a unique id provided
        By passing in a FeedConnection Id options, you can search for matching feed connections
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFeedConnectionRequest, base_url, '/FeedConnections/{id}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFeedConnectionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FeedConnection])
                res.feed_connection = out
        elif http_res.status_code == 400:
            pass

        return res

    def get_feed_connections(self, request: operations.GetFeedConnectionsRequest, security: operations.GetFeedConnectionsSecurity) -> operations.GetFeedConnectionsResponse:
        r"""Searches for feed connections
        By passing in the appropriate options, you can search for available feed connections in the system.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/FeedConnections'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetFeedConnectionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFeedConnectionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FeedConnections])
                res.feed_connections = out
        elif http_res.status_code == 400:
            pass

        return res

    def get_statement(self, request: operations.GetStatementRequest, security: operations.GetStatementSecurity) -> operations.GetStatementResponse:
        r"""Retrieve single statement based on unique id provided
        By passing in a statement id, you can search for matching statements
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetStatementRequest, base_url, '/Statements/{statementID}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetStatementRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetStatementResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Statement])
                res.statement = out
        elif http_res.status_code == 404:
            pass

        return res

    def get_statements(self, request: operations.GetStatementsRequest, security: operations.GetStatementsSecurity) -> operations.GetStatementsResponse:
        r"""Retrieve all statements
        By passing in parameters, you can search for matching statements
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Statements'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetStatementsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetStatementsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Statements])
                res.statements = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/problem+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Statements])
                res.statements = out

        return res

    