"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class ProxyGetPaymentGatewayStateEnum(str, Enum):
    r"""The status of the payment in the gateway; use for reconciliation."""
    MARKED_FOR_SUBMISSION = 'MarkedForSubmission'
    SUBMITTED = 'Submitted'
    SETTLED = 'Settled'
    NOT_SUBMITTED = 'NotSubmitted'
    FAILED_TO_SETTLE = 'FailedToSettle'

class ProxyGetPaymentSourceEnum(str, Enum):
    r"""How the payment was created, whether through the API, manually, import, or payment run."""
    PAYMENT_RUN = 'PaymentRun'
    IMPORT = 'Import'
    MANUALLY = 'Manually'
    API = 'API'

class ProxyGetPaymentStatusEnum(str, Enum):
    r"""The status of the payment in Zuora. The value depends on the type of payments.
    
    - If you have the Invoice Settlement feature disabled, for electronic payments, the status can be `Processed`, `Processing`, `Error`, or `Voided`. For external payments, the status can be `Processed` or `Canceled`.
    - If you have the Invoice Settlement feature enabled, for electronic payments, the status can be `Processed`, `Processing`, `Error`, or `Canceled`. For external payments, the status can be `Processed` or `Canceled`.
    """
    PROCESSED = 'Processed'
    ERROR = 'Error'
    VOIDED = 'Voided'
    CANCELED = 'Canceled'

class ProxyGetPaymentTransferredToAccountingEnum(str, Enum):
    r"""Indicates if the payment was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite."""
    PROCESSING = 'Processing'
    YES = 'Yes'
    ERROR = 'Error'
    IGNORE = 'Ignore'

class ProxyGetPaymentTypeEnum(str, Enum):
    r"""The type of the payment, whether the payment is external or electronic."""
    EXTERNAL = 'External'
    ELECTRONIC = 'Electronic'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProxyGetPayment:
    r"""Container for custom fields of a Payment object."""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountId'), 'exclude': lambda f: f is None }})
    r"""The unique account ID for the customer that the payment is for."""  
    accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountingCode'), 'exclude': lambda f: f is None }})
    r"""The accounting code for the payment. Accounting codes group transactions that contain similar accounting attributes."""  
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Amount'), 'exclude': lambda f: f is None }})
    r"""The amount of the payment."""  
    applied_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AppliedAmount'), 'exclude': lambda f: f is None }})
    r"""The applied amount of the payment.
    
    **Note**: This field is only available if you have the Invoice Settlement feature enabled.
    """  
    applied_credit_balance_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AppliedCreditBalanceAmount'), 'exclude': lambda f: f is None }})
    r"""If you have the Invoice Settlement feature disabled, the value of this field is the amount of the payment to apply to a credit balance.
    
    If you have the Invoice Settlement feature enabled, the value of this field returned in the response is `0` for the payments that are created after the enablement.
    """  
    auth_transaction_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuthTransactionId'), 'exclude': lambda f: f is None }})
    r"""The authorization transaction ID from the payment gateway."""  
    bank_identification_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BankIdentificationNumber'), 'exclude': lambda f: f is None }})
    r"""The first six digits of the credit card or debit card used for the payment, when applicable."""  
    cancelled_on: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CancelledOn'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time when the payment was canceled."""  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Comment'), 'exclude': lambda f: f is None }})
    r"""Additional information related to the payment."""  
    created_by_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedById'), 'exclude': lambda f: f is None }})
    r"""The ID of the Zuora user who created the payment."""  
    created_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time when the payment was created."""  
    effective_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EffectiveDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the payment takes effect."""  
    gateway: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Gateway'), 'exclude': lambda f: f is None }})
    r"""The name of the gateway instance that processes the payment."""  
    gateway_order_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GatewayOrderId'), 'exclude': lambda f: f is None }})
    r"""A merchant-specified natural key value that can be passed to the electronic payment gateway when a payment is created. If not specified, the payment number will be passed in instead."""  
    gateway_response: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GatewayResponse'), 'exclude': lambda f: f is None }})
    r"""The message returned from the payment gateway for the payment. This message is gateway-dependent."""  
    gateway_response_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GatewayResponseCode'), 'exclude': lambda f: f is None }})
    r"""The code returned from the payment gateway for the payment. This code is gateway-dependent."""  
    gateway_state: Optional[ProxyGetPaymentGatewayStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GatewayState'), 'exclude': lambda f: f is None }})
    r"""The status of the payment in the gateway; use for reconciliation."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})
    r"""The unique ID of a payment. For example, 2c92c095592623ea01596621ada84352."""  
    integration_id_ns: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IntegrationId__NS'), 'exclude': lambda f: f is None }})
    r"""ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265)."""  
    integration_status_ns: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IntegrationStatus__NS'), 'exclude': lambda f: f is None }})
    r"""Status of the payment's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265)."""  
    marked_for_submission_on: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MarkedForSubmissionOn'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time when a payment was marked and waiting for batch submission to the payment process."""  
    origin_ns: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Origin__NS'), 'exclude': lambda f: f is None }})
    r"""Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265)."""  
    payment_method_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentMethodId'), 'exclude': lambda f: f is None }})
    r"""The ID of the payment method used for the payment."""  
    payment_method_snapshot_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentMethodSnapshotId'), 'exclude': lambda f: f is None }})
    r"""The unique ID of the payment method snapshot which is a copy of the particular payment method used in a transaction."""  
    payment_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentNumber'), 'exclude': lambda f: f is None }})
    r"""The unique identification number of the payment. For example, P-00000028."""  
    reference_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReferenceId'), 'exclude': lambda f: f is None }})
    r"""The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments."""  
    refund_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RefundAmount'), 'exclude': lambda f: f is None }})
    r"""The amount of the payment that is refunded. The value of this field is `0` if no refund is made against the payment."""  
    second_payment_reference_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecondPaymentReferenceId'), 'exclude': lambda f: f is None }})
    r"""The transaction ID returned by the payment gateway if there is an additional transaction for the payment. Use this field to reconcile payments between your gateway and Zuora Payments."""  
    settled_on: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SettledOn'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time when the payment was settled in the payment processor. This field is used by the Spectrum gateway only and not applicable to other gateways."""  
    soft_descriptor: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SoftDescriptor'), 'exclude': lambda f: f is None }})
    r"""A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi."""  
    soft_descriptor_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SoftDescriptorPhone'), 'exclude': lambda f: f is None }})
    r"""A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi."""  
    source: Optional[ProxyGetPaymentSourceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Source'), 'exclude': lambda f: f is None }})
    r"""How the payment was created, whether through the API, manually, import, or payment run."""  
    source_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourceName'), 'exclude': lambda f: f is None }})
    r"""The name of the source. The value is a Payment Run number or a file name."""  
    status: Optional[ProxyGetPaymentStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})
    r"""The status of the payment in Zuora. The value depends on the type of payments.
    
    - If you have the Invoice Settlement feature disabled, for electronic payments, the status can be `Processed`, `Processing`, `Error`, or `Voided`. For external payments, the status can be `Processed` or `Canceled`.
    - If you have the Invoice Settlement feature enabled, for electronic payments, the status can be `Processed`, `Processing`, `Error`, or `Canceled`. For external payments, the status can be `Processed` or `Canceled`.
    """  
    submitted_on: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubmittedOn'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time when the payment was submitted."""  
    sync_date_ns: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SyncDate__NS'), 'exclude': lambda f: f is None }})
    r"""Date when the payment was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265)."""  
    transaction_ns: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Transaction__NS'), 'exclude': lambda f: f is None }})
    r"""Related transaction in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265)."""  
    transferred_to_accounting: Optional[ProxyGetPaymentTransferredToAccountingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TransferredToAccounting'), 'exclude': lambda f: f is None }})
    r"""Indicates if the payment was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite."""  
    type: Optional[ProxyGetPaymentTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type'), 'exclude': lambda f: f is None }})
    r"""The type of the payment, whether the payment is external or electronic."""  
    unapplied_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UnappliedAmount'), 'exclude': lambda f: f is None }})
    r"""The unapplied amount of the payment.
    
    **Note**: This field is only available if you have the Invoice Settlement feature enabled.
    """  
    updated_by_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdatedById'), 'exclude': lambda f: f is None }})
    r"""The ID of the Zuora user who last updated the payment."""  
    updated_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdatedDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time when the payment was last updated."""  
    