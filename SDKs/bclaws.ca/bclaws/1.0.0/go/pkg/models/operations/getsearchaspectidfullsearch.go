// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetSearchAspectIDFullsearchAspectIDEnum - The identifier of the 'aspect' (content group) to search
type GetSearchAspectIDFullsearchAspectIDEnum string

const (
	GetSearchAspectIDFullsearchAspectIDEnumComplete GetSearchAspectIDFullsearchAspectIDEnum = "complete"
	GetSearchAspectIDFullsearchAspectIDEnumCorpreg  GetSearchAspectIDFullsearchAspectIDEnum = "corpreg"
	GetSearchAspectIDFullsearchAspectIDEnumBcgaz1   GetSearchAspectIDFullsearchAspectIDEnum = "bcgaz1"
	GetSearchAspectIDFullsearchAspectIDEnumBcgaz2   GetSearchAspectIDFullsearchAspectIDEnum = "bcgaz2"
	GetSearchAspectIDFullsearchAspectIDEnumOic      GetSearchAspectIDFullsearchAspectIDEnum = "oic"
	GetSearchAspectIDFullsearchAspectIDEnumPsl      GetSearchAspectIDFullsearchAspectIDEnum = "psl"
	GetSearchAspectIDFullsearchAspectIDEnumEcb      GetSearchAspectIDFullsearchAspectIDEnum = "ecb"
	GetSearchAspectIDFullsearchAspectIDEnumHscr     GetSearchAspectIDFullsearchAspectIDEnum = "hscr"
	GetSearchAspectIDFullsearchAspectIDEnumArchOic  GetSearchAspectIDFullsearchAspectIDEnum = "arch_oic"
)

func (e *GetSearchAspectIDFullsearchAspectIDEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "complete":
		fallthrough
	case "corpreg":
		fallthrough
	case "bcgaz1":
		fallthrough
	case "bcgaz2":
		fallthrough
	case "oic":
		fallthrough
	case "psl":
		fallthrough
	case "ecb":
		fallthrough
	case "hscr":
		fallthrough
	case "arch_oic":
		*e = GetSearchAspectIDFullsearchAspectIDEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSearchAspectIDFullsearchAspectIDEnum: %s", s)
	}
}

type GetSearchAspectIDFullsearchRequest struct {
	// The identifier of the 'aspect' (content group) to search
	AspectID GetSearchAspectIDFullsearchAspectIDEnum `pathParam:"style=simple,explode=false,name=aspectId"`
	// last hit (end index)
	E int64 `queryParam:"style=form,explode=true,name=e"`
	// length of fragment snippets (< 200)
	LFrag int64 `queryParam:"style=form,explode=true,name=lFrag"`
	// number of fragment snippets to return (< 10)
	NFrag int64 `queryParam:"style=form,explode=true,name=nFrag"`
	// query term
	Q string `queryParam:"style=form,explode=true,name=q"`
	// first hit (start index)
	S string `queryParam:"style=form,explode=true,name=s"`
}

type GetSearchAspectIDFullsearchResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
