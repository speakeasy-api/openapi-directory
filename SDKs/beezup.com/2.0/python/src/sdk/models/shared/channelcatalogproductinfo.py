"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import channelcatalogproductinfolinks as shared_channelcatalogproductinfolinks
from ..shared import productoverridewithcatalogvalue as shared_productoverridewithcatalogvalue
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChannelCatalogProductInfo:
    r"""The channel catalog product information"""
    
    disabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disabled') }})
    r"""Indicates if the product has been disabled or not"""  
    excluded: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excluded') }})
    r"""Indicates if the product has been excluded by a exclusion filter"""  
    links: shared_channelcatalogproductinfolinks.ChannelCatalogProductInfoLinks = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links') }})
    r"""Indicates the differents actions you can do on a channel product"""  
    overrides: dict[str, shared_productoverridewithcatalogvalue.ProductOverrideWithCatalogValue] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('overrides') }})
    r"""The key is the channel column identifier"""  
    product_exists: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productExists') }})
    r"""Indicates if the product still exists in your catalog"""  
    product_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productId') }})
    r"""The product identifier"""  
    product_sku: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productSku') }})
    r"""The product SKU"""  
    product_title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productTitle') }})
    r"""The product tile"""  
    uncategorized: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uncategorized') }})
    r"""Indicates if the product's category has been NOT mapped to a channel category"""  
    excluded_by: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludedBy'), 'exclude': lambda f: f is None }})  
    product_image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productImageUrl'), 'exclude': lambda f: f is None }})
    r"""The product image Url"""  
    