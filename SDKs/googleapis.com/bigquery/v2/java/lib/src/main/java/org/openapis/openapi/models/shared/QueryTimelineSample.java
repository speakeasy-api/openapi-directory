/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class QueryTimelineSample {
    /**
     * Total number of units currently being processed by workers. This does not correspond directly to slot usage. This is the largest value observed since the last sample.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("activeUnits")
    public String activeUnits;

    public QueryTimelineSample withActiveUnits(String activeUnits) {
        this.activeUnits = activeUnits;
        return this;
    }
    
    /**
     * Total parallel units of work completed by this query.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completedUnits")
    public String completedUnits;

    public QueryTimelineSample withCompletedUnits(String completedUnits) {
        this.completedUnits = completedUnits;
        return this;
    }
    
    /**
     * Milliseconds elapsed since the start of query execution.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("elapsedMs")
    public String elapsedMs;

    public QueryTimelineSample withElapsedMs(String elapsedMs) {
        this.elapsedMs = elapsedMs;
        return this;
    }
    
    /**
     * Units of work that can be scheduled immediately. Providing additional slots for these units of work will speed up the query, provided no other query in the reservation needs additional slots.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("estimatedRunnableUnits")
    public String estimatedRunnableUnits;

    public QueryTimelineSample withEstimatedRunnableUnits(String estimatedRunnableUnits) {
        this.estimatedRunnableUnits = estimatedRunnableUnits;
        return this;
    }
    
    /**
     * Total units of work remaining for the query. This number can be revised (increased or decreased) while the query is running.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pendingUnits")
    public String pendingUnits;

    public QueryTimelineSample withPendingUnits(String pendingUnits) {
        this.pendingUnits = pendingUnits;
        return this;
    }
    
    /**
     * Cumulative slot-ms consumed by the query.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalSlotMs")
    public String totalSlotMs;

    public QueryTimelineSample withTotalSlotMs(String totalSlotMs) {
        this.totalSlotMs = totalSlotMs;
        return this;
    }
    
    public QueryTimelineSample(){}
}
