"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetPaymentDetailsRequest:
    
    payment_uuid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'paymentUuid', 'style': 'simple', 'explode': False }})  
    
class GetPaymentDetailsPaymentRequestCurrencyCodeEnum(str, Enum):
    r"""The three letter code for the currency - either `EUR` or `GBP`."""
    EUR = 'EUR'
    GBP = 'GBP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPaymentDetailsPaymentRequestCurrency:
    r"""The currency."""
    
    code: Optional[GetPaymentDetailsPaymentRequestCurrencyCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""The three letter code for the currency - either `EUR` or `GBP`."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The name of the currency"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPaymentDetailsPaymentRequestOrderDetails:
    
    comment1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment1'), 'exclude': lambda f: f is None }})
    r"""This is your own comment for the transaction."""  
    comment2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment2'), 'exclude': lambda f: f is None }})
    r"""This is your own comment for the transaction."""  
    customer_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerNumber'), 'exclude': lambda f: f is None }})
    r"""Use this field to store a customer number for the transaction (for example)."""  
    delivery_address_line1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryAddressLine1'), 'exclude': lambda f: f is None }})
    r"""The first line of the delivery address."""  
    delivery_address_line2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryAddressLine2'), 'exclude': lambda f: f is None }})
    r"""The second line of the delivery address."""  
    delivery_city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryCity'), 'exclude': lambda f: f is None }})
    r"""Delivery address city"""  
    delivery_country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryCountry'), 'exclude': lambda f: f is None }})
    r"""2-digit code for the country"""  
    delivery_post_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryPostCode'), 'exclude': lambda f: f is None }})
    r"""Delivery address post code"""  
    merchant_customer_identification: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantCustomerIdentification'), 'exclude': lambda f: f is None }})
    r"""This is a reference you use to uniquely identify each of your customers."""  
    merchant_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantNumber'), 'exclude': lambda f: f is None }})
    r"""Your Merchant Number (if applicable)."""  
    order_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderId'), 'exclude': lambda f: f is None }})
    r"""Use this field to store the order id for the transaction. The Order Id cannot be set unless the `maxNumberPayments` is 1."""  
    product_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productId'), 'exclude': lambda f: f is None }})
    r"""Use this field to store a product id for the transaction (for example)."""  
    variable_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('variableReference'), 'exclude': lambda f: f is None }})
    r"""Use this field to store any other reference for the transaction (for example, a phone number)."""  
    
class GetPaymentDetailsPaymentRequestStatusEnum(str, Enum):
    r"""The status of the transaction"""
    AWAITING_AUTHORISATION = 'AWAITING_AUTHORISATION'
    AUTHORISED = 'AUTHORISED'
    AWAITING_MULTI_AUTHORISATION = 'AWAITING_MULTI_AUTHORISATION'
    NOT_AUTHORISED = 'NOT_AUTHORISED'
    PAID = 'PAID'
    REJECTED = 'REJECTED'
    ACCEPTED = 'ACCEPTED'
    RECEIVED = 'RECEIVED'

class GetPaymentDetailsPaymentRequestTransactionTypeEnum(str, Enum):
    r"""The type of payment request payment"""
    REFUND_REQUEST = 'REFUND_REQUEST'
    PAYMENT = 'PAYMENT'

class GetPaymentDetailsPaymentRequestTypeEnum(str, Enum):
    r"""The type of Fire Open Payment that was created"""
    OTHER = 'OTHER'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPaymentDetailsPaymentRequest:
    r"""The Payment Request details object"""
    
    additional_fields: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalFields'), 'exclude': lambda f: f is None }})
    r"""These fields will be dispalyed to the payer when using the hosted option. You can choose to display any of `ORDER_ID`, `PRODUCT_ID`, `CUSTOMER_ID`, `CUSTOMER_NUMBER` and `COMMENT2` to the payer."""  
    amount: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""The requested amount to pay. Note the last two digits represent pennies/cents, (e.g., £1.00 = 100)."""  
    collect_fields: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collectFields'), 'exclude': lambda f: f is None }})
    r"""For the hosted option, the payer will be asked to fill in these fields but they will not be mandatory. You can choose to collect any of the payer's `ADDRESS`, `REFERENCE` and/or `COMMENT1`. If you choose to collect these fields from the payer, you cannot set 'delivery’, 'variableReference’ or 'comment1’ fields respectively."""  
    currency: Optional[GetPaymentDetailsPaymentRequestCurrency] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""The currency."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A public facing description of the request. This will be shown to the user when they tap or scan the request."""  
    expiry: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiry'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""This is the expiry of the payment request. After this time, the payment cannot be paid."""  
    ican_to: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('icanTo'), 'exclude': lambda f: f is None }})
    r"""The ican of the account to collect the funds into. Must be one of your fire.com Accounts."""  
    mandatory_fields: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandatoryFields'), 'exclude': lambda f: f is None }})
    r"""For the hosted option, these fields will be madatory for the payer to fill in on the hosted payment page. You can choose to collect any the payer's `ADDRESS`, `REFERENCE` and/or `COMMENT1`. If you choose to collect these fields from the payer, you cannot set 'delivery’, 'variableReference’ or 'comment1’ fields respectively."""  
    max_number_payments: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxNumberPayments'), 'exclude': lambda f: f is None }})
    r"""The max number of people who can pay this request. Must be set to 1 for the ECOMMERCE_GOODS and ECOMMERCE_SERVICES types."""  
    my_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('myRef'), 'exclude': lambda f: f is None }})
    r"""An internal description of the request."""  
    order_details: Optional[GetPaymentDetailsPaymentRequestOrderDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderDetails'), 'exclude': lambda f: f is None }})  
    payment_request_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentRequestCode'), 'exclude': lambda f: f is None }})
    r"""The code that was returned when you created the payment request."""  
    payment_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentUuid'), 'exclude': lambda f: f is None }})
    r"""A unique id for the transaction."""  
    return_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('returnUrl'), 'exclude': lambda f: f is None }})
    r"""The merchant return URL where the customer will be re-directed to with the result of the transaction."""  
    status: Optional[GetPaymentDetailsPaymentRequestStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the transaction"""  
    transaction_type: Optional[GetPaymentDetailsPaymentRequestTransactionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactionType'), 'exclude': lambda f: f is None }})
    r"""The type of payment request payment"""  
    type: Optional[GetPaymentDetailsPaymentRequestTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of Fire Open Payment that was created"""  
    webhook_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webhookUrl'), 'exclude': lambda f: f is None }})
    r"""A URL to be called in the background with the details of the payment after the payment is complete"""  
    

@dataclasses.dataclass
class GetPaymentDetailsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    payment_request: Optional[GetPaymentDetailsPaymentRequest] = dataclasses.field(default=None)
    r"""The Payment Request details object"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    