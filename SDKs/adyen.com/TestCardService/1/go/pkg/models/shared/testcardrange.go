// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TestCardRangeExpiryMonthEnum - Expiry month for the test card range.
//
// Allowed values:
// * JANUARY
// * FEBRUARY
// * MARCH
// * APRIL
// * MAY
// * JUNE
// * JULY
// * AUGUST
// * SEPTEMBER
// * OCTOBER
// * NOVEMBER
// * DECEMBER
type TestCardRangeExpiryMonthEnum string

const (
	TestCardRangeExpiryMonthEnumApril     TestCardRangeExpiryMonthEnum = "APRIL"
	TestCardRangeExpiryMonthEnumAugust    TestCardRangeExpiryMonthEnum = "AUGUST"
	TestCardRangeExpiryMonthEnumDecember  TestCardRangeExpiryMonthEnum = "DECEMBER"
	TestCardRangeExpiryMonthEnumFebruary  TestCardRangeExpiryMonthEnum = "FEBRUARY"
	TestCardRangeExpiryMonthEnumJanuary   TestCardRangeExpiryMonthEnum = "JANUARY"
	TestCardRangeExpiryMonthEnumJuly      TestCardRangeExpiryMonthEnum = "JULY"
	TestCardRangeExpiryMonthEnumJune      TestCardRangeExpiryMonthEnum = "JUNE"
	TestCardRangeExpiryMonthEnumMarch     TestCardRangeExpiryMonthEnum = "MARCH"
	TestCardRangeExpiryMonthEnumMay       TestCardRangeExpiryMonthEnum = "MAY"
	TestCardRangeExpiryMonthEnumNovember  TestCardRangeExpiryMonthEnum = "NOVEMBER"
	TestCardRangeExpiryMonthEnumOctober   TestCardRangeExpiryMonthEnum = "OCTOBER"
	TestCardRangeExpiryMonthEnumSeptember TestCardRangeExpiryMonthEnum = "SEPTEMBER"
)

func (e TestCardRangeExpiryMonthEnum) ToPointer() *TestCardRangeExpiryMonthEnum {
	return &e
}

func (e *TestCardRangeExpiryMonthEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "APRIL":
		fallthrough
	case "AUGUST":
		fallthrough
	case "DECEMBER":
		fallthrough
	case "FEBRUARY":
		fallthrough
	case "JANUARY":
		fallthrough
	case "JULY":
		fallthrough
	case "JUNE":
		fallthrough
	case "MARCH":
		fallthrough
	case "MAY":
		fallthrough
	case "NOVEMBER":
		fallthrough
	case "OCTOBER":
		fallthrough
	case "SEPTEMBER":
		*e = TestCardRangeExpiryMonthEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TestCardRangeExpiryMonthEnum: %v", v)
	}
}

// TestCardRangeThreeDDirectoryServerResponseEnum - 3D Secure server response. It notifies whether the specified card holder is enrolled in a 3D Secure service. Possible values:
//
// * Y (Authentication available)
// * N (Card holder not enrolled/not participating)
// * U (Unable to authenticate)
type TestCardRangeThreeDDirectoryServerResponseEnum string

const (
	TestCardRangeThreeDDirectoryServerResponseEnumN TestCardRangeThreeDDirectoryServerResponseEnum = "N"
	TestCardRangeThreeDDirectoryServerResponseEnumU TestCardRangeThreeDDirectoryServerResponseEnum = "U"
	TestCardRangeThreeDDirectoryServerResponseEnumY TestCardRangeThreeDDirectoryServerResponseEnum = "Y"
)

func (e TestCardRangeThreeDDirectoryServerResponseEnum) ToPointer() *TestCardRangeThreeDDirectoryServerResponseEnum {
	return &e
}

func (e *TestCardRangeThreeDDirectoryServerResponseEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "N":
		fallthrough
	case "U":
		fallthrough
	case "Y":
		*e = TestCardRangeThreeDDirectoryServerResponseEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TestCardRangeThreeDDirectoryServerResponseEnum: %v", v)
	}
}

type TestCardRange struct {
	Address *AvsAddress `json:"address,omitempty"`
	// The name of the card holder, as it appears on the card, for the test card range.
	CardHolderName string `json:"cardHolderName"`
	// The test card range security code.
	//
	// Example: 123
	Cvc *string `json:"cvc,omitempty"`
	// Expiry month for the test card range.
	//
	// Allowed values:
	// * JANUARY
	// * FEBRUARY
	// * MARCH
	// * APRIL
	// * MAY
	// * JUNE
	// * JULY
	// * AUGUST
	// * SEPTEMBER
	// * OCTOBER
	// * NOVEMBER
	// * DECEMBER
	ExpiryMonth TestCardRangeExpiryMonthEnum `json:"expiryMonth"`
	// Expiry year for the test card range.
	//
	// Example: 2020
	ExpiryYear int `json:"expiryYear"`
	// The last test card number in the test card range (inclusive):
	//
	// * Min 6, max 19 digits
	// * BIN compliant
	// Example: 5432 1234 1234 4321
	RangeEnd string `json:"rangeEnd"`
	// The first test card number in the test card range (inclusive):
	//
	// * Min 6, max 19 digits
	// * BIN compliant
	// Example: 5432 1234 1234 1234
	RangeStart string `json:"rangeStart"`
	// 3D Secure server response. It notifies whether the specified card holder is enrolled in a 3D Secure service. Possible values:
	//
	// * Y (Authentication available)
	// * N (Card holder not enrolled/not participating)
	// * U (Unable to authenticate)
	ThreeDDirectoryServerResponse *TestCardRangeThreeDDirectoryServerResponseEnum `json:"threeDDirectoryServerResponse,omitempty"`
	// The password used for 3D Secure authentication.
	ThreeDPassword *string `json:"threeDPassword,omitempty"`
	// The username used for 3D Secure authentication.
	ThreeDUsername *string `json:"threeDUsername,omitempty"`
}
