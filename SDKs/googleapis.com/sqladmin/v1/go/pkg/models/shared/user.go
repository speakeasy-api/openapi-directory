// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UserDualPasswordTypeEnum - Dual password status for the user.
type UserDualPasswordTypeEnum string

const (
	UserDualPasswordTypeEnumDualPasswordTypeUnspecified UserDualPasswordTypeEnum = "DUAL_PASSWORD_TYPE_UNSPECIFIED"
	UserDualPasswordTypeEnumNoModifyDualPassword        UserDualPasswordTypeEnum = "NO_MODIFY_DUAL_PASSWORD"
	UserDualPasswordTypeEnumNoDualPassword              UserDualPasswordTypeEnum = "NO_DUAL_PASSWORD"
	UserDualPasswordTypeEnumDualPassword                UserDualPasswordTypeEnum = "DUAL_PASSWORD"
)

func (e UserDualPasswordTypeEnum) ToPointer() *UserDualPasswordTypeEnum {
	return &e
}

func (e *UserDualPasswordTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DUAL_PASSWORD_TYPE_UNSPECIFIED":
		fallthrough
	case "NO_MODIFY_DUAL_PASSWORD":
		fallthrough
	case "NO_DUAL_PASSWORD":
		fallthrough
	case "DUAL_PASSWORD":
		*e = UserDualPasswordTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserDualPasswordTypeEnum: %v", v)
	}
}

// UserTypeEnum - The user type. It determines the method to authenticate the user during login. The default is the database's built-in user type.
type UserTypeEnum string

const (
	UserTypeEnumBuiltIn                UserTypeEnum = "BUILT_IN"
	UserTypeEnumCloudIamUser           UserTypeEnum = "CLOUD_IAM_USER"
	UserTypeEnumCloudIamServiceAccount UserTypeEnum = "CLOUD_IAM_SERVICE_ACCOUNT"
)

func (e UserTypeEnum) ToPointer() *UserTypeEnum {
	return &e
}

func (e *UserTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILT_IN":
		fallthrough
	case "CLOUD_IAM_USER":
		fallthrough
	case "CLOUD_IAM_SERVICE_ACCOUNT":
		*e = UserTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserTypeEnum: %v", v)
	}
}

// User - A Cloud SQL user resource.
type User struct {
	// Dual password status for the user.
	DualPasswordType *UserDualPasswordTypeEnum `json:"dualPasswordType,omitempty"`
	// This field is deprecated and will be removed from a future version of the API.
	Etag *string `json:"etag,omitempty"`
	// Optional. The host from which the user can connect. For `insert` operations, host defaults to an empty string. For `update` operations, host is specified as part of the request URL. The host name cannot be updated after insertion. For a MySQL instance, it's required; for a PostgreSQL or SQL Server instance, it's optional.
	Host *string `json:"host,omitempty"`
	// The name of the Cloud SQL instance. This does not include the project ID. Can be omitted for `update` because it is already specified on the URL.
	Instance *string `json:"instance,omitempty"`
	// This is always `sql#user`.
	Kind *string `json:"kind,omitempty"`
	// The name of the user in the Cloud SQL instance. Can be omitted for `update` because it is already specified in the URL.
	Name *string `json:"name,omitempty"`
	// The password for the user.
	Password *string `json:"password,omitempty"`
	// User level password validation policy.
	PasswordPolicy *UserPasswordValidationPolicy `json:"passwordPolicy,omitempty"`
	// The project ID of the project containing the Cloud SQL database. The Google apps domain is prefixed if applicable. Can be omitted for `update` because it is already specified on the URL.
	Project *string `json:"project,omitempty"`
	// Represents a Sql Server user on the Cloud SQL instance.
	SqlserverUserDetails *SQLServerUserDetails `json:"sqlserverUserDetails,omitempty"`
	// The user type. It determines the method to authenticate the user during login. The default is the database's built-in user type.
	Type *UserTypeEnum `json:"type,omitempty"`
}
