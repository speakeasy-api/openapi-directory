/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PricingConfiguration - OK
 */
public class PricingConfiguration {
    /**
     * Defines if access to the Pricing APIs is blocked for external requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blockAccount")
    public Boolean blockAccount;
    public PricingConfiguration withBlockAccount(Boolean blockAccount) {
        this.blockAccount = blockAccount;
        return this;
    }
    
    /**
     * Array with all blocked routes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blockedRoutes")
    public String[] blockedRoutes;
    public PricingConfiguration withBlockedRoutes(String[] blockedRoutes) {
        this.blockedRoutes = blockedRoutes;
        return this;
    }
    
    /**
     * Account default markup.
     */
    @JsonProperty("defaultMarkup")
    public Integer defaultMarkup;
    public PricingConfiguration withDefaultMarkup(Integer defaultMarkup) {
        this.defaultMarkup = defaultMarkup;
        return this;
    }
    
    /**
     * Defines if the account has migrated to Pricing V2.
     */
    @JsonProperty("hasMigrated")
    public Boolean hasMigrated;
    public PricingConfiguration withHasMigrated(Boolean hasMigrated) {
        this.hasMigrated = hasMigrated;
        return this;
    }
    
    /**
     * Defines if optional base price is allowed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasOptionalBasePrice")
    public Boolean hasOptionalBasePrice;
    public PricingConfiguration withHasOptionalBasePrice(Boolean hasOptionalBasePrice) {
        this.hasOptionalBasePrice = hasOptionalBasePrice;
        return this;
    }
    
    /**
     * Deprecated. Use the `priceInheritance` field instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasPriceInheritance")
    public Boolean hasPriceInheritance;
    public PricingConfiguration withHasPriceInheritance(Boolean hasPriceInheritance) {
        this.hasPriceInheritance = hasPriceInheritance;
        return this;
    }
    
    /**
     * Pricing V2 migration status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("migrationStatus")
    public String migrationStatus;
    public PricingConfiguration withMigrationStatus(String migrationStatus) {
        this.migrationStatus = migrationStatus;
        return this;
    }
    
    /**
     * Account minimum markup.
     */
    @JsonProperty("minimumMarkups")
    public java.util.Map<String, Integer> minimumMarkups;
    public PricingConfiguration withMinimumMarkups(java.util.Map<String, Integer> minimumMarkups) {
        this.minimumMarkups = minimumMarkups;
        return this;
    }
    
    /**
     * Condition of price inheritance from its parent account. This field can have three possible values: `never` if the store should never inherit prices, `nonexistent` if the store should only inherit prices in case of nonexistent prices for a given product, or `always` if the store should always inherit prices, regardless of its own prices.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priceInheritance")
    public String priceInheritance;
    public PricingConfiguration withPriceInheritance(String priceInheritance) {
        this.priceInheritance = priceInheritance;
        return this;
    }
    
    /**
     * Price Table Limit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priceTableLimit")
    public Long priceTableLimit;
    public PricingConfiguration withPriceTableLimit(Long priceTableLimit) {
        this.priceTableLimit = priceTableLimit;
        return this;
    }
    
    /**
     * The strategy used to get prices when there is more than one option. Possible values: `first`, `highest`, `lowest`. Default: `first`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priceTableSelectionStrategy")
    public String priceTableSelectionStrategy;
    public PricingConfiguration withPriceTableSelectionStrategy(String priceTableSelectionStrategy) {
        this.priceTableSelectionStrategy = priceTableSelectionStrategy;
        return this;
    }
    
    /**
     * Price Variation object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priceVariation")
    public PricingConfigurationPriceVariation priceVariation;
    public PricingConfiguration withPriceVariation(PricingConfigurationPriceVariation priceVariation) {
        this.priceVariation = priceVariation;
        return this;
    }
    
    /**
     * Overrides prices from sellers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sellersToOverride")
    public Object[] sellersToOverride;
    public PricingConfiguration withSellersToOverride(Object[] sellersToOverride) {
        this.sellersToOverride = sellersToOverride;
        return this;
    }
    
    /**
     * Trade Policy Configurations array.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tradePolicyConfigs")
    public PricingConfigurationTradePolicyConfigs[] tradePolicyConfigs;
    public PricingConfiguration withTradePolicyConfigs(PricingConfigurationTradePolicyConfigs[] tradePolicyConfigs) {
        this.tradePolicyConfigs = tradePolicyConfigs;
        return this;
    }
    
}
