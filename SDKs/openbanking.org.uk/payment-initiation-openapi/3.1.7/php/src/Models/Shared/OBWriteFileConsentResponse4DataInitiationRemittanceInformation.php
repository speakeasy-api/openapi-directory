<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * OBWriteFileConsentResponse4DataInitiationRemittanceInformation - Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class OBWriteFileConsentResponse4DataInitiationRemittanceInformation
{
    /**
     * Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
     * 
     * Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
     * If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
     * OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
     * 
     * @var ?string $reference
     */
	#[\JMS\Serializer\Annotation\SerializedName('Reference')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $reference = null;
    
    /**
     * Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
     * 
     * @var ?string $unstructured
     */
	#[\JMS\Serializer\Annotation\SerializedName('Unstructured')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $unstructured = null;
    
	public function __construct()
	{
		$this->reference = null;
		$this->unstructured = null;
	}
}
