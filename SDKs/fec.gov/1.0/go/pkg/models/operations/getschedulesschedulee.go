// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

type GetSchedulesScheduleECandidateOfficeEnum string

const (
	GetSchedulesScheduleECandidateOfficeEnumUnknown GetSchedulesScheduleECandidateOfficeEnum = ""
	GetSchedulesScheduleECandidateOfficeEnumH       GetSchedulesScheduleECandidateOfficeEnum = "H"
	GetSchedulesScheduleECandidateOfficeEnumS       GetSchedulesScheduleECandidateOfficeEnum = "S"
	GetSchedulesScheduleECandidateOfficeEnumP       GetSchedulesScheduleECandidateOfficeEnum = "P"
)

func (e *GetSchedulesScheduleECandidateOfficeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "H":
		fallthrough
	case "S":
		fallthrough
	case "P":
		*e = GetSchedulesScheduleECandidateOfficeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSchedulesScheduleECandidateOfficeEnum: %s", s)
	}
}

type GetSchedulesScheduleESupportOpposeIndicatorEnum string

const (
	GetSchedulesScheduleESupportOpposeIndicatorEnumS GetSchedulesScheduleESupportOpposeIndicatorEnum = "S"
	GetSchedulesScheduleESupportOpposeIndicatorEnumO GetSchedulesScheduleESupportOpposeIndicatorEnum = "O"
)

func (e *GetSchedulesScheduleESupportOpposeIndicatorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "S":
		fallthrough
	case "O":
		*e = GetSchedulesScheduleESupportOpposeIndicatorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSchedulesScheduleESupportOpposeIndicatorEnum: %s", s)
	}
}

type GetSchedulesScheduleEQueryParams struct {
	// API key for https://api.data.gov. Get one at https://api.data.gov/signup.
	//
	APIKey string `queryParam:"style=form,explode=true,name=api_key"`
	// A unique identifier assigned to each candidate registered with the FEC.
	// If a person runs for several offices, that person will have separate candidate IDs for each office.
	//
	CandidateID []string `queryParam:"style=form,explode=true,name=candidate_id"`
	// Federal office candidate runs for: H, S or P
	CandidateOffice []GetSchedulesScheduleECandidateOfficeEnum `queryParam:"style=form,explode=true,name=candidate_office"`
	// Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
	CandidateOfficeDistrict []string `queryParam:"style=form,explode=true,name=candidate_office_district"`
	// US state or territory
	CandidateOfficeState []string `queryParam:"style=form,explode=true,name=candidate_office_state"`
	// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
	CandidateParty []string `queryParam:"style=form,explode=true,name=candidate_party"`
	// A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
	//
	CommitteeID []string `queryParam:"style=form,explode=true,name=committee_id"`
	// Filter records to only those that were applicable to a given
	// two-year period.The cycle begins with an odd year and is named
	// for its ending, even year.
	//
	Cycle []int `queryParam:"style=form,explode=true,name=cycle"`
	// The form where the underlying data comes from, for example, Form 1 would appear as F1:
	//     - F1   Statement of Organization
	//     - F1M  Notification of Multicandidate Status
	//     - F2   Statement of Candidacy
	//     - F3   Report of Receipts and Disbursements for an Authorized Committee
	//     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
	//     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
	//     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
	//     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
	//     - F5   Report of Independent Expenditures Made and Contributions Received
	//     - F6   48 Hour Notice of Contributions/Loans Received
	//     - F7   Report of Communication Costs by Corporations and Membership Organizations
	//     - F8   Debt Settlement Plan
	//     - F9   24 Hour Notice of Disbursements for Electioneering Communications
	//     - F13  Report of Donations Accepted for Inaugural Committee
	//     - F99  Miscellaneous Text
	//     - FRQ  Request for Additional Information
	//
	FilingForm []string `queryParam:"style=form,explode=true,name=filing_form"`
	// An unique identifier for each page where the electronic or paper filing is reported.
	//
	ImageNumber []string `queryParam:"style=form,explode=true,name=image_number"`
	// Record filed as 24- or 48-hour notice.
	//
	IsNotice []bool `queryParam:"style=form,explode=true,name=is_notice"`
	// When sorting by `expenditure_amount`,
	// this is populated with the `expenditure_amount` of the last result.
	// However, you will need to pass the index of that last result to
	// `last_index` to get the next page.
	//
	LastExpenditureAmount *float32 `queryParam:"style=form,explode=true,name=last_expenditure_amount"`
	// When sorting by `expenditure_date`,
	// this is populated with the `expenditure_date` of the last result.
	// However, you will need to pass the index of that last result to
	// `last_index` to get the next page.
	//
	LastExpenditureDate *types.Date `queryParam:"style=form,explode=true,name=last_expenditure_date"`
	// Index of last result from previous page
	LastIndex *int `queryParam:"style=form,explode=true,name=last_index"`
	// When sorting by `office_total_ytd`,
	// this is populated with the `office_total_ytd` of the last result.
	// However, you will need to pass the index of that last result to
	// `last_index` to get the next page.'
	//
	LastOfficeTotalYtd *float32 `queryParam:"style=form,explode=true,name=last_office_total_ytd"`
	// When sorting by `support_oppose_indicator`,
	// this is populated with the `support_oppose_indicator` of the last result.
	// However, you will need to pass the index of that last result to `last_index`
	// to get the next page.'
	//
	LastSupportOpposeIndicator *string `queryParam:"style=form,explode=true,name=last_support_oppose_indicator"`
	// Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.
	LineNumber *string `queryParam:"style=form,explode=true,name=line_number"`
	// Filter for all amounts less than a value.
	MaxAmount *string `queryParam:"style=form,explode=true,name=max_amount"`
	// Maximum date
	MaxDate *types.Date `queryParam:"style=form,explode=true,name=max_date"`
	// Selects all items distributed by this committee before this date
	MaxDisseminationDate *types.Date `queryParam:"style=form,explode=true,name=max_dissemination_date"`
	// Selects all filings received before this date
	//
	MaxFilingDate *types.Date `queryParam:"style=form,explode=true,name=max_filing_date"`
	// Maxium image number of the page where the schedule item is reported
	MaxImageNumber *string `queryParam:"style=form,explode=true,name=max_image_number"`
	// Filter for all amounts greater than a value.
	MinAmount *string `queryParam:"style=form,explode=true,name=min_amount"`
	// Minimum date
	MinDate *types.Date `queryParam:"style=form,explode=true,name=min_date"`
	// Selects all items distributed by this committee after this date
	MinDisseminationDate *types.Date `queryParam:"style=form,explode=true,name=min_dissemination_date"`
	// Selects all filings received after this date
	//
	MinFilingDate *types.Date `queryParam:"style=form,explode=true,name=min_filing_date"`
	// Minium image number of the page where the schedule item is reported
	MinImageNumber *string `queryParam:"style=form,explode=true,name=min_image_number"`
	// The report associated with the transaction is either new or is the most-recently filed amendment. Undetermined version (`null`) is always included.
	//
	MostRecent *bool `queryParam:"style=form,explode=true,name=most_recent"`
	// Name of the entity that received the payment.
	//
	PayeeName []string `queryParam:"style=form,explode=true,name=payee_name"`
	// The number of results returned per page. Defaults to 20.
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// Keyword search for spender name or ID
	//
	QSpender []string `queryParam:"style=form,explode=true,name=q_spender"`
	// Provide a field to sort by. Use `-` for descending order.
	//
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Hide null values on sorted column(s).
	SortHideNull *bool `queryParam:"style=form,explode=true,name=sort_hide_null"`
	// Toggle that filters out all rows having sort column that is non-null
	SortNullOnly *bool `queryParam:"style=form,explode=true,name=sort_null_only"`
	// Toggle that sorts null values last
	SortNullsLast *bool `queryParam:"style=form,explode=true,name=sort_nulls_last"`
	// Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs.
	SupportOpposeIndicator []GetSchedulesScheduleESupportOpposeIndicatorEnum `queryParam:"style=form,explode=true,name=support_oppose_indicator"`
}

type GetSchedulesScheduleERequest struct {
	QueryParams GetSchedulesScheduleEQueryParams
}

type GetSchedulesScheduleEResponse struct {
	ContentType   string
	ScheduleEPage *shared.ScheduleEPage
	StatusCode    int
	RawResponse   *http.Response
}
