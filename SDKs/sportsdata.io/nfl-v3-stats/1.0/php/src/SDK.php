<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - NFL rosters, player stats, team stats, and fantasy stats API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'http://azure-api.sportsdata.io/v3/nfl/stats',
		'https://azure-api.sportsdata.io/v3/nfl/stats',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	private ?Models\Shared\Security $_security;
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client	 
	 * @param Models\Shared\Security|null $security
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, ?Models\Shared\Security $security, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($security !== null) {
			$this->_security = $security;
			$this->_securityClient = Utils\Utils::configureSecurityClient($this->_defaultClient, $this->_security);
		}
		
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Are Games In Progress
     * 
     * Returns <code>true</code> if there is at least one game being played at the time of the request or <code>false</code> if there are none.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AreGamesInProgressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AreGamesInProgressResponse
     */
	public function areGamesInProgress(
        \OpenAPI\OpenAPI\Models\Operations\AreGamesInProgressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AreGamesInProgressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/AreAnyGamesInProgress', \OpenAPI\OpenAPI\Models\Operations\AreGamesInProgressRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AreGamesInProgressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->areGamesInProgress200ApplicationJSONBoolean = $serializer->deserialize((string)$httpResponse->getBody(), 'bool', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Box Score by ScoreID V3
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BoxScoreByScoreidVRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BoxScoreByScoreidVResponse
     */
	public function boxScoreByScoreidV(
        \OpenAPI\OpenAPI\Models\Operations\BoxScoreByScoreidVRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BoxScoreByScoreidVResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/BoxScoreByScoreIDV3/{scoreid}', \OpenAPI\OpenAPI\Models\Operations\BoxScoreByScoreidVRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BoxScoreByScoreidVResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->boxScoreV3 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BoxScoreV3', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Box Score V3
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BoxScoreVRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BoxScoreVResponse
     */
	public function boxScoreV(
        \OpenAPI\OpenAPI\Models\Operations\BoxScoreVRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BoxScoreVResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/BoxScoreV3/{season}/{week}/{hometeam}', \OpenAPI\OpenAPI\Models\Operations\BoxScoreVRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BoxScoreVResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->boxScoreV3 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BoxScoreV3', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Box Scores Delta V3
     * 
     * This method returns all box scores for a given season and week, but only returns player stats that have changed in the last X minutes. You can also filter by type of player stats to include, such as traditional fantasy players, IDP players or all players.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BoxScoresDeltaVRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BoxScoresDeltaVResponse
     */
	public function boxScoresDeltaV(
        \OpenAPI\OpenAPI\Models\Operations\BoxScoresDeltaVRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BoxScoresDeltaVResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/BoxScoresDeltaV3/{season}/{week}/{playerstoinclude}/{minutes}', \OpenAPI\OpenAPI\Models\Operations\BoxScoresDeltaVRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BoxScoresDeltaVResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->boxScoreV3s = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\BoxScoreV3>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Box Scores V3 Simulation
     * 
     * Gets simulated live box scores of NFL games, covering the Conference Championship games on January 21, 2018.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BoxScoresVSimulationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BoxScoresVSimulationResponse
     */
	public function boxScoresVSimulation(
        \OpenAPI\OpenAPI\Models\Operations\BoxScoresVSimulationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BoxScoresVSimulationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/SimulatedBoxScoresV3/{numberofplays}', \OpenAPI\OpenAPI\Models\Operations\BoxScoresVSimulationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BoxScoresVSimulationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->boxScoreV3s = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\BoxScoreV3>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Bye Weeks
     * 
     * Get bye weeks for the teams during a specified NFL season. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ByeWeeksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ByeWeeksResponse
     */
	public function byeWeeks(
        \OpenAPI\OpenAPI\Models\Operations\ByeWeeksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ByeWeeksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Byes/{season}', \OpenAPI\OpenAPI\Models\Operations\ByeWeeksRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ByeWeeksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->byes = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Bye>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Daily Fantasy Players
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DailyFantasyPlayersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DailyFantasyPlayersResponse
     */
	public function dailyFantasyPlayers(
        \OpenAPI\OpenAPI\Models\Operations\DailyFantasyPlayersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DailyFantasyPlayersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/DailyFantasyPlayers/{date}', \OpenAPI\OpenAPI\Models\Operations\DailyFantasyPlayersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DailyFantasyPlayersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dailyFantasyPlayers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\DailyFantasyPlayer>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Daily Fantasy Scoring
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DailyFantasyScoringRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DailyFantasyScoringResponse
     */
	public function dailyFantasyScoring(
        \OpenAPI\OpenAPI\Models\Operations\DailyFantasyScoringRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DailyFantasyScoringResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/DailyFantasyPoints/{date}', \OpenAPI\OpenAPI\Models\Operations\DailyFantasyScoringRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DailyFantasyScoringResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dailyFantasyScorings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\DailyFantasyScoring>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * DFS Slates by Date
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfsSlatesByDateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DfsSlatesByDateResponse
     */
	public function dfsSlatesByDate(
        \OpenAPI\OpenAPI\Models\Operations\DfsSlatesByDateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DfsSlatesByDateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/DfsSlatesByDate/{date}', \OpenAPI\OpenAPI\Models\Operations\DfsSlatesByDateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfsSlatesByDateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dfsSlates = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\DfsSlate>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * DFS Slates by Week
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfsSlatesByWeekRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DfsSlatesByWeekResponse
     */
	public function dfsSlatesByWeek(
        \OpenAPI\OpenAPI\Models\Operations\DfsSlatesByWeekRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DfsSlatesByWeekResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/DfsSlatesByWeek/{season}/{week}', \OpenAPI\OpenAPI\Models\Operations\DfsSlatesByWeekRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfsSlatesByWeekResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dfsSlates = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\DfsSlate>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fantasy Defense Game Stats
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FantasyDefenseGameStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FantasyDefenseGameStatsResponse
     */
	public function fantasyDefenseGameStats(
        \OpenAPI\OpenAPI\Models\Operations\FantasyDefenseGameStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FantasyDefenseGameStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/FantasyDefenseByGame/{season}/{week}', \OpenAPI\OpenAPI\Models\Operations\FantasyDefenseGameStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FantasyDefenseGameStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fantasyDefenseGames = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\FantasyDefenseGame>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fantasy Defense Game Stats by Team
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FantasyDefenseGameStatsByTeamRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FantasyDefenseGameStatsByTeamResponse
     */
	public function fantasyDefenseGameStatsByTeam(
        \OpenAPI\OpenAPI\Models\Operations\FantasyDefenseGameStatsByTeamRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FantasyDefenseGameStatsByTeamResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/FantasyDefenseByGameByTeam/{season}/{week}/{team}', \OpenAPI\OpenAPI\Models\Operations\FantasyDefenseGameStatsByTeamRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FantasyDefenseGameStatsByTeamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fantasyDefenseGame = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FantasyDefenseGame', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fantasy Defense Season Stats
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FantasyDefenseSeasonStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FantasyDefenseSeasonStatsResponse
     */
	public function fantasyDefenseSeasonStats(
        \OpenAPI\OpenAPI\Models\Operations\FantasyDefenseSeasonStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FantasyDefenseSeasonStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/FantasyDefenseBySeason/{season}', \OpenAPI\OpenAPI\Models\Operations\FantasyDefenseSeasonStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FantasyDefenseSeasonStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fantasyDefenseSeasons = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\FantasyDefenseSeason>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fantasy Defense Season Stats by Team
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FantasyDefenseSeasonStatsByTeamRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FantasyDefenseSeasonStatsByTeamResponse
     */
	public function fantasyDefenseSeasonStatsByTeam(
        \OpenAPI\OpenAPI\Models\Operations\FantasyDefenseSeasonStatsByTeamRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FantasyDefenseSeasonStatsByTeamResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/FantasyDefenseBySeasonByTeam/{season}/{team}', \OpenAPI\OpenAPI\Models\Operations\FantasyDefenseSeasonStatsByTeamRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FantasyDefenseSeasonStatsByTeamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fantasyDefenseSeason = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FantasyDefenseSeason', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fantasy Player Ownership Percentages (Season-Long)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FantasyPlayerOwnershipPercentagesSeasonLongRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FantasyPlayerOwnershipPercentagesSeasonLongResponse
     */
	public function fantasyPlayerOwnershipPercentagesSeasonLong(
        \OpenAPI\OpenAPI\Models\Operations\FantasyPlayerOwnershipPercentagesSeasonLongRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FantasyPlayerOwnershipPercentagesSeasonLongResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/PlayerOwnership/{season}/{week}', \OpenAPI\OpenAPI\Models\Operations\FantasyPlayerOwnershipPercentagesSeasonLongRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FantasyPlayerOwnershipPercentagesSeasonLongResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerOwnerships = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerOwnership>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fantasy Players with ADP
     * 
     * This method returns a comprehensive list of draftable fantasy football players, including QB, RB, WR, TE, K and DEF.  Players are sorted by ADP (AverageDraftPosition).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FantasyPlayersWithAdpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FantasyPlayersWithAdpResponse
     */
	public function fantasyPlayersWithAdp(
        \OpenAPI\OpenAPI\Models\Operations\FantasyPlayersWithAdpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FantasyPlayersWithAdpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/FantasyPlayers', \OpenAPI\OpenAPI\Models\Operations\FantasyPlayersWithAdpRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FantasyPlayersWithAdpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fantasyPlayers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\FantasyPlayer>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Game Stats by Season (Deprecated, use Team Game Stats instead)
     * 
     * Game stats for a specified season.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GameStatsBySeasonDeprecatedUseTeamGameStatsInsteadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GameStatsBySeasonDeprecatedUseTeamGameStatsInsteadResponse
     */
	public function gameStatsBySeasonDeprecatedUseTeamGameStatsInstead(
        \OpenAPI\OpenAPI\Models\Operations\GameStatsBySeasonDeprecatedUseTeamGameStatsInsteadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GameStatsBySeasonDeprecatedUseTeamGameStatsInsteadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/GameStats/{season}', \OpenAPI\OpenAPI\Models\Operations\GameStatsBySeasonDeprecatedUseTeamGameStatsInsteadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GameStatsBySeasonDeprecatedUseTeamGameStatsInsteadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->games = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Game>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Game Stats by Week (Deprecated, use Team Game Stats instead)
     * 
     * Game stats for a specified season and week.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GameStatsByWeekDeprecatedUseTeamGameStatsInsteadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GameStatsByWeekDeprecatedUseTeamGameStatsInsteadResponse
     */
	public function gameStatsByWeekDeprecatedUseTeamGameStatsInstead(
        \OpenAPI\OpenAPI\Models\Operations\GameStatsByWeekDeprecatedUseTeamGameStatsInsteadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GameStatsByWeekDeprecatedUseTeamGameStatsInsteadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/GameStatsByWeek/{season}/{week}', \OpenAPI\OpenAPI\Models\Operations\GameStatsByWeekDeprecatedUseTeamGameStatsInsteadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GameStatsByWeekDeprecatedUseTeamGameStatsInsteadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->games = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Game>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * IDP Fantasy Players with ADP
     * 
     * This method returns the top 300+ IDP Fantasy Players for the current or upcoming season, ordered by AverageDraftPositionIDP.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdpFantasyPlayersWithAdpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IdpFantasyPlayersWithAdpResponse
     */
	public function idpFantasyPlayersWithAdp(
        \OpenAPI\OpenAPI\Models\Operations\IdpFantasyPlayersWithAdpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IdpFantasyPlayersWithAdpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/FantasyPlayersIDP', \OpenAPI\OpenAPI\Models\Operations\IdpFantasyPlayersWithAdpRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdpFantasyPlayersWithAdpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fantasyPlayers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\FantasyPlayer>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Injuries
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\InjuriesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\InjuriesResponse
     */
	public function injuries(
        \OpenAPI\OpenAPI\Models\Operations\InjuriesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\InjuriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Injuries/{season}/{week}', \OpenAPI\OpenAPI\Models\Operations\InjuriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\InjuriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->injuries = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Injury>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Injuries by Team
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\InjuriesByTeamRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\InjuriesByTeamResponse
     */
	public function injuriesByTeam(
        \OpenAPI\OpenAPI\Models\Operations\InjuriesByTeamRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\InjuriesByTeamResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Injuries/{season}/{week}/{team}', \OpenAPI\OpenAPI\Models\Operations\InjuriesByTeamRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\InjuriesByTeamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->injuries = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Injury>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * League Leaders by Season
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LeagueLeadersBySeasonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LeagueLeadersBySeasonResponse
     */
	public function leagueLeadersBySeason(
        \OpenAPI\OpenAPI\Models\Operations\LeagueLeadersBySeasonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LeagueLeadersBySeasonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/SeasonLeagueLeaders/{season}/{position}/{column}', \OpenAPI\OpenAPI\Models\Operations\LeagueLeadersBySeasonRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LeagueLeadersBySeasonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerSeasons = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerSeason>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * League Leaders by Week
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LeagueLeadersByWeekRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LeagueLeadersByWeekResponse
     */
	public function leagueLeadersByWeek(
        \OpenAPI\OpenAPI\Models\Operations\LeagueLeadersByWeekRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LeagueLeadersByWeekResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/GameLeagueLeaders/{season}/{week}/{position}/{column}', \OpenAPI\OpenAPI\Models\Operations\LeagueLeadersByWeekRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LeagueLeadersByWeekResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerGames = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerGame>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Legacy Box Score
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoreRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoreResponse
     */
	public function legacyBoxScore(
        \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoreRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/BoxScore/{season}/{week}/{hometeam}', \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoreRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->boxScore = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BoxScore', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Legacy Box Scores
     * 
     * This method returns all box scores for a given season and week.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresResponse
     */
	public function legacyBoxScores(
        \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/BoxScores/{season}/{week}', \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->boxScores = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\BoxScore>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Legacy Box Scores Active
     * 
     * This method returns box scores for all games that are either in-progress or have been updated within the last 30 minutes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresActiveRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresActiveResponse
     */
	public function legacyBoxScoresActive(
        \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresActiveRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresActiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/ActiveBoxScores', \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresActiveRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresActiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->boxScores = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\BoxScore>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Legacy Box Scores Delta
     * 
     * This method returns all box scores for a given season and week, but only returns player stats that have changed in the last X minutes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresDeltaRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresDeltaResponse
     */
	public function legacyBoxScoresDelta(
        \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresDeltaRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresDeltaResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/BoxScoresDelta/{season}/{week}/{minutes}', \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresDeltaRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresDeltaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->boxScores = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\BoxScore>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Legacy Box Scores Delta (Current Week)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresDeltaCurrentWeekRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresDeltaCurrentWeekResponse
     */
	public function legacyBoxScoresDeltaCurrentWeek(
        \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresDeltaCurrentWeekRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresDeltaCurrentWeekResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/RecentlyUpdatedBoxScores/{minutes}', \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresDeltaCurrentWeekRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresDeltaCurrentWeekResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->boxScores = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\BoxScore>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Legacy Box Scores Final
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresFinalRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresFinalResponse
     */
	public function legacyBoxScoresFinal(
        \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresFinalRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresFinalResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/FinalBoxScores', \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresFinalRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresFinalResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->boxScores = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\BoxScore>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Legacy Box Scores Live
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresLiveRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresLiveResponse
     */
	public function legacyBoxScoresLive(
        \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresLiveRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresLiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/LiveBoxScores', \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresLiveRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LegacyBoxScoresLiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->boxScores = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\BoxScore>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * News
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NewsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\NewsResponse
     */
	public function news(
        \OpenAPI\OpenAPI\Models\Operations\NewsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\NewsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/News', \OpenAPI\OpenAPI\Models\Operations\NewsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NewsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->news = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\News>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * News by Date
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NewsByDateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\NewsByDateResponse
     */
	public function newsByDate(
        \OpenAPI\OpenAPI\Models\Operations\NewsByDateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\NewsByDateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/NewsByDate/{date}', \OpenAPI\OpenAPI\Models\Operations\NewsByDateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NewsByDateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->news = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\News>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * News by Player
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NewsByPlayerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\NewsByPlayerResponse
     */
	public function newsByPlayer(
        \OpenAPI\OpenAPI\Models\Operations\NewsByPlayerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\NewsByPlayerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/NewsByPlayerID/{playerid}', \OpenAPI\OpenAPI\Models\Operations\NewsByPlayerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NewsByPlayerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->news = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\News>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * News by Team
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NewsByTeamRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\NewsByTeamResponse
     */
	public function newsByTeam(
        \OpenAPI\OpenAPI\Models\Operations\NewsByTeamRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\NewsByTeamResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/NewsByTeam/{team}', \OpenAPI\OpenAPI\Models\Operations\NewsByTeamRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NewsByTeamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->news = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\News>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Details by Available
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByAvailableRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByAvailableResponse
     */
	public function playerDetailsByAvailable(
        \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByAvailableRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByAvailableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Players', \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByAvailableRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByAvailableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->players = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Player>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Details by Free Agents
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByFreeAgentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByFreeAgentsResponse
     */
	public function playerDetailsByFreeAgents(
        \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByFreeAgentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByFreeAgentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/FreeAgents', \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByFreeAgentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByFreeAgentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->players = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Player>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Details by Player
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByPlayerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByPlayerResponse
     */
	public function playerDetailsByPlayer(
        \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByPlayerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByPlayerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Player/{playerid}', \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByPlayerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByPlayerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PlayerDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Details by Rookie Draft Year
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByRookieDraftYearRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByRookieDraftYearResponse
     */
	public function playerDetailsByRookieDraftYear(
        \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByRookieDraftYearRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByRookieDraftYearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Rookies/{season}', \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByRookieDraftYearRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByRookieDraftYearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->players = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Player>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Details by Team
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByTeamRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByTeamResponse
     */
	public function playerDetailsByTeam(
        \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByTeamRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByTeamResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Players/{team}', \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByTeamRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByTeamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerDetail>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Game Logs By Season
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerGameLogsBySeasonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerGameLogsBySeasonResponse
     */
	public function playerGameLogsBySeason(
        \OpenAPI\OpenAPI\Models\Operations\PlayerGameLogsBySeasonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerGameLogsBySeasonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/PlayerGameStatsBySeason/{season}/{playerid}/{numberofgames}', \OpenAPI\OpenAPI\Models\Operations\PlayerGameLogsBySeasonRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerGameLogsBySeasonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerGames = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerGame>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Game Red Zone Stats
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerGameRedZoneStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerGameRedZoneStatsResponse
     */
	public function playerGameRedZoneStats(
        \OpenAPI\OpenAPI\Models\Operations\PlayerGameRedZoneStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerGameRedZoneStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/PlayerGameRedZoneStats/{season}/{week}', \OpenAPI\OpenAPI\Models\Operations\PlayerGameRedZoneStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerGameRedZoneStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerGameRedZones = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerGameRedZone>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Game Red Zone Stats Inside Five
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerGameRedZoneStatsInsideFiveRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerGameRedZoneStatsInsideFiveResponse
     */
	public function playerGameRedZoneStatsInsideFive(
        \OpenAPI\OpenAPI\Models\Operations\PlayerGameRedZoneStatsInsideFiveRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerGameRedZoneStatsInsideFiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/PlayerGameRedZoneInsideFiveStats/{season}/{week}', \OpenAPI\OpenAPI\Models\Operations\PlayerGameRedZoneStatsInsideFiveRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerGameRedZoneStatsInsideFiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerGameRedZones = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerGameRedZone>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Game Red Zone Stats Inside Ten
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerGameRedZoneStatsInsideTenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerGameRedZoneStatsInsideTenResponse
     */
	public function playerGameRedZoneStatsInsideTen(
        \OpenAPI\OpenAPI\Models\Operations\PlayerGameRedZoneStatsInsideTenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerGameRedZoneStatsInsideTenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/PlayerGameRedZoneInsideTenStats/{season}/{week}', \OpenAPI\OpenAPI\Models\Operations\PlayerGameRedZoneStatsInsideTenRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerGameRedZoneStatsInsideTenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerGameRedZones = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerGameRedZone>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Game Stats by Player
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsByPlayerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsByPlayerResponse
     */
	public function playerGameStatsByPlayer(
        \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsByPlayerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsByPlayerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/PlayerGameStatsByPlayerID/{season}/{week}/{playerid}', \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsByPlayerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsByPlayerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerGame = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PlayerGame', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Game Stats by Team
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsByTeamRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsByTeamResponse
     */
	public function playerGameStatsByTeam(
        \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsByTeamRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsByTeamResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/PlayerGameStatsByTeam/{season}/{week}/{team}', \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsByTeamRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsByTeamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerGames = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerGame>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Game Stats by Week
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsByWeekRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsByWeekResponse
     */
	public function playerGameStatsByWeek(
        \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsByWeekRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsByWeekResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/PlayerGameStatsByWeek/{season}/{week}', \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsByWeekRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsByWeekResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerGames = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerGame>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Game Stats by Week Delta
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsByWeekDeltaRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsByWeekDeltaResponse
     */
	public function playerGameStatsByWeekDelta(
        \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsByWeekDeltaRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsByWeekDeltaResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/PlayerGameStatsByWeekDelta/{season}/{week}/{minutes}', \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsByWeekDeltaRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsByWeekDeltaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerGames = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerGame>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Game Stats Delta
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsDeltaRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsDeltaResponse
     */
	public function playerGameStatsDelta(
        \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsDeltaRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsDeltaResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/PlayerGameStatsDelta/{minutes}', \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsDeltaRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerGameStatsDeltaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerGames = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerGame>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Season Red Zone Stats
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonRedZoneStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonRedZoneStatsResponse
     */
	public function playerSeasonRedZoneStats(
        \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonRedZoneStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonRedZoneStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/PlayerSeasonRedZoneStats/{season}', \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonRedZoneStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonRedZoneStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerSeasonRedZones = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerSeasonRedZone>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Season Red Zone Stats Inside Five
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonRedZoneStatsInsideFiveRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonRedZoneStatsInsideFiveResponse
     */
	public function playerSeasonRedZoneStatsInsideFive(
        \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonRedZoneStatsInsideFiveRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonRedZoneStatsInsideFiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/PlayerSeasonRedZoneInsideFiveStats/{season}', \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonRedZoneStatsInsideFiveRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonRedZoneStatsInsideFiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerSeasonRedZones = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerSeasonRedZone>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Season Red Zone Stats Inside Ten
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonRedZoneStatsInsideTenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonRedZoneStatsInsideTenResponse
     */
	public function playerSeasonRedZoneStatsInsideTen(
        \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonRedZoneStatsInsideTenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonRedZoneStatsInsideTenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/PlayerSeasonRedZoneInsideTenStats/{season}', \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonRedZoneStatsInsideTenRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonRedZoneStatsInsideTenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerSeasonRedZones = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerSeasonRedZone>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Season Stats
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonStatsResponse
     */
	public function playerSeasonStats(
        \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/PlayerSeasonStats/{season}', \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerSeasons = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerSeason>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Season Stats by Player
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonStatsByPlayerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonStatsByPlayerResponse
     */
	public function playerSeasonStatsByPlayer(
        \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonStatsByPlayerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonStatsByPlayerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/PlayerSeasonStatsByPlayerID/{season}/{playerid}', \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonStatsByPlayerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonStatsByPlayerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerSeasons = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerSeason>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Season Stats by Team
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonStatsByTeamRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonStatsByTeamResponse
     */
	public function playerSeasonStatsByTeam(
        \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonStatsByTeamRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonStatsByTeamResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/PlayerSeasonStatsByTeam/{season}/{team}', \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonStatsByTeamRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonStatsByTeamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerSeasons = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerSeason>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Season Third Down Stats
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonThirdDownStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonThirdDownStatsResponse
     */
	public function playerSeasonThirdDownStats(
        \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonThirdDownStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonThirdDownStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/PlayerSeasonThirdDownStats/{season}', \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonThirdDownStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonThirdDownStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerSeasonThirdDowns = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerSeasonThirdDown>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Pro Bowlers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProBowlersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProBowlersResponse
     */
	public function proBowlers(
        \OpenAPI\OpenAPI\Models\Operations\ProBowlersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProBowlersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/ProBowlers/{season}', \OpenAPI\OpenAPI\Models\Operations\ProBowlersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProBowlersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerInfos = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerInfo>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Schedule
     * 
     * Game schedule for a specified season.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ScheduleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ScheduleResponse
     */
	public function schedule(
        \OpenAPI\OpenAPI\Models\Operations\ScheduleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ScheduleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Schedules/{season}', \OpenAPI\OpenAPI\Models\Operations\ScheduleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ScheduleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->schedules = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Schedule>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Scores by Date
     * 
     * Get game scores for a specified week of a season.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ScoresByDateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ScoresByDateResponse
     */
	public function scoresByDate(
        \OpenAPI\OpenAPI\Models\Operations\ScoresByDateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ScoresByDateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/ScoresByDate/{date}', \OpenAPI\OpenAPI\Models\Operations\ScoresByDateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ScoresByDateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scores = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Score>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Scores by Season 
     * 
     * Game scores for a specified season.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ScoresBySeasonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ScoresBySeasonResponse
     */
	public function scoresBySeason(
        \OpenAPI\OpenAPI\Models\Operations\ScoresBySeasonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ScoresBySeasonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Scores/{season}', \OpenAPI\OpenAPI\Models\Operations\ScoresBySeasonRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ScoresBySeasonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scores = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Score>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Scores by Week
     * 
     * Get game scores for a specified week of a season.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ScoresByWeekRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ScoresByWeekResponse
     */
	public function scoresByWeek(
        \OpenAPI\OpenAPI\Models\Operations\ScoresByWeekRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ScoresByWeekResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/ScoresByWeek/{season}/{week}', \OpenAPI\OpenAPI\Models\Operations\ScoresByWeekRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ScoresByWeekResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scores = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Score>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Scores by Week Simulation
     * 
     * Gets simulated live scores of NFL games, covering the Conference Championship games on January 21, 2018.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ScoresByWeekSimulationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ScoresByWeekSimulationResponse
     */
	public function scoresByWeekSimulation(
        \OpenAPI\OpenAPI\Models\Operations\ScoresByWeekSimulationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ScoresByWeekSimulationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/SimulatedScores/{numberofplays}', \OpenAPI\OpenAPI\Models\Operations\ScoresByWeekSimulationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ScoresByWeekSimulationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scores = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Score>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Season Current
     * 
     * Year of the current NFL season. This value changes at the start of the new NFL league year. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SeasonCurrentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SeasonCurrentResponse
     */
	public function seasonCurrent(
        \OpenAPI\OpenAPI\Models\Operations\SeasonCurrentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SeasonCurrentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/CurrentSeason', \OpenAPI\OpenAPI\Models\Operations\SeasonCurrentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SeasonCurrentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->seasonCurrent200ApplicationJSONInteger = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Season Last Completed
     * 
     * Year of the most recently completed season. this value changes immediately after the Super Bowl. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SeasonLastCompletedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SeasonLastCompletedResponse
     */
	public function seasonLastCompleted(
        \OpenAPI\OpenAPI\Models\Operations\SeasonLastCompletedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SeasonLastCompletedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/LastCompletedSeason', \OpenAPI\OpenAPI\Models\Operations\SeasonLastCompletedRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SeasonLastCompletedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->seasonLastCompleted200ApplicationJSONInteger = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Season Upcoming
     * 
     * Year of the current NFL season, if we are in the mid-season. If we are in the off-season, then year of the next upcoming season. This value changes immediately after the Super Bowl. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SeasonUpcomingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SeasonUpcomingResponse
     */
	public function seasonUpcoming(
        \OpenAPI\OpenAPI\Models\Operations\SeasonUpcomingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SeasonUpcomingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/UpcomingSeason', \OpenAPI\OpenAPI\Models\Operations\SeasonUpcomingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SeasonUpcomingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->seasonUpcoming200ApplicationJSONInteger = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stadiums
     * 
     * This method returns all stadiums.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StadiumsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StadiumsResponse
     */
	public function stadiums(
        \OpenAPI\OpenAPI\Models\Operations\StadiumsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StadiumsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Stadiums', \OpenAPI\OpenAPI\Models\Operations\StadiumsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StadiumsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->stadiums = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Stadium>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Standings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StandingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StandingsResponse
     */
	public function standings(
        \OpenAPI\OpenAPI\Models\Operations\StandingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StandingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Standings/{season}', \OpenAPI\OpenAPI\Models\Operations\StandingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StandingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->standings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Standing>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Team Game Logs By Season
     * 
     * Game by game log of total team statistics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamGameLogsBySeasonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamGameLogsBySeasonResponse
     */
	public function teamGameLogsBySeason(
        \OpenAPI\OpenAPI\Models\Operations\TeamGameLogsBySeasonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamGameLogsBySeasonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/TeamGameStatsBySeason/{season}/{teamid}/{numberofgames}', \OpenAPI\OpenAPI\Models\Operations\TeamGameLogsBySeasonRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamGameLogsBySeasonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamGames = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TeamGame>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Team Game Stats
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsResponse
     */
	public function teamGameStats(
        \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/TeamGameStats/{season}/{week}', \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamGames = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TeamGame>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Team Season Stats
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsResponse
     */
	public function teamSeasonStats(
        \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/TeamSeasonStats/{season}', \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamSeasons = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TeamSeason>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Teams (Active)
     * 
     * Gets all active teams.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsActiveRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamsActiveResponse
     */
	public function teamsActive(
        \OpenAPI\OpenAPI\Models\Operations\TeamsActiveRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamsActiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Teams', \OpenAPI\OpenAPI\Models\Operations\TeamsActiveRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamsActiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teams = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Team>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Teams (All)
     * 
     * Gets all teams, including pro bowl teams.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsAllRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamsAllResponse
     */
	public function teamsAll(
        \OpenAPI\OpenAPI\Models\Operations\TeamsAllRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamsAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/AllTeams', \OpenAPI\OpenAPI\Models\Operations\TeamsAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamsAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teams = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Team>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Teams by Season
     * 
     * List of teams playing in a specified season.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsBySeasonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamsBySeasonResponse
     */
	public function teamsBySeason(
        \OpenAPI\OpenAPI\Models\Operations\TeamsBySeasonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamsBySeasonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Teams/{season}', \OpenAPI\OpenAPI\Models\Operations\TeamsBySeasonRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamsBySeasonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teams = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Team>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Timeframes
     * 
     * Get detailed information about past, present, and future timeframes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TimeframesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TimeframesResponse
     */
	public function timeframes(
        \OpenAPI\OpenAPI\Models\Operations\TimeframesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TimeframesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Timeframes/{type}', \OpenAPI\OpenAPI\Models\Operations\TimeframesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TimeframesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->timeframes = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Timeframe>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Week Current
     * 
     * Number of the current week of the NFL season. This value usually changes on Tuesday nights or Wednesday mornings at midnight ET.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WeekCurrentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\WeekCurrentResponse
     */
	public function weekCurrent(
        \OpenAPI\OpenAPI\Models\Operations\WeekCurrentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\WeekCurrentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/CurrentWeek', \OpenAPI\OpenAPI\Models\Operations\WeekCurrentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WeekCurrentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->weekCurrent200ApplicationJSONInteger = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Week Last Completed
     * 
     * Number of the current week of the NFL season. This value usually changes on Tuesday nights or Wednesday mornings at midnight ET.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WeekLastCompletedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\WeekLastCompletedResponse
     */
	public function weekLastCompleted(
        \OpenAPI\OpenAPI\Models\Operations\WeekLastCompletedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\WeekLastCompletedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/LastCompletedWeek', \OpenAPI\OpenAPI\Models\Operations\WeekLastCompletedRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WeekLastCompletedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->weekLastCompleted200ApplicationJSONInteger = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Week Upcoming
     * 
     * Number of the current week of the NFL season. This value usually changes on Tuesday nights or Wednesday mornings at midnight ET.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WeekUpcomingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\WeekUpcomingResponse
     */
	public function weekUpcoming(
        \OpenAPI\OpenAPI\Models\Operations\WeekUpcomingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\WeekUpcomingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/UpcomingWeek', \OpenAPI\OpenAPI\Models\Operations\WeekUpcomingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WeekUpcomingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->weekUpcoming200ApplicationJSONInteger = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }

        return $response;
    }
}