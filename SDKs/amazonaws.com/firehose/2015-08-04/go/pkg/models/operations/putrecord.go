// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PutRecordXAmzTargetEnum
type PutRecordXAmzTargetEnum string

const (
	PutRecordXAmzTargetEnumFirehose20150804PutRecord PutRecordXAmzTargetEnum = "Firehose_20150804.PutRecord"
)

func (e *PutRecordXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Firehose_20150804.PutRecord":
		*e = PutRecordXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutRecordXAmzTargetEnum: %s", s)
	}
}

type PutRecordHeaders struct {
	XAmzAlgorithm     *string                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        PutRecordXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type PutRecordRequest struct {
	Headers PutRecordHeaders
	Request shared.PutRecordInput `request:"mediaType=application/json"`
}

type PutRecordResponse struct {
	ContentType string
	// InvalidArgumentException
	InvalidArgumentException interface{}
	// InvalidKMSResourceException
	InvalidKMSResourceException interface{}
	// Success
	PutRecordOutput *shared.PutRecordOutput
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ServiceUnavailableException
	ServiceUnavailableException interface{}
	StatusCode                  int
	RawResponse                 *http.Response
}
