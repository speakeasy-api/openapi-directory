<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Documents 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create new document
     * 
     * Creates documents through a JSON object where the key is the name of the field.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatenewdocumentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatenewdocumentResponse
     */
	public function createnewdocument(
        \OpenAPI\OpenAPI\Models\Operations\CreatenewdocumentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatenewdocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/dataentities/{acronym}/documents', \OpenAPI\OpenAPI\Models\Operations\CreatenewdocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatenewdocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createnewdocument = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Createnewdocument', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create or update entire document
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateorupdateentiredocumentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateorupdateentiredocumentResponse
     */
	public function createorupdateentiredocument(
        \OpenAPI\OpenAPI\Models\Operations\CreateorupdateentiredocumentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateorupdateentiredocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/dataentities/{acronym}/documents', \OpenAPI\OpenAPI\Models\Operations\CreateorupdateentiredocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateorupdateentiredocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Create or update partial document
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateorupdatepartialdocumentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateorupdatepartialdocumentResponse
     */
	public function createorupdatepartialdocument(
        \OpenAPI\OpenAPI\Models\Operations\CreateorupdatepartialdocumentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateorupdatepartialdocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/dataentities/{acronym}/documents', \OpenAPI\OpenAPI\Models\Operations\CreateorupdatepartialdocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateorupdatepartialdocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Delete document
     * 
     * It allows to delete a document.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletedocumentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletedocumentResponse
     */
	public function deletedocument(
        \OpenAPI\OpenAPI\Models\Operations\DeletedocumentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletedocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/dataentities/{acronym}/documents/{id}', \OpenAPI\OpenAPI\Models\Operations\DeletedocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletedocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get document
     * 
     * Retrieves a document.
     * 
     * Assign the `_fields` parameter in the query string to retrieve the desired fields. If you want to return all the fields use `_fields=_all`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetdocumentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetdocumentResponse
     */
	public function getdocument(
        \OpenAPI\OpenAPI\Models\Operations\GetdocumentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetdocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/dataentities/{acronym}/documents/{id}', \OpenAPI\OpenAPI\Models\Operations\GetdocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetdocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usingfilters = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Usingfilters', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update entire document
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateentiredocumentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateentiredocumentResponse
     */
	public function updateentiredocument(
        \OpenAPI\OpenAPI\Models\Operations\UpdateentiredocumentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateentiredocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/dataentities/{acronym}/documents/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateentiredocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateentiredocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Update partial document
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatepartialdocumentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatepartialdocumentResponse
     */
	public function updatepartialdocument(
        \OpenAPI\OpenAPI\Models\Operations\UpdatepartialdocumentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatepartialdocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/dataentities/{acronym}/documents/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdatepartialdocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatepartialdocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}