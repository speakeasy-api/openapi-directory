// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreateSubnetCidrReservationResultSubnetCidrReservationReservationTypeEnum - The type of reservation.
type CreateSubnetCidrReservationResultSubnetCidrReservationReservationTypeEnum string

const (
	CreateSubnetCidrReservationResultSubnetCidrReservationReservationTypeEnumPrefix   CreateSubnetCidrReservationResultSubnetCidrReservationReservationTypeEnum = "prefix"
	CreateSubnetCidrReservationResultSubnetCidrReservationReservationTypeEnumExplicit CreateSubnetCidrReservationResultSubnetCidrReservationReservationTypeEnum = "explicit"
)

func (e *CreateSubnetCidrReservationResultSubnetCidrReservationReservationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "prefix":
		fallthrough
	case "explicit":
		*e = CreateSubnetCidrReservationResultSubnetCidrReservationReservationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSubnetCidrReservationResultSubnetCidrReservationReservationTypeEnum: %s", s)
	}
}

// CreateSubnetCidrReservationResultSubnetCidrReservationTags - Describes a tag.
type CreateSubnetCidrReservationResultSubnetCidrReservationTags struct {
	Key   *string
	Value *string
}

// CreateSubnetCidrReservationResultSubnetCidrReservation - Information about the created subnet CIDR reservation.
type CreateSubnetCidrReservationResultSubnetCidrReservation struct {
	Cidr                    *string
	Description             *string
	OwnerID                 *string
	ReservationType         *CreateSubnetCidrReservationResultSubnetCidrReservationReservationTypeEnum
	SubnetCidrReservationID *string
	SubnetID                *string
	Tags                    []CreateSubnetCidrReservationResultSubnetCidrReservationTags
}

// CreateSubnetCidrReservationResult - Success
type CreateSubnetCidrReservationResult struct {
	SubnetCidrReservation *CreateSubnetCidrReservationResultSubnetCidrReservation
}
