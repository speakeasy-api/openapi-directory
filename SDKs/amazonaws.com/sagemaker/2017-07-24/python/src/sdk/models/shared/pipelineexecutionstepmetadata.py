"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import automljobstepmetadata as shared_automljobstepmetadata
from ..shared import callbackstepmetadata as shared_callbackstepmetadata
from ..shared import clarifycheckstepmetadata as shared_clarifycheckstepmetadata
from ..shared import conditionstepmetadata as shared_conditionstepmetadata
from ..shared import emrstepmetadata as shared_emrstepmetadata
from ..shared import failstepmetadata as shared_failstepmetadata
from ..shared import lambdastepmetadata as shared_lambdastepmetadata
from ..shared import modelstepmetadata as shared_modelstepmetadata
from ..shared import processingjobstepmetadata as shared_processingjobstepmetadata
from ..shared import qualitycheckstepmetadata as shared_qualitycheckstepmetadata
from ..shared import registermodelstepmetadata as shared_registermodelstepmetadata
from ..shared import trainingjobstepmetadata as shared_trainingjobstepmetadata
from ..shared import transformjobstepmetadata as shared_transformjobstepmetadata
from ..shared import tuningjobstepmetadata as shared_tuningjobstepmetadata
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PipelineExecutionStepMetadata:
    r"""Metadata for a step execution."""
    
    auto_ml_job: Optional[shared_automljobstepmetadata.AutoMLJobStepMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoMLJob'), 'exclude': lambda f: f is None }})  
    callback: Optional[shared_callbackstepmetadata.CallbackStepMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Callback'), 'exclude': lambda f: f is None }})  
    clarify_check: Optional[shared_clarifycheckstepmetadata.ClarifyCheckStepMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClarifyCheck'), 'exclude': lambda f: f is None }})  
    condition: Optional[shared_conditionstepmetadata.ConditionStepMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Condition'), 'exclude': lambda f: f is None }})  
    emr: Optional[shared_emrstepmetadata.EMRStepMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EMR'), 'exclude': lambda f: f is None }})  
    fail: Optional[shared_failstepmetadata.FailStepMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Fail'), 'exclude': lambda f: f is None }})  
    lambda_: Optional[shared_lambdastepmetadata.LambdaStepMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Lambda'), 'exclude': lambda f: f is None }})  
    model: Optional[shared_modelstepmetadata.ModelStepMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Model'), 'exclude': lambda f: f is None }})  
    processing_job: Optional[shared_processingjobstepmetadata.ProcessingJobStepMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProcessingJob'), 'exclude': lambda f: f is None }})  
    quality_check: Optional[shared_qualitycheckstepmetadata.QualityCheckStepMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QualityCheck'), 'exclude': lambda f: f is None }})  
    register_model: Optional[shared_registermodelstepmetadata.RegisterModelStepMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RegisterModel'), 'exclude': lambda f: f is None }})  
    training_job: Optional[shared_trainingjobstepmetadata.TrainingJobStepMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrainingJob'), 'exclude': lambda f: f is None }})  
    transform_job: Optional[shared_transformjobstepmetadata.TransformJobStepMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TransformJob'), 'exclude': lambda f: f is None }})  
    tuning_job: Optional[shared_tuningjobstepmetadata.TuningJobStepMetaData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TuningJob'), 'exclude': lambda f: f is None }})  
    