<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new Environment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsEnvironmentsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsEnvironmentsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsEnvironmentsCreateResponse
     */
	public function notebooksProjectsLocationsEnvironmentsCreate(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsEnvironmentsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsEnvironmentsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsEnvironmentsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/environments', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsEnvironmentsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "environmentInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsEnvironmentsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsEnvironmentsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists environments in a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsEnvironmentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsEnvironmentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsEnvironmentsListResponse
     */
	public function notebooksProjectsLocationsEnvironmentsList(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsEnvironmentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsEnvironmentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsEnvironmentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/environments', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsEnvironmentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsEnvironmentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsEnvironmentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEnvironmentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListEnvironmentsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Execution in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsExecutionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsExecutionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsExecutionsCreateResponse
     */
	public function notebooksProjectsLocationsExecutionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsExecutionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsExecutionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsExecutionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/executions', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsExecutionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "executionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsExecutionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsExecutionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists executions in a given project and location
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsExecutionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsExecutionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsExecutionsListResponse
     */
	public function notebooksProjectsLocationsExecutionsList(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsExecutionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsExecutionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsExecutionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/executions', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsExecutionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsExecutionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsExecutionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listExecutionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListExecutionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Instance in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesCreateResponse
     */
	public function notebooksProjectsLocationsInstancesCreate(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/instances', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instanceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Check if a notebook instance is healthy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesGetInstanceHealthRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesGetInstanceHealthSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesGetInstanceHealthResponse
     */
	public function notebooksProjectsLocationsInstancesGetInstanceHealth(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesGetInstanceHealthRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesGetInstanceHealthSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesGetInstanceHealthResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:getInstanceHealth', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesGetInstanceHealthRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesGetInstanceHealthRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesGetInstanceHealthResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getInstanceHealthResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetInstanceHealthResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Check if a notebook instance is upgradable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesIsUpgradeableRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesIsUpgradeableSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesIsUpgradeableResponse
     */
	public function notebooksProjectsLocationsInstancesIsUpgradeable(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesIsUpgradeableRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesIsUpgradeableSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesIsUpgradeableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{notebookInstance}:isUpgradeable', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesIsUpgradeableRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesIsUpgradeableRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesIsUpgradeableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->isInstanceUpgradeableResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\IsInstanceUpgradeableResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists instances in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesListResponse
     */
	public function notebooksProjectsLocationsInstancesList(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/instances', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInstancesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListInstancesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Registers an existing legacy notebook instance to the Notebooks API server. Legacy instances are instances created with the legacy Compute Engine calls. They are not manageable by the Notebooks API out of the box. This call makes these instances manageable by the Notebooks API.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesRegisterRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesRegisterSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesRegisterResponse
     */
	public function notebooksProjectsLocationsInstancesRegister(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesRegisterRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesRegisterSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesRegisterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/instances:register', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesRegisterRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "registerInstanceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesRegisterRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesRegisterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Allows notebook instances to report their latest instance information to the Notebooks API server. The server will merge the reported information to the instance metadata store. Do not use this method directly.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesReportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesReportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesReportResponse
     */
	public function notebooksProjectsLocationsInstancesReport(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesReportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesReportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesReportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:report', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesReportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "reportInstanceInfoRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesReportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesReportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Rollbacks a notebook instance to the previous version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesRollbackRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesRollbackSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesRollbackResponse
     */
	public function notebooksProjectsLocationsInstancesRollback(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesRollbackRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesRollbackSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesRollbackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:rollback', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesRollbackRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "rollbackInstanceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesRollbackRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesRollbackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the guest accelerators of a single Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesSetAcceleratorRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesSetAcceleratorSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesSetAcceleratorResponse
     */
	public function notebooksProjectsLocationsInstancesSetAccelerator(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesSetAcceleratorRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesSetAcceleratorSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesSetAcceleratorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:setAccelerator', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesSetAcceleratorRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setInstanceAcceleratorRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesSetAcceleratorRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesSetAcceleratorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Replaces all the labels of an Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesSetLabelsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesSetLabelsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesSetLabelsResponse
     */
	public function notebooksProjectsLocationsInstancesSetLabels(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesSetLabelsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesSetLabelsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesSetLabelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:setLabels', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesSetLabelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setInstanceLabelsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesSetLabelsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesSetLabelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the machine type of a single Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesSetMachineTypeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesSetMachineTypeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesSetMachineTypeResponse
     */
	public function notebooksProjectsLocationsInstancesSetMachineType(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesSetMachineTypeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesSetMachineTypeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesSetMachineTypeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:setMachineType', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesSetMachineTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setInstanceMachineTypeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesSetMachineTypeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesSetMachineTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Notebook Instance configurations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpdateConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpdateConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpdateConfigResponse
     */
	public function notebooksProjectsLocationsInstancesUpdateConfig(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpdateConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpdateConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpdateConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:updateConfig', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpdateConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateInstanceConfigRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpdateConfigRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpdateConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add/update metadata items for an instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpdateMetadataItemsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpdateMetadataItemsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpdateMetadataItemsResponse
     */
	public function notebooksProjectsLocationsInstancesUpdateMetadataItems(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpdateMetadataItemsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpdateMetadataItemsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpdateMetadataItemsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:updateMetadataItems', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpdateMetadataItemsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateInstanceMetadataItemsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpdateMetadataItemsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpdateMetadataItemsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateInstanceMetadataItemsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateInstanceMetadataItemsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the Shielded instance configuration of a single Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpdateShieldedInstanceConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpdateShieldedInstanceConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpdateShieldedInstanceConfigResponse
     */
	public function notebooksProjectsLocationsInstancesUpdateShieldedInstanceConfig(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpdateShieldedInstanceConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpdateShieldedInstanceConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpdateShieldedInstanceConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:updateShieldedInstanceConfig', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpdateShieldedInstanceConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateShieldedInstanceConfigRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpdateShieldedInstanceConfigRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpdateShieldedInstanceConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Allows notebook instances to call this endpoint to upgrade themselves. Do not use this method directly.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpgradeInternalRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpgradeInternalSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpgradeInternalResponse
     */
	public function notebooksProjectsLocationsInstancesUpgradeInternal(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpgradeInternalRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpgradeInternalSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpgradeInternalResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:upgradeInternal', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpgradeInternalRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "upgradeInstanceInternalRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpgradeInternalRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsInstancesUpgradeInternalResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsListResponse
     */
	public function notebooksProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsOperationsCancelResponse
     */
	public function notebooksProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsOperationsListResponse
     */
	public function notebooksProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Runtime in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesCreateResponse
     */
	public function notebooksProjectsLocationsRuntimesCreate(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/runtimes', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "runtimeInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a Diagnostic File and runs Diagnostic Tool given a Runtime.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesDiagnoseRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesDiagnoseSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesDiagnoseResponse
     */
	public function notebooksProjectsLocationsRuntimesDiagnose(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesDiagnoseRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesDiagnoseSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesDiagnoseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:diagnose', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesDiagnoseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "diagnoseRuntimeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesDiagnoseRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesDiagnoseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesGetIamPolicyResponse
     */
	public function notebooksProjectsLocationsRuntimesGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Runtimes in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesListResponse
     */
	public function notebooksProjectsLocationsRuntimesList(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/runtimes', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRuntimesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListRuntimesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Notebook Runtime configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesPatchResponse
     */
	public function notebooksProjectsLocationsRuntimesPatch(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "runtimeInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets an access token for the consumer service account that the customer attached to the runtime. Only accessible from the tenant instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesRefreshRuntimeTokenInternalRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesRefreshRuntimeTokenInternalSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesRefreshRuntimeTokenInternalResponse
     */
	public function notebooksProjectsLocationsRuntimesRefreshRuntimeTokenInternal(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesRefreshRuntimeTokenInternalRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesRefreshRuntimeTokenInternalSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesRefreshRuntimeTokenInternalResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:refreshRuntimeTokenInternal', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesRefreshRuntimeTokenInternalRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "refreshRuntimeTokenInternalRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesRefreshRuntimeTokenInternalRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesRefreshRuntimeTokenInternalResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->refreshRuntimeTokenInternalResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RefreshRuntimeTokenInternalResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Report and process a runtime event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesReportEventRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesReportEventSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesReportEventResponse
     */
	public function notebooksProjectsLocationsRuntimesReportEvent(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesReportEventRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesReportEventSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesReportEventResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:reportEvent', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesReportEventRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "reportRuntimeEventRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesReportEventRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesReportEventResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Resets a Managed Notebook Runtime.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesResetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesResetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesResetResponse
     */
	public function notebooksProjectsLocationsRuntimesReset(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesResetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesResetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesResetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:reset', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesResetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "resetRuntimeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesResetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesResetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesSetIamPolicyResponse
     */
	public function notebooksProjectsLocationsRuntimesSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts a Managed Notebook Runtime. Perform "Start" on GPU instances; "Resume" on CPU instances See: https://cloud.google.com/compute/docs/instances/stop-start-instance https://cloud.google.com/compute/docs/instances/suspend-resume-instance
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesStartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesStartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesStartResponse
     */
	public function notebooksProjectsLocationsRuntimesStart(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesStartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesStartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesStartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:start', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesStartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "startRuntimeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesStartRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesStartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stops a Managed Notebook Runtime. Perform "Stop" on GPU instances; "Suspend" on CPU instances See: https://cloud.google.com/compute/docs/instances/stop-start-instance https://cloud.google.com/compute/docs/instances/suspend-resume-instance
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesStopRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesStopSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesStopResponse
     */
	public function notebooksProjectsLocationsRuntimesStop(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesStopRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesStopSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesStopResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:stop', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesStopRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "stopRuntimeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesStopRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesStopResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Switch a Managed Notebook Runtime.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesSwitchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesSwitchResponse
     */
	public function notebooksProjectsLocationsRuntimesSwitch(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesSwitchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:switch', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesSwitchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "switchRuntimeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesSwitchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesTestIamPermissionsResponse
     */
	public function notebooksProjectsLocationsRuntimesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Upgrades a Managed Notebook Runtime to the latest version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesUpgradeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesUpgradeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesUpgradeResponse
     */
	public function notebooksProjectsLocationsRuntimesUpgrade(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesUpgradeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesUpgradeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesUpgradeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:upgrade', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesUpgradeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "upgradeRuntimeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesUpgradeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsRuntimesUpgradeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Scheduled Notebook in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesCreateResponse
     */
	public function notebooksProjectsLocationsSchedulesCreate(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/schedules', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "scheduleInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes schedule and all underlying jobs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesDeleteResponse
     */
	public function notebooksProjectsLocationsSchedulesDelete(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets details of schedule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesGetResponse
     */
	public function notebooksProjectsLocationsSchedulesGet(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->schedule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Schedule', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists schedules in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesListResponse
     */
	public function notebooksProjectsLocationsSchedulesList(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/schedules', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSchedulesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListSchedulesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Triggers execution of an existing schedule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesTriggerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesTriggerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesTriggerResponse
     */
	public function notebooksProjectsLocationsSchedulesTrigger(
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesTriggerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesTriggerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesTriggerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:trigger', \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesTriggerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesTriggerRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotebooksProjectsLocationsSchedulesTriggerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}