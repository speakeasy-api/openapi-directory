// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// RequestNodeCommentsXSdsDateFormatEnum - Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
type RequestNodeCommentsXSdsDateFormatEnum string

const (
	RequestNodeCommentsXSdsDateFormatEnumUtc    RequestNodeCommentsXSdsDateFormatEnum = "UTC"
	RequestNodeCommentsXSdsDateFormatEnumLocal  RequestNodeCommentsXSdsDateFormatEnum = "LOCAL"
	RequestNodeCommentsXSdsDateFormatEnumOffset RequestNodeCommentsXSdsDateFormatEnum = "OFFSET"
	RequestNodeCommentsXSdsDateFormatEnumEpoch  RequestNodeCommentsXSdsDateFormatEnum = "EPOCH"
	RequestNodeCommentsXSdsDateFormatEnumLeet   RequestNodeCommentsXSdsDateFormatEnum = "LEET"
)

func (e *RequestNodeCommentsXSdsDateFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UTC":
		fallthrough
	case "LOCAL":
		fallthrough
	case "OFFSET":
		fallthrough
	case "EPOCH":
		fallthrough
	case "LEET":
		*e = RequestNodeCommentsXSdsDateFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestNodeCommentsXSdsDateFormatEnum: %s", s)
	}
}

type RequestNodeCommentsRequest struct {
	// Authentication token
	XSdsAuthToken *string `header:"style=simple,explode=false,name=X-Sds-Auth-Token"`
	// Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
	XSdsDateFormat *RequestNodeCommentsXSdsDateFormatEnum `header:"style=simple,explode=false,name=X-Sds-Date-Format"`
	// Hide deleted comments (default: false)
	HideDeleted *bool `queryParam:"style=form,explode=true,name=hide_deleted"`
	// Range limit.
	//
	// Maximum 500.
	//
	//  For more results please use paging (`offset` + `limit`).
	Limit *int `queryParam:"style=form,explode=true,name=limit"`
	// Node ID
	NodeID int64 `pathParam:"style=simple,explode=false,name=node_id"`
	// Range offset
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
}

type RequestNodeCommentsResponse struct {
	// OK
	CommentList *shared.CommentList
	ContentType string
	// Bad Request
	ErrorResponse *shared.ErrorResponse
	StatusCode    int
	RawResponse   *http.Response
}
