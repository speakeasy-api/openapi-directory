"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import move as shared_move
from ..shared import permissionchange as shared_permissionchange
from ..shared import rename as shared_rename
from ..shared import target as shared_target
from ..shared import user as shared_user
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class EventAdditionalEventTypesEnum(str, Enum):
    COMMENT = 'comment'
    CREATE = 'create'
    EDIT = 'edit'
    EMPTY_TRASH = 'emptyTrash'
    MOVE = 'move'
    PERMISSION_CHANGE = 'permissionChange'
    RENAME = 'rename'
    TRASH = 'trash'
    UNKNOWN = 'unknown'
    UNTRASH = 'untrash'
    UPLOAD = 'upload'

class EventPrimaryEventTypeEnum(str, Enum):
    r"""The main type of event that occurred."""
    COMMENT = 'comment'
    CREATE = 'create'
    EDIT = 'edit'
    EMPTY_TRASH = 'emptyTrash'
    MOVE = 'move'
    PERMISSION_CHANGE = 'permissionChange'
    RENAME = 'rename'
    TRASH = 'trash'
    UNKNOWN = 'unknown'
    UNTRASH = 'untrash'
    UPLOAD = 'upload'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Event:
    r"""Represents the changes associated with an action taken by a user."""
    
    additional_event_types: Optional[list[EventAdditionalEventTypesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalEventTypes'), 'exclude': lambda f: f is None }})
    r"""Additional event types. Some events may have multiple types when multiple actions are part of a single event. For example, creating a document, renaming it, and sharing it may be part of a single file-creation event."""  
    event_time_millis: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventTimeMillis'), 'exclude': lambda f: f is None }})
    r"""The time at which the event occurred formatted as Unix time in milliseconds."""  
    from_user_deletion: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromUserDeletion'), 'exclude': lambda f: f is None }})
    r"""Whether this event is caused by a user being deleted."""  
    move: Optional[shared_move.Move] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('move'), 'exclude': lambda f: f is None }})
    r"""Contains information about changes in an object's parents as a result of a move type event."""  
    permission_changes: Optional[list[shared_permissionchange.PermissionChange]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissionChanges'), 'exclude': lambda f: f is None }})
    r"""Extra information for permissionChange type events, such as the user or group the new permission applies to."""  
    primary_event_type: Optional[EventPrimaryEventTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primaryEventType'), 'exclude': lambda f: f is None }})
    r"""The main type of event that occurred."""  
    rename: Optional[shared_rename.Rename] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rename'), 'exclude': lambda f: f is None }})
    r"""Contains information about a renametype event."""  
    target: Optional[shared_target.Target] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target'), 'exclude': lambda f: f is None }})
    r"""Information about the object modified by the event."""  
    user: Optional[shared_user.User] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})
    r"""A representation of a user."""  
    