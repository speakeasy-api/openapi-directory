"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional

class ChannelMemberRoleEnum(str, Enum):
    r"""Permission level of the member in the channel (DEPRECATED: use channel_role instead)"""
    MEMBER = 'member'
    MODERATOR = 'moderator'
    ADMIN = 'admin'
    OWNER = 'owner'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChannelMember:
    
    banned: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('banned') }})
    r"""Whether member is banned this channel or not"""  
    channel_role: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel_role') }})
    r"""Role of the member in the channel"""  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Date/time of creation"""  
    shadow_banned: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shadow_banned') }})
    r"""Whether member is shadow banned in this channel or not"""  
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Date/time of the last update"""  
    ban_expires: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ban_expires'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Expiration date of the ban"""  
    deleted_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deleted_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    invite_accepted_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invite_accepted_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date when invite was accepted"""  
    invite_rejected_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invite_rejected_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date when invite was rejected"""  
    invited: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invited'), 'exclude': lambda f: f is None }})
    r"""Whether member was invited or not"""  
    is_moderator: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_moderator'), 'exclude': lambda f: f is None }})
    r"""Whether member is channel moderator or not"""  
    role: Optional[ChannelMemberRoleEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role'), 'exclude': lambda f: f is None }})
    r"""Permission level of the member in the channel (DEPRECATED: use channel_role instead)"""  
    user: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})
    r"""Represents chat user"""  
    user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id'), 'exclude': lambda f: f is None }})  
    