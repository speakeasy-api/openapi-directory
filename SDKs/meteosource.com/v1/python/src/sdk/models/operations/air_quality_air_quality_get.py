"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import airquality_pointdata as shared_airquality_pointdata
from ..shared import generalrequesterror as shared_generalrequesterror
from ..shared import httpvalidationerror as shared_httpvalidationerror
from typing import Optional


@dataclasses.dataclass
class AirQualityAirQualityGetSecurity:
    
    api_key_header: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Key' }})  
    

@dataclasses.dataclass
class AirQualityAirQualityGetRequest:
    
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header."""  
    lat: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'lat', 'style': 'form', 'explode': True }})
    r"""Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4"""  
    lon: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'lon', 'style': 'form', 'explode': True }})
    r"""Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4"""  
    place_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'place_id', 'style': 'form', 'explode': True }})
    r"""Identifier of a place. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name)."""  
    timezone: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'timezone', 'style': 'form', 'explode': True }})
    r"""Timezone to be used for the date fields. If not specified, local timezone of the forecast location will be used.
    The format is according to the tzinfo database, so values like `Europe/Prague` or `UTC` can be used.
    Alternatively you may use the value ``auto`` in which case the local timezone of the location is used.
    The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
    """  
    

@dataclasses.dataclass
class AirQualityAirQualityGetResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    air_quality_point_data: Optional[shared_airquality_pointdata.AirQualityPointData] = dataclasses.field(default=None)
    r"""Successful Response"""  
    general_request_error: Optional[shared_generalrequesterror.GeneralRequestError] = dataclasses.field(default=None)
    r"""Error in passed parameter."""  
    http_validation_error: Optional[shared_httpvalidationerror.HTTPValidationError] = dataclasses.field(default=None)
    r"""Validation Error"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    