// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EscalationReasonEnum - Required. The reason why the Case is being escalated.
type EscalationReasonEnum string

const (
	EscalationReasonEnumReasonUnspecified  EscalationReasonEnum = "REASON_UNSPECIFIED"
	EscalationReasonEnumResolutionTime     EscalationReasonEnum = "RESOLUTION_TIME"
	EscalationReasonEnumTechnicalExpertise EscalationReasonEnum = "TECHNICAL_EXPERTISE"
	EscalationReasonEnumBusinessImpact     EscalationReasonEnum = "BUSINESS_IMPACT"
)

func (e EscalationReasonEnum) ToPointer() *EscalationReasonEnum {
	return &e
}

func (e *EscalationReasonEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "REASON_UNSPECIFIED":
		fallthrough
	case "RESOLUTION_TIME":
		fallthrough
	case "TECHNICAL_EXPERTISE":
		fallthrough
	case "BUSINESS_IMPACT":
		*e = EscalationReasonEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EscalationReasonEnum: %v", v)
	}
}

// Escalation - An escalation of a support case.
type Escalation struct {
	// Required. A free text description to accompany the `reason` field above. Provides additional context on why the case is being escalated.
	Justification *string `json:"justification,omitempty"`
	// Required. The reason why the Case is being escalated.
	Reason *EscalationReasonEnum `json:"reason,omitempty"`
}
