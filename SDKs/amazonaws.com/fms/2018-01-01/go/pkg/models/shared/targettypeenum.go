// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TargetTypeEnum string

const (
	TargetTypeEnumGateway                   TargetTypeEnum = "GATEWAY"
	TargetTypeEnumCarrierGateway            TargetTypeEnum = "CARRIER_GATEWAY"
	TargetTypeEnumInstance                  TargetTypeEnum = "INSTANCE"
	TargetTypeEnumLocalGateway              TargetTypeEnum = "LOCAL_GATEWAY"
	TargetTypeEnumNatGateway                TargetTypeEnum = "NAT_GATEWAY"
	TargetTypeEnumNetworkInterface          TargetTypeEnum = "NETWORK_INTERFACE"
	TargetTypeEnumVpcEndpoint               TargetTypeEnum = "VPC_ENDPOINT"
	TargetTypeEnumVpcPeeringConnection      TargetTypeEnum = "VPC_PEERING_CONNECTION"
	TargetTypeEnumEgressOnlyInternetGateway TargetTypeEnum = "EGRESS_ONLY_INTERNET_GATEWAY"
	TargetTypeEnumTransitGateway            TargetTypeEnum = "TRANSIT_GATEWAY"
)

func (e TargetTypeEnum) ToPointer() *TargetTypeEnum {
	return &e
}

func (e *TargetTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GATEWAY":
		fallthrough
	case "CARRIER_GATEWAY":
		fallthrough
	case "INSTANCE":
		fallthrough
	case "LOCAL_GATEWAY":
		fallthrough
	case "NAT_GATEWAY":
		fallthrough
	case "NETWORK_INTERFACE":
		fallthrough
	case "VPC_ENDPOINT":
		fallthrough
	case "VPC_PEERING_CONNECTION":
		fallthrough
	case "EGRESS_ONLY_INTERNET_GATEWAY":
		fallthrough
	case "TRANSIT_GATEWAY":
		*e = TargetTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TargetTypeEnum: %v", v)
	}
}
