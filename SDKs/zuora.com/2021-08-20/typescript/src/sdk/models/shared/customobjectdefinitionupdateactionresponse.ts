/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { UpdateCustomObjectCusotmField } from "./updatecustomobjectcusotmfield";
import { Expose, Type } from "class-transformer";

/**
 * The cardinality of the relationship from this object to another object.
 *
 * @remarks
 *
 * A `manyToOne` relationship means this object is the child object (the "many" side), and the referenced object (the "one" side) is the parent.
 *
 * A `oneToMany` relationship means this object is the parent object (the "one" side), and the referenced object (the "many" side) is the child.
 *
 */
export enum CustomObjectDefinitionUpdateActionResponseRelationshipCardinalityEnum {
  ManyToOne = "manyToOne",
  OneToMany = "oneToMany",
}

export class CustomObjectDefinitionUpdateActionResponseRelationshipRecordConstraintsCreate extends SpeakeasyBase {
  /**
   * Specifies whether Zuora validates the values of mapped fields
   *
   * @remarks
   * in custom object records.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enforceValidMapping" })
  enforceValidMapping?: boolean;
}

/**
 * Specifies contraints to apply to custom object records.
 *
 * @remarks
 *
 */
export class CustomObjectDefinitionUpdateActionResponseRelationshipRecordConstraints extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "create" })
  @Type(
    () =>
      CustomObjectDefinitionUpdateActionResponseRelationshipRecordConstraintsCreate
  )
  create?: CustomObjectDefinitionUpdateActionResponseRelationshipRecordConstraintsCreate;
}

export class CustomObjectDefinitionUpdateActionResponseRelationship extends SpeakeasyBase {
  /**
   * The cardinality of the relationship from this object to another object.
   *
   * @remarks
   *
   * A `manyToOne` relationship means this object is the child object (the "many" side), and the referenced object (the "one" side) is the parent.
   *
   * A `oneToMany` relationship means this object is the parent object (the "one" side), and the referenced object (the "many" side) is the child.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cardinality" })
  cardinality?: CustomObjectDefinitionUpdateActionResponseRelationshipCardinalityEnum;

  /**
   * Field mappings in the form of `<this-object-field-name>`: `<other-object-field-name>`.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fields" })
  fields?: Record<string, string>;

  /**
   * The namespace where the related object is located
   */
  @SpeakeasyMetadata()
  @Expose({ name: "namespace" })
  namespace?: string;

  /**
   * The API name of the related object
   */
  @SpeakeasyMetadata()
  @Expose({ name: "object" })
  object?: string;

  /**
   * Specifies contraints to apply to custom object records.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recordConstraints" })
  @Type(
    () =>
      CustomObjectDefinitionUpdateActionResponseRelationshipRecordConstraints
  )
  recordConstraints?: CustomObjectDefinitionUpdateActionResponseRelationshipRecordConstraints;
}

/**
 * The type of the updating action on a custom object definition
 */
export enum CustomObjectDefinitionUpdateActionResponseTypeEnum {
  AddField = "addField",
  DeleteField = "deleteField",
  UpdateField = "updateField",
  UpdateObject = "updateObject",
  RenameField = "renameField",
  AddRelationship = "addRelationship",
  DeleteRelationship = "deleteRelationship",
}

export class CustomObjectDefinitionUpdateActionResponse extends SpeakeasyBase {
  /**
   * Optional property for `updateObject` action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * A reference to a field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "field" })
  @Type(() => UpdateCustomObjectCusotmField)
  field?: UpdateCustomObjectCusotmField;

  /**
   * Optional property for `updateObject` action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "label" })
  label?: string;

  /**
   * The namespace of the custom object definition to be updated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "namespace" })
  namespace?: string;

  /**
   * The API name of the custom object definition to be updated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "object" })
  object?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "relationship" })
  @Type(() => CustomObjectDefinitionUpdateActionResponseRelationship)
  relationship?: CustomObjectDefinitionUpdateActionResponseRelationship;

  /**
   * The type of the updating action on a custom object definition
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: CustomObjectDefinitionUpdateActionResponseTypeEnum;
}
