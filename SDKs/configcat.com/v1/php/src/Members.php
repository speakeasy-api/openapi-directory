<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Members 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Update Member Permissions
     * 
     * This endpoint adds a Member identified by the `userId` to one or more Permission Groups. 
     * This endpoint can also be used to move a Member between Permission Groups within a Product.
     * Only a single Permission Group can be set per Product.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddMemberToGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddMemberToGroupResponse
     */
	public function addMemberToGroup(
        \OpenAPI\OpenAPI\Models\Operations\AddMemberToGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddMemberToGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/organizations/{organizationId}/members/{userId}', \OpenAPI\OpenAPI\Models\Operations\AddMemberToGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "addUserToGroupRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddMemberToGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Delete Member from Organization
     * 
     * This endpoint removes a Member identified by the `userId` from the 
     * given Organization identified by the `organizationId` parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationMemberRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationMemberResponse
     */
	public function deleteOrganizationMember(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationMemberRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationMemberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/organizations/{organizationId}/members/{userId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationMemberRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationMemberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Delete Member from Product
     * 
     * This endpoint removes a Member identified by the `userId` from the 
     * given Product identified by the `productId` parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteProductMemberRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteProductMemberResponse
     */
	public function deleteProductMember(
        \OpenAPI\OpenAPI\Models\Operations\DeleteProductMemberRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteProductMemberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/products/{productId}/members/{userId}', \OpenAPI\OpenAPI\Models\Operations\DeleteProductMemberRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteProductMemberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * List Organization Members
     * 
     * This endpoint returns the list of Members that belongs 
     * to the given Organization, identified by the `organizationId` parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationMembersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationMembersResponse
     */
	public function getOrganizationMembers(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationMembersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationMembersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/organizations/{organizationId}/members', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationMembersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationMembersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/hal+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userModels = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\UserModel>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userModels = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\UserModel>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * List Product Members
     * 
     * This endpoint returns the list of Members that belongs 
     * to the given Product, identified by the `productId` parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProductMembersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProductMembersResponse
     */
	public function getProductMembers(
        \OpenAPI\OpenAPI\Models\Operations\GetProductMembersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProductMembersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/products/{productId}/members', \OpenAPI\OpenAPI\Models\Operations\GetProductMembersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProductMembersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/hal+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->memberModels = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MemberModel>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->memberModels = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MemberModel>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Invite Member
     * 
     * This endpoint invites a Member into the given Product identified by the `productId` parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\InviteMemberRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\InviteMemberResponse
     */
	public function inviteMember(
        \OpenAPI\OpenAPI\Models\Operations\InviteMemberRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\InviteMemberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/products/{productId}/members/invite', \OpenAPI\OpenAPI\Models\Operations\InviteMemberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "inviteMembersRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\InviteMemberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
}