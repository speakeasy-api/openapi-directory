"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AndroidInstrumentationTest = exports.AndroidInstrumentationTestOrchestratorOptionEnum = void 0;
var utils_1 = require("../../../internal/utils");
var appbundle_1 = require("./appbundle");
var filereference_1 = require("./filereference");
var shardingoption_1 = require("./shardingoption");
var class_transformer_1 = require("class-transformer");
/**
 * The option of whether running each test within its own invocation of instrumentation with Android Test Orchestrator or not. ** Orchestrator is only compatible with AndroidJUnitRunner version 1.1 or higher! ** Orchestrator offers the following benefits: - No shared state - Crashes are isolated - Logs are scoped per test See for more information about Android Test Orchestrator. If not set, the test will be run without the orchestrator.
 */
var AndroidInstrumentationTestOrchestratorOptionEnum;
(function (AndroidInstrumentationTestOrchestratorOptionEnum) {
    AndroidInstrumentationTestOrchestratorOptionEnum["OrchestratorOptionUnspecified"] = "ORCHESTRATOR_OPTION_UNSPECIFIED";
    AndroidInstrumentationTestOrchestratorOptionEnum["UseOrchestrator"] = "USE_ORCHESTRATOR";
    AndroidInstrumentationTestOrchestratorOptionEnum["DoNotUseOrchestrator"] = "DO_NOT_USE_ORCHESTRATOR";
})(AndroidInstrumentationTestOrchestratorOptionEnum = exports.AndroidInstrumentationTestOrchestratorOptionEnum || (exports.AndroidInstrumentationTestOrchestratorOptionEnum = {}));
/**
 * A test of an Android application that can control an Android component independently of its normal lifecycle. Android instrumentation tests run an application APK and test APK inside the same process on a virtual or physical AndroidDevice. They also specify a test runner class, such as com.google.GoogleTestRunner, which can vary on the specific instrumentation framework chosen. See for more information on types of Android tests.
 */
var AndroidInstrumentationTest = /** @class */ (function (_super) {
    __extends(AndroidInstrumentationTest, _super);
    function AndroidInstrumentationTest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "appApk" }),
        (0, class_transformer_1.Type)(function () { return filereference_1.FileReference; }),
        __metadata("design:type", filereference_1.FileReference)
    ], AndroidInstrumentationTest.prototype, "appApk", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "appBundle" }),
        (0, class_transformer_1.Type)(function () { return appbundle_1.AppBundle; }),
        __metadata("design:type", appbundle_1.AppBundle)
    ], AndroidInstrumentationTest.prototype, "appBundle", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "appPackageId" }),
        __metadata("design:type", String)
    ], AndroidInstrumentationTest.prototype, "appPackageId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "orchestratorOption" }),
        __metadata("design:type", String)
    ], AndroidInstrumentationTest.prototype, "orchestratorOption", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "shardingOption" }),
        (0, class_transformer_1.Type)(function () { return shardingoption_1.ShardingOption; }),
        __metadata("design:type", shardingoption_1.ShardingOption)
    ], AndroidInstrumentationTest.prototype, "shardingOption", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "testApk" }),
        (0, class_transformer_1.Type)(function () { return filereference_1.FileReference; }),
        __metadata("design:type", filereference_1.FileReference)
    ], AndroidInstrumentationTest.prototype, "testApk", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "testPackageId" }),
        __metadata("design:type", String)
    ], AndroidInstrumentationTest.prototype, "testPackageId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "testRunnerClass" }),
        __metadata("design:type", String)
    ], AndroidInstrumentationTest.prototype, "testRunnerClass", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "testTargets" }),
        __metadata("design:type", Array)
    ], AndroidInstrumentationTest.prototype, "testTargets", void 0);
    return AndroidInstrumentationTest;
}(utils_1.SpeakeasyBase));
exports.AndroidInstrumentationTest = AndroidInstrumentationTest;
