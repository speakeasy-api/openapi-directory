"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .assets_analysis import AssetsAnalysis
from .assets_correlation_matrix import AssetsCorrelationMatrix
from .assets_covariance_matrix import AssetsCovarianceMatrix
from .assets_kurtosis import AssetsKurtosis
from .assets_prices import AssetsPrices
from .assets_returns import AssetsReturns
from .assets_returns_simulation import AssetsReturnsSimulation
from .assets_skewness import AssetsSkewness
from .assets_variance import AssetsVariance
from .assets_volatility import AssetsVolatility
from .factors import Factors
from .portfolio_analysis import PortfolioAnalysis
from .portfolio_analysis_sharpe_ratio import PortfolioAnalysisSharpeRatio
from .portfolio_construction import PortfolioConstruction
from .portfolio_optimization import PortfolioOptimization
from .portfolio_optimization_mean_variance import PortfolioOptimizationMeanVariance
from .portfolio_simulation import PortfolioSimulation
from sdk.models import shared

SERVERS = [
    "https://api.portfoliooptimizer.io/v1",
    "https://eu-west-1.api.portfoliooptimizer.io/v1",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""Portfolio Optimizer is a [Web API](https://en.wikipedia.org/wiki/Web_API) to analyze and optimize investment portfolios (collection of financial assets such as stocks, bonds, ETFs, crypto-currencies) using modern portfolio theory algorithms (mean-variance, VaR, etc.).
    
    # API General Information
    
      Portfolio Optimizer is based on [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) for easy integration, uses [JSON](https://en.wikipedia.org/wiki/JSON) for the exchange of data and uses a standard [HTTP verb](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods) (`POST`) to represent the action(s).
    
    Portfolio Optimizer is also as secured as a Web API could be: 
    * [256-bit HTTPS Encryption](https://en.wikipedia.org/wiki/HTTPS)
    * No usage of cookies
    * No usage of personal data  
    
    ## API Headers 
    The following HTTP header(s) are required when calling Portfolio Optimizer endpoints:
    * `Content-type: application/json`  
      This header specifies that the data provided in input to the endpoint is in JSON format
    
    The following HTTP header(s) are optional when calling Portfolio Optimizer endpoints:
    * `Content-Encoding: gzip`  
      This header indicates that the data provided in input to the endpoint is compressed with gzip.
    * `X-API-Key: <private API key>`  
      This header enables [authenticated users](#auth) to provide their private [API key](#overview--api-key) in order to [benefit from higher API limits](#overview--api-limits)
    
    ## API Key
    Portfolio Optimizer is free to use, but not free to run.
    
    In order to obtain an API key and benefit from [higher API limits](#overview--api-limits), a *small* participation to Portfolio Optimizer running costs is required.
    
    This participation takes the form of coffee(s), with one coffee = one month of usage.
    
    <p><a href=\"https://www.buymeacoffee.com/portfolioopt\"><img alt='Buy a Coffee at buymeacoffee.com' src=\"https://img.buymeacoffee.com/button-api/?text=Buymeacoffee.com&emoji=&slug=portfolioopt&button_colour=000000&font_colour=ffffff&font_family=Cookie&outline_colour=ffffff&coffee_colour=FFDD00\"></a></p>
    
    
    > **Notes:** 
    > * Please make sure not to expose your API key publicly!
    
    ## API Limits 
    
    Portfolio Optimizer comes with *fairly reasonable* API limits.
    
    For anonymous users:  
    * The API requests are restricted to a subset of all the available endpoints and/or endpoints features  
    * The API requests are limited to 1 request per second for all the anonymous users combined, with concurrent requests rejected 
    * The API requests are limited to 1 second of execution time
    * The API requests are limited to 20 assets, 250 portfolios, 500 series data points and 5 factors
    
    For authenticated users with an [API key](#overview--api-key):  
    * The API requests have access to all the available endpoints and endpoints features
    * The API requests are limited to 10000 requests per 24 hour per API key, with concurrent requests queued
    * The API requests are limited to 2.5 seconds of execution time
    * The API requests are limited to 100 assets, 1250 portfolios, 2500 series data points and 25 factors
    
    > **Notes:** 
    > * It is possible to further relax the API limits, or to disable the API limits alltogether; please [contact the support](https://portfoliooptimizer.io/contact/) for more details.
    > * Information on the API rate limits are provided in response messages HTTP headers `x-ratelimit-*`:  
    >   * `x-ratelimit-limit-second`, the limit on the number of API requests per second
    >   * `x-ratelimit-remaining-second`, the number of remaining API requests in the current second    
    >   * `x-ratelimit-limit-minute`, the limit on the number of API requests per minute
    >   * ...
    
    ## API Regions
    Portfolio Optimizer servers are located in Western Europe.
    
    > **Notes:** 
    > * It is possible to deploy Portfolio Optimizer in other geographical regions, for example to improve the API latency; please [contact the support](https://portfoliooptimizer.io/contact/) for more details. 
    
    ## API Response Codes       
    
    Standard [HTTP response codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) are used by Portfolio Optimizer to provide details on the status of API requests.
    
    | HTTP Code | Description | Notes |
    | --------- | ----------- | ----- |
    | 200 | Request successfully processed | - |
    | 400 | Request failed to be processed because of incorrect content | The response message body contains information on the incorrect content |
    | 401 | Request failed to be processed because of invalid API key | - |
    | 404 | Request failed to be processed because of non existing endpoint | The requested endpoint might exist, but needs to be accessed with another HTTP method (e.g., `POST` instead of `GET`) |
    | 429 | Request failed to be processed because of API limits violated | The response message HTTP headers `x-ratelimit-*` contain information on the [API limits](#overview--api-limits) |
    | 500 | Request failed to be processed because of an internal error | Something went wrong on Portfolio Optimizer side, do not hesitate to [report the issue](#overview--support) |
    | 502 | Request failed to be processed because of a temporary connectivity error | Something went wrong on Portfolio Optimizer side, please check the [API status](#overview--api-status) and do not hesitate to [report the issue](#overview--support) |
    
    ## API Status  
    
    Portfolio Optimizer is monitored 24/7 by [UptimeRobot](https://stats.uptimerobot.com/wgW71SL1AW).
    
    # Support
    
    For any issue or question about Portfolio Optimizer, please do not hesitate to [contact the support](https://portfoliooptimizer.io/contact/).
    https://docs.portfoliooptimizer.io/ - External documentation
    """
    assets_analysis: AssetsAnalysis
    assets_correlation_matrix: AssetsCorrelationMatrix
    assets_covariance_matrix: AssetsCovarianceMatrix
    assets_kurtosis: AssetsKurtosis
    assets_prices: AssetsPrices
    assets_returns: AssetsReturns
    assets_returns_simulation: AssetsReturnsSimulation
    assets_skewness: AssetsSkewness
    assets_variance: AssetsVariance
    assets_volatility: AssetsVolatility
    factors: Factors
    portfolio_analysis: PortfolioAnalysis
    portfolio_analysis_sharpe_ratio: PortfolioAnalysisSharpeRatio
    portfolio_construction: PortfolioConstruction
    portfolio_optimization: PortfolioOptimization
    portfolio_optimization_mean_variance: PortfolioOptimizationMeanVariance
    portfolio_simulation: PortfolioSimulation

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.assets_analysis = AssetsAnalysis(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.assets_correlation_matrix = AssetsCorrelationMatrix(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.assets_covariance_matrix = AssetsCovarianceMatrix(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.assets_kurtosis = AssetsKurtosis(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.assets_prices = AssetsPrices(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.assets_returns = AssetsReturns(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.assets_returns_simulation = AssetsReturnsSimulation(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.assets_skewness = AssetsSkewness(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.assets_variance = AssetsVariance(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.assets_volatility = AssetsVolatility(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.factors = Factors(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.portfolio_analysis = PortfolioAnalysis(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.portfolio_analysis_sharpe_ratio = PortfolioAnalysisSharpeRatio(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.portfolio_construction = PortfolioConstruction(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.portfolio_optimization = PortfolioOptimization(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.portfolio_optimization_mean_variance = PortfolioOptimizationMeanVariance(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.portfolio_simulation = PortfolioSimulation(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    