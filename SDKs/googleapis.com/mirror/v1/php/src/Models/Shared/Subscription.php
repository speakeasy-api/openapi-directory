<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Subscription - A subscription to events on a collection.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Subscription
{
    /**
     * The URL where notifications should be delivered (must start with https://).
     * 
     * @var ?string $callbackUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('callbackUrl')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $callbackUrl = null;
    
    /**
     * The collection to subscribe to. Allowed values are:  
     * 
     * - timeline - Changes in the timeline including insertion, deletion, and updates. 
     * - locations - Location updates. 
     * - settings - Settings updates.
     * 
     * @var ?string $collection
     */
	#[\JMS\Serializer\Annotation\SerializedName('collection')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $collection = null;
    
    /**
     * The ID of the subscription.
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * The type of resource. This is always mirror#subscription.
     * 
     * @var ?string $kind
     */
	#[\JMS\Serializer\Annotation\SerializedName('kind')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $kind = null;
    
    /**
     * A notification delivered by the API.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Notification $notification
     */
	#[\JMS\Serializer\Annotation\SerializedName('notification')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Notification')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Notification $notification = null;
    
    /**
     * A list of operations that should be subscribed to. An empty list indicates that all operations on the collection should be subscribed to. Allowed values are:  
     * 
     * - UPDATE - The item has been updated. 
     * - INSERT - A new item has been inserted. 
     * - DELETE - The item has been deleted. 
     * - MENU_ACTION - A custom menu item has been triggered by the user.
     * 
     * @var ?array<string> $operation
     */
	#[\JMS\Serializer\Annotation\SerializedName('operation')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $operation = null;
    
    /**
     * The time at which this subscription was last modified, formatted according to RFC 3339.
     * 
     * @var ?\DateTime $updated
     */
	#[\JMS\Serializer\Annotation\SerializedName('updated')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $updated = null;
    
    /**
     * An opaque token sent to the subscriber in notifications so that it can determine the ID of the user.
     * 
     * @var ?string $userToken
     */
	#[\JMS\Serializer\Annotation\SerializedName('userToken')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $userToken = null;
    
    /**
     * A secret token sent to the subscriber in notifications so that it can verify that the notification was generated by Google.
     * 
     * @var ?string $verifyToken
     */
	#[\JMS\Serializer\Annotation\SerializedName('verifyToken')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $verifyToken = null;
    
	public function __construct()
	{
		$this->callbackUrl = null;
		$this->collection = null;
		$this->id = null;
		$this->kind = null;
		$this->notification = null;
		$this->operation = null;
		$this->updated = null;
		$this->userToken = null;
		$this->verifyToken = null;
	}
}
