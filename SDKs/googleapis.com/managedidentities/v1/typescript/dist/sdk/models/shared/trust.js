"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Trust = exports.TrustStateEnum = exports.TrustInput = exports.TrustTrustTypeEnum = exports.TrustTrustDirectionEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * Required. The trust direction, which decides if the current domain is trusted, trusting, or both.
 */
var TrustTrustDirectionEnum;
(function (TrustTrustDirectionEnum) {
    TrustTrustDirectionEnum["TrustDirectionUnspecified"] = "TRUST_DIRECTION_UNSPECIFIED";
    TrustTrustDirectionEnum["Inbound"] = "INBOUND";
    TrustTrustDirectionEnum["Outbound"] = "OUTBOUND";
    TrustTrustDirectionEnum["Bidirectional"] = "BIDIRECTIONAL";
})(TrustTrustDirectionEnum = exports.TrustTrustDirectionEnum || (exports.TrustTrustDirectionEnum = {}));
/**
 * Required. The type of trust represented by the trust resource.
 */
var TrustTrustTypeEnum;
(function (TrustTrustTypeEnum) {
    TrustTrustTypeEnum["TrustTypeUnspecified"] = "TRUST_TYPE_UNSPECIFIED";
    TrustTrustTypeEnum["Forest"] = "FOREST";
    TrustTrustTypeEnum["External"] = "EXTERNAL";
})(TrustTrustTypeEnum = exports.TrustTrustTypeEnum || (exports.TrustTrustTypeEnum = {}));
/**
 * Represents a relationship between two domains. This allows a controller in one domain to authenticate a user in another domain. If the trust is being changed, it will be placed into the UPDATING state, which indicates that the resource is being reconciled. At this point, Get will reflect an intermediate state.
 */
var TrustInput = /** @class */ (function (_super) {
    __extends(TrustInput, _super);
    function TrustInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "selectiveAuthentication" }),
        __metadata("design:type", Boolean)
    ], TrustInput.prototype, "selectiveAuthentication", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "targetDnsIpAddresses" }),
        __metadata("design:type", Array)
    ], TrustInput.prototype, "targetDnsIpAddresses", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "targetDomainName" }),
        __metadata("design:type", String)
    ], TrustInput.prototype, "targetDomainName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "trustDirection" }),
        __metadata("design:type", String)
    ], TrustInput.prototype, "trustDirection", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "trustHandshakeSecret" }),
        __metadata("design:type", String)
    ], TrustInput.prototype, "trustHandshakeSecret", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "trustType" }),
        __metadata("design:type", String)
    ], TrustInput.prototype, "trustType", void 0);
    return TrustInput;
}(utils_1.SpeakeasyBase));
exports.TrustInput = TrustInput;
/**
 * Output only. The current state of the trust.
 */
var TrustStateEnum;
(function (TrustStateEnum) {
    TrustStateEnum["StateUnspecified"] = "STATE_UNSPECIFIED";
    TrustStateEnum["Creating"] = "CREATING";
    TrustStateEnum["Updating"] = "UPDATING";
    TrustStateEnum["Deleting"] = "DELETING";
    TrustStateEnum["Connected"] = "CONNECTED";
    TrustStateEnum["Disconnected"] = "DISCONNECTED";
})(TrustStateEnum = exports.TrustStateEnum || (exports.TrustStateEnum = {}));
/**
 * Represents a relationship between two domains. This allows a controller in one domain to authenticate a user in another domain. If the trust is being changed, it will be placed into the UPDATING state, which indicates that the resource is being reconciled. At this point, Get will reflect an intermediate state.
 */
var Trust = /** @class */ (function (_super) {
    __extends(Trust, _super);
    function Trust() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "createTime" }),
        __metadata("design:type", String)
    ], Trust.prototype, "createTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "lastTrustHeartbeatTime" }),
        __metadata("design:type", String)
    ], Trust.prototype, "lastTrustHeartbeatTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "selectiveAuthentication" }),
        __metadata("design:type", Boolean)
    ], Trust.prototype, "selectiveAuthentication", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "state" }),
        __metadata("design:type", String)
    ], Trust.prototype, "state", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "stateDescription" }),
        __metadata("design:type", String)
    ], Trust.prototype, "stateDescription", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "targetDnsIpAddresses" }),
        __metadata("design:type", Array)
    ], Trust.prototype, "targetDnsIpAddresses", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "targetDomainName" }),
        __metadata("design:type", String)
    ], Trust.prototype, "targetDomainName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "trustDirection" }),
        __metadata("design:type", String)
    ], Trust.prototype, "trustDirection", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "trustHandshakeSecret" }),
        __metadata("design:type", String)
    ], Trust.prototype, "trustHandshakeSecret", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "trustType" }),
        __metadata("design:type", String)
    ], Trust.prototype, "trustType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "updateTime" }),
        __metadata("design:type", String)
    ], Trust.prototype, "updateTime", void 0);
    return Trust;
}(utils_1.SpeakeasyBase));
exports.Trust = Trust;
