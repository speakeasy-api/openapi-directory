<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class AccessPolicies 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create an Access Level. The longrunning operation from this RPC will have a successful status once the Access Level has propagated to long-lasting storage. Access Levels containing errors will result in an error response for the first error encountered.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesAccessLevelsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesAccessLevelsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesAccessLevelsCreateResponse
     */
	public function accesscontextmanagerAccessPoliciesAccessLevelsCreate(
        \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesAccessLevelsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesAccessLevelsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesAccessLevelsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/accessLevels', \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesAccessLevelsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "accessLevel", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesAccessLevelsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesAccessLevelsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all Access Levels for an access policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesAccessLevelsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesAccessLevelsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesAccessLevelsListResponse
     */
	public function accesscontextmanagerAccessPoliciesAccessLevelsList(
        \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesAccessLevelsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesAccessLevelsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesAccessLevelsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/accessLevels', \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesAccessLevelsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesAccessLevelsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesAccessLevelsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAccessLevelsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAccessLevelsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an `AccessPolicy`. Fails if this organization already has a `AccessPolicy`. The longrunning Operation will have a successful status once the `AccessPolicy` has propagated to long-lasting storage. Syntactic and basic semantic errors will be returned in `metadata` as a BadRequest proto.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesCreateResponse
     */
	public function accesscontextmanagerAccessPoliciesCreate(
        \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/accessPolicies');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "accessPolicy", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all AccessPolicies under a container.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesListResponse
     */
	public function accesscontextmanagerAccessPoliciesList(
        \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/accessPolicies');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAccessPoliciesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAccessPoliciesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a Service Perimeter. The longrunning operation from this RPC will have a successful status once the Service Perimeter has propagated to long-lasting storage. Service Perimeters containing errors will result in an error response for the first error encountered.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersCreateResponse
     */
	public function accesscontextmanagerAccessPoliciesServicePerimetersCreate(
        \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/servicePerimeters', \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "servicePerimeter", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a Service Perimeter by resource name. The longrunning operation from this RPC will have a successful status once the Service Perimeter has been removed from long-lasting storage.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersDeleteResponse
     */
	public function accesscontextmanagerAccessPoliciesServicePerimetersDelete(
        \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{name}', \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all Service Perimeters for an access policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersListResponse
     */
	public function accesscontextmanagerAccessPoliciesServicePerimetersList(
        \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/servicePerimeters', \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listServicePerimetersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListServicePerimetersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a Service Perimeter. The longrunning operation from this RPC will have a successful status once the changes to the Service Perimeter have propagated to long-lasting storage. Service Perimeter containing errors will result in an error response for the first error encountered.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersPatchResponse
     */
	public function accesscontextmanagerAccessPoliciesServicePerimetersPatch(
        \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{name}', \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "servicePerimeter", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AccesscontextmanagerAccessPoliciesServicePerimetersPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}