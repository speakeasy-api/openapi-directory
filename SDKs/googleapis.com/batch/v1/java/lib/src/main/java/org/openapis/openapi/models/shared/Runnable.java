/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Runnable - Runnable describes instructions for executing a specific script or container as part of a Task.
 */
public class Runnable {
    /**
     * By default, after a Runnable fails, no further Runnable are executed. This flag indicates that this Runnable must be run even if the Task has already failed. This is useful for Runnables that copy output files off of the VM or for debugging. The always_run flag does not override the Task's overall max_run_duration. If the max_run_duration has expired then no further Runnables will execute, not even always_run Runnables.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alwaysRun")
    public Boolean alwaysRun;
    public Runnable withAlwaysRun(Boolean alwaysRun) {
        this.alwaysRun = alwaysRun;
        return this;
    }
    
    /**
     * This flag allows a Runnable to continue running in the background while the Task executes subsequent Runnables. This is useful to provide services to other Runnables (or to provide debugging support tools like SSH servers).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("background")
    public Boolean background;
    public Runnable withBackground(Boolean background) {
        this.background = background;
        return this;
    }
    
    /**
     * Barrier runnable blocks until all tasks in a taskgroup reach it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("barrier")
    public Barrier barrier;
    public Runnable withBarrier(Barrier barrier) {
        this.barrier = barrier;
        return this;
    }
    
    /**
     * Container runnable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("container")
    public Container container;
    public Runnable withContainer(Container container) {
        this.container = container;
        return this;
    }
    
    /**
     * An Environment describes a collection of environment variables to set when executing Tasks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("environment")
    public Environment environment;
    public Runnable withEnvironment(Environment environment) {
        this.environment = environment;
        return this;
    }
    
    /**
     * Normally, a non-zero exit status causes the Task to fail. This flag allows execution of other Runnables to continue instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ignoreExitStatus")
    public Boolean ignoreExitStatus;
    public Runnable withIgnoreExitStatus(Boolean ignoreExitStatus) {
        this.ignoreExitStatus = ignoreExitStatus;
        return this;
    }
    
    /**
     * Script runnable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("script")
    public Script script;
    public Runnable withScript(Script script) {
        this.script = script;
        return this;
    }
    
    /**
     * Timeout for this Runnable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeout")
    public String timeout;
    public Runnable withTimeout(String timeout) {
        this.timeout = timeout;
        return this;
    }
    
}
