// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// PostFirewallsIDActionsSetRulesSetRulesRequestRuleDirectionEnum - Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.
type PostFirewallsIDActionsSetRulesSetRulesRequestRuleDirectionEnum string

const (
	PostFirewallsIDActionsSetRulesSetRulesRequestRuleDirectionEnumIn  PostFirewallsIDActionsSetRulesSetRulesRequestRuleDirectionEnum = "in"
	PostFirewallsIDActionsSetRulesSetRulesRequestRuleDirectionEnumOut PostFirewallsIDActionsSetRulesSetRulesRequestRuleDirectionEnum = "out"
)

func (e *PostFirewallsIDActionsSetRulesSetRulesRequestRuleDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "in":
		fallthrough
	case "out":
		*e = PostFirewallsIDActionsSetRulesSetRulesRequestRuleDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostFirewallsIDActionsSetRulesSetRulesRequestRuleDirectionEnum: %s", s)
	}
}

// PostFirewallsIDActionsSetRulesSetRulesRequestRuleProtocolEnum - Type of traffic to allow
type PostFirewallsIDActionsSetRulesSetRulesRequestRuleProtocolEnum string

const (
	PostFirewallsIDActionsSetRulesSetRulesRequestRuleProtocolEnumTCP  PostFirewallsIDActionsSetRulesSetRulesRequestRuleProtocolEnum = "tcp"
	PostFirewallsIDActionsSetRulesSetRulesRequestRuleProtocolEnumUDP  PostFirewallsIDActionsSetRulesSetRulesRequestRuleProtocolEnum = "udp"
	PostFirewallsIDActionsSetRulesSetRulesRequestRuleProtocolEnumIcmp PostFirewallsIDActionsSetRulesSetRulesRequestRuleProtocolEnum = "icmp"
	PostFirewallsIDActionsSetRulesSetRulesRequestRuleProtocolEnumEsp  PostFirewallsIDActionsSetRulesSetRulesRequestRuleProtocolEnum = "esp"
	PostFirewallsIDActionsSetRulesSetRulesRequestRuleProtocolEnumGre  PostFirewallsIDActionsSetRulesSetRulesRequestRuleProtocolEnum = "gre"
)

func (e *PostFirewallsIDActionsSetRulesSetRulesRequestRuleProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "tcp":
		fallthrough
	case "udp":
		fallthrough
	case "icmp":
		fallthrough
	case "esp":
		fallthrough
	case "gre":
		*e = PostFirewallsIDActionsSetRulesSetRulesRequestRuleProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostFirewallsIDActionsSetRulesSetRulesRequestRuleProtocolEnum: %s", s)
	}
}

type PostFirewallsIDActionsSetRulesSetRulesRequestRule struct {
	// Description of the Rule
	Description *string `json:"description,omitempty"`
	// List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.
	DestinationIps []string `json:"destination_ips,omitempty"`
	// Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.
	Direction PostFirewallsIDActionsSetRulesSetRulesRequestRuleDirectionEnum `json:"direction"`
	// Port or port range to which traffic will be allowed, only applicable for protocols TCP and UDP. A port range can be specified by separating two ports with a dash, e.g `1024-5000`.
	Port *string `json:"port,omitempty"`
	// Type of traffic to allow
	Protocol PostFirewallsIDActionsSetRulesSetRulesRequestRuleProtocolEnum `json:"protocol"`
	// List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.
	SourceIps []string `json:"source_ips,omitempty"`
}

type PostFirewallsIDActionsSetRulesSetRulesRequest struct {
	// Array of rules
	Rules []PostFirewallsIDActionsSetRulesSetRulesRequestRule `json:"rules"`
}

type PostFirewallsIDActionsSetRulesRequest struct {
	RequestBody *PostFirewallsIDActionsSetRulesSetRulesRequest `request:"mediaType=application/json"`
	// ID of the Firewall
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

// PostFirewallsIDActionsSetRulesActionsResponseActionError - Error message for the Action if error occurred, otherwise null
type PostFirewallsIDActionsSetRulesActionsResponseActionError struct {
	// Fixed machine readable code
	Code string `json:"code"`
	// Humanized error message
	Message string `json:"message"`
}

type PostFirewallsIDActionsSetRulesActionsResponseActionResources struct {
	// ID of the Resource
	ID int64 `json:"id"`
	// Type of resource referenced
	Type string `json:"type"`
}

// PostFirewallsIDActionsSetRulesActionsResponseActionStatusEnum - Status of the Action
type PostFirewallsIDActionsSetRulesActionsResponseActionStatusEnum string

const (
	PostFirewallsIDActionsSetRulesActionsResponseActionStatusEnumSuccess PostFirewallsIDActionsSetRulesActionsResponseActionStatusEnum = "success"
	PostFirewallsIDActionsSetRulesActionsResponseActionStatusEnumRunning PostFirewallsIDActionsSetRulesActionsResponseActionStatusEnum = "running"
	PostFirewallsIDActionsSetRulesActionsResponseActionStatusEnumError   PostFirewallsIDActionsSetRulesActionsResponseActionStatusEnum = "error"
)

func (e *PostFirewallsIDActionsSetRulesActionsResponseActionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "running":
		fallthrough
	case "error":
		*e = PostFirewallsIDActionsSetRulesActionsResponseActionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostFirewallsIDActionsSetRulesActionsResponseActionStatusEnum: %s", s)
	}
}

type PostFirewallsIDActionsSetRulesActionsResponseAction struct {
	// Command executed in the Action
	Command string `json:"command"`
	// Error message for the Action if error occurred, otherwise null
	Error PostFirewallsIDActionsSetRulesActionsResponseActionError `json:"error"`
	// Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
	Finished string `json:"finished"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Progress of Action in percent
	Progress float64 `json:"progress"`
	// Resources the Action relates to
	Resources []PostFirewallsIDActionsSetRulesActionsResponseActionResources `json:"resources"`
	// Point in time when the Action was started (in ISO-8601 format)
	Started string `json:"started"`
	// Status of the Action
	Status PostFirewallsIDActionsSetRulesActionsResponseActionStatusEnum `json:"status"`
}

type PostFirewallsIDActionsSetRulesActionsResponseMetaPagination struct {
	// ID of the last page available. Can be null if the current page is the last one.
	LastPage float64 `json:"last_page"`
	// ID of the next page. Can be null if the current page is the last one.
	NextPage float64 `json:"next_page"`
	// Current page number
	Page float64 `json:"page"`
	// Maximum number of items shown per page in the response
	PerPage float64 `json:"per_page"`
	// ID of the previous page. Can be null if the current page is the first one.
	PreviousPage float64 `json:"previous_page"`
	// The total number of entries that exist in the database for this query. Nullable if unknown.
	TotalEntries float64 `json:"total_entries"`
}

type PostFirewallsIDActionsSetRulesActionsResponseMeta struct {
	Pagination PostFirewallsIDActionsSetRulesActionsResponseMetaPagination `json:"pagination"`
}

// PostFirewallsIDActionsSetRulesActionsResponse - The `action` key contains one `set_firewall_rules` Action plus one `apply_firewall` Action per resource where the Firewall is active
type PostFirewallsIDActionsSetRulesActionsResponse struct {
	Actions []PostFirewallsIDActionsSetRulesActionsResponseAction `json:"actions"`
	Meta    *PostFirewallsIDActionsSetRulesActionsResponseMeta    `json:"meta,omitempty"`
}

type PostFirewallsIDActionsSetRulesResponse struct {
	// The `action` key contains one `set_firewall_rules` Action plus one `apply_firewall` Action per resource where the Firewall is active
	ActionsResponse *PostFirewallsIDActionsSetRulesActionsResponse
	ContentType     string
	StatusCode      int
	RawResponse     *http.Response
}
