/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Order - Order. Production access (all methods) requires the order manager role. Sandbox access does not.
 */
public class Order {
    /**
     * Whether the order was acknowledged.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acknowledged")
    public Boolean acknowledged;

    public Order withAcknowledged(Boolean acknowledged) {
        this.acknowledged = acknowledged;
        return this;
    }
    
    /**
     * List of key-value pairs that are attached to a given order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("annotations")
    public OrderOrderAnnotation[] annotations;

    public Order withAnnotations(OrderOrderAnnotation[] annotations) {
        this.annotations = annotations;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billingAddress")
    public OrderAddress billingAddress;

    public Order withBillingAddress(OrderAddress billingAddress) {
        this.billingAddress = billingAddress;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer")
    public OrderCustomer customer;

    public Order withCustomer(OrderCustomer customer) {
        this.customer = customer;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deliveryDetails")
    public OrderDeliveryDetails deliveryDetails;

    public Order withDeliveryDetails(OrderDeliveryDetails deliveryDetails) {
        this.deliveryDetails = deliveryDetails;
        return this;
    }
    
    /**
     * The REST ID of the order. Globally unique.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Order withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Identifies what kind of resource this is. Value: the fixed string "`content#order`"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public Order withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Line items that are ordered.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lineItems")
    public OrderLineItem[] lineItems;

    public Order withLineItems(OrderLineItem[] lineItems) {
        this.lineItems = lineItems;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchantId")
    public String merchantId;

    public Order withMerchantId(String merchantId) {
        this.merchantId = merchantId;
        return this;
    }
    
    /**
     * Merchant-provided ID of the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchantOrderId")
    public String merchantOrderId;

    public Order withMerchantOrderId(String merchantOrderId) {
        this.merchantOrderId = merchantOrderId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("netPriceAmount")
    public Price netPriceAmount;

    public Order withNetPriceAmount(Price netPriceAmount) {
        this.netPriceAmount = netPriceAmount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("netTaxAmount")
    public Price netTaxAmount;

    public Order withNetTaxAmount(Price netTaxAmount) {
        this.netTaxAmount = netTaxAmount;
        return this;
    }
    
    /**
     * The status of the payment. Acceptable values are: - "`paymentCaptured`" - "`paymentRejected`" - "`paymentSecured`" - "`pendingAuthorization`" 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentStatus")
    public String paymentStatus;

    public Order withPaymentStatus(String paymentStatus) {
        this.paymentStatus = paymentStatus;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pickupDetails")
    public OrderPickupDetails pickupDetails;

    public Order withPickupDetails(OrderPickupDetails pickupDetails) {
        this.pickupDetails = pickupDetails;
        return this;
    }
    
    /**
     * The date when the order was placed, in ISO 8601 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("placedDate")
    public String placedDate;

    public Order withPlacedDate(String placedDate) {
        this.placedDate = placedDate;
        return this;
    }
    
    /**
     * Promotions associated with the order. To determine which promotions apply to which products, check the `Promotions[].appliedItems[].lineItemId` field against the `LineItems[].id` field for each promotion. If a promotion is applied to more than 1 offerId, divide the discount value by the number of affected offers to determine how much discount to apply to each offerId. Examples: 1. To calculate price paid by the customer for a single line item including the discount: For each promotion, subtract the `LineItems[].adjustments[].priceAdjustment.value` amount from the `LineItems[].Price.value`. 2. To calculate price paid by the customer for a single line item including the discount in case of multiple quantity: For each promotion, divide the `LineItems[].adjustments[].priceAdjustment.value` by the quantity of products then subtract the resulting value from the `LineItems[].Product.Price.value` for each quantity item. Only 1 promotion can be applied to an offerId in a given order. To refund an item which had a promotion applied to it, make sure to refund the amount after first subtracting the promotion discount from the item price. More details about the program are here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("promotions")
    public OrderPromotion[] promotions;

    public Order withPromotions(OrderPromotion[] promotions) {
        this.promotions = promotions;
        return this;
    }
    
    /**
     * Refunds for the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refunds")
    public OrderRefund[] refunds;

    public Order withRefunds(OrderRefund[] refunds) {
        this.refunds = refunds;
        return this;
    }
    
    /**
     * Shipments of the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipments")
    public OrderShipment[] shipments;

    public Order withShipments(OrderShipment[] shipments) {
        this.shipments = shipments;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shippingCost")
    public Price shippingCost;

    public Order withShippingCost(Price shippingCost) {
        this.shippingCost = shippingCost;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shippingCostTax")
    public Price shippingCostTax;

    public Order withShippingCostTax(Price shippingCostTax) {
        this.shippingCostTax = shippingCostTax;
        return this;
    }
    
    /**
     * The status of the order. Acceptable values are: - "`canceled`" - "`delivered`" - "`inProgress`" - "`partiallyDelivered`" - "`partiallyReturned`" - "`partiallyShipped`" - "`pendingShipment`" - "`returned`" - "`shipped`" 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;

    public Order withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * The party responsible for collecting and remitting taxes. Acceptable values are: - "`marketplaceFacilitator`" - "`merchant`" 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxCollector")
    public String taxCollector;

    public Order withTaxCollector(String taxCollector) {
        this.taxCollector = taxCollector;
        return this;
    }
    
    public Order(){}
}
