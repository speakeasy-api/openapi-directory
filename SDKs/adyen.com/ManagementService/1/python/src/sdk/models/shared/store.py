"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import links as shared_links
from ..shared import storelocation as shared_storelocation
from ..shared import storesplitconfiguration as shared_storesplitconfiguration
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class StoreStatusEnum(str, Enum):
    r"""The status of the store. Possible values are:
    
    - **active**. This value is assigned automatically when a store is created. 
    - **inactive**. The terminals under the store are blocked from accepting new transactions, but capturing outstanding transactions is still possible.
    - **closed**. This status is irreversible. The terminals under the store are reassigned to the merchant inventory.
    """
    ACTIVE = 'active'
    CLOSED = 'closed'
    INACTIVE = 'inactive'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Store:
    r"""OK - the request has succeeded."""
    
    links: Optional[shared_links.Links] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_links'), 'exclude': lambda f: f is None }})  
    address: Optional[shared_storelocation.StoreLocation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})  
    business_line_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('businessLineIds'), 'exclude': lambda f: f is None }})
    r"""The unique identifiers of the [business lines](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/businesslines__resParam_id) that the store is associated with.
     If not specified, the business line of the merchant account is used. Required when there are multiple business lines under the merchant account.
    """  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the store."""  
    external_reference_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('externalReferenceId'), 'exclude': lambda f: f is None }})
    r"""When using the Zip payment method: The location ID that Zip has assigned to your store."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of the store. This value is generated by Adyen."""  
    merchant_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantId'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of the merchant account that the store belongs to."""  
    phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneNumber'), 'exclude': lambda f: f is None }})
    r"""The phone number of the store, including '+' and country code."""  
    reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference'), 'exclude': lambda f: f is None }})
    r"""A reference to recognize the store by. Also known as the store code.
     Allowed characters: Lowercase and uppercase letters without diacritics, numbers 0 through 9, hyphen (-), and underscore (_)
    """  
    shopper_statement: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shopperStatement'), 'exclude': lambda f: f is None }})
    r"""The store name shown on the shopper's bank or credit card statement and on the shopper receipt."""  
    split_configuration: Optional[shared_storesplitconfiguration.StoreSplitConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('splitConfiguration'), 'exclude': lambda f: f is None }})  
    status: Optional[StoreStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the store. Possible values are:
    
    - **active**. This value is assigned automatically when a store is created. 
    - **inactive**. The terminals under the store are blocked from accepting new transactions, but capturing outstanding transactions is still possible.
    - **closed**. This status is irreversible. The terminals under the store are reassigned to the merchant inventory.
    """  
    