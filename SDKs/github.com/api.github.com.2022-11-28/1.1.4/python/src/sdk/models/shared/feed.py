"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import link_with_type as shared_link_with_type
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FeedLinks:
    
    timeline: shared_link_with_type.LinkWithType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeline') }})
    r"""Hypermedia Link with Type"""  
    user: shared_link_with_type.LinkWithType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user') }})
    r"""Hypermedia Link with Type"""  
    current_user: Optional[shared_link_with_type.LinkWithType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_user'), 'exclude': lambda f: f is None }})
    r"""Hypermedia Link with Type"""  
    current_user_actor: Optional[shared_link_with_type.LinkWithType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_user_actor'), 'exclude': lambda f: f is None }})
    r"""Hypermedia Link with Type"""  
    current_user_organization: Optional[shared_link_with_type.LinkWithType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_user_organization'), 'exclude': lambda f: f is None }})
    r"""Hypermedia Link with Type"""  
    current_user_organizations: Optional[list[shared_link_with_type.LinkWithType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_user_organizations'), 'exclude': lambda f: f is None }})  
    current_user_public: Optional[shared_link_with_type.LinkWithType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_user_public'), 'exclude': lambda f: f is None }})
    r"""Hypermedia Link with Type"""  
    repository_discussions: Optional[shared_link_with_type.LinkWithType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repository_discussions'), 'exclude': lambda f: f is None }})
    r"""Hypermedia Link with Type"""  
    repository_discussions_category: Optional[shared_link_with_type.LinkWithType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repository_discussions_category'), 'exclude': lambda f: f is None }})
    r"""Hypermedia Link with Type"""  
    security_advisories: Optional[shared_link_with_type.LinkWithType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('security_advisories'), 'exclude': lambda f: f is None }})
    r"""Hypermedia Link with Type"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Feed:
    r"""Feed"""
    
    links: FeedLinks = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_links') }})  
    timeline_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeline_url') }})  
    user_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_url') }})  
    current_user_actor_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_user_actor_url'), 'exclude': lambda f: f is None }})  
    current_user_organization_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_user_organization_url'), 'exclude': lambda f: f is None }})  
    current_user_organization_urls: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_user_organization_urls'), 'exclude': lambda f: f is None }})  
    current_user_public_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_user_public_url'), 'exclude': lambda f: f is None }})  
    current_user_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_user_url'), 'exclude': lambda f: f is None }})  
    repository_discussions_category_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repository_discussions_category_url'), 'exclude': lambda f: f is None }})
    r"""A feed of discussions for a given repository and category."""  
    repository_discussions_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repository_discussions_url'), 'exclude': lambda f: f is None }})
    r"""A feed of discussions for a given repository."""  
    security_advisories_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('security_advisories_url'), 'exclude': lambda f: f is None }})  
    