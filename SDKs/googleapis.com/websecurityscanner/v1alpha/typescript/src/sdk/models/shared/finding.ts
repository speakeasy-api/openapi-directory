/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { OutdatedLibrary } from "./outdatedlibrary";
import { ViolatingResource } from "./violatingresource";
import { VulnerableHeaders } from "./vulnerableheaders";
import { VulnerableParameters } from "./vulnerableparameters";
import { Xss } from "./xss";
import { Expose, Type } from "class-transformer";

/**
 * The type of the Finding.
 */
export enum FindingFindingTypeEnum {
  FindingTypeUnspecified = "FINDING_TYPE_UNSPECIFIED",
  MixedContent = "MIXED_CONTENT",
  OutdatedLibrary = "OUTDATED_LIBRARY",
  RosettaFlash = "ROSETTA_FLASH",
  XssCallback = "XSS_CALLBACK",
  XssError = "XSS_ERROR",
  ClearTextPassword = "CLEAR_TEXT_PASSWORD",
  InvalidContentType = "INVALID_CONTENT_TYPE",
  XssAngularCallback = "XSS_ANGULAR_CALLBACK",
  InvalidHeader = "INVALID_HEADER",
  MisspelledSecurityHeaderName = "MISSPELLED_SECURITY_HEADER_NAME",
  MismatchingSecurityHeaderValues = "MISMATCHING_SECURITY_HEADER_VALUES",
}

/**
 * A Finding resource represents a vulnerability instance identified during a ScanRun.
 */
export class Finding extends SpeakeasyBase {
  /**
   * The body of the request that triggered the vulnerability.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "body" })
  body?: string;

  /**
   * The description of the vulnerability.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The URL where the browser lands when the vulnerability is detected.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "finalUrl" })
  finalUrl?: string;

  /**
   * The type of the Finding.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "findingType" })
  findingType?: FindingFindingTypeEnum;

  /**
   * If the vulnerability was originated from nested IFrame, the immediate parent IFrame is reported.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "frameUrl" })
  frameUrl?: string;

  /**
   * The URL produced by the server-side fuzzer and used in the request that triggered the vulnerability.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fuzzedUrl" })
  fuzzedUrl?: string;

  /**
   * The http method of the request that triggered the vulnerability, in uppercase.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "httpMethod" })
  httpMethod?: string;

  /**
   * The resource name of the Finding. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}/scanruns/{scanRunId}/findings/{findingId}'. The finding IDs are generated by the system.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Information reported for an outdated library.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "outdatedLibrary" })
  @Type(() => OutdatedLibrary)
  outdatedLibrary?: OutdatedLibrary;

  /**
   * The URL containing human-readable payload that user can leverage to reproduce the vulnerability.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reproductionUrl" })
  reproductionUrl?: string;

  /**
   * The tracking ID uniquely identifies a vulnerability instance across multiple ScanRuns.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "trackingId" })
  trackingId?: string;

  /**
   * Information regarding any resource causing the vulnerability such as JavaScript sources, image, audio files, etc.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "violatingResource" })
  @Type(() => ViolatingResource)
  violatingResource?: ViolatingResource;

  /**
   * Information about vulnerable or missing HTTP Headers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vulnerableHeaders" })
  @Type(() => VulnerableHeaders)
  vulnerableHeaders?: VulnerableHeaders;

  /**
   * Information about vulnerable request parameters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vulnerableParameters" })
  @Type(() => VulnerableParameters)
  vulnerableParameters?: VulnerableParameters;

  /**
   * Information reported for an XSS.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "xss" })
  @Type(() => Xss)
  xss?: Xss;
}
