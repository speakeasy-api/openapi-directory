/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { EnterpriseCrmEventbusProtoEventParameters } from "./enterprisecrmeventbusprotoeventparameters";
import { EnterpriseCrmFrontendsEventbusProtoParameterEntry } from "./enterprisecrmfrontendseventbusprotoparameterentry";
import { GoogleCloudIntegrationsV1alphaValueType } from "./googlecloudintegrationsv1alphavaluetype";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The request for scheduling an integration.
 */
export class GoogleCloudIntegrationsV1alphaScheduleIntegrationsRequest extends SpeakeasyBase {
  /**
   * Optional. Input parameters used by integration execution.
   */
  @SpeakeasyMetadata({ elemType: GoogleCloudIntegrationsV1alphaValueType })
  @Expose({ name: "inputParameters" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, GoogleCloudIntegrationsV1alphaValueType> = {};
      for (const key in value) {
        obj[key] = objectToClass(
          value[key],
          GoogleCloudIntegrationsV1alphaValueType
        );
      }
      return obj;
    },
    { toClassOnly: true }
  )
  inputParameters?: Record<string, GoogleCloudIntegrationsV1alphaValueType>;

  /**
   * Parameters are a part of Event and can be used to communicate between different tasks that are part of the same integration execution.
   */
  @SpeakeasyMetadata({
    elemType: EnterpriseCrmFrontendsEventbusProtoParameterEntry,
  })
  @Expose({ name: "parameterEntries" })
  @Type(() => EnterpriseCrmFrontendsEventbusProtoParameterEntry)
  parameterEntries?: EnterpriseCrmFrontendsEventbusProtoParameterEntry[];

  /**
   * LINT.IfChange This message is used for processing and persisting (when applicable) key value pair parameters for each event in the event bus. Please see
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parameters" })
  @Type(() => EnterpriseCrmEventbusProtoEventParameters)
  parameters?: EnterpriseCrmEventbusProtoEventParameters;

  /**
   * This is used to de-dup incoming request: if the duplicate request was detected, the response from the previous execution is returned.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestId" })
  requestId?: string;

  /**
   * The time that the integration should be executed. If the time is less or equal to the current time, the integration is executed immediately.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scheduleTime" })
  scheduleTime?: string;

  /**
   * Matched against all {@link TriggerConfig}s across all integrations. i.e. TriggerConfig.trigger_id.equals(trigger_id)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "triggerId" })
  triggerId?: string;
}
