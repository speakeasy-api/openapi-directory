"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthorizeSecurityGroupEgressRequest = exports.AuthorizeSecurityGroupEgressRequestTagSpecifications = exports.AuthorizeSecurityGroupEgressRequestTagSpecificationsTags = exports.AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum = exports.AuthorizeSecurityGroupEgressRequestIpPermissions = exports.AuthorizeSecurityGroupEgressRequestIpPermissionsUserIdGroupPairs = exports.AuthorizeSecurityGroupEgressRequestIpPermissionsPrefixListIds = exports.AuthorizeSecurityGroupEgressRequestIpPermissionsIpv6Ranges = exports.AuthorizeSecurityGroupEgressRequestIpPermissionsIpRanges = void 0;
var utils_1 = require("../../../internal/utils");
/**
 * Describes an IPv4 range.
 */
var AuthorizeSecurityGroupEgressRequestIpPermissionsIpRanges = /** @class */ (function (_super) {
    __extends(AuthorizeSecurityGroupEgressRequestIpPermissionsIpRanges, _super);
    function AuthorizeSecurityGroupEgressRequestIpPermissionsIpRanges() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AuthorizeSecurityGroupEgressRequestIpPermissionsIpRanges.prototype, "cidrIp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AuthorizeSecurityGroupEgressRequestIpPermissionsIpRanges.prototype, "description", void 0);
    return AuthorizeSecurityGroupEgressRequestIpPermissionsIpRanges;
}(utils_1.SpeakeasyBase));
exports.AuthorizeSecurityGroupEgressRequestIpPermissionsIpRanges = AuthorizeSecurityGroupEgressRequestIpPermissionsIpRanges;
/**
 * [EC2-VPC only] Describes an IPv6 range.
 */
var AuthorizeSecurityGroupEgressRequestIpPermissionsIpv6Ranges = /** @class */ (function (_super) {
    __extends(AuthorizeSecurityGroupEgressRequestIpPermissionsIpv6Ranges, _super);
    function AuthorizeSecurityGroupEgressRequestIpPermissionsIpv6Ranges() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AuthorizeSecurityGroupEgressRequestIpPermissionsIpv6Ranges.prototype, "cidrIpv6", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AuthorizeSecurityGroupEgressRequestIpPermissionsIpv6Ranges.prototype, "description", void 0);
    return AuthorizeSecurityGroupEgressRequestIpPermissionsIpv6Ranges;
}(utils_1.SpeakeasyBase));
exports.AuthorizeSecurityGroupEgressRequestIpPermissionsIpv6Ranges = AuthorizeSecurityGroupEgressRequestIpPermissionsIpv6Ranges;
/**
 * Describes a prefix list ID.
 */
var AuthorizeSecurityGroupEgressRequestIpPermissionsPrefixListIds = /** @class */ (function (_super) {
    __extends(AuthorizeSecurityGroupEgressRequestIpPermissionsPrefixListIds, _super);
    function AuthorizeSecurityGroupEgressRequestIpPermissionsPrefixListIds() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AuthorizeSecurityGroupEgressRequestIpPermissionsPrefixListIds.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AuthorizeSecurityGroupEgressRequestIpPermissionsPrefixListIds.prototype, "prefixListId", void 0);
    return AuthorizeSecurityGroupEgressRequestIpPermissionsPrefixListIds;
}(utils_1.SpeakeasyBase));
exports.AuthorizeSecurityGroupEgressRequestIpPermissionsPrefixListIds = AuthorizeSecurityGroupEgressRequestIpPermissionsPrefixListIds;
/**
 * <p>Describes a security group and Amazon Web Services account ID pair.</p> <note> <p>We are retiring EC2-Classic. We recommend that you migrate from EC2-Classic to a VPC. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-migrate.html">Migrate from EC2-Classic to a VPC</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </note>
 */
var AuthorizeSecurityGroupEgressRequestIpPermissionsUserIdGroupPairs = /** @class */ (function (_super) {
    __extends(AuthorizeSecurityGroupEgressRequestIpPermissionsUserIdGroupPairs, _super);
    function AuthorizeSecurityGroupEgressRequestIpPermissionsUserIdGroupPairs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AuthorizeSecurityGroupEgressRequestIpPermissionsUserIdGroupPairs.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AuthorizeSecurityGroupEgressRequestIpPermissionsUserIdGroupPairs.prototype, "groupId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AuthorizeSecurityGroupEgressRequestIpPermissionsUserIdGroupPairs.prototype, "groupName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AuthorizeSecurityGroupEgressRequestIpPermissionsUserIdGroupPairs.prototype, "peeringStatus", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AuthorizeSecurityGroupEgressRequestIpPermissionsUserIdGroupPairs.prototype, "userId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AuthorizeSecurityGroupEgressRequestIpPermissionsUserIdGroupPairs.prototype, "vpcId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AuthorizeSecurityGroupEgressRequestIpPermissionsUserIdGroupPairs.prototype, "vpcPeeringConnectionId", void 0);
    return AuthorizeSecurityGroupEgressRequestIpPermissionsUserIdGroupPairs;
}(utils_1.SpeakeasyBase));
exports.AuthorizeSecurityGroupEgressRequestIpPermissionsUserIdGroupPairs = AuthorizeSecurityGroupEgressRequestIpPermissionsUserIdGroupPairs;
/**
 * Describes a set of permissions for a security group rule.
 */
var AuthorizeSecurityGroupEgressRequestIpPermissions = /** @class */ (function (_super) {
    __extends(AuthorizeSecurityGroupEgressRequestIpPermissions, _super);
    function AuthorizeSecurityGroupEgressRequestIpPermissions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], AuthorizeSecurityGroupEgressRequestIpPermissions.prototype, "fromPort", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AuthorizeSecurityGroupEgressRequestIpPermissions.prototype, "ipProtocol", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: AuthorizeSecurityGroupEgressRequestIpPermissionsIpRanges,
        }),
        __metadata("design:type", Array)
    ], AuthorizeSecurityGroupEgressRequestIpPermissions.prototype, "ipRanges", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: AuthorizeSecurityGroupEgressRequestIpPermissionsIpv6Ranges,
        }),
        __metadata("design:type", Array)
    ], AuthorizeSecurityGroupEgressRequestIpPermissions.prototype, "ipv6Ranges", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: AuthorizeSecurityGroupEgressRequestIpPermissionsPrefixListIds,
        }),
        __metadata("design:type", Array)
    ], AuthorizeSecurityGroupEgressRequestIpPermissions.prototype, "prefixListIds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], AuthorizeSecurityGroupEgressRequestIpPermissions.prototype, "toPort", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: AuthorizeSecurityGroupEgressRequestIpPermissionsUserIdGroupPairs,
        }),
        __metadata("design:type", Array)
    ], AuthorizeSecurityGroupEgressRequestIpPermissions.prototype, "userIdGroupPairs", void 0);
    return AuthorizeSecurityGroupEgressRequestIpPermissions;
}(utils_1.SpeakeasyBase));
exports.AuthorizeSecurityGroupEgressRequestIpPermissions = AuthorizeSecurityGroupEgressRequestIpPermissions;
/**
 * The type of resource to tag on creation.
 */
var AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum;
(function (AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum) {
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["CapacityReservation"] = "capacity-reservation";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["ClientVpnEndpoint"] = "client-vpn-endpoint";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["CustomerGateway"] = "customer-gateway";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["CarrierGateway"] = "carrier-gateway";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["CoipPool"] = "coip-pool";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["DedicatedHost"] = "dedicated-host";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["DhcpOptions"] = "dhcp-options";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["EgressOnlyInternetGateway"] = "egress-only-internet-gateway";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["ElasticIp"] = "elastic-ip";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["ElasticGpu"] = "elastic-gpu";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["ExportImageTask"] = "export-image-task";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["ExportInstanceTask"] = "export-instance-task";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["Fleet"] = "fleet";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["FpgaImage"] = "fpga-image";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["HostReservation"] = "host-reservation";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["Image"] = "image";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["ImportImageTask"] = "import-image-task";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["ImportSnapshotTask"] = "import-snapshot-task";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["Instance"] = "instance";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["InstanceEventWindow"] = "instance-event-window";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["InternetGateway"] = "internet-gateway";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["Ipam"] = "ipam";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["IpamPool"] = "ipam-pool";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["IpamScope"] = "ipam-scope";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["Ipv4poolEc2"] = "ipv4pool-ec2";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["Ipv6poolEc2"] = "ipv6pool-ec2";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["KeyPair"] = "key-pair";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["LaunchTemplate"] = "launch-template";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["LocalGateway"] = "local-gateway";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["LocalGatewayRouteTable"] = "local-gateway-route-table";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["LocalGatewayVirtualInterface"] = "local-gateway-virtual-interface";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["LocalGatewayVirtualInterfaceGroup"] = "local-gateway-virtual-interface-group";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["LocalGatewayRouteTableVpcAssociation"] = "local-gateway-route-table-vpc-association";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["LocalGatewayRouteTableVirtualInterfaceGroupAssociation"] = "local-gateway-route-table-virtual-interface-group-association";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["Natgateway"] = "natgateway";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["NetworkAcl"] = "network-acl";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["NetworkInterface"] = "network-interface";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["NetworkInsightsAnalysis"] = "network-insights-analysis";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["NetworkInsightsPath"] = "network-insights-path";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["NetworkInsightsAccessScope"] = "network-insights-access-scope";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["NetworkInsightsAccessScopeAnalysis"] = "network-insights-access-scope-analysis";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["PlacementGroup"] = "placement-group";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["PrefixList"] = "prefix-list";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["ReplaceRootVolumeTask"] = "replace-root-volume-task";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["ReservedInstances"] = "reserved-instances";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["RouteTable"] = "route-table";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["SecurityGroup"] = "security-group";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["SecurityGroupRule"] = "security-group-rule";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["Snapshot"] = "snapshot";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["SpotFleetRequest"] = "spot-fleet-request";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["SpotInstancesRequest"] = "spot-instances-request";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["Subnet"] = "subnet";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["SubnetCidrReservation"] = "subnet-cidr-reservation";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["TrafficMirrorFilter"] = "traffic-mirror-filter";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["TrafficMirrorSession"] = "traffic-mirror-session";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["TrafficMirrorTarget"] = "traffic-mirror-target";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["TransitGateway"] = "transit-gateway";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["TransitGatewayAttachment"] = "transit-gateway-attachment";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["TransitGatewayConnectPeer"] = "transit-gateway-connect-peer";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["TransitGatewayMulticastDomain"] = "transit-gateway-multicast-domain";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["TransitGatewayPolicyTable"] = "transit-gateway-policy-table";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["TransitGatewayRouteTable"] = "transit-gateway-route-table";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["TransitGatewayRouteTableAnnouncement"] = "transit-gateway-route-table-announcement";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["Volume"] = "volume";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["Vpc"] = "vpc";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["VpcEndpoint"] = "vpc-endpoint";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["VpcEndpointConnection"] = "vpc-endpoint-connection";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["VpcEndpointService"] = "vpc-endpoint-service";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["VpcEndpointServicePermission"] = "vpc-endpoint-service-permission";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["VpcPeeringConnection"] = "vpc-peering-connection";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["VpnConnection"] = "vpn-connection";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["VpnGateway"] = "vpn-gateway";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["VpcFlowLog"] = "vpc-flow-log";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["CapacityReservationFleet"] = "capacity-reservation-fleet";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["TrafficMirrorFilterRule"] = "traffic-mirror-filter-rule";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["VpcEndpointConnectionDeviceType"] = "vpc-endpoint-connection-device-type";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["VerifiedAccessInstance"] = "verified-access-instance";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["VerifiedAccessGroup"] = "verified-access-group";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["VerifiedAccessEndpoint"] = "verified-access-endpoint";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["VerifiedAccessPolicy"] = "verified-access-policy";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["VerifiedAccessTrustProvider"] = "verified-access-trust-provider";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["VpnConnectionDeviceType"] = "vpn-connection-device-type";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["VpcBlockPublicAccessExclusion"] = "vpc-block-public-access-exclusion";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["IpamResourceDiscovery"] = "ipam-resource-discovery";
    AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum["IpamResourceDiscoveryAssociation"] = "ipam-resource-discovery-association";
})(AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum = exports.AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum || (exports.AuthorizeSecurityGroupEgressRequestTagSpecificationsResourceTypeEnum = {}));
/**
 * Describes a tag.
 */
var AuthorizeSecurityGroupEgressRequestTagSpecificationsTags = /** @class */ (function (_super) {
    __extends(AuthorizeSecurityGroupEgressRequestTagSpecificationsTags, _super);
    function AuthorizeSecurityGroupEgressRequestTagSpecificationsTags() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AuthorizeSecurityGroupEgressRequestTagSpecificationsTags.prototype, "key", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AuthorizeSecurityGroupEgressRequestTagSpecificationsTags.prototype, "value", void 0);
    return AuthorizeSecurityGroupEgressRequestTagSpecificationsTags;
}(utils_1.SpeakeasyBase));
exports.AuthorizeSecurityGroupEgressRequestTagSpecificationsTags = AuthorizeSecurityGroupEgressRequestTagSpecificationsTags;
/**
 * <p>The tags to apply to a resource when the resource is being created. When you specify a tag, you must specify the resource type to tag, otherwise the request will fail.</p> <note> <p>The <code>Valid Values</code> lists all the resource types that can be tagged. However, the action you're using might not support tagging all of these resource types. If you try to tag a resource type that is unsupported for the action you're using, you'll get an error.</p> </note>
 */
var AuthorizeSecurityGroupEgressRequestTagSpecifications = /** @class */ (function (_super) {
    __extends(AuthorizeSecurityGroupEgressRequestTagSpecifications, _super);
    function AuthorizeSecurityGroupEgressRequestTagSpecifications() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AuthorizeSecurityGroupEgressRequestTagSpecifications.prototype, "resourceType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: AuthorizeSecurityGroupEgressRequestTagSpecificationsTags,
        }),
        __metadata("design:type", Array)
    ], AuthorizeSecurityGroupEgressRequestTagSpecifications.prototype, "tags", void 0);
    return AuthorizeSecurityGroupEgressRequestTagSpecifications;
}(utils_1.SpeakeasyBase));
exports.AuthorizeSecurityGroupEgressRequestTagSpecifications = AuthorizeSecurityGroupEgressRequestTagSpecifications;
var AuthorizeSecurityGroupEgressRequest = /** @class */ (function (_super) {
    __extends(AuthorizeSecurityGroupEgressRequest, _super);
    function AuthorizeSecurityGroupEgressRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AuthorizeSecurityGroupEgressRequest.prototype, "cidrIp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], AuthorizeSecurityGroupEgressRequest.prototype, "dryRun", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], AuthorizeSecurityGroupEgressRequest.prototype, "fromPort", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AuthorizeSecurityGroupEgressRequest.prototype, "groupId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: AuthorizeSecurityGroupEgressRequestIpPermissions,
        }),
        __metadata("design:type", Array)
    ], AuthorizeSecurityGroupEgressRequest.prototype, "ipPermissions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AuthorizeSecurityGroupEgressRequest.prototype, "ipProtocol", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AuthorizeSecurityGroupEgressRequest.prototype, "sourceSecurityGroupName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AuthorizeSecurityGroupEgressRequest.prototype, "sourceSecurityGroupOwnerId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: AuthorizeSecurityGroupEgressRequestTagSpecifications,
        }),
        __metadata("design:type", Array)
    ], AuthorizeSecurityGroupEgressRequest.prototype, "tagSpecifications", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], AuthorizeSecurityGroupEgressRequest.prototype, "toPort", void 0);
    return AuthorizeSecurityGroupEgressRequest;
}(utils_1.SpeakeasyBase));
exports.AuthorizeSecurityGroupEgressRequest = AuthorizeSecurityGroupEgressRequest;
