// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateSimulationJobHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// CreateSimulationJobRequestBodyCompute - Compute information for the simulation job.
type CreateSimulationJobRequestBodyCompute struct {
	ComputeType         *shared.ComputeTypeEnum `json:"computeType,omitempty"`
	GpuUnitLimit        *int64                  `json:"gpuUnitLimit,omitempty"`
	SimulationUnitLimit *int64                  `json:"simulationUnitLimit,omitempty"`
}

// CreateSimulationJobRequestBodyFailureBehaviorEnum - <p>The failure behavior the simulation job.</p> <dl> <dt>Continue</dt> <dd> <p>Leaves the instance running for its maximum timeout duration after a <code>4XX</code> error code.</p> </dd> <dt>Fail</dt> <dd> <p>Stop the simulation job and terminate the instance.</p> </dd> </dl>
type CreateSimulationJobRequestBodyFailureBehaviorEnum string

const (
	CreateSimulationJobRequestBodyFailureBehaviorEnumFail     CreateSimulationJobRequestBodyFailureBehaviorEnum = "Fail"
	CreateSimulationJobRequestBodyFailureBehaviorEnumContinue CreateSimulationJobRequestBodyFailureBehaviorEnum = "Continue"
)

func (e *CreateSimulationJobRequestBodyFailureBehaviorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Fail":
		fallthrough
	case "Continue":
		*e = CreateSimulationJobRequestBodyFailureBehaviorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSimulationJobRequestBodyFailureBehaviorEnum: %s", s)
	}
}

// CreateSimulationJobRequestBodyLoggingConfig - The logging configuration.
type CreateSimulationJobRequestBodyLoggingConfig struct {
	RecordAllRosTopics *bool `json:"recordAllRosTopics,omitempty"`
}

// CreateSimulationJobRequestBodyOutputLocation - The output location.
type CreateSimulationJobRequestBodyOutputLocation struct {
	S3Bucket *string `json:"s3Bucket,omitempty"`
	S3Prefix *string `json:"s3Prefix,omitempty"`
}

// CreateSimulationJobRequestBodyVpcConfig - If your simulation job accesses resources in a VPC, you provide this parameter identifying the list of security group IDs and subnet IDs. These must belong to the same VPC. You must provide at least one security group and two subnet IDs.
type CreateSimulationJobRequestBodyVpcConfig struct {
	AssignPublicIP *bool    `json:"assignPublicIp,omitempty"`
	SecurityGroups []string `json:"securityGroups,omitempty"`
	Subnets        []string `json:"subnets,omitempty"`
}

type CreateSimulationJobRequestBody struct {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
	ClientRequestToken *string `json:"clientRequestToken,omitempty"`
	// Compute information for the simulation job.
	Compute *CreateSimulationJobRequestBodyCompute `json:"compute,omitempty"`
	// <p>Specify data sources to mount read-only files from S3 into your simulation. These files are available under <code>/opt/robomaker/datasources/data_source_name</code>. </p> <note> <p>There is a limit of 100 files and a combined size of 25GB for all <code>DataSourceConfig</code> objects. </p> </note>
	DataSources []shared.DataSourceConfig `json:"dataSources,omitempty"`
	// <p>The failure behavior the simulation job.</p> <dl> <dt>Continue</dt> <dd> <p>Leaves the instance running for its maximum timeout duration after a <code>4XX</code> error code.</p> </dd> <dt>Fail</dt> <dd> <p>Stop the simulation job and terminate the instance.</p> </dd> </dl>
	FailureBehavior *CreateSimulationJobRequestBodyFailureBehaviorEnum `json:"failureBehavior,omitempty"`
	// The IAM role name that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf. This is how credentials are passed in to your simulation job.
	IamRole string `json:"iamRole"`
	// The logging configuration.
	LoggingConfig *CreateSimulationJobRequestBodyLoggingConfig `json:"loggingConfig,omitempty"`
	// The maximum simulation job duration in seconds (up to 14 days or 1,209,600 seconds. When <code>maxJobDurationInSeconds</code> is reached, the simulation job will status will transition to <code>Completed</code>.
	MaxJobDurationInSeconds int64 `json:"maxJobDurationInSeconds"`
	// The output location.
	OutputLocation *CreateSimulationJobRequestBodyOutputLocation `json:"outputLocation,omitempty"`
	// The robot application to use in the simulation job.
	RobotApplications []shared.RobotApplicationConfig `json:"robotApplications,omitempty"`
	// The simulation application to use in the simulation job.
	SimulationApplications []shared.SimulationApplicationConfig `json:"simulationApplications,omitempty"`
	// A map that contains tag keys and tag values that are attached to the simulation job.
	Tags map[string]string `json:"tags,omitempty"`
	// If your simulation job accesses resources in a VPC, you provide this parameter identifying the list of security group IDs and subnet IDs. These must belong to the same VPC. You must provide at least one security group and two subnet IDs.
	VpcConfig *CreateSimulationJobRequestBodyVpcConfig `json:"vpcConfig,omitempty"`
}

type CreateSimulationJobRequest struct {
	Headers CreateSimulationJobHeaders
	Request CreateSimulationJobRequestBody `request:"mediaType=application/json"`
}

type CreateSimulationJobResponse struct {
	ContentType string
	// Success
	CreateSimulationJobResponse *shared.CreateSimulationJobResponse
	// IdempotentParameterMismatchException
	IdempotentParameterMismatchException interface{}
	// InternalServerException
	InternalServerException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ServiceUnavailableException
	ServiceUnavailableException interface{}
	// ThrottlingException
	ThrottlingException interface{}
}
