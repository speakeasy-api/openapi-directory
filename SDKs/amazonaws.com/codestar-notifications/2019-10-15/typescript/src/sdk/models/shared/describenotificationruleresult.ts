/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DetailTypeEnum } from "./detailtypeenum";
import { EventTypeSummary } from "./eventtypesummary";
import { NotificationRuleStatusEnum } from "./notificationrulestatusenum";
import { TargetSummary } from "./targetsummary";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Success
 */
export class DescribeNotificationRuleResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Arn" })
  arn: string;

  @SpeakeasyMetadata()
  @Expose({ name: "CreatedBy" })
  createdBy?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "CreatedTimestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdTimestamp?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "DetailType" })
  detailType?: DetailTypeEnum;

  @SpeakeasyMetadata({ elemType: EventTypeSummary })
  @Expose({ name: "EventTypes" })
  @Type(() => EventTypeSummary)
  eventTypes?: EventTypeSummary[];

  @SpeakeasyMetadata()
  @Expose({ name: "LastModifiedTimestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastModifiedTimestamp?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Resource" })
  resource?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  status?: NotificationRuleStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "Tags" })
  tags?: Record<string, string>;

  @SpeakeasyMetadata({ elemType: TargetSummary })
  @Expose({ name: "Targets" })
  @Type(() => TargetSummary)
  targets?: TargetSummary[];
}
