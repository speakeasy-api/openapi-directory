"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import error400_ng_pis as shared_error400_ng_pis
from ..shared import error400_pis as shared_error400_pis
from ..shared import error401_ng_pis as shared_error401_ng_pis
from ..shared import error401_pis as shared_error401_pis
from ..shared import error403_ng_pis as shared_error403_ng_pis
from ..shared import error403_pis as shared_error403_pis
from ..shared import error404_ng_pis as shared_error404_ng_pis
from ..shared import error404_pis as shared_error404_pis
from ..shared import error405_ng_pis as shared_error405_ng_pis
from ..shared import error405_pis as shared_error405_pis
from ..shared import error409_ng_pis as shared_error409_ng_pis
from ..shared import error409_pis as shared_error409_pis
from ..shared import paymentproduct_enum as shared_paymentproduct_enum
from ..shared import paymentservice_enum as shared_paymentservice_enum
from ..shared import psu_http_method_enum as shared_psu_http_method_enum
from typing import Any, Optional


@dataclasses.dataclass
class UpdatePaymentPsuDataSecurity:
    
    bearer_auth_o_auth: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'bearer', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class UpdatePaymentPsuDataRequest:
    
    authorisation_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'authorisationId', 'style': 'simple', 'explode': False }})
    r"""Resource identification of the related SCA."""  
    payment_product: shared_paymentproduct_enum.PaymentProductEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'payment-product', 'style': 'simple', 'explode': False }})
    r"""The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).
    The ASPSP will publish which of the payment products/endpoints will be supported.
    
    The following payment products are supported:
      - domestic-swiss-credit-transfers-isr
      - domestic-swiss-credit-transfers
      - domestic-swiss-credit-transfers-qr
      - domestic-swiss-foreign-credit-transfers
      - swiss-sepa-credit-transfers
      - swiss-cross-border-credit-transfers
      - pain.001-sepa-credit-transfers
      - pain.001-cross-border-credit-transfers
      - pain.001-swiss-six-credit-transfers
    
    **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,
    the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.
    Further XML schemes might be supported by some communities.
    
    **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.
    There are plenty of country specificic scheme variants.
    """  
    payment_service: shared_paymentservice_enum.PaymentServiceEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'payment-service', 'style': 'simple', 'explode': False }})
    r"""Payment service:
    
    Possible values are:
    * payments
    * bulk-payments
    * periodic-payments
    """  
    payment_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'paymentId', 'style': 'simple', 'explode': False }})
    r"""Resource identification of the generated payment initiation resource."""  
    x_request_id: str = dataclasses.field(metadata={'header': { 'field_name': 'X-Request-ID', 'style': 'simple', 'explode': False }})
    r"""ID of the request, unique to the call, as determined by the initiating party."""  
    digest: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'Digest', 'style': 'simple', 'explode': False }})
    r"""Is contained if and only if the \\"Signature\\" element is contained in the header of the request."""  
    psu_accept: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Accept', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available."""  
    psu_accept_charset: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Accept-Charset', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available."""  
    psu_accept_encoding: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Accept-Encoding', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available."""  
    psu_accept_language: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Accept-Language', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available."""  
    psu_corporate_id: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Corporate-ID', 'style': 'simple', 'explode': False }})
    r"""Might be mandated in the ASPSP's documentation. Only used in a corporate context."""  
    psu_corporate_id_type: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Corporate-ID-Type', 'style': 'simple', 'explode': False }})
    r"""Might be mandated in the ASPSP's documentation. Only used in a corporate context."""  
    psu_device_id: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Device-ID', 'style': 'simple', 'explode': False }})
    r"""UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available.
    UUID identifies either a device or a device dependant application installation.
    In case of an installation identification this ID needs to be unaltered until removal from device.
    """  
    psu_geo_location: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Geo-Location', 'style': 'simple', 'explode': False }})
    r"""The forwarded Geo Location of the corresponding http request between PSU and TPP if available."""  
    psu_http_method: Optional[shared_psu_http_method_enum.PSUHTTPMethodEnum] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Http-Method', 'style': 'simple', 'explode': False }})
    r"""HTTP method used at the PSU ? TPP interface, if available.
    Valid values are:
    * GET
    * POST
    * PUT
    * PATCH
    * DELETE
    """  
    psu_id: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-ID', 'style': 'simple', 'explode': False }})
    r"""Client ID of the PSU in the ASPSP client interface.
    
    Might be mandated in the ASPSP's documentation.
    
    It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding
    AIS service in the same session.
    In this case the ASPSP might check whether PSU-ID and token match,
    according to ASPSP documentation.
    """  
    psu_id_type: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-ID-Type', 'style': 'simple', 'explode': False }})
    r"""Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.
    
    In this case, the mean and use are then defined in the ASPSP's documentation.
    """  
    psu_ip_address: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-IP-Address', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP."""  
    psu_ip_port: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-IP-Port', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available."""  
    psu_user_agent: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-User-Agent', 'style': 'simple', 'explode': False }})
    r"""The forwarded Agent header field of the HTTP request between PSU and TPP, if available."""  
    request_body: Optional[Any] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'Signature', 'style': 'simple', 'explode': False }})
    r"""A signature of the request by the TPP on application level. This might be mandated by ASPSP."""  
    tpp_signature_certificate: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'TPP-Signature-Certificate', 'style': 'simple', 'explode': False }})
    r"""The certificate used for signing the request, in base64 encoding.
    Must be contained if a signature is contained.
    """  
    

@dataclasses.dataclass
class UpdatePaymentPsuDataResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error400_ng_pis: Optional[shared_error400_ng_pis.Error400NGPIS] = dataclasses.field(default=None)
    r"""Bad Request"""  
    error400_pis: Optional[shared_error400_pis.Error400PIS] = dataclasses.field(default=None)
    r"""Bad Request"""  
    error401_ng_pis: Optional[shared_error401_ng_pis.Error401NGPIS] = dataclasses.field(default=None)
    r"""Unauthorized"""  
    error401_pis: Optional[shared_error401_pis.Error401PIS] = dataclasses.field(default=None)
    r"""Unauthorized"""  
    error403_ng_pis: Optional[shared_error403_ng_pis.Error403NGPIS] = dataclasses.field(default=None)
    r"""Forbidden"""  
    error403_pis: Optional[shared_error403_pis.Error403PIS] = dataclasses.field(default=None)
    r"""Forbidden"""  
    error404_ng_pis: Optional[shared_error404_ng_pis.Error404NGPIS] = dataclasses.field(default=None)
    r"""Not found"""  
    error404_pis: Optional[shared_error404_pis.Error404PIS] = dataclasses.field(default=None)
    r"""Not found"""  
    error405_ng_pis: Optional[shared_error405_ng_pis.Error405NGPIS] = dataclasses.field(default=None)
    r"""Method Not Allowed"""  
    error405_pis: Optional[shared_error405_pis.Error405PIS] = dataclasses.field(default=None)
    r"""Method Not Allowed"""  
    error409_ng_pis: Optional[shared_error409_ng_pis.Error409NGPIS] = dataclasses.field(default=None)
    r"""Conflict"""  
    error409_pis: Optional[shared_error409_pis.Error409PIS] = dataclasses.field(default=None)
    r"""Conflict"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_payment_psu_data_200_application_json_one_of: Optional[Any] = dataclasses.field(default=None)
    r"""OK"""  
    