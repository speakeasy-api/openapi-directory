"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Shippingsettings:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def content_shippingsettings_custombatch(self, request: operations.ContentShippingsettingsCustombatchRequest, security: operations.ContentShippingsettingsCustombatchSecurity) -> operations.ContentShippingsettingsCustombatchResponse:
        r"""Retrieves and updates the shipping settings of multiple accounts in a single request."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/shippingsettings/batch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "shippingsettings_custom_batch_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentShippingsettingsCustombatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentShippingsettingsCustombatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ShippingsettingsCustomBatchResponse])
                res.shippingsettings_custom_batch_response = out

        return res

    def content_shippingsettings_get(self, request: operations.ContentShippingsettingsGetRequest, security: operations.ContentShippingsettingsGetSecurity) -> operations.ContentShippingsettingsGetResponse:
        r"""Retrieves the shipping settings of the account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentShippingsettingsGetRequest, base_url, '/{merchantId}/shippingsettings/{accountId}', request)
        
        query_params = utils.get_query_params(operations.ContentShippingsettingsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentShippingsettingsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ShippingSettings])
                res.shipping_settings = out

        return res

    def content_shippingsettings_getsupportedcarriers(self, request: operations.ContentShippingsettingsGetsupportedcarriersRequest, security: operations.ContentShippingsettingsGetsupportedcarriersSecurity) -> operations.ContentShippingsettingsGetsupportedcarriersResponse:
        r"""Retrieves supported carriers and carrier services for an account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentShippingsettingsGetsupportedcarriersRequest, base_url, '/{merchantId}/supportedCarriers', request)
        
        query_params = utils.get_query_params(operations.ContentShippingsettingsGetsupportedcarriersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentShippingsettingsGetsupportedcarriersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ShippingsettingsGetSupportedCarriersResponse])
                res.shippingsettings_get_supported_carriers_response = out

        return res

    def content_shippingsettings_getsupportedholidays(self, request: operations.ContentShippingsettingsGetsupportedholidaysRequest, security: operations.ContentShippingsettingsGetsupportedholidaysSecurity) -> operations.ContentShippingsettingsGetsupportedholidaysResponse:
        r"""Retrieves supported holidays for an account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentShippingsettingsGetsupportedholidaysRequest, base_url, '/{merchantId}/supportedHolidays', request)
        
        query_params = utils.get_query_params(operations.ContentShippingsettingsGetsupportedholidaysRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentShippingsettingsGetsupportedholidaysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ShippingsettingsGetSupportedHolidaysResponse])
                res.shippingsettings_get_supported_holidays_response = out

        return res

    def content_shippingsettings_getsupportedpickupservices(self, request: operations.ContentShippingsettingsGetsupportedpickupservicesRequest, security: operations.ContentShippingsettingsGetsupportedpickupservicesSecurity) -> operations.ContentShippingsettingsGetsupportedpickupservicesResponse:
        r"""Retrieves supported pickup services for an account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentShippingsettingsGetsupportedpickupservicesRequest, base_url, '/{merchantId}/supportedPickupServices', request)
        
        query_params = utils.get_query_params(operations.ContentShippingsettingsGetsupportedpickupservicesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentShippingsettingsGetsupportedpickupservicesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ShippingsettingsGetSupportedPickupServicesResponse])
                res.shippingsettings_get_supported_pickup_services_response = out

        return res

    def content_shippingsettings_list(self, request: operations.ContentShippingsettingsListRequest, security: operations.ContentShippingsettingsListSecurity) -> operations.ContentShippingsettingsListResponse:
        r"""Lists the shipping settings of the sub-accounts in your Merchant Center account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentShippingsettingsListRequest, base_url, '/{merchantId}/shippingsettings', request)
        
        query_params = utils.get_query_params(operations.ContentShippingsettingsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentShippingsettingsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ShippingsettingsListResponse])
                res.shippingsettings_list_response = out

        return res

    def content_shippingsettings_update(self, request: operations.ContentShippingsettingsUpdateRequest, security: operations.ContentShippingsettingsUpdateSecurity) -> operations.ContentShippingsettingsUpdateResponse:
        r"""Updates the shipping settings of the account. Any fields that are not provided are deleted from the resource."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentShippingsettingsUpdateRequest, base_url, '/{merchantId}/shippingsettings/{accountId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "shipping_settings", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentShippingsettingsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentShippingsettingsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ShippingSettings])
                res.shipping_settings = out

        return res

    