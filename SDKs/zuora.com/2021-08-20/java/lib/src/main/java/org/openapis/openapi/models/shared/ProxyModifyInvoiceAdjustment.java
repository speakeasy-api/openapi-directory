/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ProxyModifyInvoiceAdjustment - Container for custom fields of an Invoice Adjustment object.
 * 
 */
public class ProxyModifyInvoiceAdjustment {
    /**
     *  A code identifying the reason for the transaction. Must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.
     * **Character limit**: 32 **V****alues**: a valid reason code 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ReasonCode")
    public String reasonCode;
    public ProxyModifyInvoiceAdjustment withReasonCode(String reasonCode) {
        this.reasonCode = reasonCode;
        return this;
    }
    
    /**
     *  The status of the invoice adjustment. This field is required in the Query call, but is automatically generated in other calls.
     * **Character limit**: 9 **Values**: `Canceled`, `Processed` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Status")
    public String status;
    public ProxyModifyInvoiceAdjustment withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * Indicates the status of the adjustment's transfer to an external accounting system, such as NetSuite.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TransferredToAccounting")
    public ProxyModifyInvoiceAdjustmentTransferredToAccountingEnum transferredToAccounting;
    public ProxyModifyInvoiceAdjustment withTransferredToAccounting(ProxyModifyInvoiceAdjustmentTransferredToAccountingEnum transferredToAccounting) {
        this.transferredToAccounting = transferredToAccounting;
        return this;
    }
    
}
