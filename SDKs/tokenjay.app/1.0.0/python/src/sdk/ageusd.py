"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class AgeUsd:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def calc_sigma_rsv_exchange(self, request: operations.CalcSigmaRsvExchangeRequest) -> operations.CalcSigmaRsvExchangeResponse:
        r"""Calculates SigRSV exchange"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalcSigmaRsvExchangeRequest, base_url, '/sigrsv/exchange/{amount}/info', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalcSigmaRsvExchangeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, '*/*'):
                res.calc_sigma_rsv_exchange_400_wildcard_string = http_res.content
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, '*/*'):
                res.calc_sigma_rsv_exchange_401_wildcard_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, '*/*'):
                res.calc_sigma_rsv_exchange_404_wildcard_string = http_res.content
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, '*/*'):
                res.calc_sigma_rsv_exchange_409_wildcard_string = http_res.content

        return res

    def calc_sigma_usd_exchange(self, request: operations.CalcSigmaUsdExchangeRequest) -> operations.CalcSigmaUsdExchangeResponse:
        r"""Calculates SigUSD exchange"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalcSigmaUsdExchangeRequest, base_url, '/sigusd/exchange/{amount}/info', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalcSigmaUsdExchangeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, '*/*'):
                res.calc_sigma_usd_exchange_400_wildcard_string = http_res.content
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, '*/*'):
                res.calc_sigma_usd_exchange_401_wildcard_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, '*/*'):
                res.calc_sigma_usd_exchange_404_wildcard_string = http_res.content
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, '*/*'):
                res.calc_sigma_usd_exchange_409_wildcard_string = http_res.content

        return res

    def do_sigma_rsv_exchange(self, request: operations.DoSigmaRsvExchangeRequest) -> operations.DoSigmaRsvExchangeResponse:
        r"""Builds ErgoPayRequest for SigRSV exchange"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/sigrsv/exchange/'
        
        query_params = utils.get_query_params(operations.DoSigmaRsvExchangeRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DoSigmaRsvExchangeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, '*/*'):
                res.do_sigma_rsv_exchange_400_wildcard_string = http_res.content
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, '*/*'):
                res.do_sigma_rsv_exchange_401_wildcard_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, '*/*'):
                res.do_sigma_rsv_exchange_404_wildcard_string = http_res.content
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, '*/*'):
                res.do_sigma_rsv_exchange_409_wildcard_string = http_res.content

        return res

    def do_sigma_usd_exchange(self, request: operations.DoSigmaUsdExchangeRequest) -> operations.DoSigmaUsdExchangeResponse:
        r"""Builds ErgoPayRequest for SigUSD exchange"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/sigusd/exchange/'
        
        query_params = utils.get_query_params(operations.DoSigmaUsdExchangeRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DoSigmaUsdExchangeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, '*/*'):
                res.do_sigma_usd_exchange_400_wildcard_string = http_res.content
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, '*/*'):
                res.do_sigma_usd_exchange_401_wildcard_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, '*/*'):
                res.do_sigma_usd_exchange_404_wildcard_string = http_res.content
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, '*/*'):
                res.do_sigma_usd_exchange_409_wildcard_string = http_res.content

        return res

    def get_age_usd_info(self) -> operations.GetAgeUsdInfoResponse:
        r"""Returns state of AgeUSD at this moment"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/ageusd/info'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAgeUsdInfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, '*/*'):
                res.get_age_usd_info_400_wildcard_string = http_res.content
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, '*/*'):
                res.get_age_usd_info_401_wildcard_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, '*/*'):
                res.get_age_usd_info_404_wildcard_string = http_res.content
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, '*/*'):
                res.get_age_usd_info_409_wildcard_string = http_res.content

        return res

    def get_sigma_rsv_price(self) -> operations.GetSigmaRsvPriceResponse:
        r"""Lists price and available volume for SigmaRSV"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/sigrsv/price'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSigmaRsvPriceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, '*/*'):
                res.get_sigma_rsv_price_400_wildcard_string = http_res.content
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, '*/*'):
                res.get_sigma_rsv_price_401_wildcard_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, '*/*'):
                res.get_sigma_rsv_price_404_wildcard_string = http_res.content
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, '*/*'):
                res.get_sigma_rsv_price_409_wildcard_string = http_res.content

        return res

    def get_sigma_usd_price(self) -> operations.GetSigmaUsdPriceResponse:
        r"""Lists price and available volume for SigmaUSD"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/sigusd/price'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSigmaUsdPriceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, '*/*'):
                res.get_sigma_usd_price_400_wildcard_string = http_res.content
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, '*/*'):
                res.get_sigma_usd_price_401_wildcard_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, '*/*'):
                res.get_sigma_usd_price_404_wildcard_string = http_res.content
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, '*/*'):
                res.get_sigma_usd_price_409_wildcard_string = http_res.content

        return res

    