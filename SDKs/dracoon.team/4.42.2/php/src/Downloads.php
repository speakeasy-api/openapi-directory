<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Downloads 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Download avatar
     * 
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.11.0</h3>
     * 
     * ### Description:
     * Download avatar for given user ID and UUID.
     * 
     * ### Precondition:
     * Valid UUID.
     * 
     * ### Postcondition:
     * Stream is returned.
     * 
     * ### Further Information:
     * None.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DownloadAvatarRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DownloadAvatarResponse
     */
	public function downloadAvatar(
        \OpenAPI\OpenAPI\Models\Operations\DownloadAvatarRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DownloadAvatarResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/downloads/avatar/{user_id}/{uuid}', \OpenAPI\OpenAPI\Models\Operations\DownloadAvatarRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DownloadAvatarResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/octet-stream')) {
                $response->downloadAvatar200ApplicationOctetStreamString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 406) {
            if (Utils\Utils::matchContentType($contentType, 'application/octet-stream')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Download file
     * 
     * ### Description:
     * Download a file.
     * 
     * ### Precondition:
     * Valid download token.
     * 
     * ### Postcondition:
     * Stream is returned.
     * 
     * ### Further Information:
     * Range requests are supported.
     * https://tools.ietf.org/html/rfc7233 - Range Requests
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DownloadFileViaTokenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DownloadFileViaTokenResponse
     * @see https://tools.ietf.org/html/rfc7233
     */
	public function downloadFileViaToken(
        \OpenAPI\OpenAPI\Models\Operations\DownloadFileViaTokenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DownloadFileViaTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/downloads/{token}', \OpenAPI\OpenAPI\Models\Operations\DownloadFileViaTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DownloadFileViaTokenRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DownloadFileViaTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 206) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 416) {
            if (Utils\Utils::matchContentType($contentType, 'application/octet-stream')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Download file
     * 
     * ### Description:
     * Download a file.
     * 
     * ### Precondition:
     * Valid download token.
     * 
     * ### Postcondition:
     * Stream is returned.
     * 
     * ### Further Information:
     * Range requests are supported.
     * https://tools.ietf.org/html/rfc7233 - Range Requests
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DownloadFileViaToken1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DownloadFileViaToken1Response
     * @see https://tools.ietf.org/html/rfc7233
     */
	public function downloadFileViaToken1(
        \OpenAPI\OpenAPI\Models\Operations\DownloadFileViaToken1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DownloadFileViaToken1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/downloads/{token}', \OpenAPI\OpenAPI\Models\Operations\DownloadFileViaToken1Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DownloadFileViaToken1Request::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('HEAD', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DownloadFileViaToken1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 206) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 416) {
            if (Utils\Utils::matchContentType($contentType, 'application/octet-stream')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Download ZIP archive
     * 
     * ### Description:
     * Download multiple files in a ZIP archive.
     * 
     * ### Precondition:
     * Valid download token.
     * 
     * ### Postcondition:
     * Stream is returned.
     * 
     * ### Further Information:
     * Create a download token with `POST /nodes/zip` API.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DownloadZipArchiveViaTokenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DownloadZipArchiveViaTokenResponse
     */
	public function downloadZipArchiveViaToken(
        \OpenAPI\OpenAPI\Models\Operations\DownloadZipArchiveViaTokenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DownloadZipArchiveViaTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/downloads/zip/{token}', \OpenAPI\OpenAPI\Models\Operations\DownloadZipArchiveViaTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DownloadZipArchiveViaTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 406) {
            if (Utils\Utils::matchContentType($contentType, 'application/octet-stream')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}