"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createresourcepolicystatementresponse as shared_createresourcepolicystatementresponse
from ..shared import principal as shared_principal
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class CreateResourcePolicyStatementRequestBodyEffectEnum(str, Enum):
    r"""Determines whether the statement allows or denies access to the resource."""
    ALLOW = 'Allow'
    DENY = 'Deny'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateResourcePolicyStatementRequestBody:
    
    action: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action') }})
    r"""The Amazon Lex action that this policy either allows or denies. The action must apply to the resource type of the specified ARN. For more information, see <a href=\\"https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazonlexv2.html\\"> Actions, resources, and condition keys for Amazon Lex V2</a>."""  
    effect: CreateResourcePolicyStatementRequestBodyEffectEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('effect') }})
    r"""Determines whether the statement allows or denies access to the resource."""  
    principal: list[shared_principal.Principal] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('principal') }})
    r"""An IAM principal, such as an IAM users, IAM roles, or AWS services that is allowed or denied access to a resource. For more information, see <a href=\\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html\\">AWS JSON policy elements: Principal</a>."""  
    statement_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statementId') }})
    r"""The name of the statement. The ID is the same as the <code>Sid</code> IAM property. The statement name must be unique within the policy. For more information, see <a href=\\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_sid.html\\">IAM JSON policy elements: Sid</a>."""  
    condition: Optional[dict[str, dict[str, str]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('condition'), 'exclude': lambda f: f is None }})
    r"""<p>Specifies a condition when the policy is in effect. If the principal of the policy is a service principal, you must provide two condition blocks, one with a SourceAccount global condition key and one with a SourceArn global condition key.</p> <p>For more information, see <a href=\\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html\\">IAM JSON policy elements: Condition </a>.</p>"""  
    

@dataclasses.dataclass
class CreateResourcePolicyStatementRequest:
    
    request_body: CreateResourcePolicyStatementRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    resource_arn: str = dataclasses.field(metadata={'path_param': { 'field_name': 'resourceArn', 'style': 'simple', 'explode': False }})
    r"""The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to."""  
    expected_revision_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'expectedRevisionId', 'style': 'form', 'explode': True }})
    r"""<p>The identifier of the revision of the policy to edit. If this revision ID doesn't match the current revision ID, Amazon Lex throws an exception.</p> <p>If you don't specify a revision, Amazon Lex overwrites the contents of the policy with the new values.</p>"""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateResourcePolicyStatementResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    create_resource_policy_statement_response: Optional[shared_createresourcepolicystatementresponse.CreateResourcePolicyStatementResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    precondition_failed_exception: Optional[Any] = dataclasses.field(default=None)
    r"""PreconditionFailedException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    