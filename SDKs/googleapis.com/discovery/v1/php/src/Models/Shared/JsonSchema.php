<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class JsonSchema
{
    /**
     * A reference to another schema. The value of this property is the "id" of another schema.
     * 
     * @var ?string $dollarRef
     */
	#[\JMS\Serializer\Annotation\SerializedName('$ref')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $dollarRef = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('additionalProperties')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\JsonSchema')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?JsonSchema $additionalProperties = null;
    
    /**
     * Additional information about this property.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\JsonSchemaAnnotations $annotations
     */
	#[\JMS\Serializer\Annotation\SerializedName('annotations')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\JsonSchemaAnnotations')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?JsonSchemaAnnotations $annotations = null;
    
    /**
     * A description of this object.
     * 
     * @var ?string $description
     */
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $description = null;
    
    /**
     * Values this parameter may take (if it is an enum).
     * 
     * @var ?array<string> $enum
     */
	#[\JMS\Serializer\Annotation\SerializedName('enum')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $enum = null;
    
    /**
     * The descriptions for the enums. Each position maps to the corresponding value in the "enum" array.
     * 
     * @var ?array<string> $enumDescriptions
     */
	#[\JMS\Serializer\Annotation\SerializedName('enumDescriptions')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $enumDescriptions = null;
    
    /**
     * An additional regular expression or key that helps constrain the value. For more details see: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.23
     * 
     * @var ?string $format
     */
	#[\JMS\Serializer\Annotation\SerializedName('format')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $format = null;
    
    /**
     * Unique identifier for this schema.
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('items')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\JsonSchema')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?JsonSchema $items = null;
    
    /**
     * Whether this parameter goes in the query or the path for REST requests.
     * 
     * @var ?string $location
     */
	#[\JMS\Serializer\Annotation\SerializedName('location')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $location = null;
    
    /**
     * The maximum value of this parameter.
     * 
     * @var ?string $maximum
     */
	#[\JMS\Serializer\Annotation\SerializedName('maximum')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $maximum = null;
    
    /**
     * The minimum value of this parameter.
     * 
     * @var ?string $minimum
     */
	#[\JMS\Serializer\Annotation\SerializedName('minimum')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $minimum = null;
    
    /**
     * The regular expression this parameter must conform to. Uses Java 6 regex format: http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html
     * 
     * @var ?string $pattern
     */
	#[\JMS\Serializer\Annotation\SerializedName('pattern')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $pattern = null;
    
    /**
     * If this is a schema for an object, list the schema for each property of this object.
     * 
     * @var ?array<string, \OpenAPI\OpenAPI\Models\Shared\JsonSchema> $properties
     */
	#[\JMS\Serializer\Annotation\SerializedName('properties')]
    #[\JMS\Serializer\Annotation\Type('array<string, OpenAPI\OpenAPI\Models\Shared\JsonSchema>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $properties = null;
    
    /**
     * The value is read-only, generated by the service. The value cannot be modified by the client. If the value is included in a POST, PUT, or PATCH request, it is ignored by the service.
     * 
     * @var ?bool $readOnly
     */
	#[\JMS\Serializer\Annotation\SerializedName('readOnly')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $readOnly = null;
    
    /**
     * Whether this parameter may appear multiple times.
     * 
     * @var ?bool $repeated
     */
	#[\JMS\Serializer\Annotation\SerializedName('repeated')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $repeated = null;
    
    /**
     * Whether the parameter is required.
     * 
     * @var ?bool $required
     */
	#[\JMS\Serializer\Annotation\SerializedName('required')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $required = null;
    
    /**
     * The value type for this schema. A list of values can be found here: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.1
     * 
     * @var ?string $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $type = null;
    
    /**
     * In a variant data type, the value of one property is used to determine how to interpret the entire entity. Its value must exist in a map of descriminant values to schema names.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\JsonSchemaVariant $variant
     */
	#[\JMS\Serializer\Annotation\SerializedName('variant')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\JsonSchemaVariant')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?JsonSchemaVariant $variant = null;
    
	public function __construct()
	{
		$this->dollarRef = null;
		$this->additionalProperties = null;
		$this->annotations = null;
		$this->description = null;
		$this->enum = null;
		$this->enumDescriptions = null;
		$this->format = null;
		$this->id = null;
		$this->items = null;
		$this->location = null;
		$this->maximum = null;
		$this->minimum = null;
		$this->pattern = null;
		$this->properties = null;
		$this->readOnly = null;
		$this->repeated = null;
		$this->required = null;
		$this->type = null;
		$this->variant = null;
	}
}
