"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class AccountBillingInvoicesRequest:
    
    account_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'accountId', 'style': 'simple', 'explode': False }})
    r"""The account ID."""  
    from_: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'from', 'style': 'form', 'explode': True }})
    r"""Start date for the invoice query in `yyyy-mm-dd` format. The date range defined by the “from” and “to” parameters should not exceed one year. The range defined should fall within the past three years."""  
    to: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'to', 'style': 'form', 'explode': True }})
    r"""End date for the invoice query in `yyyy-mm-dd` format"""  
    

@dataclasses.dataclass
class AccountBillingInvoices200ApplicationXMLInvoices:
    
    balance: Optional[float] = dataclasses.field(default=None)
    r"""The remaining balance of the invoice after all payments, adjustments, and refunds are applied."""  
    due_date: Optional[str] = dataclasses.field(default=None)
    r"""The date by which the payment for this invoice is due."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""Unique identifier of the invoice."""  
    invoice_date: Optional[str] = dataclasses.field(default=None)
    r"""The date when the invoice was generated."""  
    invoice_number: Optional[str] = dataclasses.field(default=None)
    r"""Invoice number."""  
    status: Optional[str] = dataclasses.field(default=None)
    r"""Status of the invoice."""  
    target_date: Optional[str] = dataclasses.field(default=None)
    r"""This date is used to determine which charges are to be billed. All charges that are to be billed on this date or prior will be included in the invoice."""  
    tax_amount: Optional[float] = dataclasses.field(default=None)
    r"""Tax amount."""  
    total_amount: Optional[float] = dataclasses.field(default=None)
    r"""Total invoice amount."""  
    

@dataclasses.dataclass
class AccountBillingInvoices200ApplicationXML:
    r"""**HTTP Status Code:** `200`<br>
    Account billing invoice information returned.
    """
    
    currency: Optional[str] = dataclasses.field(default=None)
    r"""Currency used in the invoice."""  
    invoices: Optional[list[AccountBillingInvoices200ApplicationXMLInvoices]] = dataclasses.field(default=None)  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AccountBillingInvoices200ApplicationJSONInvoices:
    
    balance: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('balance'), 'exclude': lambda f: f is None }})
    r"""The remaining balance of the invoice after all payments, adjustments, and refunds are applied."""  
    due_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('due_date'), 'exclude': lambda f: f is None }})
    r"""The date by which the payment for this invoice is due."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the invoice."""  
    invoice_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invoice_date'), 'exclude': lambda f: f is None }})
    r"""The date when the invoice was generated."""  
    invoice_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invoice_number'), 'exclude': lambda f: f is None }})
    r"""Invoice number."""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of the invoice."""  
    target_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target_date'), 'exclude': lambda f: f is None }})
    r"""This date is used to determine which charges are to be billed. All charges that are to be billed on this date or prior will be included in the invoice."""  
    tax_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax_amount'), 'exclude': lambda f: f is None }})
    r"""Tax amount."""  
    total_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_amount'), 'exclude': lambda f: f is None }})
    r"""Total invoice amount."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AccountBillingInvoices200ApplicationJSON:
    r"""**HTTP Status Code:** `200`<br>
    Account billing invoice information returned.
    """
    
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""Currency used in the invoice."""  
    invoices: Optional[list[AccountBillingInvoices200ApplicationJSONInvoices]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invoices'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class AccountBillingInvoicesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    account_billing_invoices_200_application_json_object: Optional[AccountBillingInvoices200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    Account billing invoice information returned.
    """  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    