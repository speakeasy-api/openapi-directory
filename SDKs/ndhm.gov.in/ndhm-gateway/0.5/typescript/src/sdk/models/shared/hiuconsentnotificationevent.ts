/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ConsentArtefactReference } from "./consentartefactreference";
import { ConsentStatusEnum } from "./consentstatusenum";
import { Expose, Transform, Type } from "class-transformer";

export class HIUConsentNotificationEventNotification extends SpeakeasyBase {
  /**
   * if the status is GRANTED or REVOKED, then the consentArtefact references (Ids) must be specified.
   */
  @SpeakeasyMetadata({ elemType: ConsentArtefactReference })
  @Expose({ name: "consentArtefacts" })
  @Type(() => ConsentArtefactReference)
  consentArtefacts?: ConsentArtefactReference[];

  @SpeakeasyMetadata()
  @Expose({ name: "consentRequestId" })
  consentRequestId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: ConsentStatusEnum;
}

export class HIUConsentNotificationEvent extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "notification" })
  @Type(() => HIUConsentNotificationEventNotification)
  notification: HIUConsentNotificationEventNotification;

  /**
   * a nonce, unique for each HTTP request
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestId" })
  requestId: string;

  /**
   * Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  timestamp: Date;
}
