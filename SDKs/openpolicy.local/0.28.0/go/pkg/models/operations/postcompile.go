// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PostCompileRequest struct {
	// The query (in JSON format)
	RequestBody map[string]interface{} `request:"mediaType=application/json"`
	// If set to *full*, response will include query explanations in addition to the result.
	Explain *string `queryParam:"style=form,explode=true,name=explain"`
	// If true, response will return additional performance metrics in addition to the result and the standard metrics.
	//
	// **Caution:** This can add significant overhead to query evaluation. The recommendation is to only use this parameter if you are debugging a performance problem.
	Instrument *bool `queryParam:"style=form,explode=true,name=instrument"`
	// If true, compiler performance metrics will be returned in the response.
	Metrics *bool `queryParam:"style=form,explode=true,name=metrics"`
	// If true, response will be in a human-readable format.
	Pretty *bool `queryParam:"style=form,explode=true,name=pretty"`
}

type PostCompile200ApplicationJSONExplanationLocalsKey struct {
	Type  *string `json:"type,omitempty"`
	Value *string `json:"value,omitempty"`
}

type PostCompile200ApplicationJSONExplanationLocalsValue struct {
	Type  *string `json:"type,omitempty"`
	Value *string `json:"value,omitempty"`
}

type PostCompile200ApplicationJSONExplanationLocals struct {
	Key   *PostCompile200ApplicationJSONExplanationLocalsKey   `json:"key,omitempty"`
	Value *PostCompile200ApplicationJSONExplanationLocalsValue `json:"value,omitempty"`
}

type PostCompile200ApplicationJSONExplanationNodeTerms struct {
	Type  *string `json:"type,omitempty"`
	Value *string `json:"value,omitempty"`
}

// PostCompile200ApplicationJSONExplanationNode - The AST element associated with the evaluation step.
// https://godoc.org/github.com/open-policy-agent/opa/ast - AST
type PostCompile200ApplicationJSONExplanationNode struct {
	// Node number
	Index *float64                                            `json:"index,omitempty"`
	Terms []PostCompile200ApplicationJSONExplanationNodeTerms `json:"terms,omitempty"`
}

// PostCompile200ApplicationJSONExplanationOpEnum - The kind of *trace event*
//
// Each trace event represents a step in the query evaluation process. Trace events are emitted at the following points:
// - enter - before a body or rule is evaluated
// - exit - after a body or rule has evaluated successfully
// - eval - before an expression is evaluated
// - fail - after an expression has evaluated to false.
// - redo - before evaluation restarts from a body, rule, or expression.
//
// By default, OPA searches for all sets of term bindings that make all expressions in the query evaluate to true. Because there may be multiple answers, the search can restart when OPA determines the query is true or false. When the search restarts, a *redo trace event* is emitted.
type PostCompile200ApplicationJSONExplanationOpEnum string

const (
	PostCompile200ApplicationJSONExplanationOpEnumEnter PostCompile200ApplicationJSONExplanationOpEnum = "enter"
	PostCompile200ApplicationJSONExplanationOpEnumExit  PostCompile200ApplicationJSONExplanationOpEnum = "exit"
	PostCompile200ApplicationJSONExplanationOpEnumEval  PostCompile200ApplicationJSONExplanationOpEnum = "eval"
	PostCompile200ApplicationJSONExplanationOpEnumFail  PostCompile200ApplicationJSONExplanationOpEnum = "fail"
	PostCompile200ApplicationJSONExplanationOpEnumRedo  PostCompile200ApplicationJSONExplanationOpEnum = "redo"
)

func (e PostCompile200ApplicationJSONExplanationOpEnum) ToPointer() *PostCompile200ApplicationJSONExplanationOpEnum {
	return &e
}

func (e *PostCompile200ApplicationJSONExplanationOpEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enter":
		fallthrough
	case "exit":
		fallthrough
	case "eval":
		fallthrough
	case "fail":
		fallthrough
	case "redo":
		*e = PostCompile200ApplicationJSONExplanationOpEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostCompile200ApplicationJSONExplanationOpEnum: %v", v)
	}
}

// PostCompile200ApplicationJSONExplanationTypeEnum - The type of the **node** field
type PostCompile200ApplicationJSONExplanationTypeEnum string

const (
	PostCompile200ApplicationJSONExplanationTypeEnumExpr PostCompile200ApplicationJSONExplanationTypeEnum = "expr"
	PostCompile200ApplicationJSONExplanationTypeEnumRule PostCompile200ApplicationJSONExplanationTypeEnum = "rule"
	PostCompile200ApplicationJSONExplanationTypeEnumBody PostCompile200ApplicationJSONExplanationTypeEnum = "body"
)

func (e PostCompile200ApplicationJSONExplanationTypeEnum) ToPointer() *PostCompile200ApplicationJSONExplanationTypeEnum {
	return &e
}

func (e *PostCompile200ApplicationJSONExplanationTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "expr":
		fallthrough
	case "rule":
		fallthrough
	case "body":
		*e = PostCompile200ApplicationJSONExplanationTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostCompile200ApplicationJSONExplanationTypeEnum: %v", v)
	}
}

type PostCompile200ApplicationJSONExplanation struct {
	// The query's term bindings at the point when the trace event was emitted.
	Locals []PostCompile200ApplicationJSONExplanationLocals `json:"locals,omitempty"`
	// The AST element associated with the evaluation step.
	Node *PostCompile200ApplicationJSONExplanationNode `json:"node,omitempty"`
	// The kind of *trace event*
	//
	// Each trace event represents a step in the query evaluation process. Trace events are emitted at the following points:
	// - enter - before a body or rule is evaluated
	// - exit - after a body or rule has evaluated successfully
	// - eval - before an expression is evaluated
	// - fail - after an expression has evaluated to false.
	// - redo - before evaluation restarts from a body, rule, or expression.
	//
	// By default, OPA searches for all sets of term bindings that make all expressions in the query evaluate to true. Because there may be multiple answers, the search can restart when OPA determines the query is true or false. When the search restarts, a *redo trace event* is emitted.
	Op *PostCompile200ApplicationJSONExplanationOpEnum `json:"op,omitempty"`
	// The parent query. Use this field to identify trace events from related queries.
	//
	// For example, if query A references rule R, trace events emitted when evaluating rule R will have the *parent_id* field set to query Aâ€™s *query_id*.
	ParentID *float64 `json:"parent_id,omitempty"`
	// The query that the trace event was emitted for. Use this field to distinguish trace events emitted by from different queries.
	QueryID *float64 `json:"query_id,omitempty"`
	// The type of the **node** field
	Type *PostCompile200ApplicationJSONExplanationTypeEnum `json:"type,omitempty"`
}

type PostCompile200ApplicationJSONMetrics struct {
	// *Description is forthcoming*
	CounterServerQueryCacheHit *float64 `json:"counter_server_query_cache_hit,omitempty"`
	// (Only returned if `instrument` is true.) *Description is forthcoming*
	TimerQueryCompileStageBuildComprehensionIndexNs *float64 `json:"timer_query_compile_stage_build_comprehension_index_ns,omitempty"`
	// (Only returned if `instrument` is true.) *Description is forthcoming*
	TimerQueryCompileStageCheckSafetyNs *float64 `json:"timer_query_compile_stage_check_safety_ns,omitempty"`
	// (Only returned if `instrument` is true.) *Description is forthcoming*
	TimerQueryCompileStageCheckTypesNs *float64 `json:"timer_query_compile_stage_check_types_ns,omitempty"`
	// (Only returned if `instrument` is true.) *Description is forthcoming*
	TimerQueryCompileStageCheckUndefinedFuncsNs *float64 `json:"timer_query_compile_stage_check_undefined_funcs_ns,omitempty"`
	// (Only returned if `instrument` is true.) *Description is forthcoming*
	TimerQueryCompileStageCheckUnsafeBuiltinsNs *float64 `json:"timer_query_compile_stage_check_unsafe_builtins_ns,omitempty"`
	// (Only returned if `instrument` is true.) *Description is forthcoming*
	TimerQueryCompileStageResolveRefsNs *float64 `json:"timer_query_compile_stage_resolve_refs_ns,omitempty"`
	// (Only returned if `instrument` is true.) *Description is forthcoming*
	TimerQueryCompileStageRewriteComprehensionTermsNs *float64 `json:"timer_query_compile_stage_rewrite_comprehension_terms_ns,omitempty"`
	// (Only returned if `instrument` is true.) *Description is forthcoming*
	TimerQueryCompileStageRewriteDynamicTermsNs *float64 `json:"timer_query_compile_stage_rewrite_dynamic_terms_ns,omitempty"`
	// (Only returned if `instrument` is true.) *Description is forthcoming*
	TimerQueryCompileStageRewriteExprTermsNs *float64 `json:"timer_query_compile_stage_rewrite_expr_terms_ns,omitempty"`
	// (Only returned if `instrument` is true.) *Description is forthcoming*
	TimerQueryCompileStageRewriteLocalVarsNs *float64 `json:"timer_query_compile_stage_rewrite_local_vars_ns,omitempty"`
	// (Only returned if `instrument` is true.) *Description is forthcoming*
	TimerQueryCompileStageRewriteToCaptureValueNs *float64 `json:"timer_query_compile_stage_rewrite_to_capture_value_ns,omitempty"`
	// (Only returned if `instrument` is true.) *Description is forthcoming*
	TimerQueryCompileStageRewriteWithValuesNs *float64 `json:"timer_query_compile_stage_rewrite_with_values_ns,omitempty"`
	// Time taken (in nanonseconds) to parse the input
	TimerRegoInputParseNs *float64 `json:"timer_rego_input_parse_ns,omitempty"`
	// Time taken (in nanonseconds) to compile the loaded policy modules
	TimerRegoModuleCompileNs *float64 `json:"timer_rego_module_compile_ns,omitempty"`
	// Time taken (in nanoseconds) to parse the input policy module
	TimerRegoModuleParseNs *float64 `json:"timer_rego_module_parse_ns,omitempty"`
	// Time taken (in nanoseconds) to compile the query
	TimerRegoQueryCompileNs *float64 `json:"timer_rego_query_compile_ns,omitempty"`
	// Time taken (in nanonseconds) to evaluate the query
	TimerRegoQueryEvalNs *float64 `json:"timer_rego_query_eval_ns,omitempty"`
	// Time taken (in nanoseconds) to parse the query
	TimerRegoQueryParseNs *float64 `json:"timer_rego_query_parse_ns,omitempty"`
	// Time taken (in nanoseconds) to handle the API request
	TimerServerHandlerNs *float64 `json:"timer_server_handler_ns,omitempty"`
	// *Description is forthcoming*
	TimerServerReadBytesNs *float64 `json:"timer_server_read_bytes_ns,omitempty"`
}

// PostCompile200ApplicationJSONResultAstPackagePathTypeEnum - The type of the path operation
type PostCompile200ApplicationJSONResultAstPackagePathTypeEnum string

const (
	PostCompile200ApplicationJSONResultAstPackagePathTypeEnumImport  PostCompile200ApplicationJSONResultAstPackagePathTypeEnum = "import"
	PostCompile200ApplicationJSONResultAstPackagePathTypeEnumPackage PostCompile200ApplicationJSONResultAstPackagePathTypeEnum = "package"
)

func (e PostCompile200ApplicationJSONResultAstPackagePathTypeEnum) ToPointer() *PostCompile200ApplicationJSONResultAstPackagePathTypeEnum {
	return &e
}

func (e *PostCompile200ApplicationJSONResultAstPackagePathTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "import":
		fallthrough
	case "package":
		*e = PostCompile200ApplicationJSONResultAstPackagePathTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostCompile200ApplicationJSONResultAstPackagePathTypeEnum: %v", v)
	}
}

type PostCompile200ApplicationJSONResultAstPackagePath struct {
	// The type of the path operation
	Type *PostCompile200ApplicationJSONResultAstPackagePathTypeEnum `json:"type,omitempty"`
	// The path variable
	Value *string `json:"value,omitempty"`
}

type PostCompile200ApplicationJSONResultAstPackage struct {
	// The path to the package
	Path []PostCompile200ApplicationJSONResultAstPackagePath `json:"path,omitempty"`
}

type PostCompile200ApplicationJSONResultAstRulesBodyTermsValue struct {
	Type  *string `json:"type,omitempty"`
	Value *string `json:"value,omitempty"`
}

type PostCompile200ApplicationJSONResultAstRulesBodyTerms struct {
	// The type of the term variable
	Type *string `json:"type,omitempty"`
	// The list of types and values for the term variable
	Value []PostCompile200ApplicationJSONResultAstRulesBodyTermsValue `json:"value,omitempty"`
}

type PostCompile200ApplicationJSONResultAstRulesBody struct {
	// The location of this term in the list (starts at 0)
	Index *float64 `json:"index,omitempty"`
	// The type/value pairing for this term
	Terms []PostCompile200ApplicationJSONResultAstRulesBodyTerms `json:"terms,omitempty"`
}

// PostCompile200ApplicationJSONResultAstRulesHeadKey - The type/value pairing for this rule's head
type PostCompile200ApplicationJSONResultAstRulesHeadKey struct {
	// The type of the head
	Type *string `json:"type,omitempty"`
	// The value of the head
	Value *string `json:"value,omitempty"`
}

type PostCompile200ApplicationJSONResultAstRulesHead struct {
	// The type/value pairing for this rule's head
	Key *PostCompile200ApplicationJSONResultAstRulesHeadKey `json:"key,omitempty"`
	// The head of the rule
	Name *string `json:"name,omitempty"`
}

type PostCompile200ApplicationJSONResultAstRules struct {
	// A list of the terms in this rule
	Body []PostCompile200ApplicationJSONResultAstRulesBody `json:"body,omitempty"`
	Head *PostCompile200ApplicationJSONResultAstRulesHead  `json:"head,omitempty"`
}

// PostCompile200ApplicationJSONResultAst - The types for declarations and runtime objects passed to your implementation. This consists of an abstract syntax tree (AST) of policy modules, package and import declarations, rules, expressions, and terms.
// https://godoc.org/github.com/open-policy-agent/opa/ast - AST
type PostCompile200ApplicationJSONResultAst struct {
	Package *PostCompile200ApplicationJSONResultAstPackage `json:"package,omitempty"`
	// When OPA evaluates a rule, it generates the content of a [virtual documents](https://www.openpolicyagent.org/docs/latest/philosophy/#the-opa-document-model)
	Rules []PostCompile200ApplicationJSONResultAstRules `json:"rules,omitempty"`
}

type PostCompile200ApplicationJSONResult struct {
	// The types for declarations and runtime objects passed to your implementation. This consists of an abstract syntax tree (AST) of policy modules, package and import declarations, rules, expressions, and terms.
	Ast *PostCompile200ApplicationJSONResultAst `json:"ast,omitempty"`
	// The name of a policy module
	ID *string `json:"id,omitempty"`
	// A string representation of the full Rego policy
	Raw *string `json:"raw,omitempty"`
}

// PostCompile200ApplicationJSON - Success
type PostCompile200ApplicationJSON struct {
	Explanation []PostCompile200ApplicationJSONExplanation `json:"explanation,omitempty"`
	Metrics     *PostCompile200ApplicationJSONMetrics      `json:"metrics,omitempty"`
	Result      []PostCompile200ApplicationJSONResult      `json:"result,omitempty"`
}

type PostCompileResponse struct {
	// Bad request
	FourHundred *shared.FourHundred
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	PostCompile200ApplicationJSONObject *PostCompile200ApplicationJSON
}
