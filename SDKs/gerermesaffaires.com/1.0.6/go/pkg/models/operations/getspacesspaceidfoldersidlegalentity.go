// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetSpacesSpaceIDFoldersIDLegalEntityRequest struct {
	// Id of the folder (followup)
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

type GetSpacesSpaceIDFoldersIDLegalEntity200ApplicationJSONClassEnum string

const (
	GetSpacesSpaceIDFoldersIDLegalEntity200ApplicationJSONClassEnumCompanyEntity GetSpacesSpaceIDFoldersIDLegalEntity200ApplicationJSONClassEnum = "CompanyEntity"
	GetSpacesSpaceIDFoldersIDLegalEntity200ApplicationJSONClassEnumPerson        GetSpacesSpaceIDFoldersIDLegalEntity200ApplicationJSONClassEnum = "Person"
)

func (e *GetSpacesSpaceIDFoldersIDLegalEntity200ApplicationJSONClassEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CompanyEntity":
		fallthrough
	case "Person":
		*e = GetSpacesSpaceIDFoldersIDLegalEntity200ApplicationJSONClassEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSpacesSpaceIDFoldersIDLegalEntity200ApplicationJSONClassEnum: %s", s)
	}
}

// GetSpacesSpaceIDFoldersIDLegalEntity200ApplicationJSON - legal entity of the folder
type GetSpacesSpaceIDFoldersIDLegalEntity200ApplicationJSON struct {
	Class *GetSpacesSpaceIDFoldersIDLegalEntity200ApplicationJSONClassEnum `json:"Class,omitempty"`
	ID    *string                                                          `json:"Id,omitempty"`
}

type GetSpacesSpaceIDFoldersIDLegalEntityResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// legal entity of the folder
	GetSpacesSpaceIDFoldersIDLegalEntity200ApplicationJSONObject *GetSpacesSpaceIDFoldersIDLegalEntity200ApplicationJSON
}
