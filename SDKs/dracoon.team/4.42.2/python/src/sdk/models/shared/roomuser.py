"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import nodepermissions as shared_nodepermissions
from ..shared import publickeycontainer as shared_publickeycontainer
from ..shared import userinfo as shared_userinfo
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RoomUser:
    r"""User information"""
    
    display_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName') }})
    r"""&#128679; Deprecated since v4.11.0
    
    Display name
    
    use information from `UserInfo` instead to combine a display name
    """  
    email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email') }})
    r"""&#128679; Deprecated since v4.11.0
    
    Email 
    
    use `email` from `UserInfo` instead
    """  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""&#128679; Deprecated since v4.11.0
    
    Unique identifier for the user
    
    use `id` from `UserInfo` instead
    """  
    is_granted: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isGranted') }})
    r"""Is user granted room permissions"""  
    login: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('login') }})
    r"""&#128679; Deprecated since v4.11.0
    
    User login name
    """  
    user_info: shared_userinfo.UserInfo = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userInfo') }})
    r"""User information"""  
    permissions: Optional[shared_nodepermissions.NodePermissions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissions'), 'exclude': lambda f: f is None }})
    r"""Node permissions"""  
    public_key_container: Optional[shared_publickeycontainer.PublicKeyContainer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publicKeyContainer'), 'exclude': lambda f: f is None }})
    r"""Public key container"""  
    