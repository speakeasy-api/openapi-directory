<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class WebhookSubscriptions 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a webhook subscription
     * 
     * Deletes a webhook subscription. This operation is not reversible without contacting support. This operation can be called multiple times successfully.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteV2WebhookSubscriptionsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteV2WebhookSubscriptionsIdResponse
     */
	public function deleteV2WebhookSubscriptionsId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteV2WebhookSubscriptionsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteV2WebhookSubscriptionsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/webhook_subscriptions/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteV2WebhookSubscriptionsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteV2WebhookSubscriptionsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * List webhook subscriptions
     * 
     * Fetches all of the customer's webhook subscriptions for your application.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV2WebhookSubscriptionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV2WebhookSubscriptionsResponse
     */
	public function getV2WebhookSubscriptions(
        \OpenAPI\OpenAPI\Models\Operations\GetV2WebhookSubscriptionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV2WebhookSubscriptionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/webhook_subscriptions');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetV2WebhookSubscriptionsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV2WebhookSubscriptionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Fetch a webhook subscription
     * 
     * Fetches a webhook subscription, by ID only.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV2WebhookSubscriptionsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV2WebhookSubscriptionsIdResponse
     */
	public function getV2WebhookSubscriptionsId(
        \OpenAPI\OpenAPI\Models\Operations\GetV2WebhookSubscriptionsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV2WebhookSubscriptionsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/webhook_subscriptions/{id}', \OpenAPI\OpenAPI\Models\Operations\GetV2WebhookSubscriptionsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV2WebhookSubscriptionsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Create a webhook subscription
     * 
     * Creates a webhook subscription. Visit the <a href="/webhooks.html" target="_blank" rel="noopener noreferrer">webhooks page</a> for additional details and a list of available webhooks.
     * Request must be made with a valid Oauth token or API key.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV2WebhookSubscriptionsRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV2WebhookSubscriptionsResponse
     */
	public function postV2WebhookSubscriptions(
        \OpenAPI\OpenAPI\Models\Operations\PostV2WebhookSubscriptionsRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV2WebhookSubscriptionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/webhook_subscriptions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV2WebhookSubscriptionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update a webhook subscription
     * 
     * Updates a webhook subscription.
     * Request must be made with a valid Oauth token or API key.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutV2WebhookSubscriptionsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutV2WebhookSubscriptionsIdResponse
     */
	public function putV2WebhookSubscriptionsId(
        \OpenAPI\OpenAPI\Models\Operations\PutV2WebhookSubscriptionsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutV2WebhookSubscriptionsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/webhook_subscriptions/{id}', \OpenAPI\OpenAPI\Models\Operations\PutV2WebhookSubscriptionsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutV2WebhookSubscriptionsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}