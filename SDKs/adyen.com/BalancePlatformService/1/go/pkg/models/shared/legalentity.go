// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LegalEntityTypeEnum - The type of legal entity.
//
//	Possible values: **individual** or **organization**
type LegalEntityTypeEnum string

const (
	LegalEntityTypeEnumIndividual   LegalEntityTypeEnum = "individual"
	LegalEntityTypeEnumOrganization LegalEntityTypeEnum = "organization"
)

func (e *LegalEntityTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "individual":
		fallthrough
	case "organization":
		*e = LegalEntityTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LegalEntityTypeEnum: %s", s)
	}
}

// LegalEntity - OK - the request has succeeded.
type LegalEntity struct {
	// List of documents uploaded for the legal entity.
	Documents []EntityReference `json:"documents,omitempty"`
	// List of legal entities associated with the current legal entity.
	// For example, ultimate beneficial owners associated with an organization through ownership or control, or as signatories.
	EntityAssociations []LegalEntityAssociation `json:"entityAssociations,omitempty"`
	// The unique identifier of the legal entity.
	ID           string        `json:"id"`
	Individual   *Individual   `json:"individual,omitempty"`
	Organization *Organization `json:"organization,omitempty"`
	// Your reference for the legal entity, maximum 150 characters.
	Reference *string `json:"reference,omitempty"`
	// List of transfer instruments owned by the legal entity.
	TransferInstruments []EntityReference `json:"transferInstruments,omitempty"`
	// The type of legal entity.
	//
	//  Possible values: **individual** or **organization**
	Type LegalEntityTypeEnum `json:"type"`
}
