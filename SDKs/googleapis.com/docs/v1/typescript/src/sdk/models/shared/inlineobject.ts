/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { InlineObjectProperties } from "./inlineobjectproperties";
import { SuggestedInlineObjectProperties } from "./suggestedinlineobjectproperties";
import { Expose, Transform, Type } from "class-transformer";

/**
 * An object that appears inline with text. An InlineObject contains an EmbeddedObject such as an image.
 */
export class InlineObject extends SpeakeasyBase {
  /**
   * Properties of an InlineObject.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inlineObjectProperties" })
  @Type(() => InlineObjectProperties)
  inlineObjectProperties?: InlineObjectProperties;

  /**
   * The ID of this inline object. Can be used to update an objectâ€™s properties.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "objectId" })
  objectId?: string;

  /**
   * The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "suggestedDeletionIds" })
  suggestedDeletionIds?: string[];

  /**
   * The suggested changes to the inline object properties, keyed by suggestion ID.
   */
  @SpeakeasyMetadata({ elemType: SuggestedInlineObjectProperties })
  @Expose({ name: "suggestedInlineObjectPropertiesChanges" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, SuggestedInlineObjectProperties> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], SuggestedInlineObjectProperties);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  suggestedInlineObjectPropertiesChanges?: Record<
    string,
    SuggestedInlineObjectProperties
  >;

  /**
   * The suggested insertion ID. If empty, then this is not a suggested insertion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "suggestedInsertionId" })
  suggestedInsertionId?: string;
}
