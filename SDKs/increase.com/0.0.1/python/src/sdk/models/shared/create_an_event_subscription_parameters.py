"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CreateAnEventSubscriptionParametersSelectedEventCategoryEnum(str, Enum):
    r"""If specified, this subscription will only receive webhooks for Events with the specified `category`."""
    ACCOUNT_CREATED = 'account.created'
    ACCOUNT_UPDATED = 'account.updated'
    ACCOUNT_NUMBER_CREATED = 'account_number.created'
    ACCOUNT_NUMBER_UPDATED = 'account_number.updated'
    ACCOUNT_STATEMENT_CREATED = 'account_statement.created'
    ACCOUNT_TRANSFER_CREATED = 'account_transfer.created'
    ACCOUNT_TRANSFER_UPDATED = 'account_transfer.updated'
    ACH_PRENOTIFICATION_CREATED = 'ach_prenotification.created'
    ACH_PRENOTIFICATION_UPDATED = 'ach_prenotification.updated'
    ACH_TRANSFER_CREATED = 'ach_transfer.created'
    ACH_TRANSFER_UPDATED = 'ach_transfer.updated'
    CARD_CREATED = 'card.created'
    CARD_UPDATED = 'card.updated'
    CARD_DISPUTE_CREATED = 'card_dispute.created'
    CARD_DISPUTE_UPDATED = 'card_dispute.updated'
    CHECK_DEPOSIT_CREATED = 'check_deposit.created'
    CHECK_DEPOSIT_UPDATED = 'check_deposit.updated'
    CHECK_TRANSFER_CREATED = 'check_transfer.created'
    CHECK_TRANSFER_UPDATED = 'check_transfer.updated'
    DECLINED_TRANSACTION_CREATED = 'declined_transaction.created'
    DIGITAL_WALLET_TOKEN_CREATED = 'digital_wallet_token.created'
    DIGITAL_WALLET_TOKEN_UPDATED = 'digital_wallet_token.updated'
    DOCUMENT_CREATED = 'document.created'
    ENTITY_CREATED = 'entity.created'
    ENTITY_UPDATED = 'entity.updated'
    EXTERNAL_ACCOUNT_CREATED = 'external_account.created'
    FILE_CREATED = 'file.created'
    GROUP_UPDATED = 'group.updated'
    GROUP_HEARTBEAT = 'group.heartbeat'
    INBOUND_ACH_TRANSFER_RETURN_CREATED = 'inbound_ach_transfer_return.created'
    INBOUND_ACH_TRANSFER_RETURN_UPDATED = 'inbound_ach_transfer_return.updated'
    INBOUND_WIRE_DRAWDOWN_REQUEST_CREATED = 'inbound_wire_drawdown_request.created'
    OAUTH_CONNECTION_CREATED = 'oauth_connection.created'
    OAUTH_CONNECTION_DEACTIVATED = 'oauth_connection.deactivated'
    PENDING_TRANSACTION_CREATED = 'pending_transaction.created'
    PENDING_TRANSACTION_UPDATED = 'pending_transaction.updated'
    REAL_TIME_DECISION_CARD_AUTHORIZATION_REQUESTED = 'real_time_decision.card_authorization_requested'
    REAL_TIME_DECISION_DIGITAL_WALLET_TOKEN_REQUESTED = 'real_time_decision.digital_wallet_token_requested'
    REAL_TIME_DECISION_DIGITAL_WALLET_AUTHENTICATION_REQUESTED = 'real_time_decision.digital_wallet_authentication_requested'
    REAL_TIME_PAYMENTS_TRANSFER_CREATED = 'real_time_payments_transfer.created'
    REAL_TIME_PAYMENTS_TRANSFER_UPDATED = 'real_time_payments_transfer.updated'
    REAL_TIME_PAYMENTS_REQUEST_FOR_PAYMENT_CREATED = 'real_time_payments_request_for_payment.created'
    REAL_TIME_PAYMENTS_REQUEST_FOR_PAYMENT_UPDATED = 'real_time_payments_request_for_payment.updated'
    TRANSACTION_CREATED = 'transaction.created'
    WIRE_DRAWDOWN_REQUEST_CREATED = 'wire_drawdown_request.created'
    WIRE_DRAWDOWN_REQUEST_UPDATED = 'wire_drawdown_request.updated'
    WIRE_TRANSFER_CREATED = 'wire_transfer.created'
    WIRE_TRANSFER_UPDATED = 'wire_transfer.updated'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEventSubscriptionParameters:
    
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""The URL you'd like us to send webhooks to."""  
    selected_event_category: Optional[CreateAnEventSubscriptionParametersSelectedEventCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selected_event_category'), 'exclude': lambda f: f is None }})
    r"""If specified, this subscription will only receive webhooks for Events with the specified `category`."""  
    shared_secret: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shared_secret'), 'exclude': lambda f: f is None }})
    r"""The key that will be used to sign webhooks. If no value is passed, a random string will be used as default."""  
    