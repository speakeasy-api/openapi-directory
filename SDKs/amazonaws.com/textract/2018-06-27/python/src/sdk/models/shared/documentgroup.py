"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import detectedsignature as shared_detectedsignature
from ..shared import splitdocument as shared_splitdocument
from ..shared import undetectedsignature as shared_undetectedsignature
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DocumentGroup:
    r"""Summary information about documents grouped by the same document type."""
    
    detected_signatures: Optional[list[shared_detectedsignature.DetectedSignature]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DetectedSignatures'), 'exclude': lambda f: f is None }})  
    split_documents: Optional[list[shared_splitdocument.SplitDocument]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SplitDocuments'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type'), 'exclude': lambda f: f is None }})  
    undetected_signatures: Optional[list[shared_undetectedsignature.UndetectedSignature]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UndetectedSignatures'), 'exclude': lambda f: f is None }})  
    