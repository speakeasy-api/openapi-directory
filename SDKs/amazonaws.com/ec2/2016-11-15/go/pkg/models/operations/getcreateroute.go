// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETCreateRouteActionEnum
type GETCreateRouteActionEnum string

const (
	GETCreateRouteActionEnumCreateRoute GETCreateRouteActionEnum = "CreateRoute"
)

func (e *GETCreateRouteActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CreateRoute":
		*e = GETCreateRouteActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateRouteActionEnum: %s", s)
	}
}

// GETCreateRouteVersionEnum
type GETCreateRouteVersionEnum string

const (
	GETCreateRouteVersionEnumTwoThousandAndSixteen1115 GETCreateRouteVersionEnum = "2016-11-15"
)

func (e *GETCreateRouteVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETCreateRouteVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateRouteVersionEnum: %s", s)
	}
}

type GETCreateRouteQueryParams struct {
	Action GETCreateRouteActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The ID of the carrier gateway.</p> <p>You can only use this option when the VPC contains a subnet which is associated with a Wavelength Zone.</p>
	CarrierGatewayID *string `queryParam:"style=form,explode=true,name=CarrierGatewayId"`
	// The Amazon Resource Name (ARN) of the core network.
	CoreNetworkArn *string `queryParam:"style=form,explode=true,name=CoreNetworkArn"`
	// The IPv4 CIDR address block used for the destination match. Routing decisions are based on the most specific match. We modify the specified CIDR block to its canonical form; for example, if you specify <code>100.68.0.18/18</code>, we modify it to <code>100.68.0.0/18</code>.
	DestinationCidrBlock *string `queryParam:"style=form,explode=true,name=DestinationCidrBlock"`
	// The IPv6 CIDR block used for the destination match. Routing decisions are based on the most specific match.
	DestinationIpv6CidrBlock *string `queryParam:"style=form,explode=true,name=DestinationIpv6CidrBlock"`
	// The ID of a prefix list used for the destination match.
	DestinationPrefixListID *string `queryParam:"style=form,explode=true,name=DestinationPrefixListId"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// [IPv6 traffic only] The ID of an egress-only internet gateway.
	EgressOnlyInternetGatewayID *string `queryParam:"style=form,explode=true,name=EgressOnlyInternetGatewayId"`
	// The ID of an internet gateway or virtual private gateway attached to your VPC.
	GatewayID *string `queryParam:"style=form,explode=true,name=GatewayId"`
	// The ID of a NAT instance in your VPC. The operation fails if you specify an instance ID unless exactly one network interface is attached.
	InstanceID *string `queryParam:"style=form,explode=true,name=InstanceId"`
	// The ID of the local gateway.
	LocalGatewayID *string `queryParam:"style=form,explode=true,name=LocalGatewayId"`
	// [IPv4 traffic only] The ID of a NAT gateway.
	NatGatewayID *string `queryParam:"style=form,explode=true,name=NatGatewayId"`
	// The ID of a network interface.
	NetworkInterfaceID *string `queryParam:"style=form,explode=true,name=NetworkInterfaceId"`
	// The ID of the route table for the route.
	RouteTableID string `queryParam:"style=form,explode=true,name=RouteTableId"`
	// The ID of a transit gateway.
	TransitGatewayID *string                   `queryParam:"style=form,explode=true,name=TransitGatewayId"`
	Version          GETCreateRouteVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	// The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.
	VpcEndpointID *string `queryParam:"style=form,explode=true,name=VpcEndpointId"`
	// The ID of a VPC peering connection.
	VpcPeeringConnectionID *string `queryParam:"style=form,explode=true,name=VpcPeeringConnectionId"`
}

type GETCreateRouteHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETCreateRouteRequest struct {
	QueryParams GETCreateRouteQueryParams
	Headers     GETCreateRouteHeaders
}

type GETCreateRouteResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
