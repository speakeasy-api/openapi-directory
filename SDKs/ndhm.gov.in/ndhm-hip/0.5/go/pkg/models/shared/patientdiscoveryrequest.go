// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type PatientDiscoveryRequestPatientGenderEnum string

const (
	PatientDiscoveryRequestPatientGenderEnumM PatientDiscoveryRequestPatientGenderEnum = "M"
	PatientDiscoveryRequestPatientGenderEnumF PatientDiscoveryRequestPatientGenderEnum = "F"
	PatientDiscoveryRequestPatientGenderEnumO PatientDiscoveryRequestPatientGenderEnum = "O"
	PatientDiscoveryRequestPatientGenderEnumU PatientDiscoveryRequestPatientGenderEnum = "U"
)

func (e PatientDiscoveryRequestPatientGenderEnum) ToPointer() *PatientDiscoveryRequestPatientGenderEnum {
	return &e
}

func (e *PatientDiscoveryRequestPatientGenderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "M":
		fallthrough
	case "F":
		fallthrough
	case "O":
		fallthrough
	case "U":
		*e = PatientDiscoveryRequestPatientGenderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatientDiscoveryRequestPatientGenderEnum: %v", v)
	}
}

type PatientDiscoveryRequestPatient struct {
	Gender PatientDiscoveryRequestPatientGenderEnum `json:"gender"`
	// Identifier of patient at consent manager
	ID                    string       `json:"id"`
	Name                  string       `json:"name"`
	UnverifiedIdentifiers []Identifier `json:"unverifiedIdentifiers,omitempty"`
	VerifiedIdentifiers   []Identifier `json:"verifiedIdentifiers"`
	YearOfBirth           int64        `json:"yearOfBirth"`
}

type PatientDiscoveryRequest struct {
	Patient PatientDiscoveryRequestPatient `json:"patient"`
	// a nonce, unique for each HTTP request.
	RequestID string `json:"requestId"`
	// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
	Timestamp time.Time `json:"timestamp"`
	// correlation-Id for patient discovery and subsequent care context linkage
	TransactionID string `json:"transactionId"`
}
