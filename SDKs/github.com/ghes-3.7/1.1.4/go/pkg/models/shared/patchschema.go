// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PatchSchemaOperationsOpEnum string

const (
	PatchSchemaOperationsOpEnumAdd     PatchSchemaOperationsOpEnum = "add"
	PatchSchemaOperationsOpEnumReplace PatchSchemaOperationsOpEnum = "replace"
	PatchSchemaOperationsOpEnumRemove  PatchSchemaOperationsOpEnum = "remove"
)

func (e PatchSchemaOperationsOpEnum) ToPointer() *PatchSchemaOperationsOpEnum {
	return &e
}

func (e *PatchSchemaOperationsOpEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "add":
		fallthrough
	case "replace":
		fallthrough
	case "remove":
		*e = PatchSchemaOperationsOpEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchSchemaOperationsOpEnum: %v", v)
	}
}

type PatchSchemaOperations struct {
	Op   PatchSchemaOperationsOpEnum `json:"op"`
	Path *string                     `json:"path,omitempty"`
	// Corresponding 'value' of that field specified by 'path'
	Value *string `json:"value,omitempty"`
}

type PatchSchemaSchemasEnum string

const (
	PatchSchemaSchemasEnumUrnIetfParamsScimAPIMessages20PatchOp PatchSchemaSchemasEnum = "urn:ietf:params:scim:api:messages:2.0:PatchOp"
)

func (e PatchSchemaSchemasEnum) ToPointer() *PatchSchemaSchemasEnum {
	return &e
}

func (e *PatchSchemaSchemasEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "urn:ietf:params:scim:api:messages:2.0:PatchOp":
		*e = PatchSchemaSchemasEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchSchemaSchemasEnum: %v", v)
	}
}

type PatchSchema struct {
	// patch operations list
	Operations []PatchSchemaOperations  `json:"Operations"`
	Schemas    []PatchSchemaSchemasEnum `json:"schemas"`
}
