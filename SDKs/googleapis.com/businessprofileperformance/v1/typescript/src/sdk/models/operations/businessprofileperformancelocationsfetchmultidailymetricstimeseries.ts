/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum BusinessprofileperformanceLocationsFetchMultiDailyMetricsTimeSeriesDailyMetricsEnum {
  DailyMetricUnknown = "DAILY_METRIC_UNKNOWN",
  BusinessImpressionsDesktopMaps = "BUSINESS_IMPRESSIONS_DESKTOP_MAPS",
  BusinessImpressionsDesktopSearch = "BUSINESS_IMPRESSIONS_DESKTOP_SEARCH",
  BusinessImpressionsMobileMaps = "BUSINESS_IMPRESSIONS_MOBILE_MAPS",
  BusinessImpressionsMobileSearch = "BUSINESS_IMPRESSIONS_MOBILE_SEARCH",
  BusinessConversations = "BUSINESS_CONVERSATIONS",
  BusinessDirectionRequests = "BUSINESS_DIRECTION_REQUESTS",
  CallClicks = "CALL_CLICKS",
  WebsiteClicks = "WEBSITE_CLICKS",
  BusinessBookings = "BUSINESS_BOOKINGS",
  BusinessFoodOrders = "BUSINESS_FOOD_ORDERS",
  BusinessFoodMenuClicks = "BUSINESS_FOOD_MENU_CLICKS",
}

export class BusinessprofileperformanceLocationsFetchMultiDailyMetricsTimeSeriesRequest extends SpeakeasyBase {
  /**
   * V1 error format.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=$.xgafv",
  })
  dollarXgafv?: shared.XgafvEnum;

  /**
   * OAuth access token.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=access_token",
  })
  accessToken?: string;

  /**
   * Data format for response.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=alt" })
  alt?: shared.AltEnum;

  /**
   * JSONP
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=callback",
  })
  callback?: string;

  /**
   * Required. The metrics to retrieve time series for.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=dailyMetrics",
  })
  dailyMetrics?: BusinessprofileperformanceLocationsFetchMultiDailyMetricsTimeSeriesDailyMetricsEnum[];

  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=dailyRange.endDate.day",
  })
  dailyRangeEndDateDay?: number;

  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=dailyRange.endDate.month",
  })
  dailyRangeEndDateMonth?: number;

  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=dailyRange.endDate.year",
  })
  dailyRangeEndDateYear?: number;

  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=dailyRange.startDate.day",
  })
  dailyRangeStartDateDay?: number;

  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=dailyRange.startDate.month",
  })
  dailyRangeStartDateMonth?: number;

  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=dailyRange.startDate.year",
  })
  dailyRangeStartDateYear?: number;

  /**
   * Selector specifying which fields to include in a partial response.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fields",
  })
  fields?: string;

  /**
   * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=key" })
  key?: string;

  /**
   * Required. The location for which the time series should be fetched. Format: locations/{location_id} where location_id is an unobfuscated listing id.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=location",
  })
  location: string;

  /**
   * OAuth 2.0 token for the current user.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=oauth_token",
  })
  oauthToken?: string;

  /**
   * Returns response with indentations and line breaks.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=prettyPrint",
  })
  prettyPrint?: boolean;

  /**
   * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=quotaUser",
  })
  quotaUser?: string;

  /**
   * Legacy upload protocol for media (e.g. "media", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=uploadType",
  })
  uploadType?: string;

  /**
   * Upload protocol for media (e.g. "raw", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=upload_protocol",
  })
  uploadProtocol?: string;
}

export class BusinessprofileperformanceLocationsFetchMultiDailyMetricsTimeSeriesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Successful response
   */
  @SpeakeasyMetadata()
  fetchMultiDailyMetricsTimeSeriesResponse?: shared.FetchMultiDailyMetricsTimeSeriesResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
