// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDescribeDBSecurityGroupsActionEnum
type GETDescribeDBSecurityGroupsActionEnum string

const (
	GETDescribeDBSecurityGroupsActionEnumDescribeDbSecurityGroups GETDescribeDBSecurityGroupsActionEnum = "DescribeDBSecurityGroups"
)

func (e *GETDescribeDBSecurityGroupsActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DescribeDBSecurityGroups":
		*e = GETDescribeDBSecurityGroupsActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeDBSecurityGroupsActionEnum: %s", s)
	}
}

// GETDescribeDBSecurityGroupsVersionEnum
type GETDescribeDBSecurityGroupsVersionEnum string

const (
	GETDescribeDBSecurityGroupsVersionEnumTwoThousandAndThirteen0212 GETDescribeDBSecurityGroupsVersionEnum = "2013-02-12"
)

func (e *GETDescribeDBSecurityGroupsVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2013-02-12":
		*e = GETDescribeDBSecurityGroupsVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeDBSecurityGroupsVersionEnum: %s", s)
	}
}

type GETDescribeDBSecurityGroupsQueryParams struct {
	Action              GETDescribeDBSecurityGroupsActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	DBSecurityGroupName *string                                `queryParam:"style=form,explode=true,name=DBSecurityGroupName"`
	Marker              *string                                `queryParam:"style=form,explode=true,name=Marker"`
	MaxRecords          *int64                                 `queryParam:"style=form,explode=true,name=MaxRecords"`
	Version             GETDescribeDBSecurityGroupsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETDescribeDBSecurityGroupsHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDescribeDBSecurityGroupsRequest struct {
	QueryParams GETDescribeDBSecurityGroupsQueryParams
	Headers     GETDescribeDBSecurityGroupsHeaders
}

type GETDescribeDBSecurityGroupsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
