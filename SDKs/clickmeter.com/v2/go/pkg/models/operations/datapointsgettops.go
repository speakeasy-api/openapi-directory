// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DataPointsGetTopsPathParams struct {
	// Id of the datapoint
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

// DataPointsGetTopsTimeframeEnum - Timeframe of the request. See list at $timeframeList
type DataPointsGetTopsTimeframeEnum string

const (
	DataPointsGetTopsTimeframeEnumYesterday     DataPointsGetTopsTimeframeEnum = "yesterday"
	DataPointsGetTopsTimeframeEnumLast7         DataPointsGetTopsTimeframeEnum = "last7"
	DataPointsGetTopsTimeframeEnumLast30        DataPointsGetTopsTimeframeEnum = "last30"
	DataPointsGetTopsTimeframeEnumLastmonth     DataPointsGetTopsTimeframeEnum = "lastmonth"
	DataPointsGetTopsTimeframeEnumCurrentmonth  DataPointsGetTopsTimeframeEnum = "currentmonth"
	DataPointsGetTopsTimeframeEnumPreviousmonth DataPointsGetTopsTimeframeEnum = "previousmonth"
	DataPointsGetTopsTimeframeEnumLast90        DataPointsGetTopsTimeframeEnum = "last90"
	DataPointsGetTopsTimeframeEnumLast120       DataPointsGetTopsTimeframeEnum = "last120"
	DataPointsGetTopsTimeframeEnumLast180       DataPointsGetTopsTimeframeEnum = "last180"
	DataPointsGetTopsTimeframeEnumBeginning     DataPointsGetTopsTimeframeEnum = "beginning"
	DataPointsGetTopsTimeframeEnumCustom        DataPointsGetTopsTimeframeEnum = "custom"
)

func (e *DataPointsGetTopsTimeframeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "yesterday":
		fallthrough
	case "last7":
		fallthrough
	case "last30":
		fallthrough
	case "lastmonth":
		fallthrough
	case "currentmonth":
		fallthrough
	case "previousmonth":
		fallthrough
	case "last90":
		fallthrough
	case "last120":
		fallthrough
	case "last180":
		fallthrough
	case "beginning":
		fallthrough
	case "custom":
		*e = DataPointsGetTopsTimeframeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DataPointsGetTopsTimeframeEnum: %s", s)
	}
}

// DataPointsGetTopsTypeEnum - Type of the report.
type DataPointsGetTopsTypeEnum string

const (
	DataPointsGetTopsTypeEnumBrowsers         DataPointsGetTopsTypeEnum = "browsers"
	DataPointsGetTopsTypeEnumBrowsersfamilies DataPointsGetTopsTypeEnum = "browsersfamilies"
	DataPointsGetTopsTypeEnumPlatforms        DataPointsGetTopsTypeEnum = "platforms"
	DataPointsGetTopsTypeEnumCities           DataPointsGetTopsTypeEnum = "cities"
	DataPointsGetTopsTypeEnumCountries        DataPointsGetTopsTypeEnum = "countries"
	DataPointsGetTopsTypeEnumIsps             DataPointsGetTopsTypeEnum = "isps"
	DataPointsGetTopsTypeEnumIps              DataPointsGetTopsTypeEnum = "ips"
	DataPointsGetTopsTypeEnumOss              DataPointsGetTopsTypeEnum = "oss"
	DataPointsGetTopsTypeEnumOssfamilies      DataPointsGetTopsTypeEnum = "ossfamilies"
	DataPointsGetTopsTypeEnumKeywords         DataPointsGetTopsTypeEnum = "keywords"
	DataPointsGetTopsTypeEnumReferrers        DataPointsGetTopsTypeEnum = "referrers"
	DataPointsGetTopsTypeEnumDestinations     DataPointsGetTopsTypeEnum = "destinations"
	DataPointsGetTopsTypeEnumLanguages        DataPointsGetTopsTypeEnum = "languages"
	DataPointsGetTopsTypeEnumParams           DataPointsGetTopsTypeEnum = "params"
)

func (e *DataPointsGetTopsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "browsers":
		fallthrough
	case "browsersfamilies":
		fallthrough
	case "platforms":
		fallthrough
	case "cities":
		fallthrough
	case "countries":
		fallthrough
	case "isps":
		fallthrough
	case "ips":
		fallthrough
	case "oss":
		fallthrough
	case "ossfamilies":
		fallthrough
	case "keywords":
		fallthrough
	case "referrers":
		fallthrough
	case "destinations":
		fallthrough
	case "languages":
		fallthrough
	case "params":
		*e = DataPointsGetTopsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DataPointsGetTopsTypeEnum: %s", s)
	}
}

type DataPointsGetTopsQueryParams struct {
	// If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)
	FromDay *string `queryParam:"style=form,explode=true,name=fromDay"`
	// Timeframe of the request. See list at $timeframeList
	Timeframe DataPointsGetTopsTimeframeEnum `queryParam:"style=form,explode=true,name=timeframe"`
	// If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)
	ToDay *string `queryParam:"style=form,explode=true,name=toDay"`
	// Type of the report.
	Type DataPointsGetTopsTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type DataPointsGetTopsRequest struct {
	PathParams  DataPointsGetTopsPathParams
	QueryParams DataPointsGetTopsQueryParams
}

type DataPointsGetTopsResponse struct {
	APICoreDtoTopsTop *shared.APICoreDtoTopsTop
	ContentType       string
	StatusCode        int
	RawResponse       *http.Response
}
