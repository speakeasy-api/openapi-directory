/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PriceCoverageView - A price coverage view. Covers the `price_coverage_stats` Scorecard functionality in pre-v3.0 API versions. For more information, refer to Price Coverage for Push and Hint partners.
 */
public class PriceCoverageView {
    /**
     * Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("calculationDate")
    public Date calculationDate;
    public PriceCoverageView withCalculationDate(Date calculationDate) {
        this.calculationDate = calculationDate;
        return this;
    }
    
    /**
     * The total number of properties that have prices for the given itineraries.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("matchedPropertyCount")
    public Integer matchedPropertyCount;
    public PriceCoverageView withMatchedPropertyCount(Integer matchedPropertyCount) {
        this.matchedPropertyCount = matchedPropertyCount;
        return this;
    }
    
    /**
     * The ratio between the number of hotels which have at least one price for the calculation period and `matched_property_count`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priceCoverageBinaryPercent")
    public Double priceCoverageBinaryPercent;
    public PriceCoverageView withPriceCoverageBinaryPercent(Double priceCoverageBinaryPercent) {
        this.priceCoverageBinaryPercent = priceCoverageBinaryPercent;
        return this;
    }
    
    /**
     * Price coverage stats for combinations of advance booking window and length of stay ranges.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priceCoverageBuckets")
    public PriceCoverageBucket[] priceCoverageBuckets;
    public PriceCoverageView withPriceCoverageBuckets(PriceCoverageBucket[] priceCoverageBuckets) {
        this.priceCoverageBuckets = priceCoverageBuckets;
        return this;
    }
    
    /**
     * The overall price coverage for an account. This value is the ratio between the number of hotel prices for the calculation booking window and length of stay range divided by the number of all possible prices, which is `matched_property_count` times 330 (for advance book window) times 30 (for length of stay).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priceCoveragePercent")
    public Double priceCoveragePercent;
    public PriceCoverageView withPriceCoveragePercent(Double priceCoveragePercent) {
        this.priceCoveragePercent = priceCoveragePercent;
        return this;
    }
    
}
