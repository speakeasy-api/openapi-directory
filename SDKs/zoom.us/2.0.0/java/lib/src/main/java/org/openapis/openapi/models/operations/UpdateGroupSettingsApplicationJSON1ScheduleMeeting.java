/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class UpdateGroupSettingsApplicationJSON1ScheduleMeeting {
    /**
     * Determine how participants can join the audio portion of the meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audio_type")
    public String audioType;
    public UpdateGroupSettingsApplicationJSON1ScheduleMeeting withAudioType(String audioType) {
        this.audioType = audioType;
        return this;
    }
    
    /**
     * If the value is set to `true`, the meeting password will be encrypted and included in the join meeting link to allow participants to join with just one click without having to enter the password.
     *  
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("embed_password_in_join_link")
    public Boolean embedPasswordInJoinLink;
    public UpdateGroupSettingsApplicationJSON1ScheduleMeeting withEmbedPasswordInJoinLink(Boolean embedPasswordInJoinLink) {
        this.embedPasswordInJoinLink = embedPasswordInJoinLink;
        return this;
    }
    
    /**
     * If join before host option is enabled for a personal meeting, then enforce password requirement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("force_pmi_jbh_password")
    public Boolean forcePmiJbhPassword;
    public UpdateGroupSettingsApplicationJSON1ScheduleMeeting withForcePmiJbhPassword(Boolean forcePmiJbhPassword) {
        this.forcePmiJbhPassword = forcePmiJbhPassword;
        return this;
    }
    
    /**
     * Start meetings with host video on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host_video")
    public Boolean hostVideo;
    public UpdateGroupSettingsApplicationJSON1ScheduleMeeting withHostVideo(Boolean hostVideo) {
        this.hostVideo = hostVideo;
        return this;
    }
    
    /**
     * Allow participants to join the meeting before the host arrives
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("join_before_host")
    public Boolean joinBeforeHost;
    public UpdateGroupSettingsApplicationJSON1ScheduleMeeting withJoinBeforeHost(Boolean joinBeforeHost) {
        this.joinBeforeHost = joinBeforeHost;
        return this;
    }
    
    /**
     * Automatically mute all participants when they join the meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mute_upon_entry")
    public Boolean muteUponEntry;
    public UpdateGroupSettingsApplicationJSON1ScheduleMeeting withMuteUponEntry(Boolean muteUponEntry) {
        this.muteUponEntry = muteUponEntry;
        return this;
    }
    
    /**
     * Start meetings with participant video on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("participant_video")
    public Boolean participantVideo;
    public UpdateGroupSettingsApplicationJSON1ScheduleMeeting withParticipantVideo(Boolean participantVideo) {
        this.participantVideo = participantVideo;
        return this;
    }
    
    /**
     * Generate and send new passwords for newly scheduled or edited meetings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pstn_password_protected")
    public Boolean pstnPasswordProtected;
    public UpdateGroupSettingsApplicationJSON1ScheduleMeeting withPstnPasswordProtected(Boolean pstnPasswordProtected) {
        this.pstnPasswordProtected = pstnPasswordProtected;
        return this;
    }
    
    /**
     * Require password from all participants before joining a meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("require_password_for_all_meetings")
    public Boolean requirePasswordForAllMeetings;
    public UpdateGroupSettingsApplicationJSON1ScheduleMeeting withRequirePasswordForAllMeetings(Boolean requirePasswordForAllMeetings) {
        this.requirePasswordForAllMeetings = requirePasswordForAllMeetings;
        return this;
    }
    
    /**
     * If enabled, a random password will be generated on the user's end who starts the instant meeting. Other participants will have to enter the password to join the meeting. If you use PMI for your instant meetings, this option will be disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("require_password_for_instant_meetings")
    public Boolean requirePasswordForInstantMeetings;
    public UpdateGroupSettingsApplicationJSON1ScheduleMeeting withRequirePasswordForInstantMeetings(Boolean requirePasswordForInstantMeetings) {
        this.requirePasswordForInstantMeetings = requirePasswordForInstantMeetings;
        return this;
    }
    
    /**
     * Indicates whether a password is required for [PMI](https://support.zoom.us/hc/en-us/articles/203276937-Using-Personal-Meeting-ID-PMI-) meetings or not. The value can be one of the following:&lt;br&gt;
     * `none`: Do not require password for PMI meetings.&lt;br&gt; 
     * `all`: Require participants to enter password for all PMI enabled meetings.&lt;br&gt; `jbh_only`: Require password only for meetings where the **"join before host"** setting is enabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("require_password_for_pmi_meetings")
    public UpdateGroupSettingsApplicationJSON1ScheduleMeetingRequirePasswordForPmiMeetingsEnum requirePasswordForPmiMeetings;
    public UpdateGroupSettingsApplicationJSON1ScheduleMeeting withRequirePasswordForPmiMeetings(UpdateGroupSettingsApplicationJSON1ScheduleMeetingRequirePasswordForPmiMeetingsEnum requirePasswordForPmiMeetings) {
        this.requirePasswordForPmiMeetings = requirePasswordForPmiMeetings;
        return this;
    }
    
    /**
     * Require a password for meetings which have already been scheduled
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("require_password_for_scheduled_meetings")
    public Boolean requirePasswordForScheduledMeetings;
    public UpdateGroupSettingsApplicationJSON1ScheduleMeeting withRequirePasswordForScheduledMeetings(Boolean requirePasswordForScheduledMeetings) {
        this.requirePasswordForScheduledMeetings = requirePasswordForScheduledMeetings;
        return this;
    }
    
    /**
     * This setting applies for regular meetings that do not use PMI. If enabled, a password will be generated while a host schedules a new meeting and participants will be required to enter the password before they can join the meeting. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("require_password_for_scheduling_new_meetings")
    public Boolean requirePasswordForSchedulingNewMeetings;
    public UpdateGroupSettingsApplicationJSON1ScheduleMeeting withRequirePasswordForSchedulingNewMeetings(Boolean requirePasswordForSchedulingNewMeetings) {
        this.requirePasswordForSchedulingNewMeetings = requirePasswordForSchedulingNewMeetings;
        return this;
    }
    
    /**
     * Receive desktop notification for upcoming meetings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("upcoming_meeting_reminder")
    public Boolean upcomingMeetingReminder;
    public UpdateGroupSettingsApplicationJSON1ScheduleMeeting withUpcomingMeetingReminder(Boolean upcomingMeetingReminder) {
        this.upcomingMeetingReminder = upcomingMeetingReminder;
        return this;
    }
    
}
