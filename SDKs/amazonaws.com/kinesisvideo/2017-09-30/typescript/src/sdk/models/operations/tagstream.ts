/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class TagStreamRequestBody extends SpeakeasyBase {
  /**
   * The Amazon Resource Name (ARN) of the resource that you want to add the tag or tags to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StreamARN" })
  streamARN?: string;

  /**
   * The name of the stream that you want to add the tag or tags to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StreamName" })
  streamName?: string;

  /**
   * A list of tags to associate with the specified stream. Each tag is a key-value pair (the value is optional).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Tags" })
  tags: Record<string, string>;
}

export class TagStreamRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: TagStreamRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class TagStreamResponse extends SpeakeasyBase {
  /**
   * ClientLimitExceededException
   */
  @SpeakeasyMetadata()
  clientLimitExceededException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InvalidArgumentException
   */
  @SpeakeasyMetadata()
  invalidArgumentException?: any;

  /**
   * InvalidResourceFormatException
   */
  @SpeakeasyMetadata()
  invalidResourceFormatException?: any;

  /**
   * NotAuthorizedException
   */
  @SpeakeasyMetadata()
  notAuthorizedException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  tagStreamOutput?: Record<string, any>;

  /**
   * TagsPerResourceExceededLimitException
   */
  @SpeakeasyMetadata()
  tagsPerResourceExceededLimitException?: any;
}
