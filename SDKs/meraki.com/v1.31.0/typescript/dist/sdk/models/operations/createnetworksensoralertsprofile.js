"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateNetworkSensorAlertsProfileResponse = exports.CreateNetworkSensorAlertsProfile200ApplicationJSON = exports.CreateNetworkSensorAlertsProfile200ApplicationJSONSchedule = exports.CreateNetworkSensorAlertsProfile200ApplicationJSONRecipients = exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditions = exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold = exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater = exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc = exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum = exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature = exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum = exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25 = exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum = exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise = exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient = exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum = exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality = exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum = exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity = exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum = exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor = exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum = exports.CreateNetworkSensorAlertsProfileRequest = exports.CreateNetworkSensorAlertsProfileRequestBody = exports.CreateNetworkSensorAlertsProfileRequestBodySchedule = exports.CreateNetworkSensorAlertsProfileRequestBodyRecipients = exports.CreateNetworkSensorAlertsProfileRequestBodyConditions = exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThreshold = exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater = exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc = exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum = exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature = exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum = exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25 = exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum = exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise = exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient = exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum = exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality = exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum = exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity = exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum = exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor = exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum = exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
 */
var CreateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum;
(function (CreateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum) {
    CreateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum["Above"] = "above";
    CreateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum["Below"] = "below";
})(CreateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum = exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum || (exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum = {}));
/**
 * Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
 */
var CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum;
(function (CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum) {
    CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum["Zero"] = "0";
    CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum["Sixty"] = "60";
    CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum["OneHundredAndTwenty"] = "120";
    CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum["OneHundredAndEighty"] = "180";
    CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum["TwoHundredAndForty"] = "240";
    CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum["ThreeHundred"] = "300";
    CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum["SixHundred"] = "600";
    CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum["NineHundred"] = "900";
    CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum["OneThousandEightHundred"] = "1800";
    CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum["ThreeThousandSixHundred"] = "3600";
})(CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum = exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum || (exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum = {}));
/**
 * Door open threshold. 'open' must be provided and set to true.
 */
var CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor, _super);
    function CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "open" }),
        __metadata("design:type", Boolean)
    ], CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor.prototype, "open", void 0);
    return CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor = CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor;
/**
 * Alerting threshold as a qualitative humidity level.
 */
var CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum;
(function (CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum) {
    CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum["Fair"] = "fair";
    CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum["Good"] = "good";
    CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum["Inadequate"] = "inadequate";
    CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum["Poor"] = "poor";
})(CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum = exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum || (exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum = {}));
/**
 * Humidity threshold. One of 'relativePercentage' or 'quality' must be provided.
 */
var CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity, _super);
    function CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity.prototype, "quality", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "relativePercentage" }),
        __metadata("design:type", Number)
    ], CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity.prototype, "relativePercentage", void 0);
    return CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity = CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity;
/**
 * Alerting threshold as a qualitative indoor air quality level.
 */
var CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum;
(function (CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum) {
    CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum["Fair"] = "fair";
    CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum["Good"] = "good";
    CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum["Inadequate"] = "inadequate";
    CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum["Poor"] = "poor";
})(CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum = exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum || (exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum = {}));
/**
 * Indoor air quality score threshold. One of 'score' or 'quality' must be provided.
 */
var CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality, _super);
    function CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality.prototype, "quality", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "score" }),
        __metadata("design:type", Number)
    ], CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality.prototype, "score", void 0);
    return CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality = CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality;
/**
 * Alerting threshold as a qualitative ambient noise level.
 */
var CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum;
(function (CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum) {
    CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum["Fair"] = "fair";
    CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum["Good"] = "good";
    CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum["Inadequate"] = "inadequate";
    CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum["Poor"] = "poor";
})(CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum = exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum || (exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum = {}));
/**
 * Ambient noise threshold. One of 'level' or 'quality' must be provided.
 */
var CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient, _super);
    function CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "level" }),
        __metadata("design:type", Number)
    ], CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient.prototype, "level", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient.prototype, "quality", void 0);
    return CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient = CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient;
/**
 * Noise threshold. 'ambient' must be provided.
 */
var CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise, _super);
    function CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ambient" }),
        (0, class_transformer_1.Type)(function () {
            return CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient;
        }),
        __metadata("design:type", CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient)
    ], CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise.prototype, "ambient", void 0);
    return CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise = CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise;
/**
 * Alerting threshold as a qualitative PM2.5 level.
 */
var CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum;
(function (CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum) {
    CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum["Fair"] = "fair";
    CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum["Good"] = "good";
    CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum["Inadequate"] = "inadequate";
    CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum["Poor"] = "poor";
})(CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum = exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum || (exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum = {}));
/**
 * PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided.
 */
var CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25 = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25, _super);
    function CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "concentration" }),
        __metadata("design:type", Number)
    ], CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25.prototype, "concentration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25.prototype, "quality", void 0);
    return CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25 = CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25;
/**
 * Alerting threshold as a qualitative temperature level.
 */
var CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum;
(function (CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum) {
    CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum["Fair"] = "fair";
    CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum["Good"] = "good";
    CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum["Inadequate"] = "inadequate";
    CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum["Poor"] = "poor";
})(CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum = exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum || (exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum = {}));
/**
 * Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided.
 */
var CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature, _super);
    function CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "celsius" }),
        __metadata("design:type", Number)
    ], CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature.prototype, "celsius", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fahrenheit" }),
        __metadata("design:type", Number)
    ], CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature.prototype, "fahrenheit", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature.prototype, "quality", void 0);
    return CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature = CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature;
/**
 * Alerting threshold as a qualitative TVOC level.
 */
var CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum;
(function (CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum) {
    CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum["Fair"] = "fair";
    CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum["Good"] = "good";
    CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum["Inadequate"] = "inadequate";
    CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum["Poor"] = "poor";
})(CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum = exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum || (exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum = {}));
/**
 * TVOC concentration threshold. One of 'concentration' or 'quality' must be provided.
 */
var CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc, _super);
    function CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "concentration" }),
        __metadata("design:type", Number)
    ], CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc.prototype, "concentration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc.prototype, "quality", void 0);
    return CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc = CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc;
/**
 * Water detection threshold. 'present' must be provided and set to true.
 */
var CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater, _super);
    function CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "present" }),
        __metadata("design:type", Boolean)
    ], CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater.prototype, "present", void 0);
    return CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater = CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater;
/**
 * Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value.
 */
var CreateNetworkSensorAlertsProfileRequestBodyConditionsThreshold = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfileRequestBodyConditionsThreshold, _super);
    function CreateNetworkSensorAlertsProfileRequestBodyConditionsThreshold() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "door" }),
        (0, class_transformer_1.Type)(function () { return CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor; }),
        __metadata("design:type", CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor)
    ], CreateNetworkSensorAlertsProfileRequestBodyConditionsThreshold.prototype, "door", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "humidity" }),
        (0, class_transformer_1.Type)(function () { return CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity; }),
        __metadata("design:type", CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity)
    ], CreateNetworkSensorAlertsProfileRequestBodyConditionsThreshold.prototype, "humidity", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "indoorAirQuality" }),
        (0, class_transformer_1.Type)(function () {
            return CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality;
        }),
        __metadata("design:type", CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality)
    ], CreateNetworkSensorAlertsProfileRequestBodyConditionsThreshold.prototype, "indoorAirQuality", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "noise" }),
        (0, class_transformer_1.Type)(function () { return CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise; }),
        __metadata("design:type", CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise)
    ], CreateNetworkSensorAlertsProfileRequestBodyConditionsThreshold.prototype, "noise", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "pm25" }),
        (0, class_transformer_1.Type)(function () { return CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25; }),
        __metadata("design:type", CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25)
    ], CreateNetworkSensorAlertsProfileRequestBodyConditionsThreshold.prototype, "pm25", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "temperature" }),
        (0, class_transformer_1.Type)(function () {
            return CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature;
        }),
        __metadata("design:type", CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature)
    ], CreateNetworkSensorAlertsProfileRequestBodyConditionsThreshold.prototype, "temperature", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "tvoc" }),
        (0, class_transformer_1.Type)(function () { return CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc; }),
        __metadata("design:type", CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc)
    ], CreateNetworkSensorAlertsProfileRequestBodyConditionsThreshold.prototype, "tvoc", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "water" }),
        (0, class_transformer_1.Type)(function () { return CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater; }),
        __metadata("design:type", CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater)
    ], CreateNetworkSensorAlertsProfileRequestBodyConditionsThreshold.prototype, "water", void 0);
    return CreateNetworkSensorAlertsProfileRequestBodyConditionsThreshold;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfileRequestBodyConditionsThreshold = CreateNetworkSensorAlertsProfileRequestBodyConditionsThreshold;
var CreateNetworkSensorAlertsProfileRequestBodyConditions = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfileRequestBodyConditions, _super);
    function CreateNetworkSensorAlertsProfileRequestBodyConditions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "direction" }),
        __metadata("design:type", String)
    ], CreateNetworkSensorAlertsProfileRequestBodyConditions.prototype, "direction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "duration" }),
        __metadata("design:type", String)
    ], CreateNetworkSensorAlertsProfileRequestBodyConditions.prototype, "duration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "metric" }),
        __metadata("design:type", String)
    ], CreateNetworkSensorAlertsProfileRequestBodyConditions.prototype, "metric", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "threshold" }),
        (0, class_transformer_1.Type)(function () { return CreateNetworkSensorAlertsProfileRequestBodyConditionsThreshold; }),
        __metadata("design:type", CreateNetworkSensorAlertsProfileRequestBodyConditionsThreshold)
    ], CreateNetworkSensorAlertsProfileRequestBodyConditions.prototype, "threshold", void 0);
    return CreateNetworkSensorAlertsProfileRequestBodyConditions;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfileRequestBodyConditions = CreateNetworkSensorAlertsProfileRequestBodyConditions;
/**
 * List of recipients that will recieve the alert.
 */
var CreateNetworkSensorAlertsProfileRequestBodyRecipients = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfileRequestBodyRecipients, _super);
    function CreateNetworkSensorAlertsProfileRequestBodyRecipients() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "emails" }),
        __metadata("design:type", Array)
    ], CreateNetworkSensorAlertsProfileRequestBodyRecipients.prototype, "emails", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "httpServerIds" }),
        __metadata("design:type", Array)
    ], CreateNetworkSensorAlertsProfileRequestBodyRecipients.prototype, "httpServerIds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "smsNumbers" }),
        __metadata("design:type", Array)
    ], CreateNetworkSensorAlertsProfileRequestBodyRecipients.prototype, "smsNumbers", void 0);
    return CreateNetworkSensorAlertsProfileRequestBodyRecipients;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfileRequestBodyRecipients = CreateNetworkSensorAlertsProfileRequestBodyRecipients;
/**
 * The sensor schedule to use with the alert profile.
 */
var CreateNetworkSensorAlertsProfileRequestBodySchedule = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfileRequestBodySchedule, _super);
    function CreateNetworkSensorAlertsProfileRequestBodySchedule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], CreateNetworkSensorAlertsProfileRequestBodySchedule.prototype, "id", void 0);
    return CreateNetworkSensorAlertsProfileRequestBodySchedule;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfileRequestBodySchedule = CreateNetworkSensorAlertsProfileRequestBodySchedule;
var CreateNetworkSensorAlertsProfileRequestBody = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfileRequestBody, _super);
    function CreateNetworkSensorAlertsProfileRequestBody() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: CreateNetworkSensorAlertsProfileRequestBodyConditions,
        }),
        (0, class_transformer_1.Expose)({ name: "conditions" }),
        (0, class_transformer_1.Type)(function () { return CreateNetworkSensorAlertsProfileRequestBodyConditions; }),
        __metadata("design:type", Array)
    ], CreateNetworkSensorAlertsProfileRequestBody.prototype, "conditions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], CreateNetworkSensorAlertsProfileRequestBody.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "recipients" }),
        (0, class_transformer_1.Type)(function () { return CreateNetworkSensorAlertsProfileRequestBodyRecipients; }),
        __metadata("design:type", CreateNetworkSensorAlertsProfileRequestBodyRecipients)
    ], CreateNetworkSensorAlertsProfileRequestBody.prototype, "recipients", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "schedule" }),
        (0, class_transformer_1.Type)(function () { return CreateNetworkSensorAlertsProfileRequestBodySchedule; }),
        __metadata("design:type", CreateNetworkSensorAlertsProfileRequestBodySchedule)
    ], CreateNetworkSensorAlertsProfileRequestBody.prototype, "schedule", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "serials" }),
        __metadata("design:type", Array)
    ], CreateNetworkSensorAlertsProfileRequestBody.prototype, "serials", void 0);
    return CreateNetworkSensorAlertsProfileRequestBody;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfileRequestBody = CreateNetworkSensorAlertsProfileRequestBody;
var CreateNetworkSensorAlertsProfileRequest = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfileRequest, _super);
    function CreateNetworkSensorAlertsProfileRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "request, media_type=application/json" }),
        __metadata("design:type", CreateNetworkSensorAlertsProfileRequestBody)
    ], CreateNetworkSensorAlertsProfileRequest.prototype, "requestBody", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=networkId",
        }),
        __metadata("design:type", String)
    ], CreateNetworkSensorAlertsProfileRequest.prototype, "networkId", void 0);
    return CreateNetworkSensorAlertsProfileRequest;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfileRequest = CreateNetworkSensorAlertsProfileRequest;
/**
 * If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
 */
var CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum;
(function (CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum) {
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum["Above"] = "above";
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum["Below"] = "below";
})(CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum = exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum || (exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum = {}));
/**
 * Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
 */
var CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum;
(function (CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum) {
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["Zero"] = "0";
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["Sixty"] = "60";
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["OneHundredAndTwenty"] = "120";
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["OneHundredAndEighty"] = "180";
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["TwoHundredAndForty"] = "240";
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["ThreeHundred"] = "300";
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["SixHundred"] = "600";
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["NineHundred"] = "900";
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["OneThousandEightHundred"] = "1800";
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["ThreeThousandSixHundred"] = "3600";
})(CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum || (exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = {}));
/**
 * Door open threshold. 'open' must be provided and set to true.
 */
var CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor, _super);
    function CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "open" }),
        __metadata("design:type", Boolean)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor.prototype, "open", void 0);
    return CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor = CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor;
/**
 * Alerting threshold as a qualitative humidity level.
 */
var CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum;
(function (CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum) {
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum["Fair"] = "fair";
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum["Good"] = "good";
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum["Inadequate"] = "inadequate";
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum["Poor"] = "poor";
})(CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum = exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum || (exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum = {}));
/**
 * Humidity threshold. One of 'relativePercentage' or 'quality' must be provided.
 */
var CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity, _super);
    function CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity.prototype, "quality", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "relativePercentage" }),
        __metadata("design:type", Number)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity.prototype, "relativePercentage", void 0);
    return CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity = CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity;
/**
 * Alerting threshold as a qualitative indoor air quality level.
 */
var CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum;
(function (CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum) {
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum["Fair"] = "fair";
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum["Good"] = "good";
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum["Inadequate"] = "inadequate";
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum["Poor"] = "poor";
})(CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum = exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum || (exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum = {}));
/**
 * Indoor air quality score threshold. One of 'score' or 'quality' must be provided.
 */
var CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality, _super);
    function CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality.prototype, "quality", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "score" }),
        __metadata("design:type", Number)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality.prototype, "score", void 0);
    return CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality = CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality;
/**
 * Alerting threshold as a qualitative ambient noise level.
 */
var CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum;
(function (CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum) {
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum["Fair"] = "fair";
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum["Good"] = "good";
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum["Inadequate"] = "inadequate";
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum["Poor"] = "poor";
})(CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum = exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum || (exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum = {}));
/**
 * Ambient noise threshold. One of 'level' or 'quality' must be provided.
 */
var CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient, _super);
    function CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "level" }),
        __metadata("design:type", Number)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient.prototype, "level", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient.prototype, "quality", void 0);
    return CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient = CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient;
/**
 * Noise threshold. 'ambient' must be provided.
 */
var CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise, _super);
    function CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ambient" }),
        (0, class_transformer_1.Type)(function () {
            return CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient;
        }),
        __metadata("design:type", CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise.prototype, "ambient", void 0);
    return CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise = CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise;
/**
 * Alerting threshold as a qualitative PM2.5 level.
 */
var CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum;
(function (CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum) {
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum["Fair"] = "fair";
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum["Good"] = "good";
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum["Inadequate"] = "inadequate";
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum["Poor"] = "poor";
})(CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum = exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum || (exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum = {}));
/**
 * PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided.
 */
var CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25 = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25, _super);
    function CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "concentration" }),
        __metadata("design:type", Number)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25.prototype, "concentration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25.prototype, "quality", void 0);
    return CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25 = CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25;
/**
 * Alerting threshold as a qualitative temperature level.
 */
var CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum;
(function (CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum) {
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum["Fair"] = "fair";
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum["Good"] = "good";
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum["Inadequate"] = "inadequate";
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum["Poor"] = "poor";
})(CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum = exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum || (exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum = {}));
/**
 * Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided.
 */
var CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature, _super);
    function CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "celsius" }),
        __metadata("design:type", Number)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature.prototype, "celsius", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fahrenheit" }),
        __metadata("design:type", Number)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature.prototype, "fahrenheit", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature.prototype, "quality", void 0);
    return CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature = CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature;
/**
 * Alerting threshold as a qualitative TVOC level.
 */
var CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum;
(function (CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum) {
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum["Fair"] = "fair";
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum["Good"] = "good";
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum["Inadequate"] = "inadequate";
    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum["Poor"] = "poor";
})(CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum = exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum || (exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum = {}));
/**
 * TVOC concentration threshold. One of 'concentration' or 'quality' must be provided.
 */
var CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc, _super);
    function CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "concentration" }),
        __metadata("design:type", Number)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc.prototype, "concentration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc.prototype, "quality", void 0);
    return CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc = CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc;
/**
 * Water detection threshold. 'present' must be provided and set to true.
 */
var CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater, _super);
    function CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "present" }),
        __metadata("design:type", Boolean)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater.prototype, "present", void 0);
    return CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater = CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater;
/**
 * Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value.
 */
var CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold, _super);
    function CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "door" }),
        (0, class_transformer_1.Type)(function () {
            return CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor;
        }),
        __metadata("design:type", CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold.prototype, "door", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "humidity" }),
        (0, class_transformer_1.Type)(function () {
            return CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity;
        }),
        __metadata("design:type", CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold.prototype, "humidity", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "indoorAirQuality" }),
        (0, class_transformer_1.Type)(function () {
            return CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality;
        }),
        __metadata("design:type", CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold.prototype, "indoorAirQuality", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "noise" }),
        (0, class_transformer_1.Type)(function () {
            return CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise;
        }),
        __metadata("design:type", CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold.prototype, "noise", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "pm25" }),
        (0, class_transformer_1.Type)(function () {
            return CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25;
        }),
        __metadata("design:type", CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold.prototype, "pm25", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "temperature" }),
        (0, class_transformer_1.Type)(function () {
            return CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature;
        }),
        __metadata("design:type", CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold.prototype, "temperature", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "tvoc" }),
        (0, class_transformer_1.Type)(function () {
            return CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc;
        }),
        __metadata("design:type", CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold.prototype, "tvoc", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "water" }),
        (0, class_transformer_1.Type)(function () {
            return CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater;
        }),
        __metadata("design:type", CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold.prototype, "water", void 0);
    return CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold = CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold;
var CreateNetworkSensorAlertsProfile200ApplicationJSONConditions = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfile200ApplicationJSONConditions, _super);
    function CreateNetworkSensorAlertsProfile200ApplicationJSONConditions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "direction" }),
        __metadata("design:type", String)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONConditions.prototype, "direction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "duration" }),
        __metadata("design:type", String)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONConditions.prototype, "duration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "metric" }),
        __metadata("design:type", String)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONConditions.prototype, "metric", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "threshold" }),
        (0, class_transformer_1.Type)(function () { return CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold; }),
        __metadata("design:type", CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONConditions.prototype, "threshold", void 0);
    return CreateNetworkSensorAlertsProfile200ApplicationJSONConditions;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfile200ApplicationJSONConditions = CreateNetworkSensorAlertsProfile200ApplicationJSONConditions;
/**
 * List of recipients that will recieve the alert.
 */
var CreateNetworkSensorAlertsProfile200ApplicationJSONRecipients = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfile200ApplicationJSONRecipients, _super);
    function CreateNetworkSensorAlertsProfile200ApplicationJSONRecipients() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "emails" }),
        __metadata("design:type", Array)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONRecipients.prototype, "emails", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "httpServerIds" }),
        __metadata("design:type", Array)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONRecipients.prototype, "httpServerIds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "smsNumbers" }),
        __metadata("design:type", Array)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONRecipients.prototype, "smsNumbers", void 0);
    return CreateNetworkSensorAlertsProfile200ApplicationJSONRecipients;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfile200ApplicationJSONRecipients = CreateNetworkSensorAlertsProfile200ApplicationJSONRecipients;
/**
 * The sensor schedule to use with the alert profile.
 */
var CreateNetworkSensorAlertsProfile200ApplicationJSONSchedule = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfile200ApplicationJSONSchedule, _super);
    function CreateNetworkSensorAlertsProfile200ApplicationJSONSchedule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONSchedule.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSONSchedule.prototype, "name", void 0);
    return CreateNetworkSensorAlertsProfile200ApplicationJSONSchedule;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfile200ApplicationJSONSchedule = CreateNetworkSensorAlertsProfile200ApplicationJSONSchedule;
/**
 * Successful operation
 */
var CreateNetworkSensorAlertsProfile200ApplicationJSON = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfile200ApplicationJSON, _super);
    function CreateNetworkSensorAlertsProfile200ApplicationJSON() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: CreateNetworkSensorAlertsProfile200ApplicationJSONConditions,
        }),
        (0, class_transformer_1.Expose)({ name: "conditions" }),
        (0, class_transformer_1.Type)(function () { return CreateNetworkSensorAlertsProfile200ApplicationJSONConditions; }),
        __metadata("design:type", Array)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSON.prototype, "conditions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSON.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "profileId" }),
        __metadata("design:type", String)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSON.prototype, "profileId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "recipients" }),
        (0, class_transformer_1.Type)(function () { return CreateNetworkSensorAlertsProfile200ApplicationJSONRecipients; }),
        __metadata("design:type", CreateNetworkSensorAlertsProfile200ApplicationJSONRecipients)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSON.prototype, "recipients", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "schedule" }),
        (0, class_transformer_1.Type)(function () { return CreateNetworkSensorAlertsProfile200ApplicationJSONSchedule; }),
        __metadata("design:type", CreateNetworkSensorAlertsProfile200ApplicationJSONSchedule)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSON.prototype, "schedule", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "serials" }),
        __metadata("design:type", Array)
    ], CreateNetworkSensorAlertsProfile200ApplicationJSON.prototype, "serials", void 0);
    return CreateNetworkSensorAlertsProfile200ApplicationJSON;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfile200ApplicationJSON = CreateNetworkSensorAlertsProfile200ApplicationJSON;
var CreateNetworkSensorAlertsProfileResponse = /** @class */ (function (_super) {
    __extends(CreateNetworkSensorAlertsProfileResponse, _super);
    function CreateNetworkSensorAlertsProfileResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateNetworkSensorAlertsProfileResponse.prototype, "contentType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], CreateNetworkSensorAlertsProfileResponse.prototype, "statusCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], CreateNetworkSensorAlertsProfileResponse.prototype, "rawResponse", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", CreateNetworkSensorAlertsProfile200ApplicationJSON)
    ], CreateNetworkSensorAlertsProfileResponse.prototype, "createNetworkSensorAlertsProfile200ApplicationJSONObject", void 0);
    return CreateNetworkSensorAlertsProfileResponse;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkSensorAlertsProfileResponse = CreateNetworkSensorAlertsProfileResponse;
