// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type FfcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type FfcerRequestBodyCertificateParameters struct {
	// Applicant Name
	Name string `json:"Name"`
	// Certificate Id
	RefNo string `json:"RefNo"`
}

// FfcerRequestBodyFormatEnum - The format of the certificate in response.
type FfcerRequestBodyFormatEnum string

const (
	FfcerRequestBodyFormatEnumPdf FfcerRequestBodyFormatEnum = "pdf"
)

func (e FfcerRequestBodyFormatEnum) ToPointer() *FfcerRequestBodyFormatEnum {
	return &e
}

func (e *FfcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = FfcerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FfcerRequestBodyFormatEnum: %v", v)
	}
}

// FfcerRequestBody - Request format
type FfcerRequestBody struct {
	CertificateParameters *FfcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format FfcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Ffcer504ApplicationJSONErrorEnum string

const (
	Ffcer504ApplicationJSONErrorEnumGatewayTimeout Ffcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Ffcer504ApplicationJSONErrorEnum) ToPointer() *Ffcer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Ffcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Ffcer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ffcer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Ffcer504ApplicationJSONErrorDescriptionEnum string

const (
	Ffcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Ffcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Ffcer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Ffcer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ffcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Ffcer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ffcer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ffcer504ApplicationJSON - Gateway timeout
type Ffcer504ApplicationJSON struct {
	Error            *Ffcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ffcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ffcer503ApplicationJSONErrorEnum string

const (
	Ffcer503ApplicationJSONErrorEnumServiceUnavailable Ffcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Ffcer503ApplicationJSONErrorEnum) ToPointer() *Ffcer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Ffcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Ffcer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ffcer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Ffcer503ApplicationJSONErrorDescriptionEnum string

const (
	Ffcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Ffcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Ffcer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Ffcer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ffcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Ffcer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ffcer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ffcer503ApplicationJSON - Service unavailable
type Ffcer503ApplicationJSON struct {
	Error            *Ffcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ffcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ffcer502ApplicationJSONErrorEnum string

const (
	Ffcer502ApplicationJSONErrorEnumBadGatewy Ffcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Ffcer502ApplicationJSONErrorEnum) ToPointer() *Ffcer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Ffcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Ffcer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ffcer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Ffcer502ApplicationJSONErrorDescriptionEnum string

const (
	Ffcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Ffcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Ffcer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Ffcer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ffcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Ffcer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ffcer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ffcer502ApplicationJSON - Bad gateway
type Ffcer502ApplicationJSON struct {
	Error            *Ffcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ffcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ffcer500ApplicationJSONErrorEnum string

const (
	Ffcer500ApplicationJSONErrorEnumInternalServerError Ffcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Ffcer500ApplicationJSONErrorEnum) ToPointer() *Ffcer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Ffcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Ffcer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ffcer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Ffcer500ApplicationJSONErrorDescriptionEnum string

const (
	Ffcer500ApplicationJSONErrorDescriptionEnumInternalServerError Ffcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Ffcer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Ffcer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ffcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Ffcer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ffcer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ffcer500ApplicationJSON - Internal server error
type Ffcer500ApplicationJSON struct {
	Error            *Ffcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ffcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ffcer404ApplicationJSONErrorEnum string

const (
	Ffcer404ApplicationJSONErrorEnumRecordNotFound Ffcer404ApplicationJSONErrorEnum = "record_not_found"
	Ffcer404ApplicationJSONErrorEnumURLNotFound    Ffcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Ffcer404ApplicationJSONErrorEnum) ToPointer() *Ffcer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Ffcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Ffcer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ffcer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Ffcer404ApplicationJSONErrorDescriptionEnum string

const (
	Ffcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Ffcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Ffcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Ffcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Ffcer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Ffcer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ffcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Ffcer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ffcer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ffcer404ApplicationJSON - No record found
type Ffcer404ApplicationJSON struct {
	Error            *Ffcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ffcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ffcer401ApplicationJSONErrorEnum string

const (
	Ffcer401ApplicationJSONErrorEnumInvalidAuthentication Ffcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Ffcer401ApplicationJSONErrorEnumInvalidAuthorization  Ffcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Ffcer401ApplicationJSONErrorEnum) ToPointer() *Ffcer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Ffcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Ffcer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ffcer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Ffcer401ApplicationJSONErrorDescriptionEnum string

const (
	Ffcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Ffcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Ffcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Ffcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Ffcer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Ffcer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ffcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Ffcer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ffcer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ffcer401ApplicationJSON - Unauthorized access
type Ffcer401ApplicationJSON struct {
	Error            *Ffcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ffcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ffcer400ApplicationJSONErrorEnum string

const (
	Ffcer400ApplicationJSONErrorEnumMissingParameter Ffcer400ApplicationJSONErrorEnum = "missing_parameter"
	Ffcer400ApplicationJSONErrorEnumInvalidParameter Ffcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Ffcer400ApplicationJSONErrorEnumInvalidFormat    Ffcer400ApplicationJSONErrorEnum = "invalid_format"
	Ffcer400ApplicationJSONErrorEnumInvalidTxnid     Ffcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Ffcer400ApplicationJSONErrorEnumInvalidConsentid Ffcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Ffcer400ApplicationJSONErrorEnum) ToPointer() *Ffcer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Ffcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Ffcer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ffcer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Ffcer400ApplicationJSONErrorDescriptionEnum string

const (
	Ffcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Ffcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Ffcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Ffcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Ffcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Ffcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Ffcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Ffcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Ffcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Ffcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Ffcer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Ffcer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ffcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Ffcer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ffcer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ffcer400ApplicationJSON - Bad request
type Ffcer400ApplicationJSON struct {
	Error            *Ffcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ffcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type FfcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Ffcer400ApplicationJSONObject *Ffcer400ApplicationJSON
	// Unauthorized access
	Ffcer401ApplicationJSONObject *Ffcer401ApplicationJSON
	// No record found
	Ffcer404ApplicationJSONObject *Ffcer404ApplicationJSON
	// Internal server error
	Ffcer500ApplicationJSONObject *Ffcer500ApplicationJSON
	// Bad gateway
	Ffcer502ApplicationJSONObject *Ffcer502ApplicationJSON
	// Service unavailable
	Ffcer503ApplicationJSONObject *Ffcer503ApplicationJSON
	// Gateway timeout
	Ffcer504ApplicationJSONObject *Ffcer504ApplicationJSON
}
