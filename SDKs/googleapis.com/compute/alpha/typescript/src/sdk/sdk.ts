/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AcceleratorTypes } from "./acceleratortypes";
import { Addresses } from "./addresses";
import { Autoscalers } from "./autoscalers";
import { BackendBuckets } from "./backendbuckets";
import { BackendServices } from "./backendservices";
import { Disks } from "./disks";
import { DiskTypes } from "./disktypes";
import { ExternalVpnGateways } from "./externalvpngateways";
import { FirewallPolicies } from "./firewallpolicies";
import { Firewalls } from "./firewalls";
import { ForwardingRules } from "./forwardingrules";
import { FutureReservations } from "./futurereservations";
import { GlobalAddresses } from "./globaladdresses";
import { GlobalForwardingRules } from "./globalforwardingrules";
import { GlobalNetworkEndpointGroups } from "./globalnetworkendpointgroups";
import { GlobalOperations } from "./globaloperations";
import { GlobalOrganizationOperations } from "./globalorganizationoperations";
import { GlobalPublicDelegatedPrefixes } from "./globalpublicdelegatedprefixes";
import { HealthChecks } from "./healthchecks";
import { HttpHealthChecks } from "./httphealthchecks";
import { HttpsHealthChecks } from "./httpshealthchecks";
import { ImageFamilyViews } from "./imagefamilyviews";
import { Images } from "./images";
import { InstanceGroupManagerResizeRequests } from "./instancegroupmanagerresizerequests";
import { InstanceGroupManagers } from "./instancegroupmanagers";
import { InstanceGroups } from "./instancegroups";
import { Instances } from "./instances";
import { InstanceSettings } from "./instancesettings";
import { InstanceTemplates } from "./instancetemplates";
import { InstantSnapshots } from "./instantsnapshots";
import { InterconnectAttachments } from "./interconnectattachments";
import { InterconnectLocations } from "./interconnectlocations";
import { InterconnectRemoteLocations } from "./interconnectremotelocations";
import { Interconnects } from "./interconnects";
import { LicenseCodes } from "./licensecodes";
import { Licenses } from "./licenses";
import { MachineImages } from "./machineimages";
import { MachineTypes } from "./machinetypes";
import { NetworkAttachments } from "./networkattachments";
import { NetworkEdgeSecurityServices } from "./networkedgesecurityservices";
import { NetworkEndpointGroups } from "./networkendpointgroups";
import { NetworkFirewallPolicies } from "./networkfirewallpolicies";
import { Networks } from "./networks";
import { NodeGroups } from "./nodegroups";
import { NodeTemplates } from "./nodetemplates";
import { NodeTypes } from "./nodetypes";
import { OrganizationSecurityPolicies } from "./organizationsecuritypolicies";
import { PacketMirrorings } from "./packetmirrorings";
import { Projects } from "./projects";
import { PublicAdvertisedPrefixes } from "./publicadvertisedprefixes";
import { PublicDelegatedPrefixes } from "./publicdelegatedprefixes";
import { RegionAutoscalers } from "./regionautoscalers";
import { RegionBackendServices } from "./regionbackendservices";
import { RegionCommitments } from "./regioncommitments";
import { RegionDisks } from "./regiondisks";
import { RegionDiskTypes } from "./regiondisktypes";
import { RegionHealthChecks } from "./regionhealthchecks";
import { RegionHealthCheckServices } from "./regionhealthcheckservices";
import { RegionInstanceGroupManagers } from "./regioninstancegroupmanagers";
import { RegionInstanceGroups } from "./regioninstancegroups";
import { RegionInstances } from "./regioninstances";
import { RegionInstanceTemplates } from "./regioninstancetemplates";
import { RegionInstantSnapshots } from "./regioninstantsnapshots";
import { RegionNetworkEndpointGroups } from "./regionnetworkendpointgroups";
import { RegionNetworkFirewallPolicies } from "./regionnetworkfirewallpolicies";
import { RegionNotificationEndpoints } from "./regionnotificationendpoints";
import { RegionOperations } from "./regionoperations";
import { Regions } from "./regions";
import { RegionSecurityPolicies } from "./regionsecuritypolicies";
import { RegionSslCertificates } from "./regionsslcertificates";
import { RegionSslPolicies } from "./regionsslpolicies";
import { RegionTargetHttpProxies } from "./regiontargethttpproxies";
import { RegionTargetHttpsProxies } from "./regiontargethttpsproxies";
import { RegionTargetTcpProxies } from "./regiontargettcpproxies";
import { RegionUrlMaps } from "./regionurlmaps";
import { Reservations } from "./reservations";
import { ResourcePolicies } from "./resourcepolicies";
import { Routers } from "./routers";
import { Routes } from "./routes";
import { SecurityPolicies } from "./securitypolicies";
import { ServiceAttachments } from "./serviceattachments";
import { Snapshots } from "./snapshots";
import { SslCertificates } from "./sslcertificates";
import { SslPolicies } from "./sslpolicies";
import { Subnetworks } from "./subnetworks";
import { TargetGrpcProxies } from "./targetgrpcproxies";
import { TargetHttpProxies } from "./targethttpproxies";
import { TargetHttpsProxies } from "./targethttpsproxies";
import { TargetInstances } from "./targetinstances";
import { TargetPools } from "./targetpools";
import { TargetSslProxies } from "./targetsslproxies";
import { TargetTcpProxies } from "./targettcpproxies";
import { TargetVpnGateways } from "./targetvpngateways";
import { UrlMaps } from "./urlmaps";
import { VpnGateways } from "./vpngateways";
import { VpnTunnels } from "./vpntunnels";
import { ZoneOperations } from "./zoneoperations";
import { ZoneQueuedResources } from "./zonequeuedresources";
import { Zones } from "./zones";
import axios, { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  "https://compute.googleapis.com/compute/alpha",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * Creates and runs virtual machines on Google Cloud Platform.
 *
 * @see {@link https://cloud.google.com/compute/}
 */
export class SDK {
  public acceleratorTypes: AcceleratorTypes;
  public addresses: Addresses;
  public autoscalers: Autoscalers;
  public backendBuckets: BackendBuckets;
  public backendServices: BackendServices;
  public diskTypes: DiskTypes;
  public disks: Disks;
  public externalVpnGateways: ExternalVpnGateways;
  public firewallPolicies: FirewallPolicies;
  public firewalls: Firewalls;
  public forwardingRules: ForwardingRules;
  public futureReservations: FutureReservations;
  public globalAddresses: GlobalAddresses;
  public globalForwardingRules: GlobalForwardingRules;
  public globalNetworkEndpointGroups: GlobalNetworkEndpointGroups;
  public globalOperations: GlobalOperations;
  public globalOrganizationOperations: GlobalOrganizationOperations;
  public globalPublicDelegatedPrefixes: GlobalPublicDelegatedPrefixes;
  public healthChecks: HealthChecks;
  public httpHealthChecks: HttpHealthChecks;
  public httpsHealthChecks: HttpsHealthChecks;
  public imageFamilyViews: ImageFamilyViews;
  public images: Images;
  public instanceGroupManagerResizeRequests: InstanceGroupManagerResizeRequests;
  public instanceGroupManagers: InstanceGroupManagers;
  public instanceGroups: InstanceGroups;
  public instanceSettings: InstanceSettings;
  public instanceTemplates: InstanceTemplates;
  public instances: Instances;
  public instantSnapshots: InstantSnapshots;
  public interconnectAttachments: InterconnectAttachments;
  public interconnectLocations: InterconnectLocations;
  public interconnectRemoteLocations: InterconnectRemoteLocations;
  public interconnects: Interconnects;
  public licenseCodes: LicenseCodes;
  public licenses: Licenses;
  public machineImages: MachineImages;
  public machineTypes: MachineTypes;
  public networkAttachments: NetworkAttachments;
  public networkEdgeSecurityServices: NetworkEdgeSecurityServices;
  public networkEndpointGroups: NetworkEndpointGroups;
  public networkFirewallPolicies: NetworkFirewallPolicies;
  public networks: Networks;
  public nodeGroups: NodeGroups;
  public nodeTemplates: NodeTemplates;
  public nodeTypes: NodeTypes;
  public organizationSecurityPolicies: OrganizationSecurityPolicies;
  public packetMirrorings: PacketMirrorings;
  public projects: Projects;
  public publicAdvertisedPrefixes: PublicAdvertisedPrefixes;
  public publicDelegatedPrefixes: PublicDelegatedPrefixes;
  public regionAutoscalers: RegionAutoscalers;
  public regionBackendServices: RegionBackendServices;
  public regionCommitments: RegionCommitments;
  public regionDiskTypes: RegionDiskTypes;
  public regionDisks: RegionDisks;
  public regionHealthCheckServices: RegionHealthCheckServices;
  public regionHealthChecks: RegionHealthChecks;
  public regionInstanceGroupManagers: RegionInstanceGroupManagers;
  public regionInstanceGroups: RegionInstanceGroups;
  public regionInstanceTemplates: RegionInstanceTemplates;
  public regionInstances: RegionInstances;
  public regionInstantSnapshots: RegionInstantSnapshots;
  public regionNetworkEndpointGroups: RegionNetworkEndpointGroups;
  public regionNetworkFirewallPolicies: RegionNetworkFirewallPolicies;
  public regionNotificationEndpoints: RegionNotificationEndpoints;
  public regionOperations: RegionOperations;
  public regionSecurityPolicies: RegionSecurityPolicies;
  public regionSslCertificates: RegionSslCertificates;
  public regionSslPolicies: RegionSslPolicies;
  public regionTargetHttpProxies: RegionTargetHttpProxies;
  public regionTargetHttpsProxies: RegionTargetHttpsProxies;
  public regionTargetTcpProxies: RegionTargetTcpProxies;
  public regionUrlMaps: RegionUrlMaps;
  public regions: Regions;
  public reservations: Reservations;
  public resourcePolicies: ResourcePolicies;
  public routers: Routers;
  public routes: Routes;
  public securityPolicies: SecurityPolicies;
  public serviceAttachments: ServiceAttachments;
  public snapshots: Snapshots;
  public sslCertificates: SslCertificates;
  public sslPolicies: SslPolicies;
  public subnetworks: Subnetworks;
  public targetGrpcProxies: TargetGrpcProxies;
  public targetHttpProxies: TargetHttpProxies;
  public targetHttpsProxies: TargetHttpsProxies;
  public targetInstances: TargetInstances;
  public targetPools: TargetPools;
  public targetSslProxies: TargetSslProxies;
  public targetTcpProxies: TargetTcpProxies;
  public targetVpnGateways: TargetVpnGateways;
  public urlMaps: UrlMaps;
  public vpnGateways: VpnGateways;
  public vpnTunnels: VpnTunnels;
  public zoneOperations: ZoneOperations;
  public zoneQueuedResources: ZoneQueuedResources;
  public zones: Zones;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;

    this.acceleratorTypes = new AcceleratorTypes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.addresses = new Addresses(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.autoscalers = new Autoscalers(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.backendBuckets = new BackendBuckets(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.backendServices = new BackendServices(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.diskTypes = new DiskTypes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.disks = new Disks(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.externalVpnGateways = new ExternalVpnGateways(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.firewallPolicies = new FirewallPolicies(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.firewalls = new Firewalls(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.forwardingRules = new ForwardingRules(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.futureReservations = new FutureReservations(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.globalAddresses = new GlobalAddresses(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.globalForwardingRules = new GlobalForwardingRules(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.globalNetworkEndpointGroups = new GlobalNetworkEndpointGroups(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.globalOperations = new GlobalOperations(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.globalOrganizationOperations = new GlobalOrganizationOperations(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.globalPublicDelegatedPrefixes = new GlobalPublicDelegatedPrefixes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.healthChecks = new HealthChecks(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.httpHealthChecks = new HttpHealthChecks(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.httpsHealthChecks = new HttpsHealthChecks(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.imageFamilyViews = new ImageFamilyViews(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.images = new Images(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.instanceGroupManagerResizeRequests =
      new InstanceGroupManagerResizeRequests(
        this._defaultClient,
        this._securityClient,
        this._serverURL,
        this._language,
        this._sdkVersion,
        this._genVersion
      );

    this.instanceGroupManagers = new InstanceGroupManagers(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.instanceGroups = new InstanceGroups(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.instanceSettings = new InstanceSettings(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.instanceTemplates = new InstanceTemplates(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.instances = new Instances(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.instantSnapshots = new InstantSnapshots(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.interconnectAttachments = new InterconnectAttachments(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.interconnectLocations = new InterconnectLocations(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.interconnectRemoteLocations = new InterconnectRemoteLocations(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.interconnects = new Interconnects(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.licenseCodes = new LicenseCodes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.licenses = new Licenses(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.machineImages = new MachineImages(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.machineTypes = new MachineTypes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.networkAttachments = new NetworkAttachments(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.networkEdgeSecurityServices = new NetworkEdgeSecurityServices(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.networkEndpointGroups = new NetworkEndpointGroups(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.networkFirewallPolicies = new NetworkFirewallPolicies(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.networks = new Networks(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.nodeGroups = new NodeGroups(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.nodeTemplates = new NodeTemplates(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.nodeTypes = new NodeTypes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.organizationSecurityPolicies = new OrganizationSecurityPolicies(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.packetMirrorings = new PacketMirrorings(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.projects = new Projects(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.publicAdvertisedPrefixes = new PublicAdvertisedPrefixes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.publicDelegatedPrefixes = new PublicDelegatedPrefixes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.regionAutoscalers = new RegionAutoscalers(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.regionBackendServices = new RegionBackendServices(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.regionCommitments = new RegionCommitments(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.regionDiskTypes = new RegionDiskTypes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.regionDisks = new RegionDisks(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.regionHealthCheckServices = new RegionHealthCheckServices(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.regionHealthChecks = new RegionHealthChecks(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.regionInstanceGroupManagers = new RegionInstanceGroupManagers(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.regionInstanceGroups = new RegionInstanceGroups(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.regionInstanceTemplates = new RegionInstanceTemplates(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.regionInstances = new RegionInstances(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.regionInstantSnapshots = new RegionInstantSnapshots(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.regionNetworkEndpointGroups = new RegionNetworkEndpointGroups(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.regionNetworkFirewallPolicies = new RegionNetworkFirewallPolicies(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.regionNotificationEndpoints = new RegionNotificationEndpoints(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.regionOperations = new RegionOperations(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.regionSecurityPolicies = new RegionSecurityPolicies(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.regionSslCertificates = new RegionSslCertificates(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.regionSslPolicies = new RegionSslPolicies(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.regionTargetHttpProxies = new RegionTargetHttpProxies(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.regionTargetHttpsProxies = new RegionTargetHttpsProxies(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.regionTargetTcpProxies = new RegionTargetTcpProxies(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.regionUrlMaps = new RegionUrlMaps(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.regions = new Regions(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.reservations = new Reservations(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.resourcePolicies = new ResourcePolicies(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.routers = new Routers(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.routes = new Routes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.securityPolicies = new SecurityPolicies(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.serviceAttachments = new ServiceAttachments(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.snapshots = new Snapshots(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.sslCertificates = new SslCertificates(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.sslPolicies = new SslPolicies(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.subnetworks = new Subnetworks(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.targetGrpcProxies = new TargetGrpcProxies(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.targetHttpProxies = new TargetHttpProxies(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.targetHttpsProxies = new TargetHttpsProxies(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.targetInstances = new TargetInstances(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.targetPools = new TargetPools(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.targetSslProxies = new TargetSslProxies(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.targetTcpProxies = new TargetTcpProxies(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.targetVpnGateways = new TargetVpnGateways(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.urlMaps = new UrlMaps(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.vpnGateways = new VpnGateways(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.vpnTunnels = new VpnTunnels(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.zoneOperations = new ZoneOperations(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.zoneQueuedResources = new ZoneQueuedResources(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.zones = new Zones(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
