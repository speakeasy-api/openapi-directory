<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Content 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Returns a content item referenced by id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentGetContentByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentGetContentByIdResponse
     */
	public function contentGetContentById(
        \OpenAPI\OpenAPI\Models\Operations\ContentGetContentByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentGetContentByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Content/GetContentById/{id}/{locale}/', \OpenAPI\OpenAPI\Models\Operations\ContentGetContentByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentGetContentByIdRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentGetContentByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns the newest item that matches a given tag and Content Type.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentGetContentByTagAndTypeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentGetContentByTagAndTypeResponse
     */
	public function contentGetContentByTagAndType(
        \OpenAPI\OpenAPI\Models\Operations\ContentGetContentByTagAndTypeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentGetContentByTagAndTypeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Content/GetContentByTagAndType/{tag}/{type}/{locale}/', \OpenAPI\OpenAPI\Models\Operations\ContentGetContentByTagAndTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentGetContentByTagAndTypeRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentGetContentByTagAndTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets an object describing a particular variant of content.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentGetContentTypeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentGetContentTypeResponse
     */
	public function contentGetContentType(
        \OpenAPI\OpenAPI\Models\Operations\ContentGetContentTypeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentGetContentTypeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Content/GetContentType/{type}/', \OpenAPI\OpenAPI\Models\Operations\ContentGetContentTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentGetContentTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns a JSON string response that is the RSS feed for news articles.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentRssNewsArticlesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentRssNewsArticlesResponse
     */
	public function contentRssNewsArticles(
        \OpenAPI\OpenAPI\Models\Operations\ContentRssNewsArticlesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentRssNewsArticlesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Content/Rss/NewsArticles/{pageToken}/', \OpenAPI\OpenAPI\Models\Operations\ContentRssNewsArticlesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentRssNewsArticlesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentRssNewsArticlesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Searches for Content Items that match the given Tag and Content Type.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentSearchContentByTagAndTypeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentSearchContentByTagAndTypeResponse
     */
	public function contentSearchContentByTagAndType(
        \OpenAPI\OpenAPI\Models\Operations\ContentSearchContentByTagAndTypeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentSearchContentByTagAndTypeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Content/SearchContentByTagAndType/{tag}/{type}/{locale}/', \OpenAPI\OpenAPI\Models\Operations\ContentSearchContentByTagAndTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentSearchContentByTagAndTypeRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentSearchContentByTagAndTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets content based on querystring information passed in. Provides basic search and text search capabilities.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentSearchContentWithTextRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentSearchContentWithTextResponse
     */
	public function contentSearchContentWithText(
        \OpenAPI\OpenAPI\Models\Operations\ContentSearchContentWithTextRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentSearchContentWithTextResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Content/Search/{locale}/', \OpenAPI\OpenAPI\Models\Operations\ContentSearchContentWithTextRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentSearchContentWithTextRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentSearchContentWithTextResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Search for Help Articles.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentSearchHelpArticlesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentSearchHelpArticlesResponse
     */
	public function contentSearchHelpArticles(
        \OpenAPI\OpenAPI\Models\Operations\ContentSearchHelpArticlesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentSearchHelpArticlesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Content/SearchHelpArticles/{searchtext}/{size}/', \OpenAPI\OpenAPI\Models\Operations\ContentSearchHelpArticlesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentSearchHelpArticlesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}