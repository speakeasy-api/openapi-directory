"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Backups:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_backup(self, request: operations.CreateBackupRequestBody) -> operations.CreateBackupResponse:
        r"""Create backup"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/backups.json'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateBackupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateBackup200ApplicationJSON])
                res.create_backup_200_application_json_object = out

        return res

    def download_backup(self, request: operations.DownloadBackupRequest) -> operations.DownloadBackupResponse:
        r"""Download backup"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DownloadBackupRequest, base_url, '/admin/backups/{filename}', request)
        
        query_params = utils.get_query_params(operations.DownloadBackupRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DownloadBackupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_backups(self) -> operations.GetBackupsResponse:
        r"""List backups"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/backups.json'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBackupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetBackups200ApplicationJSON]])
                res.get_backups_200_application_json_objects = out

        return res

    def send_download_backup_email(self, request: operations.SendDownloadBackupEmailRequest) -> operations.SendDownloadBackupEmailResponse:
        r"""Send download backup email"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SendDownloadBackupEmailRequest, base_url, '/admin/backups/{filename}', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SendDownloadBackupEmailResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    