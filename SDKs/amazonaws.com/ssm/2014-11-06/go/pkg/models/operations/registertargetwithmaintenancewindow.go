// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// RegisterTargetWithMaintenanceWindowXAmzTargetEnum
type RegisterTargetWithMaintenanceWindowXAmzTargetEnum string

const (
	RegisterTargetWithMaintenanceWindowXAmzTargetEnumAmazonSsmRegisterTargetWithMaintenanceWindow RegisterTargetWithMaintenanceWindowXAmzTargetEnum = "AmazonSSM.RegisterTargetWithMaintenanceWindow"
)

func (e *RegisterTargetWithMaintenanceWindowXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonSSM.RegisterTargetWithMaintenanceWindow":
		*e = RegisterTargetWithMaintenanceWindowXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RegisterTargetWithMaintenanceWindowXAmzTargetEnum: %s", s)
	}
}

type RegisterTargetWithMaintenanceWindowHeaders struct {
	XAmzAlgorithm     *string                                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        RegisterTargetWithMaintenanceWindowXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type RegisterTargetWithMaintenanceWindowRequest struct {
	Headers RegisterTargetWithMaintenanceWindowHeaders
	Request shared.RegisterTargetWithMaintenanceWindowRequest `request:"mediaType=application/json"`
}

type RegisterTargetWithMaintenanceWindowResponse struct {
	ContentType string
	// DoesNotExistException
	DoesNotExistException interface{}
	// IdempotentParameterMismatch
	IdempotentParameterMismatch interface{}
	// InternalServerError
	InternalServerError interface{}
	// Success
	RegisterTargetWithMaintenanceWindowResult *shared.RegisterTargetWithMaintenanceWindowResult
	StatusCode                                int
	RawResponse                               *http.Response
	// ResourceLimitExceededException
	ResourceLimitExceededException interface{}
}
