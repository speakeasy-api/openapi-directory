// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DiagnosticsExceptionFramesLanguageEnum - programming language of the frame
type DiagnosticsExceptionFramesLanguageEnum string

const (
	DiagnosticsExceptionFramesLanguageEnumJavaScript   DiagnosticsExceptionFramesLanguageEnum = "JavaScript"
	DiagnosticsExceptionFramesLanguageEnumCSharp       DiagnosticsExceptionFramesLanguageEnum = "CSharp"
	DiagnosticsExceptionFramesLanguageEnumObjectiveC   DiagnosticsExceptionFramesLanguageEnum = "Objective-C"
	DiagnosticsExceptionFramesLanguageEnumObjectiveCpp DiagnosticsExceptionFramesLanguageEnum = "Objective-Cpp"
	DiagnosticsExceptionFramesLanguageEnumCpp          DiagnosticsExceptionFramesLanguageEnum = "Cpp"
	DiagnosticsExceptionFramesLanguageEnumC            DiagnosticsExceptionFramesLanguageEnum = "C"
	DiagnosticsExceptionFramesLanguageEnumSwift        DiagnosticsExceptionFramesLanguageEnum = "Swift"
	DiagnosticsExceptionFramesLanguageEnumJava         DiagnosticsExceptionFramesLanguageEnum = "Java"
	DiagnosticsExceptionFramesLanguageEnumUnknown      DiagnosticsExceptionFramesLanguageEnum = "Unknown"
)

func (e *DiagnosticsExceptionFramesLanguageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "JavaScript":
		fallthrough
	case "CSharp":
		fallthrough
	case "Objective-C":
		fallthrough
	case "Objective-Cpp":
		fallthrough
	case "Cpp":
		fallthrough
	case "C":
		fallthrough
	case "Swift":
		fallthrough
	case "Java":
		fallthrough
	case "Unknown":
		*e = DiagnosticsExceptionFramesLanguageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DiagnosticsExceptionFramesLanguageEnum: %s", s)
	}
}

// DiagnosticsExceptionFrames - a single frame of a stack trace
type DiagnosticsExceptionFrames struct {
	// address of the frame
	Address *string `json:"address,omitempty"`
	// this line isn't from any framework
	AppCode bool `json:"app_code"`
	// is a class method
	ClassMethod *bool `json:"class_method,omitempty"`
	// name of the class
	ClassName *string `json:"class_name,omitempty"`
	// Formatted frame string
	CodeFormatted string `json:"code_formatted"`
	// Raw frame string
	CodeRaw string `json:"code_raw"`
	// name of the file
	File *string `json:"file,omitempty"`
	// Name of the framework
	FrameworkName *string `json:"framework_name,omitempty"`
	// programming language of the frame
	Language *DiagnosticsExceptionFramesLanguageEnum `json:"language,omitempty"`
	// line number
	Line *int64 `json:"line,omitempty"`
	// name of the method
	Method *string `json:"method,omitempty"`
	// parameters of the frames method
	MethodParams *string `json:"method_params,omitempty"`
	// frame should be shown always
	Relevant *bool `json:"relevant,omitempty"`
}

// DiagnosticsExceptionPlatformEnum - SDK/Platform this thread is beeing generated from
type DiagnosticsExceptionPlatformEnum string

const (
	DiagnosticsExceptionPlatformEnumIos         DiagnosticsExceptionPlatformEnum = "ios"
	DiagnosticsExceptionPlatformEnumAndroid     DiagnosticsExceptionPlatformEnum = "android"
	DiagnosticsExceptionPlatformEnumXamarin     DiagnosticsExceptionPlatformEnum = "xamarin"
	DiagnosticsExceptionPlatformEnumReactNative DiagnosticsExceptionPlatformEnum = "react-native"
	DiagnosticsExceptionPlatformEnumNdk         DiagnosticsExceptionPlatformEnum = "ndk"
	DiagnosticsExceptionPlatformEnumUnity       DiagnosticsExceptionPlatformEnum = "unity"
	DiagnosticsExceptionPlatformEnumOther       DiagnosticsExceptionPlatformEnum = "other"
)

func (e *DiagnosticsExceptionPlatformEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ios":
		fallthrough
	case "android":
		fallthrough
	case "xamarin":
		fallthrough
	case "react-native":
		fallthrough
	case "ndk":
		fallthrough
	case "unity":
		fallthrough
	case "other":
		*e = DiagnosticsExceptionPlatformEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DiagnosticsExceptionPlatformEnum: %s", s)
	}
}

// DiagnosticsException - a exception
type DiagnosticsException struct {
	// frames of the excetpion
	Frames          []DiagnosticsExceptionFrames `json:"frames"`
	InnerExceptions []DiagnosticsException       `json:"inner_exceptions,omitempty"`
	// SDK/Platform this thread is beeing generated from
	Platform *DiagnosticsExceptionPlatformEnum `json:"platform,omitempty"`
	// Reason of the exception
	Reason *string `json:"reason,omitempty"`
	// relevant exception (crashed)
	Relevant *bool `json:"relevant,omitempty"`
	// Type of the exception (NSSomethingException, NullPointerException)
	Type *string `json:"type,omitempty"`
}
