// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// PlaceDatasetEnum - Indicates the provenance of a place.
//
//   - `geonames` GeoNames place
type PlaceDatasetEnum string

const (
	PlaceDatasetEnumGeonames PlaceDatasetEnum = "geonames"
)

func (e *PlaceDatasetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "geonames":
		*e = PlaceDatasetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceDatasetEnum: %s", s)
	}
}

type PlaceNativeType string

const (
	PlaceNativeTypeGeonamesPlace PlaceNativeType = "GeonamesPlace"
)

type PlaceNative struct {
	GeonamesPlace *GeonamesPlace

	Type PlaceNativeType
}

func CreatePlaceNativeGeonamesPlace(geonamesPlace GeonamesPlace) PlaceNative {
	typ := PlaceNativeTypeGeonamesPlace

	return PlaceNative{
		GeonamesPlace: &geonamesPlace,
		Type:          typ,
	}
}

func (u *PlaceNative) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	geonamesPlace := new(GeonamesPlace)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&geonamesPlace); err == nil {
		u.GeonamesPlace = geonamesPlace
		u.Type = PlaceNativeTypeGeonamesPlace
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PlaceNative) MarshalJSON() ([]byte, error) {
	if u.GeonamesPlace != nil {
		return json.Marshal(u.GeonamesPlace)
	}

	return nil, nil
}

// Place - Represents a geographical place
type Place struct {
	//   3 letter country code (ISO 3166-1)
	//
	CountryIso string `json:"country_iso"`
	// Indicates the provenance of a place.
	//
	//   - `geonames` GeoNames place
	Dataset PlaceDatasetEnum `json:"dataset"`
	// Longer form description of the place.
	//
	DescriptiveName string `json:"descriptive_name"`
	// Global unique internally generated identifier for a place
	ID string `json:"id"`
	// Language represented by 2 letter ISO Code (639-1)
	//
	Language LanguageEnum `json:"language"`
	// The latitude of the postcode (WGS84/ETRS89).
	//
	// Can be a positive or negative decimal. E.g. `51.5083983`.
	//
	// Returns an empty string if no location data is available.
	Latitude Latitude `json:"latitude"`
	// The longitude of the postcode (WGS84/ETRS89).
	//
	// Can be a positive or negative decimal. E.g. -0.1283983
	//
	// Returns an empty string if no location data is available.
	Longitude Longitude `json:"longitude"`
	// Place name
	//
	Name string `json:"name"`
	// Native representation of a place
	Native *PlaceNative `json:"native,omitempty"`
}
