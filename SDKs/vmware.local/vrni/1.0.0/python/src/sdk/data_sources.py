"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class DataSources:
    r"""Data source APIs"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_arista_switch(self, request: shared.SwitchDataSourceRequest, security: operations.AddAristaSwitchSecurity) -> operations.AddAristaSwitchResponse:
        r"""Create an arista switch data source
        Add arista switch data source
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/data-sources/arista-switches'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddAristaSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SwitchDataSource])
                res.switch_data_source = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 500]:
            pass

        return res

    def add_brocade_switch(self, request: shared.SwitchDataSourceRequest, security: operations.AddBrocadeSwitchSecurity) -> operations.AddBrocadeSwitchResponse:
        r"""Create a brocade switch data source
        Add brocade switch as a data source
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/data-sources/brocade-switches'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddBrocadeSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SwitchDataSource])
                res.switch_data_source = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 500]:
            pass

        return res

    def add_checkpoint_firewall(self, request: shared.SwitchDataSourceRequest, security: operations.AddCheckpointFirewallSecurity) -> operations.AddCheckpointFirewallResponse:
        r"""Create a checkpoint firewall
        Add checkpoint firewall as data source
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/data-sources/checkpoint-firewalls'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddCheckpointFirewallResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SwitchDataSource])
                res.switch_data_source = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 500]:
            pass

        return res

    def add_cisco_switch(self, request: shared.CiscoSwitchDataSourceRequest, security: operations.AddCiscoSwitchSecurity) -> operations.AddCiscoSwitchResponse:
        r"""Create a cisco switch data source
        Add cisco switch as data source. User must provide one of ip or fqdn field in the request body.
        Appropriate proxy id is retrieved from infra/nodes URL to select the proxy node.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/data-sources/cisco-switches'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddCiscoSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CiscoSwitchDataSource])
                res.cisco_switch_data_source = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 500]:
            pass

        return res

    def add_dell_switch(self, request: shared.DellSwitchDataSourceRequest, security: operations.AddDellSwitchSecurity) -> operations.AddDellSwitchResponse:
        r"""Create a dell switch data source
        Add a dell switch as data source
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/data-sources/dell-switches'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddDellSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DellSwitchDataSource])
                res.dell_switch_data_source = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 500]:
            pass

        return res

    def add_hpov_manager(self, request: shared.SwitchDataSource, security: operations.AddHpovManagerSecurity) -> operations.AddHpovManagerResponse:
        r"""Create a hp oneview manager data source
        Add a hp oneview manager data source
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/data-sources/hpov-managers'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddHpovManagerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SwitchDataSource])
                res.switch_data_source = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 500]:
            pass

        return res

    def add_hpvc_manager(self, request: shared.SwitchDataSource, security: operations.AddHpvcManagerSecurity) -> operations.AddHpvcManagerResponse:
        r"""Create a hpvc manager data source
        Add hpvc manager data source
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/data-sources/hpvc-managers'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddHpvcManagerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SwitchDataSource])
                res.switch_data_source = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 500]:
            pass

        return res

    def add_juniper_switch(self, request: shared.SwitchDataSourceRequest, security: operations.AddJuniperSwitchSecurity) -> operations.AddJuniperSwitchResponse:
        r"""Add a juniper switch as data source
        Add switch Datasource
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/data-sources/juniper-switches'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddJuniperSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SwitchDataSource])
                res.switch_data_source = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 500]:
            pass

        return res

    def add_nsxv_manager_datasource(self, request: shared.NSXVManagerDataSourceRequest, security: operations.AddNsxvManagerDatasourceSecurity) -> operations.AddNsxvManagerDatasourceResponse:
        r"""Create a nsx-v manager data source
        Add a nsx-v manager data source
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/data-sources/nsxv-managers'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddNsxvManagerDatasourceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NSXVManagerDataSource])
                res.nsxv_manager_data_source = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 500]:
            pass

        return res

    def add_panorama_firewall(self, request: shared.SwitchDataSourceRequest, security: operations.AddPanoramaFirewallSecurity) -> operations.AddPanoramaFirewallResponse:
        r"""Create panorama firewall data source
        Add panorama firewall as data source
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/data-sources/panorama-firewalls'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddPanoramaFirewallResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SwitchDataSource])
                res.switch_data_source = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 500]:
            pass

        return res

    def add_ucs_manager(self, request: shared.SwitchDataSource, security: operations.AddUcsManagerSecurity) -> operations.AddUcsManagerResponse:
        r"""Create an ucs manager data source
        Add an ucs manager as data source
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/data-sources/ucs-managers'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddUcsManagerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SwitchDataSource])
                res.switch_data_source = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 500]:
            pass

        return res

    def add_vcenter_datasource(self, request: shared.VCenterDataSourceRequest, security: operations.AddVcenterDatasourceSecurity) -> operations.AddVcenterDatasourceResponse:
        r"""Create a vCenter data source
        Add a vcenter data source. User must provide one of ip or fqdn field in the request body.
        Appropriate proxy id is retrieved from infra/nodes URL to select the proxy node.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/data-sources/vcenters'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddVcenterDatasourceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.VCenterDataSource])
                res.v_center_data_source = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 500]:
            pass

        return res

    def delete_arista_switch(self, request: operations.DeleteAristaSwitchRequest, security: operations.DeleteAristaSwitchSecurity) -> operations.DeleteAristaSwitchResponse:
        r"""Delete an arista switch data source
        Delete an arista switch data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteAristaSwitchRequest, base_url, '/data-sources/arista-switches/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAristaSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_brocade_switch(self, request: operations.DeleteBrocadeSwitchRequest, security: operations.DeleteBrocadeSwitchSecurity) -> operations.DeleteBrocadeSwitchResponse:
        r"""Delete a brocade switch data source
        Delete a brocade switch data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteBrocadeSwitchRequest, base_url, '/data-sources/brocade-switches/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteBrocadeSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_checkpoint_firewall(self, request: operations.DeleteCheckpointFirewallRequest, security: operations.DeleteCheckpointFirewallSecurity) -> operations.DeleteCheckpointFirewallResponse:
        r"""Delete a checkpoint firewall data source
        Delete a checkpoint firewall data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCheckpointFirewallRequest, base_url, '/data-sources/checkpoint-firewalls/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCheckpointFirewallResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_cisco_switch(self, request: operations.DeleteCiscoSwitchRequest, security: operations.DeleteCiscoSwitchSecurity) -> operations.DeleteCiscoSwitchResponse:
        r"""Delete a cisco switch data source
        Delete a cisco switch data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCiscoSwitchRequest, base_url, '/data-sources/cisco-switches/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCiscoSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_dell_switch(self, request: operations.DeleteDellSwitchRequest, security: operations.DeleteDellSwitchSecurity) -> operations.DeleteDellSwitchResponse:
        r"""Delete a dell switch data source
        Delete a data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteDellSwitchRequest, base_url, '/data-sources/dell-switches/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteDellSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_hpov_manager(self, request: operations.DeleteHpovManagerRequest, security: operations.DeleteHpovManagerSecurity) -> operations.DeleteHpovManagerResponse:
        r"""Delete a hp oneview data source
        Delete a hp oneview data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteHpovManagerRequest, base_url, '/data-sources/hpov-managers/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteHpovManagerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_hpvc_manager(self, request: operations.DeleteHpvcManagerRequest, security: operations.DeleteHpvcManagerSecurity) -> operations.DeleteHpvcManagerResponse:
        r"""Delete a hpvc manager data source
        Delete a hpvc manager data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteHpvcManagerRequest, base_url, '/data-sources/hpvc-managers/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteHpvcManagerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_juniper_switch(self, request: operations.DeleteJuniperSwitchRequest, security: operations.DeleteJuniperSwitchSecurity) -> operations.DeleteJuniperSwitchResponse:
        r"""Delete a juniper switch data source
        Delete a juniper switch data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteJuniperSwitchRequest, base_url, '/data-sources/juniper-switches/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteJuniperSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_nsxv_manager(self, request: operations.DeleteNsxvManagerRequest, security: operations.DeleteNsxvManagerSecurity) -> operations.DeleteNsxvManagerResponse:
        r"""Delete a nsx-v manager data source
        Delete a nsx-v manager data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteNsxvManagerRequest, base_url, '/data-sources/nsxv-managers/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteNsxvManagerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_panorama_firewall(self, request: operations.DeletePanoramaFirewallRequest, security: operations.DeletePanoramaFirewallSecurity) -> operations.DeletePanoramaFirewallResponse:
        r"""Delete a panorama firewall data source
        Delete a panorama firewall data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletePanoramaFirewallRequest, base_url, '/data-sources/panorama-firewalls/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePanoramaFirewallResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_ucs_manager(self, request: operations.DeleteUcsManagerRequest, security: operations.DeleteUcsManagerSecurity) -> operations.DeleteUcsManagerResponse:
        r"""Delete an ucs manager data source
        Delete an ucs manager data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteUcsManagerRequest, base_url, '/data-sources/ucs-managers/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteUcsManagerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_vcenter(self, request: operations.DeleteVcenterRequest, security: operations.DeleteVcenterSecurity) -> operations.DeleteVcenterResponse:
        r"""Delete a vCenter data source
        Delete a data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteVcenterRequest, base_url, '/data-sources/vcenters/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteVcenterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def disable_arista_switch(self, request: operations.DisableAristaSwitchRequest, security: operations.DisableAristaSwitchSecurity) -> operations.DisableAristaSwitchResponse:
        r"""Disable an arista switch data source
        Disable an arista switch data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisableAristaSwitchRequest, base_url, '/data-sources/arista-switches/{id}/disable', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisableAristaSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def disable_brocade_switch(self, request: operations.DisableBrocadeSwitchRequest, security: operations.DisableBrocadeSwitchSecurity) -> operations.DisableBrocadeSwitchResponse:
        r"""Disable a brocade switch data source"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisableBrocadeSwitchRequest, base_url, '/data-sources/brocade-switches/{id}/disable', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisableBrocadeSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def disable_checkpoint_firewall(self, request: operations.DisableCheckpointFirewallRequest, security: operations.DisableCheckpointFirewallSecurity) -> operations.DisableCheckpointFirewallResponse:
        r"""Disable a checkpoint firewall data source
        Disable a checkpoint firewall data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisableCheckpointFirewallRequest, base_url, '/data-sources/checkpoint-firewalls/{id}/disable', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisableCheckpointFirewallResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def disable_cisco_switch(self, request: operations.DisableCiscoSwitchRequest, security: operations.DisableCiscoSwitchSecurity) -> operations.DisableCiscoSwitchResponse:
        r"""Disable a cisco switch data source
        Disable a cisco switch data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisableCiscoSwitchRequest, base_url, '/data-sources/cisco-switches/{id}/disable', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisableCiscoSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def disable_dell_switch(self, request: operations.DisableDellSwitchRequest, security: operations.DisableDellSwitchSecurity) -> operations.DisableDellSwitchResponse:
        r"""Disable a dell switch data source
        Disable a dell switch data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisableDellSwitchRequest, base_url, '/data-sources/dell-switches/{id}/disable', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisableDellSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def disable_hpov_manager(self, request: operations.DisableHpovManagerRequest, security: operations.DisableHpovManagerSecurity) -> operations.DisableHpovManagerResponse:
        r"""Disable a hp oneview data source
        Disable a hp oneview data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisableHpovManagerRequest, base_url, '/data-sources/hpov-managers/{id}/disable', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisableHpovManagerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def disable_hpvc_manager(self, request: operations.DisableHpvcManagerRequest, security: operations.DisableHpvcManagerSecurity) -> operations.DisableHpvcManagerResponse:
        r"""Disable a hpvc manager data source
        Disable a hpvc manager data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisableHpvcManagerRequest, base_url, '/data-sources/hpvc-managers/{id}/disable', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisableHpvcManagerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def disable_juniper_switch(self, request: operations.DisableJuniperSwitchRequest, security: operations.DisableJuniperSwitchSecurity) -> operations.DisableJuniperSwitchResponse:
        r"""Disable a juniper switch data source
        Disable a juniper switch data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisableJuniperSwitchRequest, base_url, '/data-sources/juniper-switches/{id}/disable', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisableJuniperSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def disable_nsxv_manager(self, request: operations.DisableNsxvManagerRequest, security: operations.DisableNsxvManagerSecurity) -> operations.DisableNsxvManagerResponse:
        r"""Disable a nsx-v manager data source
        Disable a nsx-v manager data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisableNsxvManagerRequest, base_url, '/data-sources/nsxv-managers/{id}/disable', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisableNsxvManagerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def disable_panorama_firewall(self, request: operations.DisablePanoramaFirewallRequest, security: operations.DisablePanoramaFirewallSecurity) -> operations.DisablePanoramaFirewallResponse:
        r"""Disable a panorama firewall data source
        Disable a panorama firewall data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisablePanoramaFirewallRequest, base_url, '/data-sources/panorama-firewalls/{id}/disable', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisablePanoramaFirewallResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def disable_ucs_manager(self, request: operations.DisableUcsManagerRequest, security: operations.DisableUcsManagerSecurity) -> operations.DisableUcsManagerResponse:
        r"""Disable an ucs manager data source
        Disable an ucs manager data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisableUcsManagerRequest, base_url, '/data-sources/ucs-managers/{id}/disable', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisableUcsManagerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def disable_vcenter(self, request: operations.DisableVcenterRequest, security: operations.DisableVcenterSecurity) -> operations.DisableVcenterResponse:
        r"""Disable a vCenter data source
        Disable a vCenter data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisableVcenterRequest, base_url, '/data-sources/vcenters/{id}/disable', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisableVcenterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enable_arista_switch(self, request: operations.EnableAristaSwitchRequest, security: operations.EnableAristaSwitchSecurity) -> operations.EnableAristaSwitchResponse:
        r"""Enable an arista switch data source
        Enable an arista switch data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnableAristaSwitchRequest, base_url, '/data-sources/arista-switches/{id}/enable', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnableAristaSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enable_brocade_switch(self, request: operations.EnableBrocadeSwitchRequest, security: operations.EnableBrocadeSwitchSecurity) -> operations.EnableBrocadeSwitchResponse:
        r"""Enable a brocade switch data source"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnableBrocadeSwitchRequest, base_url, '/data-sources/brocade-switches/{id}/enable', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnableBrocadeSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enable_checkpoint_firewall(self, request: operations.EnableCheckpointFirewallRequest, security: operations.EnableCheckpointFirewallSecurity) -> operations.EnableCheckpointFirewallResponse:
        r"""Enable a checkpoint firewall data source
        Enable a checkpoint firewall data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnableCheckpointFirewallRequest, base_url, '/data-sources/checkpoint-firewalls/{id}/enable', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnableCheckpointFirewallResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enable_cisco_switch(self, request: operations.EnableCiscoSwitchRequest, security: operations.EnableCiscoSwitchSecurity) -> operations.EnableCiscoSwitchResponse:
        r"""Enable a cisco switch data source
        Enable a cisco switch data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnableCiscoSwitchRequest, base_url, '/data-sources/cisco-switches/{id}/enable', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnableCiscoSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enable_dell_switch(self, request: operations.EnableDellSwitchRequest, security: operations.EnableDellSwitchSecurity) -> operations.EnableDellSwitchResponse:
        r"""Enable a dell switch data source
        Enable a dell switch data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnableDellSwitchRequest, base_url, '/data-sources/dell-switches/{id}/enable', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnableDellSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enable_hpov_manager(self, request: operations.EnableHpovManagerRequest, security: operations.EnableHpovManagerSecurity) -> operations.EnableHpovManagerResponse:
        r"""Enable a hp oneview data source
        Enable a hp oneview data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnableHpovManagerRequest, base_url, '/data-sources/hpov-managers/{id}/enable', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnableHpovManagerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enable_hpvc_manager(self, request: operations.EnableHpvcManagerRequest, security: operations.EnableHpvcManagerSecurity) -> operations.EnableHpvcManagerResponse:
        r"""Enable a hpvc manager data source
        Enable a hpvc manager data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnableHpvcManagerRequest, base_url, '/data-sources/hpvc-managers/{id}/enable', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnableHpvcManagerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enable_juniper_switch(self, request: operations.EnableJuniperSwitchRequest, security: operations.EnableJuniperSwitchSecurity) -> operations.EnableJuniperSwitchResponse:
        r"""Enable a juniper switch data source
        Enable a juniper switch data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnableJuniperSwitchRequest, base_url, '/data-sources/juniper-switches/{id}/enable', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnableJuniperSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enable_nsxv_manager(self, request: operations.EnableNsxvManagerRequest, security: operations.EnableNsxvManagerSecurity) -> operations.EnableNsxvManagerResponse:
        r"""Enable a nsx-v manager data source
        Enable a nsx-v manager data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnableNsxvManagerRequest, base_url, '/data-sources/nsxv-managers/{id}/enable', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnableNsxvManagerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enable_panorama_firewall(self, request: operations.EnablePanoramaFirewallRequest, security: operations.EnablePanoramaFirewallSecurity) -> operations.EnablePanoramaFirewallResponse:
        r"""Enable a panorama firewall data source
        Enable a panorama firewall data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnablePanoramaFirewallRequest, base_url, '/data-sources/panorama-firewalls/{id}/enable', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnablePanoramaFirewallResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enable_ucs_manager(self, request: operations.EnableUcsManagerRequest, security: operations.EnableUcsManagerSecurity) -> operations.EnableUcsManagerResponse:
        r"""Enable an ucs manager data source
        Enable an ucs manager data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnableUcsManagerRequest, base_url, '/data-sources/ucs-managers/{id}/enable', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnableUcsManagerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enable_vcenter(self, request: operations.EnableVcenterRequest, security: operations.EnableVcenterSecurity) -> operations.EnableVcenterResponse:
        r"""Enable a vCenter data source
        Enable a vCenter data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnableVcenterRequest, base_url, '/data-sources/vcenters/{id}/enable', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnableVcenterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_arista_switch(self, request: operations.GetAristaSwitchRequest, security: operations.GetAristaSwitchSecurity) -> operations.GetAristaSwitchResponse:
        r"""Show arista switch data source details
        Show arista switch data source details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAristaSwitchRequest, base_url, '/data-sources/arista-switches/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAristaSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SwitchDataSource])
                res.switch_data_source = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def get_arista_switch_snmp_config(self, request: operations.GetAristaSwitchSnmpConfigRequest, security: operations.GetAristaSwitchSnmpConfigSecurity) -> operations.GetAristaSwitchSnmpConfigResponse:
        r"""Show snmp config for arista switch data source
        Show snmp config for arista switch data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAristaSwitchSnmpConfigRequest, base_url, '/data-sources/arista-switches/{id}/snmp-config', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAristaSwitchSnmpConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SNMPConfig])
                res.snmp_config = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def get_brocade_switch(self, request: operations.GetBrocadeSwitchRequest, security: operations.GetBrocadeSwitchSecurity) -> operations.GetBrocadeSwitchResponse:
        r"""Show brocade switch data source details
        Show brocade switch data source details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetBrocadeSwitchRequest, base_url, '/data-sources/brocade-switches/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBrocadeSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SwitchDataSource])
                res.switch_data_source = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def get_brocade_switch_snmp_config(self, request: operations.GetBrocadeSwitchSnmpConfigRequest, security: operations.GetBrocadeSwitchSnmpConfigSecurity) -> operations.GetBrocadeSwitchSnmpConfigResponse:
        r"""Show snmp config for brocade switch data source
        Show snmp config for brocade switch data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetBrocadeSwitchSnmpConfigRequest, base_url, '/data-sources/brocade-switches/{id}/snmp-config', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBrocadeSwitchSnmpConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SNMPConfig])
                res.snmp_config = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def get_checkpoint_firewall(self, request: operations.GetCheckpointFirewallRequest, security: operations.GetCheckpointFirewallSecurity) -> operations.GetCheckpointFirewallResponse:
        r"""Show checkpoint firewall data source details
        Show checkpoint firewall data source details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCheckpointFirewallRequest, base_url, '/data-sources/checkpoint-firewalls/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCheckpointFirewallResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SwitchDataSource])
                res.switch_data_source = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def get_cisco_switch(self, request: operations.GetCiscoSwitchRequest, security: operations.GetCiscoSwitchSecurity) -> operations.GetCiscoSwitchResponse:
        r"""Show cisco switch data source details
        Show cisco switch data source details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCiscoSwitchRequest, base_url, '/data-sources/cisco-switches/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCiscoSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CiscoSwitchDataSource])
                res.cisco_switch_data_source = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def get_cisco_switch_snmp_config(self, request: operations.GetCiscoSwitchSnmpConfigRequest, security: operations.GetCiscoSwitchSnmpConfigSecurity) -> operations.GetCiscoSwitchSnmpConfigResponse:
        r"""Show snmp config for cisco switch data source
        Show snmp config for cisco switch data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCiscoSwitchSnmpConfigRequest, base_url, '/data-sources/cisco-switches/{id}/snmp-config', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCiscoSwitchSnmpConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SNMPConfig])
                res.snmp_config = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def get_dell_switch(self, request: operations.GetDellSwitchRequest, security: operations.GetDellSwitchSecurity) -> operations.GetDellSwitchResponse:
        r"""Show dell switch data source details
        Get a dell switch data source details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDellSwitchRequest, base_url, '/data-sources/dell-switches/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDellSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DellSwitchDataSource])
                res.dell_switch_data_source = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def get_dell_switch_snmp_config(self, request: operations.GetDellSwitchSnmpConfigRequest, security: operations.GetDellSwitchSnmpConfigSecurity) -> operations.GetDellSwitchSnmpConfigResponse:
        r"""Show snmp config for dell switch data source
        Show snmp config for dell switch data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDellSwitchSnmpConfigRequest, base_url, '/data-sources/dell-switches/{id}/snmp-config', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDellSwitchSnmpConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SNMPConfig])
                res.snmp_config = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def get_hpov_manager(self, request: operations.GetHpovManagerRequest, security: operations.GetHpovManagerSecurity) -> operations.GetHpovManagerResponse:
        r"""Show hp oneview data source details
        Show hp oneview data source details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetHpovManagerRequest, base_url, '/data-sources/hpov-managers/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetHpovManagerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SwitchDataSource])
                res.switch_data_source = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def get_hpvc_manager(self, request: operations.GetHpvcManagerRequest, security: operations.GetHpvcManagerSecurity) -> operations.GetHpvcManagerResponse:
        r"""Show hpvc data source details
        Show hpvc data source details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetHpvcManagerRequest, base_url, '/data-sources/hpvc-managers/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetHpvcManagerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SwitchDataSource])
                res.switch_data_source = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def get_juniper_switch(self, request: operations.GetJuniperSwitchRequest, security: operations.GetJuniperSwitchSecurity) -> operations.GetJuniperSwitchResponse:
        r"""Show juniper switch data source details
        Show juniper switch data source details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetJuniperSwitchRequest, base_url, '/data-sources/juniper-switches/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetJuniperSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SwitchDataSource])
                res.switch_data_source = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def get_juniper_switch_snmp_config(self, request: operations.GetJuniperSwitchSnmpConfigRequest, security: operations.GetJuniperSwitchSnmpConfigSecurity) -> operations.GetJuniperSwitchSnmpConfigResponse:
        r"""Show snmp config for juniper switch data source
        Show snmp config for juniper switch data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetJuniperSwitchSnmpConfigRequest, base_url, '/data-sources/juniper-switches/{id}/snmp-config', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetJuniperSwitchSnmpConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SNMPConfig])
                res.snmp_config = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def get_nsxv_controller_cluster(self, request: operations.GetNsxvControllerClusterRequest, security: operations.GetNsxvControllerClusterSecurity) -> operations.GetNsxvControllerClusterResponse:
        r"""Show nsx controller-cluster details
        Show nsx controller-cluster details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNsxvControllerClusterRequest, base_url, '/data-sources/nsxv-managers/{id}/controller-cluster', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNsxvControllerClusterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NSXControllerDataCollection])
                res.nsx_controller_data_collection = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def get_nsxv_manager(self, request: operations.GetNsxvManagerRequest, security: operations.GetNsxvManagerSecurity) -> operations.GetNsxvManagerResponse:
        r"""Show nsx-v manager data source details
        Show nsx-v manager data source details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNsxvManagerRequest, base_url, '/data-sources/nsxv-managers/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNsxvManagerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NSXVManagerDataSource])
                res.nsxv_manager_data_source = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def get_panorama_firewall(self, request: operations.GetPanoramaFirewallRequest, security: operations.GetPanoramaFirewallSecurity) -> operations.GetPanoramaFirewallResponse:
        r"""Show panorama firewall data source details
        Show panorama firewall data source details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPanoramaFirewallRequest, base_url, '/data-sources/panorama-firewalls/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPanoramaFirewallResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SwitchDataSource])
                res.switch_data_source = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def get_ucs_manager(self, request: operations.GetUcsManagerRequest, security: operations.GetUcsManagerSecurity) -> operations.GetUcsManagerResponse:
        r"""Show ucs manager data source details
        Show ucs manager data source details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUcsManagerRequest, base_url, '/data-sources/ucs-managers/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUcsManagerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SwitchDataSource])
                res.switch_data_source = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def get_ucs_snmp_config(self, request: operations.GetUcsSnmpConfigRequest, security: operations.GetUcsSnmpConfigSecurity) -> operations.GetUcsSnmpConfigResponse:
        r"""Show snmp config for ucs fabric interconnects
        Show snmp config for ucs fabric interconnects
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUcsSnmpConfigRequest, base_url, '/data-sources/ucs-managers/{id}/snmp-config', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUcsSnmpConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SNMPConfig])
                res.snmp_config = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def get_vcenter(self, request: operations.GetVcenterRequest, security: operations.GetVcenterSecurity) -> operations.GetVcenterResponse:
        r"""Show vCenter data source details
        Show vCenter data source details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVcenterRequest, base_url, '/data-sources/vcenters/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVcenterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.VCenterDataSource])
                res.v_center_data_source = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def list_arista_switches(self) -> operations.ListAristaSwitchesResponse:
        r"""List arista switch data sources
        List arista switch data sources
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/data-sources/arista-switches'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListAristaSwitchesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DataSourceListResponse])
                res.data_source_list_response = out
        elif http_res.status_code in [401, 403, 500]:
            pass

        return res

    def list_brocade_switches(self) -> operations.ListBrocadeSwitchesResponse:
        r"""List brocade switch data sources
        List brocade switch data sources
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/data-sources/brocade-switches'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListBrocadeSwitchesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DataSourceListResponse])
                res.data_source_list_response = out
        elif http_res.status_code in [401, 403, 500]:
            pass

        return res

    def list_checkpoint_firewalls(self) -> operations.ListCheckpointFirewallsResponse:
        r"""List checkpoint firewall data sources
        List checkpoint firewall data sources
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/data-sources/checkpoint-firewalls'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListCheckpointFirewallsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DataSourceListResponse])
                res.data_source_list_response = out
        elif http_res.status_code in [401, 403, 500]:
            pass

        return res

    def list_cisco_switches(self) -> operations.ListCiscoSwitchesResponse:
        r"""List cisco switch data sources
        List cisco switch data sources
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/data-sources/cisco-switches'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListCiscoSwitchesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DataSourceListResponse])
                res.data_source_list_response = out
        elif http_res.status_code in [401, 403, 500]:
            pass

        return res

    def list_dell_switches(self) -> operations.ListDellSwitchesResponse:
        r"""List dell switch data sources
        List dell switch data sources
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/data-sources/dell-switches'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListDellSwitchesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DataSourceListResponse])
                res.data_source_list_response = out
        elif http_res.status_code in [401, 403, 500]:
            pass

        return res

    def list_hpov_managers(self) -> operations.ListHpovManagersResponse:
        r"""List hp oneview manager data sources
        List hp oneview manager data sources
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/data-sources/hpov-managers'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListHpovManagersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DataSourceListResponse])
                res.data_source_list_response = out
        elif http_res.status_code in [401, 403, 500]:
            pass

        return res

    def list_hpvc_managers(self) -> operations.ListHpvcManagersResponse:
        r"""List hpvc manager data sources
        List hpvc manager data sources
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/data-sources/hpvc-managers'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListHpvcManagersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DataSourceListResponse])
                res.data_source_list_response = out
        elif http_res.status_code in [401, 403, 500]:
            pass

        return res

    def list_juniper_switches(self) -> operations.ListJuniperSwitchesResponse:
        r"""List juniper switch data sources
        List juniper switch data sources
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/data-sources/juniper-switches'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListJuniperSwitchesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DataSourceListResponse])
                res.data_source_list_response = out
        elif http_res.status_code in [401, 403, 500]:
            pass

        return res

    def list_nsxv_managers(self) -> operations.ListNsxvManagersResponse:
        r"""List nsx-v manager data sources
        List nsx-v manager data sources
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/data-sources/nsxv-managers'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListNsxvManagersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DataSourceListResponse])
                res.data_source_list_response = out
        elif http_res.status_code in [401, 403, 500]:
            pass

        return res

    def list_panorama_firewalls(self) -> operations.ListPanoramaFirewallsResponse:
        r"""List panorama firewall data sources
        List panorama firewall data sources
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/data-sources/panorama-firewalls'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListPanoramaFirewallsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DataSourceListResponse])
                res.data_source_list_response = out
        elif http_res.status_code in [401, 403, 500]:
            pass

        return res

    def list_ucs_managers(self) -> operations.ListUcsManagersResponse:
        r"""List ucs manager data sources
        List ucs manager data sources
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/data-sources/ucs-managers'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListUcsManagersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DataSourceListResponse])
                res.data_source_list_response = out
        elif http_res.status_code in [401, 403, 500]:
            pass

        return res

    def list_vcenters(self) -> operations.ListVcentersResponse:
        r"""List vCenter data sources
        List vCenter data sources
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/data-sources/vcenters'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListVcentersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DataSourceListResponse])
                res.data_source_list_response = out
        elif http_res.status_code in [401, 403, 500]:
            pass

        return res

    def update_arista_switch(self, request: operations.UpdateAristaSwitchRequest, security: operations.UpdateAristaSwitchSecurity) -> operations.UpdateAristaSwitchResponse:
        r"""Update an arista switch data source
        Update an switch data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateAristaSwitchRequest, base_url, '/data-sources/arista-switches/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "switch_data_source", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateAristaSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SwitchDataSource])
                res.switch_data_source = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def update_arista_switch_snmp_config(self, request: operations.UpdateAristaSwitchSnmpConfigRequest, security: operations.UpdateAristaSwitchSnmpConfigSecurity) -> operations.UpdateAristaSwitchSnmpConfigResponse:
        r"""Update snmp config for arista switch data source
        Update snmp config for arista switch data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateAristaSwitchSnmpConfigRequest, base_url, '/data-sources/arista-switches/{id}/snmp-config', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "snmp_config", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateAristaSwitchSnmpConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SNMPConfig])
                res.snmp_config = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def update_brocade_switch(self, request: operations.UpdateBrocadeSwitchRequest, security: operations.UpdateBrocadeSwitchSecurity) -> operations.UpdateBrocadeSwitchResponse:
        r"""Update a brocade switch data source
        Update a brocade switch data source. Only credentials, nickname and notes can be updated.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateBrocadeSwitchRequest, base_url, '/data-sources/brocade-switches/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "switch_data_source", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateBrocadeSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SwitchDataSource])
                res.switch_data_source = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def update_brocade_switch_snmp_config(self, request: operations.UpdateBrocadeSwitchSnmpConfigRequest, security: operations.UpdateBrocadeSwitchSnmpConfigSecurity) -> operations.UpdateBrocadeSwitchSnmpConfigResponse:
        r"""Update snmp config for brocade switch data source
        Update snmp config for brocade switch data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateBrocadeSwitchSnmpConfigRequest, base_url, '/data-sources/brocade-switches/{id}/snmp-config', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "snmp_config", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateBrocadeSwitchSnmpConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SNMPConfig])
                res.snmp_config = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def update_checkpoint_firewall(self, request: operations.UpdateCheckpointFirewallRequest, security: operations.UpdateCheckpointFirewallSecurity) -> operations.UpdateCheckpointFirewallResponse:
        r"""Update a checkpoint firewall data source
        Update a checkpoint firewall data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateCheckpointFirewallRequest, base_url, '/data-sources/checkpoint-firewalls/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "switch_data_source", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateCheckpointFirewallResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SwitchDataSource])
                res.switch_data_source = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def update_cisco_switch(self, request: operations.UpdateCiscoSwitchRequest, security: operations.UpdateCiscoSwitchSecurity) -> operations.UpdateCiscoSwitchResponse:
        r"""Update a cisco switch data source
        Update a cisco switch data source. Only credentials, nickname and notes can be updated.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateCiscoSwitchRequest, base_url, '/data-sources/cisco-switches/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "cisco_switch_data_source", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateCiscoSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CiscoSwitchDataSource])
                res.cisco_switch_data_source = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def update_cisco_switch_snmp_config(self, request: operations.UpdateCiscoSwitchSnmpConfigRequest, security: operations.UpdateCiscoSwitchSnmpConfigSecurity) -> operations.UpdateCiscoSwitchSnmpConfigResponse:
        r"""Update snmp config for cisco switch data source
        Update snmp config for cisco switch data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateCiscoSwitchSnmpConfigRequest, base_url, '/data-sources/cisco-switches/{id}/snmp-config', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "snmp_config", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateCiscoSwitchSnmpConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SNMPConfig])
                res.snmp_config = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def update_dell_switch(self, request: operations.UpdateDellSwitchRequest, security: operations.UpdateDellSwitchSecurity) -> operations.UpdateDellSwitchResponse:
        r"""Update a dell switch data source
        Update a dell switch data source. Only credentials, nickname and notes can be updated
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateDellSwitchRequest, base_url, '/data-sources/dell-switches/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "dell_switch_data_source", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateDellSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DellSwitchDataSource])
                res.dell_switch_data_source = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def update_dell_switch_snmp_config(self, request: operations.UpdateDellSwitchSnmpConfigRequest, security: operations.UpdateDellSwitchSnmpConfigSecurity) -> operations.UpdateDellSwitchSnmpConfigResponse:
        r"""Update snmp config for dell switch data source
        Update snmp config for dell switch data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateDellSwitchSnmpConfigRequest, base_url, '/data-sources/dell-switches/{id}/snmp-config', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "snmp_config", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateDellSwitchSnmpConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SNMPConfig])
                res.snmp_config = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def update_hpov_manager(self, request: operations.UpdateHpovManagerRequest, security: operations.UpdateHpovManagerSecurity) -> operations.UpdateHpovManagerResponse:
        r"""Update a hp oneview data source
        Update a hp oneview data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateHpovManagerRequest, base_url, '/data-sources/hpov-managers/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "switch_data_source", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateHpovManagerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SwitchDataSource])
                res.switch_data_source = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def update_hpvc_manager(self, request: operations.UpdateHpvcManagerRequest, security: operations.UpdateHpvcManagerSecurity) -> operations.UpdateHpvcManagerResponse:
        r"""Update a hpvc manager data source
        Update a hpvc manager data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateHpvcManagerRequest, base_url, '/data-sources/hpvc-managers/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "switch_data_source", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateHpvcManagerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SwitchDataSource])
                res.switch_data_source = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def update_juniper_switch(self, request: operations.UpdateJuniperSwitchRequest, security: operations.UpdateJuniperSwitchSecurity) -> operations.UpdateJuniperSwitchResponse:
        r"""Update a juniper switch data source
        Update a juniper switch data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateJuniperSwitchRequest, base_url, '/data-sources/juniper-switches/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "switch_data_source", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateJuniperSwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SwitchDataSource])
                res.switch_data_source = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def update_juniper_switch_snmp_config(self, request: operations.UpdateJuniperSwitchSnmpConfigRequest, security: operations.UpdateJuniperSwitchSnmpConfigSecurity) -> operations.UpdateJuniperSwitchSnmpConfigResponse:
        r"""Update snmp config for a juniper switch data source
        Update snmp config for a juniper switch data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateJuniperSwitchSnmpConfigRequest, base_url, '/data-sources/juniper-switches/{id}/snmp-config', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "snmp_config", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateJuniperSwitchSnmpConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SNMPConfig])
                res.snmp_config = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def update_nsxv_controller_cluster(self, request: operations.UpdateNsxvControllerClusterRequest, security: operations.UpdateNsxvControllerClusterSecurity) -> operations.UpdateNsxvControllerClusterResponse:
        r"""Update nsx controller-cluster details
        Update nsx controller-cluster details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNsxvControllerClusterRequest, base_url, '/data-sources/nsxv-managers/{id}/controller-cluster', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "nsx_controller_data_collection", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNsxvControllerClusterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NSXControllerDataCollection])
                res.nsx_controller_data_collection = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def update_nsxv_manager(self, request: operations.UpdateNsxvManagerRequest, security: operations.UpdateNsxvManagerSecurity) -> operations.UpdateNsxvManagerResponse:
        r"""Update a nsx-v manager data source
        Update a nsx-v manager data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNsxvManagerRequest, base_url, '/data-sources/nsxv-managers/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "nsxv_manager_data_source", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNsxvManagerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NSXVManagerDataSource])
                res.nsxv_manager_data_source = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def update_panorama_firewall(self, request: operations.UpdatePanoramaFirewallRequest, security: operations.UpdatePanoramaFirewallSecurity) -> operations.UpdatePanoramaFirewallResponse:
        r"""Update a panorama firewall data source
        Update a panorama firewall data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdatePanoramaFirewallRequest, base_url, '/data-sources/panorama-firewalls/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "switch_data_source", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatePanoramaFirewallResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SwitchDataSource])
                res.switch_data_source = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def update_ucs_manager(self, request: operations.UpdateUcsManagerRequest, security: operations.UpdateUcsManagerSecurity) -> operations.UpdateUcsManagerResponse:
        r"""Update an ucs manager data source
        Update an ucs manager data source
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateUcsManagerRequest, base_url, '/data-sources/ucs-managers/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "switch_data_source", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateUcsManagerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SwitchDataSource])
                res.switch_data_source = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def update_ucs_snmp_config(self, request: operations.UpdateUcsSnmpConfigRequest, security: operations.UpdateUcsSnmpConfigSecurity) -> operations.UpdateUcsSnmpConfigResponse:
        r"""Update snmp config for ucs fabric interconnects
        Update snmp config for ucs fabric interconnects
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateUcsSnmpConfigRequest, base_url, '/data-sources/ucs-managers/{id}/snmp-config', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "snmp_config", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateUcsSnmpConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SNMPConfig])
                res.snmp_config = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def update_vcenter(self, request: operations.UpdateVcenterRequest, security: operations.UpdateVcenterSecurity) -> operations.UpdateVcenterResponse:
        r"""Update a vCenter data source.
        Update a vcenter data source. Only nickname, notes and credentials can be updated.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateVcenterRequest, base_url, '/data-sources/vcenters/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "v_center_data_source", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateVcenterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.VCenterDataSource])
                res.v_center_data_source = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    