"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ErrorsLatestErrorDetailsSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclasses.dataclass
class ErrorsLatestErrorDetailsRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    error_group_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'errorGroupId', 'style': 'simple', 'explode': False }})
    r"""The id of the error group"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    
class ErrorsLatestErrorDetailsDefaultApplicationJSONErrorCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorsLatestErrorDetailsDefaultApplicationJSONError:
    
    code: ErrorsLatestErrorDetailsDefaultApplicationJSONErrorCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorsLatestErrorDetailsDefaultApplicationJSON:
    r"""Error code with reason"""
    
    error: ErrorsLatestErrorDetailsDefaultApplicationJSONError = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})  
    
class ErrorsLatestErrorDetails200ApplicationJSONReasonFramesLanguageEnum(str, Enum):
    r"""programming language of the frame"""
    JAVA_SCRIPT = 'JavaScript'
    C_SHARP = 'CSharp'
    OBJECTIVE_C = 'Objective-C'
    OBJECTIVE_CPP = 'Objective-Cpp'
    CPP = 'Cpp'
    C = 'C'
    SWIFT = 'Swift'
    JAVA = 'Java'
    UNKNOWN = 'Unknown'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorsLatestErrorDetails200ApplicationJSONReasonFrames:
    
    app_code: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appCode'), 'exclude': lambda f: f is None }})
    r"""this line isn't from any framework"""  
    class_method: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classMethod'), 'exclude': lambda f: f is None }})
    r"""is a class method"""  
    class_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('className'), 'exclude': lambda f: f is None }})
    r"""name of the class"""  
    code_formatted: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('codeFormatted'), 'exclude': lambda f: f is None }})
    r"""Formatted frame string"""  
    code_raw: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('codeRaw'), 'exclude': lambda f: f is None }})
    r"""Unformatted Frame string"""  
    exception_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exceptionType'), 'exclude': lambda f: f is None }})
    r"""Exception type."""  
    file: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file'), 'exclude': lambda f: f is None }})
    r"""name of the file"""  
    framework_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frameworkName'), 'exclude': lambda f: f is None }})
    r"""Name of the framework"""  
    language: Optional[ErrorsLatestErrorDetails200ApplicationJSONReasonFramesLanguageEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language'), 'exclude': lambda f: f is None }})
    r"""programming language of the frame"""  
    line: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line'), 'exclude': lambda f: f is None }})
    r"""line number"""  
    method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method'), 'exclude': lambda f: f is None }})
    r"""name of the method"""  
    method_params: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('methodParams'), 'exclude': lambda f: f is None }})
    r"""parameters of the frames method"""  
    os_exception_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('osExceptionType'), 'exclude': lambda f: f is None }})
    r"""OS exception type. (aka. SIGNAL)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorsLatestErrorDetails200ApplicationJSON:
    r"""Latest error details."""
    
    app_launch_timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appLaunchTimestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp when the app was launched, example: '2017-03-13T18:05:42Z'."""  
    carrier_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carrierName'), 'exclude': lambda f: f is None }})
    r"""Carrier name (for mobile devices)."""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})  
    device_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceName'), 'exclude': lambda f: f is None }})  
    error_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorId'), 'exclude': lambda f: f is None }})  
    has_attachments: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasAttachments'), 'exclude': lambda f: f is None }})  
    has_breadcrumbs: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasBreadcrumbs'), 'exclude': lambda f: f is None }})  
    jailbreak: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jailbreak'), 'exclude': lambda f: f is None }})
    r"""Flag indicating if device is jailbroken"""  
    language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    os_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('osType'), 'exclude': lambda f: f is None }})  
    os_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('osVersion'), 'exclude': lambda f: f is None }})  
    properties: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('properties'), 'exclude': lambda f: f is None }})  
    reason_frames: Optional[list[ErrorsLatestErrorDetails200ApplicationJSONReasonFrames]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reasonFrames'), 'exclude': lambda f: f is None }})  
    timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userId'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class ErrorsLatestErrorDetailsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    errors_latest_error_details_200_application_json_object: Optional[ErrorsLatestErrorDetails200ApplicationJSON] = dataclasses.field(default=None)
    r"""Latest error details."""  
    errors_latest_error_details_default_application_json_object: Optional[ErrorsLatestErrorDetailsDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error code with reason"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    