"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Layers:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def books_layers_annotation_data_get(self, request: operations.BooksLayersAnnotationDataGetRequest, security: operations.BooksLayersAnnotationDataGetSecurity) -> operations.BooksLayersAnnotationDataGetResponse:
        r"""Gets the annotation data."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BooksLayersAnnotationDataGetRequest, base_url, '/books/v1/volumes/{volumeId}/layers/{layerId}/data/{annotationDataId}', request)
        
        query_params = utils.get_query_params(operations.BooksLayersAnnotationDataGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BooksLayersAnnotationDataGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DictionaryAnnotationdata])
                res.dictionary_annotationdata = out

        return res

    def books_layers_annotation_data_list(self, request: operations.BooksLayersAnnotationDataListRequest, security: operations.BooksLayersAnnotationDataListSecurity) -> operations.BooksLayersAnnotationDataListResponse:
        r"""Gets the annotation data for a volume and layer."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BooksLayersAnnotationDataListRequest, base_url, '/books/v1/volumes/{volumeId}/layers/{layerId}/data', request)
        
        query_params = utils.get_query_params(operations.BooksLayersAnnotationDataListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BooksLayersAnnotationDataListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Annotationsdata])
                res.annotationsdata = out

        return res

    def books_layers_get(self, request: operations.BooksLayersGetRequest, security: operations.BooksLayersGetSecurity) -> operations.BooksLayersGetResponse:
        r"""Gets the layer summary for a volume."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BooksLayersGetRequest, base_url, '/books/v1/volumes/{volumeId}/layersummary/{summaryId}', request)
        
        query_params = utils.get_query_params(operations.BooksLayersGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BooksLayersGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Layersummary])
                res.layersummary = out

        return res

    def books_layers_list(self, request: operations.BooksLayersListRequest, security: operations.BooksLayersListSecurity) -> operations.BooksLayersListResponse:
        r"""List the layer summaries for a volume."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BooksLayersListRequest, base_url, '/books/v1/volumes/{volumeId}/layersummary', request)
        
        query_params = utils.get_query_params(operations.BooksLayersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BooksLayersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Layersummaries])
                res.layersummaries = out

        return res

    def books_layers_volume_annotations_get(self, request: operations.BooksLayersVolumeAnnotationsGetRequest, security: operations.BooksLayersVolumeAnnotationsGetSecurity) -> operations.BooksLayersVolumeAnnotationsGetResponse:
        r"""Gets the volume annotation."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BooksLayersVolumeAnnotationsGetRequest, base_url, '/books/v1/volumes/{volumeId}/layers/{layerId}/annotations/{annotationId}', request)
        
        query_params = utils.get_query_params(operations.BooksLayersVolumeAnnotationsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BooksLayersVolumeAnnotationsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Volumeannotation])
                res.volumeannotation = out

        return res

    def books_layers_volume_annotations_list(self, request: operations.BooksLayersVolumeAnnotationsListRequest, security: operations.BooksLayersVolumeAnnotationsListSecurity) -> operations.BooksLayersVolumeAnnotationsListResponse:
        r"""Gets the volume annotations for a volume and layer."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BooksLayersVolumeAnnotationsListRequest, base_url, '/books/v1/volumes/{volumeId}/layers/{layerId}', request)
        
        query_params = utils.get_query_params(operations.BooksLayersVolumeAnnotationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BooksLayersVolumeAnnotationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Volumeannotations])
                res.volumeannotations = out

        return res

    