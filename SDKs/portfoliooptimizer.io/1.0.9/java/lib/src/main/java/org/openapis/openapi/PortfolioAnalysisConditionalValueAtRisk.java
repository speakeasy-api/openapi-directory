/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class PortfolioAnalysisConditionalValueAtRisk {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public PortfolioAnalysisConditionalValueAtRisk(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Cornish-Fisher Conditional Value At Risk
     * Compute the Cornish-Fisher conditional value at risk of one or several portfolio(s) from portfolio values.
     * 
     * References
     * * [Boudt, Kris and Peterson, Brian G. and Croux, Christophe, Estimation and Decomposition of Downside Risk for Portfolios with Non-Normal Returns (October 31, 2007). Journal of Risk, Vol. 11, No. 2, pp. 79-103, 2008](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1024151).
     * * [Maillard, Didier, A User\u2019s Guide to the Cornish Fisher Expansion](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1997178)
     * * [Lamb, John D., Maura E. Monville, and Kai-Hong Tee. Making Cornish\u2013fisher Fit for Risk Measurement, Journal of Risk, Volume 21, Number 5, p. 53-81](http://doi.org/10.21314/JOR.2019.408)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskConditionalCornishFisherResponse postPortfolioAnalysisValueAtRiskConditionalCornishFisher(org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskConditionalCornishFisherRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/analysis/value-at-risk/conditional/cornish-fisher");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskConditionalCornishFisherResponse res = new org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskConditionalCornishFisherResponse(contentType, httpRes.statusCode()) {{
            postPortfolioAnalysisValueAtRiskConditionalCornishFisher200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskConditionalCornishFisher200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskConditionalCornishFisher200ApplicationJSON.class);
                res.postPortfolioAnalysisValueAtRiskConditionalCornishFisher200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Corrected Cornish-Fisher Conditional Value At Risk
     * Compute the corrected Cornish-Fisher conditional value at risk of one or several portfolio(s) from portfolio values.
     * 
     * References
     * * [Maillard, Didier, A User\u2019s Guide to the Cornish Fisher Expansion](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1997178)
     * * [Lamb, John D., Maura E. Monville, and Kai-Hong Tee. Making Cornish\u2013fisher Fit for Risk Measurement, Journal of Risk, Volume 21, Number 5, p. 53-81](http://doi.org/10.21314/JOR.2019.408)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskConditionalCornishFisherCorrectedResponse postPortfolioAnalysisValueAtRiskConditionalCornishFisherCorrected(org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskConditionalCornishFisherCorrectedRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/analysis/value-at-risk/conditional/cornish-fisher/corrected");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskConditionalCornishFisherCorrectedResponse res = new org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskConditionalCornishFisherCorrectedResponse(contentType, httpRes.statusCode()) {{
            postPortfolioAnalysisValueAtRiskConditionalCornishFisherCorrected200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskConditionalCornishFisherCorrected200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskConditionalCornishFisherCorrected200ApplicationJSON.class);
                res.postPortfolioAnalysisValueAtRiskConditionalCornishFisherCorrected200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gaussian Conditional Value At Risk
     * Compute the Gaussian conditional value at risk of one or several portfolio(s) from portfolio values.
     * 
     * References
     * * [Boudt, Kris and Peterson, Brian G. and Croux, Christophe, Estimation and Decomposition of Downside Risk for Portfolios with Non-Normal Returns (October 31, 2007). Journal of Risk, Vol. 11, No. 2, pp. 79-103, 2008](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1024151).
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskConditionalGaussianResponse postPortfolioAnalysisValueAtRiskConditionalGaussian(org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskConditionalGaussianRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/analysis/value-at-risk/conditional/gaussian");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskConditionalGaussianResponse res = new org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskConditionalGaussianResponse(contentType, httpRes.statusCode()) {{
            postPortfolioAnalysisValueAtRiskConditionalGaussian200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskConditionalGaussian200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskConditionalGaussian200ApplicationJSON.class);
                res.postPortfolioAnalysisValueAtRiskConditionalGaussian200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Historical Conditional Value At Risk
     * Compute the historical conditional value at risk of one or several portfolio(s) from portfolio values.
     * 
     * References
     * * [Wikipedia, Value at risk](https://en.wikipedia.org/wiki/Value_at_risk)
     * * [Acerbi, C. and Tasche, D. (2002), Expected Shortfall: A Natural Coherent Alternative to Value at Risk. Economic Notes, 31: 379-388](https://onlinelibrary.wiley.com/doi/abs/10.1111/1468-0300.00091)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskConditionalHistoricalResponse postPortfolioAnalysisValueAtRiskConditionalHistorical(org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskConditionalHistoricalRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/analysis/value-at-risk/conditional/historical");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskConditionalHistoricalResponse res = new org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskConditionalHistoricalResponse(contentType, httpRes.statusCode()) {{
            postPortfolioAnalysisValueAtRiskConditionalHistorical200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskConditionalHistorical200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskConditionalHistorical200ApplicationJSON.class);
                res.postPortfolioAnalysisValueAtRiskConditionalHistorical200ApplicationJSONObject = out;
            }
        }

        return res;
    }
}