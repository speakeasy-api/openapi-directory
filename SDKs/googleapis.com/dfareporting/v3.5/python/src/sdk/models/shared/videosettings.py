"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import companionsetting as shared_companionsetting
from ..shared import obaicon as shared_obaicon
from ..shared import skippablesetting as shared_skippablesetting
from ..shared import transcodesetting as shared_transcodesetting
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class VideoSettingsOrientationEnum(str, Enum):
    r"""Orientation of a video placement. If this value is set, placement will return assets matching the specified orientation."""
    ANY = 'ANY'
    LANDSCAPE = 'LANDSCAPE'
    PORTRAIT = 'PORTRAIT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoSettings:
    r"""Video Settings"""
    
    companion_settings: Optional[shared_companionsetting.CompanionSetting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('companionSettings'), 'exclude': lambda f: f is None }})
    r"""Companion Settings"""  
    duration_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('durationSeconds'), 'exclude': lambda f: f is None }})
    r"""Duration of a video placement in seconds."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"dfareporting#videoSettings\\"."""  
    oba_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('obaEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether OBA icons are enabled for this placement."""  
    oba_settings: Optional[shared_obaicon.ObaIcon] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('obaSettings'), 'exclude': lambda f: f is None }})
    r"""Online Behavioral Advertiser icon."""  
    orientation: Optional[VideoSettingsOrientationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orientation'), 'exclude': lambda f: f is None }})
    r"""Orientation of a video placement. If this value is set, placement will return assets matching the specified orientation."""  
    skippable_settings: Optional[shared_skippablesetting.SkippableSetting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skippableSettings'), 'exclude': lambda f: f is None }})
    r"""Skippable Settings"""  
    transcode_settings: Optional[shared_transcodesetting.TranscodeSetting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transcodeSettings'), 'exclude': lambda f: f is None }})
    r"""Transcode Settings"""  
    