"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GetOccupantsAddressesOutputFormatInterpolationEnum(str, Enum):
    r"""accessPoint interpolation method. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#interpolation target=\\"_blank\\">interpolation</a>"""
    ADAPTIVE = 'adaptive'
    LINEAR = 'linear'
    NONE = 'none'

class GetOccupantsAddressesOutputFormatLocationDescriptorEnum(str, Enum):
    r"""Describes the nature of the address location. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#locationDescriptor target=\\"_blank\\">locationDescriptor</a>"""
    ANY = 'any'
    ACCESS_POINT = 'accessPoint'
    FRONT_DOOR_POINT = 'frontDoorPoint'
    PARCEL_POINT = 'parcelPoint'
    ROOFTOP_POINT = 'rooftopPoint'
    ROUTING_POINT = 'routingPoint'

class GetOccupantsAddressesOutputFormatOutputFormatEnum(str, Enum):
    r"""Results format. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target=\\"_blank\\">outputFormat</a>.
    
    Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS=4326)
    """
    JSON = 'json'
    GEOJSON = 'geojson'
    XHTML = 'xhtml'
    KML = 'kml'
    GML = 'gml'
    CSV = 'csv'
    SHPZ = 'shpz'

class GetOccupantsAddressesOutputFormatOutputSrsEnum(str, Enum):
    r"""The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target=\\"_blank\\">outputSRS</a>"""
    FOUR_THOUSAND_THREE_HUNDRED_AND_TWENTY_SIX = '4326'
    FOUR_THOUSAND_TWO_HUNDRED_AND_SIXTY_NINE = '4269'
    THREE_THOUSAND_AND_FIVE = '3005'
    TWENTY_SIX_THOUSAND_NINE_HUNDRED_AND_SEVEN = '26907'
    TWENTY_SIX_THOUSAND_NINE_HUNDRED_AND_EIGHT = '26908'
    TWENTY_SIX_THOUSAND_NINE_HUNDRED_AND_NINE = '26909'
    TWENTY_SIX_THOUSAND_NINE_HUNDRED_AND_TEN = '26910'
    TWENTY_SIX_THOUSAND_NINE_HUNDRED_AND_ELEVEN = '26911'

class GetOccupantsAddressesOutputFormatStreetDirectionEnum(str, Enum):
    r"""The abbreviated compass direction as defined by Canada Post and B.C. civic addressing authorities. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#streetDirection target=\\"_blank\\">streetDirection</a>"""
    N = 'N'
    S = 'S'
    E = 'E'
    W = 'W'
    O = 'O'
    NE = 'NE'
    NO = 'NO'
    NW = 'NW'
    SE = 'SE'
    SO = 'SO'
    SW = 'SW'

class GetOccupantsAddressesOutputFormatUnitDesignatorEnum(str, Enum):
    r"""The type of unit within a house or building. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#unitDesignator target=\\"_blank\\">unitDesignator</a>"""
    APT = 'APT'
    BLDG = 'BLDG'
    BSMT = 'BSMT'
    FLR = 'FLR'
    LOBBY = 'LOBBY'
    LWR = 'LWR'
    PAD = 'PAD'
    PH = 'PH'
    REAR = 'REAR'
    RM = 'RM'
    SIDE = 'SIDE'
    SITE = 'SITE'
    SUITE = 'SUITE'
    TH = 'TH'
    UNIT = 'UNIT'
    UPPR = 'UPPR'


@dataclasses.dataclass
class GetOccupantsAddressesOutputFormatRequest:
    
    output_format: GetOccupantsAddressesOutputFormatOutputFormatEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'outputFormat', 'style': 'simple', 'explode': False }})
    r"""Results format. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target=\\"_blank\\">outputFormat</a>.
    
    Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS=4326)
    """  
    address_string: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'addressString', 'style': 'form', 'explode': True }})
    r"""Occupant name OR Occupant name ** address"""  
    auto_complete: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'autoComplete', 'style': 'form', 'explode': True }})
    r"""If true, addressString is expected to contain a partial address that requires completion. Not supported for shp, csv, gml formats."""  
    bbox: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'bbox', 'style': 'form', 'explode': True }})
    r"""Example: -126.07929,49.7628,-126.0163,49.7907.  A bounding box (xmin,ymin,xmax,ymax) that limits the search area. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#bbox target=\\"_blank\\">bbox</a>"""  
    brief: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'brief', 'style': 'form', 'explode': True }})
    r"""If true, include only basic match and address details in results. Not supported for shp, csv, and gml formats."""  
    centre: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'centre', 'style': 'form', 'explode': True }})
    r"""Example: -124.0165926,49.2296251 .  The coordinates of a centre point (x,y) used to define a bounding circle that will limit the search area. This parameter must be specified together with 'maxDistance'. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#centre target='_blank'>centre</a>"""  
    civic_number: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'civicNumber', 'style': 'form', 'explode': True }})
    r"""The official number assigned to a site by an address authority. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#civicNumber target=\\"_blank\\">civicNumber</a>"""  
    civic_number_suffix: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'civicNumberSuffix', 'style': 'form', 'explode': True }})
    r"""A letter or fraction that follows the civic number (e.g., the A in 1039A Bledsoe St). See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#civicNumberSuffix target=\\"_blank\\">civicNumberSuffix</a>"""  
    echo: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'echo', 'style': 'form', 'explode': True }})
    r"""If true, include unmatched address details such as site name in results."""  
    extrapolate: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'extrapolate', 'style': 'form', 'explode': True }})
    r"""If true, uses supplied parcelPoint to derive an appropriate accessPoint.           See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#extrapolate target=\\"_blank\\">extrapolate</a>"""  
    interpolation: Optional[GetOccupantsAddressesOutputFormatInterpolationEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'interpolation', 'style': 'form', 'explode': True }})
    r"""accessPoint interpolation method. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#interpolation target=\\"_blank\\">interpolation</a>"""  
    localities: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'localities', 'style': 'form', 'explode': True }})
    r"""A comma separated list of locality names that matched addresses must belong to. For example, setting localities to Nanaimo only returns addresses in Nanaimo"""  
    locality_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'localityName', 'style': 'form', 'explode': True }})
    r"""The name of the locality assigned to a given site by an address authority. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#streetDirection target=\\"_blank\\">streetDirection</a>"""  
    location_descriptor: Optional[GetOccupantsAddressesOutputFormatLocationDescriptorEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'locationDescriptor', 'style': 'form', 'explode': True }})
    r"""Describes the nature of the address location. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#locationDescriptor target=\\"_blank\\">locationDescriptor</a>"""  
    match_precision: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'matchPrecision', 'style': 'form', 'explode': True }})
    r"""Example: street,locality.  A comma separated list of individual match precision levels to include in results. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#matchPrecision target=\\"_blank\\">matchPrecision</a>"""  
    match_precision_not: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'matchPrecisionNot', 'style': 'form', 'explode': True }})
    r"""Example: street,locality.  A comma separated list of individual match precision levels to exclude from results. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#matchPrecisionNot target=\\"_blank\\">matchPrecisionNot</a>"""  
    max_distance: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxDistance', 'style': 'form', 'explode': True }})
    r"""The maximum distance (in metres) to search from the given point.  If not specified, the search distance is unlimited."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""The maximum number of search results to return."""  
    min_score: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'minScore', 'style': 'form', 'explode': True }})
    r"""The minimum score required for a match to be returned. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#minScore target=\\"_blank\\">minScore</a>"""  
    not_localities: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'notLocalities', 'style': 'form', 'explode': True }})
    r"""A comma-separated list of localities to exclude from the search."""  
    output_srs: Optional[GetOccupantsAddressesOutputFormatOutputSrsEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'outputSRS', 'style': 'form', 'explode': True }})
    r"""The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target=\\"_blank\\">outputSRS</a>"""  
    parcel_point: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'parcelPoint', 'style': 'form', 'explode': True }})
    r"""The coordinates of a point (x,y) known to be inside the parcel containing a given address. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#parcelPoint target=\\"_blank\\">parcelPoint</a>"""  
    province_code: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'provinceCode', 'style': 'form', 'explode': True }})
    r"""The ISO 3166-2 Sub-Country Code. The code for British Columbia is BC."""  
    set_back: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'setBack', 'style': 'form', 'explode': True }})
    r"""The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint."""  
    site_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'siteName', 'style': 'form', 'explode': True }})
    r"""A string containing the name of the building, facility, or institution (e.g., Duck Building, Casa Del Mar, Crystal Garden, Bluebird House).See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#siteName target=\\"_blank\\">siteName</a>"""  
    street_direction: Optional[GetOccupantsAddressesOutputFormatStreetDirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'streetDirection', 'style': 'form', 'explode': True }})
    r"""The abbreviated compass direction as defined by Canada Post and B.C. civic addressing authorities. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#streetDirection target=\\"_blank\\">streetDirection</a>"""  
    street_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'streetName', 'style': 'form', 'explode': True }})
    r"""The official name of the street as assigned by an address authority (e.g., the Douglas in 1175 Douglas Street). See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#streetName target=\\"_blank\\">streetName</a>"""  
    street_qualifier: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'streetQualifier', 'style': 'form', 'explode': True }})
    r"""The qualifier of a street name (e.g., the Bridge in Johnson St Bridge)"""  
    street_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'streetType', 'style': 'form', 'explode': True }})
    r"""The type of street as assigned by a municipality (e.g., the ST in 1175 DOUGLAS St). See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#streetType target=\\"_blank\\">streetType</a>"""  
    tags: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tags', 'style': 'form', 'explode': True }})
    r"""Example: schools;courts;employment<br>A list of tags separated by semicolons."""  
    unit_designator: Optional[GetOccupantsAddressesOutputFormatUnitDesignatorEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'unitDesignator', 'style': 'form', 'explode': True }})
    r"""The type of unit within a house or building. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#unitDesignator target=\\"_blank\\">unitDesignator</a>"""  
    unit_number: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'unitNumber', 'style': 'form', 'explode': True }})
    r"""The number of the unit, suite, or apartment within a house or building."""  
    unit_number_suffix: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'unitNumberSuffix', 'style': 'form', 'explode': True }})
    r"""A letter that follows the unit number as in Unit 1A or Suite 302B."""  
    

@dataclasses.dataclass
class GetOccupantsAddressesOutputFormatResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    