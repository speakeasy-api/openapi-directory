"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import datasourcetoindexfieldmapping as shared_datasourcetoindexfieldmapping
from ..shared import datasourcevpcconfiguration as shared_datasourcevpcconfiguration
from ..shared import githubdocumentcrawlproperties as shared_githubdocumentcrawlproperties
from ..shared import onpremiseconfiguration as shared_onpremiseconfiguration
from ..shared import saasconfiguration as shared_saasconfiguration
from ..shared import type_enum as shared_type_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GitHubConfiguration:
    r"""Provides the configuration information to connect to GitHub as your data source."""
    
    secret_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecretArn') }})  
    exclusion_file_name_patterns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExclusionFileNamePatterns'), 'exclude': lambda f: f is None }})  
    exclusion_file_type_patterns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExclusionFileTypePatterns'), 'exclude': lambda f: f is None }})  
    exclusion_folder_name_patterns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExclusionFolderNamePatterns'), 'exclude': lambda f: f is None }})  
    git_hub_commit_configuration_field_mappings: Optional[list[shared_datasourcetoindexfieldmapping.DataSourceToIndexFieldMapping]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GitHubCommitConfigurationFieldMappings'), 'exclude': lambda f: f is None }})  
    git_hub_document_crawl_properties: Optional[shared_githubdocumentcrawlproperties.GitHubDocumentCrawlProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GitHubDocumentCrawlProperties'), 'exclude': lambda f: f is None }})  
    git_hub_issue_attachment_configuration_field_mappings: Optional[list[shared_datasourcetoindexfieldmapping.DataSourceToIndexFieldMapping]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GitHubIssueAttachmentConfigurationFieldMappings'), 'exclude': lambda f: f is None }})  
    git_hub_issue_comment_configuration_field_mappings: Optional[list[shared_datasourcetoindexfieldmapping.DataSourceToIndexFieldMapping]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GitHubIssueCommentConfigurationFieldMappings'), 'exclude': lambda f: f is None }})  
    git_hub_issue_document_configuration_field_mappings: Optional[list[shared_datasourcetoindexfieldmapping.DataSourceToIndexFieldMapping]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GitHubIssueDocumentConfigurationFieldMappings'), 'exclude': lambda f: f is None }})  
    git_hub_pull_request_comment_configuration_field_mappings: Optional[list[shared_datasourcetoindexfieldmapping.DataSourceToIndexFieldMapping]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GitHubPullRequestCommentConfigurationFieldMappings'), 'exclude': lambda f: f is None }})  
    git_hub_pull_request_document_attachment_configuration_field_mappings: Optional[list[shared_datasourcetoindexfieldmapping.DataSourceToIndexFieldMapping]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GitHubPullRequestDocumentAttachmentConfigurationFieldMappings'), 'exclude': lambda f: f is None }})  
    git_hub_pull_request_document_configuration_field_mappings: Optional[list[shared_datasourcetoindexfieldmapping.DataSourceToIndexFieldMapping]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GitHubPullRequestDocumentConfigurationFieldMappings'), 'exclude': lambda f: f is None }})  
    git_hub_repository_configuration_field_mappings: Optional[list[shared_datasourcetoindexfieldmapping.DataSourceToIndexFieldMapping]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GitHubRepositoryConfigurationFieldMappings'), 'exclude': lambda f: f is None }})  
    inclusion_file_name_patterns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InclusionFileNamePatterns'), 'exclude': lambda f: f is None }})  
    inclusion_file_type_patterns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InclusionFileTypePatterns'), 'exclude': lambda f: f is None }})  
    inclusion_folder_name_patterns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InclusionFolderNamePatterns'), 'exclude': lambda f: f is None }})  
    on_premise_configuration: Optional[shared_onpremiseconfiguration.OnPremiseConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OnPremiseConfiguration'), 'exclude': lambda f: f is None }})  
    repository_filter: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RepositoryFilter'), 'exclude': lambda f: f is None }})  
    saa_s_configuration: Optional[shared_saasconfiguration.SaaSConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SaaSConfiguration'), 'exclude': lambda f: f is None }})  
    type: Optional[shared_type_enum.TypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type'), 'exclude': lambda f: f is None }})  
    use_change_log: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UseChangeLog'), 'exclude': lambda f: f is None }})  
    vpc_configuration: Optional[shared_datasourcevpcconfiguration.DataSourceVpcConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcConfiguration'), 'exclude': lambda f: f is None }})  
    