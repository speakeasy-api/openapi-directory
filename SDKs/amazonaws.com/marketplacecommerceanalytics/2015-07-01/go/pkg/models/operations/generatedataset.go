// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GenerateDataSetXAmzTargetEnum
type GenerateDataSetXAmzTargetEnum string

const (
	GenerateDataSetXAmzTargetEnumMarketplaceCommerceAnalytics20150701GenerateDataSet GenerateDataSetXAmzTargetEnum = "MarketplaceCommerceAnalytics20150701.GenerateDataSet"
)

func (e *GenerateDataSetXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MarketplaceCommerceAnalytics20150701.GenerateDataSet":
		*e = GenerateDataSetXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GenerateDataSetXAmzTargetEnum: %s", s)
	}
}

type GenerateDataSetRequest struct {
	GenerateDataSetRequest shared.GenerateDataSetRequest `request:"mediaType=application/json"`
	XAmzAlgorithm          *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256      *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential         *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate               *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken      *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature          *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders      *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget             GenerateDataSetXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GenerateDataSetResponse struct {
	ContentType string
	// Success
	GenerateDataSetResult *shared.GenerateDataSetResult
	// MarketplaceCommerceAnalyticsException
	MarketplaceCommerceAnalyticsException interface{}
	StatusCode                            int
	RawResponse                           *http.Response
}
