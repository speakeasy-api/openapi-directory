/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { PayoutScheduleResponse } from "./payoutscheduleresponse";
import { Expose, Type } from "class-transformer";

/**
 * The status of the account.
 *
 * @remarks
 * >Permitted values: `Active`.
 */
export enum CreateAccountResponseStatusEnum {
  Active = "Active",
  Closed = "Closed",
  Inactive = "Inactive",
  Suspended = "Suspended",
}

/**
 * OK - the request has succeeded.
 */
export class CreateAccountResponse extends SpeakeasyBase {
  /**
   * The code of the new account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountCode" })
  accountCode?: string;

  /**
   * The code of the account holder.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountHolderCode" })
  accountHolderCode?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "payoutSchedule" })
  @Type(() => PayoutScheduleResponse)
  payoutSchedule?: PayoutScheduleResponse;

  /**
   * The reference of a request. Can be used to uniquely identify the request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pspReference" })
  pspReference?: string;

  /**
   * The result code.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resultCode" })
  resultCode?: string;

  /**
   * The status of the account.
   *
   * @remarks
   * >Permitted values: `Active`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: CreateAccountResponseStatusEnum;

  /**
   * Indicates whether the request is processed asynchronously. Depending on the request's platform settings, the following scenarios may be applied:
   *
   * @remarks
   * * **true**: The request is queued and will be executed when the providing service is available in the order in which the requests are received.
   * * **false**: The processing of the request is immediately attempted; it may result in an error if the providing service is unavailable.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "submittedAsync" })
  submittedAsync?: boolean;
}
