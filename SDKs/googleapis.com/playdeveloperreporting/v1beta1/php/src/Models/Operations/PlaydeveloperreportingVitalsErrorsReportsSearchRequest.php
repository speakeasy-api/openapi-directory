<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class PlaydeveloperreportingVitalsErrorsReportsSearchRequest
{
    /**
     * V1 error format.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\XgafvEnum $dollarXgafv
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=$.xgafv')]
    public ?\OpenAPI\OpenAPI\Models\Shared\XgafvEnum $dollarXgafv = null;
    
    /**
     * OAuth access token.
     * 
     * @var ?string $accessToken
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=access_token')]
    public ?string $accessToken = null;
    
    /**
     * Data format for response.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\AltEnum $alt
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=alt')]
    public ?\OpenAPI\OpenAPI\Models\Shared\AltEnum $alt = null;
    
    /**
     * JSONP
     * 
     * @var ?string $callback
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=callback')]
    public ?string $callback = null;
    
    /**
     * Selector specifying which fields to include in a partial response.
     * 
     * @var ?string $fields
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=fields')]
    public ?string $fields = null;
    
    /**
     * A selection predicate to retrieve only a subset of the reports. For filtering basics, please check [AIP-160](https://google.aip.dev/160). ** Supported field names:** * `apiLevel`: Matches error reports that occurred in the requested Android versions (specified as the numeric API level) only. Example: `apiLevel = 28 OR apiLevel = 29`. * `versionCode`: Matches error reports that occurred in the requested app version codes only. Example: `versionCode = 123 OR versionCode = 456`. * `deviceModel`: Matches error reports that occurred in the requested devices. Example: `deviceModel = "walleye" OR deviceModel = "marlin"`. * `deviceBrand`: Matches error issues that occurred in the requested device brands. Example: `deviceBrand = "Google". * `deviceType`: Matches error reports that occurred in the requested device types. Example: `deviceType = "PHONE"`. * `errorIssueType`: Matches error reports of the requested types only. Valid candidates: `JAVA_CRASH`, `NATIVE_CRASH`, `ANR`. Example: `errorIssueType = JAVA_CRASH OR errorIssueType = NATIVE_CRASH`. * `errorIssueId`: Matches error reports belonging to the requested error issue ids only. Example: `errorIssueId = 1234 OR errorIssueId = 4567`. * `appProcessState`: Matches error reports on the process state of an app, indicating whether an app runs in the foreground (user-visible) or background. Valid candidates: `FOREGROUND`, `BACKGROUND`. Example: `appProcessState = FOREGROUND`. * `isUserPerceived`: Matches error reports that are user-perceived. It is not accompanied by any operators. Example: `isUserPerceived`. ** Supported operators:** * Comparison operators: The only supported comparison operator is equality. The filtered field must appear on the left hand side of the comparison. * Logical Operators: Logical operators `AND` and `OR` can be used to build complex filters following a conjunctive normal form (CNF), i.e., conjunctions of disjunctions. The `OR` operator takes precedence over `AND` so the use of parenthesis is not necessary when building CNF. The `OR` operator is only supported to build disjunctions that apply to the same field, e.g., `versionCode = 123 OR versionCode = ANR`. The filter expression `versionCode = 123 OR errorIssueType = ANR` is not valid. ** Examples ** Some valid filtering expressions: * `versionCode = 123 AND errorIssueType = ANR` * `versionCode = 123 AND errorIssueType = OR errorIssueType = CRASH` * `versionCode = 123 AND (errorIssueType = OR errorIssueType = CRASH)`
     * 
     * @var ?string $filter
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=filter')]
    public ?string $filter = null;
    
    /**
     * Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day.
     * 
     * @var ?int $intervalEndTimeDay
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=interval.endTime.day')]
    public ?int $intervalEndTimeDay = null;
    
    /**
     * Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value "24:00:00" for scenarios like business closing time.
     * 
     * @var ?int $intervalEndTimeHours
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=interval.endTime.hours')]
    public ?int $intervalEndTimeHours = null;
    
    /**
     * Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0.
     * 
     * @var ?int $intervalEndTimeMinutes
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=interval.endTime.minutes')]
    public ?int $intervalEndTimeMinutes = null;
    
    /**
     * Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month.
     * 
     * @var ?int $intervalEndTimeMonth
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=interval.endTime.month')]
    public ?int $intervalEndTimeMonth = null;
    
    /**
     * Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0.
     * 
     * @var ?int $intervalEndTimeNanos
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=interval.endTime.nanos')]
    public ?int $intervalEndTimeNanos = null;
    
    /**
     * Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds.
     * 
     * @var ?int $intervalEndTimeSeconds
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=interval.endTime.seconds')]
    public ?int $intervalEndTimeSeconds = null;
    
    /**
     * IANA Time Zone Database time zone, e.g. "America/New_York".
     * 
     * @var ?string $intervalEndTimeTimeZoneId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=interval.endTime.timeZone.id')]
    public ?string $intervalEndTimeTimeZoneId = null;
    
    /**
     * Optional. IANA Time Zone Database version number, e.g. "2019a".
     * 
     * @var ?string $intervalEndTimeTimeZoneVersion
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=interval.endTime.timeZone.version')]
    public ?string $intervalEndTimeTimeZoneVersion = null;
    
    /**
     * UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }.
     * 
     * @var ?string $intervalEndTimeUtcOffset
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=interval.endTime.utcOffset')]
    public ?string $intervalEndTimeUtcOffset = null;
    
    /**
     * Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year.
     * 
     * @var ?int $intervalEndTimeYear
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=interval.endTime.year')]
    public ?int $intervalEndTimeYear = null;
    
    /**
     * Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day.
     * 
     * @var ?int $intervalStartTimeDay
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=interval.startTime.day')]
    public ?int $intervalStartTimeDay = null;
    
    /**
     * Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value "24:00:00" for scenarios like business closing time.
     * 
     * @var ?int $intervalStartTimeHours
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=interval.startTime.hours')]
    public ?int $intervalStartTimeHours = null;
    
    /**
     * Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0.
     * 
     * @var ?int $intervalStartTimeMinutes
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=interval.startTime.minutes')]
    public ?int $intervalStartTimeMinutes = null;
    
    /**
     * Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month.
     * 
     * @var ?int $intervalStartTimeMonth
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=interval.startTime.month')]
    public ?int $intervalStartTimeMonth = null;
    
    /**
     * Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0.
     * 
     * @var ?int $intervalStartTimeNanos
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=interval.startTime.nanos')]
    public ?int $intervalStartTimeNanos = null;
    
    /**
     * Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds.
     * 
     * @var ?int $intervalStartTimeSeconds
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=interval.startTime.seconds')]
    public ?int $intervalStartTimeSeconds = null;
    
    /**
     * IANA Time Zone Database time zone, e.g. "America/New_York".
     * 
     * @var ?string $intervalStartTimeTimeZoneId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=interval.startTime.timeZone.id')]
    public ?string $intervalStartTimeTimeZoneId = null;
    
    /**
     * Optional. IANA Time Zone Database version number, e.g. "2019a".
     * 
     * @var ?string $intervalStartTimeTimeZoneVersion
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=interval.startTime.timeZone.version')]
    public ?string $intervalStartTimeTimeZoneVersion = null;
    
    /**
     * UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }.
     * 
     * @var ?string $intervalStartTimeUtcOffset
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=interval.startTime.utcOffset')]
    public ?string $intervalStartTimeUtcOffset = null;
    
    /**
     * Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year.
     * 
     * @var ?int $intervalStartTimeYear
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=interval.startTime.year')]
    public ?int $intervalStartTimeYear = null;
    
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * 
     * @var ?string $key
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=key')]
    public ?string $key = null;
    
    /**
     * OAuth 2.0 token for the current user.
     * 
     * @var ?string $oauthToken
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=oauth_token')]
    public ?string $oauthToken = null;
    
    /**
     * The maximum number of reports to return. The service may return fewer than this value. If unspecified, at most 50 reports will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
     * 
     * @var ?int $pageSize
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=pageSize')]
    public ?int $pageSize = null;
    
    /**
     * A page token, received from a previous `SearchErrorReports` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `SearchErrorReports` must match the call that provided the page token.
     * 
     * @var ?string $pageToken
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=pageToken')]
    public ?string $pageToken = null;
    
    /**
     * Required. Parent resource of the reports, indicating the application for which they were received. Format: apps/{app}
     * 
     * @var string $parent
     */
	#[SpeakeasyMetadata('pathParam:style=simple,explode=false,name=parent')]
    public string $parent;
    
    /**
     * Returns response with indentations and line breaks.
     * 
     * @var ?bool $prettyPrint
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=prettyPrint')]
    public ?bool $prettyPrint = null;
    
    /**
     * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * 
     * @var ?string $quotaUser
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=quotaUser')]
    public ?string $quotaUser = null;
    
    /**
     * Legacy upload protocol for media (e.g. "media", "multipart").
     * 
     * @var ?string $uploadType
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=uploadType')]
    public ?string $uploadType = null;
    
    /**
     * Upload protocol for media (e.g. "raw", "multipart").
     * 
     * @var ?string $uploadProtocol
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=upload_protocol')]
    public ?string $uploadProtocol = null;
    
	public function __construct()
	{
		$this->dollarXgafv = null;
		$this->accessToken = null;
		$this->alt = null;
		$this->callback = null;
		$this->fields = null;
		$this->filter = null;
		$this->intervalEndTimeDay = null;
		$this->intervalEndTimeHours = null;
		$this->intervalEndTimeMinutes = null;
		$this->intervalEndTimeMonth = null;
		$this->intervalEndTimeNanos = null;
		$this->intervalEndTimeSeconds = null;
		$this->intervalEndTimeTimeZoneId = null;
		$this->intervalEndTimeTimeZoneVersion = null;
		$this->intervalEndTimeUtcOffset = null;
		$this->intervalEndTimeYear = null;
		$this->intervalStartTimeDay = null;
		$this->intervalStartTimeHours = null;
		$this->intervalStartTimeMinutes = null;
		$this->intervalStartTimeMonth = null;
		$this->intervalStartTimeNanos = null;
		$this->intervalStartTimeSeconds = null;
		$this->intervalStartTimeTimeZoneId = null;
		$this->intervalStartTimeTimeZoneVersion = null;
		$this->intervalStartTimeUtcOffset = null;
		$this->intervalStartTimeYear = null;
		$this->key = null;
		$this->oauthToken = null;
		$this->pageSize = null;
		$this->pageToken = null;
		$this->parent = "";
		$this->prettyPrint = null;
		$this->quotaUser = null;
		$this->uploadType = null;
		$this->uploadProtocol = null;
	}
}
