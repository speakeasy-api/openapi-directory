// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/utils"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	// Cloud hosted Brain API endpoint.
	"https://{protocol}://{customer}.intellifi.{tld}/api",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// SDK - This document describes the [Intellifi Brain](https://intellifi.zendesk.com/hc/en-us/categories/360000685454)
// Web API specification using the [OpenAPI specification](https://github.com/OAI/OpenAPI-Specification).
//
// The Brain Web API is a RESTful API that allows you to interact with the
// [Intellifi devices](https://intellifi.zendesk.com/hc/en-us/categories/360000685434) and
// services in a powerful and simple way. Our end-to-end solution allows you to
// localize your items/assets based on technologies such as RFID and Bluetooth.
//
// # Try it out!
//
// The API can be tried out and tested using the ['api-doc/tryitout' endpoint on this site](./tryitout/).
// This UI allows anyone to visualize and interact with the API’s resources without having any of the implementation logic in place.
// It’s automatically generated from this Specification, with the visual documentation making it easy for back end implementation and client side consumption.
//
// # Authentication
//
// Applications are required to provide some form of authentication to the API
// for every secured endpoint. The Brain offers two forms of authentication.
//
// - API key (Via an HTTP request header or URL parameter)
// - Session cookie
//
// <!-- ReDoc-Inject: <security-definitions> -->
//
// # See also
//
// - About Intellifi and what we do: [intellifi.nl](https://intellifi.nl)
// - Technical and background information: [intellifi.zendesk.com](https://intellifi.zendesk.com)
//
// https://intellifi.zendesk.com - Find out more
type SDK struct {
	// Authinfo - Read-only route providing information about how the requesting client is authenticated on the API, as well as corresponding permissions.
	//
	Authinfo *authinfo
	// Blobs - The `blobs` resource provides a service for storing binary objects on the Brain, e.g. images.
	// Intended for applications that interact with the Brain but do not or cannot have their own (centralized) persistent storage.
	//
	// See also the `kvpairs` resource.
	//
	Blobs *blobs
	// Events - The `events` resource temporarily holds Brain events that match an event subscription in the `subscriptions` resource.
	// The subscription determines how long the events are held.
	//
	// See also the `subscriptions` resource.
	//
	// https://intellifi.zendesk.com/hc/en-us/sections/360001588534
	Events *events
	// Items - The `items` resource contains data about things that can be tracked using the Brain.
	// When an item is detected for the first time by a device connected to the Brain, it will be added to this resource.
	// It will then be updated with information about where the item currently is, or where it has been seen for the last time.
	//
	// https://intellifi.zendesk.com/hc/en-us/articles/360007502554
	Items *items
	// Keys - The `keys` resource contains the access keys used to authenticate requests to this API.
	//
	// Note that this resource is only accessible for administrator users logged into the Brain Management Console.
	// It is not possible to access this resource using API key authentication.
	// This resource is therefore irrelevant to most applications.
	//
	Keys *keys
	// Kvpairs - The `kvpairs` resource provides a service for storing generic JSON key/value pairs on the Brain.
	// Intended for applications that interact with the Brain but do not or cannot have their own (centralized) persistent storage.
	//
	// See also the `blobs` resource.
	//
	Kvpairs *kvpairs
	// Locationrules - Location rules are directives for the localization engine that may be useful for certain solutions.
	//
	Locationrules *locationrules
	// Locations - The `locations` resource is an abstraction for the area around a physical location that items can be localized at.
	//
	// https://intellifi.zendesk.com/hc/en-us/articles/360007502554
	Locations *locations
	// Presences - The `presences` resource is an abstraction for the detection of an item (from the `items` resource) at a location (from the `locations` resource).
	// Presences are always kept current by the Brain, i.e. if the hold time of a presence expires it is simply removed from the resource.
	//
	// https://intellifi.zendesk.com/hc/en-us/articles/360008309313
	Presences *presences
	// Services - The Brain consists of several software components with their own responsibilities, referred to as "services".
	// Some of these services have status information and/or configuration that can be managed using the `services` resource.
	//
	Services *services
	// Sets - It can be useful to group items or Smartspots in a list. The `sets` resource can be used to create and manage such list sets.
	// Sets can be utilized in various Brain Management Console utilities and can also be useful in custom Brain applications.
	//
	// https://intellifi.zendesk.com/hc/en-us/articles/360007824993
	Sets *sets
	// Spots - The `spots` resource contains representations of Smartspot devices that have connected to this Brain at least once.
	// It is possible to configure Smartspots through this resource.
	//
	// Smartspots also have their own locally stored sets, referred to as "spotsets".
	// Spotsets can be created and managed within a single spot instance or by using `spotsets` resource.
	// Created or updated spotsets are automatically synced between Smartspot and server.
	//
	// https://intellifi.zendesk.com/hc/en-us/categories/360000685434
	Spots *spots
	// Spotsets - The `spotsets` resource contains a collection of set definitons for each Smartspot and allows for remote mananagement.
	// Spotsets are stored and used on the Smartspot locally and synced between Smartspot and server.
	// Spotsets primarly are used as an input for Sense&Control.
	//
	// https://intellifi.zendesk.com/hc/en-us/articles/360009282834
	Spotsets *spotsets
	// Subscriptions - The `subscriptions` resource contains rules to store and/or deliver events from the Brain event system.
	//
	// See also the `events` resource.
	//
	// https://intellifi.zendesk.com/hc/en-us/sections/360001588534
	Subscriptions *subscriptions
	// Users - The `users` resource contains the user accounts that can log into the Brain Management Console.
	//
	// Note that this resource is only accessible for administrator users logged into the Brain Management Console.
	// It is not possible to access this resource using API key authentication.
	// This resource is therefore irrelevant to most applications.
	//
	Users *users

	// Non-idiomatic field names below are to namespace fields from the fields names above to avoid name conflicts
	_defaultClient  HTTPClient
	_securityClient HTTPClient
	_security       *shared.Security
	_serverURL      string
	_language       string
	_sdkVersion     string
	_genVersion     string
}

type SDKOption func(*SDK)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *SDK) {
		sdk._serverURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *SDK) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk._serverURL = serverURL
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *SDK) {
		sdk._defaultClient = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(security shared.Security) SDKOption {
	return func(sdk *SDK) {
		sdk._security = &security
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *SDK {
	sdk := &SDK{
		_language:   "go",
		_sdkVersion: "0.0.1",
		_genVersion: "internal",
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk._defaultClient == nil {
		sdk._defaultClient = &http.Client{Timeout: 60 * time.Second}
	}
	if sdk._securityClient == nil {
		if sdk._security != nil {
			sdk._securityClient = utils.ConfigureSecurityClient(sdk._defaultClient, sdk._security)
		} else {
			sdk._securityClient = sdk._defaultClient
		}
	}

	if sdk._serverURL == "" {
		sdk._serverURL = ServerList[0]
	}

	sdk.Authinfo = newAuthinfo(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Blobs = newBlobs(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Events = newEvents(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Items = newItems(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Keys = newKeys(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Kvpairs = newKvpairs(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Locationrules = newLocationrules(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Locations = newLocations(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Presences = newPresences(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Services = newServices(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Sets = newSets(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Spots = newSpots(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Spotsets = newSpotsets(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Subscriptions = newSubscriptions(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Users = newUsers(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	return sdk
}
