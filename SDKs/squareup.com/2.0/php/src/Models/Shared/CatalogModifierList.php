<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * CatalogModifierList - A list of modifiers applicable to items at the time of sale.
 * 
 * 
 * For example, a "Condiments" modifier list applicable to a "Hot Dog" item
 * may contain "Ketchup", "Mustard", and "Relish" modifiers.
 * Use the `selection_type` field to specify whether or not multiple selections from
 * the modifier list are allowed.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class CatalogModifierList
{
    /**
     * The options included in the `CatalogModifierList`.
     * 
     * You must include at least one `CatalogModifier`.
     * Each CatalogObject must have type `MODIFIER` and contain
     * `CatalogModifier` data.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\CatalogObject> $modifiers
     */
	#[\JMS\Serializer\Annotation\SerializedName('modifiers')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\CatalogObject>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $modifiers = null;
    
    /**
     * The name for the `CatalogModifierList` instance. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * Determines where this modifier list appears in a list of `CatalogModifierList` values.
     * 
     * @var ?int $ordinal
     */
	#[\JMS\Serializer\Annotation\SerializedName('ordinal')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $ordinal = null;
    
    /**
     * Indicates whether multiple options from the modifier list
     * 
     * can be applied to a single `CatalogItem`.
     * 
     * @var ?string $selectionType
     */
	#[\JMS\Serializer\Annotation\SerializedName('selection_type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $selectionType = null;
    
	public function __construct()
	{
		$this->modifiers = null;
		$this->name = null;
		$this->ordinal = null;
		$this->selectionType = null;
	}
}
