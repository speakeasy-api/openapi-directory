<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * PoolUpdatePropertiesParameter - Parameters for a CloudPoolOperations.UpdateProperties request.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class PoolUpdatePropertiesParameter
{
    /**
     * Sets a list of application packages to be installed on each compute node in the pool. If you specify an empty collection, any existing application packages references are removed from the pool.
     * 
     * @var array<\OpenAPI\OpenAPI\Models\Shared\ApplicationPackageReference> $applicationPackageReferences
     */
	#[\JMS\Serializer\Annotation\SerializedName('applicationPackageReferences')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\ApplicationPackageReference>')]
    public array $applicationPackageReferences;
    
    /**
     * Sets a list of certificates to be installed on each compute node in the pool. If you specify an empty collection, any existing certificate references are removed from the pool.
     * 
     * @var array<\OpenAPI\OpenAPI\Models\Shared\CertificateReference> $certificateReferences
     */
	#[\JMS\Serializer\Annotation\SerializedName('certificateReferences')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\CertificateReference>')]
    public array $certificateReferences;
    
    /**
     * Sets a list of name-value pairs associated with the pool as metadata. If you specify an empty collection, any existing metadata is removed from the pool.
     * 
     * @var array<\OpenAPI\OpenAPI\Models\Shared\MetadataItem> $metadata
     */
	#[\JMS\Serializer\Annotation\SerializedName('metadata')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\MetadataItem>')]
    public array $metadata;
    
    /**
     * A task defined on a pool and run by compute nodes when they join the pool.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\StartTask $startTask
     */
	#[\JMS\Serializer\Annotation\SerializedName('startTask')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\StartTask')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?StartTask $startTask = null;
    
	public function __construct()
	{
		$this->applicationPackageReferences = [];
		$this->certificateReferences = [];
		$this->metadata = [];
		$this->startTask = null;
	}
}
