// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIkeVersionEnum - [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted.
type UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIkeVersionEnum string

const (
	UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIkeVersionEnumOne UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIkeVersionEnum = "1"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIkeVersionEnumTwo UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIkeVersionEnum = "2"
)

func (e UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIkeVersionEnum) ToPointer() *UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIkeVersionEnum {
	return &e
}

func (e *UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIkeVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1":
		fallthrough
	case "2":
		*e = UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIkeVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIkeVersionEnum: %v", v)
	}
}

type UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildAuthAlgoEnum string

const (
	UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildAuthAlgoEnumMd5    UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildAuthAlgoEnum = "md5"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildAuthAlgoEnumSha1   UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildAuthAlgoEnum = "sha1"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildAuthAlgoEnumSha256 UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildAuthAlgoEnum = "sha256"
)

func (e UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildAuthAlgoEnum) ToPointer() *UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildAuthAlgoEnum {
	return &e
}

func (e *UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildAuthAlgoEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "md5":
		fallthrough
	case "sha1":
		fallthrough
	case "sha256":
		*e = UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildAuthAlgoEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildAuthAlgoEnum: %v", v)
	}
}

type UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildCipherAlgoEnum string

const (
	UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildCipherAlgoEnumAes128    UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildCipherAlgoEnum = "aes128"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildCipherAlgoEnumAes192    UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildCipherAlgoEnum = "aes192"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildCipherAlgoEnumAes256    UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildCipherAlgoEnum = "aes256"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildCipherAlgoEnumDes       UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildCipherAlgoEnum = "des"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildCipherAlgoEnumNull      UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildCipherAlgoEnum = "null"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildCipherAlgoEnumTripledes UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildCipherAlgoEnum = "tripledes"
)

func (e UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildCipherAlgoEnum) ToPointer() *UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildCipherAlgoEnum {
	return &e
}

func (e *UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildCipherAlgoEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aes128":
		fallthrough
	case "aes192":
		fallthrough
	case "aes256":
		fallthrough
	case "des":
		fallthrough
	case "null":
		fallthrough
	case "tripledes":
		*e = UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildCipherAlgoEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildCipherAlgoEnum: %v", v)
	}
}

type UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeAuthAlgoEnum string

const (
	UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeAuthAlgoEnumMd5    UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeAuthAlgoEnum = "md5"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeAuthAlgoEnumSha1   UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeAuthAlgoEnum = "sha1"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeAuthAlgoEnumSha256 UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeAuthAlgoEnum = "sha256"
)

func (e UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeAuthAlgoEnum) ToPointer() *UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeAuthAlgoEnum {
	return &e
}

func (e *UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeAuthAlgoEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "md5":
		fallthrough
	case "sha1":
		fallthrough
	case "sha256":
		*e = UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeAuthAlgoEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeAuthAlgoEnum: %v", v)
	}
}

type UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeCipherAlgoEnum string

const (
	UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeCipherAlgoEnumAes128    UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeCipherAlgoEnum = "aes128"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeCipherAlgoEnumAes192    UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeCipherAlgoEnum = "aes192"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeCipherAlgoEnumAes256    UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeCipherAlgoEnum = "aes256"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeCipherAlgoEnumDes       UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeCipherAlgoEnum = "des"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeCipherAlgoEnumTripledes UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeCipherAlgoEnum = "tripledes"
)

func (e UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeCipherAlgoEnum) ToPointer() *UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeCipherAlgoEnum {
	return &e
}

func (e *UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeCipherAlgoEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aes128":
		fallthrough
	case "aes192":
		fallthrough
	case "aes256":
		fallthrough
	case "des":
		fallthrough
	case "tripledes":
		*e = UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeCipherAlgoEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeCipherAlgoEnum: %v", v)
	}
}

type UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnum string

const (
	UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnumDefault   UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnum = "default"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnumPrfmd5    UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnum = "prfmd5"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnumPrfsha1   UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnum = "prfsha1"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnumPrfsha256 UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnum = "prfsha256"
)

func (e UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnum) ToPointer() *UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnum {
	return &e
}

func (e *UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "default":
		fallthrough
	case "prfmd5":
		fallthrough
	case "prfsha1":
		fallthrough
	case "prfsha256":
		*e = UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnum: %v", v)
	}
}

// UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPolicies - Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
type UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPolicies struct {
	// This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
	ChildAuthAlgo []UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildAuthAlgoEnum `json:"childAuthAlgo,omitempty"`
	// This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des', 'null'
	ChildCipherAlgo []UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildCipherAlgoEnum `json:"childCipherAlgo,omitempty"`
	// The lifetime of the Phase 2 SA in seconds.
	ChildLifetime *int64 `json:"childLifetime,omitempty"`
	// This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: 'disabled','group14', 'group5', 'group2', 'group1'
	ChildPfsGroup []string `json:"childPfsGroup,omitempty"`
	// This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
	IkeAuthAlgo []UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeAuthAlgoEnum `json:"ikeAuthAlgo,omitempty"`
	// This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des'
	IkeCipherAlgo []UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeCipherAlgoEnum `json:"ikeCipherAlgo,omitempty"`
	// This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: 'group14', 'group5', 'group2', 'group1'
	IkeDiffieHellmanGroup []string `json:"ikeDiffieHellmanGroup,omitempty"`
	// The lifetime of the Phase 1 SA in seconds.
	IkeLifetime *int64 `json:"ikeLifetime,omitempty"`
	// [optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: 'prfsha256', 'prfsha1', 'prfmd5', 'default'. The 'default' option can be used to default to the Authentication algorithm.
	IkePrfAlgo []UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnum `json:"ikePrfAlgo,omitempty"`
}

type UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeers struct {
	// [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted.
	IkeVersion *UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIkeVersionEnum `json:"ikeVersion,omitempty"`
	// Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
	IpsecPolicies *UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPolicies `json:"ipsecPolicies,omitempty"`
	// One of the following available presets: 'default', 'aws', 'azure'. If this is provided, the 'ipsecPolicies' parameter is ignored.
	IpsecPoliciesPreset *string `json:"ipsecPoliciesPreset,omitempty"`
	// [optional] The local ID is used to identify the MX to the peer. This will apply to all MXs this peer applies to.
	LocalID *string `json:"localId,omitempty"`
	// The name of the VPN peer
	Name string `json:"name"`
	// A list of network tags that will connect with this peer. Use ['all'] for all networks. Use ['none'] for no networks. If not included, the default is ['all'].
	NetworkTags []string `json:"networkTags,omitempty"`
	// The list of the private subnets of the VPN peer
	PrivateSubnets []string `json:"privateSubnets"`
	// [optional] The public IP of the VPN peer
	PublicIP *string `json:"publicIp,omitempty"`
	// [optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN.
	RemoteID *string `json:"remoteId,omitempty"`
	// The shared secret with the VPN peer
	Secret string `json:"secret"`
}

type UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBody struct {
	// The list of VPN peers
	Peers []UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeers `json:"peers"`
}

type UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequest struct {
	RequestBody    UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBody `request:"mediaType=application/json"`
	OrganizationID string                                                      `pathParam:"style=simple,explode=false,name=organizationId"`
}

// UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnum - [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted.
type UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnum string

const (
	UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnumOne UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnum = "1"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnumTwo UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnum = "2"
)

func (e UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnum) ToPointer() *UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnum {
	return &e
}

func (e *UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1":
		fallthrough
	case "2":
		*e = UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnum: %v", v)
	}
}

type UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnum string

const (
	UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnumMd5    UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnum = "md5"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnumSha1   UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnum = "sha1"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnumSha256 UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnum = "sha256"
)

func (e UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnum) ToPointer() *UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnum {
	return &e
}

func (e *UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "md5":
		fallthrough
	case "sha1":
		fallthrough
	case "sha256":
		*e = UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnum: %v", v)
	}
}

type UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum string

const (
	UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnumAes128    UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum = "aes128"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnumAes192    UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum = "aes192"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnumAes256    UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum = "aes256"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnumDes       UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum = "des"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnumNull      UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum = "null"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnumTripledes UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum = "tripledes"
)

func (e UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum) ToPointer() *UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum {
	return &e
}

func (e *UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aes128":
		fallthrough
	case "aes192":
		fallthrough
	case "aes256":
		fallthrough
	case "des":
		fallthrough
	case "null":
		fallthrough
	case "tripledes":
		*e = UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum: %v", v)
	}
}

type UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnum string

const (
	UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnumMd5    UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnum = "md5"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnumSha1   UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnum = "sha1"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnumSha256 UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnum = "sha256"
)

func (e UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnum) ToPointer() *UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnum {
	return &e
}

func (e *UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "md5":
		fallthrough
	case "sha1":
		fallthrough
	case "sha256":
		*e = UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnum: %v", v)
	}
}

type UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum string

const (
	UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnumAes128    UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum = "aes128"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnumAes192    UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum = "aes192"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnumAes256    UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum = "aes256"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnumDes       UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum = "des"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnumTripledes UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum = "tripledes"
)

func (e UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum) ToPointer() *UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum {
	return &e
}

func (e *UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aes128":
		fallthrough
	case "aes192":
		fallthrough
	case "aes256":
		fallthrough
	case "des":
		fallthrough
	case "tripledes":
		*e = UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum: %v", v)
	}
}

type UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnum string

const (
	UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnumDefault   UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnum = "default"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnumPrfmd5    UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnum = "prfmd5"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnumPrfsha1   UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnum = "prfsha1"
	UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnumPrfsha256 UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnum = "prfsha256"
)

func (e UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnum) ToPointer() *UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnum {
	return &e
}

func (e *UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "default":
		fallthrough
	case "prfmd5":
		fallthrough
	case "prfsha1":
		fallthrough
	case "prfsha256":
		*e = UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnum: %v", v)
	}
}

// UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPolicies - Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
type UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPolicies struct {
	// This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
	ChildAuthAlgo []UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnum `json:"childAuthAlgo,omitempty"`
	// This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des', 'null'
	ChildCipherAlgo []UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum `json:"childCipherAlgo,omitempty"`
	// The lifetime of the Phase 2 SA in seconds.
	ChildLifetime *int64 `json:"childLifetime,omitempty"`
	// This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: 'disabled','group14', 'group5', 'group2', 'group1'
	ChildPfsGroup []string `json:"childPfsGroup,omitempty"`
	// This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
	IkeAuthAlgo []UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnum `json:"ikeAuthAlgo,omitempty"`
	// This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des'
	IkeCipherAlgo []UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum `json:"ikeCipherAlgo,omitempty"`
	// This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: 'group14', 'group5', 'group2', 'group1'
	IkeDiffieHellmanGroup []string `json:"ikeDiffieHellmanGroup,omitempty"`
	// The lifetime of the Phase 1 SA in seconds.
	IkeLifetime *int64 `json:"ikeLifetime,omitempty"`
	// [optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: 'prfsha256', 'prfsha1', 'prfmd5', 'default'. The 'default' option can be used to default to the Authentication algorithm.
	IkePrfAlgo []UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnum `json:"ikePrfAlgo,omitempty"`
}

type UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeers struct {
	// [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted.
	IkeVersion *UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnum `json:"ikeVersion,omitempty"`
	// Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
	IpsecPolicies *UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPolicies `json:"ipsecPolicies,omitempty"`
	// One of the following available presets: 'default', 'aws', 'azure'. If this is provided, the 'ipsecPolicies' parameter is ignored.
	IpsecPoliciesPreset *string `json:"ipsecPoliciesPreset,omitempty"`
	// [optional] The local ID is used to identify the MX to the peer. This will apply to all MXs this peer applies to.
	LocalID *string `json:"localId,omitempty"`
	// The name of the VPN peer
	Name *string `json:"name,omitempty"`
	// A list of network tags that will connect with this peer. Use ['all'] for all networks. Use ['none'] for no networks. If not included, the default is ['all'].
	NetworkTags []string `json:"networkTags,omitempty"`
	// The list of the private subnets of the VPN peer
	PrivateSubnets []string `json:"privateSubnets,omitempty"`
	// [optional] The public IP of the VPN peer
	PublicIP *string `json:"publicIp,omitempty"`
	// [optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN.
	RemoteID *string `json:"remoteId,omitempty"`
	// The shared secret with the VPN peer
	Secret *string `json:"secret,omitempty"`
}

// UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSON - Successful operation
type UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSON struct {
	// The list of VPN peers
	Peers []UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeers `json:"peers,omitempty"`
}

type UpdateOrganizationApplianceVPNThirdPartyVPNPeersResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONObject *UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSON
}
