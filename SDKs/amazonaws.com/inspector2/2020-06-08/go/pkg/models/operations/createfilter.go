// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateFilterRequestBodyActionEnum - Defines the action that is to be applied to the findings that match the filter.
type CreateFilterRequestBodyActionEnum string

const (
	CreateFilterRequestBodyActionEnumNone     CreateFilterRequestBodyActionEnum = "NONE"
	CreateFilterRequestBodyActionEnumSuppress CreateFilterRequestBodyActionEnum = "SUPPRESS"
)

func (e CreateFilterRequestBodyActionEnum) ToPointer() *CreateFilterRequestBodyActionEnum {
	return &e
}

func (e *CreateFilterRequestBodyActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NONE":
		fallthrough
	case "SUPPRESS":
		*e = CreateFilterRequestBodyActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateFilterRequestBodyActionEnum: %v", v)
	}
}

// CreateFilterRequestBodyFilterCriteria - Details on the criteria used to define the filter.
type CreateFilterRequestBodyFilterCriteria struct {
	AwsAccountID                   []shared.StringFilter    `json:"awsAccountId,omitempty"`
	ComponentID                    []shared.StringFilter    `json:"componentId,omitempty"`
	ComponentType                  []shared.StringFilter    `json:"componentType,omitempty"`
	Ec2InstanceImageID             []shared.StringFilter    `json:"ec2InstanceImageId,omitempty"`
	Ec2InstanceSubnetID            []shared.StringFilter    `json:"ec2InstanceSubnetId,omitempty"`
	Ec2InstanceVpcID               []shared.StringFilter    `json:"ec2InstanceVpcId,omitempty"`
	EcrImageArchitecture           []shared.StringFilter    `json:"ecrImageArchitecture,omitempty"`
	EcrImageHash                   []shared.StringFilter    `json:"ecrImageHash,omitempty"`
	EcrImagePushedAt               []shared.DateFilter      `json:"ecrImagePushedAt,omitempty"`
	EcrImageRegistry               []shared.StringFilter    `json:"ecrImageRegistry,omitempty"`
	EcrImageRepositoryName         []shared.StringFilter    `json:"ecrImageRepositoryName,omitempty"`
	EcrImageTags                   []shared.StringFilter    `json:"ecrImageTags,omitempty"`
	ExploitAvailable               []shared.StringFilter    `json:"exploitAvailable,omitempty"`
	FindingArn                     []shared.StringFilter    `json:"findingArn,omitempty"`
	FindingStatus                  []shared.StringFilter    `json:"findingStatus,omitempty"`
	FindingType                    []shared.StringFilter    `json:"findingType,omitempty"`
	FirstObservedAt                []shared.DateFilter      `json:"firstObservedAt,omitempty"`
	FixAvailable                   []shared.StringFilter    `json:"fixAvailable,omitempty"`
	InspectorScore                 []shared.NumberFilter    `json:"inspectorScore,omitempty"`
	LambdaFunctionExecutionRoleArn []shared.StringFilter    `json:"lambdaFunctionExecutionRoleArn,omitempty"`
	LambdaFunctionLastModifiedAt   []shared.DateFilter      `json:"lambdaFunctionLastModifiedAt,omitempty"`
	LambdaFunctionLayers           []shared.StringFilter    `json:"lambdaFunctionLayers,omitempty"`
	LambdaFunctionName             []shared.StringFilter    `json:"lambdaFunctionName,omitempty"`
	LambdaFunctionRuntime          []shared.StringFilter    `json:"lambdaFunctionRuntime,omitempty"`
	LastObservedAt                 []shared.DateFilter      `json:"lastObservedAt,omitempty"`
	NetworkProtocol                []shared.StringFilter    `json:"networkProtocol,omitempty"`
	PortRange                      []shared.PortRangeFilter `json:"portRange,omitempty"`
	RelatedVulnerabilities         []shared.StringFilter    `json:"relatedVulnerabilities,omitempty"`
	ResourceID                     []shared.StringFilter    `json:"resourceId,omitempty"`
	ResourceTags                   []shared.MapFilter       `json:"resourceTags,omitempty"`
	ResourceType                   []shared.StringFilter    `json:"resourceType,omitempty"`
	Severity                       []shared.StringFilter    `json:"severity,omitempty"`
	Title                          []shared.StringFilter    `json:"title,omitempty"`
	UpdatedAt                      []shared.DateFilter      `json:"updatedAt,omitempty"`
	VendorSeverity                 []shared.StringFilter    `json:"vendorSeverity,omitempty"`
	VulnerabilityID                []shared.StringFilter    `json:"vulnerabilityId,omitempty"`
	VulnerabilitySource            []shared.StringFilter    `json:"vulnerabilitySource,omitempty"`
	VulnerablePackages             []shared.PackageFilter   `json:"vulnerablePackages,omitempty"`
}

type CreateFilterRequestBody struct {
	// Defines the action that is to be applied to the findings that match the filter.
	Action CreateFilterRequestBodyActionEnum `json:"action"`
	// A description of the filter.
	Description *string `json:"description,omitempty"`
	// Details on the criteria used to define the filter.
	FilterCriteria CreateFilterRequestBodyFilterCriteria `json:"filterCriteria"`
	// The name of the filter. Minimum length of 3. Maximum length of 64. Valid characters include alphanumeric characters, dot (.), underscore (_), and dash (-). Spaces are not allowed.
	Name string `json:"name"`
	// The reason for creating the filter.
	Reason *string `json:"reason,omitempty"`
	// A list of tags for the filter.
	Tags map[string]string `json:"tags,omitempty"`
}

type CreateFilterRequest struct {
	RequestBody       CreateFilterRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type CreateFilterResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// BadRequestException
	BadRequestException interface{}
	ContentType         string
	// Success
	CreateFilterResponse *shared.CreateFilterResponse
	// InternalServerException
	InternalServerException interface{}
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	StatusCode                    int
	RawResponse                   *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
