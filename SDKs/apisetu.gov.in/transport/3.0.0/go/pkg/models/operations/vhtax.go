// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type VhtaxSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type VhtaxRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Aadhaar number
	UID string `json:"UID"`
	// Chassis No
	ChasisNo string `json:"chasis_no"`
	// Vehicle Registration No
	RegNo string `json:"reg_no"`
	// Son / Wife / Daughter of
	SwdName string `json:"swd_name"`
}

// VhtaxRequestBodyFormatEnum - The format of the certificate in response.
type VhtaxRequestBodyFormatEnum string

const (
	VhtaxRequestBodyFormatEnumPdf VhtaxRequestBodyFormatEnum = "pdf"
)

func (e VhtaxRequestBodyFormatEnum) ToPointer() *VhtaxRequestBodyFormatEnum {
	return &e
}

func (e *VhtaxRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = VhtaxRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VhtaxRequestBodyFormatEnum: %v", v)
	}
}

// VhtaxRequestBody - Request format
type VhtaxRequestBody struct {
	CertificateParameters *VhtaxRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format VhtaxRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Vhtax504ApplicationJSONErrorEnum string

const (
	Vhtax504ApplicationJSONErrorEnumGatewayTimeout Vhtax504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Vhtax504ApplicationJSONErrorEnum) ToPointer() *Vhtax504ApplicationJSONErrorEnum {
	return &e
}

func (e *Vhtax504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Vhtax504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vhtax504ApplicationJSONErrorEnum: %v", v)
	}
}

type Vhtax504ApplicationJSONErrorDescriptionEnum string

const (
	Vhtax504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Vhtax504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Vhtax504ApplicationJSONErrorDescriptionEnum) ToPointer() *Vhtax504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Vhtax504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Vhtax504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vhtax504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Vhtax504ApplicationJSON - Gateway timeout
type Vhtax504ApplicationJSON struct {
	Error            *Vhtax504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vhtax504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vhtax503ApplicationJSONErrorEnum string

const (
	Vhtax503ApplicationJSONErrorEnumServiceUnavailable Vhtax503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Vhtax503ApplicationJSONErrorEnum) ToPointer() *Vhtax503ApplicationJSONErrorEnum {
	return &e
}

func (e *Vhtax503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Vhtax503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vhtax503ApplicationJSONErrorEnum: %v", v)
	}
}

type Vhtax503ApplicationJSONErrorDescriptionEnum string

const (
	Vhtax503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Vhtax503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Vhtax503ApplicationJSONErrorDescriptionEnum) ToPointer() *Vhtax503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Vhtax503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Vhtax503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vhtax503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Vhtax503ApplicationJSON - Service unavailable
type Vhtax503ApplicationJSON struct {
	Error            *Vhtax503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vhtax503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vhtax502ApplicationJSONErrorEnum string

const (
	Vhtax502ApplicationJSONErrorEnumBadGatewy Vhtax502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Vhtax502ApplicationJSONErrorEnum) ToPointer() *Vhtax502ApplicationJSONErrorEnum {
	return &e
}

func (e *Vhtax502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Vhtax502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vhtax502ApplicationJSONErrorEnum: %v", v)
	}
}

type Vhtax502ApplicationJSONErrorDescriptionEnum string

const (
	Vhtax502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Vhtax502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Vhtax502ApplicationJSONErrorDescriptionEnum) ToPointer() *Vhtax502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Vhtax502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Vhtax502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vhtax502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Vhtax502ApplicationJSON - Bad gateway
type Vhtax502ApplicationJSON struct {
	Error            *Vhtax502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vhtax502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vhtax500ApplicationJSONErrorEnum string

const (
	Vhtax500ApplicationJSONErrorEnumInternalServerError Vhtax500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Vhtax500ApplicationJSONErrorEnum) ToPointer() *Vhtax500ApplicationJSONErrorEnum {
	return &e
}

func (e *Vhtax500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Vhtax500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vhtax500ApplicationJSONErrorEnum: %v", v)
	}
}

type Vhtax500ApplicationJSONErrorDescriptionEnum string

const (
	Vhtax500ApplicationJSONErrorDescriptionEnumInternalServerError Vhtax500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Vhtax500ApplicationJSONErrorDescriptionEnum) ToPointer() *Vhtax500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Vhtax500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Vhtax500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vhtax500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Vhtax500ApplicationJSON - Internal server error
type Vhtax500ApplicationJSON struct {
	Error            *Vhtax500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vhtax500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vhtax404ApplicationJSONErrorEnum string

const (
	Vhtax404ApplicationJSONErrorEnumRecordNotFound Vhtax404ApplicationJSONErrorEnum = "record_not_found"
	Vhtax404ApplicationJSONErrorEnumURLNotFound    Vhtax404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Vhtax404ApplicationJSONErrorEnum) ToPointer() *Vhtax404ApplicationJSONErrorEnum {
	return &e
}

func (e *Vhtax404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Vhtax404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vhtax404ApplicationJSONErrorEnum: %v", v)
	}
}

type Vhtax404ApplicationJSONErrorDescriptionEnum string

const (
	Vhtax404ApplicationJSONErrorDescriptionEnumNoRecordFound               Vhtax404ApplicationJSONErrorDescriptionEnum = "No record found"
	Vhtax404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Vhtax404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Vhtax404ApplicationJSONErrorDescriptionEnum) ToPointer() *Vhtax404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Vhtax404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Vhtax404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vhtax404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Vhtax404ApplicationJSON - No record found
type Vhtax404ApplicationJSON struct {
	Error            *Vhtax404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vhtax404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vhtax401ApplicationJSONErrorEnum string

const (
	Vhtax401ApplicationJSONErrorEnumInvalidAuthentication Vhtax401ApplicationJSONErrorEnum = "invalid_authentication"
	Vhtax401ApplicationJSONErrorEnumInvalidAuthorization  Vhtax401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Vhtax401ApplicationJSONErrorEnum) ToPointer() *Vhtax401ApplicationJSONErrorEnum {
	return &e
}

func (e *Vhtax401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Vhtax401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vhtax401ApplicationJSONErrorEnum: %v", v)
	}
}

type Vhtax401ApplicationJSONErrorDescriptionEnum string

const (
	Vhtax401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Vhtax401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Vhtax401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Vhtax401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Vhtax401ApplicationJSONErrorDescriptionEnum) ToPointer() *Vhtax401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Vhtax401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Vhtax401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vhtax401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Vhtax401ApplicationJSON - Unauthorized access
type Vhtax401ApplicationJSON struct {
	Error            *Vhtax401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vhtax401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vhtax400ApplicationJSONErrorEnum string

const (
	Vhtax400ApplicationJSONErrorEnumMissingParameter Vhtax400ApplicationJSONErrorEnum = "missing_parameter"
	Vhtax400ApplicationJSONErrorEnumInvalidParameter Vhtax400ApplicationJSONErrorEnum = "invalid_parameter"
	Vhtax400ApplicationJSONErrorEnumInvalidFormat    Vhtax400ApplicationJSONErrorEnum = "invalid_format"
	Vhtax400ApplicationJSONErrorEnumInvalidTxnid     Vhtax400ApplicationJSONErrorEnum = "invalid_txnid"
	Vhtax400ApplicationJSONErrorEnumInvalidConsentid Vhtax400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Vhtax400ApplicationJSONErrorEnum) ToPointer() *Vhtax400ApplicationJSONErrorEnum {
	return &e
}

func (e *Vhtax400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Vhtax400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vhtax400ApplicationJSONErrorEnum: %v", v)
	}
}

type Vhtax400ApplicationJSONErrorDescriptionEnum string

const (
	Vhtax400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Vhtax400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Vhtax400ApplicationJSONErrorDescriptionEnumBadRequest                              Vhtax400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Vhtax400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Vhtax400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Vhtax400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Vhtax400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Vhtax400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Vhtax400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Vhtax400ApplicationJSONErrorDescriptionEnum) ToPointer() *Vhtax400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Vhtax400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Vhtax400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vhtax400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Vhtax400ApplicationJSON - Bad request
type Vhtax400ApplicationJSON struct {
	Error            *Vhtax400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vhtax400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type VhtaxResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Vhtax400ApplicationJSONObject *Vhtax400ApplicationJSON
	// Unauthorized access
	Vhtax401ApplicationJSONObject *Vhtax401ApplicationJSON
	// No record found
	Vhtax404ApplicationJSONObject *Vhtax404ApplicationJSON
	// Internal server error
	Vhtax500ApplicationJSONObject *Vhtax500ApplicationJSON
	// Bad gateway
	Vhtax502ApplicationJSONObject *Vhtax502ApplicationJSON
	// Service unavailable
	Vhtax503ApplicationJSONObject *Vhtax503ApplicationJSON
	// Gateway timeout
	Vhtax504ApplicationJSONObject *Vhtax504ApplicationJSON
}
