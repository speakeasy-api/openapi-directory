/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Users {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete the user
   */
  deleteRealmUsersId(
    req: operations.DeleteRealmUsersIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRealmUsersIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteRealmUsersIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{realm}/users/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRealmUsersIdResponse =
        new operations.DeleteRealmUsersIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Revoke consent and offline tokens for particular client from user
   */
  deleteRealmUsersIdConsentsClient(
    req: operations.DeleteRealmUsersIdConsentsClientRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRealmUsersIdConsentsClientResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteRealmUsersIdConsentsClientRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/users/{id}/consents/{client}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRealmUsersIdConsentsClientResponse =
        new operations.DeleteRealmUsersIdConsentsClientResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Remove a credential for a user
   */
  deleteRealmUsersIdCredentialsCredentialId(
    req: operations.DeleteRealmUsersIdCredentialsCredentialIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRealmUsersIdCredentialsCredentialIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteRealmUsersIdCredentialsCredentialIdRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/users/{id}/credentials/{credentialId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRealmUsersIdCredentialsCredentialIdResponse =
        new operations.DeleteRealmUsersIdCredentialsCredentialIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Remove a social login provider from user
   */
  deleteRealmUsersIdFederatedIdentityProvider(
    req: operations.DeleteRealmUsersIdFederatedIdentityProviderRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRealmUsersIdFederatedIdentityProviderResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteRealmUsersIdFederatedIdentityProviderRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/users/{id}/federated-identity/{provider}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRealmUsersIdFederatedIdentityProviderResponse =
        new operations.DeleteRealmUsersIdFederatedIdentityProviderResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  deleteRealmUsersIdGroupsGroupId(
    req: operations.DeleteRealmUsersIdGroupsGroupIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRealmUsersIdGroupsGroupIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteRealmUsersIdGroupsGroupIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/users/{id}/groups/{groupId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRealmUsersIdGroupsGroupIdResponse =
        new operations.DeleteRealmUsersIdGroupsGroupIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Get users   Returns a list of users, filtered according to query parameters
   */
  getRealmUsers(
    req: operations.GetRealmUsersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmUsersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmUsersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{realm}/users", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmUsersResponse =
        new operations.GetRealmUsersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.userRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.UserRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the number of users that match the given criteria.
   */
  getRealmUsersCount(
    req: operations.GetRealmUsersCountRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmUsersCountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmUsersCountRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{realm}/users/count", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmUsersCountResponse =
        new operations.GetRealmUsersCountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRealmUsersCount2XXApplicationJSONInt32Integer =
              httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get representation of the user
   */
  getRealmUsersId(
    req: operations.GetRealmUsersIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmUsersIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmUsersIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{realm}/users/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmUsersIdResponse =
        new operations.GetRealmUsersIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userRepresentation = utils.objectToClass(
              httpRes?.data,
              shared.UserRepresentation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Return credential types, which are provided by the user storage where user is stored.
   */
  getRealmUsersIdConfiguredUserStorageCredentialTypes(
    req: operations.GetRealmUsersIdConfiguredUserStorageCredentialTypesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmUsersIdConfiguredUserStorageCredentialTypesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetRealmUsersIdConfiguredUserStorageCredentialTypesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/users/{id}/configured-user-storage-credential-types",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmUsersIdConfiguredUserStorageCredentialTypesResponse =
        new operations.GetRealmUsersIdConfiguredUserStorageCredentialTypesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRealmUsersIdConfiguredUserStorageCredentialTypes2XXApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get consents granted by the user
   */
  getRealmUsersIdConsents(
    req: operations.GetRealmUsersIdConsentsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmUsersIdConsentsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmUsersIdConsentsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/users/{id}/consents",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmUsersIdConsentsResponse =
        new operations.GetRealmUsersIdConsentsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRealmUsersIdConsents2XXApplicationJSONObjects =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  getRealmUsersIdCredentials(
    req: operations.GetRealmUsersIdCredentialsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmUsersIdCredentialsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmUsersIdCredentialsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/users/{id}/credentials",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmUsersIdCredentialsResponse =
        new operations.GetRealmUsersIdCredentialsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.credentialRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.credentialRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.CredentialRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get social logins associated with the user
   */
  getRealmUsersIdFederatedIdentity(
    req: operations.GetRealmUsersIdFederatedIdentityRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmUsersIdFederatedIdentityResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmUsersIdFederatedIdentityRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/users/{id}/federated-identity",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmUsersIdFederatedIdentityResponse =
        new operations.GetRealmUsersIdFederatedIdentityResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.federatedIdentityRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.federatedIdentityRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.FederatedIdentityRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  getRealmUsersIdGroups(
    req: operations.GetRealmUsersIdGroupsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmUsersIdGroupsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmUsersIdGroupsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/users/{id}/groups",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmUsersIdGroupsResponse =
        new operations.GetRealmUsersIdGroupsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.groupRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.groupRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.GroupRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  getRealmUsersIdGroupsCount(
    req: operations.GetRealmUsersIdGroupsCountRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmUsersIdGroupsCountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmUsersIdGroupsCountRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/users/{id}/groups/count",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmUsersIdGroupsCountResponse =
        new operations.GetRealmUsersIdGroupsCountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRealmUsersIdGroupsCount2XXApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get offline sessions associated with the user and client
   */
  getRealmUsersIdOfflineSessionsClientId(
    req: operations.GetRealmUsersIdOfflineSessionsClientIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmUsersIdOfflineSessionsClientIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmUsersIdOfflineSessionsClientIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/users/{id}/offline-sessions/{clientId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmUsersIdOfflineSessionsClientIdResponse =
        new operations.GetRealmUsersIdOfflineSessionsClientIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userSessionRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.userSessionRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.UserSessionRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get sessions associated with the user
   */
  getRealmUsersIdSessions(
    req: operations.GetRealmUsersIdSessionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmUsersIdSessionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmUsersIdSessionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/users/{id}/sessions",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmUsersIdSessionsResponse =
        new operations.GetRealmUsersIdSessionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userSessionRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.userSessionRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.UserSessionRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a new user   Username must be unique.
   */
  postRealmUsers(
    req: operations.PostRealmUsersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRealmUsersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostRealmUsersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{realm}/users", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "userRepresentation",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRealmUsersResponse =
        new operations.PostRealmUsersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Move a credential to a position behind another credential
   */
  postRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialId(
    req: operations.PostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/users/{id}/credentials/{credentialId}/moveAfter/{newPreviousCredentialId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse =
        new operations.PostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Move a credential to a first position in the credentials list of the user
   */
  postRealmUsersIdCredentialsCredentialIdMoveToFirst(
    req: operations.PostRealmUsersIdCredentialsCredentialIdMoveToFirstRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRealmUsersIdCredentialsCredentialIdMoveToFirstResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostRealmUsersIdCredentialsCredentialIdMoveToFirstRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/users/{id}/credentials/{credentialId}/moveToFirst",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRealmUsersIdCredentialsCredentialIdMoveToFirstResponse =
        new operations.PostRealmUsersIdCredentialsCredentialIdMoveToFirstResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Add a social login provider to the user
   */
  postRealmUsersIdFederatedIdentityProvider(
    req: operations.PostRealmUsersIdFederatedIdentityProviderRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRealmUsersIdFederatedIdentityProviderResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostRealmUsersIdFederatedIdentityProviderRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/users/{id}/federated-identity/{provider}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "federatedIdentityRepresentation",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRealmUsersIdFederatedIdentityProviderResponse =
        new operations.PostRealmUsersIdFederatedIdentityProviderResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Impersonate the user
   */
  postRealmUsersIdImpersonation(
    req: operations.PostRealmUsersIdImpersonationRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRealmUsersIdImpersonationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostRealmUsersIdImpersonationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/users/{id}/impersonation",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRealmUsersIdImpersonationResponse =
        new operations.PostRealmUsersIdImpersonationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postRealmUsersIdImpersonation2XXApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove all user sessions associated with the user   Also send notification to all clients that have an admin URL to invalidate the sessions for the particular user.
   */
  postRealmUsersIdLogout(
    req: operations.PostRealmUsersIdLogoutRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRealmUsersIdLogoutResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostRealmUsersIdLogoutRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/users/{id}/logout",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRealmUsersIdLogoutResponse =
        new operations.PostRealmUsersIdLogoutResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Update the user
   */
  putRealmUsersId(
    req: operations.PutRealmUsersIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutRealmUsersIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutRealmUsersIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{realm}/users/{id}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "userRepresentation",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutRealmUsersIdResponse =
        new operations.PutRealmUsersIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Update a credential label for a user
   */
  putRealmUsersIdCredentialsCredentialIdUserLabel(
    req: operations.PutRealmUsersIdCredentialsCredentialIdUserLabelRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutRealmUsersIdCredentialsCredentialIdUserLabelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PutRealmUsersIdCredentialsCredentialIdUserLabelRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/users/{id}/credentials/{credentialId}/userLabel",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "string"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutRealmUsersIdCredentialsCredentialIdUserLabelResponse =
        new operations.PutRealmUsersIdCredentialsCredentialIdUserLabelResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Disable all credentials for a user of a specific type
   */
  putRealmUsersIdDisableCredentialTypes(
    req: operations.PutRealmUsersIdDisableCredentialTypesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutRealmUsersIdDisableCredentialTypesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutRealmUsersIdDisableCredentialTypesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/users/{id}/disable-credential-types",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutRealmUsersIdDisableCredentialTypesResponse =
        new operations.PutRealmUsersIdDisableCredentialTypesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Send a update account email to the user   An email contains a link the user can click to perform a set of required actions.
   */
  putRealmUsersIdExecuteActionsEmail(
    req: operations.PutRealmUsersIdExecuteActionsEmailRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutRealmUsersIdExecuteActionsEmailResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutRealmUsersIdExecuteActionsEmailRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/users/{id}/execute-actions-email",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutRealmUsersIdExecuteActionsEmailResponse =
        new operations.PutRealmUsersIdExecuteActionsEmailResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  putRealmUsersIdGroupsGroupId(
    req: operations.PutRealmUsersIdGroupsGroupIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutRealmUsersIdGroupsGroupIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutRealmUsersIdGroupsGroupIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/users/{id}/groups/{groupId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutRealmUsersIdGroupsGroupIdResponse =
        new operations.PutRealmUsersIdGroupsGroupIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Set up a new password for the user.
   */
  putRealmUsersIdResetPassword(
    req: operations.PutRealmUsersIdResetPasswordRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutRealmUsersIdResetPasswordResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutRealmUsersIdResetPasswordRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/users/{id}/reset-password",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "credentialRepresentation",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutRealmUsersIdResetPasswordResponse =
        new operations.PutRealmUsersIdResetPasswordResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Send an email-verification email to the user   An email contains a link the user can click to verify their email address.
   */
  putRealmUsersIdSendVerifyEmail(
    req: operations.PutRealmUsersIdSendVerifyEmailRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutRealmUsersIdSendVerifyEmailResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutRealmUsersIdSendVerifyEmailRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/users/{id}/send-verify-email",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutRealmUsersIdSendVerifyEmailResponse =
        new operations.PutRealmUsersIdSendVerifyEmailResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }
}
