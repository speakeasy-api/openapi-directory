/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class UpdateCompositionHookUpdateCompositionHookRequest {
    /**
     * An array of track names from the same group room to merge into the compositions created by the composition hook. Can include zero or more track names. A composition triggered by the composition hook includes all audio sources specified in `audio_sources` except those specified in `audio_sources_excluded`. The track names in this parameter can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, `student*` includes tracks named `student` as well as `studentTeam`.
     */
    @SpeakeasyMetadata("form:name=AudioSources")
    public String[] audioSources;

    public UpdateCompositionHookUpdateCompositionHookRequest withAudioSources(String[] audioSources) {
        this.audioSources = audioSources;
        return this;
    }
    
    /**
     * An array of track names to exclude. A composition triggered by the composition hook includes all audio sources specified in `audio_sources` except for those specified in `audio_sources_excluded`. The track names in this parameter can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, `student*` excludes `student` as well as `studentTeam`. This parameter can also be empty.
     */
    @SpeakeasyMetadata("form:name=AudioSourcesExcluded")
    public String[] audioSourcesExcluded;

    public UpdateCompositionHookUpdateCompositionHookRequest withAudioSourcesExcluded(String[] audioSourcesExcluded) {
        this.audioSourcesExcluded = audioSourcesExcluded;
        return this;
    }
    
    /**
     * Whether the composition hook is active. When `true`, the composition hook will be triggered for every completed Group Room in the account. When `false`, the composition hook never triggers.
     */
    @SpeakeasyMetadata("form:name=Enabled")
    public Boolean enabled;

    public UpdateCompositionHookUpdateCompositionHookRequest withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }
    
    @SpeakeasyMetadata("form:name=Format")
    public org.openapis.openapi.models.shared.CompositionHookEnumFormatEnum format;

    public UpdateCompositionHookUpdateCompositionHookRequest withFormat(org.openapis.openapi.models.shared.CompositionHookEnumFormatEnum format) {
        this.format = format;
        return this;
    }
    
    /**
     * A descriptive string that you create to describe the resource. It can be up to  100 characters long and it must be unique within the account.
     */
    @SpeakeasyMetadata("form:name=FriendlyName")
    public String friendlyName;

    public UpdateCompositionHookUpdateCompositionHookRequest withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }
    
    /**
     * A string that describes the columns (width) and rows (height) of the generated composed video in pixels. Defaults to `640x480`. 
     * The string's format is `{width}x{height}` where: 
     * 
     * * 16 &lt;= `{width}` &lt;= 1280
     * * 16 &lt;= `{height}` &lt;= 1280
     * * `{width}` * `{height}` &lt;= 921,600
     * 
     * Typical values are: 
     * 
     * * HD = `1280x720`
     * * PAL = `1024x576`
     * * VGA = `640x480`
     * * CIF = `320x240`
     * 
     * Note that the `resolution` imposes an aspect ratio to the resulting composition. When the original video tracks are constrained by the aspect ratio, they are scaled to fit. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
     */
    @SpeakeasyMetadata("form:name=Resolution")
    public String resolution;

    public UpdateCompositionHookUpdateCompositionHookRequest withResolution(String resolution) {
        this.resolution = resolution;
        return this;
    }
    
    /**
     * The URL we should call using the `status_callback_method` to send status information to your application on every composition event. If not provided, status callback events will not be dispatched.
     */
    @SpeakeasyMetadata("form:name=StatusCallback")
    public String statusCallback;

    public UpdateCompositionHookUpdateCompositionHookRequest withStatusCallback(String statusCallback) {
        this.statusCallback = statusCallback;
        return this;
    }
    
    /**
     * The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`.
     */
    @SpeakeasyMetadata("form:name=StatusCallbackMethod")
    public UpdateCompositionHookUpdateCompositionHookRequestStatusCallbackMethodEnum statusCallbackMethod;

    public UpdateCompositionHookUpdateCompositionHookRequest withStatusCallbackMethod(UpdateCompositionHookUpdateCompositionHookRequestStatusCallbackMethodEnum statusCallbackMethod) {
        this.statusCallbackMethod = statusCallbackMethod;
        return this;
    }
    
    /**
     * Whether to clip the intervals where there is no active media in the compositions triggered by the composition hook. The default is `true`. Compositions with `trim` enabled are shorter when the Room is created and no Participant joins for a while as well as if all the Participants leave the room and join later, because those gaps will be removed. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
     */
    @SpeakeasyMetadata("form:name=Trim")
    public Boolean trim;

    public UpdateCompositionHookUpdateCompositionHookRequest withTrim(Boolean trim) {
        this.trim = trim;
        return this;
    }
    
    /**
     * A JSON object that describes the video layout of the composition hook in terms of regions. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
     */
    @SpeakeasyMetadata("form:name=VideoLayout")
    public Object videoLayout;

    public UpdateCompositionHookUpdateCompositionHookRequest withVideoLayout(Object videoLayout) {
        this.videoLayout = videoLayout;
        return this;
    }
    
    public UpdateCompositionHookUpdateCompositionHookRequest(@JsonProperty("FriendlyName") String friendlyName) {
        this.friendlyName = friendlyName;
  }
}
