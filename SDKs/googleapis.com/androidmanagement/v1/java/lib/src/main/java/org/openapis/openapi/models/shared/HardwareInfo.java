/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * HardwareInfo - Information about device hardware. The fields related to temperature thresholds are only available if hardwareStatusEnabled is true in the device's policy.
 */
public class HardwareInfo {
    /**
     * Battery shutdown temperature thresholds in Celsius for each battery on the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("batteryShutdownTemperatures")
    public Float[] batteryShutdownTemperatures;
    public HardwareInfo withBatteryShutdownTemperatures(Float[] batteryShutdownTemperatures) {
        this.batteryShutdownTemperatures = batteryShutdownTemperatures;
        return this;
    }
    
    /**
     * Battery throttling temperature thresholds in Celsius for each battery on the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("batteryThrottlingTemperatures")
    public Float[] batteryThrottlingTemperatures;
    public HardwareInfo withBatteryThrottlingTemperatures(Float[] batteryThrottlingTemperatures) {
        this.batteryThrottlingTemperatures = batteryThrottlingTemperatures;
        return this;
    }
    
    /**
     * Brand of the device. For example, Google.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("brand")
    public String brand;
    public HardwareInfo withBrand(String brand) {
        this.brand = brand;
        return this;
    }
    
    /**
     * CPU shutdown temperature thresholds in Celsius for each CPU on the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cpuShutdownTemperatures")
    public Float[] cpuShutdownTemperatures;
    public HardwareInfo withCpuShutdownTemperatures(Float[] cpuShutdownTemperatures) {
        this.cpuShutdownTemperatures = cpuShutdownTemperatures;
        return this;
    }
    
    /**
     * CPU throttling temperature thresholds in Celsius for each CPU on the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cpuThrottlingTemperatures")
    public Float[] cpuThrottlingTemperatures;
    public HardwareInfo withCpuThrottlingTemperatures(Float[] cpuThrottlingTemperatures) {
        this.cpuThrottlingTemperatures = cpuThrottlingTemperatures;
        return this;
    }
    
    /**
     * Baseband version. For example, MDM9625_104662.22.05.34p.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deviceBasebandVersion")
    public String deviceBasebandVersion;
    public HardwareInfo withDeviceBasebandVersion(String deviceBasebandVersion) {
        this.deviceBasebandVersion = deviceBasebandVersion;
        return this;
    }
    
    /**
     * Output only. ID that uniquely identifies a personally-owned device in a particular organization. On the same physical device when enrolled with the same organization, this ID persists across setups and even factory resets. This ID is available on personally-owned devices with a work profile on devices running Android 12 and above.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enterpriseSpecificId")
    public String enterpriseSpecificId;
    public HardwareInfo withEnterpriseSpecificId(String enterpriseSpecificId) {
        this.enterpriseSpecificId = enterpriseSpecificId;
        return this;
    }
    
    /**
     * GPU shutdown temperature thresholds in Celsius for each GPU on the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gpuShutdownTemperatures")
    public Float[] gpuShutdownTemperatures;
    public HardwareInfo withGpuShutdownTemperatures(Float[] gpuShutdownTemperatures) {
        this.gpuShutdownTemperatures = gpuShutdownTemperatures;
        return this;
    }
    
    /**
     * GPU throttling temperature thresholds in Celsius for each GPU on the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gpuThrottlingTemperatures")
    public Float[] gpuThrottlingTemperatures;
    public HardwareInfo withGpuThrottlingTemperatures(Float[] gpuThrottlingTemperatures) {
        this.gpuThrottlingTemperatures = gpuThrottlingTemperatures;
        return this;
    }
    
    /**
     * Name of the hardware. For example, Angler.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hardware")
    public String hardware;
    public HardwareInfo withHardware(String hardware) {
        this.hardware = hardware;
        return this;
    }
    
    /**
     * Manufacturer. For example, Motorola.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manufacturer")
    public String manufacturer;
    public HardwareInfo withManufacturer(String manufacturer) {
        this.manufacturer = manufacturer;
        return this;
    }
    
    /**
     * The model of the device. For example, Asus Nexus 7.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("model")
    public String model;
    public HardwareInfo withModel(String model) {
        this.model = model;
        return this;
    }
    
    /**
     * The device serial number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serialNumber")
    public String serialNumber;
    public HardwareInfo withSerialNumber(String serialNumber) {
        this.serialNumber = serialNumber;
        return this;
    }
    
    /**
     * Device skin shutdown temperature thresholds in Celsius.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skinShutdownTemperatures")
    public Float[] skinShutdownTemperatures;
    public HardwareInfo withSkinShutdownTemperatures(Float[] skinShutdownTemperatures) {
        this.skinShutdownTemperatures = skinShutdownTemperatures;
        return this;
    }
    
    /**
     * Device skin throttling temperature thresholds in Celsius.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skinThrottlingTemperatures")
    public Float[] skinThrottlingTemperatures;
    public HardwareInfo withSkinThrottlingTemperatures(Float[] skinThrottlingTemperatures) {
        this.skinThrottlingTemperatures = skinThrottlingTemperatures;
        return this;
    }
    
}
