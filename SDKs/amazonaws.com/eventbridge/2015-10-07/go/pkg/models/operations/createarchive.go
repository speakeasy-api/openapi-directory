// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateArchiveXAmzTargetEnum
type CreateArchiveXAmzTargetEnum string

const (
	CreateArchiveXAmzTargetEnumAwsEventsCreateArchive CreateArchiveXAmzTargetEnum = "AWSEvents.CreateArchive"
)

func (e CreateArchiveXAmzTargetEnum) ToPointer() *CreateArchiveXAmzTargetEnum {
	return &e
}

func (e *CreateArchiveXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSEvents.CreateArchive":
		*e = CreateArchiveXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateArchiveXAmzTargetEnum: %v", v)
	}
}

type CreateArchiveRequest struct {
	CreateArchiveRequest shared.CreateArchiveRequest `request:"mediaType=application/json"`
	XAmzAlgorithm        *string                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256    *string                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential       *string                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate             *string                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken    *string                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature        *string                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders    *string                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget           CreateArchiveXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateArchiveResponse struct {
	// ConcurrentModificationException
	ConcurrentModificationException interface{}
	ContentType                     string
	// Success
	CreateArchiveResponse *shared.CreateArchiveResponse
	// InternalException
	InternalException interface{}
	// InvalidEventPatternException
	InvalidEventPatternException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
}
