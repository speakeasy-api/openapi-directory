// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type VmxNetworkDevicesClaimPathParams struct {
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
}

// VmxNetworkDevicesClaimRequestBodySizeEnum - The size of the vMX you claim. It can be one of: small, medium, large, 100
type VmxNetworkDevicesClaimRequestBodySizeEnum string

const (
	VmxNetworkDevicesClaimRequestBodySizeEnumOneHundred VmxNetworkDevicesClaimRequestBodySizeEnum = "100"
	VmxNetworkDevicesClaimRequestBodySizeEnumLarge      VmxNetworkDevicesClaimRequestBodySizeEnum = "large"
	VmxNetworkDevicesClaimRequestBodySizeEnumMedium     VmxNetworkDevicesClaimRequestBodySizeEnum = "medium"
	VmxNetworkDevicesClaimRequestBodySizeEnumSmall      VmxNetworkDevicesClaimRequestBodySizeEnum = "small"
)

func (e *VmxNetworkDevicesClaimRequestBodySizeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "100":
		fallthrough
	case "large":
		fallthrough
	case "medium":
		fallthrough
	case "small":
		*e = VmxNetworkDevicesClaimRequestBodySizeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VmxNetworkDevicesClaimRequestBodySizeEnum: %s", s)
	}
}

type VmxNetworkDevicesClaimRequestBody struct {
	// The size of the vMX you claim. It can be one of: small, medium, large, 100
	Size VmxNetworkDevicesClaimRequestBodySizeEnum `json:"size"`
}

type VmxNetworkDevicesClaimRequest struct {
	PathParams VmxNetworkDevicesClaimPathParams
	Request    VmxNetworkDevicesClaimRequestBody `request:"mediaType=application/json"`
}

type VmxNetworkDevicesClaimResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	VmxNetworkDevicesClaim200ApplicationJSONObject map[string]interface{}
}
