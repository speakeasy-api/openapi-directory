// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type BatchBatchPayloadSchemaDefaultsMethodEnum string

const (
	BatchBatchPayloadSchemaDefaultsMethodEnumGet    BatchBatchPayloadSchemaDefaultsMethodEnum = "GET"
	BatchBatchPayloadSchemaDefaultsMethodEnumHead   BatchBatchPayloadSchemaDefaultsMethodEnum = "HEAD"
	BatchBatchPayloadSchemaDefaultsMethodEnumDelete BatchBatchPayloadSchemaDefaultsMethodEnum = "DELETE"
	BatchBatchPayloadSchemaDefaultsMethodEnumTrace  BatchBatchPayloadSchemaDefaultsMethodEnum = "TRACE"
	BatchBatchPayloadSchemaDefaultsMethodEnumPost   BatchBatchPayloadSchemaDefaultsMethodEnum = "POST"
	BatchBatchPayloadSchemaDefaultsMethodEnumPut    BatchBatchPayloadSchemaDefaultsMethodEnum = "PUT"
	BatchBatchPayloadSchemaDefaultsMethodEnumPatch  BatchBatchPayloadSchemaDefaultsMethodEnum = "PATCH"
)

func (e BatchBatchPayloadSchemaDefaultsMethodEnum) ToPointer() *BatchBatchPayloadSchemaDefaultsMethodEnum {
	return &e
}

func (e *BatchBatchPayloadSchemaDefaultsMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GET":
		fallthrough
	case "HEAD":
		fallthrough
	case "DELETE":
		fallthrough
	case "TRACE":
		fallthrough
	case "POST":
		fallthrough
	case "PUT":
		fallthrough
	case "PATCH":
		*e = BatchBatchPayloadSchemaDefaultsMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchBatchPayloadSchemaDefaultsMethodEnum: %v", v)
	}
}

type BatchBatchPayloadSchemaDefaults struct {
	Body    map[string]interface{}                     `json:"body,omitempty"`
	Headers map[string]interface{}                     `json:"headers,omitempty"`
	Method  *BatchBatchPayloadSchemaDefaultsMethodEnum `json:"method,omitempty"`
	Path    *string                                    `json:"path,omitempty"`
}

type BatchBatchPayloadSchemaRequestsMethodEnum string

const (
	BatchBatchPayloadSchemaRequestsMethodEnumGet    BatchBatchPayloadSchemaRequestsMethodEnum = "GET"
	BatchBatchPayloadSchemaRequestsMethodEnumHead   BatchBatchPayloadSchemaRequestsMethodEnum = "HEAD"
	BatchBatchPayloadSchemaRequestsMethodEnumDelete BatchBatchPayloadSchemaRequestsMethodEnum = "DELETE"
	BatchBatchPayloadSchemaRequestsMethodEnumTrace  BatchBatchPayloadSchemaRequestsMethodEnum = "TRACE"
	BatchBatchPayloadSchemaRequestsMethodEnumPost   BatchBatchPayloadSchemaRequestsMethodEnum = "POST"
	BatchBatchPayloadSchemaRequestsMethodEnumPut    BatchBatchPayloadSchemaRequestsMethodEnum = "PUT"
	BatchBatchPayloadSchemaRequestsMethodEnumPatch  BatchBatchPayloadSchemaRequestsMethodEnum = "PATCH"
)

func (e BatchBatchPayloadSchemaRequestsMethodEnum) ToPointer() *BatchBatchPayloadSchemaRequestsMethodEnum {
	return &e
}

func (e *BatchBatchPayloadSchemaRequestsMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GET":
		fallthrough
	case "HEAD":
		fallthrough
	case "DELETE":
		fallthrough
	case "TRACE":
		fallthrough
	case "POST":
		fallthrough
	case "PUT":
		fallthrough
	case "PATCH":
		*e = BatchBatchPayloadSchemaRequestsMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchBatchPayloadSchemaRequestsMethodEnum: %v", v)
	}
}

type BatchBatchPayloadSchemaRequests struct {
	Body    map[string]interface{}                     `json:"body,omitempty"`
	Headers map[string]interface{}                     `json:"headers,omitempty"`
	Method  *BatchBatchPayloadSchemaRequestsMethodEnum `json:"method,omitempty"`
	Path    string                                     `json:"path"`
}

type BatchBatchPayloadSchema struct {
	Defaults *BatchBatchPayloadSchemaDefaults  `json:"defaults,omitempty"`
	Requests []BatchBatchPayloadSchemaRequests `json:"requests"`
}

// BatchErrorSchema - The request was badly formatted.
type BatchErrorSchema struct {
	Code    int64       `json:"code"`
	Details interface{} `json:"details,omitempty"`
	Errno   int64       `json:"errno"`
	Error   string      `json:"error"`
	Info    *string     `json:"info,omitempty"`
	Message *string     `json:"message,omitempty"`
}

type BatchBatchResponseBodySchemaResponses struct {
	Body    map[string]interface{} `json:"body,omitempty"`
	Headers map[string]interface{} `json:"headers,omitempty"`
	Path    string                 `json:"path"`
	Status  int64                  `json:"status"`
}

// BatchBatchResponseBodySchema - Return a list of operation responses.
type BatchBatchResponseBodySchema struct {
	Responses []BatchBatchResponseBodySchemaResponses `json:"responses"`
}

type BatchResponse struct {
	// Return a list of operation responses.
	BatchResponseBodySchema *BatchBatchResponseBodySchema
	ContentType             string
	// The request was badly formatted.
	ErrorSchema *BatchErrorSchema
	StatusCode  int
	RawResponse *http.Response
}
