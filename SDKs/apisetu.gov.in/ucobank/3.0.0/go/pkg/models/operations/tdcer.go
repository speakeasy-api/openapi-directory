// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type TdcerSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type TdcerRequestBodyCertificateParameters struct {
	// Account Number
	CustID string `json:"CustID"`
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// Financial Year
	FinYr string `json:"finYr"`
}

// TdcerRequestBodyFormatEnum - The format of the certificate in response.
type TdcerRequestBodyFormatEnum string

const (
	TdcerRequestBodyFormatEnumPdf TdcerRequestBodyFormatEnum = "pdf"
)

func (e *TdcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = TdcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TdcerRequestBodyFormatEnum: %s", s)
	}
}

// TdcerRequestBody - Request format
type TdcerRequestBody struct {
	CertificateParameters *TdcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format TdcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type TdcerRequest struct {
	// Request format
	Request  *TdcerRequestBody `request:"mediaType=application/json"`
	Security TdcerSecurity
}

type Tdcer504ApplicationJSONErrorEnum string

const (
	Tdcer504ApplicationJSONErrorEnumGatewayTimeout Tdcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Tdcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Tdcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tdcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Tdcer504ApplicationJSONErrorDescriptionEnum string

const (
	Tdcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Tdcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Tdcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Tdcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tdcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tdcer504ApplicationJSON - Gateway timeout
type Tdcer504ApplicationJSON struct {
	Error            *Tdcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tdcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tdcer503ApplicationJSONErrorEnum string

const (
	Tdcer503ApplicationJSONErrorEnumServiceUnavailable Tdcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Tdcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Tdcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tdcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Tdcer503ApplicationJSONErrorDescriptionEnum string

const (
	Tdcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Tdcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Tdcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Tdcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tdcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tdcer503ApplicationJSON - Service unavailable
type Tdcer503ApplicationJSON struct {
	Error            *Tdcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tdcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tdcer502ApplicationJSONErrorEnum string

const (
	Tdcer502ApplicationJSONErrorEnumBadGatewy Tdcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Tdcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Tdcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tdcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Tdcer502ApplicationJSONErrorDescriptionEnum string

const (
	Tdcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Tdcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Tdcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Tdcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tdcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tdcer502ApplicationJSON - Bad gateway
type Tdcer502ApplicationJSON struct {
	Error            *Tdcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tdcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tdcer500ApplicationJSONErrorEnum string

const (
	Tdcer500ApplicationJSONErrorEnumInternalServerError Tdcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Tdcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Tdcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tdcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Tdcer500ApplicationJSONErrorDescriptionEnum string

const (
	Tdcer500ApplicationJSONErrorDescriptionEnumInternalServerError Tdcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Tdcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Tdcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tdcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tdcer500ApplicationJSON - Internal server error
type Tdcer500ApplicationJSON struct {
	Error            *Tdcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tdcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tdcer404ApplicationJSONErrorEnum string

const (
	Tdcer404ApplicationJSONErrorEnumRecordNotFound Tdcer404ApplicationJSONErrorEnum = "record_not_found"
	Tdcer404ApplicationJSONErrorEnumURLNotFound    Tdcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Tdcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Tdcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tdcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Tdcer404ApplicationJSONErrorDescriptionEnum string

const (
	Tdcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Tdcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Tdcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Tdcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Tdcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Tdcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tdcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tdcer404ApplicationJSON - No record found
type Tdcer404ApplicationJSON struct {
	Error            *Tdcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tdcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tdcer401ApplicationJSONErrorEnum string

const (
	Tdcer401ApplicationJSONErrorEnumInvalidAuthentication Tdcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Tdcer401ApplicationJSONErrorEnumInvalidAuthorization  Tdcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Tdcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Tdcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tdcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Tdcer401ApplicationJSONErrorDescriptionEnum string

const (
	Tdcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Tdcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Tdcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Tdcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Tdcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Tdcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tdcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tdcer401ApplicationJSON - Unauthorized access
type Tdcer401ApplicationJSON struct {
	Error            *Tdcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tdcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tdcer400ApplicationJSONErrorEnum string

const (
	Tdcer400ApplicationJSONErrorEnumMissingParameter Tdcer400ApplicationJSONErrorEnum = "missing_parameter"
	Tdcer400ApplicationJSONErrorEnumInvalidParameter Tdcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Tdcer400ApplicationJSONErrorEnumInvalidFormat    Tdcer400ApplicationJSONErrorEnum = "invalid_format"
	Tdcer400ApplicationJSONErrorEnumInvalidTxnid     Tdcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Tdcer400ApplicationJSONErrorEnumInvalidConsentid Tdcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Tdcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Tdcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tdcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Tdcer400ApplicationJSONErrorDescriptionEnum string

const (
	Tdcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Tdcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Tdcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Tdcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Tdcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Tdcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Tdcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Tdcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Tdcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Tdcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Tdcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Tdcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tdcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tdcer400ApplicationJSON - Bad request
type Tdcer400ApplicationJSON struct {
	Error            *Tdcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tdcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type TdcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Tdcer400ApplicationJSONObject *Tdcer400ApplicationJSON
	// Unauthorized access
	Tdcer401ApplicationJSONObject *Tdcer401ApplicationJSON
	// No record found
	Tdcer404ApplicationJSONObject *Tdcer404ApplicationJSON
	// Internal server error
	Tdcer500ApplicationJSONObject *Tdcer500ApplicationJSON
	// Bad gateway
	Tdcer502ApplicationJSONObject *Tdcer502ApplicationJSON
	// Service unavailable
	Tdcer503ApplicationJSONObject *Tdcer503ApplicationJSON
	// Gateway timeout
	Tdcer504ApplicationJSONObject *Tdcer504ApplicationJSON
}
