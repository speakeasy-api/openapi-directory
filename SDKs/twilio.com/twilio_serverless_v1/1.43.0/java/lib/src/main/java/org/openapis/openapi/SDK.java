/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://serverless.twilio.com",
	};
    /**
	 * CREATE_ASSET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_ASSET_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * CREATE_BUILD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_BUILD_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * CREATE_DEPLOYMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_DEPLOYMENT_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * CREATE_ENVIRONMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_ENVIRONMENT_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * CREATE_FUNCTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_FUNCTION_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * CREATE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SERVICE_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * CREATE_VARIABLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_VARIABLE_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * DELETE_ASSET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_ASSET_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * DELETE_BUILD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_BUILD_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * DELETE_ENVIRONMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_ENVIRONMENT_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * DELETE_FUNCTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_FUNCTION_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * DELETE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SERVICE_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * DELETE_VARIABLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_VARIABLE_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * FETCH_ASSET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ASSET_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * FETCH_ASSET_VERSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ASSET_VERSION_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * FETCH_BUILD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_BUILD_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * FETCH_BUILD_STATUS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_BUILD_STATUS_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * FETCH_DEPLOYMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_DEPLOYMENT_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * FETCH_ENVIRONMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ENVIRONMENT_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * FETCH_FUNCTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_FUNCTION_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * FETCH_FUNCTION_VERSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_FUNCTION_VERSION_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * FETCH_FUNCTION_VERSION_CONTENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_FUNCTION_VERSION_CONTENT_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * FETCH_LOG_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_LOG_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * FETCH_VARIABLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_VARIABLE_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * LIST_ASSET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_ASSET_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * LIST_ASSET_VERSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_ASSET_VERSION_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * LIST_BUILD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_BUILD_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * LIST_DEPLOYMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_DEPLOYMENT_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * LIST_ENVIRONMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_ENVIRONMENT_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * LIST_FUNCTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_FUNCTION_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * LIST_FUNCTION_VERSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_FUNCTION_VERSION_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * LIST_LOG_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_LOG_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * LIST_VARIABLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_VARIABLE_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * UPDATE_ASSET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_ASSET_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * UPDATE_FUNCTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_FUNCTION_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * UPDATE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SERVICE_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * UPDATE_VARIABLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_VARIABLE_SERVERS = {
        "https://serverless.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}

		if (this._serverUrl.endsWith("/")) {
            this._serverUrl = this._serverUrl.substring(0, this._serverUrl.length() - 1);
        }

		
	}

    /**
     * Create a new Asset resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateAssetResponse createAsset(org.openapis.openapi.models.operations.CreateAssetRequest request, org.openapis.openapi.models.operations.CreateAssetSecurity security) throws Exception {
        return this.createAsset(request, security, null);
    }

    /**
     * Create a new Asset resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateAssetResponse createAsset(org.openapis.openapi.models.operations.CreateAssetRequest request, org.openapis.openapi.models.operations.CreateAssetSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_ASSET_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateAssetRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Assets", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateAssetResponse res = new org.openapis.openapi.models.operations.CreateAssetResponse(contentType, httpRes.statusCode()) {{
            serverlessV1ServiceAsset = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceAsset out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceAsset.class);
                res.serverlessV1ServiceAsset = out;
            }
        }

        return res;
    }

    /**
     * Create a new Build resource. At least one function version or asset version is required.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateBuildResponse createBuild(org.openapis.openapi.models.operations.CreateBuildRequest request, org.openapis.openapi.models.operations.CreateBuildSecurity security) throws Exception {
        return this.createBuild(request, security, null);
    }

    /**
     * Create a new Build resource. At least one function version or asset version is required.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateBuildResponse createBuild(org.openapis.openapi.models.operations.CreateBuildRequest request, org.openapis.openapi.models.operations.CreateBuildSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_BUILD_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateBuildRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Builds", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateBuildResponse res = new org.openapis.openapi.models.operations.CreateBuildResponse(contentType, httpRes.statusCode()) {{
            serverlessV1ServiceBuild = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceBuild out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceBuild.class);
                res.serverlessV1ServiceBuild = out;
            }
        }

        return res;
    }

    /**
     * Create a new Deployment.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateDeploymentResponse createDeployment(org.openapis.openapi.models.operations.CreateDeploymentRequest request, org.openapis.openapi.models.operations.CreateDeploymentSecurity security) throws Exception {
        return this.createDeployment(request, security, null);
    }

    /**
     * Create a new Deployment.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateDeploymentResponse createDeployment(org.openapis.openapi.models.operations.CreateDeploymentRequest request, org.openapis.openapi.models.operations.CreateDeploymentSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_DEPLOYMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateDeploymentRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Deployments", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateDeploymentResponse res = new org.openapis.openapi.models.operations.CreateDeploymentResponse(contentType, httpRes.statusCode()) {{
            serverlessV1ServiceEnvironmentDeployment = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironmentDeployment out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironmentDeployment.class);
                res.serverlessV1ServiceEnvironmentDeployment = out;
            }
        }

        return res;
    }

    /**
     * Create a new environment.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateEnvironmentResponse createEnvironment(org.openapis.openapi.models.operations.CreateEnvironmentRequest request, org.openapis.openapi.models.operations.CreateEnvironmentSecurity security) throws Exception {
        return this.createEnvironment(request, security, null);
    }

    /**
     * Create a new environment.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateEnvironmentResponse createEnvironment(org.openapis.openapi.models.operations.CreateEnvironmentRequest request, org.openapis.openapi.models.operations.CreateEnvironmentSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_ENVIRONMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateEnvironmentRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Environments", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateEnvironmentResponse res = new org.openapis.openapi.models.operations.CreateEnvironmentResponse(contentType, httpRes.statusCode()) {{
            serverlessV1ServiceEnvironment = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironment out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironment.class);
                res.serverlessV1ServiceEnvironment = out;
            }
        }

        return res;
    }

    /**
     * Create a new Function resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateFunctionResponse createFunction(org.openapis.openapi.models.operations.CreateFunctionRequest request, org.openapis.openapi.models.operations.CreateFunctionSecurity security) throws Exception {
        return this.createFunction(request, security, null);
    }

    /**
     * Create a new Function resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateFunctionResponse createFunction(org.openapis.openapi.models.operations.CreateFunctionRequest request, org.openapis.openapi.models.operations.CreateFunctionSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_FUNCTION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateFunctionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Functions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateFunctionResponse res = new org.openapis.openapi.models.operations.CreateFunctionResponse(contentType, httpRes.statusCode()) {{
            serverlessV1ServiceFunction = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceFunction out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceFunction.class);
                res.serverlessV1ServiceFunction = out;
            }
        }

        return res;
    }

    /**
     * Create a new Service resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateServiceResponse createService(org.openapis.openapi.models.operations.CreateServiceCreateServiceRequest request, org.openapis.openapi.models.operations.CreateServiceSecurity security) throws Exception {
        return this.createService(request, security, null);
    }

    /**
     * Create a new Service resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateServiceResponse createService(org.openapis.openapi.models.operations.CreateServiceCreateServiceRequest request, org.openapis.openapi.models.operations.CreateServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Services");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateServiceResponse res = new org.openapis.openapi.models.operations.CreateServiceResponse(contentType, httpRes.statusCode()) {{
            serverlessV1Service = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1Service.class);
                res.serverlessV1Service = out;
            }
        }

        return res;
    }

    /**
     * Create a new Variable.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateVariableResponse createVariable(org.openapis.openapi.models.operations.CreateVariableRequest request, org.openapis.openapi.models.operations.CreateVariableSecurity security) throws Exception {
        return this.createVariable(request, security, null);
    }

    /**
     * Create a new Variable.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateVariableResponse createVariable(org.openapis.openapi.models.operations.CreateVariableRequest request, org.openapis.openapi.models.operations.CreateVariableSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_VARIABLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateVariableRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateVariableResponse res = new org.openapis.openapi.models.operations.CreateVariableResponse(contentType, httpRes.statusCode()) {{
            serverlessV1ServiceEnvironmentVariable = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironmentVariable out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironmentVariable.class);
                res.serverlessV1ServiceEnvironmentVariable = out;
            }
        }

        return res;
    }

    /**
     * Delete an Asset resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteAssetResponse deleteAsset(org.openapis.openapi.models.operations.DeleteAssetRequest request, org.openapis.openapi.models.operations.DeleteAssetSecurity security) throws Exception {
        return this.deleteAsset(request, security, null);
    }

    /**
     * Delete an Asset resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteAssetResponse deleteAsset(org.openapis.openapi.models.operations.DeleteAssetRequest request, org.openapis.openapi.models.operations.DeleteAssetSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_ASSET_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteAssetRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Assets/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteAssetResponse res = new org.openapis.openapi.models.operations.DeleteAssetResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a Build resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteBuildResponse deleteBuild(org.openapis.openapi.models.operations.DeleteBuildRequest request, org.openapis.openapi.models.operations.DeleteBuildSecurity security) throws Exception {
        return this.deleteBuild(request, security, null);
    }

    /**
     * Delete a Build resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteBuildResponse deleteBuild(org.openapis.openapi.models.operations.DeleteBuildRequest request, org.openapis.openapi.models.operations.DeleteBuildSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_BUILD_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteBuildRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Builds/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteBuildResponse res = new org.openapis.openapi.models.operations.DeleteBuildResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific environment.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteEnvironmentResponse deleteEnvironment(org.openapis.openapi.models.operations.DeleteEnvironmentRequest request, org.openapis.openapi.models.operations.DeleteEnvironmentSecurity security) throws Exception {
        return this.deleteEnvironment(request, security, null);
    }

    /**
     * Delete a specific environment.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteEnvironmentResponse deleteEnvironment(org.openapis.openapi.models.operations.DeleteEnvironmentRequest request, org.openapis.openapi.models.operations.DeleteEnvironmentSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_ENVIRONMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteEnvironmentRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Environments/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteEnvironmentResponse res = new org.openapis.openapi.models.operations.DeleteEnvironmentResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a Function resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteFunctionResponse deleteFunction(org.openapis.openapi.models.operations.DeleteFunctionRequest request, org.openapis.openapi.models.operations.DeleteFunctionSecurity security) throws Exception {
        return this.deleteFunction(request, security, null);
    }

    /**
     * Delete a Function resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteFunctionResponse deleteFunction(org.openapis.openapi.models.operations.DeleteFunctionRequest request, org.openapis.openapi.models.operations.DeleteFunctionSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_FUNCTION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteFunctionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Functions/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteFunctionResponse res = new org.openapis.openapi.models.operations.DeleteFunctionResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a Service resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceResponse deleteService(org.openapis.openapi.models.operations.DeleteServiceRequest request, org.openapis.openapi.models.operations.DeleteServiceSecurity security) throws Exception {
        return this.deleteService(request, security, null);
    }

    /**
     * Delete a Service resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceResponse deleteService(org.openapis.openapi.models.operations.DeleteServiceRequest request, org.openapis.openapi.models.operations.DeleteServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteServiceRequest.class, baseUrl, "/v1/Services/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteServiceResponse res = new org.openapis.openapi.models.operations.DeleteServiceResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific Variable.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteVariableResponse deleteVariable(org.openapis.openapi.models.operations.DeleteVariableRequest request, org.openapis.openapi.models.operations.DeleteVariableSecurity security) throws Exception {
        return this.deleteVariable(request, security, null);
    }

    /**
     * Delete a specific Variable.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteVariableResponse deleteVariable(org.openapis.openapi.models.operations.DeleteVariableRequest request, org.openapis.openapi.models.operations.DeleteVariableSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_VARIABLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteVariableRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteVariableResponse res = new org.openapis.openapi.models.operations.DeleteVariableResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Retrieve a specific Asset resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchAssetResponse fetchAsset(org.openapis.openapi.models.operations.FetchAssetRequest request, org.openapis.openapi.models.operations.FetchAssetSecurity security) throws Exception {
        return this.fetchAsset(request, security, null);
    }

    /**
     * Retrieve a specific Asset resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchAssetResponse fetchAsset(org.openapis.openapi.models.operations.FetchAssetRequest request, org.openapis.openapi.models.operations.FetchAssetSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_ASSET_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchAssetRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Assets/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchAssetResponse res = new org.openapis.openapi.models.operations.FetchAssetResponse(contentType, httpRes.statusCode()) {{
            serverlessV1ServiceAsset = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceAsset out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceAsset.class);
                res.serverlessV1ServiceAsset = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a specific Asset Version.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchAssetVersionResponse fetchAssetVersion(org.openapis.openapi.models.operations.FetchAssetVersionRequest request, org.openapis.openapi.models.operations.FetchAssetVersionSecurity security) throws Exception {
        return this.fetchAssetVersion(request, security, null);
    }

    /**
     * Retrieve a specific Asset Version.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchAssetVersionResponse fetchAssetVersion(org.openapis.openapi.models.operations.FetchAssetVersionRequest request, org.openapis.openapi.models.operations.FetchAssetVersionSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_ASSET_VERSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchAssetVersionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Assets/{AssetSid}/Versions/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchAssetVersionResponse res = new org.openapis.openapi.models.operations.FetchAssetVersionResponse(contentType, httpRes.statusCode()) {{
            serverlessV1ServiceAssetAssetVersion = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceAssetAssetVersion out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceAssetAssetVersion.class);
                res.serverlessV1ServiceAssetAssetVersion = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a specific Build resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchBuildResponse fetchBuild(org.openapis.openapi.models.operations.FetchBuildRequest request, org.openapis.openapi.models.operations.FetchBuildSecurity security) throws Exception {
        return this.fetchBuild(request, security, null);
    }

    /**
     * Retrieve a specific Build resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchBuildResponse fetchBuild(org.openapis.openapi.models.operations.FetchBuildRequest request, org.openapis.openapi.models.operations.FetchBuildSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_BUILD_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchBuildRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Builds/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchBuildResponse res = new org.openapis.openapi.models.operations.FetchBuildResponse(contentType, httpRes.statusCode()) {{
            serverlessV1ServiceBuild = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceBuild out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceBuild.class);
                res.serverlessV1ServiceBuild = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a specific Build resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchBuildStatusResponse fetchBuildStatus(org.openapis.openapi.models.operations.FetchBuildStatusRequest request, org.openapis.openapi.models.operations.FetchBuildStatusSecurity security) throws Exception {
        return this.fetchBuildStatus(request, security, null);
    }

    /**
     * Retrieve a specific Build resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchBuildStatusResponse fetchBuildStatus(org.openapis.openapi.models.operations.FetchBuildStatusRequest request, org.openapis.openapi.models.operations.FetchBuildStatusSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_BUILD_STATUS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchBuildStatusRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Builds/{Sid}/Status", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchBuildStatusResponse res = new org.openapis.openapi.models.operations.FetchBuildStatusResponse(contentType, httpRes.statusCode()) {{
            serverlessV1ServiceBuildBuildStatus = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceBuildBuildStatus out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceBuildBuildStatus.class);
                res.serverlessV1ServiceBuildBuildStatus = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a specific Deployment.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchDeploymentResponse fetchDeployment(org.openapis.openapi.models.operations.FetchDeploymentRequest request, org.openapis.openapi.models.operations.FetchDeploymentSecurity security) throws Exception {
        return this.fetchDeployment(request, security, null);
    }

    /**
     * Retrieve a specific Deployment.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchDeploymentResponse fetchDeployment(org.openapis.openapi.models.operations.FetchDeploymentRequest request, org.openapis.openapi.models.operations.FetchDeploymentSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_DEPLOYMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchDeploymentRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Deployments/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchDeploymentResponse res = new org.openapis.openapi.models.operations.FetchDeploymentResponse(contentType, httpRes.statusCode()) {{
            serverlessV1ServiceEnvironmentDeployment = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironmentDeployment out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironmentDeployment.class);
                res.serverlessV1ServiceEnvironmentDeployment = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a specific environment.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchEnvironmentResponse fetchEnvironment(org.openapis.openapi.models.operations.FetchEnvironmentRequest request, org.openapis.openapi.models.operations.FetchEnvironmentSecurity security) throws Exception {
        return this.fetchEnvironment(request, security, null);
    }

    /**
     * Retrieve a specific environment.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchEnvironmentResponse fetchEnvironment(org.openapis.openapi.models.operations.FetchEnvironmentRequest request, org.openapis.openapi.models.operations.FetchEnvironmentSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_ENVIRONMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchEnvironmentRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Environments/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchEnvironmentResponse res = new org.openapis.openapi.models.operations.FetchEnvironmentResponse(contentType, httpRes.statusCode()) {{
            serverlessV1ServiceEnvironment = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironment out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironment.class);
                res.serverlessV1ServiceEnvironment = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a specific Function resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchFunctionResponse fetchFunction(org.openapis.openapi.models.operations.FetchFunctionRequest request, org.openapis.openapi.models.operations.FetchFunctionSecurity security) throws Exception {
        return this.fetchFunction(request, security, null);
    }

    /**
     * Retrieve a specific Function resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchFunctionResponse fetchFunction(org.openapis.openapi.models.operations.FetchFunctionRequest request, org.openapis.openapi.models.operations.FetchFunctionSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_FUNCTION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchFunctionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Functions/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchFunctionResponse res = new org.openapis.openapi.models.operations.FetchFunctionResponse(contentType, httpRes.statusCode()) {{
            serverlessV1ServiceFunction = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceFunction out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceFunction.class);
                res.serverlessV1ServiceFunction = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a specific Function Version resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchFunctionVersionResponse fetchFunctionVersion(org.openapis.openapi.models.operations.FetchFunctionVersionRequest request, org.openapis.openapi.models.operations.FetchFunctionVersionSecurity security) throws Exception {
        return this.fetchFunctionVersion(request, security, null);
    }

    /**
     * Retrieve a specific Function Version resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchFunctionVersionResponse fetchFunctionVersion(org.openapis.openapi.models.operations.FetchFunctionVersionRequest request, org.openapis.openapi.models.operations.FetchFunctionVersionSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_FUNCTION_VERSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchFunctionVersionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Functions/{FunctionSid}/Versions/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchFunctionVersionResponse res = new org.openapis.openapi.models.operations.FetchFunctionVersionResponse(contentType, httpRes.statusCode()) {{
            serverlessV1ServiceFunctionFunctionVersion = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceFunctionFunctionVersion out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceFunctionFunctionVersion.class);
                res.serverlessV1ServiceFunctionFunctionVersion = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a the content of a specific Function Version resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchFunctionVersionContentResponse fetchFunctionVersionContent(org.openapis.openapi.models.operations.FetchFunctionVersionContentRequest request, org.openapis.openapi.models.operations.FetchFunctionVersionContentSecurity security) throws Exception {
        return this.fetchFunctionVersionContent(request, security, null);
    }

    /**
     * Retrieve a the content of a specific Function Version resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchFunctionVersionContentResponse fetchFunctionVersionContent(org.openapis.openapi.models.operations.FetchFunctionVersionContentRequest request, org.openapis.openapi.models.operations.FetchFunctionVersionContentSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_FUNCTION_VERSION_CONTENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchFunctionVersionContentRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Functions/{FunctionSid}/Versions/{Sid}/Content", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchFunctionVersionContentResponse res = new org.openapis.openapi.models.operations.FetchFunctionVersionContentResponse(contentType, httpRes.statusCode()) {{
            serverlessV1ServiceFunctionFunctionVersionFunctionVersionContent = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.class);
                res.serverlessV1ServiceFunctionFunctionVersionFunctionVersionContent = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a specific log.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchLogResponse fetchLog(org.openapis.openapi.models.operations.FetchLogRequest request, org.openapis.openapi.models.operations.FetchLogSecurity security) throws Exception {
        return this.fetchLog(request, security, null);
    }

    /**
     * Retrieve a specific log.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchLogResponse fetchLog(org.openapis.openapi.models.operations.FetchLogRequest request, org.openapis.openapi.models.operations.FetchLogSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_LOG_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchLogRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Logs/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchLogResponse res = new org.openapis.openapi.models.operations.FetchLogResponse(contentType, httpRes.statusCode()) {{
            serverlessV1ServiceEnvironmentLog = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironmentLog out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironmentLog.class);
                res.serverlessV1ServiceEnvironmentLog = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a specific Service resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceResponse fetchService(org.openapis.openapi.models.operations.FetchServiceRequest request, org.openapis.openapi.models.operations.FetchServiceSecurity security) throws Exception {
        return this.fetchService(request, security, null);
    }

    /**
     * Retrieve a specific Service resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceResponse fetchService(org.openapis.openapi.models.operations.FetchServiceRequest request, org.openapis.openapi.models.operations.FetchServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceRequest.class, baseUrl, "/v1/Services/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceResponse res = new org.openapis.openapi.models.operations.FetchServiceResponse(contentType, httpRes.statusCode()) {{
            serverlessV1Service = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1Service.class);
                res.serverlessV1Service = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a specific Variable.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchVariableResponse fetchVariable(org.openapis.openapi.models.operations.FetchVariableRequest request, org.openapis.openapi.models.operations.FetchVariableSecurity security) throws Exception {
        return this.fetchVariable(request, security, null);
    }

    /**
     * Retrieve a specific Variable.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchVariableResponse fetchVariable(org.openapis.openapi.models.operations.FetchVariableRequest request, org.openapis.openapi.models.operations.FetchVariableSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_VARIABLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchVariableRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchVariableResponse res = new org.openapis.openapi.models.operations.FetchVariableResponse(contentType, httpRes.statusCode()) {{
            serverlessV1ServiceEnvironmentVariable = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironmentVariable out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironmentVariable.class);
                res.serverlessV1ServiceEnvironmentVariable = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Assets.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListAssetResponse listAsset(org.openapis.openapi.models.operations.ListAssetRequest request, org.openapis.openapi.models.operations.ListAssetSecurity security) throws Exception {
        return this.listAsset(request, security, null);
    }

    /**
     * Retrieve a list of all Assets.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListAssetResponse listAsset(org.openapis.openapi.models.operations.ListAssetRequest request, org.openapis.openapi.models.operations.ListAssetSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_ASSET_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListAssetRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Assets", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListAssetRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListAssetResponse res = new org.openapis.openapi.models.operations.ListAssetResponse(contentType, httpRes.statusCode()) {{
            listAssetResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListAssetListAssetResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListAssetListAssetResponse.class);
                res.listAssetResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Asset Versions.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListAssetVersionResponse listAssetVersion(org.openapis.openapi.models.operations.ListAssetVersionRequest request, org.openapis.openapi.models.operations.ListAssetVersionSecurity security) throws Exception {
        return this.listAssetVersion(request, security, null);
    }

    /**
     * Retrieve a list of all Asset Versions.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListAssetVersionResponse listAssetVersion(org.openapis.openapi.models.operations.ListAssetVersionRequest request, org.openapis.openapi.models.operations.ListAssetVersionSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_ASSET_VERSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListAssetVersionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Assets/{AssetSid}/Versions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListAssetVersionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListAssetVersionResponse res = new org.openapis.openapi.models.operations.ListAssetVersionResponse(contentType, httpRes.statusCode()) {{
            listAssetVersionResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListAssetVersionListAssetVersionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListAssetVersionListAssetVersionResponse.class);
                res.listAssetVersionResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Builds.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListBuildResponse listBuild(org.openapis.openapi.models.operations.ListBuildRequest request, org.openapis.openapi.models.operations.ListBuildSecurity security) throws Exception {
        return this.listBuild(request, security, null);
    }

    /**
     * Retrieve a list of all Builds.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListBuildResponse listBuild(org.openapis.openapi.models.operations.ListBuildRequest request, org.openapis.openapi.models.operations.ListBuildSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_BUILD_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListBuildRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Builds", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListBuildRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListBuildResponse res = new org.openapis.openapi.models.operations.ListBuildResponse(contentType, httpRes.statusCode()) {{
            listBuildResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListBuildListBuildResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListBuildListBuildResponse.class);
                res.listBuildResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Deployments.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListDeploymentResponse listDeployment(org.openapis.openapi.models.operations.ListDeploymentRequest request, org.openapis.openapi.models.operations.ListDeploymentSecurity security) throws Exception {
        return this.listDeployment(request, security, null);
    }

    /**
     * Retrieve a list of all Deployments.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListDeploymentResponse listDeployment(org.openapis.openapi.models.operations.ListDeploymentRequest request, org.openapis.openapi.models.operations.ListDeploymentSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_DEPLOYMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListDeploymentRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Deployments", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListDeploymentRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListDeploymentResponse res = new org.openapis.openapi.models.operations.ListDeploymentResponse(contentType, httpRes.statusCode()) {{
            listDeploymentResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListDeploymentListDeploymentResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListDeploymentListDeploymentResponse.class);
                res.listDeploymentResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all environments.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListEnvironmentResponse listEnvironment(org.openapis.openapi.models.operations.ListEnvironmentRequest request, org.openapis.openapi.models.operations.ListEnvironmentSecurity security) throws Exception {
        return this.listEnvironment(request, security, null);
    }

    /**
     * Retrieve a list of all environments.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListEnvironmentResponse listEnvironment(org.openapis.openapi.models.operations.ListEnvironmentRequest request, org.openapis.openapi.models.operations.ListEnvironmentSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_ENVIRONMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListEnvironmentRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Environments", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListEnvironmentRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListEnvironmentResponse res = new org.openapis.openapi.models.operations.ListEnvironmentResponse(contentType, httpRes.statusCode()) {{
            listEnvironmentResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListEnvironmentListEnvironmentResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListEnvironmentListEnvironmentResponse.class);
                res.listEnvironmentResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Functions.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListFunctionResponse listFunction(org.openapis.openapi.models.operations.ListFunctionRequest request, org.openapis.openapi.models.operations.ListFunctionSecurity security) throws Exception {
        return this.listFunction(request, security, null);
    }

    /**
     * Retrieve a list of all Functions.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListFunctionResponse listFunction(org.openapis.openapi.models.operations.ListFunctionRequest request, org.openapis.openapi.models.operations.ListFunctionSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_FUNCTION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListFunctionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Functions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListFunctionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListFunctionResponse res = new org.openapis.openapi.models.operations.ListFunctionResponse(contentType, httpRes.statusCode()) {{
            listFunctionResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListFunctionListFunctionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListFunctionListFunctionResponse.class);
                res.listFunctionResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Function Version resources.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListFunctionVersionResponse listFunctionVersion(org.openapis.openapi.models.operations.ListFunctionVersionRequest request, org.openapis.openapi.models.operations.ListFunctionVersionSecurity security) throws Exception {
        return this.listFunctionVersion(request, security, null);
    }

    /**
     * Retrieve a list of all Function Version resources.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListFunctionVersionResponse listFunctionVersion(org.openapis.openapi.models.operations.ListFunctionVersionRequest request, org.openapis.openapi.models.operations.ListFunctionVersionSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_FUNCTION_VERSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListFunctionVersionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Functions/{FunctionSid}/Versions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListFunctionVersionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListFunctionVersionResponse res = new org.openapis.openapi.models.operations.ListFunctionVersionResponse(contentType, httpRes.statusCode()) {{
            listFunctionVersionResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListFunctionVersionListFunctionVersionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListFunctionVersionListFunctionVersionResponse.class);
                res.listFunctionVersionResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all logs.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListLogResponse listLog(org.openapis.openapi.models.operations.ListLogRequest request, org.openapis.openapi.models.operations.ListLogSecurity security) throws Exception {
        return this.listLog(request, security, null);
    }

    /**
     * Retrieve a list of all logs.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListLogResponse listLog(org.openapis.openapi.models.operations.ListLogRequest request, org.openapis.openapi.models.operations.ListLogSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_LOG_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListLogRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Logs", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListLogRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListLogResponse res = new org.openapis.openapi.models.operations.ListLogResponse(contentType, httpRes.statusCode()) {{
            listLogResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListLogListLogResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListLogListLogResponse.class);
                res.listLogResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Services.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceResponse listService(org.openapis.openapi.models.operations.ListServiceRequest request, org.openapis.openapi.models.operations.ListServiceSecurity security) throws Exception {
        return this.listService(request, security, null);
    }

    /**
     * Retrieve a list of all Services.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceResponse listService(org.openapis.openapi.models.operations.ListServiceRequest request, org.openapis.openapi.models.operations.ListServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Services");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceResponse res = new org.openapis.openapi.models.operations.ListServiceResponse(contentType, httpRes.statusCode()) {{
            listServiceResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceListServiceResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceListServiceResponse.class);
                res.listServiceResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Variables.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListVariableResponse listVariable(org.openapis.openapi.models.operations.ListVariableRequest request, org.openapis.openapi.models.operations.ListVariableSecurity security) throws Exception {
        return this.listVariable(request, security, null);
    }

    /**
     * Retrieve a list of all Variables.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListVariableResponse listVariable(org.openapis.openapi.models.operations.ListVariableRequest request, org.openapis.openapi.models.operations.ListVariableSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_VARIABLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListVariableRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListVariableRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListVariableResponse res = new org.openapis.openapi.models.operations.ListVariableResponse(contentType, httpRes.statusCode()) {{
            listVariableResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListVariableListVariableResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListVariableListVariableResponse.class);
                res.listVariableResponse = out;
            }
        }

        return res;
    }

    /**
     * Update a specific Asset resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateAssetResponse updateAsset(org.openapis.openapi.models.operations.UpdateAssetRequest request, org.openapis.openapi.models.operations.UpdateAssetSecurity security) throws Exception {
        return this.updateAsset(request, security, null);
    }

    /**
     * Update a specific Asset resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateAssetResponse updateAsset(org.openapis.openapi.models.operations.UpdateAssetRequest request, org.openapis.openapi.models.operations.UpdateAssetSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_ASSET_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateAssetRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Assets/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateAssetResponse res = new org.openapis.openapi.models.operations.UpdateAssetResponse(contentType, httpRes.statusCode()) {{
            serverlessV1ServiceAsset = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceAsset out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceAsset.class);
                res.serverlessV1ServiceAsset = out;
            }
        }

        return res;
    }

    /**
     * Update a specific Function resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateFunctionResponse updateFunction(org.openapis.openapi.models.operations.UpdateFunctionRequest request, org.openapis.openapi.models.operations.UpdateFunctionSecurity security) throws Exception {
        return this.updateFunction(request, security, null);
    }

    /**
     * Update a specific Function resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateFunctionResponse updateFunction(org.openapis.openapi.models.operations.UpdateFunctionRequest request, org.openapis.openapi.models.operations.UpdateFunctionSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_FUNCTION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateFunctionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Functions/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateFunctionResponse res = new org.openapis.openapi.models.operations.UpdateFunctionResponse(contentType, httpRes.statusCode()) {{
            serverlessV1ServiceFunction = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceFunction out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceFunction.class);
                res.serverlessV1ServiceFunction = out;
            }
        }

        return res;
    }

    /**
     * Update a specific Service resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceResponse updateService(org.openapis.openapi.models.operations.UpdateServiceRequest request, org.openapis.openapi.models.operations.UpdateServiceSecurity security) throws Exception {
        return this.updateService(request, security, null);
    }

    /**
     * Update a specific Service resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceResponse updateService(org.openapis.openapi.models.operations.UpdateServiceRequest request, org.openapis.openapi.models.operations.UpdateServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateServiceRequest.class, baseUrl, "/v1/Services/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateServiceResponse res = new org.openapis.openapi.models.operations.UpdateServiceResponse(contentType, httpRes.statusCode()) {{
            serverlessV1Service = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1Service.class);
                res.serverlessV1Service = out;
            }
        }

        return res;
    }

    /**
     * Update a specific Variable.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateVariableResponse updateVariable(org.openapis.openapi.models.operations.UpdateVariableRequest request, org.openapis.openapi.models.operations.UpdateVariableSecurity security) throws Exception {
        return this.updateVariable(request, security, null);
    }

    /**
     * Update a specific Variable.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateVariableResponse updateVariable(org.openapis.openapi.models.operations.UpdateVariableRequest request, org.openapis.openapi.models.operations.UpdateVariableSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_VARIABLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateVariableRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateVariableResponse res = new org.openapis.openapi.models.operations.UpdateVariableResponse(contentType, httpRes.statusCode()) {{
            serverlessV1ServiceEnvironmentVariable = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironmentVariable out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironmentVariable.class);
                res.serverlessV1ServiceEnvironmentVariable = out;
            }
        }

        return res;
    }
}