/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Tasks {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Adds a task to the specified job.
   */
  taskAdd(
    req: operations.TaskAddRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TaskAddResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TaskAddRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/jobs/{jobId}/tasks", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "taskAddParameter",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TaskAddResponse = new operations.TaskAddResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
        headers: utils.getHeadersFromResponse(httpRes.headers),
      });
      switch (true) {
        case httpRes?.status == 201:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchError = utils.objectToClass(
              httpRes?.data,
              shared.BatchError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a task from the specified job.
   */
  taskDelete(
    req: operations.TaskDeleteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TaskDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TaskDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/jobs/{jobId}/tasks/{taskId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TaskDeleteResponse =
        new operations.TaskDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchError = utils.objectToClass(
              httpRes?.data,
              shared.BatchError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets information about the specified task.
   */
  taskGet(
    req: operations.TaskGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TaskGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TaskGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/jobs/{jobId}/tasks/{taskId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TaskGetResponse = new operations.TaskGetResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
        headers: utils.getHeadersFromResponse(httpRes.headers),
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cloudTask = utils.objectToClass(
              httpRes?.data,
              shared.CloudTask
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchError = utils.objectToClass(
              httpRes?.data,
              shared.BatchError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all of the tasks that are associated with the specified job.
   */
  taskList(
    req: operations.TaskListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TaskListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TaskListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/jobs/{jobId}/tasks", req);

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TaskListResponse = new operations.TaskListResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
        headers: utils.getHeadersFromResponse(httpRes.headers),
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cloudTaskListResult = utils.objectToClass(
              httpRes?.data,
              shared.CloudTaskListResult
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchError = utils.objectToClass(
              httpRes?.data,
              shared.BatchError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all of the subtasks that are associated with the specified multi-instance task.
   */
  taskListSubtasks(
    req: operations.TaskListSubtasksRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TaskListSubtasksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TaskListSubtasksRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/jobs/{jobId}/tasks/{taskId}/subtasksinfo",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TaskListSubtasksResponse =
        new operations.TaskListSubtasksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cloudTaskListSubtasksResult = utils.objectToClass(
              httpRes?.data,
              shared.CloudTaskListSubtasksResult
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchError = utils.objectToClass(
              httpRes?.data,
              shared.BatchError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Terminates the specified task.
   */
  taskTerminate(
    req: operations.TaskTerminateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TaskTerminateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TaskTerminateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/jobs/{jobId}/tasks/{taskId}/terminate",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TaskTerminateResponse =
        new operations.TaskTerminateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchError = utils.objectToClass(
              httpRes?.data,
              shared.BatchError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the properties of the specified task.
   */
  taskUpdate(
    req: operations.TaskUpdateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TaskUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TaskUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/jobs/{jobId}/tasks/{taskId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "taskUpdateParameter",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TaskUpdateResponse =
        new operations.TaskUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchError = utils.objectToClass(
              httpRes?.data,
              shared.BatchError
            );
          }
          break;
      }

      return res;
    });
  }
}
