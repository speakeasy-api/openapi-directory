/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Object to store union of different versions of layout content.
 */
export class UpdateLayoutRequestBodyContent extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "basic" })
  @Type(() => shared.BasicLayout)
  basic?: shared.BasicLayout;
}

export class UpdateLayoutRequestBody extends SpeakeasyBase {
  /**
   * Object to store union of different versions of layout content.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content" })
  @Type(() => UpdateLayoutRequestBodyContent)
  content?: UpdateLayoutRequestBodyContent;

  /**
   * The name of the layout. It must be unique per domain.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class UpdateLayoutRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateLayoutRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The unique identifier of the Cases domain.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=domainId",
  })
  domainId: string;

  /**
   * The unique identifier of the layout.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=layoutId",
  })
  layoutId: string;
}

export class UpdateLayoutResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateLayoutResponse?: Record<string, any>;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
