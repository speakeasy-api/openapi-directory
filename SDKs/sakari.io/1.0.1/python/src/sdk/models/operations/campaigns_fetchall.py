"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import campaignsresponse as shared_campaignsresponse
from ..shared import errorresponse as shared_errorresponse
from typing import Optional


@dataclasses.dataclass
class CampaignsFetchAllSecurity:
    
    sakari_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class CampaignsFetchAllRequest:
    
    account_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'accountId', 'style': 'simple', 'explode': False }})
    r"""Account to apply operations to"""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Maximum number of results to return"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name', 'style': 'form', 'explode': True }})
    r"""Filter by name or part of"""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Results to skip when paginating through a result set"""  
    

@dataclasses.dataclass
class CampaignsFetchAllResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    campaigns_response: Optional[shared_campaignsresponse.CampaignsResponse] = dataclasses.field(default=None)
    r"""successful operation"""  
    error_response: Optional[shared_errorresponse.ErrorResponse] = dataclasses.field(default=None)
    r"""invalid request"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    