// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type InferenceExecutionModeEnum string

const (
	InferenceExecutionModeEnumSerial InferenceExecutionModeEnum = "Serial"
	InferenceExecutionModeEnumDirect InferenceExecutionModeEnum = "Direct"
)

func (e InferenceExecutionModeEnum) ToPointer() *InferenceExecutionModeEnum {
	return &e
}

func (e *InferenceExecutionModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Serial":
		fallthrough
	case "Direct":
		*e = InferenceExecutionModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InferenceExecutionModeEnum: %v", v)
	}
}
