/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class CreateReplicationConfigurationRequestBody extends SpeakeasyBase {
  /**
   * An array of destination configuration objects. Only one destination configuration object is supported.
   */
  @SpeakeasyMetadata({ elemType: shared.DestinationToCreate })
  @Expose({ name: "Destinations" })
  @Type(() => shared.DestinationToCreate)
  destinations: shared.DestinationToCreate[];
}

export class CreateReplicationConfigurationRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateReplicationConfigurationRequestBody;

  /**
   * Specifies the Amazon EFS file system that you want to replicate. This file system cannot already be a source or destination file system in another replication configuration.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=SourceFileSystemId",
  })
  sourceFileSystemId: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateReplicationConfigurationResponse extends SpeakeasyBase {
  /**
   * BadRequest
   */
  @SpeakeasyMetadata()
  badRequest?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * FileSystemLimitExceeded
   */
  @SpeakeasyMetadata()
  fileSystemLimitExceeded?: any;

  /**
   * FileSystemNotFound
   */
  @SpeakeasyMetadata()
  fileSystemNotFound?: any;

  /**
   * IncorrectFileSystemLifeCycleState
   */
  @SpeakeasyMetadata()
  incorrectFileSystemLifeCycleState?: any;

  /**
   * InsufficientThroughputCapacity
   */
  @SpeakeasyMetadata()
  insufficientThroughputCapacity?: any;

  /**
   * InternalServerError
   */
  @SpeakeasyMetadata()
  internalServerError?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  replicationConfigurationDescription?: shared.ReplicationConfigurationDescription;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ReplicationNotFound
   */
  @SpeakeasyMetadata()
  replicationNotFound?: any;

  /**
   * ThroughputLimitExceeded
   */
  @SpeakeasyMetadata()
  throughputLimitExceeded?: any;

  /**
   * UnsupportedAvailabilityZone
   */
  @SpeakeasyMetadata()
  unsupportedAvailabilityZone?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
