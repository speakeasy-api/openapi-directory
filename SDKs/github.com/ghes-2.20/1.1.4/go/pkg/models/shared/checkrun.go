// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type CheckRunCheckSuite struct {
	ID int64 `json:"id"`
}

type CheckRunConclusionEnum string

const (
	CheckRunConclusionEnumSuccess        CheckRunConclusionEnum = "success"
	CheckRunConclusionEnumFailure        CheckRunConclusionEnum = "failure"
	CheckRunConclusionEnumNeutral        CheckRunConclusionEnum = "neutral"
	CheckRunConclusionEnumCancelled      CheckRunConclusionEnum = "cancelled"
	CheckRunConclusionEnumSkipped        CheckRunConclusionEnum = "skipped"
	CheckRunConclusionEnumTimedOut       CheckRunConclusionEnum = "timed_out"
	CheckRunConclusionEnumActionRequired CheckRunConclusionEnum = "action_required"
)

func (e *CheckRunConclusionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "failure":
		fallthrough
	case "neutral":
		fallthrough
	case "cancelled":
		fallthrough
	case "skipped":
		fallthrough
	case "timed_out":
		fallthrough
	case "action_required":
		*e = CheckRunConclusionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckRunConclusionEnum: %s", s)
	}
}

type CheckRunOutput struct {
	AnnotationsCount int64  `json:"annotations_count"`
	AnnotationsURL   string `json:"annotations_url"`
	Summary          string `json:"summary"`
	Text             string `json:"text"`
	Title            string `json:"title"`
}

// CheckRunStatusEnum - The phase of the lifecycle that the check is currently in.
type CheckRunStatusEnum string

const (
	CheckRunStatusEnumQueued     CheckRunStatusEnum = "queued"
	CheckRunStatusEnumInProgress CheckRunStatusEnum = "in_progress"
	CheckRunStatusEnumCompleted  CheckRunStatusEnum = "completed"
)

func (e *CheckRunStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "queued":
		fallthrough
	case "in_progress":
		fallthrough
	case "completed":
		*e = CheckRunStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckRunStatusEnum: %s", s)
	}
}

// CheckRun - A check performed on the code of a given code change
type CheckRun struct {
	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	App         NullableIntegration    `json:"app"`
	CheckSuite  CheckRunCheckSuite     `json:"check_suite"`
	CompletedAt time.Time              `json:"completed_at"`
	Conclusion  CheckRunConclusionEnum `json:"conclusion"`
	// A deployment created as the result of an Actions check run from a workflow that references an environment
	Deployment *DeploymentSimple `json:"deployment,omitempty"`
	DetailsURL string            `json:"details_url"`
	ExternalID string            `json:"external_id"`
	// The SHA of the commit that is being checked.
	HeadSha string `json:"head_sha"`
	HTMLURL string `json:"html_url"`
	// The id of the check.
	ID int64 `json:"id"`
	// The name of the check.
	Name         string               `json:"name"`
	NodeID       string               `json:"node_id"`
	Output       CheckRunOutput       `json:"output"`
	PullRequests []PullRequestMinimal `json:"pull_requests"`
	StartedAt    time.Time            `json:"started_at"`
	// The phase of the lifecycle that the check is currently in.
	Status CheckRunStatusEnum `json:"status"`
	URL    string             `json:"url"`
}
