// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type GetPostAndRelatedDataSecurity struct {
	APIKey         *shared.SchemeAPIKey         `security:"scheme,type=apiKey,subtype=query"`
	Oauth2Code     *shared.SchemeOauth2Code     `security:"scheme,type=oauth2"`
	Oauth2Implicit *shared.SchemeOauth2Implicit `security:"scheme,type=oauth2"`
}

type GetPostAndRelatedDataPathParams struct {
	// The ID of the post to retrieve.
	PostID string `pathParam:"style=simple,explode=false,name=post_id"`
}

type GetPostAndRelatedDataRequest struct {
	PathParams GetPostAndRelatedDataPathParams
	Security   GetPostAndRelatedDataSecurity
}

// GetPostAndRelatedData200ApplicationJSON - The post and related data.
type GetPostAndRelatedData200ApplicationJSON struct {
	Author *shared.User `json:"author,omitempty"`
	// Count of offer posts made by the post author in the last 90 days.
	AuthorOfferCount *int64 `json:"author_offer_count,omitempty"`
	// Other active posts from the post author in the last 90 days. A maximum of 30 posts will be returned.
	//
	AuthorPosts []shared.Post `json:"author_posts,omitempty"`
	// Count of wanted posts made by the post author in the last 90 days.
	AuthorWantedCount *int64 `json:"author_wanted_count,omitempty"`
	// Whether or not the current user has bookmarked this post.  Will be null for api key requests and for the current users' posts.
	Bookmarked *bool `json:"bookmarked,omitempty"`
	// Feedback the current user has left on the post author.
	Feedback []shared.Feedback `json:"feedback,omitempty"`
	// The groups the post is published on.
	Groups []shared.Group `json:"groups,omitempty"`
	// An offer, wanted, admin, taken or received post.
	Post *shared.Post `json:"post,omitempty"`
	// Whether or not the current user has replied to this post.  Will be null for api key requests and for the current users' posts.
	Replied *bool `json:"replied,omitempty"`
	// Whether or not the current user (if any) can reply to this post. Unverified users cannot reply to posts until they verify their account.
	//
	UserCanReply *bool `json:"user_can_reply,omitempty"`
	// Whether or not the current user has previously viewed this post.  Will be null for api key requests and for the current users' posts.
	Viewed *bool `json:"viewed,omitempty"`
}

type GetPostAndRelatedDataResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The post and related data.
	GetPostAndRelatedData200ApplicationJSONObject *GetPostAndRelatedData200ApplicationJSON
}
