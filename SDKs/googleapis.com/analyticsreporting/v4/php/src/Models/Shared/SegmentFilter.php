<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * SegmentFilter - SegmentFilter defines the segment to be either a simple or a sequence segment. A simple segment condition contains dimension and metric conditions to select the sessions or users. A sequence segment condition can be used to select users or sessions based on sequential conditions.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class SegmentFilter
{
    /**
     * If true, match the complement of simple or sequence segment. For example, to match all visits not from "New York", we can define the segment as follows: "sessionSegment": { "segmentFilters": [{ "simpleSegment" :{ "orFiltersForSegment": [{ "segmentFilterClauses":[{ "dimensionFilter": { "dimensionName": "ga:city", "expressions": ["New York"] } }] }] }, "not": "True" }] },
     * 
     * @var ?bool $not
     */
	#[\JMS\Serializer\Annotation\SerializedName('not')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $not = null;
    
    /**
     * Sequence conditions consist of one or more steps, where each step is defined by one or more dimension/metric conditions. Multiple steps can be combined with special sequence operators.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\SequenceSegment $sequenceSegment
     */
	#[\JMS\Serializer\Annotation\SerializedName('sequenceSegment')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\SequenceSegment')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SequenceSegment $sequenceSegment = null;
    
    /**
     * A Simple segment conditions consist of one or more dimension/metric conditions that can be combined.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\SimpleSegment $simpleSegment
     */
	#[\JMS\Serializer\Annotation\SerializedName('simpleSegment')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\SimpleSegment')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SimpleSegment $simpleSegment = null;
    
	public function __construct()
	{
		$this->not = null;
		$this->sequenceSegment = null;
		$this->simpleSegment = null;
	}
}
