"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import filterexpression as shared_filterexpression
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FilterAdvancedDetails:
    r"""Details for the filter of the type ADVANCED."""
    
    case_sensitive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caseSensitive'), 'exclude': lambda f: f is None }})
    r"""Indicates if the filter expressions are case sensitive."""  
    extract_a: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extractA'), 'exclude': lambda f: f is None }})
    r"""Expression to extract from field A."""  
    extract_b: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extractB'), 'exclude': lambda f: f is None }})
    r"""Expression to extract from field B."""  
    field_a: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fieldA'), 'exclude': lambda f: f is None }})
    r"""Field A."""  
    field_a_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fieldAIndex'), 'exclude': lambda f: f is None }})
    r"""The Index of the custom dimension. Required if field is a CUSTOM_DIMENSION."""  
    field_a_required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fieldARequired'), 'exclude': lambda f: f is None }})
    r"""Indicates if field A is required to match."""  
    field_b: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fieldB'), 'exclude': lambda f: f is None }})
    r"""Field B."""  
    field_b_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fieldBIndex'), 'exclude': lambda f: f is None }})
    r"""The Index of the custom dimension. Required if field is a CUSTOM_DIMENSION."""  
    field_b_required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fieldBRequired'), 'exclude': lambda f: f is None }})
    r"""Indicates if field B is required to match."""  
    output_constructor: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outputConstructor'), 'exclude': lambda f: f is None }})
    r"""Expression used to construct the output value."""  
    output_to_field: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outputToField'), 'exclude': lambda f: f is None }})
    r"""Output field."""  
    output_to_field_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outputToFieldIndex'), 'exclude': lambda f: f is None }})
    r"""The Index of the custom dimension. Required if field is a CUSTOM_DIMENSION."""  
    override_output_field: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('overrideOutputField'), 'exclude': lambda f: f is None }})
    r"""Indicates if the existing value of the output field, if any, should be overridden by the output expression."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FilterLowercaseDetails:
    r"""Details for the filter of the type LOWER."""
    
    field: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field'), 'exclude': lambda f: f is None }})
    r"""Field to use in the filter."""  
    field_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fieldIndex'), 'exclude': lambda f: f is None }})
    r"""The Index of the custom dimension. Required if field is a CUSTOM_DIMENSION."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FilterParentLink:
    r"""Parent link for this filter. Points to the account to which this filter belongs."""
    
    href: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('href'), 'exclude': lambda f: f is None }})
    r"""Link to the account to which this filter belongs."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Value is \\"analytics#account\\"."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FilterSearchAndReplaceDetails:
    r"""Details for the filter of the type SEARCH_AND_REPLACE."""
    
    case_sensitive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caseSensitive'), 'exclude': lambda f: f is None }})
    r"""Determines if the filter is case sensitive."""  
    field: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field'), 'exclude': lambda f: f is None }})
    r"""Field to use in the filter."""  
    field_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fieldIndex'), 'exclude': lambda f: f is None }})
    r"""The Index of the custom dimension. Required if field is a CUSTOM_DIMENSION."""  
    replace_string: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('replaceString'), 'exclude': lambda f: f is None }})
    r"""Term to replace the search term with."""  
    search_string: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('searchString'), 'exclude': lambda f: f is None }})
    r"""Term to search."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FilterUppercaseDetails:
    r"""Details for the filter of the type UPPER."""
    
    field: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field'), 'exclude': lambda f: f is None }})
    r"""Field to use in the filter."""  
    field_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fieldIndex'), 'exclude': lambda f: f is None }})
    r"""The Index of the custom dimension. Required if field is a CUSTOM_DIMENSION."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FilterInput:
    r"""JSON template for an Analytics account filter."""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})
    r"""Account ID to which this filter belongs."""  
    advanced_details: Optional[FilterAdvancedDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advancedDetails'), 'exclude': lambda f: f is None }})
    r"""Details for the filter of the type ADVANCED."""  
    exclude_details: Optional[shared_filterexpression.FilterExpression] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludeDetails'), 'exclude': lambda f: f is None }})
    r"""JSON template for an Analytics filter expression."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Filter ID."""  
    include_details: Optional[shared_filterexpression.FilterExpression] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('includeDetails'), 'exclude': lambda f: f is None }})
    r"""JSON template for an Analytics filter expression."""  
    lowercase_details: Optional[FilterLowercaseDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lowercaseDetails'), 'exclude': lambda f: f is None }})
    r"""Details for the filter of the type LOWER."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of this filter."""  
    parent_link: Optional[FilterParentLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentLink'), 'exclude': lambda f: f is None }})
    r"""Parent link for this filter. Points to the account to which this filter belongs."""  
    search_and_replace_details: Optional[FilterSearchAndReplaceDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('searchAndReplaceDetails'), 'exclude': lambda f: f is None }})
    r"""Details for the filter of the type SEARCH_AND_REPLACE."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of this filter. Possible values are INCLUDE, EXCLUDE, LOWERCASE, UPPERCASE, SEARCH_AND_REPLACE and ADVANCED."""  
    uppercase_details: Optional[FilterUppercaseDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uppercaseDetails'), 'exclude': lambda f: f is None }})
    r"""Details for the filter of the type UPPER."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Filter:
    r"""JSON template for an Analytics account filter."""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})
    r"""Account ID to which this filter belongs."""  
    advanced_details: Optional[FilterAdvancedDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advancedDetails'), 'exclude': lambda f: f is None }})
    r"""Details for the filter of the type ADVANCED."""  
    created: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Time this filter was created."""  
    exclude_details: Optional[shared_filterexpression.FilterExpression] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludeDetails'), 'exclude': lambda f: f is None }})
    r"""JSON template for an Analytics filter expression."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Filter ID."""  
    include_details: Optional[shared_filterexpression.FilterExpression] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('includeDetails'), 'exclude': lambda f: f is None }})
    r"""JSON template for an Analytics filter expression."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Resource type for Analytics filter."""  
    lowercase_details: Optional[FilterLowercaseDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lowercaseDetails'), 'exclude': lambda f: f is None }})
    r"""Details for the filter of the type LOWER."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of this filter."""  
    parent_link: Optional[FilterParentLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentLink'), 'exclude': lambda f: f is None }})
    r"""Parent link for this filter. Points to the account to which this filter belongs."""  
    search_and_replace_details: Optional[FilterSearchAndReplaceDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('searchAndReplaceDetails'), 'exclude': lambda f: f is None }})
    r"""Details for the filter of the type SEARCH_AND_REPLACE."""  
    self_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selfLink'), 'exclude': lambda f: f is None }})
    r"""Link for this filter."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of this filter. Possible values are INCLUDE, EXCLUDE, LOWERCASE, UPPERCASE, SEARCH_AND_REPLACE and ADVANCED."""  
    updated: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Time this filter was last modified."""  
    uppercase_details: Optional[FilterUppercaseDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uppercaseDetails'), 'exclude': lambda f: f is None }})
    r"""Details for the filter of the type UPPER."""  
    