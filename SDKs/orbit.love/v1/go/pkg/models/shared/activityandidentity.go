// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type ActivityAndIdentityActivityType string

const (
	ActivityAndIdentityActivityTypeActivityWithMember     ActivityAndIdentityActivityType = "activity_with_member"
	ActivityAndIdentityActivityTypePostActivityWithMember ActivityAndIdentityActivityType = "post_activity_with_member"
)

type ActivityAndIdentityActivity struct {
	ActivityWithMember     *ActivityWithMember
	PostActivityWithMember *PostActivityWithMember

	Type ActivityAndIdentityActivityType
}

func CreateActivityAndIdentityActivityActivityWithMember(activityWithMember ActivityWithMember) ActivityAndIdentityActivity {
	typ := ActivityAndIdentityActivityTypeActivityWithMember

	return ActivityAndIdentityActivity{
		ActivityWithMember: &activityWithMember,
		Type:               typ,
	}
}

func CreateActivityAndIdentityActivityPostActivityWithMember(postActivityWithMember PostActivityWithMember) ActivityAndIdentityActivity {
	typ := ActivityAndIdentityActivityTypePostActivityWithMember

	return ActivityAndIdentityActivity{
		PostActivityWithMember: &postActivityWithMember,
		Type:                   typ,
	}
}

func (u *ActivityAndIdentityActivity) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	activityWithMember := new(ActivityWithMember)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&activityWithMember); err == nil {
		u.ActivityWithMember = activityWithMember
		u.Type = ActivityAndIdentityActivityTypeActivityWithMember
		return nil
	}

	postActivityWithMember := new(PostActivityWithMember)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postActivityWithMember); err == nil {
		u.PostActivityWithMember = postActivityWithMember
		u.Type = ActivityAndIdentityActivityTypePostActivityWithMember
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ActivityAndIdentityActivity) MarshalJSON() ([]byte, error) {
	if u.ActivityWithMember != nil {
		return json.Marshal(u.ActivityWithMember)
	}

	if u.PostActivityWithMember != nil {
		return json.Marshal(u.PostActivityWithMember)
	}

	return nil, nil
}

type ActivityAndIdentity struct {
	Activity *ActivityAndIdentityActivity `json:"activity,omitempty"`
	// Represents an email address, a profile on networks like github and twitter, or a record in another system.
	Identity *Identity `json:"identity,omitempty"`
}
