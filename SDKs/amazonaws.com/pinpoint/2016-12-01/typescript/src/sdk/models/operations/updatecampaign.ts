/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Specifies the configuration and other settings for a campaign.
 */
export class UpdateCampaignRequestBodyWriteCampaignRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.WriteTreatmentResource })
  @Expose({ name: "AdditionalTreatments" })
  @Type(() => shared.WriteTreatmentResource)
  additionalTreatments?: shared.WriteTreatmentResource[];

  @SpeakeasyMetadata()
  @Expose({ name: "CustomDeliveryConfiguration" })
  @Type(() => shared.CustomDeliveryConfiguration)
  customDeliveryConfiguration?: shared.CustomDeliveryConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "HoldoutPercent" })
  holdoutPercent?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "Hook" })
  @Type(() => shared.CampaignHook)
  hook?: shared.CampaignHook;

  @SpeakeasyMetadata()
  @Expose({ name: "IsPaused" })
  isPaused?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "Limits" })
  @Type(() => shared.CampaignLimits)
  limits?: shared.CampaignLimits;

  @SpeakeasyMetadata()
  @Expose({ name: "MessageConfiguration" })
  @Type(() => shared.MessageConfiguration)
  messageConfiguration?: shared.MessageConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Priority" })
  priority?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "Schedule" })
  @Type(() => shared.Schedule)
  schedule?: shared.Schedule;

  @SpeakeasyMetadata()
  @Expose({ name: "SegmentId" })
  segmentId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "SegmentVersion" })
  segmentVersion?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "TemplateConfiguration" })
  @Type(() => shared.TemplateConfiguration)
  templateConfiguration?: shared.TemplateConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "TreatmentDescription" })
  treatmentDescription?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "TreatmentName" })
  treatmentName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;
}

export class UpdateCampaignRequestBody extends SpeakeasyBase {
  /**
   * Specifies the configuration and other settings for a campaign.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "WriteCampaignRequest" })
  @Type(() => UpdateCampaignRequestBodyWriteCampaignRequest)
  writeCampaignRequest: UpdateCampaignRequestBodyWriteCampaignRequest;
}

export class UpdateCampaignRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateCampaignRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=application-id",
  })
  applicationId: string;

  /**
   * The unique identifier for the campaign.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=campaign-id",
  })
  campaignId: string;
}

export class UpdateCampaignResponse extends SpeakeasyBase {
  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * ForbiddenException
   */
  @SpeakeasyMetadata()
  forbiddenException?: any;

  /**
   * InternalServerErrorException
   */
  @SpeakeasyMetadata()
  internalServerErrorException?: any;

  /**
   * MethodNotAllowedException
   */
  @SpeakeasyMetadata()
  methodNotAllowedException?: any;

  /**
   * NotFoundException
   */
  @SpeakeasyMetadata()
  notFoundException?: any;

  /**
   * PayloadTooLargeException
   */
  @SpeakeasyMetadata()
  payloadTooLargeException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateCampaignResponse?: shared.UpdateCampaignResponse;
}
