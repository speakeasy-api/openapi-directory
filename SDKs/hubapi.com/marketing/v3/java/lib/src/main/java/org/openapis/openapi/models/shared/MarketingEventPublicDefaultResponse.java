/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * MarketingEventPublicDefaultResponse - successful operation
 */
public class MarketingEventPublicDefaultResponse {
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdAt")
    public OffsetDateTime createdAt;

    public MarketingEventPublicDefaultResponse withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account's definition of the MarketingEvent Object. If they don't they will be filtered out and not set.
     * In order to do this you'll need to create a new PropertyGroup on the HubSpot account's MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customProperties")
    public PropertyValue[] customProperties;

    public MarketingEventPublicDefaultResponse withCustomProperties(PropertyValue[] customProperties) {
        this.customProperties = customProperties;
        return this;
    }
    
    /**
     * The end date and time of the marketing event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("endDateTime")
    public OffsetDateTime endDateTime;

    public MarketingEventPublicDefaultResponse withEndDateTime(OffsetDateTime endDateTime) {
        this.endDateTime = endDateTime;
        return this;
    }
    
    /**
     * Indicates if the marketing event has been cancelled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventCancelled")
    public Boolean eventCancelled;

    public MarketingEventPublicDefaultResponse withEventCancelled(Boolean eventCancelled) {
        this.eventCancelled = eventCancelled;
        return this;
    }
    
    /**
     * The description of the marketing event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventDescription")
    public String eventDescription;

    public MarketingEventPublicDefaultResponse withEventDescription(String eventDescription) {
        this.eventDescription = eventDescription;
        return this;
    }
    
    /**
     * The name of the marketing event.
     */
    @JsonProperty("eventName")
    public String eventName;

    public MarketingEventPublicDefaultResponse withEventName(String eventName) {
        this.eventName = eventName;
        return this;
    }
    
    /**
     * The name of the organizer of the marketing event.
     */
    @JsonProperty("eventOrganizer")
    public String eventOrganizer;

    public MarketingEventPublicDefaultResponse withEventOrganizer(String eventOrganizer) {
        this.eventOrganizer = eventOrganizer;
        return this;
    }
    
    /**
     * The type of the marketing event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventType")
    public String eventType;

    public MarketingEventPublicDefaultResponse withEventType(String eventType) {
        this.eventType = eventType;
        return this;
    }
    
    /**
     * A URL in the external event application where the marketing event can be managed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventUrl")
    public String eventUrl;

    public MarketingEventPublicDefaultResponse withEventUrl(String eventUrl) {
        this.eventUrl = eventUrl;
        return this;
    }
    
    @JsonProperty("id")
    public String id;

    public MarketingEventPublicDefaultResponse withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The start date and time of the marketing event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("startDateTime")
    public OffsetDateTime startDateTime;

    public MarketingEventPublicDefaultResponse withStartDateTime(OffsetDateTime startDateTime) {
        this.startDateTime = startDateTime;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updatedAt")
    public OffsetDateTime updatedAt;

    public MarketingEventPublicDefaultResponse withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    public MarketingEventPublicDefaultResponse(@JsonProperty("createdAt") OffsetDateTime createdAt, @JsonProperty("eventName") String eventName, @JsonProperty("eventOrganizer") String eventOrganizer, @JsonProperty("id") String id, @JsonProperty("updatedAt") OffsetDateTime updatedAt) {
        this.createdAt = createdAt;
        this.eventName = eventName;
        this.eventOrganizer = eventOrganizer;
        this.id = id;
        this.updatedAt = updatedAt;
  }
}
