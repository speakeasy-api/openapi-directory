"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import authenticationtype_enum as shared_authenticationtype_enum
from ..shared import browsertype_enum as shared_browsertype_enum
from ..shared import portalstatus_enum as shared_portalstatus_enum
from ..shared import renderertype_enum as shared_renderertype_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Portal:
    r"""The web portal."""
    
    authentication_type: Optional[shared_authenticationtype_enum.AuthenticationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authenticationType'), 'exclude': lambda f: f is None }})  
    browser_settings_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('browserSettingsArn'), 'exclude': lambda f: f is None }})  
    browser_type: Optional[shared_browsertype_enum.BrowserTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('browserType'), 'exclude': lambda f: f is None }})  
    creation_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})  
    network_settings_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkSettingsArn'), 'exclude': lambda f: f is None }})  
    portal_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portalArn'), 'exclude': lambda f: f is None }})  
    portal_endpoint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portalEndpoint'), 'exclude': lambda f: f is None }})  
    portal_status: Optional[shared_portalstatus_enum.PortalStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portalStatus'), 'exclude': lambda f: f is None }})  
    renderer_type: Optional[shared_renderertype_enum.RendererTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rendererType'), 'exclude': lambda f: f is None }})  
    status_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusReason'), 'exclude': lambda f: f is None }})  
    trust_store_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trustStoreArn'), 'exclude': lambda f: f is None }})  
    user_access_logging_settings_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userAccessLoggingSettingsArn'), 'exclude': lambda f: f is None }})  
    user_settings_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userSettingsArn'), 'exclude': lambda f: f is None }})  
    