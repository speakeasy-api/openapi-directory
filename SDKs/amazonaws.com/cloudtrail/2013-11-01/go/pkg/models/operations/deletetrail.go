// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeleteTrailXAmzTargetEnum
type DeleteTrailXAmzTargetEnum string

const (
	DeleteTrailXAmzTargetEnumComAmazonawsCloudtrailV20131101CloudTrail20131101DeleteTrail DeleteTrailXAmzTargetEnum = "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.DeleteTrail"
)

func (e DeleteTrailXAmzTargetEnum) ToPointer() *DeleteTrailXAmzTargetEnum {
	return &e
}

func (e *DeleteTrailXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.DeleteTrail":
		*e = DeleteTrailXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteTrailXAmzTargetEnum: %v", v)
	}
}

type DeleteTrailRequest struct {
	DeleteTrailRequest shared.DeleteTrailRequest `request:"mediaType=application/json"`
	XAmzAlgorithm      *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256  *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential     *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate           *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken  *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature      *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders  *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget         DeleteTrailXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeleteTrailResponse struct {
	// CloudTrailARNInvalidException
	CloudTrailARNInvalidException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	DeleteTrailResponse map[string]interface{}
	// InsufficientDependencyServiceAccessPermissionException
	InsufficientDependencyServiceAccessPermissionException interface{}
	// InvalidHomeRegionException
	InvalidHomeRegionException interface{}
	// InvalidTrailNameException
	InvalidTrailNameException interface{}
	// NoManagementAccountSLRExistsException
	NoManagementAccountSLRExistsException interface{}
	// NotOrganizationMasterAccountException
	NotOrganizationMasterAccountException interface{}
	// OperationNotPermittedException
	OperationNotPermittedException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
	// TrailNotFoundException
	TrailNotFoundException interface{}
	// UnsupportedOperationException
	UnsupportedOperationException interface{}
}
