// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LogEntrySeverityEnum - The severity of the log entry. The default value is `LogSeverity.DEFAULT`.
type LogEntrySeverityEnum string

const (
	LogEntrySeverityEnumDefault   LogEntrySeverityEnum = "DEFAULT"
	LogEntrySeverityEnumDebug     LogEntrySeverityEnum = "DEBUG"
	LogEntrySeverityEnumInfo      LogEntrySeverityEnum = "INFO"
	LogEntrySeverityEnumNotice    LogEntrySeverityEnum = "NOTICE"
	LogEntrySeverityEnumWarning   LogEntrySeverityEnum = "WARNING"
	LogEntrySeverityEnumError     LogEntrySeverityEnum = "ERROR"
	LogEntrySeverityEnumCritical  LogEntrySeverityEnum = "CRITICAL"
	LogEntrySeverityEnumAlert     LogEntrySeverityEnum = "ALERT"
	LogEntrySeverityEnumEmergency LogEntrySeverityEnum = "EMERGENCY"
)

func (e *LogEntrySeverityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DEFAULT":
		fallthrough
	case "DEBUG":
		fallthrough
	case "INFO":
		fallthrough
	case "NOTICE":
		fallthrough
	case "WARNING":
		fallthrough
	case "ERROR":
		fallthrough
	case "CRITICAL":
		fallthrough
	case "ALERT":
		fallthrough
	case "EMERGENCY":
		*e = LogEntrySeverityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LogEntrySeverityEnum: %s", s)
	}
}

// LogEntry - An individual log entry.
type LogEntry struct {
	// A common proto for logging HTTP requests. Only contains semantics defined by the HTTP specification. Product-specific logging information MUST be defined in a separate message.
	HTTPRequest *HTTPRequest `json:"httpRequest,omitempty"`
	// A unique ID for the log entry used for deduplication. If omitted, the implementation will generate one based on operation_id.
	InsertID *string `json:"insertId,omitempty"`
	// A set of user-defined (key, value) data that provides additional information about the log entry.
	Labels map[string]string `json:"labels,omitempty"`
	// Required. The log to which this log entry belongs. Examples: `"syslog"`, `"book_log"`.
	Name *string `json:"name,omitempty"`
	// Additional information about a potentially long-running operation with which a log entry is associated.
	Operation *LogEntryOperation `json:"operation,omitempty"`
	// The log entry payload, represented as a protocol buffer that is expressed as a JSON object. The only accepted type currently is AuditLog.
	ProtoPayload map[string]interface{} `json:"protoPayload,omitempty"`
	// The severity of the log entry. The default value is `LogSeverity.DEFAULT`.
	Severity *LogEntrySeverityEnum `json:"severity,omitempty"`
	// Additional information about the source code location that produced the log entry.
	SourceLocation *LogEntrySourceLocation `json:"sourceLocation,omitempty"`
	// The log entry payload, represented as a structure that is expressed as a JSON object.
	StructPayload map[string]interface{} `json:"structPayload,omitempty"`
	// The log entry payload, represented as a Unicode string (UTF-8).
	TextPayload *string `json:"textPayload,omitempty"`
	// The time the event described by the log entry occurred. If omitted, defaults to operation start time.
	Timestamp *string `json:"timestamp,omitempty"`
	// Optional. Resource name of the trace associated with the log entry, if any. If this field contains a relative resource name, you can assume the name is relative to `//tracing.googleapis.com`. Example: `projects/my-projectid/traces/06796866738c859f2f19b7cfb3214824`
	Trace *string `json:"trace,omitempty"`
}
