/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CreateMerchantWebhookRequest {
    /**
     * Indicates if expired SSL certificates are accepted. Default value: **false**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acceptsExpiredCertificate")
    public Boolean acceptsExpiredCertificate;

    public CreateMerchantWebhookRequest withAcceptsExpiredCertificate(Boolean acceptsExpiredCertificate) {
        this.acceptsExpiredCertificate = acceptsExpiredCertificate;
        return this;
    }
    
    /**
     * Indicates if self-signed SSL certificates are accepted. Default value: **false**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acceptsSelfSignedCertificate")
    public Boolean acceptsSelfSignedCertificate;

    public CreateMerchantWebhookRequest withAcceptsSelfSignedCertificate(Boolean acceptsSelfSignedCertificate) {
        this.acceptsSelfSignedCertificate = acceptsSelfSignedCertificate;
        return this;
    }
    
    /**
     * Indicates if untrusted SSL certificates are accepted. Default value: **false**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acceptsUntrustedRootCertificate")
    public Boolean acceptsUntrustedRootCertificate;

    public CreateMerchantWebhookRequest withAcceptsUntrustedRootCertificate(Boolean acceptsUntrustedRootCertificate) {
        this.acceptsUntrustedRootCertificate = acceptsUntrustedRootCertificate;
        return this;
    }
    
    /**
     * Indicates if the webhook configuration is active. The field must be **true** for us to send webhooks about events related an account.
     */
    @JsonProperty("active")
    public Boolean active;

    public CreateMerchantWebhookRequest withActive(Boolean active) {
        this.active = active;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalSettings")
    public AdditionalSettings additionalSettings;

    public CreateMerchantWebhookRequest withAdditionalSettings(AdditionalSettings additionalSettings) {
        this.additionalSettings = additionalSettings;
        return this;
    }
    
    /**
     * Format or protocol for receiving webhooks. Possible values:
     * * **soap**
     * * **http**
     * * **json** 
     */
    @JsonProperty("communicationFormat")
    public CreateMerchantWebhookRequestCommunicationFormatEnum communicationFormat;

    public CreateMerchantWebhookRequest withCommunicationFormat(CreateMerchantWebhookRequestCommunicationFormatEnum communicationFormat) {
        this.communicationFormat = communicationFormat;
        return this;
    }
    
    /**
     * Your description for this webhook configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public CreateMerchantWebhookRequest withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Network type for Terminal API notification webhooks. Possible values:
     * * **public**
     * * **local**
     * 
     * Default Value: **public**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkType")
    public CreateMerchantWebhookRequestNetworkTypeEnum networkType;

    public CreateMerchantWebhookRequest withNetworkType(CreateMerchantWebhookRequestNetworkTypeEnum networkType) {
        this.networkType = networkType;
        return this;
    }
    
    /**
     * Password to access the webhook URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    public String password;

    public CreateMerchantWebhookRequest withPassword(String password) {
        this.password = password;
        return this;
    }
    
    /**
     * Indicates if the SOAP action header needs to be populated. Default value: **false**.
     * 
     * Only applies if `communicationFormat`: **soap**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("populateSoapActionHeader")
    public Boolean populateSoapActionHeader;

    public CreateMerchantWebhookRequest withPopulateSoapActionHeader(Boolean populateSoapActionHeader) {
        this.populateSoapActionHeader = populateSoapActionHeader;
        return this;
    }
    
    /**
     * SSL version to access the public webhook URL specified in the `url` field. Possible values:
     * * **TLSv1.3**
     * * **TLSv1.2**
     * * **HTTP** - Only allowed on Test environment.
     * 
     * If not specified, the webhook will use `sslVersion`: **TLSv1.2**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sslVersion")
    public CreateMerchantWebhookRequestSslVersionEnum sslVersion;

    public CreateMerchantWebhookRequest withSslVersion(CreateMerchantWebhookRequestSslVersionEnum sslVersion) {
        this.sslVersion = sslVersion;
        return this;
    }
    
    /**
     * The type of webhook that is being created. Possible values are:
     * 
     * - **standard**
     * - **account-settings-notification**
     * - **banktransfer-notification**
     * - **boletobancario-notification**
     * - **directdebit-notification**
     * - **pending-notification**
     * - **ideal-notification**
     * - **ideal-pending-notification**
     * - **report-notification**
     * - **rreq-notification**
     * 
     * Find out more about [standard notification webhooks](https://docs.adyen.com/development-resources/webhooks/understand-notifications#event-codes) and [other types of notifications](https://docs.adyen.com/development-resources/webhooks/understand-notifications#other-notifications).
     */
    @JsonProperty("type")
    public String type;

    public CreateMerchantWebhookRequest withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * Public URL where webhooks will be sent, for example **https://www.domain.com/webhook-endpoint**.
     */
    @JsonProperty("url")
    public String url;

    public CreateMerchantWebhookRequest withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * Username to access the webhook URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    public String username;

    public CreateMerchantWebhookRequest withUsername(String username) {
        this.username = username;
        return this;
    }
    
    public CreateMerchantWebhookRequest(@JsonProperty("active") Boolean active, @JsonProperty("communicationFormat") CreateMerchantWebhookRequestCommunicationFormatEnum communicationFormat, @JsonProperty("type") String type, @JsonProperty("url") String url) {
        this.active = active;
        this.communicationFormat = communicationFormat;
        this.type = type;
        this.url = url;
  }
}
