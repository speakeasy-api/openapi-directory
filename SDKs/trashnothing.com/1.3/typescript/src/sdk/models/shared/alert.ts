/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * A search alert that the user has created so that they can be notified when new posts match the search query specified by the alert.
 */
export class Alert extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "alert_id" })
  alertId?: string;

  /**
   * The UTC date and time when the alert was last triggered and sent out (may be null).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_sent" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastSent?: Date;

  /**
   * The search phrase that the alert triggers on.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "search" })
  search?: string;

  /**
   * The number of time the alert has triggered and been send out.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "send_count" })
  sendCount?: number;

  /**
   * A list of the post types that the alert is set to match against.  The available post types are: offer, wanted <br /><br /> NOTE: Additional post types may be added in the future (eg. events) so clients should take care to support arbitrary types being returned.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "types" })
  types?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "user_id" })
  userId?: string;
}
