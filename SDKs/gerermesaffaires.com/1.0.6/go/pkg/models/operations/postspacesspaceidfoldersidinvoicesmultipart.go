// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostSpacesSpaceIDFoldersIDInvoicesMultipartSecurity struct {
	GmaAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataAccountingWorkbookEnum string

const (
	PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataAccountingWorkbookEnumCustomer    PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataAccountingWorkbookEnum = "customer"
	PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataAccountingWorkbookEnumProvider    PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataAccountingWorkbookEnum = "provider"
	PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataAccountingWorkbookEnumBank        PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataAccountingWorkbookEnum = "bank"
	PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataAccountingWorkbookEnumCashWoucher PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataAccountingWorkbookEnum = "cashWoucher"
	PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataAccountingWorkbookEnumFiscal      PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataAccountingWorkbookEnum = "fiscal"
	PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataAccountingWorkbookEnumInsurance   PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataAccountingWorkbookEnum = "insurance"
	PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataAccountingWorkbookEnumSocial      PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataAccountingWorkbookEnum = "social"
	PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataAccountingWorkbookEnumOther       PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataAccountingWorkbookEnum = "other"
	PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataAccountingWorkbookEnumPermanent   PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataAccountingWorkbookEnum = "permanent"
)

func (e *PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataAccountingWorkbookEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "customer":
		fallthrough
	case "provider":
		fallthrough
	case "bank":
		fallthrough
	case "cashWoucher":
		fallthrough
	case "fiscal":
		fallthrough
	case "insurance":
		fallthrough
	case "social":
		fallthrough
	case "other":
		fallthrough
	case "permanent":
		*e = PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataAccountingWorkbookEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataAccountingWorkbookEnum: %s", s)
	}
}

type PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataAccounting struct {
	AccountedOn *string                                                                    `json:"AccountedOn,omitempty"`
	Workbook    *PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataAccountingWorkbookEnum `json:"Workbook,omitempty"`
	YearMonth   *string                                                                    `json:"YearMonth,omitempty"`
}

type PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataFile struct {
	File    string `multipartForm:"name=File"`
	Content []byte `multipartForm:"content"`
}

type PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataTypeEnum string

const (
	PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataTypeEnumCommercialInvoice   PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataTypeEnum = "commercial-invoice"
	PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataTypeEnumCreditNote          PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataTypeEnum = "credit-note"
	PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataTypeEnumAmendingInvoice     PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataTypeEnum = "amending-invoice"
	PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataTypeEnumSelfBilling         PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataTypeEnum = "self-billing"
	PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataTypeEnumCreditSelfBilling   PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataTypeEnum = "credit-self-billing"
	PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataTypeEnumDownPaymentInvoice  PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataTypeEnum = "down-payment-invoice"
	PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataTypeEnumInformationsInvoice PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataTypeEnum = "informations-invoice"
)

func (e *PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "commercial-invoice":
		fallthrough
	case "credit-note":
		fallthrough
	case "amending-invoice":
		fallthrough
	case "self-billing":
		fallthrough
	case "credit-self-billing":
		fallthrough
	case "down-payment-invoice":
		fallthrough
	case "informations-invoice":
		*e = PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataTypeEnum: %s", s)
	}
}

// PostSpacesSpaceIDFoldersIDInvoicesMultipartFormData1 - Invoice to add (either DocumentId, InvoiceDate either (File,Name,Content64Encoded,Title,InvoiceDate) is mandatory)
type PostSpacesSpaceIDFoldersIDInvoicesMultipartFormData1 struct {
	Accounting  *PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataAccounting `multipartForm:"name=Accounting,json"`
	Author      *string                                                        `multipartForm:"name=Author"`
	BeforeVAT   *float64                                                       `multipartForm:"name=BeforeVAT"`
	Code        *string                                                        `multipartForm:"name=Code"`
	Comment     *string                                                        `multipartForm:"name=Comment"`
	Date        *string                                                        `multipartForm:"name=Date"`
	DueDate     *string                                                        `multipartForm:"name=DueDate"`
	File        PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataFile        `multipartForm:"file"`
	InclVAT     *float64                                                       `multipartForm:"name=InclVAT"`
	InvoiceDate *string                                                        `multipartForm:"name=InvoiceDate"`
	Number      *string                                                        `multipartForm:"name=Number"`
	PaymentDate *string                                                        `multipartForm:"name=PaymentDate"`
	Title       string                                                         `multipartForm:"name=Title"`
	Type        *PostSpacesSpaceIDFoldersIDInvoicesMultipartFormDataTypeEnum   `multipartForm:"name=Type"`
	Vat         *float64                                                       `multipartForm:"name=VAT"`
}

type PostSpacesSpaceIDFoldersIDInvoicesMultipartRequest struct {
	// Invoice to add (either DocumentId, InvoiceDate either (File,Name,Content64Encoded,Title,InvoiceDate) is mandatory)
	RequestBody PostSpacesSpaceIDFoldersIDInvoicesMultipartFormData1 `request:"mediaType=multipart/form-data"`
	// Id of the folder
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

// PostSpacesSpaceIDFoldersIDInvoicesMultipart201ApplicationJSON - Id of invoice created
type PostSpacesSpaceIDFoldersIDInvoicesMultipart201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostSpacesSpaceIDFoldersIDInvoicesMultipartResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of invoice created
	PostSpacesSpaceIDFoldersIDInvoicesMultipart201ApplicationJSONObject *PostSpacesSpaceIDFoldersIDInvoicesMultipart201ApplicationJSON
}
