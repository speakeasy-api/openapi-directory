/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * VolumeBackup - Represents the backup of a specific persistent volume as a component of a Backup - both the record of the operation and a pointer to the underlying storage-specific artifacts. Next id: 14
 */
public class VolumeBackup {
    /**
     * Output only. The timestamp when the associated underlying volume backup operation completed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completeTime")
    public String completeTime;
    public VolumeBackup withCompleteTime(String completeTime) {
        this.completeTime = completeTime;
        return this;
    }
    
    /**
     * Output only. The timestamp when this VolumeBackup resource was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;
    public VolumeBackup withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Output only. The minimum size of the disk to which this VolumeBackup can be restored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("diskSizeBytes")
    public String diskSizeBytes;
    public VolumeBackup withDiskSizeBytes(String diskSizeBytes) {
        this.diskSizeBytes = diskSizeBytes;
        return this;
    }
    
    /**
     * Output only. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a volume backup from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform volume backup updates in order to avoid race conditions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;
    public VolumeBackup withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * Output only. The format used for the volume backup.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("format")
    public VolumeBackupFormatEnum format;
    public VolumeBackup withFormat(VolumeBackupFormatEnum format) {
        this.format = format;
        return this;
    }
    
    /**
     * Output only. The full name of the VolumeBackup resource. Format: `projects/* /locations/* /backupPlans/* /backups/* /volumeBackups/*`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public VolumeBackup withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * A reference to a namespaced resource in Kubernetes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourcePvc")
    public NamespacedName sourcePvc;
    public VolumeBackup withSourcePvc(NamespacedName sourcePvc) {
        this.sourcePvc = sourcePvc;
        return this;
    }
    
    /**
     * Output only. The current state of this VolumeBackup.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public VolumeBackupStateEnum state;
    public VolumeBackup withState(VolumeBackupStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Output only. A human readable message explaining why the VolumeBackup is in its current state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stateMessage")
    public String stateMessage;
    public VolumeBackup withStateMessage(String stateMessage) {
        this.stateMessage = stateMessage;
        return this;
    }
    
    /**
     * Output only. The aggregate size of the underlying artifacts associated with this VolumeBackup in the backup storage. This may change over time when multiple backups of the same volume share the same backup storage location. In particular, this is likely to increase in size when the immediately preceding backup of the same volume is deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storageBytes")
    public String storageBytes;
    public VolumeBackup withStorageBytes(String storageBytes) {
        this.storageBytes = storageBytes;
        return this;
    }
    
    /**
     * Output only. Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uid")
    public String uid;
    public VolumeBackup withUid(String uid) {
        this.uid = uid;
        return this;
    }
    
    /**
     * Output only. The timestamp when this VolumeBackup resource was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;
    public VolumeBackup withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
    /**
     * Output only. A storage system-specific opaque handle to the underlying volume backup.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("volumeBackupHandle")
    public String volumeBackupHandle;
    public VolumeBackup withVolumeBackupHandle(String volumeBackupHandle) {
        this.volumeBackupHandle = volumeBackupHandle;
        return this;
    }
    
}
