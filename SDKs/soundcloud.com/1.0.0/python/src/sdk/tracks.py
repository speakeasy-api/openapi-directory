"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Tracks:
    r"""Tracks Endpoints."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_tracks_track_id_(self, request: operations.DeleteTracksTrackIDRequest, security: operations.DeleteTracksTrackIDSecurity) -> operations.DeleteTracksTrackIDResponse:
        r"""Deletes a track."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteTracksTrackIDRequest, base_url, '/tracks/{track_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteTracksTrackIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_tracks_track_id_(self, request: operations.GetTracksTrackIDRequest, security: operations.GetTracksTrackIDSecurity) -> operations.GetTracksTrackIDResponse:
        r"""Returns a track."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTracksTrackIDRequest, base_url, '/tracks/{track_id}', request)
        
        query_params = utils.get_query_params(operations.GetTracksTrackIDRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTracksTrackIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Track])
                res.track = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_tracks_track_id_comments(self, request: operations.GetTracksTrackIDCommentsRequest, security: operations.GetTracksTrackIDCommentsSecurity) -> operations.GetTracksTrackIDCommentsResponse:
        r"""Returns the comments posted on the track(track_id)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTracksTrackIDCommentsRequest, base_url, '/tracks/{track_id}/comments', request)
        
        query_params = utils.get_query_params(operations.GetTracksTrackIDCommentsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTracksTrackIDCommentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.get_tracks_track_id_comments_200_application_json_one_of = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_tracks_track_id_favoriters(self, request: operations.GetTracksTrackIDFavoritersRequest, security: operations.GetTracksTrackIDFavoritersSecurity) -> operations.GetTracksTrackIDFavoritersResponse:
        r"""Returns a list of users who have favorited or liked the track."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTracksTrackIDFavoritersRequest, base_url, '/tracks/{track_id}/favoriters', request)
        
        query_params = utils.get_query_params(operations.GetTracksTrackIDFavoritersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTracksTrackIDFavoritersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.UsersList]])
                res.users_list = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_tracks_track_id_related(self, request: operations.GetTracksTrackIDRelatedRequest, security: operations.GetTracksTrackIDRelatedSecurity) -> operations.GetTracksTrackIDRelatedResponse:
        r"""Returns all related tracks of track on SoundCloud."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTracksTrackIDRelatedRequest, base_url, '/tracks/{track_id}/related', request)
        
        query_params = utils.get_query_params(operations.GetTracksTrackIDRelatedRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTracksTrackIDRelatedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.get_tracks_track_id_related_200_application_json_one_of = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_tracks_track_id_reposters(self, request: operations.GetTracksTrackIDRepostersRequest, security: operations.GetTracksTrackIDRepostersSecurity) -> operations.GetTracksTrackIDRepostersResponse:
        r"""Returns a collection of track's reposters."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTracksTrackIDRepostersRequest, base_url, '/tracks/{track_id}/reposters', request)
        
        query_params = utils.get_query_params(operations.GetTracksTrackIDRepostersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTracksTrackIDRepostersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MetaUsers])
                res.meta_users = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_tracks_track_id_streams(self, request: operations.GetTracksTrackIDStreamsRequest, security: operations.GetTracksTrackIDStreamsSecurity) -> operations.GetTracksTrackIDStreamsResponse:
        r"""Returns a track's streamable URLs"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTracksTrackIDStreamsRequest, base_url, '/tracks/{track_id}/streams', request)
        
        query_params = utils.get_query_params(operations.GetTracksTrackIDStreamsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTracksTrackIDStreamsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Streams])
                res.streams = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def post_tracks(self, request: shared.TrackDataRequest, security: operations.PostTracksSecurity) -> operations.PostTracksResponse:
        r"""Uploads a new track."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tracks'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostTracksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Track])
                res.track = out
        elif http_res.status_code in [400, 401]:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def post_tracks_track_id_comments(self, request: operations.PostTracksTrackIDCommentsRequest, security: operations.PostTracksTrackIDCommentsSecurity) -> operations.PostTracksTrackIDCommentsResponse:
        r"""Returns the newly created comment on success"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostTracksTrackIDCommentsRequest, base_url, '/tracks/{track_id}/comments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostTracksTrackIDCommentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Comment])
                res.comment = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TooManyRequests])
                res.too_many_requests = out

        return res

    def put_tracks_track_id_json(self, request: operations.PutTracksTrackIDJSONRequest, security: operations.PutTracksTrackIDJSONSecurity) -> operations.PutTracksTrackIDJSONResponse:
        r"""Updates a track's information."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutTracksTrackIDJSONRequest, base_url, '/tracks/{track_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "track_metadata_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutTracksTrackIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Track])
                res.track = out
        elif http_res.status_code in [400, 401]:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def put_tracks_track_id_multipart(self, request: operations.PutTracksTrackIDMultipartRequest, security: operations.PutTracksTrackIDMultipartSecurity) -> operations.PutTracksTrackIDMultipartResponse:
        r"""Updates a track's information."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutTracksTrackIDMultipartRequest, base_url, '/tracks/{track_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "track_data_request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutTracksTrackIDMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Track])
                res.track = out
        elif http_res.status_code in [400, 401]:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    