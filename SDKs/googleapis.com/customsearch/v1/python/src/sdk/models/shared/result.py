"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ResultImage:
    r"""Image belonging to a custom search result."""
    
    byte_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('byteSize'), 'exclude': lambda f: f is None }})
    r"""The size of the image, in bytes."""  
    context_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contextLink'), 'exclude': lambda f: f is None }})
    r"""A URL pointing to the webpage hosting the image."""  
    height: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height'), 'exclude': lambda f: f is None }})
    r"""The height of the image, in pixels."""  
    thumbnail_height: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumbnailHeight'), 'exclude': lambda f: f is None }})
    r"""The height of the thumbnail image, in pixels."""  
    thumbnail_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumbnailLink'), 'exclude': lambda f: f is None }})
    r"""A URL to the thumbnail image."""  
    thumbnail_width: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumbnailWidth'), 'exclude': lambda f: f is None }})
    r"""The width of the thumbnail image, in pixels."""  
    width: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width'), 'exclude': lambda f: f is None }})
    r"""The width of the image, in pixels."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ResultLabels:
    r"""Refinement label associated with a custom search result."""
    
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The display name of a refinement label. This is the name you should display in your user interface."""  
    label_with_op: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label_with_op'), 'exclude': lambda f: f is None }})
    r"""Refinement label and the associated refinement operation."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of a refinement label, which you can use to refine searches. Don't display this in your user interface; instead, use displayName."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Result:
    r"""A custom search result."""
    
    cache_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cacheId'), 'exclude': lambda f: f is None }})
    r"""Indicates the ID of Google's cached version of the search result."""  
    display_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayLink'), 'exclude': lambda f: f is None }})
    r"""An abridged version of this search resultâ€™s URL, e.g. www.example.com."""  
    file_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileFormat'), 'exclude': lambda f: f is None }})
    r"""The file format of the search result."""  
    formatted_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formattedUrl'), 'exclude': lambda f: f is None }})
    r"""The URL displayed after the snippet for each search result."""  
    html_formatted_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('htmlFormattedUrl'), 'exclude': lambda f: f is None }})
    r"""The HTML-formatted URL displayed after the snippet for each search result."""  
    html_snippet: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('htmlSnippet'), 'exclude': lambda f: f is None }})
    r"""The snippet of the search result, in HTML."""  
    html_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('htmlTitle'), 'exclude': lambda f: f is None }})
    r"""The title of the search result, in HTML."""  
    image: Optional[ResultImage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image'), 'exclude': lambda f: f is None }})
    r"""Image belonging to a custom search result."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""A unique identifier for the type of current object. For this API, it is `customsearch#result.`"""  
    labels: Optional[list[ResultLabels]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Encapsulates all information about refinement labels."""  
    link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link'), 'exclude': lambda f: f is None }})
    r"""The full URL to which the search result is pointing, e.g. http://www.example.com/foo/bar."""  
    mime: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mime'), 'exclude': lambda f: f is None }})
    r"""The MIME type of the search result."""  
    pagemap: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pagemap'), 'exclude': lambda f: f is None }})
    r"""Contains [PageMap](https://developers.google.com/custom-search/docs/structured_data#pagemaps) information for this search result."""  
    snippet: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('snippet'), 'exclude': lambda f: f is None }})
    r"""The snippet of the search result, in plain text."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""The title of the search result, in plain text."""  
    