"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImageChromaKey:
    r"""Allows to define a color (or a range of colors) that will be converted to transparent"""
    
    color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color') }})
    r"""Set the color for which alpha will be set to 0 (full transparency)"""  
    tolerance: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tolerance'), 'exclude': lambda f: f is None }})
    r"""Makes the selection more or less sensitive to changes in color. A value of 1 will select only the provided color. A value of 100 will select all colors, so the full canvas"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImageCrop:
    r"""Crops the element"""
    
    height: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height') }})
    r"""Sets the height of the croping"""  
    width: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width') }})
    r"""Sets the width of the croping"""  
    x: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('x'), 'exclude': lambda f: f is None }})
    r"""Sets the left point of croping"""  
    y: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('y'), 'exclude': lambda f: f is None }})
    r"""Sets the top point of croping"""  
    
class ImagePanEnum(str, Enum):
    r"""Pans the element to the specified direction. If <code>zoom</code> property is not specified, the effect is a non-zooming pan"""
    LEFT = 'left'
    TOP = 'top'
    RIGHT = 'right'
    BOTTOM = 'bottom'
    TOP_LEFT = 'top-left'
    TOP_RIGHT = 'top-right'
    BOTTOM_LEFT = 'bottom-left'
    BOTTOM_RIGHT = 'bottom-right'

class ImagePositionEnum(str, Enum):
    r"""Sets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' properties"""
    TOP_LEFT = 'top-left'
    TOP_RIGHT = 'top-right'
    BOTTOM_RIGHT = 'bottom-right'
    BOTTOM_LEFT = 'bottom-left'
    CENTER_CENTER = 'center-center'
    CUSTOM = 'custom'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImageRotate:
    
    angle: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('angle') }})
    r"""Sets the angle of rotation"""  
    speed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('speed'), 'exclude': lambda f: f is None }})
    r"""Sets the time it takes to rotate the provided angle. A zero value means no movement"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImageScale:
    
    height: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height'), 'exclude': lambda f: f is None }})
    r"""Sets the height for scaling the element"""  
    width: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width'), 'exclude': lambda f: f is None }})
    r"""Sets the width for scaling the element"""  
    
class ImageTypeEnum(str, Enum):
    IMAGE = 'image'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Image:
    
    chroma_key: Optional[ImageChromaKey] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chroma-key'), 'exclude': lambda f: f is None }})
    r"""Allows to define a color (or a range of colors) that will be converted to transparent"""  
    crop: Optional[ImageCrop] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crop'), 'exclude': lambda f: f is None }})
    r"""Crops the element"""  
    pan: Optional[ImagePanEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pan'), 'exclude': lambda f: f is None }})
    r"""Pans the element to the specified direction. If <code>zoom</code> property is not specified, the effect is a non-zooming pan"""  
    position: Optional[ImagePositionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('position'), 'exclude': lambda f: f is None }})
    r"""Sets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' properties"""  
    rotate: Optional[ImageRotate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rotate'), 'exclude': lambda f: f is None }})  
    scale: Optional[ImageScale] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scale'), 'exclude': lambda f: f is None }})  
    src: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('src'), 'exclude': lambda f: f is None }})  
    type: Optional[ImageTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    x: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('x'), 'exclude': lambda f: f is None }})
    r"""Sets the horizontal position of the element in the scene. The value <code>0</code> is on the left side"""  
    y: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('y'), 'exclude': lambda f: f is None }})
    r"""Sets the vertical position of the element in the scene. The value <code>0</code> is on the top side"""  
    zoom: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zoom'), 'exclude': lambda f: f is None }})
    r"""Zooms the element with the specified level percentage. Positive values zoom in, negative values zoom out, zero does not zoom. Zoom can be combined with the <code>pan</code> property to set the focus point of the zooming"""  
    