/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;

public class CreateUpdateFreightValuesCreateUpdateFreightValuesRequest {
    /**
     * Fixed shipping cost to be charged in a decimal number.
     */
    @JsonProperty("absoluteMoneyCost")
    public String absoluteMoneyCost;

    public CreateUpdateFreightValuesCreateUpdateFreightValuesRequest withAbsoluteMoneyCost(String absoluteMoneyCost) {
        this.absoluteMoneyCost = absoluteMoneyCost;
        return this;
    }
    
    /**
     * Three letter ISO code for the country where the delivery will take place.
     */
    @JsonProperty("country")
    public String country;

    public CreateUpdateFreightValuesCreateUpdateFreightValuesRequest withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     * Maximum volume that can be transported by the carrier in cm\u00b3.
     */
    @JsonProperty("maxVolume")
    public Integer maxVolume;

    public CreateUpdateFreightValuesCreateUpdateFreightValuesRequest withMaxVolume(Integer maxVolume) {
        this.maxVolume = maxVolume;
        return this;
    }
    
    /**
     * Indicates desired action for the object. Possible values are `1` (Insert), `2` (Update) or `3`(Delete).
     */
    @JsonProperty("operationType")
    public Integer operationType;

    public CreateUpdateFreightValuesCreateUpdateFreightValuesRequest withOperationType(Integer operationType) {
        this.operationType = operationType;
        return this;
    }
    
    /**
     * Polygon ID, according to the [geolocation](https://help.vtex.com/en/tutorial/registering-geolocation/) feature.
     */
    @JsonProperty("polygon")
    public String polygon;

    public CreateUpdateFreightValuesCreateUpdateFreightValuesRequest withPolygon(String polygon) {
        this.polygon = polygon;
        return this;
    }
    
    /**
     * [Price-based additional shipping charge](https://help.vtex.com/en/tutorial/additional-shipping-costs--2vqGwMn0LabkOHY6zSHYNV), calculated based on the total price of the order, in decimal number. You must fill in this field with a percentage value. For example, for an additional charge of 10%, fill in the table with 10.
     */
    @JsonProperty("pricePercent")
    public Integer pricePercent;

    public CreateUpdateFreightValuesCreateUpdateFreightValuesRequest withPricePercent(Integer pricePercent) {
        this.pricePercent = pricePercent;
        return this;
    }
    
    /**
     * [Weight-based additional shipping charge](https://help.vtex.com/en/tutorial/additional-shipping-costs--2vqGwMn0LabkOHY6zSHYNV), calculated based on the total weight of the order.
     */
    @JsonProperty("pricePercentByWeight")
    public Integer pricePercentByWeight;

    public CreateUpdateFreightValuesCreateUpdateFreightValuesRequest withPricePercentByWeight(Integer pricePercentByWeight) {
        this.pricePercentByWeight = pricePercentByWeight;
        return this;
    }
    
    /**
     * Delivery time frame informed by the carrier, in the format DD.HH:MM:SS.
     */
    @JsonProperty("timeCost")
    public String timeCost;

    public CreateUpdateFreightValuesCreateUpdateFreightValuesRequest withTimeCost(String timeCost) {
        this.timeCost = timeCost;
        return this;
    }
    
    /**
     * Maximum weight allowed.
     */
    @JsonProperty("weightEnd")
    public Integer weightEnd;

    public CreateUpdateFreightValuesCreateUpdateFreightValuesRequest withWeightEnd(Integer weightEnd) {
        this.weightEnd = weightEnd;
        return this;
    }
    
    /**
     * Minimum weight allowed
     */
    @JsonProperty("weightStart")
    public Integer weightStart;

    public CreateUpdateFreightValuesCreateUpdateFreightValuesRequest withWeightStart(Integer weightStart) {
        this.weightStart = weightStart;
        return this;
    }
    
    /**
     * End of postal code interval.
     */
    @JsonProperty("zipCodeEnd")
    public String zipCodeEnd;

    public CreateUpdateFreightValuesCreateUpdateFreightValuesRequest withZipCodeEnd(String zipCodeEnd) {
        this.zipCodeEnd = zipCodeEnd;
        return this;
    }
    
    /**
     * Start of postal code interval.
     */
    @JsonProperty("zipCodeStart")
    public String zipCodeStart;

    public CreateUpdateFreightValuesCreateUpdateFreightValuesRequest withZipCodeStart(String zipCodeStart) {
        this.zipCodeStart = zipCodeStart;
        return this;
    }
    
    public CreateUpdateFreightValuesCreateUpdateFreightValuesRequest(@JsonProperty("absoluteMoneyCost") String absoluteMoneyCost, @JsonProperty("country") String country, @JsonProperty("maxVolume") Integer maxVolume, @JsonProperty("operationType") Integer operationType, @JsonProperty("polygon") String polygon, @JsonProperty("pricePercent") Integer pricePercent, @JsonProperty("pricePercentByWeight") Integer pricePercentByWeight, @JsonProperty("timeCost") String timeCost, @JsonProperty("weightEnd") Integer weightEnd, @JsonProperty("weightStart") Integer weightStart, @JsonProperty("zipCodeEnd") String zipCodeEnd, @JsonProperty("zipCodeStart") String zipCodeStart) {
        this.absoluteMoneyCost = absoluteMoneyCost;
        this.country = country;
        this.maxVolume = maxVolume;
        this.operationType = operationType;
        this.polygon = polygon;
        this.pricePercent = pricePercent;
        this.pricePercentByWeight = pricePercentByWeight;
        this.timeCost = timeCost;
        this.weightEnd = weightEnd;
        this.weightStart = weightStart;
        this.zipCodeEnd = zipCodeEnd;
        this.zipCodeStart = zipCodeStart;
  }
}
