"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import certificatecontact as shared_certificatecontact
from ..shared import certificateorganization as shared_certificateorganization
from ..shared import subjectalternativenamedetails as shared_subjectalternativenamedetails
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CertificateProductTypeEnum(str, Enum):
    r"""Certificate product type"""
    DV_SSL = 'DV_SSL'
    DV_WILDCARD_SSL = 'DV_WILDCARD_SSL'
    EV_SSL = 'EV_SSL'
    OV_CS = 'OV_CS'
    OV_DS = 'OV_DS'
    OV_SSL = 'OV_SSL'
    OV_WILDCARD_SSL = 'OV_WILDCARD_SSL'
    UCC_DV_SSL = 'UCC_DV_SSL'
    UCC_EV_SSL = 'UCC_EV_SSL'
    UCC_OV_SSL = 'UCC_OV_SSL'

class CertificateRootTypeEnum(str, Enum):
    r"""Root Type"""
    GODADDY_SHA_1 = 'GODADDY_SHA_1'
    GODADDY_SHA_2 = 'GODADDY_SHA_2'
    STARFIELD_SHA_1 = 'STARFIELD_SHA_1'
    STARFIELD_SHA_2 = 'STARFIELD_SHA_2'

class CertificateSlotSizeEnum(str, Enum):
    r"""Number of subject alternative names(SAN) to be included in certificate"""
    FIVE = 'FIVE'
    TEN = 'TEN'
    FIFTEEN = 'FIFTEEN'
    TWENTY = 'TWENTY'
    THIRTY = 'THIRTY'
    FOURTY = 'FOURTY'
    FIFTY = 'FIFTY'
    ONE_HUNDRED = 'ONE_HUNDRED'

class CertificateStatusEnum(str, Enum):
    r"""Status of certificate"""
    PENDING_ISSUANCE = 'PENDING_ISSUANCE'
    ISSUED = 'ISSUED'
    REVOKED = 'REVOKED'
    CANCELED = 'CANCELED'
    DENIED = 'DENIED'
    PENDING_REVOCATION = 'PENDING_REVOCATION'
    PENDING_REKEY = 'PENDING_REKEY'
    UNUSED = 'UNUSED'
    EXPIRED = 'EXPIRED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Certificate:
    r"""Certificate details retrieved"""
    
    certificate_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('certificateId') }})
    r"""The unique identifier of the certificate request. Only present if no errors returned"""  
    contact: shared_certificatecontact.CertificateContact = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contact') }})  
    created_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt') }})
    r"""The date the certificate was ordered."""  
    period: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period') }})
    r"""Validity period of order. Specified in years"""  
    product_type: CertificateProductTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productType') }})
    r"""Certificate product type"""  
    status: CertificateStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Status of certificate"""  
    common_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commonName'), 'exclude': lambda f: f is None }})
    r"""Common name of certificate"""  
    denied_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deniedReason'), 'exclude': lambda f: f is None }})
    r"""Only present if certificate order has been denied"""  
    organization: Optional[shared_certificateorganization.CertificateOrganization] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization'), 'exclude': lambda f: f is None }})  
    progress: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('progress'), 'exclude': lambda f: f is None }})
    r"""Percentage of completion for certificate vetting"""  
    revoked_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revokedAt'), 'exclude': lambda f: f is None }})
    r"""The revocation date of certificate (if revoked)."""  
    root_type: Optional[CertificateRootTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rootType'), 'exclude': lambda f: f is None }})
    r"""Root Type"""  
    serial_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serialNumber'), 'exclude': lambda f: f is None }})
    r"""Serial number of certificate (if issued or revoked)"""  
    serial_number_hex: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serialNumberHex'), 'exclude': lambda f: f is None }})
    r"""Hexadecmial format for Serial number of certificate(if issued or revoked)"""  
    slot_size: Optional[CertificateSlotSizeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slotSize'), 'exclude': lambda f: f is None }})
    r"""Number of subject alternative names(SAN) to be included in certificate"""  
    subject_alternative_names: Optional[list[shared_subjectalternativenamedetails.SubjectAlternativeNameDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subjectAlternativeNames'), 'exclude': lambda f: f is None }})
    r"""Contains subject alternative names set"""  
    valid_end: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validEnd'), 'exclude': lambda f: f is None }})
    r"""The end date of the certificate's validity (if issued or revoked)."""  
    valid_start: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validStart'), 'exclude': lambda f: f is None }})
    r"""The start date of the certificate's validity (if issued or revoked)."""  
    