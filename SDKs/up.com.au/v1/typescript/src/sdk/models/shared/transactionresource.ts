/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { MoneyObject } from "./moneyobject";
import { TransactionStatusEnumEnum } from "./transactionstatusenumenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Provides information about an instant reimbursement in the form of
 *
 * @remarks
 * cashback.
 *
 */
export class TransactionResourceAttributesCashback extends SpeakeasyBase {
  /**
   * The total amount of cashback paid, represented as a positive value.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  @Type(() => MoneyObject)
  amount: MoneyObject;

  /**
   * A brief description of why this cashback was paid.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;
}

/**
 * Provides information about a value of money.
 *
 * @remarks
 *
 */
export class TransactionResourceAttributesForeignAmount extends SpeakeasyBase {
  /**
   * The ISO 4217 currency code.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currencyCode" })
  currencyCode: string;

  /**
   * The amount of money, formatted as a string in the relevant currency.
   *
   * @remarks
   * For example, for an Australian dollar value of $10.56, this field will
   * be `"10.56"`. The currency symbol is not included in the string.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value: string;

  /**
   * The amount of money in the smallest denomination for the currency, as a
   *
   * @remarks
   * 64-bit integer.  For example, for an Australian dollar value of $10.56,
   * this field will be `1056`.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "valueInBaseUnits" })
  valueInBaseUnits: number;
}

/**
 * Provides information about a value of money.
 *
 * @remarks
 *
 */
export class TransactionResourceAttributesHoldInfoForeignAmount extends SpeakeasyBase {
  /**
   * The ISO 4217 currency code.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currencyCode" })
  currencyCode: string;

  /**
   * The amount of money, formatted as a string in the relevant currency.
   *
   * @remarks
   * For example, for an Australian dollar value of $10.56, this field will
   * be `"10.56"`. The currency symbol is not included in the string.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value: string;

  /**
   * The amount of money in the smallest denomination for the currency, as a
   *
   * @remarks
   * 64-bit integer.  For example, for an Australian dollar value of $10.56,
   * this field will be `1056`.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "valueInBaseUnits" })
  valueInBaseUnits: number;
}

/**
 * Provides information about the amount at which a transaction was in the
 *
 * @remarks
 * `HELD` status.
 *
 */
export class TransactionResourceAttributesHoldInfo extends SpeakeasyBase {
  /**
   * The amount of this transaction while in the `HELD` status, in
   *
   * @remarks
   * Australian dollars.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  @Type(() => MoneyObject)
  amount: MoneyObject;

  /**
   * The foreign currency amount of this transaction while in the `HELD`
   *
   * @remarks
   * status. This field will be `null` for domestic transactions. The amount
   * was converted to the AUD amount reflected in the `amount` field.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "foreignAmount" })
  @Type(() => TransactionResourceAttributesHoldInfoForeignAmount)
  foreignAmount: TransactionResourceAttributesHoldInfoForeignAmount;
}

/**
 * Provides information about a value of money.
 *
 * @remarks
 *
 */
export class TransactionResourceAttributesRoundUpBoostPortion extends SpeakeasyBase {
  /**
   * The ISO 4217 currency code.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currencyCode" })
  currencyCode: string;

  /**
   * The amount of money, formatted as a string in the relevant currency.
   *
   * @remarks
   * For example, for an Australian dollar value of $10.56, this field will
   * be `"10.56"`. The currency symbol is not included in the string.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value: string;

  /**
   * The amount of money in the smallest denomination for the currency, as a
   *
   * @remarks
   * 64-bit integer.  For example, for an Australian dollar value of $10.56,
   * this field will be `1056`.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "valueInBaseUnits" })
  valueInBaseUnits: number;
}

/**
 * Provides information about how a Round Up was applied, such as whether or
 *
 * @remarks
 * not a boost was included in the Round Up.
 *
 */
export class TransactionResourceAttributesRoundUp extends SpeakeasyBase {
  /**
   * The total amount of this Round Up, including any boosts, represented as
   *
   * @remarks
   * a negative value.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  @Type(() => MoneyObject)
  amount: MoneyObject;

  /**
   * The portion of the Round Up `amount` owing to boosted Round Ups,
   *
   * @remarks
   * represented as a negative value. If no boost was added to the Round Up
   * this field will be `null`.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "boostPortion" })
  @Type(() => TransactionResourceAttributesRoundUpBoostPortion)
  boostPortion: TransactionResourceAttributesRoundUpBoostPortion;
}

export class TransactionResourceAttributes extends SpeakeasyBase {
  /**
   * The amount of this transaction in Australian dollars. For
   *
   * @remarks
   * transactions that were once `HELD` but are now `SETTLED`, refer to
   * the `holdInfo` field for the original `amount` the transaction was
   * `HELD` at.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  @Type(() => MoneyObject)
  amount: MoneyObject;

  /**
   * If all or part of this transaction was instantly reimbursed in the
   *
   * @remarks
   * form of cashback, details of the reimbursement.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cashback" })
  @Type(() => TransactionResourceAttributesCashback)
  cashback: TransactionResourceAttributesCashback;

  /**
   * The date-time at which this transaction was first encountered.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  /**
   * A short description for this transaction. Usually the merchant name
   *
   * @remarks
   * for purchases.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * The foreign currency amount of this transaction. This field will be
   *
   * @remarks
   * `null` for domestic transactions. The amount was converted to the AUD
   * amount reflected in the `amount` of this transaction. Refer to the
   * `holdInfo` field for the original `foreignAmount` the transaction was
   * `HELD` at.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "foreignAmount" })
  @Type(() => TransactionResourceAttributesForeignAmount)
  foreignAmount: TransactionResourceAttributesForeignAmount;

  /**
   * If this transaction is currently in the `HELD` status, or was ever in
   *
   * @remarks
   * the `HELD` status, the `amount` and `foreignAmount` of the
   * transaction while `HELD`.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "holdInfo" })
  @Type(() => TransactionResourceAttributesHoldInfo)
  holdInfo: TransactionResourceAttributesHoldInfo;

  /**
   * Boolean flag set to true on transactions that support the use of
   *
   * @remarks
   * categories.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isCategorizable" })
  isCategorizable: boolean;

  /**
   * Attached message for this transaction, such as a payment message, or a
   *
   * @remarks
   * transfer note.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;

  /**
   * The original, unprocessed text of the transaction. This is often not
   *
   * @remarks
   * a perfect indicator of the actual merchant, but it is useful for
   * reconciliation purposes in some cases.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rawText" })
  rawText: string;

  /**
   * Details of how this transaction was rounded-up. If no Round Up was
   *
   * @remarks
   * applied this field will be `null`.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "roundUp" })
  @Type(() => TransactionResourceAttributesRoundUp)
  roundUp: TransactionResourceAttributesRoundUp;

  /**
   * The date-time at which this transaction settled. This field will be
   *
   * @remarks
   * `null` for transactions that are currently in the `HELD` status.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "settledAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  settledAt: Date;

  /**
   * The current processing status of this transaction, according to
   *
   * @remarks
   * whether or not this transaction has settled or is still held.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: TransactionStatusEnumEnum;
}

export class TransactionResourceLinks extends SpeakeasyBase {
  /**
   * The canonical link to this resource within the API.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "self" })
  self: string;
}

export class TransactionResourceRelationshipsAccountData extends SpeakeasyBase {
  /**
   * The unique identifier of the resource within its type.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * The type of this resource: `accounts`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}

export class TransactionResourceRelationshipsAccountLinks extends SpeakeasyBase {
  /**
   * The link to retrieve the related resource(s) in this relationship.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "related" })
  related: string;
}

export class TransactionResourceRelationshipsAccount extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  @Type(() => TransactionResourceRelationshipsAccountData)
  data: TransactionResourceRelationshipsAccountData;

  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  @Type(() => TransactionResourceRelationshipsAccountLinks)
  links?: TransactionResourceRelationshipsAccountLinks;
}

export class TransactionResourceRelationshipsCategoryData extends SpeakeasyBase {
  /**
   * The unique identifier of the resource within its type.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * The type of this resource: `categories`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}

export class TransactionResourceRelationshipsCategoryLinks extends SpeakeasyBase {
  /**
   * The link to retrieve the related resource(s) in this relationship.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "related" })
  related?: string;

  /**
   * The link to retrieve or modify linkage between this resources and the
   *
   * @remarks
   * related resource(s) in this relationship.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "self" })
  self: string;
}

export class TransactionResourceRelationshipsCategory extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  @Type(() => TransactionResourceRelationshipsCategoryData)
  data: TransactionResourceRelationshipsCategoryData;

  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  @Type(() => TransactionResourceRelationshipsCategoryLinks)
  links?: TransactionResourceRelationshipsCategoryLinks;
}

export class TransactionResourceRelationshipsParentCategoryData extends SpeakeasyBase {
  /**
   * The unique identifier of the resource within its type.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * The type of this resource: `categories`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}

export class TransactionResourceRelationshipsParentCategoryLinks extends SpeakeasyBase {
  /**
   * The link to retrieve the related resource(s) in this relationship.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "related" })
  related: string;
}

export class TransactionResourceRelationshipsParentCategory extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  @Type(() => TransactionResourceRelationshipsParentCategoryData)
  data: TransactionResourceRelationshipsParentCategoryData;

  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  @Type(() => TransactionResourceRelationshipsParentCategoryLinks)
  links?: TransactionResourceRelationshipsParentCategoryLinks;
}

export class TransactionResourceRelationshipsTagsData extends SpeakeasyBase {
  /**
   * The label of the tag, which also acts as the tag’s unique identifier.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * The type of this resource: `tags`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}

export class TransactionResourceRelationshipsTagsLinks extends SpeakeasyBase {
  /**
   * The link to retrieve or modify linkage between this resources and the
   *
   * @remarks
   * related resource(s) in this relationship.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "self" })
  self: string;
}

export class TransactionResourceRelationshipsTags extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: TransactionResourceRelationshipsTagsData })
  @Expose({ name: "data" })
  @Type(() => TransactionResourceRelationshipsTagsData)
  data: TransactionResourceRelationshipsTagsData[];

  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  @Type(() => TransactionResourceRelationshipsTagsLinks)
  links?: TransactionResourceRelationshipsTagsLinks;
}

export class TransactionResourceRelationshipsTransferAccountData extends SpeakeasyBase {
  /**
   * The unique identifier of the resource within its type.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * The type of this resource: `accounts`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}

export class TransactionResourceRelationshipsTransferAccountLinks extends SpeakeasyBase {
  /**
   * The link to retrieve the related resource(s) in this relationship.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "related" })
  related: string;
}

/**
 * If this transaction is a transfer between accounts, this relationship
 *
 * @remarks
 * will contain the account the transaction went to/came from. The
 * `amount` field can be used to determine the direction of the transfer.
 *
 */
export class TransactionResourceRelationshipsTransferAccount extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  @Type(() => TransactionResourceRelationshipsTransferAccountData)
  data: TransactionResourceRelationshipsTransferAccountData;

  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  @Type(() => TransactionResourceRelationshipsTransferAccountLinks)
  links?: TransactionResourceRelationshipsTransferAccountLinks;
}

export class TransactionResourceRelationships extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "account" })
  @Type(() => TransactionResourceRelationshipsAccount)
  account: TransactionResourceRelationshipsAccount;

  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  @Type(() => TransactionResourceRelationshipsCategory)
  category: TransactionResourceRelationshipsCategory;

  @SpeakeasyMetadata()
  @Expose({ name: "parentCategory" })
  @Type(() => TransactionResourceRelationshipsParentCategory)
  parentCategory: TransactionResourceRelationshipsParentCategory;

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  @Type(() => TransactionResourceRelationshipsTags)
  tags: TransactionResourceRelationshipsTags;

  /**
   * If this transaction is a transfer between accounts, this relationship
   *
   * @remarks
   * will contain the account the transaction went to/came from. The
   * `amount` field can be used to determine the direction of the transfer.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transferAccount" })
  @Type(() => TransactionResourceRelationshipsTransferAccount)
  transferAccount: TransactionResourceRelationshipsTransferAccount;
}

export class TransactionResource extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "attributes" })
  @Type(() => TransactionResourceAttributes)
  attributes: TransactionResourceAttributes;

  /**
   * The unique identifier for this transaction.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  @Type(() => TransactionResourceLinks)
  links?: TransactionResourceLinks;

  @SpeakeasyMetadata()
  @Expose({ name: "relationships" })
  @Type(() => TransactionResourceRelationships)
  relationships: TransactionResourceRelationships;

  /**
   * The type of this resource: `transactions`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}
