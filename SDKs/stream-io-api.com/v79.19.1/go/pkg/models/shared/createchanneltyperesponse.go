// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type CreateChannelTypeResponseAutomodEnum string

const (
	CreateChannelTypeResponseAutomodEnumDisabled CreateChannelTypeResponseAutomodEnum = "disabled"
	CreateChannelTypeResponseAutomodEnumSimple   CreateChannelTypeResponseAutomodEnum = "simple"
	CreateChannelTypeResponseAutomodEnumAi       CreateChannelTypeResponseAutomodEnum = "AI"
)

func (e *CreateChannelTypeResponseAutomodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "disabled":
		fallthrough
	case "simple":
		fallthrough
	case "AI":
		*e = CreateChannelTypeResponseAutomodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateChannelTypeResponseAutomodEnum: %s", s)
	}
}

type CreateChannelTypeResponseAutomodBehaviorEnum string

const (
	CreateChannelTypeResponseAutomodBehaviorEnumFlag  CreateChannelTypeResponseAutomodBehaviorEnum = "flag"
	CreateChannelTypeResponseAutomodBehaviorEnumBlock CreateChannelTypeResponseAutomodBehaviorEnum = "block"
)

func (e *CreateChannelTypeResponseAutomodBehaviorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "flag":
		fallthrough
	case "block":
		*e = CreateChannelTypeResponseAutomodBehaviorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateChannelTypeResponseAutomodBehaviorEnum: %s", s)
	}
}

type CreateChannelTypeResponseBlocklistBehaviorEnum string

const (
	CreateChannelTypeResponseBlocklistBehaviorEnumFlag  CreateChannelTypeResponseBlocklistBehaviorEnum = "flag"
	CreateChannelTypeResponseBlocklistBehaviorEnumBlock CreateChannelTypeResponseBlocklistBehaviorEnum = "block"
)

func (e *CreateChannelTypeResponseBlocklistBehaviorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "flag":
		fallthrough
	case "block":
		*e = CreateChannelTypeResponseBlocklistBehaviorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateChannelTypeResponseBlocklistBehaviorEnum: %s", s)
	}
}

// CreateChannelTypeResponse - Successful response
type CreateChannelTypeResponse struct {
	Automod         CreateChannelTypeResponseAutomodEnum         `json:"automod"`
	AutomodBehavior CreateChannelTypeResponseAutomodBehaviorEnum `json:"automod_behavior"`
	// Sets thresholds for AI moderation
	AutomodThresholds *Thresholds                                     `json:"automod_thresholds,omitempty"`
	Blocklist         *string                                         `json:"blocklist,omitempty"`
	BlocklistBehavior *CreateChannelTypeResponseBlocklistBehaviorEnum `json:"blocklist_behavior,omitempty"`
	Commands          []string                                        `json:"commands"`
	ConnectEvents     bool                                            `json:"connect_events"`
	CreatedAt         time.Time                                       `json:"created_at"`
	CustomEvents      bool                                            `json:"custom_events"`
	Duration          string                                          `json:"duration"`
	Grants            map[string][]string                             `json:"grants"`
	MaxMessageLength  float64                                         `json:"max_message_length"`
	MessageRetention  string                                          `json:"message_retention"`
	Mutes             bool                                            `json:"mutes"`
	Name              string                                          `json:"name"`
	Permissions       []PolicyRequest1                                `json:"permissions"`
	PushNotifications bool                                            `json:"push_notifications"`
	Quotes            bool                                            `json:"quotes"`
	Reactions         bool                                            `json:"reactions"`
	ReadEvents        bool                                            `json:"read_events"`
	Reminders         bool                                            `json:"reminders"`
	Replies           bool                                            `json:"replies"`
	Search            bool                                            `json:"search"`
	TypingEvents      bool                                            `json:"typing_events"`
	UpdatedAt         time.Time                                       `json:"updated_at"`
	Uploads           bool                                            `json:"uploads"`
	URLEnrichment     bool                                            `json:"url_enrichment"`
}
