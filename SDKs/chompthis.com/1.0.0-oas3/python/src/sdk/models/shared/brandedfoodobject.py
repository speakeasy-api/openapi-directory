"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BrandedFoodObjectItemsCountryDetails:
    r"""An object containing additional information on the countries where this item is found"""
    
    english_speaking: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('english_speaking'), 'exclude': lambda f: f is None }})
    r"""The number of countries where English is the country's primary language"""  
    non_english_speaking: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('non_english_speaking'), 'exclude': lambda f: f is None }})
    r"""The number of countries where English is not the country's primary language"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BrandedFoodObjectItemsDietFlags:
    r"""An object containing information on an individual ingredient that was flagged as potentially not being compatible with a certain diet"""
    
    compatibility_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compatibility_description'), 'exclude': lambda f: f is None }})
    r"""A description of how we graded this ingredient for compatibility with the diet"""  
    compatibility_level: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compatibility_level'), 'exclude': lambda f: f is None }})
    r"""A numeric representation of if we believe this ingredient is compatible with the diet. Higher values indicate more compatibility"""  
    diet_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diet_label'), 'exclude': lambda f: f is None }})
    r"""Name of the diet with which this ingredient may not be compatible"""  
    ingredient: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ingredient'), 'exclude': lambda f: f is None }})
    r"""Ingredient name"""  
    ingredient_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ingredient_description'), 'exclude': lambda f: f is None }})
    r"""Description of the ingredient"""  
    is_allergen: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_allergen'), 'exclude': lambda f: f is None }})
    r"""Boolean representing if the ingredient is a known allergen"""  
    is_compatible: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_compatible'), 'exclude': lambda f: f is None }})
    r"""A description of if we believe this ingredient is compatible with the diet"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BrandedFoodObjectItemsDietLabelsGlutenFree:
    r"""An object containing information on this item's compatibility with Gluten Free diets"""
    
    compatibility_level: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compatibility_level'), 'exclude': lambda f: f is None }})
    r"""Numeric representation of how compatible this item is with this diet. Higher values indicate more compatibility"""  
    confidence: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confidence'), 'exclude': lambda f: f is None }})
    r"""Boolean that indicates if we are confident in how this item is graded for this diet"""  
    confidence_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confidence_description'), 'exclude': lambda f: f is None }})
    r"""Description of our confidence that this item was graded correctly"""  
    is_compatible: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_compatible'), 'exclude': lambda f: f is None }})
    r"""Boolean describing if this item is compatible with this diet"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Diet name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BrandedFoodObjectItemsDietLabelsVegan:
    r"""An object containing information on this item's compatibility with the Vegan diets"""
    
    compatibility_level: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compatibility_level'), 'exclude': lambda f: f is None }})
    r"""Numeric representation of how compatible this item is with this diet. Higher values indicate more compatibility"""  
    confidence: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confidence'), 'exclude': lambda f: f is None }})
    r"""Boolean that indicates if we are confident in how this item is graded for this diet"""  
    confidence_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confidence_description'), 'exclude': lambda f: f is None }})
    r"""Description of our confidence that this item was graded correctly"""  
    is_compatible: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_compatible'), 'exclude': lambda f: f is None }})
    r"""Boolean describing if this item is compatible with this diet"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Diet name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BrandedFoodObjectItemsDietLabelsVegetarian:
    r"""An object containing information on this item's compatibility with Vegetarian diets"""
    
    compatibility_level: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compatibility_level'), 'exclude': lambda f: f is None }})
    r"""Numeric representation of how compatible this item is with this diet. Higher values indicate more compatibility"""  
    confidence: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confidence'), 'exclude': lambda f: f is None }})
    r"""Boolean that indicates if we are confident in how this item is graded for this diet"""  
    confidence_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confidence_description'), 'exclude': lambda f: f is None }})
    r"""Description of our confidence that this item was graded correctly"""  
    is_compatible: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_compatible'), 'exclude': lambda f: f is None }})
    r"""Boolean describing if this item is compatible with this diet"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Diet name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BrandedFoodObjectItemsDietLabels:
    r"""An object containing this item's compatibility grades for each supported diet"""
    
    gluten_free: Optional[BrandedFoodObjectItemsDietLabelsGlutenFree] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gluten_free'), 'exclude': lambda f: f is None }})
    r"""An object containing information on this item's compatibility with Gluten Free diets"""  
    vegan: Optional[BrandedFoodObjectItemsDietLabelsVegan] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vegan'), 'exclude': lambda f: f is None }})
    r"""An object containing information on this item's compatibility with the Vegan diets"""  
    vegetarian: Optional[BrandedFoodObjectItemsDietLabelsVegetarian] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vegetarian'), 'exclude': lambda f: f is None }})
    r"""An object containing information on this item's compatibility with Vegetarian diets"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BrandedFoodObjectItemsNutrients:
    r"""An object containing information for a specific nutrient found in this food item"""
    
    data_points: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data_points'), 'exclude': lambda f: f is None }})
    r"""Number of observations on which the value is based"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description of the nutrient source"""  
    measurement_unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('measurement_unit'), 'exclude': lambda f: f is None }})
    r"""The unit used for the measure of this nutrient"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Nutrient name"""  
    per_100g: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('per_100g'), 'exclude': lambda f: f is None }})
    r"""Amount of the nutrient per 100g of food"""  
    rank: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rank'), 'exclude': lambda f: f is None }})
    r"""Nutrient rank"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BrandedFoodObjectItemsPackage:
    r"""An object containing basic packaging information about this item"""
    
    quantity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""Package quantity"""  
    size: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""Package size"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BrandedFoodObjectItemsPackagingPhotosFront:
    r"""An object containing photos of the front of this item's packaging"""
    
    display: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display'), 'exclude': lambda f: f is None }})
    r"""Full-sized photo of the front of this item's packaging"""  
    small: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('small'), 'exclude': lambda f: f is None }})
    r"""Small photo of the front of this item's packaging"""  
    thumb: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumb'), 'exclude': lambda f: f is None }})
    r"""Thumbnail photo of the front of this item's packaging"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BrandedFoodObjectItemsPackagingPhotosIngredients:
    r"""An object containing photos of the ingredients on this item's packaging"""
    
    display: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display'), 'exclude': lambda f: f is None }})
    r"""Full-sized photo of the ingredients on this item's packaging"""  
    small: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('small'), 'exclude': lambda f: f is None }})
    r"""Small photo of the ingredients on this item's packaging"""  
    thumb: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumb'), 'exclude': lambda f: f is None }})
    r"""Thumbnail photo of the ingredients on this item's packaging"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BrandedFoodObjectItemsPackagingPhotosNutrition:
    r"""An object containing photos of this item's nutrition label"""
    
    display: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display'), 'exclude': lambda f: f is None }})
    r"""Full-sized photo of this item's nutrition label"""  
    small: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('small'), 'exclude': lambda f: f is None }})
    r"""Small photo of this item's nutrition label"""  
    thumb: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumb'), 'exclude': lambda f: f is None }})
    r"""Thumbnail photo of this item's nutrition label"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BrandedFoodObjectItemsPackagingPhotos:
    r"""A object containing a collection of photos of this item's packaging"""
    
    front: Optional[BrandedFoodObjectItemsPackagingPhotosFront] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('front'), 'exclude': lambda f: f is None }})
    r"""An object containing photos of the front of this item's packaging"""  
    ingredients: Optional[BrandedFoodObjectItemsPackagingPhotosIngredients] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ingredients'), 'exclude': lambda f: f is None }})
    r"""An object containing photos of the ingredients on this item's packaging"""  
    nutrition: Optional[BrandedFoodObjectItemsPackagingPhotosNutrition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nutrition'), 'exclude': lambda f: f is None }})
    r"""An object containing photos of this item's nutrition label"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BrandedFoodObjectItemsServing:
    r"""An object containing serving information for this item"""
    
    measurement_unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('measurement_unit'), 'exclude': lambda f: f is None }})
    r"""Measurement unit for each serving (e.g. if measure is 3 tsp, the unit is tsp)"""  
    size: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""Serving size"""  
    size_fulltext: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size_fulltext'), 'exclude': lambda f: f is None }})
    r"""Serving size description"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BrandedFoodObjectItems:
    r"""An object containing information for this specific item."""
    
    allergens: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allergens'), 'exclude': lambda f: f is None }})
    r"""An array of ingredients in this item that may cause allergic reactions in people"""  
    barcode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('barcode'), 'exclude': lambda f: f is None }})
    r"""EAN/UPC barcode"""  
    brand: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brand'), 'exclude': lambda f: f is None }})
    r"""The brand name that owns this item"""  
    brand_list: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brand_list'), 'exclude': lambda f: f is None }})
    r"""An array of brands we have associated with this item. Some items are sold by more than 1 brand."""  
    categories: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categories'), 'exclude': lambda f: f is None }})  
    countries: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('countries'), 'exclude': lambda f: f is None }})
    r"""An array of countries where this item is sold"""  
    country_details: Optional[BrandedFoodObjectItemsCountryDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country_details'), 'exclude': lambda f: f is None }})
    r"""An object containing additional information on the countries where this item is found"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A description of this item"""  
    diet_flags: Optional[list[BrandedFoodObjectItemsDietFlags]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diet_flags'), 'exclude': lambda f: f is None }})
    r"""An array of ingredient objects that were flagged while grading this item for compatibility with each diet"""  
    diet_labels: Optional[BrandedFoodObjectItemsDietLabels] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diet_labels'), 'exclude': lambda f: f is None }})
    r"""An object containing this item's compatibility grades for each supported diet"""  
    has_english_ingredients: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_english_ingredients'), 'exclude': lambda f: f is None }})
    r"""A boolean indicating if we have English ingredients for this item"""  
    ingredient_list: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ingredient_list'), 'exclude': lambda f: f is None }})
    r"""An array of this item's ingredients"""  
    ingredients: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ingredients'), 'exclude': lambda f: f is None }})
    r"""This food item's ingredients from greatest quantity to least"""  
    keywords: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keywords'), 'exclude': lambda f: f is None }})
    r"""An array of keywords that can be used to describe this item"""  
    minerals: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minerals'), 'exclude': lambda f: f is None }})
    r"""An array of minerals that this item contains"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Item name as provided by brand owner or as shown on packaging"""  
    nutrients: Optional[list[BrandedFoodObjectItemsNutrients]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nutrients'), 'exclude': lambda f: f is None }})
    r"""An array containing nutrient informatio objects for this food item"""  
    package: Optional[BrandedFoodObjectItemsPackage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('package'), 'exclude': lambda f: f is None }})
    r"""An object containing basic packaging information about this item"""  
    packaging_photos: Optional[BrandedFoodObjectItemsPackagingPhotos] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packaging_photos'), 'exclude': lambda f: f is None }})
    r"""A object containing a collection of photos of this item's packaging"""  
    palm_oil_ingredients: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('palm_oil_ingredients'), 'exclude': lambda f: f is None }})
    r"""An array of ingredients made from palm oil"""  
    serving: Optional[BrandedFoodObjectItemsServing] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serving'), 'exclude': lambda f: f is None }})
    r"""An object containing serving information for this item"""  
    traces: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('traces'), 'exclude': lambda f: f is None }})
    r"""An array of trace ingredients that may be found in this item"""  
    vitamins: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vitamins'), 'exclude': lambda f: f is None }})
    r"""An array of vitamins that are found in this item"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BrandedFoodObject:
    r"""Please read the description of each field in this API response object example. By default, the value of each field is **null**. This indicates an unknown state or that no data exists."""
    
    items: Optional[list[BrandedFoodObjectItems]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('items'), 'exclude': lambda f: f is None }})
    r"""An array containing an object for each individual item returned by your API call."""  
    