/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class ListEventLogsRequestBody {
    /**
     * The time after which you do not want any events retrieved, in coordinated universal time (UTC) timestamp format as specified in &lt;a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6"&gt;RFC 3339&lt;/a&gt;.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("endTime")
    public OffsetDateTime endTime;

    public ListEventLogsRequestBody withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }
    
    /**
     * The name of the event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventName")
    public String eventName;

    public ListEventLogsRequestBody withEventName(String eventName) {
        this.eventName = eventName;
        return this;
    }
    
    /**
     * The maximum number of results to show in a single call to this API. If the number of results is larger than the number you specified, the response will include a &lt;code&gt;NextToken&lt;/code&gt; element, which you can use to obtain additional results.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxResults")
    public Long maxResults;

    public ListEventLogsRequestBody withMaxResults(Long maxResults) {
        this.maxResults = maxResults;
        return this;
    }
    
    /**
     * A token returned from a call to this API to indicate the next batch of results to return, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nextToken")
    public String nextToken;

    public ListEventLogsRequestBody withNextToken(String nextToken) {
        this.nextToken = nextToken;
        return this;
    }
    
    /**
     * The date and time when you want to start retrieving events, in coordinated universal time (UTC) timestamp format as specified in &lt;a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6"&gt;RFC 3339&lt;/a&gt;.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("startTime")
    public OffsetDateTime startTime;

    public ListEventLogsRequestBody withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    public ListEventLogsRequestBody(@JsonProperty("endTime") OffsetDateTime endTime, @JsonProperty("startTime") OffsetDateTime startTime) {
        this.endTime = endTime;
        this.startTime = startTime;
  }
}
