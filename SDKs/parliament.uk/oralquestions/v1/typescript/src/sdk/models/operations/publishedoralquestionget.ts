/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Oral Questions where the question type is the selected type, substantive or topical.
 */
export enum PublishedOralQuestionGetParametersQuestionTypeEnum {
  Substantive = "Substantive",
  Topical = "Topical",
}

export class PublishedOralQuestionGetRequest extends SpeakeasyBase {
  /**
   * Which answering body is to respond. A list of answering bodies can be found <a target="_blank" href="http://data.parliament.uk/membersdataplatform/services/mnis/referencedata/AnsweringBodies/">here</a>.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=parameters.answeringBodyIds",
  })
  parametersAnsweringBodyIds?: number[];

  /**
   * Oral Questions where the answering date has been set on or before the date provided. Date format YYYY-MM-DD.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=parameters.answeringDateEnd;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  parametersAnsweringDateEnd?: Date;

  /**
   * Oral Questions where the answering date has been set on or after the date provided. Date format YYYY-MM-DD.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=parameters.answeringDateStart;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  parametersAnsweringDateStart?: Date;

  /**
   * The ID of the member asking the question. Lists of member IDs for each house are available <a href="http://data.parliament.uk/membersdataplatform/services/mnis/members/query/house=Commons" target="_blank">Commons</a> and <a href="http://data.parliament.uk/membersdataplatform/services/mnis/members/query/house=Lords" target="_blank">Lords</a>.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=parameters.askingMemberIds",
  })
  parametersAskingMemberIds?: number[];

  /**
   * Oral Questions where the question is within the question time with the ID provided
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=parameters.oralQuestionTimeId",
  })
  parametersOralQuestionTimeId?: number;

  /**
   * Oral Questions where the question type is the selected type, substantive or topical.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=parameters.questionType",
  })
  parametersQuestionType?: PublishedOralQuestionGetParametersQuestionTypeEnum;

  /**
   * The number of records to skip from the first, default is 0.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=parameters.skip",
  })
  parametersSkip?: number;

  /**
   * The number of records to return, default is 25, maximum is 100.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=parameters.take",
  })
  parametersTake?: number;

  /**
   * The UIN for the question - note that UINs reset at the start of each Parliamentary session.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=parameters.uINs",
  })
  parametersUINs?: number[];
}

export class PublishedOralQuestionGetResponse extends SpeakeasyBase {
  /**
   * OK
   */
  @SpeakeasyMetadata()
  apiResponseListPublishedWrittenQuestion?: shared.ApiResponseListPublishedWrittenQuestion;

  /**
   * BadRequest
   */
  @SpeakeasyMetadata()
  apiResponseObject?: shared.ApiResponseObject;

  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
