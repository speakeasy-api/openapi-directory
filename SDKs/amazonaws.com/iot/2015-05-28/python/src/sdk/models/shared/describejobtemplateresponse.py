"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import abortconfig as shared_abortconfig
from ..shared import jobexecutionsretryconfig as shared_jobexecutionsretryconfig
from ..shared import jobexecutionsrolloutconfig as shared_jobexecutionsrolloutconfig
from ..shared import maintenancewindow as shared_maintenancewindow
from ..shared import presignedurlconfig as shared_presignedurlconfig
from ..shared import timeoutconfig as shared_timeoutconfig
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DescribeJobTemplateResponse:
    r"""Success"""
    
    abort_config: Optional[shared_abortconfig.AbortConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('abortConfig'), 'exclude': lambda f: f is None }})
    r"""The criteria that determine when and how a job abort takes place."""  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    document: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('document'), 'exclude': lambda f: f is None }})  
    document_source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('documentSource'), 'exclude': lambda f: f is None }})  
    job_executions_retry_config: Optional[shared_jobexecutionsretryconfig.JobExecutionsRetryConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobExecutionsRetryConfig'), 'exclude': lambda f: f is None }})  
    job_executions_rollout_config: Optional[shared_jobexecutionsrolloutconfig.JobExecutionsRolloutConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobExecutionsRolloutConfig'), 'exclude': lambda f: f is None }})
    r"""Allows you to create a staged rollout of a job."""  
    job_template_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobTemplateArn'), 'exclude': lambda f: f is None }})  
    job_template_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobTemplateId'), 'exclude': lambda f: f is None }})  
    maintenance_windows: Optional[list[shared_maintenancewindow.MaintenanceWindow]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maintenanceWindows'), 'exclude': lambda f: f is None }})  
    presigned_url_config: Optional[shared_presignedurlconfig.PresignedURLConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('presignedUrlConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration for pre-signed S3 URLs."""  
    timeout_config: Optional[shared_timeoutconfig.TimeoutConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeoutConfig'), 'exclude': lambda f: f is None }})
    r"""Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>."""  
    