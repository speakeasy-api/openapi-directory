// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type InvokeRequestBody struct {
	// <p>The JSON that you want to provide to your Lambda function as input.</p> <p>You can enter the JSON directly. For example, <code>--payload '{ "key": "value" }'</code>. You can also specify a file path. For example, <code>--payload file://payload.json</code>.</p>
	Payload *string `json:"Payload,omitempty"`
}

// InvokeXAmzInvocationTypeEnum - <p>Choose from the following options.</p> <ul> <li> <p> <code>RequestResponse</code> (default) – Invoke the function synchronously. Keep the connection open until the function returns a response or times out. The API response includes the function response and additional data.</p> </li> <li> <p> <code>Event</code> – Invoke the function asynchronously. Send events that fail multiple times to the function's dead-letter queue (if one is configured). The API response only includes a status code.</p> </li> <li> <p> <code>DryRun</code> – Validate parameter values and verify that the user or role has permission to invoke the function.</p> </li> </ul>
type InvokeXAmzInvocationTypeEnum string

const (
	InvokeXAmzInvocationTypeEnumEvent           InvokeXAmzInvocationTypeEnum = "Event"
	InvokeXAmzInvocationTypeEnumRequestResponse InvokeXAmzInvocationTypeEnum = "RequestResponse"
	InvokeXAmzInvocationTypeEnumDryRun          InvokeXAmzInvocationTypeEnum = "DryRun"
)

func (e InvokeXAmzInvocationTypeEnum) ToPointer() *InvokeXAmzInvocationTypeEnum {
	return &e
}

func (e *InvokeXAmzInvocationTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Event":
		fallthrough
	case "RequestResponse":
		fallthrough
	case "DryRun":
		*e = InvokeXAmzInvocationTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InvokeXAmzInvocationTypeEnum: %v", v)
	}
}

// InvokeXAmzLogTypeEnum - Set to <code>Tail</code> to include the execution log in the response. Applies to synchronously invoked functions only.
type InvokeXAmzLogTypeEnum string

const (
	InvokeXAmzLogTypeEnumNone InvokeXAmzLogTypeEnum = "None"
	InvokeXAmzLogTypeEnumTail InvokeXAmzLogTypeEnum = "Tail"
)

func (e InvokeXAmzLogTypeEnum) ToPointer() *InvokeXAmzLogTypeEnum {
	return &e
}

func (e *InvokeXAmzLogTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "None":
		fallthrough
	case "Tail":
		*e = InvokeXAmzLogTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InvokeXAmzLogTypeEnum: %v", v)
	}
}

type InvokeRequest struct {
	// <p>The name of the Lambda function, version, or alias.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> – <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> – <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> – <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>
	FunctionName string `pathParam:"style=simple,explode=false,name=FunctionName"`
	// Specify a version or alias to invoke a published version of the function.
	Qualifier     *string           `queryParam:"style=form,explode=true,name=Qualifier"`
	RequestBody   InvokeRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm *string           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	// Up to 3,583 bytes of base64-encoded data about the invoking client to pass to the function in the context object.
	XAmzClientContext *string `header:"style=simple,explode=false,name=X-Amz-Client-Context"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	// <p>Choose from the following options.</p> <ul> <li> <p> <code>RequestResponse</code> (default) – Invoke the function synchronously. Keep the connection open until the function returns a response or times out. The API response includes the function response and additional data.</p> </li> <li> <p> <code>Event</code> – Invoke the function asynchronously. Send events that fail multiple times to the function's dead-letter queue (if one is configured). The API response only includes a status code.</p> </li> <li> <p> <code>DryRun</code> – Validate parameter values and verify that the user or role has permission to invoke the function.</p> </li> </ul>
	XAmzInvocationType *InvokeXAmzInvocationTypeEnum `header:"style=simple,explode=false,name=X-Amz-Invocation-Type"`
	// Set to <code>Tail</code> to include the execution log in the response. Applies to synchronously invoked functions only.
	XAmzLogType       *InvokeXAmzLogTypeEnum `header:"style=simple,explode=false,name=X-Amz-Log-Type"`
	XAmzSecurityToken *string                `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type InvokeResponse struct {
	ContentType string
	// EC2AccessDeniedException
	Ec2AccessDeniedException interface{}
	// EC2ThrottledException
	Ec2ThrottledException interface{}
	// EC2UnexpectedException
	Ec2UnexpectedException interface{}
	// EFSIOException
	EFSIOException interface{}
	// EFSMountConnectivityException
	EFSMountConnectivityException interface{}
	// EFSMountFailureException
	EFSMountFailureException interface{}
	// EFSMountTimeoutException
	EFSMountTimeoutException interface{}
	// ENILimitReachedException
	ENILimitReachedException interface{}
	// InvalidParameterValueException
	InvalidParameterValueException interface{}
	// InvalidRequestContentException
	InvalidRequestContentException interface{}
	// InvalidRuntimeException
	InvalidRuntimeException interface{}
	// InvalidSecurityGroupIDException
	InvalidSecurityGroupIDException interface{}
	// InvalidSubnetIDException
	InvalidSubnetIDException interface{}
	// InvalidZipFileException
	InvalidZipFileException interface{}
	// Success
	InvocationResponse *shared.InvocationResponse
	// KMSAccessDeniedException
	KMSAccessDeniedException interface{}
	// KMSDisabledException
	KMSDisabledException interface{}
	// KMSInvalidStateException
	KMSInvalidStateException interface{}
	// KMSNotFoundException
	KMSNotFoundException interface{}
	// RequestTooLargeException
	RequestTooLargeException interface{}
	// ResourceConflictException
	ResourceConflictException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ResourceNotReadyException
	ResourceNotReadyException interface{}
	// ServiceException
	ServiceException interface{}
	StatusCode       int
	RawResponse      *http.Response
	// SnapStartException
	SnapStartException interface{}
	// SnapStartNotReadyException
	SnapStartNotReadyException interface{}
	// SnapStartTimeoutException
	SnapStartTimeoutException interface{}
	// SubnetIPAddressLimitReachedException
	SubnetIPAddressLimitReachedException interface{}
	// TooManyRequestsException
	TooManyRequestsException interface{}
	// UnsupportedMediaTypeException
	UnsupportedMediaTypeException interface{}
}
