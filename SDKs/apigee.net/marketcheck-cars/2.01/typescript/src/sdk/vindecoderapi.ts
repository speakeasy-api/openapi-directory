/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class VINDecoderAPI {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * VIN Decoder
   *
   * @remarks
   * Get the basic information on specifications for a car identified by a valid VIN
   */
  decode(
    req: operations.DecodeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DecodeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DecodeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/decode/car/{vin}/specs",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DecodeResponse = new operations.DecodeResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.build = utils.objectToClass(httpRes?.data, shared.Build);
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * EPI VIN Decoder
   *
   * @remarks
   * Get the basic information on specifications for a car identified by a valid VIN from EPI's decoder
   */
  decodeViaEPI(
    req: operations.DecodeViaEPIRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DecodeViaEPIResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DecodeViaEPIRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/decode/car/epi/{vin}/specs",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DecodeViaEPIResponse =
        new operations.DecodeViaEPIResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.build = utils.objectToClass(httpRes?.data, shared.Build);
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * NeoVIN Decoder
   *
   * @remarks
   * Get the basic information on specifications for a car identified by a valid VIN from NeoVIN decoder
   */
  decodeViaNeoVIN(
    req: operations.DecodeViaNeoVINRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DecodeViaNeoVINResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DecodeViaNeoVINRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/decode/car/neovin/{vin}/specs",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DecodeViaNeoVINResponse =
        new operations.DecodeViaNeoVINResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.neoVIN = utils.objectToClass(httpRes?.data, shared.NeoVIN);
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * API for getting terms from taxonomy
   *
   * @remarks
   * Facets on taxonomy
   */
  getTaxonomyTerms(
    req: operations.GetTaxonomyTermsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTaxonomyTermsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTaxonomyTermsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/specs/car/terms";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTaxonomyTermsResponse =
        new operations.GetTaxonomyTermsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.specsAutoCompleteResponse = utils.objectToClass(
              httpRes?.data,
              shared.SpecsAutoCompleteResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * API for auto-completion of inputs based on taxonomy
   *
   * @remarks
   * Auto-complete the inputs of your end users, not from active set but from taxonomy (decoder database)
   */
  getSpecsCarAutoComplete(
    req: operations.GetSpecsCarAutoCompleteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSpecsCarAutoCompleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSpecsCarAutoCompleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/specs/car/auto-complete";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSpecsCarAutoCompleteResponse =
        new operations.GetSpecsCarAutoCompleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.specsAutoCompleteResponse = utils.objectToClass(
              httpRes?.data,
              shared.SpecsAutoCompleteResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }
}
