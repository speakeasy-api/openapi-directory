import { SpeakeasyBase } from "../../../internal/utils";
import { Notification } from "./notification";
/**
 * A subscription to events on a collection.
 */
export declare class Subscription extends SpeakeasyBase {
    /**
     * The URL where notifications should be delivered (must start with https://).
     */
    callbackUrl?: string;
    /**
     * The collection to subscribe to. Allowed values are:
     *
     * @remarks
     * - timeline - Changes in the timeline including insertion, deletion, and updates.
     * - locations - Location updates.
     * - settings - Settings updates.
     */
    collection?: string;
    /**
     * The ID of the subscription.
     */
    id?: string;
    /**
     * The type of resource. This is always mirror#subscription.
     */
    kind?: string;
    /**
     * A notification delivered by the API.
     */
    notification?: Notification;
    /**
     * A list of operations that should be subscribed to. An empty list indicates that all operations on the collection should be subscribed to. Allowed values are:
     *
     * @remarks
     * - UPDATE - The item has been updated.
     * - INSERT - A new item has been inserted.
     * - DELETE - The item has been deleted.
     * - MENU_ACTION - A custom menu item has been triggered by the user.
     */
    operation?: string[];
    /**
     * The time at which this subscription was last modified, formatted according to RFC 3339.
     */
    updated?: Date;
    /**
     * An opaque token sent to the subscriber in notifications so that it can determine the ID of the user.
     */
    userToken?: string;
    /**
     * A secret token sent to the subscriber in notifications so that it can verify that the notification was generated by Google.
     */
    verifyToken?: string;
}
