// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CompleteFileUploadByTokenPathParams struct {
	// Upload token
	Token string `pathParam:"style=simple,explode=false,name=token"`
}

// CompleteFileUploadByTokenXSdsDateFormatEnum - Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
type CompleteFileUploadByTokenXSdsDateFormatEnum string

const (
	CompleteFileUploadByTokenXSdsDateFormatEnumUtc    CompleteFileUploadByTokenXSdsDateFormatEnum = "UTC"
	CompleteFileUploadByTokenXSdsDateFormatEnumLocal  CompleteFileUploadByTokenXSdsDateFormatEnum = "LOCAL"
	CompleteFileUploadByTokenXSdsDateFormatEnumOffset CompleteFileUploadByTokenXSdsDateFormatEnum = "OFFSET"
	CompleteFileUploadByTokenXSdsDateFormatEnumEpoch  CompleteFileUploadByTokenXSdsDateFormatEnum = "EPOCH"
	CompleteFileUploadByTokenXSdsDateFormatEnumLeet   CompleteFileUploadByTokenXSdsDateFormatEnum = "LEET"
)

func (e *CompleteFileUploadByTokenXSdsDateFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UTC":
		fallthrough
	case "LOCAL":
		fallthrough
	case "OFFSET":
		fallthrough
	case "EPOCH":
		fallthrough
	case "LEET":
		*e = CompleteFileUploadByTokenXSdsDateFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteFileUploadByTokenXSdsDateFormatEnum: %s", s)
	}
}

type CompleteFileUploadByTokenHeaders struct {
	// Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
	XSdsDateFormat *CompleteFileUploadByTokenXSdsDateFormatEnum `header:"style=simple,explode=false,name=X-Sds-Date-Format"`
}

type CompleteFileUploadByTokenRequest struct {
	PathParams CompleteFileUploadByTokenPathParams
	Headers    CompleteFileUploadByTokenHeaders
	// The body must be empty if public upload token is used.
	//
	// The `resolutionStrategy` in that case will be always `autorename`
	Request shared.CompleteUploadRequest `request:"mediaType=application/json"`
}

type CompleteFileUploadByTokenResponse struct {
	ContentType string
	// Bad Request
	ErrorResponse *shared.ErrorResponse
	// Created
	Node        *shared.Node
	StatusCode  int
	RawResponse *http.Response
}
