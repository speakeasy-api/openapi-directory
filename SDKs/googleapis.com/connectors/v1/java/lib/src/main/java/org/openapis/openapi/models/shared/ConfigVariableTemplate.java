/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ConfigVariableTemplate - ConfigVariableTemplate provides metadata about a `ConfigVariable` that is used in a Connection.
 */
public class ConfigVariableTemplate {
    /**
     * This configuration captures the details required to render an authorization link for the OAuth Authorization Code Flow.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizationCodeLink")
    public AuthorizationCodeLink authorizationCodeLink;

    public ConfigVariableTemplate withAuthorizationCodeLink(AuthorizationCodeLink authorizationCodeLink) {
        this.authorizationCodeLink = authorizationCodeLink;
        return this;
    }
    
    /**
     * Description.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public ConfigVariableTemplate withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Display name of the parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;

    public ConfigVariableTemplate withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Enum options. To be populated if `ValueType` is `ENUM`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enumOptions")
    public EnumOption[] enumOptions;

    public ConfigVariableTemplate withEnumOptions(EnumOption[] enumOptions) {
        this.enumOptions = enumOptions;
        return this;
    }
    
    /**
     * Indicates if current template is part of advanced settings
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isAdvanced")
    public Boolean isAdvanced;

    public ConfigVariableTemplate withIsAdvanced(Boolean isAdvanced) {
        this.isAdvanced = isAdvanced;
        return this;
    }
    
    /**
     * Key of the config variable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    public String key;

    public ConfigVariableTemplate withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     * Flag represents that this `ConfigVariable` must be provided for a connection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("required")
    public Boolean required;

    public ConfigVariableTemplate withRequired(Boolean required) {
        this.required = required;
        return this;
    }
    
    /**
     * This configuration defines all the Cloud IAM roles that needs to be granted to a particular GCP resource for the selected prinicpal like service account. These configurations will let UI display to customers what IAM roles need to be granted by them. Or these configurations can be used by the UI to render a 'grant' button to do the same on behalf of the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roleGrant")
    public RoleGrant roleGrant;

    public ConfigVariableTemplate withRoleGrant(RoleGrant roleGrant) {
        this.roleGrant = roleGrant;
        return this;
    }
    
    /**
     * State of the config variable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public ConfigVariableTemplateStateEnum state;

    public ConfigVariableTemplate withState(ConfigVariableTemplateStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Regular expression in RE2 syntax used for validating the `value` of a `ConfigVariable`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("validationRegex")
    public String validationRegex;

    public ConfigVariableTemplate withValidationRegex(String validationRegex) {
        this.validationRegex = validationRegex;
        return this;
    }
    
    /**
     * Type of the parameter: string, int, bool etc. consider custom type for the benefit for the validation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("valueType")
    public ConfigVariableTemplateValueTypeEnum valueType;

    public ConfigVariableTemplate withValueType(ConfigVariableTemplateValueTypeEnum valueType) {
        this.valueType = valueType;
        return this;
    }
    
    public ConfigVariableTemplate(){}
}
