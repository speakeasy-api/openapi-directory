// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CompositeFilterOpEnum - The operator for combining multiple filters.
type CompositeFilterOpEnum string

const (
	CompositeFilterOpEnumOperatorUnspecified CompositeFilterOpEnum = "OPERATOR_UNSPECIFIED"
	CompositeFilterOpEnumAnd                 CompositeFilterOpEnum = "AND"
	CompositeFilterOpEnumOr                  CompositeFilterOpEnum = "OR"
)

func (e *CompositeFilterOpEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "OPERATOR_UNSPECIFIED":
		fallthrough
	case "AND":
		fallthrough
	case "OR":
		*e = CompositeFilterOpEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CompositeFilterOpEnum: %s", s)
	}
}

// CompositeFilter - A filter that merges multiple other filters using the given operator.
type CompositeFilter struct {
	// The list of filters to combine. Requires: * At least one filter is present.
	Filters []Filter `json:"filters,omitempty"`
	// The operator for combining multiple filters.
	Op *CompositeFilterOpEnum `json:"op,omitempty"`
}
