/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Commitment - Represents a regional Commitment resource. Creating a commitment resource means that you are purchasing a committed use contract with an explicit start and end time. You can create commitments based on vCPUs and memory usage and receive discounted rates. For full details, read Signing Up for Committed Use Discounts.
 */
public class Commitment {
    /**
     * Specifies whether to enable automatic renewal for the commitment. The default value is false if not specified. The field can be updated until the day of the commitment expiration at 12:00am PST. If the field is set to true, the commitment will be automatically renewed for either one or three years according to the terms of the existing commitment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoRenew")
    public Boolean autoRenew;

    public Commitment withAutoRenew(Boolean autoRenew) {
        this.autoRenew = autoRenew;
        return this;
    }
    
    /**
     * The category of the commitment. Category MACHINE specifies commitments composed of machine resources such as VCPU or MEMORY, listed in resources. Category LICENSE specifies commitments composed of software licenses, listed in licenseResources. Note that only MACHINE commitments should have a Type specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category")
    public CommitmentCategoryEnum category;

    public Commitment withCategory(CommitmentCategoryEnum category) {
        this.category = category;
        return this;
    }
    
    /**
     * [Output Only] Creation timestamp in RFC3339 text format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creationTimestamp")
    public String creationTimestamp;

    public Commitment withCreationTimestamp(String creationTimestamp) {
        this.creationTimestamp = creationTimestamp;
        return this;
    }
    
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public Commitment withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * [Output Only] Commitment end time in RFC3339 text format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endTimestamp")
    public String endTimestamp;

    public Commitment withEndTimestamp(String endTimestamp) {
        this.endTimestamp = endTimestamp;
        return this;
    }
    
    /**
     * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Commitment withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * [Output Only] Type of the resource. Always compute#commitment for commitments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public Commitment withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Commitment for a particular license resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("licenseResource")
    public LicenseResourceCommitment licenseResource;

    public Commitment withLicenseResource(LicenseResourceCommitment licenseResource) {
        this.licenseResource = licenseResource;
        return this;
    }
    
    /**
     * List of source commitments to be merged into a new commitment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mergeSourceCommitments")
    public String[] mergeSourceCommitments;

    public Commitment withMergeSourceCommitments(String[] mergeSourceCommitments) {
        this.mergeSourceCommitments = mergeSourceCommitments;
        return this;
    }
    
    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Commitment withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The plan for this commitment, which determines duration and discount rate. The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("plan")
    public CommitmentPlanEnum plan;

    public Commitment withPlan(CommitmentPlanEnum plan) {
        this.plan = plan;
        return this;
    }
    
    /**
     * [Output Only] URL of the region where this commitment may be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    public String region;

    public Commitment withRegion(String region) {
        this.region = region;
        return this;
    }
    
    /**
     * List of reservations in this commitment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reservations")
    public Reservation[] reservations;

    public Commitment withReservations(Reservation[] reservations) {
        this.reservations = reservations;
        return this;
    }
    
    /**
     * A list of commitment amounts for particular resources. Note that VCPU and MEMORY resource commitments must occur together.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resources")
    public ResourceCommitment[] resources;

    public Commitment withResources(ResourceCommitment[] resources) {
        this.resources = resources;
        return this;
    }
    
    /**
     * [Output Only] Server-defined URL for the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfLink")
    public String selfLink;

    public Commitment withSelfLink(String selfLink) {
        this.selfLink = selfLink;
        return this;
    }
    
    /**
     * Source commitment to be split into a new commitment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("splitSourceCommitment")
    public String splitSourceCommitment;

    public Commitment withSplitSourceCommitment(String splitSourceCommitment) {
        this.splitSourceCommitment = splitSourceCommitment;
        return this;
    }
    
    /**
     * [Output Only] Commitment start time in RFC3339 text format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startTimestamp")
    public String startTimestamp;

    public Commitment withStartTimestamp(String startTimestamp) {
        this.startTimestamp = startTimestamp;
        return this;
    }
    
    /**
     * [Output Only] Status of the commitment with regards to eventual expiration (each commitment has an end date defined). One of the following values: NOT_YET_ACTIVE, ACTIVE, EXPIRED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public CommitmentStatusEnum status;

    public Commitment withStatus(CommitmentStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * [Output Only] An optional, human-readable explanation of the status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statusMessage")
    public String statusMessage;

    public Commitment withStatusMessage(String statusMessage) {
        this.statusMessage = statusMessage;
        return this;
    }
    
    /**
     * The type of commitment, which affects the discount rate and the eligible resources. Type MEMORY_OPTIMIZED specifies a commitment that will only apply to memory optimized machines. Type ACCELERATOR_OPTIMIZED specifies a commitment that will only apply to accelerator optimized machines.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public CommitmentTypeEnum type;

    public Commitment withType(CommitmentTypeEnum type) {
        this.type = type;
        return this;
    }
    
    public Commitment(){}
}
