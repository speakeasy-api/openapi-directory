// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GuestUnitFeaturesBungalowOrVillaExceptionEnum - Bungalow or villa exception.
type GuestUnitFeaturesBungalowOrVillaExceptionEnum string

const (
	GuestUnitFeaturesBungalowOrVillaExceptionEnumExceptionUnspecified GuestUnitFeaturesBungalowOrVillaExceptionEnum = "EXCEPTION_UNSPECIFIED"
	GuestUnitFeaturesBungalowOrVillaExceptionEnumUnderConstruction    GuestUnitFeaturesBungalowOrVillaExceptionEnum = "UNDER_CONSTRUCTION"
	GuestUnitFeaturesBungalowOrVillaExceptionEnumDependentOnSeason    GuestUnitFeaturesBungalowOrVillaExceptionEnum = "DEPENDENT_ON_SEASON"
	GuestUnitFeaturesBungalowOrVillaExceptionEnumDependentOnDayOfWeek GuestUnitFeaturesBungalowOrVillaExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *GuestUnitFeaturesBungalowOrVillaExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = GuestUnitFeaturesBungalowOrVillaExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GuestUnitFeaturesBungalowOrVillaExceptionEnum: %s", s)
	}
}

// GuestUnitFeaturesConnectingUnitAvailableExceptionEnum - Connecting unit available exception.
type GuestUnitFeaturesConnectingUnitAvailableExceptionEnum string

const (
	GuestUnitFeaturesConnectingUnitAvailableExceptionEnumExceptionUnspecified GuestUnitFeaturesConnectingUnitAvailableExceptionEnum = "EXCEPTION_UNSPECIFIED"
	GuestUnitFeaturesConnectingUnitAvailableExceptionEnumUnderConstruction    GuestUnitFeaturesConnectingUnitAvailableExceptionEnum = "UNDER_CONSTRUCTION"
	GuestUnitFeaturesConnectingUnitAvailableExceptionEnumDependentOnSeason    GuestUnitFeaturesConnectingUnitAvailableExceptionEnum = "DEPENDENT_ON_SEASON"
	GuestUnitFeaturesConnectingUnitAvailableExceptionEnumDependentOnDayOfWeek GuestUnitFeaturesConnectingUnitAvailableExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *GuestUnitFeaturesConnectingUnitAvailableExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = GuestUnitFeaturesConnectingUnitAvailableExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GuestUnitFeaturesConnectingUnitAvailableExceptionEnum: %s", s)
	}
}

// GuestUnitFeaturesExecutiveFloorExceptionEnum - Executive floor exception.
type GuestUnitFeaturesExecutiveFloorExceptionEnum string

const (
	GuestUnitFeaturesExecutiveFloorExceptionEnumExceptionUnspecified GuestUnitFeaturesExecutiveFloorExceptionEnum = "EXCEPTION_UNSPECIFIED"
	GuestUnitFeaturesExecutiveFloorExceptionEnumUnderConstruction    GuestUnitFeaturesExecutiveFloorExceptionEnum = "UNDER_CONSTRUCTION"
	GuestUnitFeaturesExecutiveFloorExceptionEnumDependentOnSeason    GuestUnitFeaturesExecutiveFloorExceptionEnum = "DEPENDENT_ON_SEASON"
	GuestUnitFeaturesExecutiveFloorExceptionEnumDependentOnDayOfWeek GuestUnitFeaturesExecutiveFloorExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *GuestUnitFeaturesExecutiveFloorExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = GuestUnitFeaturesExecutiveFloorExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GuestUnitFeaturesExecutiveFloorExceptionEnum: %s", s)
	}
}

// GuestUnitFeaturesMaxAdultOccupantsCountExceptionEnum - Max adult occupants count exception.
type GuestUnitFeaturesMaxAdultOccupantsCountExceptionEnum string

const (
	GuestUnitFeaturesMaxAdultOccupantsCountExceptionEnumExceptionUnspecified GuestUnitFeaturesMaxAdultOccupantsCountExceptionEnum = "EXCEPTION_UNSPECIFIED"
	GuestUnitFeaturesMaxAdultOccupantsCountExceptionEnumUnderConstruction    GuestUnitFeaturesMaxAdultOccupantsCountExceptionEnum = "UNDER_CONSTRUCTION"
	GuestUnitFeaturesMaxAdultOccupantsCountExceptionEnumDependentOnSeason    GuestUnitFeaturesMaxAdultOccupantsCountExceptionEnum = "DEPENDENT_ON_SEASON"
	GuestUnitFeaturesMaxAdultOccupantsCountExceptionEnumDependentOnDayOfWeek GuestUnitFeaturesMaxAdultOccupantsCountExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *GuestUnitFeaturesMaxAdultOccupantsCountExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = GuestUnitFeaturesMaxAdultOccupantsCountExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GuestUnitFeaturesMaxAdultOccupantsCountExceptionEnum: %s", s)
	}
}

// GuestUnitFeaturesMaxChildOccupantsCountExceptionEnum - Max child occupants count exception.
type GuestUnitFeaturesMaxChildOccupantsCountExceptionEnum string

const (
	GuestUnitFeaturesMaxChildOccupantsCountExceptionEnumExceptionUnspecified GuestUnitFeaturesMaxChildOccupantsCountExceptionEnum = "EXCEPTION_UNSPECIFIED"
	GuestUnitFeaturesMaxChildOccupantsCountExceptionEnumUnderConstruction    GuestUnitFeaturesMaxChildOccupantsCountExceptionEnum = "UNDER_CONSTRUCTION"
	GuestUnitFeaturesMaxChildOccupantsCountExceptionEnumDependentOnSeason    GuestUnitFeaturesMaxChildOccupantsCountExceptionEnum = "DEPENDENT_ON_SEASON"
	GuestUnitFeaturesMaxChildOccupantsCountExceptionEnumDependentOnDayOfWeek GuestUnitFeaturesMaxChildOccupantsCountExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *GuestUnitFeaturesMaxChildOccupantsCountExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = GuestUnitFeaturesMaxChildOccupantsCountExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GuestUnitFeaturesMaxChildOccupantsCountExceptionEnum: %s", s)
	}
}

// GuestUnitFeaturesMaxOccupantsCountExceptionEnum - Max occupants count exception.
type GuestUnitFeaturesMaxOccupantsCountExceptionEnum string

const (
	GuestUnitFeaturesMaxOccupantsCountExceptionEnumExceptionUnspecified GuestUnitFeaturesMaxOccupantsCountExceptionEnum = "EXCEPTION_UNSPECIFIED"
	GuestUnitFeaturesMaxOccupantsCountExceptionEnumUnderConstruction    GuestUnitFeaturesMaxOccupantsCountExceptionEnum = "UNDER_CONSTRUCTION"
	GuestUnitFeaturesMaxOccupantsCountExceptionEnumDependentOnSeason    GuestUnitFeaturesMaxOccupantsCountExceptionEnum = "DEPENDENT_ON_SEASON"
	GuestUnitFeaturesMaxOccupantsCountExceptionEnumDependentOnDayOfWeek GuestUnitFeaturesMaxOccupantsCountExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *GuestUnitFeaturesMaxOccupantsCountExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = GuestUnitFeaturesMaxOccupantsCountExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GuestUnitFeaturesMaxOccupantsCountExceptionEnum: %s", s)
	}
}

// GuestUnitFeaturesPrivateHomeExceptionEnum - Private home exception.
type GuestUnitFeaturesPrivateHomeExceptionEnum string

const (
	GuestUnitFeaturesPrivateHomeExceptionEnumExceptionUnspecified GuestUnitFeaturesPrivateHomeExceptionEnum = "EXCEPTION_UNSPECIFIED"
	GuestUnitFeaturesPrivateHomeExceptionEnumUnderConstruction    GuestUnitFeaturesPrivateHomeExceptionEnum = "UNDER_CONSTRUCTION"
	GuestUnitFeaturesPrivateHomeExceptionEnumDependentOnSeason    GuestUnitFeaturesPrivateHomeExceptionEnum = "DEPENDENT_ON_SEASON"
	GuestUnitFeaturesPrivateHomeExceptionEnumDependentOnDayOfWeek GuestUnitFeaturesPrivateHomeExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *GuestUnitFeaturesPrivateHomeExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = GuestUnitFeaturesPrivateHomeExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GuestUnitFeaturesPrivateHomeExceptionEnum: %s", s)
	}
}

// GuestUnitFeaturesSuiteExceptionEnum - Suite exception.
type GuestUnitFeaturesSuiteExceptionEnum string

const (
	GuestUnitFeaturesSuiteExceptionEnumExceptionUnspecified GuestUnitFeaturesSuiteExceptionEnum = "EXCEPTION_UNSPECIFIED"
	GuestUnitFeaturesSuiteExceptionEnumUnderConstruction    GuestUnitFeaturesSuiteExceptionEnum = "UNDER_CONSTRUCTION"
	GuestUnitFeaturesSuiteExceptionEnumDependentOnSeason    GuestUnitFeaturesSuiteExceptionEnum = "DEPENDENT_ON_SEASON"
	GuestUnitFeaturesSuiteExceptionEnumDependentOnDayOfWeek GuestUnitFeaturesSuiteExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *GuestUnitFeaturesSuiteExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = GuestUnitFeaturesSuiteExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GuestUnitFeaturesSuiteExceptionEnum: %s", s)
	}
}

// GuestUnitFeaturesTierEnum - Tier. Classification of the unit based on available features/amenities. A non-standard tier is only permitted if at least one other unit type falls under the standard tier.
type GuestUnitFeaturesTierEnum string

const (
	GuestUnitFeaturesTierEnumUnitTierUnspecified GuestUnitFeaturesTierEnum = "UNIT_TIER_UNSPECIFIED"
	GuestUnitFeaturesTierEnumStandardUnit        GuestUnitFeaturesTierEnum = "STANDARD_UNIT"
	GuestUnitFeaturesTierEnumDeluxeUnit          GuestUnitFeaturesTierEnum = "DELUXE_UNIT"
)

func (e *GuestUnitFeaturesTierEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UNIT_TIER_UNSPECIFIED":
		fallthrough
	case "STANDARD_UNIT":
		fallthrough
	case "DELUXE_UNIT":
		*e = GuestUnitFeaturesTierEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GuestUnitFeaturesTierEnum: %s", s)
	}
}

// GuestUnitFeaturesTierExceptionEnum - Tier exception.
type GuestUnitFeaturesTierExceptionEnum string

const (
	GuestUnitFeaturesTierExceptionEnumExceptionUnspecified GuestUnitFeaturesTierExceptionEnum = "EXCEPTION_UNSPECIFIED"
	GuestUnitFeaturesTierExceptionEnumUnderConstruction    GuestUnitFeaturesTierExceptionEnum = "UNDER_CONSTRUCTION"
	GuestUnitFeaturesTierExceptionEnumDependentOnSeason    GuestUnitFeaturesTierExceptionEnum = "DEPENDENT_ON_SEASON"
	GuestUnitFeaturesTierExceptionEnumDependentOnDayOfWeek GuestUnitFeaturesTierExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *GuestUnitFeaturesTierExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = GuestUnitFeaturesTierExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GuestUnitFeaturesTierExceptionEnum: %s", s)
	}
}

// GuestUnitFeatures - Features and available amenities in the guest unit.
type GuestUnitFeatures struct {
	// Bungalow or villa. An independent structure that is part of a hotel or resort that is rented to one party for a vacation stay. The hotel or resort may be completely comprised of bungalows or villas, or they may be one of several guestroom options. Guests in the bungalows or villas most often have the same, if not more, amenities and services offered to guests in other guestroom types.
	BungalowOrVilla *bool `json:"bungalowOrVilla,omitempty"`
	// Bungalow or villa exception.
	BungalowOrVillaException *GuestUnitFeaturesBungalowOrVillaExceptionEnum `json:"bungalowOrVillaException,omitempty"`
	// Connecting unit available. A guestroom type that features access to an adjacent guestroom for the purpose of booking both rooms. Most often used by families who need more than one room to accommodate the number of people in their group.
	ConnectingUnitAvailable *bool `json:"connectingUnitAvailable,omitempty"`
	// Connecting unit available exception.
	ConnectingUnitAvailableException *GuestUnitFeaturesConnectingUnitAvailableExceptionEnum `json:"connectingUnitAvailableException,omitempty"`
	// Executive floor. A floor of the hotel where the guestrooms are only bookable by members of the hotel's frequent guest membership program. Benefits of this room class include access to a designated lounge which may or may not feature free breakfast, cocktails or other perks specific to members of the program.
	ExecutiveFloor *bool `json:"executiveFloor,omitempty"`
	// Executive floor exception.
	ExecutiveFloorException *GuestUnitFeaturesExecutiveFloorExceptionEnum `json:"executiveFloorException,omitempty"`
	// Max adult occupants count. The total number of adult guests allowed to stay overnight in the guestroom.
	MaxAdultOccupantsCount *int `json:"maxAdultOccupantsCount,omitempty"`
	// Max adult occupants count exception.
	MaxAdultOccupantsCountException *GuestUnitFeaturesMaxAdultOccupantsCountExceptionEnum `json:"maxAdultOccupantsCountException,omitempty"`
	// Max child occupants count. The total number of children allowed to stay overnight in the room.
	MaxChildOccupantsCount *int `json:"maxChildOccupantsCount,omitempty"`
	// Max child occupants count exception.
	MaxChildOccupantsCountException *GuestUnitFeaturesMaxChildOccupantsCountExceptionEnum `json:"maxChildOccupantsCountException,omitempty"`
	// Max occupants count. The total number of guests allowed to stay overnight in the guestroom.
	MaxOccupantsCount *int `json:"maxOccupantsCount,omitempty"`
	// Max occupants count exception.
	MaxOccupantsCountException *GuestUnitFeaturesMaxOccupantsCountExceptionEnum `json:"maxOccupantsCountException,omitempty"`
	// Private home. A privately owned home (house, townhouse, apartment, cabin, bungalow etc) that may or not serve as the owner's residence, but is rented out in its entirety or by the room(s) to paying guest(s) for vacation stays. Not for lease-based, long-term residency.
	PrivateHome *bool `json:"privateHome,omitempty"`
	// Private home exception.
	PrivateHomeException *GuestUnitFeaturesPrivateHomeExceptionEnum `json:"privateHomeException,omitempty"`
	// Suite. A guestroom category that implies both a bedroom area and a separate living area. There may or may not be full walls and doors separating the two areas, but regardless, they are very distinct. Does not mean a couch or chair in a bedroom.
	Suite *bool `json:"suite,omitempty"`
	// Suite exception.
	SuiteException *GuestUnitFeaturesSuiteExceptionEnum `json:"suiteException,omitempty"`
	// Tier. Classification of the unit based on available features/amenities. A non-standard tier is only permitted if at least one other unit type falls under the standard tier.
	Tier *GuestUnitFeaturesTierEnum `json:"tier,omitempty"`
	// Tier exception.
	TierException *GuestUnitFeaturesTierExceptionEnum `json:"tierException,omitempty"`
	// An individual room, such as kitchen, bathroom, bedroom, within a bookable guest unit.
	TotalLivingAreas *LivingArea `json:"totalLivingAreas,omitempty"`
	// Views available from the guest unit itself.
	Views *ViewsFromUnit `json:"views,omitempty"`
}
