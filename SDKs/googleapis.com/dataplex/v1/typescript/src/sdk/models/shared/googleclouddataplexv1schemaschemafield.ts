/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * Required. Additional field semantics.
 */
export enum GoogleCloudDataplexV1SchemaSchemaFieldModeEnum {
  ModeUnspecified = "MODE_UNSPECIFIED",
  Required = "REQUIRED",
  Nullable = "NULLABLE",
  Repeated = "REPEATED",
}

/**
 * Required. The type of field.
 */
export enum GoogleCloudDataplexV1SchemaSchemaFieldTypeEnum {
  TypeUnspecified = "TYPE_UNSPECIFIED",
  Boolean = "BOOLEAN",
  Byte = "BYTE",
  Int16 = "INT16",
  Int32 = "INT32",
  Int64 = "INT64",
  Float = "FLOAT",
  Double = "DOUBLE",
  Decimal = "DECIMAL",
  String = "STRING",
  Binary = "BINARY",
  Timestamp = "TIMESTAMP",
  Date = "DATE",
  Time = "TIME",
  Record = "RECORD",
  Null = "NULL",
}

/**
 * Represents a column field within a table schema.
 */
export class GoogleCloudDataplexV1SchemaSchemaField extends SpeakeasyBase {
  /**
   * Optional. User friendly field description. Must be less than or equal to 1024 characters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Optional. Any nested field for complex types.
   */
  @SpeakeasyMetadata({ elemType: GoogleCloudDataplexV1SchemaSchemaField })
  @Expose({ name: "fields" })
  @Type(() => GoogleCloudDataplexV1SchemaSchemaField)
  fields?: GoogleCloudDataplexV1SchemaSchemaField[];

  /**
   * Required. Additional field semantics.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mode" })
  mode?: GoogleCloudDataplexV1SchemaSchemaFieldModeEnum;

  /**
   * Required. The name of the field. Must contain only letters, numbers and underscores, with a maximum length of 767 characters, and must begin with a letter or underscore.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Required. The type of field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: GoogleCloudDataplexV1SchemaSchemaFieldTypeEnum;
}
