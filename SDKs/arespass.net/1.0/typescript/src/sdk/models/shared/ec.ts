/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export class EcAlphabetSequence extends SpeakeasyBase {
  /**
   * The n-th character.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "char" })
  char?: string;

  /**
   * The n-th character after the l33t transformation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "l33tchar" })
  l33tchar?: string;

  /**
   * The penalty applied to this character if it is part of an alphabet sequence.
   *
   * @remarks
   *
   * The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "penalty" })
  penalty?: number;
}

export class EcEntropyDistribution extends SpeakeasyBase {
  /**
   * The n-th character.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "char" })
  char?: string;

  /**
   * The n-th character after the l33t transformation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "l33tchar" })
  l33tchar?: string;

  /**
   * The amount of entropy contributed by this character, expressed as percentage of the total.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "percentage" })
  percentage?: number;
}

export class EcKeyboardSequence extends SpeakeasyBase {
  /**
   * The n-th character.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "char" })
  char?: string;

  /**
   * The n-th character after the l33t transformation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "l33tchar" })
  l33tchar?: string;

  /**
   * The penalty applied to this character if it is part of a keyboard sequence.
   *
   * @remarks
   *
   * The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "penalty" })
  penalty?: number;
}

export class EcNumberSequence extends SpeakeasyBase {
  /**
   * The n-th character.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "char" })
  char?: string;

  /**
   * The n-th character after the l33t transformation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "l33tchar" })
  l33tchar?: string;

  /**
   * The penalty applied to this character if it is part of a number sequence.
   *
   * @remarks
   *
   * The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "penalty" })
  penalty?: number;
}

export class EcRepeatedChars extends SpeakeasyBase {
  /**
   * The n-th character.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "char" })
  char?: string;

  /**
   * The n-th character after the l33t transformation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "l33tchar" })
  l33tchar?: string;

  /**
   * The penalty applied to this character if it is repeated.
   *
   * @remarks
   *
   * The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "penalty" })
  penalty?: number;
}

export class EcTotal extends SpeakeasyBase {
  /**
   * The n-th character.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "char" })
  char?: string;

  /**
   * The n-th character after the l33t transformation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "l33tchar" })
  l33tchar?: string;

  /**
   * The total penalty applied to each character.
   *
   * @remarks
   *
   * The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "penalty" })
  penalty?: number;
}

export class EcWords extends SpeakeasyBase {
  /**
   * The n-th character.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "char" })
  char?: string;

  /**
   * The n-th character after the l33t transformation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "l33tchar" })
  l33tchar?: string;

  /**
   * The penalty applied to this character if it is part of a word.
   *
   * @remarks
   *
   * The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "penalty" })
  penalty?: number;
}

/**
 * The password analysis, including the calculated entropy.
 */
export class Ec extends SpeakeasyBase {
  /**
   * **The penalty applied to each character that has been found to be part of an alphabet sequence.**
   *
   * @remarks
   *
   * The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
   *
   */
  @SpeakeasyMetadata({ elemType: EcAlphabetSequence })
  @Expose({ name: "alphabetSequence" })
  @Type(() => EcAlphabetSequence)
  alphabetSequence?: EcAlphabetSequence[];

  /**
   * **This API version number.**
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "apiVersion" })
  apiVersion?: string;

  /**
   * **The detected keyboard, QWERTY or Dvorak.**
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "detectedKeyboard" })
  detectedKeyboard?: string;

  /**
   * **The ratio entropy / idealEntropy.**
   *
   * @remarks
   *
   * It is a float number in the range [0, 1].
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "efficiency" })
  efficiency?: number;

  /**
   * **The entropy calculated for the input password.**
   *
   * @remarks
   *
   * It is measured in bits.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "entropy" })
  entropy?: number;

  /**
   * **The distribution of the calculated entropy among the password characters.**
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({ elemType: EcEntropyDistribution })
  @Expose({ name: "entropyDistribution" })
  @Type(() => EcEntropyDistribution)
  entropyDistribution?: EcEntropyDistribution[];

  /**
   * **The Shannon entropy.**
   *
   * @remarks
   *
   * The Shannon entropy is the entropy calculated if no penalizations - words, number sequence, alphabet sequence, etc - were found in the password.
   *
   * It is measured in bits.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "idealEntropy" })
  idealEntropy?: number;

  /**
   * **The penalty applied to each character that has been found to be part of a keyboard sequence.**
   *
   * @remarks
   *
   * The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
   *
   */
  @SpeakeasyMetadata({ elemType: EcKeyboardSequence })
  @Expose({ name: "keyboardSequence" })
  @Type(() => EcKeyboardSequence)
  keyboardSequence?: EcKeyboardSequence[];

  /**
   * The analyzed password after the l33t substitution.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "l33tPassword" })
  l33tPassword?: string;

  /**
   * **The penalty applied to the whole password because of irregular entropy distribution.**
   *
   * @remarks
   *
   * This penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nonUniformEntropyDistributionPenalty" })
  nonUniformEntropyDistributionPenalty?: number;

  /**
   * **The penalty applied to each character that has been found to be part of a number sequence.**
   *
   * @remarks
   *
   * The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
   *
   */
  @SpeakeasyMetadata({ elemType: EcNumberSequence })
  @Expose({ name: "numberSequence" })
  @Type(() => EcNumberSequence)
  numberSequence?: EcNumberSequence[];

  /**
   * The analyzed password.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "password" })
  password?: string;

  /**
   * The number of characters the password has.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "passwordLength" })
  passwordLength?: number;

  /**
   * **The penalty applied to each character that has been found to be part of a word, number sequence, alphabet sequence, etc.**
   *
   * @remarks
   *
   * The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
   *
   * Its value is equal to the value of the input parameter *penalty*.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "penalty" })
  penalty?: number;

  /**
   * **The penalty applied to each character that are repeated**
   *
   * @remarks
   *
   * The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
   *
   */
  @SpeakeasyMetadata({ elemType: EcRepeatedChars })
  @Expose({ name: "repeatedChars" })
  @Type(() => EcRepeatedChars)
  repeatedChars?: EcRepeatedChars[];

  /**
   * **The identifier of the request that corresponds to this response.**
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestId" })
  requestId?: string;

  /**
   * **The timestamp for this response.**
   *
   * @remarks
   *
   * Milliseconds from the epoch of 1970-01-01T00:00:00Z.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestTimestamp" })
  requestTimestamp?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "summary" })
  summary?: string[];

  /**
   * **The total penalty applied to each character.**
   *
   * @remarks
   *
   * The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
   *
   */
  @SpeakeasyMetadata({ elemType: EcTotal })
  @Expose({ name: "total" })
  @Type(() => EcTotal)
  total?: EcTotal[];

  /**
   * **The penalty applied to each character that has been found to be part of a word.**
   *
   * @remarks
   *
   * The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
   *
   */
  @SpeakeasyMetadata({ elemType: EcWords })
  @Expose({ name: "words" })
  @Type(() => EcWords)
  words?: EcWords[];
}
