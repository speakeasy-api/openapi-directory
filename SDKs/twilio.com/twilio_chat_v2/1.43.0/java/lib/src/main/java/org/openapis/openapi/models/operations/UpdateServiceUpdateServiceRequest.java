/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class UpdateServiceUpdateServiceRequest {
    /**
     * DEPRECATED. The interval in seconds between consumption reports submission batches from client endpoints.
     */
    @SpeakeasyMetadata("form:name=ConsumptionReportInterval")
    public Long consumptionReportInterval;

    public UpdateServiceUpdateServiceRequest withConsumptionReportInterval(Long consumptionReportInterval) {
        this.consumptionReportInterval = consumptionReportInterval;
        return this;
    }
    
    /**
     * The channel role assigned to a channel creator when they join a new channel. See the [Role resource](https://www.twilio.com/docs/chat/rest/role-resource) for more info about roles.
     */
    @SpeakeasyMetadata("form:name=DefaultChannelCreatorRoleSid")
    public String defaultChannelCreatorRoleSid;

    public UpdateServiceUpdateServiceRequest withDefaultChannelCreatorRoleSid(String defaultChannelCreatorRoleSid) {
        this.defaultChannelCreatorRoleSid = defaultChannelCreatorRoleSid;
        return this;
    }
    
    /**
     * The channel role assigned to users when they are added to a channel. See the [Role resource](https://www.twilio.com/docs/chat/rest/role-resource) for more info about roles.
     */
    @SpeakeasyMetadata("form:name=DefaultChannelRoleSid")
    public String defaultChannelRoleSid;

    public UpdateServiceUpdateServiceRequest withDefaultChannelRoleSid(String defaultChannelRoleSid) {
        this.defaultChannelRoleSid = defaultChannelRoleSid;
        return this;
    }
    
    /**
     * The service role assigned to users when they are added to the service. See the [Role resource](https://www.twilio.com/docs/chat/rest/role-resource) for more info about roles.
     */
    @SpeakeasyMetadata("form:name=DefaultServiceRoleSid")
    public String defaultServiceRoleSid;

    public UpdateServiceUpdateServiceRequest withDefaultServiceRoleSid(String defaultServiceRoleSid) {
        this.defaultServiceRoleSid = defaultServiceRoleSid;
        return this;
    }
    
    /**
     * A descriptive string that you create to describe the resource.
     */
    @SpeakeasyMetadata("form:name=FriendlyName")
    public String friendlyName;

    public UpdateServiceUpdateServiceRequest withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }
    
    /**
     * The maximum number of Members that can be added to Channels within this Service. Can be up to 1,000.
     */
    @SpeakeasyMetadata("form:name=Limits.ChannelMembers")
    public Long limitsChannelMembers;

    public UpdateServiceUpdateServiceRequest withLimitsChannelMembers(Long limitsChannelMembers) {
        this.limitsChannelMembers = limitsChannelMembers;
        return this;
    }
    
    /**
     * The maximum number of Channels Users can be a Member of within this Service. Can be up to 1,000.
     */
    @SpeakeasyMetadata("form:name=Limits.UserChannels")
    public Long limitsUserChannels;

    public UpdateServiceUpdateServiceRequest withLimitsUserChannels(Long limitsUserChannels) {
        this.limitsUserChannels = limitsUserChannels;
        return this;
    }
    
    /**
     * The message to send when a media message has no text. Can be used as placeholder message.
     */
    @SpeakeasyMetadata("form:name=Media.CompatibilityMessage")
    public String mediaCompatibilityMessage;

    public UpdateServiceUpdateServiceRequest withMediaCompatibilityMessage(String mediaCompatibilityMessage) {
        this.mediaCompatibilityMessage = mediaCompatibilityMessage;
        return this;
    }
    
    /**
     * Whether to send a notification when a member is added to a channel. The default is `false`.
     */
    @SpeakeasyMetadata("form:name=Notifications.AddedToChannel.Enabled")
    public Boolean notificationsAddedToChannelEnabled;

    public UpdateServiceUpdateServiceRequest withNotificationsAddedToChannelEnabled(Boolean notificationsAddedToChannelEnabled) {
        this.notificationsAddedToChannelEnabled = notificationsAddedToChannelEnabled;
        return this;
    }
    
    /**
     * The name of the sound to play when a member is added to a channel and `notifications.added_to_channel.enabled` is `true`.
     */
    @SpeakeasyMetadata("form:name=Notifications.AddedToChannel.Sound")
    public String notificationsAddedToChannelSound;

    public UpdateServiceUpdateServiceRequest withNotificationsAddedToChannelSound(String notificationsAddedToChannelSound) {
        this.notificationsAddedToChannelSound = notificationsAddedToChannelSound;
        return this;
    }
    
    /**
     * The template to use to create the notification text displayed when a member is added to a channel and `notifications.added_to_channel.enabled` is `true`.
     */
    @SpeakeasyMetadata("form:name=Notifications.AddedToChannel.Template")
    public String notificationsAddedToChannelTemplate;

    public UpdateServiceUpdateServiceRequest withNotificationsAddedToChannelTemplate(String notificationsAddedToChannelTemplate) {
        this.notificationsAddedToChannelTemplate = notificationsAddedToChannelTemplate;
        return this;
    }
    
    /**
     * Whether to send a notification when a user is invited to a channel. The default is `false`.
     */
    @SpeakeasyMetadata("form:name=Notifications.InvitedToChannel.Enabled")
    public Boolean notificationsInvitedToChannelEnabled;

    public UpdateServiceUpdateServiceRequest withNotificationsInvitedToChannelEnabled(Boolean notificationsInvitedToChannelEnabled) {
        this.notificationsInvitedToChannelEnabled = notificationsInvitedToChannelEnabled;
        return this;
    }
    
    /**
     * The name of the sound to play when a user is invited to a channel and `notifications.invited_to_channel.enabled` is `true`.
     */
    @SpeakeasyMetadata("form:name=Notifications.InvitedToChannel.Sound")
    public String notificationsInvitedToChannelSound;

    public UpdateServiceUpdateServiceRequest withNotificationsInvitedToChannelSound(String notificationsInvitedToChannelSound) {
        this.notificationsInvitedToChannelSound = notificationsInvitedToChannelSound;
        return this;
    }
    
    /**
     * The template to use to create the notification text displayed when a user is invited to a channel and `notifications.invited_to_channel.enabled` is `true`.
     */
    @SpeakeasyMetadata("form:name=Notifications.InvitedToChannel.Template")
    public String notificationsInvitedToChannelTemplate;

    public UpdateServiceUpdateServiceRequest withNotificationsInvitedToChannelTemplate(String notificationsInvitedToChannelTemplate) {
        this.notificationsInvitedToChannelTemplate = notificationsInvitedToChannelTemplate;
        return this;
    }
    
    /**
     * Whether to log notifications. The default is `false`.
     */
    @SpeakeasyMetadata("form:name=Notifications.LogEnabled")
    public Boolean notificationsLogEnabled;

    public UpdateServiceUpdateServiceRequest withNotificationsLogEnabled(Boolean notificationsLogEnabled) {
        this.notificationsLogEnabled = notificationsLogEnabled;
        return this;
    }
    
    /**
     * Whether the new message badge is enabled. The default is `false`.
     */
    @SpeakeasyMetadata("form:name=Notifications.NewMessage.BadgeCountEnabled")
    public Boolean notificationsNewMessageBadgeCountEnabled;

    public UpdateServiceUpdateServiceRequest withNotificationsNewMessageBadgeCountEnabled(Boolean notificationsNewMessageBadgeCountEnabled) {
        this.notificationsNewMessageBadgeCountEnabled = notificationsNewMessageBadgeCountEnabled;
        return this;
    }
    
    /**
     * Whether to send a notification when a new message is added to a channel. The default is `false`.
     */
    @SpeakeasyMetadata("form:name=Notifications.NewMessage.Enabled")
    public Boolean notificationsNewMessageEnabled;

    public UpdateServiceUpdateServiceRequest withNotificationsNewMessageEnabled(Boolean notificationsNewMessageEnabled) {
        this.notificationsNewMessageEnabled = notificationsNewMessageEnabled;
        return this;
    }
    
    /**
     * The name of the sound to play when a new message is added to a channel and `notifications.new_message.enabled` is `true`.
     */
    @SpeakeasyMetadata("form:name=Notifications.NewMessage.Sound")
    public String notificationsNewMessageSound;

    public UpdateServiceUpdateServiceRequest withNotificationsNewMessageSound(String notificationsNewMessageSound) {
        this.notificationsNewMessageSound = notificationsNewMessageSound;
        return this;
    }
    
    /**
     * The template to use to create the notification text displayed when a new message is added to a channel and `notifications.new_message.enabled` is `true`.
     */
    @SpeakeasyMetadata("form:name=Notifications.NewMessage.Template")
    public String notificationsNewMessageTemplate;

    public UpdateServiceUpdateServiceRequest withNotificationsNewMessageTemplate(String notificationsNewMessageTemplate) {
        this.notificationsNewMessageTemplate = notificationsNewMessageTemplate;
        return this;
    }
    
    /**
     * Whether to send a notification to a user when they are removed from a channel. The default is `false`.
     */
    @SpeakeasyMetadata("form:name=Notifications.RemovedFromChannel.Enabled")
    public Boolean notificationsRemovedFromChannelEnabled;

    public UpdateServiceUpdateServiceRequest withNotificationsRemovedFromChannelEnabled(Boolean notificationsRemovedFromChannelEnabled) {
        this.notificationsRemovedFromChannelEnabled = notificationsRemovedFromChannelEnabled;
        return this;
    }
    
    /**
     * The name of the sound to play to a user when they are removed from a channel and `notifications.removed_from_channel.enabled` is `true`.
     */
    @SpeakeasyMetadata("form:name=Notifications.RemovedFromChannel.Sound")
    public String notificationsRemovedFromChannelSound;

    public UpdateServiceUpdateServiceRequest withNotificationsRemovedFromChannelSound(String notificationsRemovedFromChannelSound) {
        this.notificationsRemovedFromChannelSound = notificationsRemovedFromChannelSound;
        return this;
    }
    
    /**
     * The template to use to create the notification text displayed to a user when they are removed from a channel and `notifications.removed_from_channel.enabled` is `true`.
     */
    @SpeakeasyMetadata("form:name=Notifications.RemovedFromChannel.Template")
    public String notificationsRemovedFromChannelTemplate;

    public UpdateServiceUpdateServiceRequest withNotificationsRemovedFromChannelTemplate(String notificationsRemovedFromChannelTemplate) {
        this.notificationsRemovedFromChannelTemplate = notificationsRemovedFromChannelTemplate;
        return this;
    }
    
    /**
     * The number of times to retry a call to the `post_webhook_url` if the request times out (after 5 seconds) or it receives a 429, 503, or 504 HTTP response. The default is 0, which means the call won't be retried.
     */
    @SpeakeasyMetadata("form:name=PostWebhookRetryCount")
    public Long postWebhookRetryCount;

    public UpdateServiceUpdateServiceRequest withPostWebhookRetryCount(Long postWebhookRetryCount) {
        this.postWebhookRetryCount = postWebhookRetryCount;
        return this;
    }
    
    /**
     * The URL for post-event webhooks, which are called by using the `webhook_method`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
     */
    @SpeakeasyMetadata("form:name=PostWebhookUrl")
    public String postWebhookUrl;

    public UpdateServiceUpdateServiceRequest withPostWebhookUrl(String postWebhookUrl) {
        this.postWebhookUrl = postWebhookUrl;
        return this;
    }
    
    /**
     * The number of times to retry a call to the `pre_webhook_url` if the request times out (after 5 seconds) or it receives a 429, 503, or 504 HTTP response. Default retry count is 0 times, which means the call won't be retried.
     */
    @SpeakeasyMetadata("form:name=PreWebhookRetryCount")
    public Long preWebhookRetryCount;

    public UpdateServiceUpdateServiceRequest withPreWebhookRetryCount(Long preWebhookRetryCount) {
        this.preWebhookRetryCount = preWebhookRetryCount;
        return this;
    }
    
    /**
     * The URL for pre-event webhooks, which are called by using the `webhook_method`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
     */
    @SpeakeasyMetadata("form:name=PreWebhookUrl")
    public String preWebhookUrl;

    public UpdateServiceUpdateServiceRequest withPreWebhookUrl(String preWebhookUrl) {
        this.preWebhookUrl = preWebhookUrl;
        return this;
    }
    
    /**
     * Whether to enable the [Reachability Indicator](https://www.twilio.com/docs/chat/reachability-indicator) for this Service instance. The default is `false`.
     */
    @SpeakeasyMetadata("form:name=ReachabilityEnabled")
    public Boolean reachabilityEnabled;

    public UpdateServiceUpdateServiceRequest withReachabilityEnabled(Boolean reachabilityEnabled) {
        this.reachabilityEnabled = reachabilityEnabled;
        return this;
    }
    
    /**
     * Whether to enable the [Message Consumption Horizon](https://www.twilio.com/docs/chat/consumption-horizon) feature. The default is `true`.
     */
    @SpeakeasyMetadata("form:name=ReadStatusEnabled")
    public Boolean readStatusEnabled;

    public UpdateServiceUpdateServiceRequest withReadStatusEnabled(Boolean readStatusEnabled) {
        this.readStatusEnabled = readStatusEnabled;
        return this;
    }
    
    /**
     * How long in seconds after a `started typing` event until clients should assume that user is no longer typing, even if no `ended typing` message was received.  The default is 5 seconds.
     */
    @SpeakeasyMetadata("form:name=TypingIndicatorTimeout")
    public Long typingIndicatorTimeout;

    public UpdateServiceUpdateServiceRequest withTypingIndicatorTimeout(Long typingIndicatorTimeout) {
        this.typingIndicatorTimeout = typingIndicatorTimeout;
        return this;
    }
    
    /**
     * The list of webhook events that are enabled for this Service instance. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
     */
    @SpeakeasyMetadata("form:name=WebhookFilters")
    public String[] webhookFilters;

    public UpdateServiceUpdateServiceRequest withWebhookFilters(String[] webhookFilters) {
        this.webhookFilters = webhookFilters;
        return this;
    }
    
    /**
     * The HTTP method to use for calls to the `pre_webhook_url` and `post_webhook_url` webhooks.  Can be: `POST` or `GET` and the default is `POST`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
     */
    @SpeakeasyMetadata("form:name=WebhookMethod")
    public UpdateServiceUpdateServiceRequestWebhookMethodEnum webhookMethod;

    public UpdateServiceUpdateServiceRequest withWebhookMethod(UpdateServiceUpdateServiceRequestWebhookMethodEnum webhookMethod) {
        this.webhookMethod = webhookMethod;
        return this;
    }
    
    public UpdateServiceUpdateServiceRequest(){}
}
