"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import functionrequest as shared_functionrequest
from ..shared import propertydefinitionrequest as shared_propertydefinitionrequest
from ..shared import propertygrouprequest as shared_propertygrouprequest
from ..shared import updatecomponenttyperesponse as shared_updatecomponenttyperesponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateComponentTypeRequestBody:
    
    component_type_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('componentTypeName'), 'exclude': lambda f: f is None }})
    r"""The component type name."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the component type."""  
    extends_from: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extendsFrom'), 'exclude': lambda f: f is None }})
    r"""Specifies the component type that this component type extends."""  
    functions: Optional[dict[str, shared_functionrequest.FunctionRequest]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('functions'), 'exclude': lambda f: f is None }})
    r"""An object that maps strings to the functions in the component type. Each string in the mapping must be unique to this object."""  
    is_singleton: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isSingleton'), 'exclude': lambda f: f is None }})
    r"""A Boolean value that specifies whether an entity can have more than one component of this type."""  
    property_definitions: Optional[dict[str, shared_propertydefinitionrequest.PropertyDefinitionRequest]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('propertyDefinitions'), 'exclude': lambda f: f is None }})
    r"""An object that maps strings to the property definitions in the component type. Each string in the mapping must be unique to this object."""  
    property_groups: Optional[dict[str, shared_propertygrouprequest.PropertyGroupRequest]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('propertyGroups'), 'exclude': lambda f: f is None }})
    r"""The property groups."""  
    

@dataclasses.dataclass
class UpdateComponentTypeRequest:
    
    component_type_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'componentTypeId', 'style': 'simple', 'explode': False }})
    r"""The ID of the component type."""  
    request_body: UpdateComponentTypeRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    workspace_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'workspaceId', 'style': 'simple', 'explode': False }})
    r"""The ID of the workspace."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateComponentTypeResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    update_component_type_response: Optional[shared_updatecomponenttyperesponse.UpdateComponentTypeResponse] = dataclasses.field(default=None)
    r"""Success"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    