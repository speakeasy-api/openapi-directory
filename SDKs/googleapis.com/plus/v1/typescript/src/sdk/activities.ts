/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Activities {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Shut down. See https://developers.google.com/+/api-shutdown for more details.
   */
  plusActivitiesGet(
    req: operations.PlusActivitiesGetRequest,
    security: operations.PlusActivitiesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PlusActivitiesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PlusActivitiesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/activities/{activityId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PlusActivitiesGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PlusActivitiesGetResponse =
        new operations.PlusActivitiesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.activity = utils.objectToClass(httpRes?.data, shared.Activity);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Shut down. See https://developers.google.com/+/api-shutdown for more details.
   */
  plusActivitiesList(
    req: operations.PlusActivitiesListRequest,
    security: operations.PlusActivitiesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PlusActivitiesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PlusActivitiesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/people/{userId}/activities/{collection}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PlusActivitiesListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PlusActivitiesListResponse =
        new operations.PlusActivitiesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.activityFeed = utils.objectToClass(
              httpRes?.data,
              shared.ActivityFeed
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Shut down. See https://developers.google.com/+/api-shutdown for more details.
   */
  plusActivitiesSearch(
    req: operations.PlusActivitiesSearchRequest,
    security: operations.PlusActivitiesSearchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PlusActivitiesSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PlusActivitiesSearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/activities";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PlusActivitiesSearchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PlusActivitiesSearchResponse =
        new operations.PlusActivitiesSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.activityFeed = utils.objectToClass(
              httpRes?.data,
              shared.ActivityFeed
            );
          }
          break;
      }

      return res;
    });
  }
}
