// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetReviewsSearchJSONCriticsPickEnum - Set this parameter to Y to limit the results to NYT Critics' Picks. To get only those movies that have not been highlighted by Times critics, specify critics-pick=N. (To get all reviews regardless of critics-pick status, simply omit this parameter.)
type GetReviewsSearchJSONCriticsPickEnum string

const (
	GetReviewsSearchJSONCriticsPickEnumY GetReviewsSearchJSONCriticsPickEnum = "Y"
	GetReviewsSearchJSONCriticsPickEnumN GetReviewsSearchJSONCriticsPickEnum = "N"
)

func (e *GetReviewsSearchJSONCriticsPickEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Y":
		fallthrough
	case "N":
		*e = GetReviewsSearchJSONCriticsPickEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetReviewsSearchJSONCriticsPickEnum: %s", s)
	}
}

type GetReviewsSearchJSONQueryParams struct {
	// Set this parameter to Y to limit the results to NYT Critics' Picks. To get only those movies that have not been highlighted by Times critics, specify critics-pick=N. (To get all reviews regardless of critics-pick status, simply omit this parameter.)
	//
	CriticsPick *GetReviewsSearchJSONCriticsPickEnum `queryParam:"style=form,explode=true,name=critics-pick"`
	// Positive integer, multiple of 20
	Offset *int64 `queryParam:"style=form,explode=true,name=offset"`
	// Single date: YYYY-MM-DD
	//
	// Start and end date: YYYY-MM-DD;YYYY-MM-DD
	//
	// The opening-date is the date the movie's opening date in the New York region.
	//
	OpeningDate *string `queryParam:"style=form,explode=true,name=opening-date"`
	// Sets the sort order of the results.
	//
	// Results ordered by-title are in ascending alphabetical order. Results ordered by one of the date parameters are in reverse chronological order.
	//
	// If you do not specify a sort order, the results will be ordered by publication-date.
	//
	Order *string `queryParam:"style=form,explode=true,name=order"`
	// Single date: YYYY-MM-DD
	//
	// Start and end date: YYYY-MM-DD;YYYY-MM-DD
	//
	// The publication-date is the date the review was first published in The Times.
	//
	PublicationDate *string `queryParam:"style=form,explode=true,name=publication-date"`
	// Search keywords; matches movie title and indexed terms
	//
	// To limit your search to exact matches only, surround your search string with single quotation marks (e.g., query='28+days+later'). Otherwise, responses will include partial matches ("head words") as well as exact matches (e.g., president will match president, presidents and presidential).
	//
	//   If you specify multiple terms without quotation marks, they will be combined in an OR search.
	//
	//   If you omit the query parameter, your request will be equivalent to a reviews and NYT Critics' Picks request.
	//
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Include this parameter to limit your results to reviews by a specific critic. Reviewer names should be formatted like this: Manohla Dargis.
	//
	Reviewer *string `queryParam:"style=form,explode=true,name=reviewer"`
}

type GetReviewsSearchJSONRequest struct {
	QueryParams GetReviewsSearchJSONQueryParams
}

// GetReviewsSearchJSON200ApplicationJSON - An array of Movies
type GetReviewsSearchJSON200ApplicationJSON struct {
	Copyright  *string        `json:"copyright,omitempty"`
	NumResults *int64         `json:"num_results,omitempty"`
	Results    []shared.Movie `json:"results,omitempty"`
	Status     *string        `json:"status,omitempty"`
}

type GetReviewsSearchJSONResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// An array of Movies
	GetReviewsSearchJSON200ApplicationJSONObject *GetReviewsSearchJSON200ApplicationJSON
}
