// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDescribeDBSnapshotsActionEnum
type GETDescribeDBSnapshotsActionEnum string

const (
	GETDescribeDBSnapshotsActionEnumDescribeDbSnapshots GETDescribeDBSnapshotsActionEnum = "DescribeDBSnapshots"
)

func (e *GETDescribeDBSnapshotsActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DescribeDBSnapshots":
		*e = GETDescribeDBSnapshotsActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeDBSnapshotsActionEnum: %s", s)
	}
}

// GETDescribeDBSnapshotsVersionEnum
type GETDescribeDBSnapshotsVersionEnum string

const (
	GETDescribeDBSnapshotsVersionEnumTwoThousandAndThirteen0212 GETDescribeDBSnapshotsVersionEnum = "2013-02-12"
)

func (e *GETDescribeDBSnapshotsVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2013-02-12":
		*e = GETDescribeDBSnapshotsVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeDBSnapshotsVersionEnum: %s", s)
	}
}

type GETDescribeDBSnapshotsQueryParams struct {
	Action               GETDescribeDBSnapshotsActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	DBInstanceIdentifier *string                           `queryParam:"style=form,explode=true,name=DBInstanceIdentifier"`
	DBSnapshotIdentifier *string                           `queryParam:"style=form,explode=true,name=DBSnapshotIdentifier"`
	Marker               *string                           `queryParam:"style=form,explode=true,name=Marker"`
	MaxRecords           *int64                            `queryParam:"style=form,explode=true,name=MaxRecords"`
	SnapshotType         *string                           `queryParam:"style=form,explode=true,name=SnapshotType"`
	Version              GETDescribeDBSnapshotsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETDescribeDBSnapshotsHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDescribeDBSnapshotsRequest struct {
	QueryParams GETDescribeDBSnapshotsQueryParams
	Headers     GETDescribeDBSnapshotsHeaders
}

type GETDescribeDBSnapshotsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
