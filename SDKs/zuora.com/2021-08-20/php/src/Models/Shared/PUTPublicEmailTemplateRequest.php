<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * PUTPublicEmailTemplateRequest - The request body to update an email template.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class PUTPublicEmailTemplateRequest
{
    /**
     * The status of the email template.
     * 
     * @var ?bool $active
     */
	#[\JMS\Serializer\Annotation\SerializedName('active')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $active = null;
    
    /**
     * Email bcc address.
     * 
     * @var ?string $bccEmailAddress
     */
	#[\JMS\Serializer\Annotation\SerializedName('bccEmailAddress')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $bccEmailAddress = null;
    
    /**
     * Email cc address.
     * 
     * @var ?string $ccEmailAddress
     */
	#[\JMS\Serializer\Annotation\SerializedName('ccEmailAddress')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $ccEmailAddress = null;
    
    /**
     * Email cc type.
     * 
     * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, ccEmailType can be ALL values in enum. 
     * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
     * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\PUTPublicEmailTemplateRequestCcEmailTypeEnum $ccEmailType
     */
	#[\JMS\Serializer\Annotation\SerializedName('ccEmailType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\PUTPublicEmailTemplateRequestCcEmailTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PUTPublicEmailTemplateRequestCcEmailTypeEnum $ccEmailType = null;
    
    /**
     * The description of the email template.
     * 
     * @var ?string $description
     */
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $description = null;
    
    /**
     * The email body. You can add merge fields in the email object using angle brackets. 
     * 
     * User can also embed html tags if 'isHtml' is true.
     * 
     * @var ?string $emailBody
     */
	#[\JMS\Serializer\Annotation\SerializedName('emailBody')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $emailBody = null;
    
    /**
     * The email subject. You can add merge fields in the email subject using angle brackets.
     * 
     * @var ?string $emailSubject
     */
	#[\JMS\Serializer\Annotation\SerializedName('emailSubject')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $emailSubject = null;
    
    /**
     * The endcode type of the email body.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\PUTPublicEmailTemplateRequestEncodingTypeEnum $encodingType
     */
	#[\JMS\Serializer\Annotation\SerializedName('encodingType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\PUTPublicEmailTemplateRequestEncodingTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PUTPublicEmailTemplateRequestEncodingTypeEnum $encodingType = null;
    
    /**
     * If fromEmailType is SpecificEmail, this field is required
     * 
     * @var ?string $fromEmailAddress
     */
	#[\JMS\Serializer\Annotation\SerializedName('fromEmailAddress')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $fromEmailAddress = null;
    
    /**
     * The type of fromEmail.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\PUTPublicEmailTemplateRequestFromEmailTypeEnum $fromEmailType
     */
	#[\JMS\Serializer\Annotation\SerializedName('fromEmailType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\PUTPublicEmailTemplateRequestFromEmailTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PUTPublicEmailTemplateRequestFromEmailTypeEnum $fromEmailType = null;
    
    /**
     * The name of email sender.
     * 
     * @var ?string $fromName
     */
	#[\JMS\Serializer\Annotation\SerializedName('fromName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $fromName = null;
    
    /**
     * Specifies whether the style of email body is HTML.
     * 
     * @var ?bool $isHtml
     */
	#[\JMS\Serializer\Annotation\SerializedName('isHtml')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $isHtml = null;
    
    /**
     * The name of the email template.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * If replyToEmailType is SpecificEmail, this field is required.
     * 
     * @var ?string $replyToEmailAddress
     */
	#[\JMS\Serializer\Annotation\SerializedName('replyToEmailAddress')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $replyToEmailAddress = null;
    
    /**
     * The type of the reply email.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\PUTPublicEmailTemplateRequestReplyToEmailTypeEnum $replyToEmailType
     */
	#[\JMS\Serializer\Annotation\SerializedName('replyToEmailType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\PUTPublicEmailTemplateRequestReplyToEmailTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PUTPublicEmailTemplateRequestReplyToEmailTypeEnum $replyToEmailType = null;
    
    /**
     * If toEmailType is SpecificEmail, this field is required.
     * 
     * @var ?string $toEmailAddress
     */
	#[\JMS\Serializer\Annotation\SerializedName('toEmailAddress')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $toEmailAddress = null;
    
    /**
     * Email receive type.
     * 
     * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, toEmailType can be ALL values in enum. 
     * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail. 
     * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\PUTPublicEmailTemplateRequestToEmailTypeEnum $toEmailType
     */
	#[\JMS\Serializer\Annotation\SerializedName('toEmailType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\PUTPublicEmailTemplateRequestToEmailTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PUTPublicEmailTemplateRequestToEmailTypeEnum $toEmailType = null;
    
	public function __construct()
	{
		$this->active = null;
		$this->bccEmailAddress = null;
		$this->ccEmailAddress = null;
		$this->ccEmailType = null;
		$this->description = null;
		$this->emailBody = null;
		$this->emailSubject = null;
		$this->encodingType = null;
		$this->fromEmailAddress = null;
		$this->fromEmailType = null;
		$this->fromName = null;
		$this->isHtml = null;
		$this->name = null;
		$this->replyToEmailAddress = null;
		$this->replyToEmailType = null;
		$this->toEmailAddress = null;
		$this->toEmailType = null;
	}
}
