// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// As2PartnerEntityServerCertificateEnum - Remote server certificate security setting
type As2PartnerEntityServerCertificateEnum string

const (
	As2PartnerEntityServerCertificateEnumRequireMatch As2PartnerEntityServerCertificateEnum = "require_match"
	As2PartnerEntityServerCertificateEnumAllowAny     As2PartnerEntityServerCertificateEnum = "allow_any"
)

func (e As2PartnerEntityServerCertificateEnum) ToPointer() *As2PartnerEntityServerCertificateEnum {
	return &e
}

func (e *As2PartnerEntityServerCertificateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "require_match":
		fallthrough
	case "allow_any":
		*e = As2PartnerEntityServerCertificateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for As2PartnerEntityServerCertificateEnum: %v", v)
	}
}

// As2PartnerEntity - Create As2 Partner
type As2PartnerEntity struct {
	// Id of the AS2 Station associated with this partner.
	As2StationID *int `json:"as2_station_id,omitempty"`
	// `true` if remote server only accepts connections from dedicated IPs
	EnableDedicatedIps *bool `json:"enable_dedicated_ips,omitempty"`
	// Serial of public certificate used for message security in hex format.
	HexPublicCertificateSerial *string `json:"hex_public_certificate_serial,omitempty"`
	// Id of the AS2 Partner.
	ID *int `json:"id,omitempty"`
	// The partner's formal AS2 name.
	Name *string `json:"name,omitempty"`
	// Issuer of public certificate used for message security.
	PublicCertificateIssuer *string `json:"public_certificate_issuer,omitempty"`
	// MD5 hash of public certificate used for message security.
	PublicCertificateMd5 *string `json:"public_certificate_md5,omitempty"`
	// Not after value of public certificate used for message security.
	PublicCertificateNotAfter *string `json:"public_certificate_not_after,omitempty"`
	// Not before value of public certificate used for message security.
	PublicCertificateNotBefore *string `json:"public_certificate_not_before,omitempty"`
	// Serial of public certificate used for message security.
	PublicCertificateSerial *string `json:"public_certificate_serial,omitempty"`
	// Subject of public certificate used for message security.
	PublicCertificateSubject *string `json:"public_certificate_subject,omitempty"`
	// Remote server certificate security setting
	ServerCertificate *As2PartnerEntityServerCertificateEnum `json:"server_certificate,omitempty"`
	// Public URI for sending AS2 message to.
	URI *string `json:"uri,omitempty"`
}
