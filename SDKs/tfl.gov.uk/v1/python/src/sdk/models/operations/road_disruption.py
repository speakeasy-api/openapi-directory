"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import tfl_api_presentation_entities_roaddisruption as shared_tfl_api_presentation_entities_roaddisruption
from typing import Optional


@dataclasses.dataclass
class RoadDisruptionRequest:
    
    ids: list[str] = dataclasses.field(metadata={'path_param': { 'field_name': 'ids', 'style': 'simple', 'explode': False }})
    r"""Comma-separated list of road identifiers e.g. \\"A406, A2\\" use all for all to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)"""  
    categories: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'categories', 'style': 'form', 'explode': True }})
    r"""an optional list of category names to filter on (a valid list of categories can be obtained from the /Road/Meta/categories endpoint)"""  
    closures: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'closures', 'style': 'form', 'explode': True }})
    r"""Optional, defaults to true. When true, always includes disruptions that have road closures, regardless of the severity filter. When false, the severity filter works as normal."""  
    severities: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'severities', 'style': 'form', 'explode': True }})
    r"""an optional list of Severity names to filter on (a valid list of severities can be obtained from the /Road/Meta/severities endpoint)"""  
    strip_content: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'stripContent', 'style': 'form', 'explode': True }})
    r"""Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location, comments and streets"""  
    

@dataclasses.dataclass
class RoadDisruptionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    tfl_api_presentation_entities_road_disruptions: Optional[list[shared_tfl_api_presentation_entities_roaddisruption.TflAPIPresentationEntitiesRoadDisruption]] = dataclasses.field(default=None)
    r"""OK"""  
    