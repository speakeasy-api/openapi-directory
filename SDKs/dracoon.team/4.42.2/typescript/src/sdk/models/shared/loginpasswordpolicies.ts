/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CharacterRules } from "./characterrules";
import { PasswordExpiration } from "./passwordexpiration";
import { UserInfo } from "./userinfo";
import { UserLockout } from "./userlockout";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Login password policies
 */
export class LoginPasswordPolicies extends SpeakeasyBase {
  /**
   * Password character rules
   */
  @SpeakeasyMetadata()
  @Expose({ name: "characterRules" })
  @Type(() => CharacterRules)
  characterRules: CharacterRules;

  /**
   * Minimum number of characters a password must contain
   */
  @SpeakeasyMetadata()
  @Expose({ name: "minLength" })
  minLength: number;

  /**
   * Number of passwords to archive
   *
   * @remarks
   *
   * (must be between `0` and `10`; `0` means that password history is disabled)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "numberOfArchivedPasswords" })
  numberOfArchivedPasswords: number;

  /**
   * Password expiration information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "passwordExpiration" })
  @Type(() => PasswordExpiration)
  passwordExpiration: PasswordExpiration;

  /**
   * Determines whether a password must NOT contain word(s) from a dictionary
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rejectDictionaryWords" })
  rejectDictionaryWords: boolean;

  /**
   * Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)
   *
   * @remarks
   *
   * (min. 4 character pattern)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rejectKeyboardPatterns" })
  rejectKeyboardPatterns: boolean;

  /**
   * Determines whether a password must NOT contain user info (first name, last name, email, user name)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rejectUserInfo" })
  rejectUserInfo: boolean;

  /**
   * Modification date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt: Date;

  /**
   * User information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedBy" })
  @Type(() => UserInfo)
  updatedBy: UserInfo;

  /**
   * User lockout information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userLockout" })
  @Type(() => UserLockout)
  userLockout: UserLockout;
}
