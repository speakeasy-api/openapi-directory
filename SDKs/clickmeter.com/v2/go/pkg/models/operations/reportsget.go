// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ReportsGetTimeframeEnum - Timeframe of the request. See list at $timeframeList
type ReportsGetTimeframeEnum string

const (
	ReportsGetTimeframeEnumYesterday     ReportsGetTimeframeEnum = "yesterday"
	ReportsGetTimeframeEnumLast7         ReportsGetTimeframeEnum = "last7"
	ReportsGetTimeframeEnumLast30        ReportsGetTimeframeEnum = "last30"
	ReportsGetTimeframeEnumLastmonth     ReportsGetTimeframeEnum = "lastmonth"
	ReportsGetTimeframeEnumCurrentmonth  ReportsGetTimeframeEnum = "currentmonth"
	ReportsGetTimeframeEnumPreviousmonth ReportsGetTimeframeEnum = "previousmonth"
	ReportsGetTimeframeEnumLast90        ReportsGetTimeframeEnum = "last90"
	ReportsGetTimeframeEnumLast120       ReportsGetTimeframeEnum = "last120"
	ReportsGetTimeframeEnumLast180       ReportsGetTimeframeEnum = "last180"
	ReportsGetTimeframeEnumBeginning     ReportsGetTimeframeEnum = "beginning"
	ReportsGetTimeframeEnumCustom        ReportsGetTimeframeEnum = "custom"
)

func (e *ReportsGetTimeframeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "yesterday":
		fallthrough
	case "last7":
		fallthrough
	case "last30":
		fallthrough
	case "lastmonth":
		fallthrough
	case "currentmonth":
		fallthrough
	case "previousmonth":
		fallthrough
	case "last90":
		fallthrough
	case "last120":
		fallthrough
	case "last180":
		fallthrough
	case "beginning":
		fallthrough
	case "custom":
		*e = ReportsGetTimeframeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReportsGetTimeframeEnum: %s", s)
	}
}

// ReportsGetTypeEnum - Type of the report.
type ReportsGetTypeEnum string

const (
	ReportsGetTypeEnumBrowsers         ReportsGetTypeEnum = "browsers"
	ReportsGetTypeEnumBrowsersfamilies ReportsGetTypeEnum = "browsersfamilies"
	ReportsGetTypeEnumPlatforms        ReportsGetTypeEnum = "platforms"
	ReportsGetTypeEnumCities           ReportsGetTypeEnum = "cities"
	ReportsGetTypeEnumCountries        ReportsGetTypeEnum = "countries"
	ReportsGetTypeEnumIsps             ReportsGetTypeEnum = "isps"
	ReportsGetTypeEnumIps              ReportsGetTypeEnum = "ips"
	ReportsGetTypeEnumOss              ReportsGetTypeEnum = "oss"
	ReportsGetTypeEnumOssfamilies      ReportsGetTypeEnum = "ossfamilies"
	ReportsGetTypeEnumKeywords         ReportsGetTypeEnum = "keywords"
	ReportsGetTypeEnumReferrers        ReportsGetTypeEnum = "referrers"
	ReportsGetTypeEnumDestinations     ReportsGetTypeEnum = "destinations"
	ReportsGetTypeEnumLanguages        ReportsGetTypeEnum = "languages"
	ReportsGetTypeEnumParams           ReportsGetTypeEnum = "params"
)

func (e *ReportsGetTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "browsers":
		fallthrough
	case "browsersfamilies":
		fallthrough
	case "platforms":
		fallthrough
	case "cities":
		fallthrough
	case "countries":
		fallthrough
	case "isps":
		fallthrough
	case "ips":
		fallthrough
	case "oss":
		fallthrough
	case "ossfamilies":
		fallthrough
	case "keywords":
		fallthrough
	case "referrers":
		fallthrough
	case "destinations":
		fallthrough
	case "languages":
		fallthrough
	case "params":
		*e = ReportsGetTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReportsGetTypeEnum: %s", s)
	}
}

type ReportsGetQueryParams struct {
	// Filter by this conversion id (mutually exclusive with "datapoint" and "group")
	Conversion *int64 `queryParam:"style=form,explode=true,name=conversion"`
	// Filter by this datapoint id (mutually exclusive with "group" and "conversion")
	Datapoint *int64 `queryParam:"style=form,explode=true,name=datapoint"`
	// If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)
	FromDay *string `queryParam:"style=form,explode=true,name=fromDay"`
	// Filter by this group id (mutually exclusive with "datapoint" and "conversion")
	Group *int64 `queryParam:"style=form,explode=true,name=group"`
	// Type of the event you want to filter this report with. By default no filter is applied.
	Hittype *string `queryParam:"style=form,explode=true,name=hittype"`
	// Timeframe of the request. See list at $timeframeList
	Timeframe ReportsGetTimeframeEnum `queryParam:"style=form,explode=true,name=timeframe"`
	// If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)
	ToDay *string `queryParam:"style=form,explode=true,name=toDay"`
	// Type of the report.
	Type ReportsGetTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type ReportsGetRequest struct {
	QueryParams ReportsGetQueryParams
}

type ReportsGetResponse struct {
	APICoreDtoTopsTop *shared.APICoreDtoTopsTop
	ContentType       string
	StatusCode        int
	RawResponse       *http.Response
}
