/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Redirect - A [`Redirect`](https://firebase.google.com/docs/hosting/full-config#redirects) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
 */
public class Redirect {
    /**
     * The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("glob")
    public String glob;
    public Redirect withGlob(String glob) {
        this.glob = glob;
        return this;
    }
    
    /**
     * Required. The value to put in the HTTP location header of the response. The location can contain capture group values from the pattern using a `:` prefix to identify the segment and an optional `*` to capture the rest of the URL. For example: "glob": "/:capture*", "statusCode": 301, "location": "https://example.com/foo/:capture"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public String location;
    public Redirect withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * The user-supplied RE2 regular expression to match against the request URL path.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("regex")
    public String regex;
    public Redirect withRegex(String regex) {
        this.regex = regex;
        return this;
    }
    
    /**
     * Required. The status HTTP code to return in the response. It must be a valid 3xx status code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statusCode")
    public Integer statusCode;
    public Redirect withStatusCode(Integer statusCode) {
        this.statusCode = statusCode;
        return this;
    }
    
}
