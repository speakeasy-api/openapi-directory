/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Episode {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get a list of episodes
   *
   * @remarks
   * One initial filter must be provided (`ids`, `series_id`, or `season_id`), otherwise a `400 Bad Request` response
   * will be returned. Additional filters are allowed.
   *
   * This API will only return episodes that your credential has permission to access, which may not be exclusive to
   * your account, depending on the filter(s) being used. Be careful to filter the results as needed.
   *
   */
  getEpisodes(
    req: operations.GetEpisodesRequest,
    security: operations.GetEpisodesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEpisodesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEpisodesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/episodes";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEpisodesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEpisodesResponse =
        new operations.GetEpisodesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/vnd.api+json`)) {
            res.getEpisodes200ApplicationVndApiPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetEpisodes200ApplicationVndApiPlusJson
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/vnd.api+json`)) {
            res.getEpisodes400ApplicationVndApiPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetEpisodes400ApplicationVndApiPlusJson
              );
          }
          break;
        case [401, 403, 406].includes(httpRes?.status):
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }

  /**
   * Get a specific episode
   */
  getEpisodesId(
    req: operations.GetEpisodesIdRequest,
    security: operations.GetEpisodesIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEpisodesIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEpisodesIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/episodes/{id}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEpisodesIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEpisodesIdResponse =
        new operations.GetEpisodesIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/vnd.api+json`)) {
            res.getEpisodesId200ApplicationVndApiPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetEpisodesId200ApplicationVndApiPlusJson
              );
          }
          break;
        case [401, 403, 404, 406].includes(httpRes?.status):
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }

  /**
   * Get the episode released right after the specified one
   */
  getEpisodesIdNextSibling(
    req: operations.GetEpisodesIdNextSiblingRequest,
    security: operations.GetEpisodesIdNextSiblingSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEpisodesIdNextSiblingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEpisodesIdNextSiblingRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/episodes/{id}/next_sibling",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEpisodesIdNextSiblingSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEpisodesIdNextSiblingResponse =
        new operations.GetEpisodesIdNextSiblingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/vnd.api+json`)) {
            res.getEpisodesIdNextSibling200ApplicationVndApiPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetEpisodesIdNextSibling200ApplicationVndApiPlusJson
              );
          }
          break;
        case [401, 403, 404, 406].includes(httpRes?.status):
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }

  /**
   * Get the episode released right before the specified one
   */
  getEpisodesIdPreviousSibling(
    req: operations.GetEpisodesIdPreviousSiblingRequest,
    security: operations.GetEpisodesIdPreviousSiblingSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEpisodesIdPreviousSiblingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEpisodesIdPreviousSiblingRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/episodes/{id}/previous_sibling",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEpisodesIdPreviousSiblingSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEpisodesIdPreviousSiblingResponse =
        new operations.GetEpisodesIdPreviousSiblingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/vnd.api+json`)) {
            res.getEpisodesIdPreviousSibling200ApplicationVndApiPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetEpisodesIdPreviousSibling200ApplicationVndApiPlusJson
              );
          }
          break;
        case [401, 403, 404, 406].includes(httpRes?.status):
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }
}
