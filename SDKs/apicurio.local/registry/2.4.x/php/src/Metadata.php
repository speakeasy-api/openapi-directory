<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Metadata 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete artifact version metadata
     * 
     * Deletes the user-editable metadata properties of the artifact version.  Any properties
     * that are not user-editable are preserved.
     * 
     * This operation can fail for the following reasons:
     * 
     * * No artifact with this `artifactId` exists (HTTP error `404`)
     * * No version with this `version` exists (HTTP error `404`)
     * * A server error occurred (HTTP error `500`)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteArtifactVersionMetaDataRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteArtifactVersionMetaDataResponse
     */
	public function deleteArtifactVersionMetaData(
        \OpenAPI\OpenAPI\Models\Operations\DeleteArtifactVersionMetaDataRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteArtifactVersionMetaDataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{groupId}/artifacts/{artifactId}/versions/{version}/meta', \OpenAPI\OpenAPI\Models\Operations\DeleteArtifactVersionMetaDataRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteArtifactVersionMetaDataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get artifact metadata
     * 
     * Gets the metadata for an artifact in the registry, based on the latest version. If the latest version of the artifact is marked as `DISABLED`, the next available non-disabled version will be used. The returned metadata includes
     * both generated (read-only) and editable metadata (such as name and description).
     * 
     * This operation can fail for the following reasons:
     * 
     * * No artifact with this `artifactId` exists  or all versions are `DISABLED` (HTTP error `404`)
     * * A server error occurred (HTTP error `500`)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetArtifactMetaDataRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetArtifactMetaDataResponse
     */
	public function getArtifactMetaData(
        \OpenAPI\OpenAPI\Models\Operations\GetArtifactMetaDataRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetArtifactMetaDataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{groupId}/artifacts/{artifactId}/meta', \OpenAPI\OpenAPI\Models\Operations\GetArtifactMetaDataRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetArtifactMetaDataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->artifactMetaData = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ArtifactMetaData', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get artifact owner
     * 
     * Gets the owner of an artifact in the registry.
     * 
     * This operation can fail for the following reasons:
     * 
     * * No artifact with this `artifactId` exists (HTTP error `404`)
     * * A server error occurred (HTTP error `500`)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetArtifactOwnerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetArtifactOwnerResponse
     */
	public function getArtifactOwner(
        \OpenAPI\OpenAPI\Models\Operations\GetArtifactOwnerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetArtifactOwnerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{groupId}/artifacts/{artifactId}/owner', \OpenAPI\OpenAPI\Models\Operations\GetArtifactOwnerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetArtifactOwnerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->artifactOwner = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ArtifactOwner', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get artifact version metadata
     * 
     * Retrieves the metadata for a single version of the artifact.  The version metadata is 
     * a subset of the artifact metadata and only includes the metadata that is specific to
     * the version (for example, this doesn't include `modifiedOn`).
     * 
     * This operation can fail for the following reasons:
     * 
     * * No artifact with this `artifactId` exists (HTTP error `404`)
     * * No version with this `version` exists (HTTP error `404`)
     * * A server error occurred (HTTP error `500`)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetArtifactVersionMetaDataRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetArtifactVersionMetaDataResponse
     */
	public function getArtifactVersionMetaData(
        \OpenAPI\OpenAPI\Models\Operations\GetArtifactVersionMetaDataRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetArtifactVersionMetaDataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{groupId}/artifacts/{artifactId}/versions/{version}/meta', \OpenAPI\OpenAPI\Models\Operations\GetArtifactVersionMetaDataRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetArtifactVersionMetaDataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->versionMetaData = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VersionMetaData', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get artifact version metadata by content
     * 
     * Gets the metadata for an artifact that matches the raw content.  Searches the registry
     * for a version of the given artifact matching the content provided in the body of the
     * POST.
     * 
     * This operation can fail for the following reasons:
     * 
     * * Provided content (request body) was empty (HTTP error `400`)
     * * No artifact with the `artifactId` exists (HTTP error `404`)
     * * No artifact version matching the provided content exists (HTTP error `404`)
     * * A server error occurred (HTTP error `500`)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetArtifactVersionMetaDataByContentJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetArtifactVersionMetaDataByContentJsonResponse
     */
	public function getArtifactVersionMetaDataByContentJson(
        \OpenAPI\OpenAPI\Models\Operations\GetArtifactVersionMetaDataByContentJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetArtifactVersionMetaDataByContentJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{groupId}/artifacts/{artifactId}/meta', \OpenAPI\OpenAPI\Models\Operations\GetArtifactVersionMetaDataByContentJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "artifactContent", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetArtifactVersionMetaDataByContentJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetArtifactVersionMetaDataByContentJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->versionMetaData = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VersionMetaData', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get artifact version metadata by content
     * 
     * Gets the metadata for an artifact that matches the raw content.  Searches the registry
     * for a version of the given artifact matching the content provided in the body of the
     * POST.
     * 
     * This operation can fail for the following reasons:
     * 
     * * Provided content (request body) was empty (HTTP error `400`)
     * * No artifact with the `artifactId` exists (HTTP error `404`)
     * * No artifact version matching the provided content exists (HTTP error `404`)
     * * A server error occurred (HTTP error `500`)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetArtifactVersionMetaDataByContentRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetArtifactVersionMetaDataByContentRawResponse
     */
	public function getArtifactVersionMetaDataByContentRaw(
        \OpenAPI\OpenAPI\Models\Operations\GetArtifactVersionMetaDataByContentRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetArtifactVersionMetaDataByContentRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{groupId}/artifacts/{artifactId}/meta', \OpenAPI\OpenAPI\Models\Operations\GetArtifactVersionMetaDataByContentRawRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetArtifactVersionMetaDataByContentRawRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetArtifactVersionMetaDataByContentRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->versionMetaData = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VersionMetaData', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update artifact metadata
     * 
     * Updates the editable parts of the artifact's metadata.  Not all metadata fields can
     * be updated.  For example, `createdOn` and `createdBy` are both read-only properties.
     * 
     * This operation can fail for the following reasons:
     * 
     * * No artifact with the `artifactId` exists (HTTP error `404`)
     * * A server error occurred (HTTP error `500`)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactMetaDataRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactMetaDataResponse
     */
	public function updateArtifactMetaData(
        \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactMetaDataRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactMetaDataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{groupId}/artifacts/{artifactId}/meta', \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactMetaDataRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "editableMetaData", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactMetaDataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update artifact owner
     * 
     * Changes the ownership of an artifact.
     * 
     * This operation can fail for the following reasons:
     * 
     * * No artifact with this `artifactId` exists (HTTP error `404`)
     * * A server error occurred (HTTP error `500`)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactOwnerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactOwnerResponse
     */
	public function updateArtifactOwner(
        \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactOwnerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactOwnerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{groupId}/artifacts/{artifactId}/owner', \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactOwnerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "artifactOwner", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactOwnerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update artifact version metadata
     * 
     * Updates the user-editable portion of the artifact version's metadata.  Only some of 
     * the metadata fields are editable by the user.  For example, `description` is editable, 
     * but `createdOn` is not.
     * 
     * This operation can fail for the following reasons:
     * 
     * * No artifact with this `artifactId` exists (HTTP error `404`)
     * * No version with this `version` exists (HTTP error `404`)
     * * A server error occurred (HTTP error `500`)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactVersionMetaDataRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactVersionMetaDataResponse
     */
	public function updateArtifactVersionMetaData(
        \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactVersionMetaDataRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactVersionMetaDataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{groupId}/artifacts/{artifactId}/versions/{version}/meta', \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactVersionMetaDataRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "editableMetaData", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactVersionMetaDataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}