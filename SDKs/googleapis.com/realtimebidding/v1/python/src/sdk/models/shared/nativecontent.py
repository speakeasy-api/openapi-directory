"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import image as shared_image
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NativeContent:
    r"""Native content for a creative."""
    
    advertiser_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserName'), 'exclude': lambda f: f is None }})
    r"""The name of the advertiser or sponsor, to be displayed in the ad creative."""  
    app_icon: Optional[shared_image.Image] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appIcon'), 'exclude': lambda f: f is None }})
    r"""An image resource. You may provide a larger image than was requested, so long as the aspect ratio is preserved."""  
    body: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body'), 'exclude': lambda f: f is None }})
    r"""A long description of the ad."""  
    call_to_action: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callToAction'), 'exclude': lambda f: f is None }})
    r"""A label for the button that the user is supposed to click."""  
    click_link_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clickLinkUrl'), 'exclude': lambda f: f is None }})
    r"""The URL that the browser/SDK will load when the user clicks the ad."""  
    click_tracking_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clickTrackingUrl'), 'exclude': lambda f: f is None }})
    r"""The URL to use for click tracking."""  
    headline: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headline'), 'exclude': lambda f: f is None }})
    r"""A short title for the ad."""  
    image: Optional[shared_image.Image] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image'), 'exclude': lambda f: f is None }})
    r"""An image resource. You may provide a larger image than was requested, so long as the aspect ratio is preserved."""  
    logo: Optional[shared_image.Image] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logo'), 'exclude': lambda f: f is None }})
    r"""An image resource. You may provide a larger image than was requested, so long as the aspect ratio is preserved."""  
    price_display_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceDisplayText'), 'exclude': lambda f: f is None }})
    r"""The price of the promoted app including currency info."""  
    star_rating: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('starRating'), 'exclude': lambda f: f is None }})
    r"""The app rating in the app store. Must be in the range [0-5]."""  
    video_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videoUrl'), 'exclude': lambda f: f is None }})
    r"""The URL to fetch a native video ad."""  
    video_vast_xml: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videoVastXml'), 'exclude': lambda f: f is None }})
    r"""The contents of a VAST document for a native video ad."""  
    