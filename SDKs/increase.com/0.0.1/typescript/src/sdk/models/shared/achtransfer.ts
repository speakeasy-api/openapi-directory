/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

/**
 * If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.
 */
export class AchTransferTransferApproval extends SpeakeasyBase {
  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "approved_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  approvedAt: Date;
}

/**
 * If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.
 */
export class AchTransferTransferCancellation extends SpeakeasyBase {
  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "canceled_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  canceledAt: Date;
}

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For ACH transfers this is always equal to `usd`.
 */
export enum AchTransferCurrencyEnum {
  Cad = "CAD",
  Chf = "CHF",
  Eur = "EUR",
  Gbp = "GBP",
  Jpy = "JPY",
  Usd = "USD",
}

/**
 * The type of the account to which the transfer will be sent.
 */
export enum AchTransferFundingEnum {
  Checking = "checking",
  Savings = "savings",
}

/**
 * The transfer's network.
 */
export enum AchTransferNetworkEnum {
  Ach = "ach",
}

/**
 * If the receiving bank accepts the transfer but notifies that future transfers should use different details, this will contain those details.
 */
export class ACHTransferACHNotificationOfChange extends SpeakeasyBase {
  /**
   * The type of change that occurred.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "change_code" })
  changeCode: string;

  /**
   * The corrected data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "corrected_data" })
  correctedData: string;

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the notification occurred.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;
}

/**
 * Why the ACH Transfer was returned.
 */
export enum ACHTransferACHTransferReturnReturnReasonCodeEnum {
  InsufficientFund = "insufficient_fund",
  NoAccount = "no_account",
  AccountClosed = "account_closed",
  InvalidAccountNumberStructure = "invalid_account_number_structure",
  AccountFrozenEntryReturnedPerOfacInstruction = "account_frozen_entry_returned_per_ofac_instruction",
  CreditEntryRefusedByReceiver = "credit_entry_refused_by_receiver",
  UnauthorizedDebitToConsumerAccountUsingCorporateSecCode = "unauthorized_debit_to_consumer_account_using_corporate_sec_code",
  CorporateCustomerAdvisedNotAuthorized = "corporate_customer_advised_not_authorized",
  PaymentStopped = "payment_stopped",
  NonTransactionAccount = "non_transaction_account",
  UncollectedFunds = "uncollected_funds",
  RoutingNumberCheckDigitError = "routing_number_check_digit_error",
  CustomerAdvisedUnauthorizedImproperIneligibleOrIncomplete = "customer_advised_unauthorized_improper_ineligible_or_incomplete",
  AmountFieldError = "amount_field_error",
  AuthorizationRevokedByCustomer = "authorization_revoked_by_customer",
  InvalidAchRoutingNumber = "invalid_ach_routing_number",
  FileRecordEditCriteria = "file_record_edit_criteria",
  EnrInvalidIndividualName = "enr_invalid_individual_name",
  ReturnedPerOdfiRequest = "returned_per_odfi_request",
  AddendaError = "addenda_error",
  LimitedParticipationDfi = "limited_participation_dfi",
  IncorrectlyCodedOutboundInternationalPayment = "incorrectly_coded_outbound_international_payment",
  Other = "other",
}

/**
 * If your transfer is returned, this will contain details of the return.
 */
export class ACHTransferACHTransferReturn extends SpeakeasyBase {
  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  /**
   * Why the ACH Transfer was returned.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "return_reason_code" })
  returnReasonCode: ACHTransferACHTransferReturnReturnReasonCodeEnum;

  /**
   * The identifier of the Tranasaction associated with this return.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transaction_id" })
  transactionId: string;

  /**
   * The identifier of the ACH Transfer associated with this return.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transfer_id" })
  transferId: string;
}

/**
 * The Standard Entry Class (SEC) code to use for the transfer.
 */
export enum AchTransferStandardEntryClassCodeEnum {
  CorporateCreditOrDebit = "corporate_credit_or_debit",
  PrearrangedPaymentsAndDeposit = "prearranged_payments_and_deposit",
  InternetInitiated = "internet_initiated",
}

/**
 * The lifecycle status of the transfer.
 */
export enum AchTransferStatusEnum {
  PendingApproval = "pending_approval",
  Canceled = "canceled",
  PendingSubmission = "pending_submission",
  Submitted = "submitted",
  Returned = "returned",
  RequiresAttention = "requires_attention",
  Rejected = "rejected",
}

/**
 * After the transfer is submitted to FedACH, this will contain supplemental details.
 */
export class ACHTransferACHTransferSubmission extends SpeakeasyBase {
  /**
   * When the ACH transfer was sent to FedACH.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "submitted_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  submittedAt: Date;

  /**
   * The trace number for the submission.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "trace_number" })
  traceNumber: string;
}

/**
 * A constant representing the object's type. For this resource it will always be `ach_transfer`.
 */
export enum AchTransferTypeEnum {
  AchTransfer = "ach_transfer",
}

/**
 * ACH transfers move funds between your Increase account and any other account accessible by the Automated Clearing House (ACH).
 */
export class AchTransfer extends SpeakeasyBase {
  /**
   * The Account to which the transfer belongs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account_id" })
  accountId: string;

  /**
   * The destination account number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account_number" })
  accountNumber: string;

  /**
   * Additional information that will be sent to the recipient.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "addendum" })
  addendum: string;

  /**
   * The transfer amount in USD cents. A positive amount indicates a credit transfer pushing funds to the receiving account. A negative amount indicates a debit transfer pulling funds from the receiving account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "approval" })
  @Type(() => AchTransferTransferApproval)
  approval: AchTransferTransferApproval;

  /**
   * If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cancellation" })
  @Type(() => AchTransferTransferCancellation)
  cancellation: AchTransferTransferCancellation;

  /**
   * The description of the date of the transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "company_descriptive_date" })
  companyDescriptiveDate: string;

  /**
   * The data you chose to associate with the transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "company_discretionary_data" })
  companyDiscretionaryData: string;

  /**
   * The description of the transfer you set to be shown to the recipient.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "company_entry_description" })
  companyEntryDescription: string;

  /**
   * The name by which the recipient knows you.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "company_name" })
  companyName: string;

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For ACH transfers this is always equal to `usd`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: AchTransferCurrencyEnum;

  /**
   * The identifier of the External Account the transfer was made to, if any.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "external_account_id" })
  externalAccountId: string;

  /**
   * The type of the account to which the transfer will be sent.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "funding" })
  funding: AchTransferFundingEnum;

  /**
   * The ACH transfer's identifier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * Your identifer for the transfer recipient.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "individual_id" })
  individualId: string;

  /**
   * The name of the transfer recipient. This value is information and not verified by the recipient's bank.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "individual_name" })
  individualName: string;

  /**
   * The transfer's network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "network" })
  network: AchTransferNetworkEnum;

  /**
   * If the receiving bank accepts the transfer but notifies that future transfers should use different details, this will contain those details.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notification_of_change" })
  @Type(() => ACHTransferACHNotificationOfChange)
  notificationOfChange: ACHTransferACHNotificationOfChange;

  /**
   * If your transfer is returned, this will contain details of the return.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "return" })
  @Type(() => ACHTransferACHTransferReturn)
  return: ACHTransferACHTransferReturn;

  /**
   * The American Bankers' Association (ABA) Routing Transit Number (RTN).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "routing_number" })
  routingNumber: string;

  /**
   * The Standard Entry Class (SEC) code to use for the transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "standard_entry_class_code" })
  standardEntryClassCode: AchTransferStandardEntryClassCodeEnum;

  /**
   * The descriptor that will show on the recipient's bank statement.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "statement_descriptor" })
  statementDescriptor: string;

  /**
   * The lifecycle status of the transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: AchTransferStatusEnum;

  /**
   * After the transfer is submitted to FedACH, this will contain supplemental details.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "submission" })
  @Type(() => ACHTransferACHTransferSubmission)
  submission: ACHTransferACHTransferSubmission;

  /**
   * If the transfer was created from a template, this will be the template's ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "template_id" })
  templateId: string;

  /**
   * The ID for the transaction funding the transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transaction_id" })
  transactionId: string;

  /**
   * A constant representing the object's type. For this resource it will always be `ach_transfer`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: AchTransferTypeEnum;
}
