/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class VoiceCapabilityWebhooksAnswerUrl {
    /**
     * The URL that Vonage requests when a call is placed/received. Must return an NCCO
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    public String address;
    public VoiceCapabilityWebhooksAnswerUrl withAddress(String address) {
        this.address = address;
        return this;
    }
    
    /**
     * If Vonage can't connect to the webhook URL for this specified amount of time, then Vonage makes one additional attempt to connect to the webhook endpoint. This is an integer value specified in milliseconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connection_timeout")
    public Long connectionTimeout;
    public VoiceCapabilityWebhooksAnswerUrl withConnectionTimeout(Long connectionTimeout) {
        this.connectionTimeout = connectionTimeout;
        return this;
    }
    
    /**
     * The HTTP method used to fetch your NCCO from your `answer_url`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("http_method")
    public VoiceCapabilityWebhooksAnswerUrlHttpMethodEnum httpMethod;
    public VoiceCapabilityWebhooksAnswerUrl withHttpMethod(VoiceCapabilityWebhooksAnswerUrlHttpMethodEnum httpMethod) {
        this.httpMethod = httpMethod;
        return this;
    }
    
    /**
     * If a response from the webhook URL can't be read for this specified amount of time, then Vonage makes one additional attempt to read the webhook endpoint. This is an integer value specified in milliseconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("socket_timeout")
    public Long socketTimeout;
    public VoiceCapabilityWebhooksAnswerUrl withSocketTimeout(Long socketTimeout) {
        this.socketTimeout = socketTimeout;
        return this;
    }
    
}
