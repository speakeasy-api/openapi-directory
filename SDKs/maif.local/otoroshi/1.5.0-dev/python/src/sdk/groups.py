"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Groups:
    r"""Everything about Otoroshi service groups"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def all_service_groups(self) -> operations.AllServiceGroupsResponse:
        r"""Get all service groups
        Get all service groups
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/groups'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AllServiceGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Group]])
                res.groups = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def create_group(self, request: shared.Group, security: operations.CreateGroupSecurity) -> operations.CreateGroupResponse:
        r"""Create a new service group
        Create a new service group
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/groups'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Group])
                res.group = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def delete_group(self, request: operations.DeleteGroupRequest, security: operations.DeleteGroupSecurity) -> operations.DeleteGroupResponse:
        r"""Delete a service group
        Delete a service group
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteGroupRequest, base_url, '/api/groups/{serviceGroupId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Deleted])
                res.deleted = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def patch_group(self, request: operations.PatchGroupRequest, security: operations.PatchGroupSecurity) -> operations.PatchGroupResponse:
        r"""Update a service group with a diff
        Update a service group with a diff
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchGroupRequest, base_url, '/api/groups/{serviceGroupId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Group])
                res.group = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def service_group(self, request: operations.ServiceGroupRequest, security: operations.ServiceGroupSecurity) -> operations.ServiceGroupResponse:
        r"""Get a service group
        Get a service group
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServiceGroupRequest, base_url, '/api/groups/{serviceGroupId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServiceGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Group])
                res.group = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def update_group(self, request: operations.UpdateGroupRequest, security: operations.UpdateGroupSecurity) -> operations.UpdateGroupResponse:
        r"""Update a service group
        Update a service group
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateGroupRequest, base_url, '/api/groups/{serviceGroupId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "group", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Group])
                res.group = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    