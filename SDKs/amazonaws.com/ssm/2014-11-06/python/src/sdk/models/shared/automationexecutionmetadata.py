"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import alarmconfiguration as shared_alarmconfiguration
from ..shared import alarmstateinformation as shared_alarmstateinformation
from ..shared import automationexecutionstatus_enum as shared_automationexecutionstatus_enum
from ..shared import automationsubtype_enum as shared_automationsubtype_enum
from ..shared import automationtype_enum as shared_automationtype_enum
from ..shared import executionmode_enum as shared_executionmode_enum
from ..shared import resolvedtargets as shared_resolvedtargets
from ..shared import runbook as shared_runbook
from ..shared import target as shared_target
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AutomationExecutionMetadata:
    r"""Details about a specific Automation execution."""
    
    alarm_configuration: Optional[shared_alarmconfiguration.AlarmConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AlarmConfiguration'), 'exclude': lambda f: f is None }})  
    association_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AssociationId'), 'exclude': lambda f: f is None }})  
    automation_execution_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutomationExecutionId'), 'exclude': lambda f: f is None }})  
    automation_execution_status: Optional[shared_automationexecutionstatus_enum.AutomationExecutionStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutomationExecutionStatus'), 'exclude': lambda f: f is None }})  
    automation_subtype: Optional[shared_automationsubtype_enum.AutomationSubtypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutomationSubtype'), 'exclude': lambda f: f is None }})  
    automation_type: Optional[shared_automationtype_enum.AutomationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutomationType'), 'exclude': lambda f: f is None }})  
    change_request_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ChangeRequestName'), 'exclude': lambda f: f is None }})  
    current_action: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrentAction'), 'exclude': lambda f: f is None }})  
    current_step_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrentStepName'), 'exclude': lambda f: f is None }})  
    document_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DocumentName'), 'exclude': lambda f: f is None }})  
    document_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DocumentVersion'), 'exclude': lambda f: f is None }})  
    executed_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExecutedBy'), 'exclude': lambda f: f is None }})  
    execution_end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExecutionEndTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    execution_start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExecutionStartTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    failure_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FailureMessage'), 'exclude': lambda f: f is None }})  
    log_file: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LogFile'), 'exclude': lambda f: f is None }})  
    max_concurrency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxConcurrency'), 'exclude': lambda f: f is None }})  
    max_errors: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxErrors'), 'exclude': lambda f: f is None }})  
    mode: Optional[shared_executionmode_enum.ExecutionModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Mode'), 'exclude': lambda f: f is None }})  
    ops_item_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpsItemId'), 'exclude': lambda f: f is None }})  
    outputs: Optional[dict[str, list[str]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Outputs'), 'exclude': lambda f: f is None }})  
    parent_automation_execution_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ParentAutomationExecutionId'), 'exclude': lambda f: f is None }})  
    resolved_targets: Optional[shared_resolvedtargets.ResolvedTargets] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResolvedTargets'), 'exclude': lambda f: f is None }})  
    runbooks: Optional[list[shared_runbook.Runbook]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Runbooks'), 'exclude': lambda f: f is None }})  
    scheduled_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScheduledTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    target: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Target'), 'exclude': lambda f: f is None }})  
    target_maps: Optional[list[dict[str, list[str]]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TargetMaps'), 'exclude': lambda f: f is None }})  
    target_parameter_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TargetParameterName'), 'exclude': lambda f: f is None }})  
    targets: Optional[list[shared_target.Target]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Targets'), 'exclude': lambda f: f is None }})  
    triggered_alarms: Optional[list[shared_alarmstateinformation.AlarmStateInformation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TriggeredAlarms'), 'exclude': lambda f: f is None }})  
    