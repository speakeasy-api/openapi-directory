"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PUTOrderActionTriggerDatesRequestTypeSubscriptionsOrderActionsCharges:
    
    charge_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chargeNumber'), 'exclude': lambda f: f is None }})
    r"""Charge number of the charge which needs the triggering date to be provided. The charge's `triggerEvent` must have been set as `SpecificDate`."""  
    specific_trigger_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('specificTriggerDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date in YYYY-MM-DD format. The specific trigger date you are to set for the charge."""  
    
class PUTOrderActionTriggerDatesRequestTypeSubscriptionsOrderActionsTriggerDatesNameEnum(str, Enum):
    r"""Name of the trigger date of the order action."""
    SERVICE_ACTIVATION = 'ServiceActivation'
    CUSTOMER_ACCEPTANCE = 'CustomerAcceptance'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PUTOrderActionTriggerDatesRequestTypeSubscriptionsOrderActionsTriggerDates:
    
    name: Optional[PUTOrderActionTriggerDatesRequestTypeSubscriptionsOrderActionsTriggerDatesNameEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the trigger date of the order action."""  
    trigger_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('triggerDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Trigger date in YYYY-MM-DD format. The date you are to set as the service activation date or the customer acceptance date."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PUTOrderActionTriggerDatesRequestTypeSubscriptionsOrderActions:
    
    sequence: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sequence') }})
    r"""Identifies which order action will have its triggering dates updated."""  
    charges: Optional[list[PUTOrderActionTriggerDatesRequestTypeSubscriptionsOrderActionsCharges]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('charges'), 'exclude': lambda f: f is None }})  
    trigger_dates: Optional[list[PUTOrderActionTriggerDatesRequestTypeSubscriptionsOrderActionsTriggerDates]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('triggerDates'), 'exclude': lambda f: f is None }})
    r"""Container for the service activation and customer acceptance dates of the order action."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PUTOrderActionTriggerDatesRequestTypeSubscriptions:
    
    subscription_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionNumber') }})
    r"""Subscription number of a subscription in the `Pending` order for which you are to update the triggering dates. For example, A-S00000001."""  
    order_actions: Optional[list[PUTOrderActionTriggerDatesRequestTypeSubscriptionsOrderActions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderActions'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PUTOrderActionTriggerDatesRequestType:
    
    subscriptions: Optional[list[PUTOrderActionTriggerDatesRequestTypeSubscriptions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptions'), 'exclude': lambda f: f is None }})  
    