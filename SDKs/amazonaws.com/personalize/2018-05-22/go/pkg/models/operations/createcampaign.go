// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateCampaignXAmzTargetEnum
type CreateCampaignXAmzTargetEnum string

const (
	CreateCampaignXAmzTargetEnumAmazonPersonalizeCreateCampaign CreateCampaignXAmzTargetEnum = "AmazonPersonalize.CreateCampaign"
)

func (e *CreateCampaignXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonPersonalize.CreateCampaign":
		*e = CreateCampaignXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCampaignXAmzTargetEnum: %s", s)
	}
}

type CreateCampaignRequest struct {
	CreateCampaignRequest shared.CreateCampaignRequest `request:"mediaType=application/json"`
	XAmzAlgorithm         *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256     *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential        *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate              *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken     *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature         *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders     *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget            CreateCampaignXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateCampaignResponse struct {
	ContentType string
	// Success
	CreateCampaignResponse *shared.CreateCampaignResponse
	// InvalidInputException
	InvalidInputException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
	// ResourceInUseException
	ResourceInUseException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// TooManyTagsException
	TooManyTagsException interface{}
}
