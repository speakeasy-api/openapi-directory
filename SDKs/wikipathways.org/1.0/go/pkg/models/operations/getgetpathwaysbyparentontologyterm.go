// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetGetPathwaysByParentOntologyTermFormatEnum
type GetGetPathwaysByParentOntologyTermFormatEnum string

const (
	GetGetPathwaysByParentOntologyTermFormatEnumJSON GetGetPathwaysByParentOntologyTermFormatEnum = "json"
	GetGetPathwaysByParentOntologyTermFormatEnumXML  GetGetPathwaysByParentOntologyTermFormatEnum = "xml"
	GetGetPathwaysByParentOntologyTermFormatEnumHTML GetGetPathwaysByParentOntologyTermFormatEnum = "html"
	GetGetPathwaysByParentOntologyTermFormatEnumDump GetGetPathwaysByParentOntologyTermFormatEnum = "dump"
	GetGetPathwaysByParentOntologyTermFormatEnumJpg  GetGetPathwaysByParentOntologyTermFormatEnum = "jpg"
	GetGetPathwaysByParentOntologyTermFormatEnumPdf  GetGetPathwaysByParentOntologyTermFormatEnum = "pdf"
)

func (e GetGetPathwaysByParentOntologyTermFormatEnum) ToPointer() *GetGetPathwaysByParentOntologyTermFormatEnum {
	return &e
}

func (e *GetGetPathwaysByParentOntologyTermFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "xml":
		fallthrough
	case "html":
		fallthrough
	case "dump":
		fallthrough
	case "jpg":
		fallthrough
	case "pdf":
		*e = GetGetPathwaysByParentOntologyTermFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGetPathwaysByParentOntologyTermFormatEnum: %v", v)
	}
}

type GetGetPathwaysByParentOntologyTermRequest struct {
	Format *GetGetPathwaysByParentOntologyTermFormatEnum `queryParam:"style=form,explode=true,name=format"`
	// The Ontology term
	Term string `queryParam:"style=form,explode=true,name=term"`
}

type GetGetPathwaysByParentOntologyTermResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
