<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class InfoRequests12 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * getBEP20
     * 
     * Receive information of a BEP20 address
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Getbep20Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Getbep20Response
     */
	public function getbep20(
        \OpenAPI\OpenAPI\Models\Operations\Getbep20Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Getbep20Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bsc/bep20/{contract}', \OpenAPI\OpenAPI\Models\Operations\Getbep20Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Getbep20Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getbep20200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getbep20200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getBEP20Balance
     * 
     * Get the balance of a BEP20 address
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Getbep20balanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Getbep20balanceResponse
     */
	public function getbep20balance(
        \OpenAPI\OpenAPI\Models\Operations\Getbep20balanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Getbep20balanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bsc/balances/{contract}/bep20/{token_id}', \OpenAPI\OpenAPI\Models\Operations\Getbep20balanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Getbep20balanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getbep20balance200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getbep20balance200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getBinanceCoinBalance
     * 
     * Get the balance of an address
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetbinancecoinbalanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetbinancecoinbalanceResponse
     */
	public function getbinancecoinbalance(
        \OpenAPI\OpenAPI\Models\Operations\GetbinancecoinbalanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetbinancecoinbalanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bsc/balances/{address}', \OpenAPI\OpenAPI\Models\Operations\GetbinancecoinbalanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetbinancecoinbalanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getbinancecoinbalance200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getbinancecoinbalance200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getBlock
     * 
     * Get information of a specific block
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Getblock2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Getblock2Response
     */
	public function getblock2(
        \OpenAPI\OpenAPI\Models\Operations\Getblock2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Getblock2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bsc/blocks/{block}', \OpenAPI\OpenAPI\Models\Operations\Getblock2Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Getblock2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getblock2200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getblock2200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getblock2403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getblock2403ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getGasPrice
     * 
     * Get gas price
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\Getgasprice2Response
     */
	public function getgasprice2(
    ): \OpenAPI\OpenAPI\Models\Operations\Getgasprice2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bsc/gasprice');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Getgasprice2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getgasprice2200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getgasprice2200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getLastBlocknumber
     * 
     * Get the latest block number
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\Getlastblocknumber2Response
     */
	public function getlastblocknumber2(
    ): \OpenAPI\OpenAPI\Models\Operations\Getlastblocknumber2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bsc/blocks/number');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Getlastblocknumber2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getlastblocknumber2200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getlastblocknumber2200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getNFTOwner
     * 
     * Get the Owner of an NFT
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Getnftowner2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Getnftowner2Response
     */
	public function getnftowner2(
        \OpenAPI\OpenAPI\Models\Operations\Getnftowner2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Getnftowner2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bsc/nfts/{contract}/owner/{token_id}', \OpenAPI\OpenAPI\Models\Operations\Getnftowner2Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Getnftowner2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getnftowner2200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getnftowner2200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getNFTUri
     * 
     * Get the URI of an NFT
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Getnfturi2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Getnfturi2Response
     */
	public function getnfturi2(
        \OpenAPI\OpenAPI\Models\Operations\Getnfturi2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Getnfturi2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bsc/nfts/{contract}/uri/{token_id}', \OpenAPI\OpenAPI\Models\Operations\Getnfturi2Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Getnfturi2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getnfturi2200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getnfturi2200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getTransaction
     * 
     * Get info about a transaction
     * 
     * You can get your transaction decoded by add /decoded to your api call. If you want to get the transaction encoded, youst remove the /decoded part
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Gettransaction2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Gettransaction2Response
     */
	public function gettransaction2(
        \OpenAPI\OpenAPI\Models\Operations\Gettransaction2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Gettransaction2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bsc/transactions/{transaction}/decoded', \OpenAPI\OpenAPI\Models\Operations\Gettransaction2Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Gettransaction2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gettransaction2200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Gettransaction2200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getTransactionReceipt
     * 
     * Get info about a transaction receipt
     * 
     * You can get your transaction decoded by add /decoded to your api call. If you want to get the transaction encoded, youst remove the /decoded part
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt2Response
     */
	public function gettransactionreceipt2(
        \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bsc/transactions/{transaction}/receipt/decoded', \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt2Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gettransactionreceipt2200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt2200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}