"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AgentLocationEditRequestAddressStateEnum(str, Enum):
    r"""State postal code of the address"""
    AK = 'AK'
    AL = 'AL'
    AR = 'AR'
    AS = 'AS'
    AZ = 'AZ'
    CA = 'CA'
    CO = 'CO'
    CT = 'CT'
    DC = 'DC'
    DE = 'DE'
    FL = 'FL'
    FM = 'FM'
    GA = 'GA'
    GU = 'GU'
    HI = 'HI'
    IA = 'IA'
    ID = 'ID'
    IL = 'IL'
    IN = 'IN'
    KS = 'KS'
    KY = 'KY'
    LA = 'LA'
    MA = 'MA'
    MD = 'MD'
    ME = 'ME'
    MH = 'MH'
    MI = 'MI'
    MN = 'MN'
    MO = 'MO'
    MP = 'MP'
    MS = 'MS'
    MT = 'MT'
    NC = 'NC'
    ND = 'ND'
    NE = 'NE'
    NH = 'NH'
    NJ = 'NJ'
    NM = 'NM'
    NV = 'NV'
    NY = 'NY'
    OH = 'OH'
    OK = 'OK'
    OR = 'OR'
    PA = 'PA'
    PR = 'PR'
    PW = 'PW'
    RI = 'RI'
    SC = 'SC'
    SD = 'SD'
    TN = 'TN'
    TX = 'TX'
    UM = 'UM'
    UT = 'UT'
    VA = 'VA'
    VI = 'VI'
    VT = 'VT'
    WA = 'WA'
    WI = 'WI'
    WV = 'WV'
    WY = 'WY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AgentLocationEditRequestAddress:
    r"""Address of the agent location"""
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""City of the address"""  
    state: AgentLocationEditRequestAddressStateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""State postal code of the address"""  
    street_one: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street_one') }})
    r"""Line one of the address"""  
    zip_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip_code') }})
    r"""Zip code of the address"""  
    county: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('county'), 'exclude': lambda f: f is None }})
    r"""County of the address"""  
    street_two: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street_two'), 'exclude': lambda f: f is None }})
    r"""Line two of the address"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AgentLocationEditRequest:
    
    address: Optional[AgentLocationEditRequestAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""Address of the agent location"""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_name'), 'exclude': lambda f: f is None }})
    r"""Display name for the agent location"""  
    primary_location: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_location'), 'exclude': lambda f: f is None }})
    r"""Boolean field to determine whether the agent location should be used as the primary agent location"""  
    