// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TransactionStatusSBSEnum - The transaction status is filled with codes of the ISO 20022 data table.
// Only the codes RCVD, PATC, ACTC, ACWC and RJCT are used:
//   - 'ACSP': 'AcceptedSettlementInProcess' -
//     All preceding checks such as technical validation and customer profile were successful and therefore the payment initiation has been accepted for execution.
//   - 'ACTC': 'AcceptedTechnicalValidation' -
//     Authentication and syntactical and semantical validation are successful.
//   - 'ACWC': 'AcceptedWithChange' -
//     Instruction is accepted but a change will be made, such as date or remittance not sent.
//   - 'RCVD': 'Received' -
//     Payment initiation has been received by the receiving agent.
//   - 'RJCT': 'Rejected' -
//     Payment initiation or individual transaction included in the payment initiation has been rejected.
type TransactionStatusSBSEnum string

const (
	TransactionStatusSBSEnumAcsc TransactionStatusSBSEnum = "ACSC"
	TransactionStatusSBSEnumActc TransactionStatusSBSEnum = "ACTC"
	TransactionStatusSBSEnumPatc TransactionStatusSBSEnum = "PATC"
	TransactionStatusSBSEnumRcvd TransactionStatusSBSEnum = "RCVD"
	TransactionStatusSBSEnumRjct TransactionStatusSBSEnum = "RJCT"
	TransactionStatusSBSEnumCanc TransactionStatusSBSEnum = "CANC"
)

func (e *TransactionStatusSBSEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ACSC":
		fallthrough
	case "ACTC":
		fallthrough
	case "PATC":
		fallthrough
	case "RCVD":
		fallthrough
	case "RJCT":
		fallthrough
	case "CANC":
		*e = TransactionStatusSBSEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionStatusSBSEnum: %s", s)
	}
}
