// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PoolsAdultPoolExceptionEnum - Adult pool exception.
type PoolsAdultPoolExceptionEnum string

const (
	PoolsAdultPoolExceptionEnumExceptionUnspecified PoolsAdultPoolExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PoolsAdultPoolExceptionEnumUnderConstruction    PoolsAdultPoolExceptionEnum = "UNDER_CONSTRUCTION"
	PoolsAdultPoolExceptionEnumDependentOnSeason    PoolsAdultPoolExceptionEnum = "DEPENDENT_ON_SEASON"
	PoolsAdultPoolExceptionEnumDependentOnDayOfWeek PoolsAdultPoolExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PoolsAdultPoolExceptionEnum) ToPointer() *PoolsAdultPoolExceptionEnum {
	return &e
}

func (e *PoolsAdultPoolExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PoolsAdultPoolExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PoolsAdultPoolExceptionEnum: %v", v)
	}
}

// PoolsHotTubExceptionEnum - Hot tub exception.
type PoolsHotTubExceptionEnum string

const (
	PoolsHotTubExceptionEnumExceptionUnspecified PoolsHotTubExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PoolsHotTubExceptionEnumUnderConstruction    PoolsHotTubExceptionEnum = "UNDER_CONSTRUCTION"
	PoolsHotTubExceptionEnumDependentOnSeason    PoolsHotTubExceptionEnum = "DEPENDENT_ON_SEASON"
	PoolsHotTubExceptionEnumDependentOnDayOfWeek PoolsHotTubExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PoolsHotTubExceptionEnum) ToPointer() *PoolsHotTubExceptionEnum {
	return &e
}

func (e *PoolsHotTubExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PoolsHotTubExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PoolsHotTubExceptionEnum: %v", v)
	}
}

// PoolsIndoorPoolExceptionEnum - Indoor pool exception.
type PoolsIndoorPoolExceptionEnum string

const (
	PoolsIndoorPoolExceptionEnumExceptionUnspecified PoolsIndoorPoolExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PoolsIndoorPoolExceptionEnumUnderConstruction    PoolsIndoorPoolExceptionEnum = "UNDER_CONSTRUCTION"
	PoolsIndoorPoolExceptionEnumDependentOnSeason    PoolsIndoorPoolExceptionEnum = "DEPENDENT_ON_SEASON"
	PoolsIndoorPoolExceptionEnumDependentOnDayOfWeek PoolsIndoorPoolExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PoolsIndoorPoolExceptionEnum) ToPointer() *PoolsIndoorPoolExceptionEnum {
	return &e
}

func (e *PoolsIndoorPoolExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PoolsIndoorPoolExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PoolsIndoorPoolExceptionEnum: %v", v)
	}
}

// PoolsIndoorPoolsCountExceptionEnum - Indoor pools count exception.
type PoolsIndoorPoolsCountExceptionEnum string

const (
	PoolsIndoorPoolsCountExceptionEnumExceptionUnspecified PoolsIndoorPoolsCountExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PoolsIndoorPoolsCountExceptionEnumUnderConstruction    PoolsIndoorPoolsCountExceptionEnum = "UNDER_CONSTRUCTION"
	PoolsIndoorPoolsCountExceptionEnumDependentOnSeason    PoolsIndoorPoolsCountExceptionEnum = "DEPENDENT_ON_SEASON"
	PoolsIndoorPoolsCountExceptionEnumDependentOnDayOfWeek PoolsIndoorPoolsCountExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PoolsIndoorPoolsCountExceptionEnum) ToPointer() *PoolsIndoorPoolsCountExceptionEnum {
	return &e
}

func (e *PoolsIndoorPoolsCountExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PoolsIndoorPoolsCountExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PoolsIndoorPoolsCountExceptionEnum: %v", v)
	}
}

// PoolsLazyRiverExceptionEnum - Lazy river exception.
type PoolsLazyRiverExceptionEnum string

const (
	PoolsLazyRiverExceptionEnumExceptionUnspecified PoolsLazyRiverExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PoolsLazyRiverExceptionEnumUnderConstruction    PoolsLazyRiverExceptionEnum = "UNDER_CONSTRUCTION"
	PoolsLazyRiverExceptionEnumDependentOnSeason    PoolsLazyRiverExceptionEnum = "DEPENDENT_ON_SEASON"
	PoolsLazyRiverExceptionEnumDependentOnDayOfWeek PoolsLazyRiverExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PoolsLazyRiverExceptionEnum) ToPointer() *PoolsLazyRiverExceptionEnum {
	return &e
}

func (e *PoolsLazyRiverExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PoolsLazyRiverExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PoolsLazyRiverExceptionEnum: %v", v)
	}
}

// PoolsLifeguardExceptionEnum - Lifeguard exception.
type PoolsLifeguardExceptionEnum string

const (
	PoolsLifeguardExceptionEnumExceptionUnspecified PoolsLifeguardExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PoolsLifeguardExceptionEnumUnderConstruction    PoolsLifeguardExceptionEnum = "UNDER_CONSTRUCTION"
	PoolsLifeguardExceptionEnumDependentOnSeason    PoolsLifeguardExceptionEnum = "DEPENDENT_ON_SEASON"
	PoolsLifeguardExceptionEnumDependentOnDayOfWeek PoolsLifeguardExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PoolsLifeguardExceptionEnum) ToPointer() *PoolsLifeguardExceptionEnum {
	return &e
}

func (e *PoolsLifeguardExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PoolsLifeguardExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PoolsLifeguardExceptionEnum: %v", v)
	}
}

// PoolsOutdoorPoolExceptionEnum - Outdoor pool exception.
type PoolsOutdoorPoolExceptionEnum string

const (
	PoolsOutdoorPoolExceptionEnumExceptionUnspecified PoolsOutdoorPoolExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PoolsOutdoorPoolExceptionEnumUnderConstruction    PoolsOutdoorPoolExceptionEnum = "UNDER_CONSTRUCTION"
	PoolsOutdoorPoolExceptionEnumDependentOnSeason    PoolsOutdoorPoolExceptionEnum = "DEPENDENT_ON_SEASON"
	PoolsOutdoorPoolExceptionEnumDependentOnDayOfWeek PoolsOutdoorPoolExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PoolsOutdoorPoolExceptionEnum) ToPointer() *PoolsOutdoorPoolExceptionEnum {
	return &e
}

func (e *PoolsOutdoorPoolExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PoolsOutdoorPoolExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PoolsOutdoorPoolExceptionEnum: %v", v)
	}
}

// PoolsOutdoorPoolsCountExceptionEnum - Outdoor pools count exception.
type PoolsOutdoorPoolsCountExceptionEnum string

const (
	PoolsOutdoorPoolsCountExceptionEnumExceptionUnspecified PoolsOutdoorPoolsCountExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PoolsOutdoorPoolsCountExceptionEnumUnderConstruction    PoolsOutdoorPoolsCountExceptionEnum = "UNDER_CONSTRUCTION"
	PoolsOutdoorPoolsCountExceptionEnumDependentOnSeason    PoolsOutdoorPoolsCountExceptionEnum = "DEPENDENT_ON_SEASON"
	PoolsOutdoorPoolsCountExceptionEnumDependentOnDayOfWeek PoolsOutdoorPoolsCountExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PoolsOutdoorPoolsCountExceptionEnum) ToPointer() *PoolsOutdoorPoolsCountExceptionEnum {
	return &e
}

func (e *PoolsOutdoorPoolsCountExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PoolsOutdoorPoolsCountExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PoolsOutdoorPoolsCountExceptionEnum: %v", v)
	}
}

// PoolsPoolExceptionEnum - Pool exception.
type PoolsPoolExceptionEnum string

const (
	PoolsPoolExceptionEnumExceptionUnspecified PoolsPoolExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PoolsPoolExceptionEnumUnderConstruction    PoolsPoolExceptionEnum = "UNDER_CONSTRUCTION"
	PoolsPoolExceptionEnumDependentOnSeason    PoolsPoolExceptionEnum = "DEPENDENT_ON_SEASON"
	PoolsPoolExceptionEnumDependentOnDayOfWeek PoolsPoolExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PoolsPoolExceptionEnum) ToPointer() *PoolsPoolExceptionEnum {
	return &e
}

func (e *PoolsPoolExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PoolsPoolExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PoolsPoolExceptionEnum: %v", v)
	}
}

// PoolsPoolsCountExceptionEnum - Pools count exception.
type PoolsPoolsCountExceptionEnum string

const (
	PoolsPoolsCountExceptionEnumExceptionUnspecified PoolsPoolsCountExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PoolsPoolsCountExceptionEnumUnderConstruction    PoolsPoolsCountExceptionEnum = "UNDER_CONSTRUCTION"
	PoolsPoolsCountExceptionEnumDependentOnSeason    PoolsPoolsCountExceptionEnum = "DEPENDENT_ON_SEASON"
	PoolsPoolsCountExceptionEnumDependentOnDayOfWeek PoolsPoolsCountExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PoolsPoolsCountExceptionEnum) ToPointer() *PoolsPoolsCountExceptionEnum {
	return &e
}

func (e *PoolsPoolsCountExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PoolsPoolsCountExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PoolsPoolsCountExceptionEnum: %v", v)
	}
}

// PoolsWadingPoolExceptionEnum - Wading pool exception.
type PoolsWadingPoolExceptionEnum string

const (
	PoolsWadingPoolExceptionEnumExceptionUnspecified PoolsWadingPoolExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PoolsWadingPoolExceptionEnumUnderConstruction    PoolsWadingPoolExceptionEnum = "UNDER_CONSTRUCTION"
	PoolsWadingPoolExceptionEnumDependentOnSeason    PoolsWadingPoolExceptionEnum = "DEPENDENT_ON_SEASON"
	PoolsWadingPoolExceptionEnumDependentOnDayOfWeek PoolsWadingPoolExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PoolsWadingPoolExceptionEnum) ToPointer() *PoolsWadingPoolExceptionEnum {
	return &e
}

func (e *PoolsWadingPoolExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PoolsWadingPoolExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PoolsWadingPoolExceptionEnum: %v", v)
	}
}

// PoolsWaterParkExceptionEnum - Water park exception.
type PoolsWaterParkExceptionEnum string

const (
	PoolsWaterParkExceptionEnumExceptionUnspecified PoolsWaterParkExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PoolsWaterParkExceptionEnumUnderConstruction    PoolsWaterParkExceptionEnum = "UNDER_CONSTRUCTION"
	PoolsWaterParkExceptionEnumDependentOnSeason    PoolsWaterParkExceptionEnum = "DEPENDENT_ON_SEASON"
	PoolsWaterParkExceptionEnumDependentOnDayOfWeek PoolsWaterParkExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PoolsWaterParkExceptionEnum) ToPointer() *PoolsWaterParkExceptionEnum {
	return &e
}

func (e *PoolsWaterParkExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PoolsWaterParkExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PoolsWaterParkExceptionEnum: %v", v)
	}
}

// PoolsWaterslideExceptionEnum - Waterslide exception.
type PoolsWaterslideExceptionEnum string

const (
	PoolsWaterslideExceptionEnumExceptionUnspecified PoolsWaterslideExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PoolsWaterslideExceptionEnumUnderConstruction    PoolsWaterslideExceptionEnum = "UNDER_CONSTRUCTION"
	PoolsWaterslideExceptionEnumDependentOnSeason    PoolsWaterslideExceptionEnum = "DEPENDENT_ON_SEASON"
	PoolsWaterslideExceptionEnumDependentOnDayOfWeek PoolsWaterslideExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PoolsWaterslideExceptionEnum) ToPointer() *PoolsWaterslideExceptionEnum {
	return &e
}

func (e *PoolsWaterslideExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PoolsWaterslideExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PoolsWaterslideExceptionEnum: %v", v)
	}
}

// PoolsWavePoolExceptionEnum - Wave pool exception.
type PoolsWavePoolExceptionEnum string

const (
	PoolsWavePoolExceptionEnumExceptionUnspecified PoolsWavePoolExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PoolsWavePoolExceptionEnumUnderConstruction    PoolsWavePoolExceptionEnum = "UNDER_CONSTRUCTION"
	PoolsWavePoolExceptionEnumDependentOnSeason    PoolsWavePoolExceptionEnum = "DEPENDENT_ON_SEASON"
	PoolsWavePoolExceptionEnumDependentOnDayOfWeek PoolsWavePoolExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PoolsWavePoolExceptionEnum) ToPointer() *PoolsWavePoolExceptionEnum {
	return &e
}

func (e *PoolsWavePoolExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PoolsWavePoolExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PoolsWavePoolExceptionEnum: %v", v)
	}
}

// Pools - Swimming pool or recreational water facilities available at the hotel.
type Pools struct {
	// Adult pool. A pool restricted for use by adults only. Can be indoors or outdoors.
	AdultPool *bool `json:"adultPool,omitempty"`
	// Adult pool exception.
	AdultPoolException *PoolsAdultPoolExceptionEnum `json:"adultPoolException,omitempty"`
	// Hot tub. A man-made pool containing bubbling water maintained at a higher temperature and circulated by aerating jets for the purpose of soaking, relaxation and hydrotherapy. Can be indoors or outdoors. Not used for active swimming. Also known as Jacuzzi. Hot tub must be in a common area where all guests can access it. Does not apply to room-specific hot tubs that are only accessible to guest occupying that room.
	HotTub *bool `json:"hotTub,omitempty"`
	// Hot tub exception.
	HotTubException *PoolsHotTubExceptionEnum `json:"hotTubException,omitempty"`
	// Indoor pool. A pool located inside the hotel and available for guests to use for swimming and/or soaking. Use may or may not be restricted to adults and/or children.
	IndoorPool *bool `json:"indoorPool,omitempty"`
	// Indoor pool exception.
	IndoorPoolException *PoolsIndoorPoolExceptionEnum `json:"indoorPoolException,omitempty"`
	// Indoor pools count. The sum of all indoor pools at the hotel.
	IndoorPoolsCount *int `json:"indoorPoolsCount,omitempty"`
	// Indoor pools count exception.
	IndoorPoolsCountException *PoolsIndoorPoolsCountExceptionEnum `json:"indoorPoolsCountException,omitempty"`
	// Lazy river. A man-made pool or several interconnected recreational pools built to mimic the shape and current of a winding river where guests float in the water on inflated rubber tubes. Can be indoors or outdoors.
	LazyRiver *bool `json:"lazyRiver,omitempty"`
	// Lazy river exception.
	LazyRiverException *PoolsLazyRiverExceptionEnum `json:"lazyRiverException,omitempty"`
	// Lifeguard. A trained member of the hotel staff stationed by the hotel's indoor or outdoor swimming area and responsible for the safety of swimming guests.
	Lifeguard *bool `json:"lifeguard,omitempty"`
	// Lifeguard exception.
	LifeguardException *PoolsLifeguardExceptionEnum `json:"lifeguardException,omitempty"`
	// Outdoor pool. A pool located outside on the grounds of the hotel and available for guests to use for swimming, soaking or recreation. Use may or may not be restricted to adults and/or children.
	OutdoorPool *bool `json:"outdoorPool,omitempty"`
	// Outdoor pool exception.
	OutdoorPoolException *PoolsOutdoorPoolExceptionEnum `json:"outdoorPoolException,omitempty"`
	// Outdoor pools count. The sum of all outdoor pools at the hotel.
	OutdoorPoolsCount *int `json:"outdoorPoolsCount,omitempty"`
	// Outdoor pools count exception.
	OutdoorPoolsCountException *PoolsOutdoorPoolsCountExceptionEnum `json:"outdoorPoolsCountException,omitempty"`
	// Pool. The presence of a pool, either indoors or outdoors, for guests to use for swimming and/or soaking. Use may or may not be restricted to adults and/or children.
	Pool *bool `json:"pool,omitempty"`
	// Pool exception.
	PoolException *PoolsPoolExceptionEnum `json:"poolException,omitempty"`
	// Pools count. The sum of all pools at the hotel.
	PoolsCount *int `json:"poolsCount,omitempty"`
	// Pools count exception.
	PoolsCountException *PoolsPoolsCountExceptionEnum `json:"poolsCountException,omitempty"`
	// Wading pool. A shallow pool designed for small children to play in. Can be indoors or outdoors. Also known as kiddie pool.
	WadingPool *bool `json:"wadingPool,omitempty"`
	// Wading pool exception.
	WadingPoolException *PoolsWadingPoolExceptionEnum `json:"wadingPoolException,omitempty"`
	// Water park. An aquatic recreation area with a large pool or series of pools that has features such as a water slide or tube, wavepool, fountains, rope swings, and/or obstacle course. Can be indoors or outdoors. Also known as adventure pool.
	WaterPark *bool `json:"waterPark,omitempty"`
	// Water park exception.
	WaterParkException *PoolsWaterParkExceptionEnum `json:"waterParkException,omitempty"`
	// Waterslide. A continuously wetted chute positioned by an indoor or outdoor pool which people slide down into the water.
	Waterslide *bool `json:"waterslide,omitempty"`
	// Waterslide exception.
	WaterslideException *PoolsWaterslideExceptionEnum `json:"waterslideException,omitempty"`
	// Wave pool. A large indoor or outdoor pool with a machine that produces water currents to mimic the ocean's crests.
	WavePool *bool `json:"wavePool,omitempty"`
	// Wave pool exception.
	WavePoolException *PoolsWavePoolExceptionEnum `json:"wavePoolException,omitempty"`
}
