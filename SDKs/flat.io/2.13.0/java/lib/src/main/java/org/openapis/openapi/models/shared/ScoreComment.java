/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ScoreComment - Comment added on a sheet music
 */
public class ScoreComment {
    /**
     * The comment text that can includes mentions using the following
     * format: `@[id:username]`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("comment")
    public String comment;

    public ScoreComment withComment(String comment) {
        this.comment = comment;
        return this;
    }
    
    /**
     * The context of the comment (for inline/contextualized comments). A context will include all the information related to the location of the comment (i.e. score parts, range of measure, time position).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("context")
    public ScoreCommentContext context;

    public ScoreComment withContext(ScoreCommentContext context) {
        this.context = context;
        return this;
    }
    
    /**
     * The date when the comment was posted
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date")
    public OffsetDateTime date;

    public ScoreComment withDate(OffsetDateTime date) {
        this.date = date;
        return this;
    }
    
    /**
     * The comment unique identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public ScoreComment withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The list of user identifier mentioned on the score
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mentions")
    public String[] mentions;

    public ScoreComment withMentions(String[] mentions) {
        this.mentions = mentions;
        return this;
    }
    
    /**
     * The date of the last comment modification
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("modificationDate")
    public OffsetDateTime modificationDate;

    public ScoreComment withModificationDate(OffsetDateTime modificationDate) {
        this.modificationDate = modificationDate;
        return this;
    }
    
    /**
     * A raw version of the comment, that can be displayed without parsing
     * the mentions.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rawComment")
    public String rawComment;

    public ScoreComment withRawComment(String rawComment) {
        this.rawComment = rawComment;
        return this;
    }
    
    /**
     * When the comment is a reply to another comment, the unique identifier of the parent comment
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replyTo")
    public String replyTo;

    public ScoreComment withReplyTo(String replyTo) {
        this.replyTo = replyTo;
        return this;
    }
    
    /**
     * For inline comments, the comment can be marked as resolved and will be hidden in the future responses
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resolved")
    public Boolean resolved;

    public ScoreComment withResolved(Boolean resolved) {
        this.resolved = resolved;
        return this;
    }
    
    /**
     * If the user is marked as resolved, this will contain the unique identifier of the User who marked this comment as resolved
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resolvedBy")
    public String resolvedBy;

    public ScoreComment withResolvedBy(String resolvedBy) {
        this.resolvedBy = resolvedBy;
        return this;
    }
    
    /**
     * The unique identifier of revision the comment was posted
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("revision")
    public String revision;

    public ScoreComment withRevision(String revision) {
        this.revision = revision;
        return this;
    }
    
    /**
     * The unique identifier of the score where the comment was posted
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("score")
    public String score;

    public ScoreComment withScore(String score) {
        this.score = score;
        return this;
    }
    
    /**
     * `true  if the message has been detected as spam and hidden from other users
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("spam")
    public Boolean spam;

    public ScoreComment withSpam(Boolean spam) {
        this.spam = spam;
        return this;
    }
    
    /**
     * The type of the comment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public ScoreCommentTypeEnum type;

    public ScoreComment withType(ScoreCommentTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * The author unique identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    public String user;

    public ScoreComment withUser(String user) {
        this.user = user;
        return this;
    }
    
    public ScoreComment(){}
}
