// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"time"
)

// CommentActorClientSpecificActorInfoYoutubeActorInfo - Actor info specific to YouTube clients.
type CommentActorClientSpecificActorInfoYoutubeActorInfo struct {
	// ID of the YouTube channel owned by the Actor.
	ChannelID *string `json:"channelId,omitempty"`
}

// CommentActorClientSpecificActorInfo - Actor info specific to particular clients.
type CommentActorClientSpecificActorInfo struct {
	// Actor info specific to YouTube clients.
	YoutubeActorInfo *CommentActorClientSpecificActorInfoYoutubeActorInfo `json:"youtubeActorInfo,omitempty"`
}

// CommentActorImage - The image representation of this actor.
type CommentActorImage struct {
	// The URL of the actor's profile photo. To resize the image and crop it to a square, append the query string ?sz=x, where x is the dimension in pixels of each side.
	URL *string `json:"url,omitempty"`
}

// CommentActorVerification - Verification status of actor.
type CommentActorVerification struct {
	// Verification for one-time or manual processes.
	AdHocVerified *string `json:"adHocVerified,omitempty"`
}

// CommentActor - The person who posted this comment.
type CommentActor struct {
	// Actor info specific to particular clients.
	ClientSpecificActorInfo *CommentActorClientSpecificActorInfo `json:"clientSpecificActorInfo,omitempty"`
	// The name of this actor, suitable for display.
	DisplayName *string `json:"displayName,omitempty"`
	// The ID of the actor.
	ID *string `json:"id,omitempty"`
	// The image representation of this actor.
	Image *CommentActorImage `json:"image,omitempty"`
	// A link to the Person resource for this actor.
	URL *string `json:"url,omitempty"`
	// Verification status of actor.
	Verification *CommentActorVerification `json:"verification,omitempty"`
}

type CommentInReplyTo struct {
	// The ID of the activity.
	ID *string `json:"id,omitempty"`
	// The URL of the activity.
	URL *string `json:"url,omitempty"`
}

// CommentObject - The object of this comment.
type CommentObject struct {
	// The HTML-formatted content, suitable for display.
	Content *string `json:"content,omitempty"`
	// The object type of this comment. Possible values are:
	// - "comment" - A comment in reply to an activity.
	ObjectType *string `json:"objectType,omitempty"`
	// The content (text) as provided by the author, stored without any HTML formatting. When creating or updating a comment, this value must be supplied as plain text in the request.
	OriginalContent *string `json:"originalContent,omitempty"`
}

// CommentPlusoners - People who +1'd this comment.
type CommentPlusoners struct {
	// Total number of people who +1'd this comment.
	TotalItems *int64 `json:"totalItems,omitempty"`
}

// Comment - Successful response
type Comment struct {
	// The person who posted this comment.
	Actor *CommentActor `json:"actor,omitempty"`
	// ETag of this response for caching purposes.
	Etag *string `json:"etag,omitempty"`
	// The ID of this comment.
	ID *string `json:"id,omitempty"`
	// The activity this comment replied to.
	InReplyTo []CommentInReplyTo `json:"inReplyTo,omitempty"`
	// Identifies this resource as a comment. Value: "plus#comment".
	Kind *string `json:"kind,omitempty"`
	// The object of this comment.
	Object *CommentObject `json:"object,omitempty"`
	// People who +1'd this comment.
	Plusoners *CommentPlusoners `json:"plusoners,omitempty"`
	// The time at which this comment was initially published. Formatted as an RFC 3339 timestamp.
	Published *time.Time `json:"published,omitempty"`
	// Link to this comment resource.
	SelfLink *string `json:"selfLink,omitempty"`
	// The time at which this comment was last updated. Formatted as an RFC 3339 timestamp.
	Updated *time.Time `json:"updated,omitempty"`
	// This comment's verb, indicating what action was performed. Possible values are:
	// - "post" - Publish content to the stream.
	Verb *string `json:"verb,omitempty"`
}
