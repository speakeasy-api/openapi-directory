/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { NullableMinimalRepository } from "./nullableminimalrepository";
import { NullableSimpleUser } from "./nullablesimpleuser";
import { Expose, Transform, Type } from "class-transformer";

export enum PackagePackageTypeEnum {
  Npm = "npm",
  Maven = "maven",
  Rubygems = "rubygems",
  Docker = "docker",
  Nuget = "nuget",
  Container = "container",
}

export enum PackageVisibilityEnum1 {
  Private = "private",
  Public = "public",
}

/**
 * A software package
 */
export class Package extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "html_url" })
  htmlUrl: string;

  /**
   * Unique identifier of the package.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * The name of the package.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * A GitHub user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "owner" })
  @Type(() => NullableSimpleUser)
  owner?: NullableSimpleUser;

  @SpeakeasyMetadata()
  @Expose({ name: "package_type" })
  packageType: PackagePackageTypeEnum;

  /**
   * Minimal Repository
   */
  @SpeakeasyMetadata()
  @Expose({ name: "repository" })
  @Type(() => NullableMinimalRepository)
  repository?: NullableMinimalRepository;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;

  /**
   * The number of versions of the package.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "version_count" })
  versionCount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "visibility" })
  visibility: PackageVisibilityEnum1;
}
