// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AssessmentRunStateEnum string

const (
	AssessmentRunStateEnumCreated                       AssessmentRunStateEnum = "CREATED"
	AssessmentRunStateEnumStartDataCollectionPending    AssessmentRunStateEnum = "START_DATA_COLLECTION_PENDING"
	AssessmentRunStateEnumStartDataCollectionInProgress AssessmentRunStateEnum = "START_DATA_COLLECTION_IN_PROGRESS"
	AssessmentRunStateEnumCollectingData                AssessmentRunStateEnum = "COLLECTING_DATA"
	AssessmentRunStateEnumStopDataCollectionPending     AssessmentRunStateEnum = "STOP_DATA_COLLECTION_PENDING"
	AssessmentRunStateEnumDataCollected                 AssessmentRunStateEnum = "DATA_COLLECTED"
	AssessmentRunStateEnumStartEvaluatingRulesPending   AssessmentRunStateEnum = "START_EVALUATING_RULES_PENDING"
	AssessmentRunStateEnumEvaluatingRules               AssessmentRunStateEnum = "EVALUATING_RULES"
	AssessmentRunStateEnumFailed                        AssessmentRunStateEnum = "FAILED"
	AssessmentRunStateEnumError                         AssessmentRunStateEnum = "ERROR"
	AssessmentRunStateEnumCompleted                     AssessmentRunStateEnum = "COMPLETED"
	AssessmentRunStateEnumCompletedWithErrors           AssessmentRunStateEnum = "COMPLETED_WITH_ERRORS"
	AssessmentRunStateEnumCanceled                      AssessmentRunStateEnum = "CANCELED"
)

func (e *AssessmentRunStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CREATED":
		fallthrough
	case "START_DATA_COLLECTION_PENDING":
		fallthrough
	case "START_DATA_COLLECTION_IN_PROGRESS":
		fallthrough
	case "COLLECTING_DATA":
		fallthrough
	case "STOP_DATA_COLLECTION_PENDING":
		fallthrough
	case "DATA_COLLECTED":
		fallthrough
	case "START_EVALUATING_RULES_PENDING":
		fallthrough
	case "EVALUATING_RULES":
		fallthrough
	case "FAILED":
		fallthrough
	case "ERROR":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "COMPLETED_WITH_ERRORS":
		fallthrough
	case "CANCELED":
		*e = AssessmentRunStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AssessmentRunStateEnum: %s", s)
	}
}
