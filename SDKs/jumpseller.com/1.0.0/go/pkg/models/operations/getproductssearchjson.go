// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetProductsSearchJSONFieldsEnum - Comma separated values of the fields to query for the Product
type GetProductsSearchJSONFieldsEnum string

const (
	GetProductsSearchJSONFieldsEnumSku                 GetProductsSearchJSONFieldsEnum = "sku"
	GetProductsSearchJSONFieldsEnumBarcode             GetProductsSearchJSONFieldsEnum = "barcode"
	GetProductsSearchJSONFieldsEnumBrand               GetProductsSearchJSONFieldsEnum = "brand"
	GetProductsSearchJSONFieldsEnumName                GetProductsSearchJSONFieldsEnum = "name"
	GetProductsSearchJSONFieldsEnumDescription         GetProductsSearchJSONFieldsEnum = "description"
	GetProductsSearchJSONFieldsEnumVariants            GetProductsSearchJSONFieldsEnum = "variants"
	GetProductsSearchJSONFieldsEnumOptionName          GetProductsSearchJSONFieldsEnum = "option_name"
	GetProductsSearchJSONFieldsEnumCustomFields        GetProductsSearchJSONFieldsEnum = "custom_fields"
	GetProductsSearchJSONFieldsEnumCustomFieldsSelects GetProductsSearchJSONFieldsEnum = "custom_fields_selects"
)

func (e GetProductsSearchJSONFieldsEnum) ToPointer() *GetProductsSearchJSONFieldsEnum {
	return &e
}

func (e *GetProductsSearchJSONFieldsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sku":
		fallthrough
	case "barcode":
		fallthrough
	case "brand":
		fallthrough
	case "name":
		fallthrough
	case "description":
		fallthrough
	case "variants":
		fallthrough
	case "option_name":
		fallthrough
	case "custom_fields":
		fallthrough
	case "custom_fields_selects":
		*e = GetProductsSearchJSONFieldsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProductsSearchJSONFieldsEnum: %v", v)
	}
}

type GetProductsSearchJSONRequest struct {
	// API OAuth token.
	Authtoken string `queryParam:"style=form,explode=true,name=authtoken"`
	// Comma separated values of the fields to query for the Product
	Fields *GetProductsSearchJSONFieldsEnum `queryParam:"style=form,explode=true,name=fields"`
	// Locale code of the translation
	Locale *string `queryParam:"style=form,explode=true,name=locale"`
	// API OAuth login.
	Login string `queryParam:"style=form,explode=true,name=login"`
	// Text to query for the Product
	Query string `queryParam:"style=form,explode=true,name=query"`
}

type GetProductsSearchJSONResponse struct {
	ContentType string
	// Invalid query.
	NotFound *shared.NotFound
	// An array of products
	Products    []shared.Product
	StatusCode  int
	RawResponse *http.Response
}
