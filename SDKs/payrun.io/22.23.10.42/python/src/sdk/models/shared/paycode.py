"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PayCodePayCodeNominalCode:
    r"""The pay codes' nominal code"""
    
    at_href: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@href'), 'exclude': lambda f: f is None }})
    r"""The links' href"""  
    at_rel: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@rel'), 'exclude': lambda f: f is None }})
    r"""The links' target type"""  
    at_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@title'), 'exclude': lambda f: f is None }})
    r"""The links' title"""  
    
class PayCodePayCodeRegionEnum(str, Enum):
    r"""The pay codes' region"""
    NOT_SET = 'NotSet'
    ENGLAND = 'England'
    SCOTLAND = 'Scotland'
    WALES = 'Wales'

class PayCodePayCodeTerritoryEnum(str, Enum):
    r"""The pay codes' territory"""
    UNITED_KINGDOM = 'UnitedKingdom'

class PayCodePayCodeTypeEnum(str, Enum):
    r"""The pay codes' type"""
    NOT_SET = 'NotSet'
    PAYMENT = 'Payment'
    DEDUCTION = 'Deduction'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PayCodePayCode:
    
    benefit: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Benefit'), 'exclude': lambda f: f is None }})
    r"""The pay codes' benefit"""  
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Code'), 'exclude': lambda f: f is None }})
    r"""The pay codes' code"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})
    r"""The pay codes' description"""  
    effective_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EffectiveDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The pay codes' effective date"""  
    meta_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MetaData'), 'exclude': lambda f: f is None }})
    r"""The pay codes' meta data"""  
    next_revision_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NextRevisionDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The pay codes' next revision date"""  
    niable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Niable'), 'exclude': lambda f: f is None }})
    r"""The pay codes' niable"""  
    nominal_code: Optional[PayCodePayCodeNominalCode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NominalCode'), 'exclude': lambda f: f is None }})
    r"""The pay codes' nominal code"""  
    non_arrestable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NonArrestable'), 'exclude': lambda f: f is None }})
    r"""The pay codes' non arrestable"""  
    notional: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Notional'), 'exclude': lambda f: f is None }})
    r"""The pay codes' notional"""  
    readonly: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Readonly'), 'exclude': lambda f: f is None }})
    r"""The pay codes' readonly"""  
    region: Optional[PayCodePayCodeRegionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Region'), 'exclude': lambda f: f is None }})
    r"""The pay codes' region"""  
    revision: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Revision'), 'exclude': lambda f: f is None }})
    r"""The pay codes' revision"""  
    taxable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Taxable'), 'exclude': lambda f: f is None }})
    r"""The pay codes' taxable"""  
    territory: Optional[PayCodePayCodeTerritoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Territory'), 'exclude': lambda f: f is None }})
    r"""The pay codes' territory"""  
    type: Optional[PayCodePayCodeTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type'), 'exclude': lambda f: f is None }})
    r"""The pay codes' type"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PayCode:
    r"""The pay code object."""
    
    pay_code: Optional[PayCodePayCode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayCode'), 'exclude': lambda f: f is None }})  
    