// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DisassociateApprovalRuleTemplateFromRepositoryXAmzTargetEnum
type DisassociateApprovalRuleTemplateFromRepositoryXAmzTargetEnum string

const (
	DisassociateApprovalRuleTemplateFromRepositoryXAmzTargetEnumCodeCommit20150413DisassociateApprovalRuleTemplateFromRepository DisassociateApprovalRuleTemplateFromRepositoryXAmzTargetEnum = "CodeCommit_20150413.DisassociateApprovalRuleTemplateFromRepository"
)

func (e *DisassociateApprovalRuleTemplateFromRepositoryXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeCommit_20150413.DisassociateApprovalRuleTemplateFromRepository":
		*e = DisassociateApprovalRuleTemplateFromRepositoryXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DisassociateApprovalRuleTemplateFromRepositoryXAmzTargetEnum: %s", s)
	}
}

type DisassociateApprovalRuleTemplateFromRepositoryRequest struct {
	DisassociateApprovalRuleTemplateFromRepositoryInput shared.DisassociateApprovalRuleTemplateFromRepositoryInput   `request:"mediaType=application/json"`
	XAmzAlgorithm                                       *string                                                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                                   *string                                                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                                      *string                                                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                                            *string                                                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                                   *string                                                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                                       *string                                                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                                   *string                                                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                                          DisassociateApprovalRuleTemplateFromRepositoryXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DisassociateApprovalRuleTemplateFromRepositoryResponse struct {
	// ApprovalRuleTemplateDoesNotExistException
	ApprovalRuleTemplateDoesNotExistException interface{}
	// ApprovalRuleTemplateNameRequiredException
	ApprovalRuleTemplateNameRequiredException interface{}
	ContentType                               string
	// EncryptionIntegrityChecksFailedException
	EncryptionIntegrityChecksFailedException interface{}
	// EncryptionKeyAccessDeniedException
	EncryptionKeyAccessDeniedException interface{}
	// EncryptionKeyDisabledException
	EncryptionKeyDisabledException interface{}
	// EncryptionKeyNotFoundException
	EncryptionKeyNotFoundException interface{}
	// EncryptionKeyUnavailableException
	EncryptionKeyUnavailableException interface{}
	// InvalidApprovalRuleTemplateNameException
	InvalidApprovalRuleTemplateNameException interface{}
	// InvalidRepositoryNameException
	InvalidRepositoryNameException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
	// RepositoryDoesNotExistException
	RepositoryDoesNotExistException interface{}
	// RepositoryNameRequiredException
	RepositoryNameRequiredException interface{}
}
