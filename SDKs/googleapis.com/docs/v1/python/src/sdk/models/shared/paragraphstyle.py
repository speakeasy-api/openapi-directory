"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dimension as shared_dimension
from ..shared import paragraphborder as shared_paragraphborder
from ..shared import shading as shared_shading
from ..shared import tabstop as shared_tabstop
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ParagraphStyleAlignmentEnum(str, Enum):
    r"""The text alignment for this paragraph."""
    ALIGNMENT_UNSPECIFIED = 'ALIGNMENT_UNSPECIFIED'
    START = 'START'
    CENTER = 'CENTER'
    END = 'END'
    JUSTIFIED = 'JUSTIFIED'

class ParagraphStyleDirectionEnum(str, Enum):
    r"""The text direction of this paragraph. If unset, the value defaults to LEFT_TO_RIGHT since paragraph direction is not inherited."""
    CONTENT_DIRECTION_UNSPECIFIED = 'CONTENT_DIRECTION_UNSPECIFIED'
    LEFT_TO_RIGHT = 'LEFT_TO_RIGHT'
    RIGHT_TO_LEFT = 'RIGHT_TO_LEFT'

class ParagraphStyleNamedStyleTypeEnum(str, Enum):
    r"""The named style type of the paragraph. Since updating the named style type affects other properties within ParagraphStyle, the named style type is applied before the other properties are updated."""
    NAMED_STYLE_TYPE_UNSPECIFIED = 'NAMED_STYLE_TYPE_UNSPECIFIED'
    NORMAL_TEXT = 'NORMAL_TEXT'
    TITLE = 'TITLE'
    SUBTITLE = 'SUBTITLE'
    HEADING_1 = 'HEADING_1'
    HEADING_2 = 'HEADING_2'
    HEADING_3 = 'HEADING_3'
    HEADING_4 = 'HEADING_4'
    HEADING_5 = 'HEADING_5'
    HEADING_6 = 'HEADING_6'

class ParagraphStyleSpacingModeEnum(str, Enum):
    r"""The spacing mode for the paragraph."""
    SPACING_MODE_UNSPECIFIED = 'SPACING_MODE_UNSPECIFIED'
    NEVER_COLLAPSE = 'NEVER_COLLAPSE'
    COLLAPSE_LISTS = 'COLLAPSE_LISTS'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ParagraphStyle:
    r"""Styles that apply to a whole paragraph. Inherited paragraph styles are represented as unset fields in this message. A paragraph style's parent depends on where the paragraph style is defined: * The ParagraphStyle on a Paragraph inherits from the paragraph's corresponding named style type. * The ParagraphStyle on a named style inherits from the normal text named style. * The ParagraphStyle of the normal text named style inherits from the default paragraph style in the Docs editor. * The ParagraphStyle on a Paragraph element that's contained in a table may inherit its paragraph style from the table style. If the paragraph style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor."""
    
    alignment: Optional[ParagraphStyleAlignmentEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alignment'), 'exclude': lambda f: f is None }})
    r"""The text alignment for this paragraph."""  
    avoid_widow_and_orphan: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avoidWidowAndOrphan'), 'exclude': lambda f: f is None }})
    r"""Whether to avoid widows and orphans for the paragraph. If unset, the value is inherited from the parent."""  
    border_between: Optional[shared_paragraphborder.ParagraphBorder] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('borderBetween'), 'exclude': lambda f: f is None }})
    r"""A border around a paragraph."""  
    border_bottom: Optional[shared_paragraphborder.ParagraphBorder] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('borderBottom'), 'exclude': lambda f: f is None }})
    r"""A border around a paragraph."""  
    border_left: Optional[shared_paragraphborder.ParagraphBorder] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('borderLeft'), 'exclude': lambda f: f is None }})
    r"""A border around a paragraph."""  
    border_right: Optional[shared_paragraphborder.ParagraphBorder] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('borderRight'), 'exclude': lambda f: f is None }})
    r"""A border around a paragraph."""  
    border_top: Optional[shared_paragraphborder.ParagraphBorder] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('borderTop'), 'exclude': lambda f: f is None }})
    r"""A border around a paragraph."""  
    direction: Optional[ParagraphStyleDirectionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('direction'), 'exclude': lambda f: f is None }})
    r"""The text direction of this paragraph. If unset, the value defaults to LEFT_TO_RIGHT since paragraph direction is not inherited."""  
    heading_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headingId'), 'exclude': lambda f: f is None }})
    r"""The heading ID of the paragraph. If empty, then this paragraph is not a heading. This property is read-only."""  
    indent_end: Optional[shared_dimension.Dimension] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('indentEnd'), 'exclude': lambda f: f is None }})
    r"""A magnitude in a single direction in the specified units."""  
    indent_first_line: Optional[shared_dimension.Dimension] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('indentFirstLine'), 'exclude': lambda f: f is None }})
    r"""A magnitude in a single direction in the specified units."""  
    indent_start: Optional[shared_dimension.Dimension] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('indentStart'), 'exclude': lambda f: f is None }})
    r"""A magnitude in a single direction in the specified units."""  
    keep_lines_together: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keepLinesTogether'), 'exclude': lambda f: f is None }})
    r"""Whether all lines of the paragraph should be laid out on the same page or column if possible. If unset, the value is inherited from the parent."""  
    keep_with_next: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keepWithNext'), 'exclude': lambda f: f is None }})
    r"""Whether at least a part of this paragraph should be laid out on the same page or column as the next paragraph if possible. If unset, the value is inherited from the parent."""  
    line_spacing: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lineSpacing'), 'exclude': lambda f: f is None }})
    r"""The amount of space between lines, as a percentage of normal, where normal is represented as 100.0. If unset, the value is inherited from the parent."""  
    named_style_type: Optional[ParagraphStyleNamedStyleTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('namedStyleType'), 'exclude': lambda f: f is None }})
    r"""The named style type of the paragraph. Since updating the named style type affects other properties within ParagraphStyle, the named style type is applied before the other properties are updated."""  
    page_break_before: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pageBreakBefore'), 'exclude': lambda f: f is None }})
    r"""Whether the current paragraph should always start at the beginning of a page. If unset, the value is inherited from the parent. Attempting to update page_break_before for paragraphs in unsupported regions, including Table, Header, Footer and Footnote, can result in an invalid document state that returns a 400 bad request error."""  
    shading: Optional[shared_shading.Shading] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shading'), 'exclude': lambda f: f is None }})
    r"""The shading of a paragraph."""  
    space_above: Optional[shared_dimension.Dimension] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spaceAbove'), 'exclude': lambda f: f is None }})
    r"""A magnitude in a single direction in the specified units."""  
    space_below: Optional[shared_dimension.Dimension] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spaceBelow'), 'exclude': lambda f: f is None }})
    r"""A magnitude in a single direction in the specified units."""  
    spacing_mode: Optional[ParagraphStyleSpacingModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spacingMode'), 'exclude': lambda f: f is None }})
    r"""The spacing mode for the paragraph."""  
    tab_stops: Optional[list[shared_tabstop.TabStop]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tabStops'), 'exclude': lambda f: f is None }})
    r"""A list of the tab stops for this paragraph. The list of tab stops is not inherited. This property is read-only."""  
    