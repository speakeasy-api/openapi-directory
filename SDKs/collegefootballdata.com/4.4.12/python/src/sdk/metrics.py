"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Metrics:
    r"""Data relating to Predicted Points and other metrics"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_game_ppa(self, request: operations.GetGamePPARequest) -> operations.GetGamePPAResponse:
        r"""Team Predicated Points Added (PPA/EPA) by game
        Predicted Points Added (PPA) by game
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/ppa/games'
        
        query_params = utils.get_query_params(operations.GetGamePPARequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGamePPAResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.GamePPA]])
                res.game_ppas = out
        elif http_res.status_code == 400:
            pass

        return res

    def get_player_game_ppa(self, request: operations.GetPlayerGamePPARequest) -> operations.GetPlayerGamePPAResponse:
        r"""Player Predicated Points Added (PPA/EPA) broken down by game
        Predicted Points Added (PPA) by player game
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/ppa/players/games'
        
        query_params = utils.get_query_params(operations.GetPlayerGamePPARequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPlayerGamePPAResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PlayerGamePPA]])
                res.player_game_ppas = out
        elif http_res.status_code == 400:
            pass

        return res

    def get_player_season_ppa(self, request: operations.GetPlayerSeasonPPARequest) -> operations.GetPlayerSeasonPPAResponse:
        r"""Player Predicated Points Added (PPA/EPA) broken down by season
        Predicted Points Added (PPA) by player season
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/ppa/players/season'
        
        query_params = utils.get_query_params(operations.GetPlayerSeasonPPARequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPlayerSeasonPPAResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PlayerSeasonPPA]])
                res.player_season_ppas = out
        elif http_res.status_code == 400:
            pass

        return res

    def get_predicted_points(self, request: operations.GetPredictedPointsRequest) -> operations.GetPredictedPointsResponse:
        r"""Predicted Points (i.e. Expected Points or EP)
        Predicted Points
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/ppa/predicted'
        
        query_params = utils.get_query_params(operations.GetPredictedPointsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPredictedPointsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PredictedPoints]])
                res.predicted_points = out
        elif http_res.status_code == 400:
            pass

        return res

    def get_pregame_win_probabilities(self, request: operations.GetPregameWinProbabilitiesRequest) -> operations.GetPregameWinProbabilitiesResponse:
        r"""Pregame win probability data
        Pregame win probabilities
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/metrics/wp/pregame'
        
        query_params = utils.get_query_params(operations.GetPregameWinProbabilitiesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPregameWinProbabilitiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PregameWP]])
                res.pregame_wps = out
        elif http_res.status_code == 400:
            pass

        return res

    def get_team_ppa(self, request: operations.GetTeamPPARequest) -> operations.GetTeamPPAResponse:
        r"""Predicted Points Added (PPA/EPA) data by team
        Predicted Points Added (PPA)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/ppa/teams'
        
        query_params = utils.get_query_params(operations.GetTeamPPARequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamPPAResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TeamPPA]])
                res.team_ppas = out
        elif http_res.status_code == 400:
            pass

        return res

    def get_win_probability_data(self, request: operations.GetWinProbabilityDataRequest) -> operations.GetWinProbabilityDataResponse:
        r"""Win probability chart data
        Win probability data
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/metrics/wp'
        
        query_params = utils.get_query_params(operations.GetWinProbabilityDataRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWinProbabilityDataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PlayWP]])
                res.play_wps = out
        elif http_res.status_code == 400:
            pass

        return res

    