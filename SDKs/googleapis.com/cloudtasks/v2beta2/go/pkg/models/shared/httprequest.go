// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// HTTPRequestHTTPMethodEnum - The HTTP method to use for the request. The default is POST.
type HTTPRequestHTTPMethodEnum string

const (
	HTTPRequestHTTPMethodEnumHTTPMethodUnspecified HTTPRequestHTTPMethodEnum = "HTTP_METHOD_UNSPECIFIED"
	HTTPRequestHTTPMethodEnumPost                  HTTPRequestHTTPMethodEnum = "POST"
	HTTPRequestHTTPMethodEnumGet                   HTTPRequestHTTPMethodEnum = "GET"
	HTTPRequestHTTPMethodEnumHead                  HTTPRequestHTTPMethodEnum = "HEAD"
	HTTPRequestHTTPMethodEnumPut                   HTTPRequestHTTPMethodEnum = "PUT"
	HTTPRequestHTTPMethodEnumDelete                HTTPRequestHTTPMethodEnum = "DELETE"
	HTTPRequestHTTPMethodEnumPatch                 HTTPRequestHTTPMethodEnum = "PATCH"
	HTTPRequestHTTPMethodEnumOptions               HTTPRequestHTTPMethodEnum = "OPTIONS"
)

func (e *HTTPRequestHTTPMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "HTTP_METHOD_UNSPECIFIED":
		fallthrough
	case "POST":
		fallthrough
	case "GET":
		fallthrough
	case "HEAD":
		fallthrough
	case "PUT":
		fallthrough
	case "DELETE":
		fallthrough
	case "PATCH":
		fallthrough
	case "OPTIONS":
		*e = HTTPRequestHTTPMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for HTTPRequestHTTPMethodEnum: %s", s)
	}
}

// HTTPRequest - HTTP request. The task will be pushed to the worker as an HTTP request. An HTTP request embodies a url, an http method, headers, body and authorization for the http task.
type HTTPRequest struct {
	// HTTP request body. A request body is allowed only if the HTTP method is POST, PUT, or PATCH. It is an error to set body on a task with an incompatible HttpMethod.
	Body *string `json:"body,omitempty"`
	// HTTP request headers. This map contains the header field names and values. Headers can be set when running the task is created or task is created. These headers represent a subset of the headers that will accompany the task's HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is: * Any header that is prefixed with "X-CloudTasks-" will be treated as service header. Service headers define properties of the task and are predefined in CloudTask. * Host: This will be computed by Cloud Tasks and derived from HttpRequest.url. * Content-Length: This will be computed by Cloud Tasks. * User-Agent: This will be set to `"Google-Cloud-Tasks"`. * `X-Google-*`: Google use only. * `X-AppEngine-*`: Google use only. `Content-Type` won't be set by Cloud Tasks. You can explicitly set `Content-Type` to a media type when the task is created. For example, `Content-Type` can be set to `"application/octet-stream"` or `"application/json"`. Headers which can have multiple values (according to RFC2616) can be specified using comma-separated values. The size of the headers must be less than 80KB.
	Headers map[string]string `json:"headers,omitempty"`
	// The HTTP method to use for the request. The default is POST.
	HTTPMethod *HTTPRequestHTTPMethodEnum `json:"httpMethod,omitempty"`
	// Contains information needed for generating an [OAuth token](https://developers.google.com/identity/protocols/OAuth2). This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
	OauthToken *OAuthToken `json:"oauthToken,omitempty"`
	// Contains information needed for generating an [OpenID Connect token](https://developers.google.com/identity/protocols/OpenIDConnect). This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
	OidcToken *OidcToken `json:"oidcToken,omitempty"`
	// Required. The full url path that the request will be sent to. This string must begin with either "http://" or "https://". Some examples are: `http://acme.com` and `https://acme.com/sales:8080`. Cloud Tasks will encode some characters for safety and compatibility. The maximum allowed URL length is 2083 characters after encoding. The `Location` header response from a redirect response [`300` - `399`] may be followed. The redirect is not counted as a separate attempt.
	URL *string `json:"url,omitempty"`
}
