"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import frequencycap as shared_frequencycap
from ..shared import targetfrequency as shared_targetfrequency
from ..shared import videoadsequencesettings as shared_videoadsequencesettings
from ..shared import youtubeandpartnersbiddingstrategy as shared_youtubeandpartnersbiddingstrategy
from ..shared import youtubeandpartnersinventorysourceconfig as shared_youtubeandpartnersinventorysourceconfig
from ..shared import youtubeandpartnersthirdpartymeasurementsettings as shared_youtubeandpartnersthirdpartymeasurementsettings
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class YoutubeAndPartnersSettingsContentCategoryEnum(str, Enum):
    r"""The kind of content on which the YouTube and Partners ads will be shown."""
    YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_UNSPECIFIED = 'YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_UNSPECIFIED'
    YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_STANDARD = 'YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_STANDARD'
    YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_EXPANDED = 'YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_EXPANDED'
    YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_LIMITED = 'YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_LIMITED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class YoutubeAndPartnersSettingsInput:
    r"""Settings for YouTube and Partners line items."""
    
    bidding_strategy: Optional[shared_youtubeandpartnersbiddingstrategy.YoutubeAndPartnersBiddingStrategyInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('biddingStrategy'), 'exclude': lambda f: f is None }})
    r"""Settings that control the bid strategy for YouTube and Partners resources."""  
    content_category: Optional[YoutubeAndPartnersSettingsContentCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentCategory'), 'exclude': lambda f: f is None }})
    r"""The kind of content on which the YouTube and Partners ads will be shown."""  
    inventory_source_settings: Optional[shared_youtubeandpartnersinventorysourceconfig.YoutubeAndPartnersInventorySourceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventorySourceSettings'), 'exclude': lambda f: f is None }})
    r"""Settings that control what YouTube related inventories the YouTube and Partners line item will target."""  
    lead_form_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leadFormId'), 'exclude': lambda f: f is None }})
    r"""The ID of the form to generate leads."""  
    linked_merchant_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linkedMerchantId'), 'exclude': lambda f: f is None }})
    r"""The ID of the merchant which is linked to the line item for product feed."""  
    related_video_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relatedVideoIds'), 'exclude': lambda f: f is None }})
    r"""The IDs of the videos appear below the primary video ad when the ad is playing in the YouTube app on mobile devices."""  
    target_frequency: Optional[shared_targetfrequency.TargetFrequency] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetFrequency'), 'exclude': lambda f: f is None }})
    r"""Setting that controls the average number of times the ads will show to the same person over a certain period of time."""  
    third_party_measurement_settings: Optional[shared_youtubeandpartnersthirdpartymeasurementsettings.YoutubeAndPartnersThirdPartyMeasurementSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thirdPartyMeasurementSettings'), 'exclude': lambda f: f is None }})
    r"""Settings that control what third-party vendors are measuring specific line item metrics."""  
    video_ad_sequence_settings: Optional[shared_videoadsequencesettings.VideoAdSequenceSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videoAdSequenceSettings'), 'exclude': lambda f: f is None }})
    r"""Settings related to VideoAdSequence."""  
    view_frequency_cap: Optional[shared_frequencycap.FrequencyCap] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('viewFrequencyCap'), 'exclude': lambda f: f is None }})
    r"""Settings that control the number of times a user may be shown with the same ad during a given time period."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class YoutubeAndPartnersSettings:
    r"""Settings for YouTube and Partners line items."""
    
    bidding_strategy: Optional[shared_youtubeandpartnersbiddingstrategy.YoutubeAndPartnersBiddingStrategy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('biddingStrategy'), 'exclude': lambda f: f is None }})
    r"""Settings that control the bid strategy for YouTube and Partners resources."""  
    content_category: Optional[YoutubeAndPartnersSettingsContentCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentCategory'), 'exclude': lambda f: f is None }})
    r"""The kind of content on which the YouTube and Partners ads will be shown."""  
    inventory_source_settings: Optional[shared_youtubeandpartnersinventorysourceconfig.YoutubeAndPartnersInventorySourceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventorySourceSettings'), 'exclude': lambda f: f is None }})
    r"""Settings that control what YouTube related inventories the YouTube and Partners line item will target."""  
    lead_form_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leadFormId'), 'exclude': lambda f: f is None }})
    r"""The ID of the form to generate leads."""  
    linked_merchant_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linkedMerchantId'), 'exclude': lambda f: f is None }})
    r"""The ID of the merchant which is linked to the line item for product feed."""  
    related_video_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relatedVideoIds'), 'exclude': lambda f: f is None }})
    r"""The IDs of the videos appear below the primary video ad when the ad is playing in the YouTube app on mobile devices."""  
    target_frequency: Optional[shared_targetfrequency.TargetFrequency] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetFrequency'), 'exclude': lambda f: f is None }})
    r"""Setting that controls the average number of times the ads will show to the same person over a certain period of time."""  
    third_party_measurement_settings: Optional[shared_youtubeandpartnersthirdpartymeasurementsettings.YoutubeAndPartnersThirdPartyMeasurementSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thirdPartyMeasurementSettings'), 'exclude': lambda f: f is None }})
    r"""Settings that control what third-party vendors are measuring specific line item metrics."""  
    video_ad_sequence_settings: Optional[shared_videoadsequencesettings.VideoAdSequenceSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videoAdSequenceSettings'), 'exclude': lambda f: f is None }})
    r"""Settings related to VideoAdSequence."""  
    view_frequency_cap: Optional[shared_frequencycap.FrequencyCap] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('viewFrequencyCap'), 'exclude': lambda f: f is None }})
    r"""Settings that control the number of times a user may be shown with the same ad during a given time period."""  
    