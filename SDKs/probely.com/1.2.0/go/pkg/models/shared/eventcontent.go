// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type EventContentType string

const (
	EventContentTypeUser    EventContentType = "User"
	EventContentTypeTarget  EventContentType = "Target"
	EventContentTypeScan    EventContentType = "Scan"
	EventContentTypeFinding EventContentType = "Finding"
)

type EventContent struct {
	User    *User
	Target  *Target
	Scan    *Scan
	Finding *Finding

	Type EventContentType
}

func CreateEventContentUser(user User) EventContent {
	typ := EventContentTypeUser

	return EventContent{
		User: &user,
		Type: typ,
	}
}

func CreateEventContentTarget(target Target) EventContent {
	typ := EventContentTypeTarget

	return EventContent{
		Target: &target,
		Type:   typ,
	}
}

func CreateEventContentScan(scan Scan) EventContent {
	typ := EventContentTypeScan

	return EventContent{
		Scan: &scan,
		Type: typ,
	}
}

func CreateEventContentFinding(finding Finding) EventContent {
	typ := EventContentTypeFinding

	return EventContent{
		Finding: &finding,
		Type:    typ,
	}
}

func (u *EventContent) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	user := new(User)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&user); err == nil {
		u.User = user
		u.Type = EventContentTypeUser
		return nil
	}

	target := new(Target)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&target); err == nil {
		u.Target = target
		u.Type = EventContentTypeTarget
		return nil
	}

	scan := new(Scan)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&scan); err == nil {
		u.Scan = scan
		u.Type = EventContentTypeScan
		return nil
	}

	finding := new(Finding)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&finding); err == nil {
		u.Finding = finding
		u.Type = EventContentTypeFinding
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u EventContent) MarshalJSON() ([]byte, error) {
	if u.User != nil {
		return json.Marshal(u.User)
	}

	if u.Target != nil {
		return json.Marshal(u.Target)
	}

	if u.Scan != nil {
		return json.Marshal(u.Scan)
	}

	if u.Finding != nil {
		return json.Marshal(u.Finding)
	}

	return nil, nil
}
