/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ListArchivedFiles200ApplicationJSONMeetings {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archive_files")
    public ListArchivedFiles200ApplicationJSONMeetingsArchiveFiles[] archiveFiles;
    public ListArchivedFiles200ApplicationJSONMeetings withArchiveFiles(ListArchivedFiles200ApplicationJSONMeetingsArchiveFiles[] archiveFiles) {
        this.archiveFiles = archiveFiles;
        return this;
    }
    
    /**
     * Scheduled duration of the meeting or the webinar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    public Long duration;
    public ListArchivedFiles200ApplicationJSONMeetings withDuration(Long duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * ID of the user set as the host of meeting or the webinar that was archived.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host_id")
    public String hostId;
    public ListArchivedFiles200ApplicationJSONMeetings withHostId(String hostId) {
        this.hostId = hostId;
        return this;
    }
    
    /**
     * Unique identifier of the meeting(meetingId) or the webinar(webinarId).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;
    public ListArchivedFiles200ApplicationJSONMeetings withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Number of recording files returned in the response of this API call.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recording_count")
    public Long recordingCount;
    public ListArchivedFiles200ApplicationJSONMeetings withRecordingCount(Long recordingCount) {
        this.recordingCount = recordingCount;
        return this;
    }
    
    /**
     * The time at which the meeting or the webinar started.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_time")
    public String startTime;
    public ListArchivedFiles200ApplicationJSONMeetings withStartTime(String startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * Timezone of the host.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    public String timezone;
    public ListArchivedFiles200ApplicationJSONMeetings withTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }
    
    /**
     * Meeting or webinar topic.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("topic")
    public String topic;
    public ListArchivedFiles200ApplicationJSONMeetings withTopic(String topic) {
        this.topic = topic;
        return this;
    }
    
    /**
     * Total size of the archive.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_size")
    public Long totalSize;
    public ListArchivedFiles200ApplicationJSONMeetings withTotalSize(Long totalSize) {
        this.totalSize = totalSize;
        return this;
    }
    
    /**
     * Type of the meeting or the webinar that was archived.&lt;br&gt;
     * &lt;br&gt;Meeting types:&lt;br&gt;
     * `1` - Instant meeting&lt;br&gt;
     * `2` - Scheduled meeting&lt;br&gt;
     * `3` - Recurring meeting with no fixed time&lt;br&gt;
     * 8 - Recurring meeting with fixed time
     *  
     * Webinar types:&lt;br&gt;
     * `5` - Webinar&lt;br&gt;
     * `6` - Recurring webinar with no fixed time&lt;br&gt;
     * `9` - Recurring webinar with a fixed time
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public Long type;
    public ListArchivedFiles200ApplicationJSONMeetings withType(Long type) {
        this.type = type;
        return this;
    }
    
    /**
     * Unique identifier of the meeting instance or the webinar instance during which the archiving took place. Each instance of the meeting will have its own UUID.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uuid")
    public String uuid;
    public ListArchivedFiles200ApplicationJSONMeetings withUuid(String uuid) {
        this.uuid = uuid;
        return this;
    }
    
}
