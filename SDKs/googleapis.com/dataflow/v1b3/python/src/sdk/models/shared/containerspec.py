"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import flextemplateruntimeenvironment as shared_flextemplateruntimeenvironment
from ..shared import sdkinfo as shared_sdkinfo
from ..shared import templatemetadata as shared_templatemetadata
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ContainerSpec:
    r"""Container Spec."""
    
    default_environment: Optional[shared_flextemplateruntimeenvironment.FlexTemplateRuntimeEnvironment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultEnvironment'), 'exclude': lambda f: f is None }})
    r"""The environment values to be set at runtime for flex template."""  
    image: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image'), 'exclude': lambda f: f is None }})
    r"""Name of the docker container image. E.g., gcr.io/project/some-image"""  
    image_repository_cert_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageRepositoryCertPath'), 'exclude': lambda f: f is None }})
    r"""Cloud Storage path to self-signed certificate of private registry."""  
    image_repository_password_secret_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageRepositoryPasswordSecretId'), 'exclude': lambda f: f is None }})
    r"""Secret Manager secret id for password to authenticate to private registry."""  
    image_repository_username_secret_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageRepositoryUsernameSecretId'), 'exclude': lambda f: f is None }})
    r"""Secret Manager secret id for username to authenticate to private registry."""  
    metadata: Optional[shared_templatemetadata.TemplateMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""Metadata describing a template."""  
    sdk_info: Optional[shared_sdkinfo.SDKInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sdkInfo'), 'exclude': lambda f: f is None }})
    r"""SDK Information."""  
    