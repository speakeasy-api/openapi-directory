"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import instancefleetconfig as shared_instancefleetconfig
from ..shared import instancegroupconfig as shared_instancegroupconfig
from ..shared import placementtype as shared_placementtype
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JobFlowInstancesConfig:
    r"""A description of the Amazon EC2 instance on which the cluster (job flow) runs. A valid JobFlowInstancesConfig must contain either InstanceGroups or InstanceFleets. They cannot be used together. You may also have MasterInstanceType, SlaveInstanceType, and InstanceCount (all three must be present), but we don't recommend this configuration."""
    
    additional_master_security_groups: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdditionalMasterSecurityGroups'), 'exclude': lambda f: f is None }})  
    additional_slave_security_groups: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdditionalSlaveSecurityGroups'), 'exclude': lambda f: f is None }})  
    ec2_key_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Ec2KeyName'), 'exclude': lambda f: f is None }})  
    ec2_subnet_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Ec2SubnetId'), 'exclude': lambda f: f is None }})  
    ec2_subnet_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Ec2SubnetIds'), 'exclude': lambda f: f is None }})  
    emr_managed_master_security_group: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmrManagedMasterSecurityGroup'), 'exclude': lambda f: f is None }})  
    emr_managed_slave_security_group: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmrManagedSlaveSecurityGroup'), 'exclude': lambda f: f is None }})  
    hadoop_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HadoopVersion'), 'exclude': lambda f: f is None }})  
    instance_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceCount'), 'exclude': lambda f: f is None }})  
    instance_fleets: Optional[list[shared_instancefleetconfig.InstanceFleetConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceFleets'), 'exclude': lambda f: f is None }})  
    instance_groups: Optional[list[shared_instancegroupconfig.InstanceGroupConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceGroups'), 'exclude': lambda f: f is None }})  
    keep_job_flow_alive_when_no_steps: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeepJobFlowAliveWhenNoSteps'), 'exclude': lambda f: f is None }})  
    master_instance_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MasterInstanceType'), 'exclude': lambda f: f is None }})  
    placement: Optional[shared_placementtype.PlacementType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Placement'), 'exclude': lambda f: f is None }})  
    service_access_security_group: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceAccessSecurityGroup'), 'exclude': lambda f: f is None }})  
    slave_instance_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SlaveInstanceType'), 'exclude': lambda f: f is None }})  
    termination_protected: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TerminationProtected'), 'exclude': lambda f: f is None }})  
    