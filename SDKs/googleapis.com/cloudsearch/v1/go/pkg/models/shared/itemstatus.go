// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ItemStatusCodeEnum - Status code.
type ItemStatusCodeEnum string

const (
	ItemStatusCodeEnumCodeUnspecified ItemStatusCodeEnum = "CODE_UNSPECIFIED"
	ItemStatusCodeEnumError           ItemStatusCodeEnum = "ERROR"
	ItemStatusCodeEnumModified        ItemStatusCodeEnum = "MODIFIED"
	ItemStatusCodeEnumNewItem         ItemStatusCodeEnum = "NEW_ITEM"
	ItemStatusCodeEnumAccepted        ItemStatusCodeEnum = "ACCEPTED"
)

func (e *ItemStatusCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CODE_UNSPECIFIED":
		fallthrough
	case "ERROR":
		fallthrough
	case "MODIFIED":
		fallthrough
	case "NEW_ITEM":
		fallthrough
	case "ACCEPTED":
		*e = ItemStatusCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ItemStatusCodeEnum: %s", s)
	}
}

// ItemStatus - This contains item's status and any errors.
type ItemStatus struct {
	// Status code.
	Code *ItemStatusCodeEnum `json:"code,omitempty"`
	// Error details in case the item is in ERROR state.
	ProcessingErrors []ProcessingError `json:"processingErrors,omitempty"`
	// Repository error reported by connector.
	RepositoryErrors []RepositoryError `json:"repositoryErrors,omitempty"`
}
