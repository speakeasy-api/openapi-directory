/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * A structure containing information about how this workspace works with SAML.
 */
export class UpdateWorkspaceAuthenticationRequestBodySamlConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "allowedOrganizations" })
  allowedOrganizations?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "assertionAttributes" })
  @Type(() => shared.AssertionAttributes)
  assertionAttributes?: shared.AssertionAttributes;

  @SpeakeasyMetadata()
  @Expose({ name: "idpMetadata" })
  @Type(() => shared.IdpMetadata)
  idpMetadata?: shared.IdpMetadata;

  @SpeakeasyMetadata()
  @Expose({ name: "loginValidityDuration" })
  loginValidityDuration?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "roleValues" })
  @Type(() => shared.RoleValues)
  roleValues?: shared.RoleValues;
}

export class UpdateWorkspaceAuthenticationRequestBody extends SpeakeasyBase {
  /**
   * Specifies whether this workspace uses SAML 2.0, IAM Identity Center (successor to Single Sign-On), or both to authenticate users for using the Grafana console within a workspace. For more information, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/authentication-in-AMG.html">User authentication in Amazon Managed Grafana</a>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authenticationProviders" })
  authenticationProviders: shared.AuthenticationProviderTypesEnum[];

  /**
   * A structure containing information about how this workspace works with SAML.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "samlConfiguration" })
  @Type(() => UpdateWorkspaceAuthenticationRequestBodySamlConfiguration)
  samlConfiguration?: UpdateWorkspaceAuthenticationRequestBodySamlConfiguration;
}

export class UpdateWorkspaceAuthenticationRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateWorkspaceAuthenticationRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The ID of the workspace to update the authentication for.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=workspaceId",
  })
  workspaceId: string;
}

export class UpdateWorkspaceAuthenticationResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateWorkspaceAuthenticationResponse?: shared.UpdateWorkspaceAuthenticationResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
