"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Definitions:
    r"""Operations to configure custom workflow actions."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_automation_v4_actions_app_id_definition_id_archive(self, request: operations.DeleteAutomationV4ActionsAppIDDefinitionIDArchiveRequest, security: operations.DeleteAutomationV4ActionsAppIDDefinitionIDArchiveSecurity) -> operations.DeleteAutomationV4ActionsAppIDDefinitionIDArchiveResponse:
        r"""Archive a custom action
        Archives a single custom workflow action with the specified ID. Workflows that currently use this custom action will stop attempting to execute the action, and all future executions will be marked as a failure.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteAutomationV4ActionsAppIDDefinitionIDArchiveRequest, base_url, '/automation/v4/actions/{appId}/{definitionId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAutomationV4ActionsAppIDDefinitionIDArchiveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_automation_v4_actions_app_id_definition_id_get_by_id(self, request: operations.GetAutomationV4ActionsAppIDDefinitionIDGetByIDRequest, security: operations.GetAutomationV4ActionsAppIDDefinitionIDGetByIDSecurity) -> operations.GetAutomationV4ActionsAppIDDefinitionIDGetByIDResponse:
        r"""Get a custom action
        Returns a single custom workflow action with the specified ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAutomationV4ActionsAppIDDefinitionIDGetByIDRequest, base_url, '/automation/v4/actions/{appId}/{definitionId}', request)
        
        query_params = utils.get_query_params(operations.GetAutomationV4ActionsAppIDDefinitionIDGetByIDRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAutomationV4ActionsAppIDDefinitionIDGetByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ExtensionActionDefinition])
                res.extension_action_definition = out
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_automation_v4_actions_app_id_get_page(self, request: operations.GetAutomationV4ActionsAppIDGetPageRequest, security: operations.GetAutomationV4ActionsAppIDGetPageSecurity) -> operations.GetAutomationV4ActionsAppIDGetPageResponse:
        r"""Get all custom actions
        Returns a list of all custom workflow actions.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAutomationV4ActionsAppIDGetPageRequest, base_url, '/automation/v4/actions/{appId}', request)
        
        query_params = utils.get_query_params(operations.GetAutomationV4ActionsAppIDGetPageRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAutomationV4ActionsAppIDGetPageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CollectionResponseExtensionActionDefinitionForwardPaging])
                res.collection_response_extension_action_definition_forward_paging = out
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def patch_automation_v4_actions_app_id_definition_id_update(self, request: operations.PatchAutomationV4ActionsAppIDDefinitionIDUpdateRequest, security: operations.PatchAutomationV4ActionsAppIDDefinitionIDUpdateSecurity) -> operations.PatchAutomationV4ActionsAppIDDefinitionIDUpdateResponse:
        r"""Update a custom action
        Updates a custom workflow action with new values for the specified fields.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchAutomationV4ActionsAppIDDefinitionIDUpdateRequest, base_url, '/automation/v4/actions/{appId}/{definitionId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "extension_action_definition_patch", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchAutomationV4ActionsAppIDDefinitionIDUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ExtensionActionDefinition])
                res.extension_action_definition = out
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def post_automation_v4_actions_app_id_create(self, request: operations.PostAutomationV4ActionsAppIDCreateRequest, security: operations.PostAutomationV4ActionsAppIDCreateSecurity) -> operations.PostAutomationV4ActionsAppIDCreateResponse:
        r"""Create new custom action
        Creates a new custom workflow action.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostAutomationV4ActionsAppIDCreateRequest, base_url, '/automation/v4/actions/{appId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "extension_action_definition_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAutomationV4ActionsAppIDCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ExtensionActionDefinition])
                res.extension_action_definition = out
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    