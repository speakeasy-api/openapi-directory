// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

type GetSchedulesScheduleDSubIDRequest struct {
	// API key for https://api.data.gov. Get one at https://api.data.gov/signup.
	//
	APIKey string `queryParam:"style=form,explode=true,name=api_key"`
	// For paginating through results, starting at page 1
	Page *int `queryParam:"style=form,explode=true,name=page"`
	// The number of results returned per page. Defaults to 20.
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// Provide a field to sort by. Use `-` for descending order.
	//
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Hide null values on sorted column(s).
	SortHideNull *bool `queryParam:"style=form,explode=true,name=sort_hide_null"`
	// Toggle that filters out all rows having sort column that is non-null
	SortNullOnly *bool `queryParam:"style=form,explode=true,name=sort_null_only"`
	// Toggle that sorts null values last
	SortNullsLast *bool  `queryParam:"style=form,explode=true,name=sort_nulls_last"`
	SubID         string `pathParam:"style=simple,explode=false,name=sub_id"`
}

type GetSchedulesScheduleDSubIDDefaultApplicationJSONResults struct {
	ActionCode           *string  `json:"action_code,omitempty"`
	ActionCodeFull       *string  `json:"action_code_full,omitempty"`
	AmountIncurredPeriod *float32 `json:"amount_incurred_period,omitempty"`
	CandidateFirstName   *string  `json:"candidate_first_name,omitempty"`
	// A unique identifier assigned to each candidate registered with the FEC.
	// If a person runs for several offices, that person will have separate candidate IDs for each office.
	// First character indicates office - [P]residential, [H]ouse, [S]enate].
	// Second character is the last digit of the two-year period the ID was created.
	// Third and fourth is the candidate state. Presidential IDs don't have state.
	// Fifth and sixth is the district when the candidate first ran. This does not change if the
	// candidate/member's district changes during re-districting. Presidential IDs don't have districts.
	// The rest is sequence.
	//
	CandidateID       *string `json:"candidate_id,omitempty"`
	CandidateLastName *string `json:"candidate_last_name,omitempty"`
	// Name of candidate running for office
	CandidateName            *string                  `json:"candidate_name,omitempty"`
	CandidateOffice          *string                  `json:"candidate_office,omitempty"`
	CandidateOfficeDistrict  *string                  `json:"candidate_office_district,omitempty"`
	CandidateOfficeState     *string                  `json:"candidate_office_state,omitempty"`
	CandidateOfficeStateFull *string                  `json:"candidate_office_state_full,omitempty"`
	Committee                *shared.CommitteeHistory `json:"committee,omitempty"`
	// A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
	//
	CommitteeID *string `json:"committee_id,omitempty"`
	// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
	CommitteeName            *string `json:"committee_name,omitempty"`
	ConduitCommitteeCity     *string `json:"conduit_committee_city,omitempty"`
	ConduitCommitteeID       *string `json:"conduit_committee_id,omitempty"`
	ConduitCommitteeName     *string `json:"conduit_committee_name,omitempty"`
	ConduitCommitteeState    *string `json:"conduit_committee_state,omitempty"`
	ConduitCommitteeStreet1  *string `json:"conduit_committee_street1,omitempty"`
	ConduitCommitteeStreet2  *string `json:"conduit_committee_street2,omitempty"`
	ConduitCommitteeZip      *int    `json:"conduit_committee_zip,omitempty"`
	CreditorDebtorCity       *string `json:"creditor_debtor_city,omitempty"`
	CreditorDebtorFirstName  *string `json:"creditor_debtor_first_name,omitempty"`
	CreditorDebtorID         *string `json:"creditor_debtor_id,omitempty"`
	CreditorDebtorLastName   *string `json:"creditor_debtor_last_name,omitempty"`
	CreditorDebtorMiddleName *string `json:"creditor_debtor_middle_name,omitempty"`
	CreditorDebtorName       *string `json:"creditor_debtor_name,omitempty"`
	CreditorDebtorPrefix     *string `json:"creditor_debtor_prefix,omitempty"`
	CreditorDebtorState      *string `json:"creditor_debtor_state,omitempty"`
	CreditorDebtorStreet1    *string `json:"creditor_debtor_street1,omitempty"`
	CreditorDebtorStreet2    *string `json:"creditor_debtor_street2,omitempty"`
	CreditorDebtorSuffix     *string `json:"creditor_debtor_suffix,omitempty"`
	ElectionCycle            *int    `json:"election_cycle,omitempty"`
	EntityType               *string `json:"entity_type,omitempty"`
	FileNumber               *int    `json:"file_number,omitempty"`
	FilingForm               *string `json:"filing_form,omitempty"`
	// An unique identifier for each page where the electronic or paper filing is reported.
	//
	ImageNumber                         *string     `json:"image_number,omitempty"`
	LineNumber                          *string     `json:"line_number,omitempty"`
	LinkID                              *int        `json:"link_id,omitempty"`
	LoadDate                            *types.Date `json:"load_date,omitempty"`
	NatureOfDebt                        *string     `json:"nature_of_debt,omitempty"`
	OriginalSubID                       *int        `json:"original_sub_id,omitempty"`
	OutstandingBalanceBeginningOfPeriod *float32    `json:"outstanding_balance_beginning_of_period,omitempty"`
	OutstandingBalanceCloseOfPeriod     *float32    `json:"outstanding_balance_close_of_period,omitempty"`
	PaymentPeriod                       *float32    `json:"payment_period,omitempty"`
	PdfURL                              *string     `json:"pdf_url,omitempty"`
	// Name of report where the underlying data comes from:
	//     - 10D Pre-Election
	//     - 10G Pre-General
	//     - 10P Pre-Primary
	//     - 10R Pre-Run-Off
	//     - 10S Pre-Special
	//     - 12C Pre-Convention
	//     - 12G Pre-General
	//     - 12P Pre-Primary
	//     - 12R Pre-Run-Off
	//     - 12S Pre-Special
	//     - 30D Post-Election
	//     - 30G Post-General
	//     - 30P Post-Primary
	//     - 30R Post-Run-Off
	//     - 30S Post-Special
	//     - 60D Post-Convention
	//     - M1  January Monthly
	//     - M10 October Monthly
	//     - M11 November Monthly
	//     - M12 December Monthly
	//     - M2  February Monthly
	//     - M3  March Monthly
	//     - M4  April Monthly
	//     - M5  May Monthly
	//     - M6  June Monthly
	//     - M7  July Monthly
	//     - M8  August Monthly
	//     - M9  September Monthly
	//     - MY  Mid-Year Report
	//     - Q1  April Quarterly
	//     - Q2  July Quarterly
	//     - Q3  October Quarterly
	//     - TER Termination Report
	//     - YE  Year-End
	//     - ADJ COMP ADJUST AMEND
	//     - CA  COMPREHENSIVE AMEND
	//     - 90S Post Inaugural Supplement
	//     - 90D Post Inaugural
	//     - 48  48 Hour Notification
	//     - 24  24 Hour Notification
	//     - M7S July Monthly/Semi-Annual
	//     - MSA Monthly Semi-Annual (MY)
	//     - MYS Monthly Year End/Semi-Annual
	//     - Q2S July Quarterly/Semi-Annual
	//     - QSA Quarterly Semi-Annual (MY)
	//     - QYS Quarterly Year End/Semi-Annual
	//     - QYE Quarterly Semi-Annual (YE)
	//     - QMS Quarterly Mid-Year/ Semi-Annual
	//     - MSY Monthly Semi-Annual (YE)
	//
	ReportType *string `json:"report_type,omitempty"`
	// Forms with coverage date -
	//     year from the coverage ending date.
	// Forms without coverage date -
	//     year from the receipt date.
	//
	ReportYear       *int    `json:"report_year,omitempty"`
	ScheduleType     *string `json:"schedule_type,omitempty"`
	ScheduleTypeFull *string `json:"schedule_type_full,omitempty"`
	SubID            *string `json:"sub_id,omitempty"`
	TransactionID    *string `json:"transaction_id,omitempty"`
}

type GetSchedulesScheduleDSubIDDefaultApplicationJSON struct {
	Pagination *shared.OffsetInfo                                        `json:"pagination,omitempty"`
	Results    []GetSchedulesScheduleDSubIDDefaultApplicationJSONResults `json:"results,omitempty"`
}

type GetSchedulesScheduleDSubIDResponse struct {
	ContentType                                            string
	StatusCode                                             int
	RawResponse                                            *http.Response
	GetSchedulesScheduleDSubIDDefaultApplicationJSONObject *GetSchedulesScheduleDSubIDDefaultApplicationJSON
}
