<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class OfferingLearners 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Remove learners from coach's marking list
     * 
     * Removes an array of learners from coach's marking list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdUsersMarkerEmailMarksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdUsersMarkerEmailMarksResponse
     */
	public function deleteOfferingsOfferingIdUsersMarkerEmailMarks(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdUsersMarkerEmailMarksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdUsersMarkerEmailMarksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offerings/{offeringId}/users/{markerEmail}/marks', \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdUsersMarkerEmailMarksRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdUsersMarkerEmailMarksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->offeringUsers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\OfferingUser>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes user from the offering
     * 
     * Removes a user from the offering.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdUsersUserEmailRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdUsersUserEmailResponse
     */
	public function deleteOfferingsOfferingIdUsersUserEmail(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdUsersUserEmailRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdUsersUserEmailResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offerings/{offeringId}/users/{userEmail}', \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdUsersUserEmailRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdUsersUserEmailResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find offering's users
     * 
     * Responds with a list of users in the offering (facilitators, learners and markers.).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdUsersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdUsersResponse
     */
	public function getOfferingsOfferingIdUsers(
        \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdUsersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offerings/{offeringId}/users', \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdUsersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdUsersRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->offeringUserResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\OfferingUserResponse>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find Learners marked by a coach
     * 
     * Responds with all learners marked by the specified coach.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdUsersMarkerEmailMarksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdUsersMarkerEmailMarksResponse
     */
	public function getOfferingsOfferingIdUsersMarkerEmailMarks(
        \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdUsersMarkerEmailMarksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdUsersMarkerEmailMarksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offerings/{offeringId}/users/{markerEmail}/marks', \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdUsersMarkerEmailMarksRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdUsersMarkerEmailMarksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->offeringUsers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\OfferingUser>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Transfer a user between offerings
     * 
     * Moves the user's access and progress from one offering to another.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchUsersUserEmailTransferRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchUsersUserEmailTransferResponse
     */
	public function patchUsersUserEmailTransfer(
        \OpenAPI\OpenAPI\Models\Operations\PatchUsersUserEmailTransferRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchUsersUserEmailTransferResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{userEmail}/transfer', \OpenAPI\OpenAPI\Models\Operations\PatchUsersUserEmailTransferRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "transferRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchUsersUserEmailTransferResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds user to the offering
     * 
     * Adds one or more users to the offering.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostOfferingsOfferingIdUsersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostOfferingsOfferingIdUsersResponse
     */
	public function postOfferingsOfferingIdUsers(
        \OpenAPI\OpenAPI\Models\Operations\PostOfferingsOfferingIdUsersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostOfferingsOfferingIdUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offerings/{offeringId}/users', \OpenAPI\OpenAPI\Models\Operations\PostOfferingsOfferingIdUsersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostOfferingsOfferingIdUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->offeringUserAddResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\OfferingUserAddResponse>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 207) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postOfferingsOfferingIdUsers207ApplicationJSONOneoves = $serializer->deserialize((string)$httpResponse->getBody(), 'array<mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add learners to be marked by a coach
     * 
     * Adds an array of learners to be marked by the specified coach.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostOfferingsOfferingIdUsersMarkerEmailMarksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostOfferingsOfferingIdUsersMarkerEmailMarksResponse
     */
	public function postOfferingsOfferingIdUsersMarkerEmailMarks(
        \OpenAPI\OpenAPI\Models\Operations\PostOfferingsOfferingIdUsersMarkerEmailMarksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostOfferingsOfferingIdUsersMarkerEmailMarksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offerings/{offeringId}/users/{markerEmail}/marks', \OpenAPI\OpenAPI\Models\Operations\PostOfferingsOfferingIdUsersMarkerEmailMarksRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostOfferingsOfferingIdUsersMarkerEmailMarksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->offeringUsers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\OfferingUser>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}