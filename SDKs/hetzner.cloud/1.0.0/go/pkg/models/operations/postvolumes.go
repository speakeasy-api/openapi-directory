// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostVolumesCreateVolumeRequest struct {
	// Auto-mount Volume after attach. `server` must be provided.
	Automount *bool `json:"automount,omitempty"`
	// Format Volume after creation. One of: `xfs`, `ext4`
	Format *string `json:"format,omitempty"`
	// User-defined labels (key-value pairs)
	Labels map[string]interface{} `json:"labels,omitempty"`
	// Location to create the Volume in (can be omitted if Server is specified)
	Location *string `json:"location,omitempty"`
	// Name of the volume
	Name string `json:"name"`
	// Server to which to attach the Volume once it's created (Volume will be created in the same Location as the server)
	Server *int64 `json:"server,omitempty"`
	// Size of the Volume in GB
	Size int64 `json:"size"`
}

type PostVolumesRequest struct {
	Request *PostVolumesCreateVolumeRequest `request:"mediaType=application/json"`
}

// PostVolumes201ApplicationJSONActionError - Error message for the Action if error occurred, otherwise null
type PostVolumes201ApplicationJSONActionError struct {
	// Fixed machine readable code
	Code string `json:"code"`
	// Humanized error message
	Message string `json:"message"`
}

type PostVolumes201ApplicationJSONActionResources struct {
	// ID of the Resource
	ID int64 `json:"id"`
	// Type of resource referenced
	Type string `json:"type"`
}

// PostVolumes201ApplicationJSONActionStatusEnum - Status of the Action
type PostVolumes201ApplicationJSONActionStatusEnum string

const (
	PostVolumes201ApplicationJSONActionStatusEnumSuccess PostVolumes201ApplicationJSONActionStatusEnum = "success"
	PostVolumes201ApplicationJSONActionStatusEnumRunning PostVolumes201ApplicationJSONActionStatusEnum = "running"
	PostVolumes201ApplicationJSONActionStatusEnumError   PostVolumes201ApplicationJSONActionStatusEnum = "error"
)

func (e *PostVolumes201ApplicationJSONActionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "running":
		fallthrough
	case "error":
		*e = PostVolumes201ApplicationJSONActionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostVolumes201ApplicationJSONActionStatusEnum: %s", s)
	}
}

type PostVolumes201ApplicationJSONAction struct {
	// Command executed in the Action
	Command string `json:"command"`
	// Error message for the Action if error occurred, otherwise null
	Error PostVolumes201ApplicationJSONActionError `json:"error"`
	// Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
	Finished string `json:"finished"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Progress of Action in percent
	Progress float64 `json:"progress"`
	// Resources the Action relates to
	Resources []PostVolumes201ApplicationJSONActionResources `json:"resources"`
	// Point in time when the Action was started (in ISO-8601 format)
	Started string `json:"started"`
	// Status of the Action
	Status PostVolumes201ApplicationJSONActionStatusEnum `json:"status"`
}

// PostVolumes201ApplicationJSONVolumeLocation - Location of the Volume. Volume can only be attached to Servers in the same Location.
type PostVolumes201ApplicationJSONVolumeLocation struct {
	// City the Location is closest to
	City string `json:"city"`
	// ISO 3166-1 alpha-2 code of the country the Location resides in
	Country string `json:"country"`
	// Description of the Location
	Description string `json:"description"`
	// ID of the Location
	ID float64 `json:"id"`
	// Latitude of the city closest to the Location
	Latitude float64 `json:"latitude"`
	// Longitude of the city closest to the Location
	Longitude float64 `json:"longitude"`
	// Unique identifier of the Location
	Name string `json:"name"`
	// Name of network zone this Location resides in
	NetworkZone string `json:"network_zone"`
}

// PostVolumes201ApplicationJSONVolumeProtection - Protection configuration for the Resource
type PostVolumes201ApplicationJSONVolumeProtection struct {
	// If true, prevents the Resource from being deleted
	Delete bool `json:"delete"`
}

// PostVolumes201ApplicationJSONVolumeStatusEnum - Current status of the Volume
type PostVolumes201ApplicationJSONVolumeStatusEnum string

const (
	PostVolumes201ApplicationJSONVolumeStatusEnumCreating  PostVolumes201ApplicationJSONVolumeStatusEnum = "creating"
	PostVolumes201ApplicationJSONVolumeStatusEnumAvailable PostVolumes201ApplicationJSONVolumeStatusEnum = "available"
)

func (e *PostVolumes201ApplicationJSONVolumeStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "creating":
		fallthrough
	case "available":
		*e = PostVolumes201ApplicationJSONVolumeStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostVolumes201ApplicationJSONVolumeStatusEnum: %s", s)
	}
}

type PostVolumes201ApplicationJSONVolume struct {
	// Point in time when the Resource was created (in ISO-8601 format)
	Created string `json:"created"`
	// Filesystem of the Volume if formatted on creation, null if not formatted on creation
	Format string `json:"format"`
	// ID of the Resource
	ID int64 `json:"id"`
	// User-defined labels (key-value pairs)
	Labels map[string]string `json:"labels"`
	// Device path on the file system for the Volume
	LinuxDevice string `json:"linux_device"`
	// Location of the Volume. Volume can only be attached to Servers in the same Location.
	Location PostVolumes201ApplicationJSONVolumeLocation `json:"location"`
	// Name of the Resource. Must be unique per Project.
	Name string `json:"name"`
	// Protection configuration for the Resource
	Protection PostVolumes201ApplicationJSONVolumeProtection `json:"protection"`
	// ID of the Server the Volume is attached to, null if it is not attached at all
	Server int64 `json:"server"`
	// Size in GB of the Volume
	Size float64 `json:"size"`
	// Current status of the Volume
	Status PostVolumes201ApplicationJSONVolumeStatusEnum `json:"status"`
}

// PostVolumes201ApplicationJSON - The `volume` key contains the Volume that was just created
//
// The `action` key contains the Action tracking Volume creation
type PostVolumes201ApplicationJSON struct {
	Action      PostVolumes201ApplicationJSONAction   `json:"action"`
	NextActions []PostVolumes201ApplicationJSONAction `json:"next_actions"`
	Volume      PostVolumes201ApplicationJSONVolume   `json:"volume"`
}

type PostVolumesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The `volume` key contains the Volume that was just created
	//
	// The `action` key contains the Action tracking Volume creation
	//
	PostVolumes201ApplicationJSONObject *PostVolumes201ApplicationJSON
}
