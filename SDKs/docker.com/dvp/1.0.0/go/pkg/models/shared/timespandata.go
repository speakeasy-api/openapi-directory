// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type TimespanDataType string

const (
	TimespanDataTypeMonthData TimespanDataType = "MonthData"
	TimespanDataTypeWeekData  TimespanDataType = "WeekData"
)

type TimespanData struct {
	MonthData *MonthData
	WeekData  *WeekData

	Type TimespanDataType
}

func CreateTimespanDataMonthData(monthData MonthData) TimespanData {
	typ := TimespanDataTypeMonthData

	return TimespanData{
		MonthData: &monthData,
		Type:      typ,
	}
}

func CreateTimespanDataWeekData(weekData WeekData) TimespanData {
	typ := TimespanDataTypeWeekData

	return TimespanData{
		WeekData: &weekData,
		Type:     typ,
	}
}

func (u *TimespanData) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	monthData := new(MonthData)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&monthData); err == nil {
		u.MonthData = monthData
		u.Type = TimespanDataTypeMonthData
		return nil
	}

	weekData := new(WeekData)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&weekData); err == nil {
		u.WeekData = weekData
		u.Type = TimespanDataTypeWeekData
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u TimespanData) MarshalJSON() ([]byte, error) {
	if u.MonthData != nil {
		return json.Marshal(u.MonthData)
	}

	if u.WeekData != nil {
		return json.Marshal(u.WeekData)
	}

	return nil, nil
}
