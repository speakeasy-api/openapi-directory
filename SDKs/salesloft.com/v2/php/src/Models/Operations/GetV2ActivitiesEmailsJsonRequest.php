<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class GetV2ActivitiesEmailsJsonRequest
{
    /**
     * Filters emails by action_id. Multiple action ids can be applied
     * 
     * @var ?array<int> $actionId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=action_id')]
    public ?array $actionId = null;
    
    /**
     * Filters emails by whether they have bounced or not
     * 
     * @var ?bool $bounced
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=bounced')]
    public ?bool $bounced = null;
    
    /**
     * Filters emails by cadence. Multiple cadence ids can be applied
     * 
     * @var ?array<int> $cadenceId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=cadence_id')]
    public ?array $cadenceId = null;
    
    /**
     * Filters emails by crm_activity_id. Multiple crm activty ids can be applied
     * 
     * @var ?array<int> $crmActivityId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=crm_activity_id')]
    public ?array $crmActivityId = null;
    
    /**
     * Filters emails by recipient email address. Multiple emails can be applied.
     * 
     * @var ?array<string> $emailAddresses
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=email_addresses')]
    public ?array $emailAddresses = null;
    
    /**
     * IDs of emails to fetch. If a record can't be found, that record won't be returned and your request will be successful
     * 
     * @var ?array<int> $ids
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=ids')]
    public ?array $ids = null;
    
    /**
     * Whether to include total_pages and total_count in the metadata. Defaults to false
     * 
     * @var ?bool $includePagingCounts
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=include_paging_counts')]
    public ?bool $includePagingCounts = null;
    
    /**
     * Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data
     * 
     * @var ?bool $limitPagingCounts
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=limit_paging_counts')]
    public ?bool $limitPagingCounts = null;
    
    /**
     * Filters emails by one-off only
     * 
     * @var ?bool $oneOff
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=one_off')]
    public ?bool $oneOff = null;
    
    /**
     * The current page to fetch results from. Defaults to 1
     * 
     * @var ?int $page
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=page')]
    public ?int $page = null;
    
    /**
     * How many records to show per page in the range [1, 100]. Defaults to 25
     * 
     * @var ?int $perPage
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=per_page')]
    public ?int $perPage = null;
    
    /**
     * Filters emails by person_id. Multiple person ids can be applied
     * 
     * @var ?array<int> $personId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=person_id')]
    public ?array $personId = null;
    
    /**
     * Filters emails by personalization score
     * 
     * @var ?array<string> $personalization
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=personalization')]
    public ?array $personalization = null;
    
    /**
     * Specify explicit scoped fields desired on the Email Resource.
     * 
     * @var ?array<string> $scopedFields
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=scoped_fields')]
    public ?array $scopedFields = null;
    
    /**
     * Equality filters that are applied to the sent_at field. A single filter can be used by itself or combined with other filters to create a range.
     * 
     * 
     * ---CUSTOM---
     * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
     * 
     * 
     * @var ?array<string> $sentAt
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=sent_at')]
    public ?array $sentAt = null;
    
    /**
     * Key to sort on, must be one of: updated_at, send_time. Defaults to updated_at
     * 
     * @var ?string $sortBy
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sort_by')]
    public ?string $sortBy = null;
    
    /**
     * Direction to sort in, must be one of: ASC, DESC. Defaults to DESC
     * 
     * @var ?string $sortDirection
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sort_direction')]
    public ?string $sortDirection = null;
    
    /**
     * Filters emails by status. Multiple status can be applied, possible values are sent, sent_from_gmail, sent_from_external, pending, pending_reply_check, scheduled, sending, delivering, failed, cancelled, pending_through_gmail, pending_through_external
     * 
     * @var ?array<string> $status
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=status')]
    public ?array $status = null;
    
    /**
     * Filters emails by step. Multiple step ids can be applied
     * 
     * @var ?array<int> $stepId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=step_id')]
    public ?array $stepId = null;
    
    /**
     * Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.
     * 
     * 
     * ---CUSTOM---
     * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
     * 
     * 
     * @var ?array<string> $updatedAt
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=updated_at')]
    public ?array $updatedAt = null;
    
    /**
     * Filters emails by user_id. Multiple User ids can be applied
     * 
     * @var ?array<int> $userId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=user_id')]
    public ?array $userId = null;
    
	public function __construct()
	{
		$this->actionId = null;
		$this->bounced = null;
		$this->cadenceId = null;
		$this->crmActivityId = null;
		$this->emailAddresses = null;
		$this->ids = null;
		$this->includePagingCounts = null;
		$this->limitPagingCounts = null;
		$this->oneOff = null;
		$this->page = null;
		$this->perPage = null;
		$this->personId = null;
		$this->personalization = null;
		$this->scopedFields = null;
		$this->sentAt = null;
		$this->sortBy = null;
		$this->sortDirection = null;
		$this->status = null;
		$this->stepId = null;
		$this->updatedAt = null;
		$this->userId = null;
	}
}
