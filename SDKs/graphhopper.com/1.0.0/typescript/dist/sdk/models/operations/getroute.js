"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetRouteResponse = exports.GetRouteRequest = exports.GetRouteCurbsideEnum = exports.GetRouteAlgorithmEnum = void 0;
var utils_1 = require("../../../internal/utils");
var shared = __importStar(require("../shared"));
/**
 * Rather than looking for the shortest or fastest path, this parameter lets you solve two different problems related to routing:
 *
 * @remarks
 * With `alternative_route`, we give you not one but several routes that are close to optimal, but
 * not too similar to each other.
 * With `round_trip`, the route will get you back to where you started. This is meant for fun (think of
 * a bike trip), so we will add some randomness. The `round_trip` option requires `ch.disable=true`.
 * You can control both of these features with additional parameters, see below.
 *
 */
var GetRouteAlgorithmEnum;
(function (GetRouteAlgorithmEnum) {
    GetRouteAlgorithmEnum["RoundTrip"] = "round_trip";
    GetRouteAlgorithmEnum["AlternativeRoute"] = "alternative_route";
})(GetRouteAlgorithmEnum = exports.GetRouteAlgorithmEnum || (exports.GetRouteAlgorithmEnum = {}));
var GetRouteCurbsideEnum;
(function (GetRouteCurbsideEnum) {
    GetRouteCurbsideEnum["Any"] = "any";
    GetRouteCurbsideEnum["Right"] = "right";
    GetRouteCurbsideEnum["Left"] = "left";
})(GetRouteCurbsideEnum = exports.GetRouteCurbsideEnum || (exports.GetRouteCurbsideEnum = {}));
var GetRouteRequest = /** @class */ (function (_super) {
    __extends(GetRouteRequest, _super);
    function GetRouteRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=algorithm",
        }),
        __metadata("design:type", String)
    ], GetRouteRequest.prototype, "algorithm", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=alternative_route.max_paths",
        }),
        __metadata("design:type", Number)
    ], GetRouteRequest.prototype, "alternativeRouteMaxPaths", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=alternative_route.max_share_factor",
        }),
        __metadata("design:type", Number)
    ], GetRouteRequest.prototype, "alternativeRouteMaxShareFactor", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=alternative_route.max_weight_factor",
        }),
        __metadata("design:type", Number)
    ], GetRouteRequest.prototype, "alternativeRouteMaxWeightFactor", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "queryParam, style=form;explode=true;name=avoid" }),
        __metadata("design:type", String)
    ], GetRouteRequest.prototype, "avoid", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=block_area",
        }),
        __metadata("design:type", String)
    ], GetRouteRequest.prototype, "blockArea", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=calc_points",
        }),
        __metadata("design:type", Boolean)
    ], GetRouteRequest.prototype, "calcPoints", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=ch.disable",
        }),
        __metadata("design:type", Boolean)
    ], GetRouteRequest.prototype, "chDisable", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=curbside",
        }),
        __metadata("design:type", Array)
    ], GetRouteRequest.prototype, "curbside", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "queryParam, style=form;explode=true;name=debug" }),
        __metadata("design:type", Boolean)
    ], GetRouteRequest.prototype, "debug", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=details",
        }),
        __metadata("design:type", Array)
    ], GetRouteRequest.prototype, "details", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=elevation",
        }),
        __metadata("design:type", Boolean)
    ], GetRouteRequest.prototype, "elevation", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=heading",
        }),
        __metadata("design:type", Array)
    ], GetRouteRequest.prototype, "heading", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=heading_penalty",
        }),
        __metadata("design:type", Number)
    ], GetRouteRequest.prototype, "headingPenalty", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=instructions",
        }),
        __metadata("design:type", Boolean)
    ], GetRouteRequest.prototype, "instructions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=locale",
        }),
        __metadata("design:type", String)
    ], GetRouteRequest.prototype, "locale", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=optimize",
        }),
        __metadata("design:type", String)
    ], GetRouteRequest.prototype, "optimize", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=pass_through",
        }),
        __metadata("design:type", Boolean)
    ], GetRouteRequest.prototype, "passThrough", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "queryParam, style=form;explode=true;name=point" }),
        __metadata("design:type", Array)
    ], GetRouteRequest.prototype, "point", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=point_hint",
        }),
        __metadata("design:type", Array)
    ], GetRouteRequest.prototype, "pointHint", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=points_encoded",
        }),
        __metadata("design:type", Boolean)
    ], GetRouteRequest.prototype, "pointsEncoded", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=round_trip.distance",
        }),
        __metadata("design:type", Number)
    ], GetRouteRequest.prototype, "roundTripDistance", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=round_trip.seed",
        }),
        __metadata("design:type", Number)
    ], GetRouteRequest.prototype, "roundTripSeed", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=snap_prevention",
        }),
        __metadata("design:type", Array)
    ], GetRouteRequest.prototype, "snapPrevention", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=turn_costs",
        }),
        __metadata("design:type", Boolean)
    ], GetRouteRequest.prototype, "turnCosts", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=vehicle",
        }),
        __metadata("design:type", String)
    ], GetRouteRequest.prototype, "vehicle", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=weighting",
        }),
        __metadata("design:type", String)
    ], GetRouteRequest.prototype, "weighting", void 0);
    return GetRouteRequest;
}(utils_1.SpeakeasyBase));
exports.GetRouteRequest = GetRouteRequest;
var GetRouteResponse = /** @class */ (function (_super) {
    __extends(GetRouteResponse, _super);
    function GetRouteResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetRouteResponse.prototype, "contentType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", shared.GHError)
    ], GetRouteResponse.prototype, "ghError", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], GetRouteResponse.prototype, "headers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", shared.RouteResponse)
    ], GetRouteResponse.prototype, "routeResponse", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], GetRouteResponse.prototype, "statusCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], GetRouteResponse.prototype, "rawResponse", void 0);
    return GetRouteResponse;
}(utils_1.SpeakeasyBase));
exports.GetRouteResponse = GetRouteResponse;
