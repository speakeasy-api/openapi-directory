// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// InvoiceSubmissionModeEnum - DEPRECATED.
type InvoiceSubmissionModeEnum string

const (
	InvoiceSubmissionModeEnumDirect InvoiceSubmissionModeEnum = "direct"
)

func (e *InvoiceSubmissionModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "direct":
		*e = InvoiceSubmissionModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InvoiceSubmissionModeEnum: %s", s)
	}
}

// InvoiceSubmission - The invoice you want Storecove to process, with some meta-data.
type InvoiceSubmission struct {
	// An array of attachments. You may provide up to 10 attchments, but the total size must not exceed 10MB after Base64 encoding.
	Attachments []Attachment `json:"attachments,omitempty"`
	// Whether or not to create a primary image (PDF) if one is not provided.
	CreatePrimaryImage *bool `json:"createPrimaryImage,omitempty"`
	// DEPRECATED. Use attachments.
	Document *string `json:"document,omitempty"`
	// DEPRECATED. Use attachments.
	DocumentURL *string `json:"documentUrl,omitempty"`
	// A guid that you generated for this InvoiceSubmission to achieve idempotency. If you submit multiple documents with the same idempotencyGuid, only the first one will be processed.
	IdempotencyGUID *string `json:"idempotencyGuid,omitempty"`
	// The invoice to send.  Provide either invoice, or invoiceData, but not both.
	Invoice *Invoice `json:"invoice,omitempty"`
	// The invoice to send, in base64 encoded format. Provide either invoice, or invoiceData, but not both.
	InvoiceData *InvoiceData `json:"invoiceData,omitempty"`
	// The different ways to send the invoice to the recipient. The publicIdentifiers are used to send via the Peppol network, if the recipient is not registered on the Peppol network, the invoice will be sent to the email addresses in the emails property. This property is only mandatory when sending the invoice data using the <<_openapi_invoice>> property, not when sending using the <<_openapi_invoicedata>> property, in which case this information will be extracted from the <<_openapi_invoicedata>> object. If you do specify an <<_openapi_invoicerecipient>> object and an <<_openapi_invoicedata>> object, the data from the two will be merged.
	InvoiceRecipient *InvoiceRecipient `json:"invoiceRecipient,omitempty"`
	// The id of the LegalEntity this invoice should be sent for.
	LegalEntityID *int64 `json:"legalEntityId,omitempty"`
	// DEPRECATED. Use legalEntityId
	LegalSupplierID *int64 `json:"legalSupplierId,omitempty"`
	// DEPRECATED.
	Mode *InvoiceSubmissionModeEnum `json:"mode,omitempty"`
	// The different ways to send the invoice to the recipient. The publicIdentifiers are used to send via the Peppol network, if the recipient is not registered on the Peppol network, the invoice will be sent to the email addresses in the emails property. This property is only mandatory when sending the invoice data using the <<_openapi_invoice>> property, not when sending using the <<_openapi_invoicedata>> property, in which case this information will be extracted from the <<_openapi_invoicedata>> object. If you do specify an <<_openapi_invoicerecipient>> object and an <<_openapi_invoicedata>> object, the data from the two will be merged.
	Routing *Routing `json:"routing,omitempty"`
	// DEPRECATED.
	SupplierID *int64 `json:"supplierId,omitempty"`
}
