/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CapacityReservationSpecification } from "./capacityreservationspecification";
import { CpuOptionsRequest } from "./cpuoptionsrequest";
import { CreditSpecificationRequest } from "./creditspecificationrequest";
import { ElasticGpuSpecifications } from "./elasticgpuspecifications";
import { EnclaveOptionsRequest } from "./enclaveoptionsrequest";
import { HibernationOptionsRequest } from "./hibernationoptionsrequest";
import { InstanceMaintenanceOptionsRequest } from "./instancemaintenanceoptionsrequest";
import { InstanceMarketOptionsRequest } from "./instancemarketoptionsrequest";
import { InstanceMetadataOptionsRequest } from "./instancemetadataoptionsrequest";
import { InstanceTypeEnum } from "./instancetypeenum";
import { LaunchTemplateSpecification } from "./launchtemplatespecification";
import { Placement } from "./placement";
import { PrivateDnsNameOptionsRequest } from "./privatednsnameoptionsrequest";
import { RunInstancesMonitoringEnabled } from "./runinstancesmonitoringenabled";

/**
 * The volume type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS volume types</a> in the <i>Amazon EC2 User Guide</i>. If the volume type is <code>io1</code> or <code>io2</code>, you must specify the IOPS that the volume supports.
 */
export enum RunInstancesRequestBlockDeviceMappingsEbsVolumeTypeEnum {
  Standard = "standard",
  Io1 = "io1",
  Io2 = "io2",
  Gp2 = "gp2",
  Sc1 = "sc1",
  St1 = "st1",
  Gp3 = "gp3",
}

/**
 * Parameters used to automatically set up EBS volumes when the instance is launched.
 */
export class RunInstancesRequestBlockDeviceMappingsEbs extends SpeakeasyBase {
  @SpeakeasyMetadata()
  deleteOnTermination?: boolean;

  @SpeakeasyMetadata()
  encrypted?: boolean;

  @SpeakeasyMetadata()
  iops?: number;

  @SpeakeasyMetadata()
  kmsKeyId?: string;

  @SpeakeasyMetadata()
  outpostArn?: string;

  @SpeakeasyMetadata()
  snapshotId?: string;

  @SpeakeasyMetadata()
  throughput?: number;

  @SpeakeasyMetadata()
  volumeSize?: number;

  @SpeakeasyMetadata()
  volumeType?: RunInstancesRequestBlockDeviceMappingsEbsVolumeTypeEnum;
}

/**
 * Describes a block device mapping, which defines the EBS volumes and instance store volumes to attach to an instance at launch.
 */
export class RunInstancesRequestBlockDeviceMappings extends SpeakeasyBase {
  @SpeakeasyMetadata()
  deviceName?: string;

  @SpeakeasyMetadata()
  ebs?: RunInstancesRequestBlockDeviceMappingsEbs;

  @SpeakeasyMetadata()
  noDevice?: string;

  @SpeakeasyMetadata()
  virtualName?: string;
}

/**
 *  Describes an elastic inference accelerator.
 */
export class RunInstancesRequestElasticInferenceAccelerators extends SpeakeasyBase {
  @SpeakeasyMetadata()
  count?: number;

  @SpeakeasyMetadata()
  type: string;
}

/**
 * The name or Amazon Resource Name (ARN) of an IAM instance profile.
 */
export class RunInstancesRequestIamInstanceProfile extends SpeakeasyBase {
  @SpeakeasyMetadata()
  arn?: string;

  @SpeakeasyMetadata()
  name?: string;
}

/**
 * <p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p> <p>Default: <code>stop</code> </p>
 */
export enum RunInstancesRequestInstanceInitiatedShutdownBehaviorEnum {
  Stop = "stop",
  Terminate = "terminate",
}

/**
 * Describes an IPv6 address.
 */
export class RunInstancesRequestIpv6Addresses extends SpeakeasyBase {
  @SpeakeasyMetadata()
  ipv6Address?: string;
}

/**
 * Describes a license configuration.
 */
export class RunInstancesRequestLicenseSpecifications extends SpeakeasyBase {
  @SpeakeasyMetadata()
  licenseConfigurationArn?: string;
}

/**
 * Describes the IPv4 prefix option for a network interface.
 */
export class RunInstancesRequestNetworkInterfacesIpv4Prefixes extends SpeakeasyBase {
  @SpeakeasyMetadata()
  ipv4Prefix?: string;
}

/**
 * Describes an IPv6 address.
 */
export class RunInstancesRequestNetworkInterfacesIpv6Addresses extends SpeakeasyBase {
  @SpeakeasyMetadata()
  ipv6Address?: string;
}

/**
 * Describes the IPv4 prefix option for a network interface.
 */
export class RunInstancesRequestNetworkInterfacesIpv6Prefixes extends SpeakeasyBase {
  @SpeakeasyMetadata()
  ipv6Prefix?: string;
}

/**
 * Describes a secondary private IPv4 address for a network interface.
 */
export class RunInstancesRequestNetworkInterfacesPrivateIpAddresses extends SpeakeasyBase {
  @SpeakeasyMetadata()
  primary?: boolean;

  @SpeakeasyMetadata()
  privateIpAddress?: string;
}

/**
 * Describes a network interface.
 */
export class RunInstancesRequestNetworkInterfaces extends SpeakeasyBase {
  @SpeakeasyMetadata()
  associateCarrierIpAddress?: boolean;

  @SpeakeasyMetadata()
  associatePublicIpAddress?: boolean;

  @SpeakeasyMetadata()
  deleteOnTermination?: boolean;

  @SpeakeasyMetadata()
  description?: string;

  @SpeakeasyMetadata()
  deviceIndex?: number;

  @SpeakeasyMetadata()
  groups?: string[];

  @SpeakeasyMetadata()
  interfaceType?: string;

  @SpeakeasyMetadata()
  ipv4PrefixCount?: number;

  @SpeakeasyMetadata({
    elemType: RunInstancesRequestNetworkInterfacesIpv4Prefixes,
  })
  ipv4Prefixes?: RunInstancesRequestNetworkInterfacesIpv4Prefixes[];

  @SpeakeasyMetadata()
  ipv6AddressCount?: number;

  @SpeakeasyMetadata({
    elemType: RunInstancesRequestNetworkInterfacesIpv6Addresses,
  })
  ipv6Addresses?: RunInstancesRequestNetworkInterfacesIpv6Addresses[];

  @SpeakeasyMetadata()
  ipv6PrefixCount?: number;

  @SpeakeasyMetadata({
    elemType: RunInstancesRequestNetworkInterfacesIpv6Prefixes,
  })
  ipv6Prefixes?: RunInstancesRequestNetworkInterfacesIpv6Prefixes[];

  @SpeakeasyMetadata()
  networkCardIndex?: number;

  @SpeakeasyMetadata()
  networkInterfaceId?: string;

  @SpeakeasyMetadata()
  privateIpAddress?: string;

  @SpeakeasyMetadata({
    elemType: RunInstancesRequestNetworkInterfacesPrivateIpAddresses,
  })
  privateIpAddresses?: RunInstancesRequestNetworkInterfacesPrivateIpAddresses[];

  @SpeakeasyMetadata()
  secondaryPrivateIpAddressCount?: number;

  @SpeakeasyMetadata()
  subnetId?: string;
}

/**
 * The type of resource to tag on creation.
 */
export enum RunInstancesRequestTagSpecificationsResourceTypeEnum {
  CapacityReservation = "capacity-reservation",
  ClientVpnEndpoint = "client-vpn-endpoint",
  CustomerGateway = "customer-gateway",
  CarrierGateway = "carrier-gateway",
  CoipPool = "coip-pool",
  DedicatedHost = "dedicated-host",
  DhcpOptions = "dhcp-options",
  EgressOnlyInternetGateway = "egress-only-internet-gateway",
  ElasticIp = "elastic-ip",
  ElasticGpu = "elastic-gpu",
  ExportImageTask = "export-image-task",
  ExportInstanceTask = "export-instance-task",
  Fleet = "fleet",
  FpgaImage = "fpga-image",
  HostReservation = "host-reservation",
  Image = "image",
  ImportImageTask = "import-image-task",
  ImportSnapshotTask = "import-snapshot-task",
  Instance = "instance",
  InstanceEventWindow = "instance-event-window",
  InternetGateway = "internet-gateway",
  Ipam = "ipam",
  IpamPool = "ipam-pool",
  IpamScope = "ipam-scope",
  Ipv4poolEc2 = "ipv4pool-ec2",
  Ipv6poolEc2 = "ipv6pool-ec2",
  KeyPair = "key-pair",
  LaunchTemplate = "launch-template",
  LocalGateway = "local-gateway",
  LocalGatewayRouteTable = "local-gateway-route-table",
  LocalGatewayVirtualInterface = "local-gateway-virtual-interface",
  LocalGatewayVirtualInterfaceGroup = "local-gateway-virtual-interface-group",
  LocalGatewayRouteTableVpcAssociation = "local-gateway-route-table-vpc-association",
  LocalGatewayRouteTableVirtualInterfaceGroupAssociation = "local-gateway-route-table-virtual-interface-group-association",
  Natgateway = "natgateway",
  NetworkAcl = "network-acl",
  NetworkInterface = "network-interface",
  NetworkInsightsAnalysis = "network-insights-analysis",
  NetworkInsightsPath = "network-insights-path",
  NetworkInsightsAccessScope = "network-insights-access-scope",
  NetworkInsightsAccessScopeAnalysis = "network-insights-access-scope-analysis",
  PlacementGroup = "placement-group",
  PrefixList = "prefix-list",
  ReplaceRootVolumeTask = "replace-root-volume-task",
  ReservedInstances = "reserved-instances",
  RouteTable = "route-table",
  SecurityGroup = "security-group",
  SecurityGroupRule = "security-group-rule",
  Snapshot = "snapshot",
  SpotFleetRequest = "spot-fleet-request",
  SpotInstancesRequest = "spot-instances-request",
  Subnet = "subnet",
  SubnetCidrReservation = "subnet-cidr-reservation",
  TrafficMirrorFilter = "traffic-mirror-filter",
  TrafficMirrorSession = "traffic-mirror-session",
  TrafficMirrorTarget = "traffic-mirror-target",
  TransitGateway = "transit-gateway",
  TransitGatewayAttachment = "transit-gateway-attachment",
  TransitGatewayConnectPeer = "transit-gateway-connect-peer",
  TransitGatewayMulticastDomain = "transit-gateway-multicast-domain",
  TransitGatewayPolicyTable = "transit-gateway-policy-table",
  TransitGatewayRouteTable = "transit-gateway-route-table",
  TransitGatewayRouteTableAnnouncement = "transit-gateway-route-table-announcement",
  Volume = "volume",
  Vpc = "vpc",
  VpcEndpoint = "vpc-endpoint",
  VpcEndpointConnection = "vpc-endpoint-connection",
  VpcEndpointService = "vpc-endpoint-service",
  VpcEndpointServicePermission = "vpc-endpoint-service-permission",
  VpcPeeringConnection = "vpc-peering-connection",
  VpnConnection = "vpn-connection",
  VpnGateway = "vpn-gateway",
  VpcFlowLog = "vpc-flow-log",
  CapacityReservationFleet = "capacity-reservation-fleet",
  TrafficMirrorFilterRule = "traffic-mirror-filter-rule",
  VpcEndpointConnectionDeviceType = "vpc-endpoint-connection-device-type",
  VerifiedAccessInstance = "verified-access-instance",
  VerifiedAccessGroup = "verified-access-group",
  VerifiedAccessEndpoint = "verified-access-endpoint",
  VerifiedAccessPolicy = "verified-access-policy",
  VerifiedAccessTrustProvider = "verified-access-trust-provider",
  VpnConnectionDeviceType = "vpn-connection-device-type",
  VpcBlockPublicAccessExclusion = "vpc-block-public-access-exclusion",
  IpamResourceDiscovery = "ipam-resource-discovery",
  IpamResourceDiscoveryAssociation = "ipam-resource-discovery-association",
}

/**
 * Describes a tag.
 */
export class RunInstancesRequestTagSpecificationsTags extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * <p>The tags to apply to a resource when the resource is being created. When you specify a tag, you must specify the resource type to tag, otherwise the request will fail.</p> <note> <p>The <code>Valid Values</code> lists all the resource types that can be tagged. However, the action you're using might not support tagging all of these resource types. If you try to tag a resource type that is unsupported for the action you're using, you'll get an error.</p> </note>
 */
export class RunInstancesRequestTagSpecifications extends SpeakeasyBase {
  @SpeakeasyMetadata()
  resourceType?: RunInstancesRequestTagSpecificationsResourceTypeEnum;

  @SpeakeasyMetadata({ elemType: RunInstancesRequestTagSpecificationsTags })
  tags?: RunInstancesRequestTagSpecificationsTags[];
}

export class RunInstancesRequest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  additionalInfo?: string;

  @SpeakeasyMetadata({ elemType: RunInstancesRequestBlockDeviceMappings })
  blockDeviceMappings?: RunInstancesRequestBlockDeviceMappings[];

  @SpeakeasyMetadata()
  capacityReservationSpecification?: CapacityReservationSpecification;

  @SpeakeasyMetadata()
  clientToken?: string;

  @SpeakeasyMetadata()
  cpuOptions?: CpuOptionsRequest;

  @SpeakeasyMetadata()
  creditSpecification?: CreditSpecificationRequest;

  @SpeakeasyMetadata()
  disableApiStop?: boolean;

  @SpeakeasyMetadata()
  disableApiTermination?: boolean;

  @SpeakeasyMetadata()
  dryRun?: boolean;

  @SpeakeasyMetadata()
  ebsOptimized?: boolean;

  @SpeakeasyMetadata({ elemType: ElasticGpuSpecifications })
  elasticGpuSpecification?: ElasticGpuSpecifications[];

  @SpeakeasyMetadata({
    elemType: RunInstancesRequestElasticInferenceAccelerators,
  })
  elasticInferenceAccelerators?: RunInstancesRequestElasticInferenceAccelerators[];

  @SpeakeasyMetadata()
  enclaveOptions?: EnclaveOptionsRequest;

  @SpeakeasyMetadata()
  hibernationOptions?: HibernationOptionsRequest;

  @SpeakeasyMetadata()
  iamInstanceProfile?: RunInstancesRequestIamInstanceProfile;

  @SpeakeasyMetadata()
  imageId?: string;

  @SpeakeasyMetadata()
  instanceInitiatedShutdownBehavior?: RunInstancesRequestInstanceInitiatedShutdownBehaviorEnum;

  @SpeakeasyMetadata()
  instanceMarketOptions?: InstanceMarketOptionsRequest;

  @SpeakeasyMetadata()
  instanceType?: InstanceTypeEnum;

  @SpeakeasyMetadata()
  ipv6AddressCount?: number;

  @SpeakeasyMetadata({ elemType: RunInstancesRequestIpv6Addresses })
  ipv6Addresses?: RunInstancesRequestIpv6Addresses[];

  @SpeakeasyMetadata()
  kernelId?: string;

  @SpeakeasyMetadata()
  keyName?: string;

  @SpeakeasyMetadata()
  launchTemplate?: LaunchTemplateSpecification;

  @SpeakeasyMetadata({ elemType: RunInstancesRequestLicenseSpecifications })
  licenseSpecifications?: RunInstancesRequestLicenseSpecifications[];

  @SpeakeasyMetadata()
  maintenanceOptions?: InstanceMaintenanceOptionsRequest;

  @SpeakeasyMetadata()
  maxCount: number;

  @SpeakeasyMetadata()
  metadataOptions?: InstanceMetadataOptionsRequest;

  @SpeakeasyMetadata()
  minCount: number;

  @SpeakeasyMetadata()
  monitoring?: RunInstancesMonitoringEnabled;

  @SpeakeasyMetadata({ elemType: RunInstancesRequestNetworkInterfaces })
  networkInterfaces?: RunInstancesRequestNetworkInterfaces[];

  @SpeakeasyMetadata()
  placement?: Placement;

  @SpeakeasyMetadata()
  privateDnsNameOptions?: PrivateDnsNameOptionsRequest;

  @SpeakeasyMetadata()
  privateIpAddress?: string;

  @SpeakeasyMetadata()
  ramdiskId?: string;

  @SpeakeasyMetadata()
  securityGroupIds?: string[];

  @SpeakeasyMetadata()
  securityGroups?: string[];

  @SpeakeasyMetadata()
  subnetId?: string;

  @SpeakeasyMetadata({ elemType: RunInstancesRequestTagSpecifications })
  tagSpecifications?: RunInstancesRequestTagSpecifications[];

  @SpeakeasyMetadata()
  userData?: string;
}
