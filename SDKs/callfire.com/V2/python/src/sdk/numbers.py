"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Numbers:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def find_number_lease_configs(self, request: operations.FindNumberLeaseConfigsRequest, security: operations.FindNumberLeaseConfigsSecurity) -> operations.FindNumberLeaseConfigsResponse:
        r"""Find lease configs
        Searches for all number lease configs for the user. Returns a paged list of NumberConfig
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/numbers/leases/configs'
        
        query_params = utils.get_query_params(operations.FindNumberLeaseConfigsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindNumberLeaseConfigsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NumberConfigPage])
                res.number_config_page = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def find_number_leases(self, request: operations.FindNumberLeasesRequest, security: operations.FindNumberLeasesSecurity) -> operations.FindNumberLeasesResponse:
        r"""Find leases
        Searches for all numbers leased by account user. This API is useful for finding all numbers currently owned by the user. Returns a paged list of number leases.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/numbers/leases'
        
        query_params = utils.get_query_params(operations.FindNumberLeasesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindNumberLeasesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NumberLeasePage])
                res.number_lease_page = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def find_number_regions(self, request: operations.FindNumberRegionsRequest, security: operations.FindNumberRegionsSecurity) -> operations.FindNumberRegionsResponse:
        r"""Find number regions
        Searches for region information. Use this API to obtain detailed region information that can be used to query for more specific phone numbers than a general query.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/numbers/regions'
        
        query_params = utils.get_query_params(operations.FindNumberRegionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindNumberRegionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RegionPage])
                res.region_page = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def find_numbers_local(self, request: operations.FindNumbersLocalRequest, security: operations.FindNumbersLocalSecurity) -> operations.FindNumbersLocalResponse:
        r"""Find local numbers
        Searches for numbers available for purchase in CallFire local numbers catalog . At least one additional parameter is required. User may filter local numbers by their region information. If all numbers with desirable zip code is already busy search will return available numbers with nearest zip code.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/numbers/local'
        
        query_params = utils.get_query_params(operations.FindNumbersLocalRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindNumbersLocalResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NumberList])
                res.number_list = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def find_numbers_tollfree(self, request: operations.FindNumbersTollfreeRequest, security: operations.FindNumbersTollfreeSecurity) -> operations.FindNumbersTollfreeResponse:
        r"""Find tollfree numbers
        Searches for the toll free numbers which are available for purchase in the CallFire catalog
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/numbers/tollfree'
        
        query_params = utils.get_query_params(operations.FindNumbersTollfreeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindNumbersTollfreeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NumberList])
                res.number_list = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_number_lease(self, request: operations.GetNumberLeaseRequest, security: operations.GetNumberLeaseSecurity) -> operations.GetNumberLeaseResponse:
        r"""Find a specific lease
        Returns a single NumberLease instance for a given number
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNumberLeaseRequest, base_url, '/numbers/leases/{number}', request)
        
        query_params = utils.get_query_params(operations.GetNumberLeaseRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNumberLeaseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NumberLease])
                res.number_lease = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_number_lease_config(self, request: operations.GetNumberLeaseConfigRequest, security: operations.GetNumberLeaseConfigSecurity) -> operations.GetNumberLeaseConfigResponse:
        r"""Find a specific lease config
        Returns a single NumberConfig instance for a given number lease
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNumberLeaseConfigRequest, base_url, '/numbers/leases/configs/{number}', request)
        
        query_params = utils.get_query_params(operations.GetNumberLeaseConfigRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNumberLeaseConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NumberConfig])
                res.number_config = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def update_number_lease(self, request: operations.UpdateNumberLeaseRequest, security: operations.UpdateNumberLeaseSecurity) -> operations.UpdateNumberLeaseResponse:
        r"""Update a lease
        Updates a number lease instance. Ability to turn on/off autoRenew and toggle call/text features for a particular number
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNumberLeaseRequest, base_url, '/numbers/leases/{number}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "number_lease_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNumberLeaseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def update_number_lease_config(self, request: operations.UpdateNumberLeaseConfigRequest, security: operations.UpdateNumberLeaseConfigSecurity) -> operations.UpdateNumberLeaseConfigResponse:
        r"""Update a lease config
        Updates a phone number lease configuration. Use this API endpoint to add an Inbound IVR or Call Tracking feature to a CallFire phone number. Call tracking configuration allows you to track the incoming calls, to analyze and to respond customers using sms or voice replies. For more information see [call tracking page](https://www.callfire.com/products/call-tracking)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNumberLeaseConfigRequest, base_url, '/numbers/leases/configs/{number}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "number_config", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNumberLeaseConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    