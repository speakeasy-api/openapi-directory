<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class TerminalOrdersMerchantLevel 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get a list of billing entities
     * 
     * Returns the billing entities of the merchant account identified in the path.
     * A billing entity is a legal entity where we charge orders to. An order for terminal products must contain the ID of a billing entity.
     * 
     * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Terminal ordering read
     * * Management API—Terminal ordering read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdBillingEntitiesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdBillingEntitiesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdBillingEntitiesResponse
     */
	public function getMerchantsMerchantIdBillingEntities(
        \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdBillingEntitiesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdBillingEntitiesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdBillingEntitiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/merchants/{merchantId}/billingEntities', \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdBillingEntitiesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdBillingEntitiesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdBillingEntitiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->billingEntitiesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BillingEntitiesResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of shipping locations
     * 
     * Returns the shipping locations for the merchant account identified in the path.
     * A shipping location includes the address where orders can be delivered, and an ID which you need to specify when ordering terminal products.
     * 
     * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Terminal ordering read
     * * Management API—Terminal ordering read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdShippingLocationsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdShippingLocationsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdShippingLocationsResponse
     */
	public function getMerchantsMerchantIdShippingLocations(
        \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdShippingLocationsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdShippingLocationsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdShippingLocationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/merchants/{merchantId}/shippingLocations', \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdShippingLocationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdShippingLocationsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdShippingLocationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->shippingLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ShippingLocationsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of terminal models
     * 
     * Returns the payment terminal models that merchant account identified in the path has access to. The response includes the terminal model ID, which can be used as a query parameter when getting a list of terminals or a list of products for ordering.
     * 
     * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Terminal ordering read
     * * Management API—Terminal ordering read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalModelsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalModelsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalModelsResponse
     */
	public function getMerchantsMerchantIdTerminalModels(
        \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalModelsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalModelsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalModelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/merchants/{merchantId}/terminalModels', \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalModelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalModelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->terminalModelsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TerminalModelsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of orders
     * 
     * Returns a list of terminal products orders for the merchant account identified in the path.
     * 
     * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Terminal ordering read
     * * Management API—Terminal ordering read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalOrdersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalOrdersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalOrdersResponse
     */
	public function getMerchantsMerchantIdTerminalOrders(
        \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalOrdersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalOrdersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalOrdersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/merchants/{merchantId}/terminalOrders', \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalOrdersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalOrdersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalOrdersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->terminalOrdersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TerminalOrdersResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get an order
     * 
     * Returns the details of the terminal products order identified in the path.
     * 
     * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Terminal ordering read
     * * Management API—Terminal ordering read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalOrdersOrderIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalOrdersOrderIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalOrdersOrderIdResponse
     */
	public function getMerchantsMerchantIdTerminalOrdersOrderId(
        \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalOrdersOrderIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalOrdersOrderIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalOrdersOrderIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/merchants/{merchantId}/terminalOrders/{orderId}', \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalOrdersOrderIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalOrdersOrderIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->terminalOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TerminalOrder', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of terminal products
     * 
     * Returns a country-specific list of payment terminal packages and parts that the merchant account identified in the path has access to.
     * 
     * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Terminal ordering read
     * * Management API—Terminal ordering read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalProductsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalProductsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalProductsResponse
     */
	public function getMerchantsMerchantIdTerminalProducts(
        \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalProductsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalProductsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalProductsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/merchants/{merchantId}/terminalProducts', \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalProductsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalProductsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdTerminalProductsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->terminalProductsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TerminalProductsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an order
     * 
     * Updates the terminal products order identified in the path.
     * Updating is only possible while the order has the status **Placed**.
     * 
     * The request body only needs to contain what you want to change. 
     * However, to update the products in the `items` array, you must provice the entire array. For example, if the array has three items:
     *  To remove one item, the array must include the remaining two items. Or to add one item, the array must include all four items.
     * 
     * To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Terminal ordering read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdTerminalOrdersOrderIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdTerminalOrdersOrderIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdTerminalOrdersOrderIdResponse
     */
	public function patchMerchantsMerchantIdTerminalOrdersOrderId(
        \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdTerminalOrdersOrderIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdTerminalOrdersOrderIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdTerminalOrdersOrderIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/merchants/{merchantId}/terminalOrders/{orderId}', \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdTerminalOrdersOrderIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "terminalOrderRequest", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdTerminalOrdersOrderIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->terminalOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TerminalOrder', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a shipping location
     * 
     * Creates a shipping location for the merchant account identified in the path. A shipping location defines an address where orders can be shipped to. 
     * 
     * To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Terminal ordering read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdShippingLocationsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdShippingLocationsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdShippingLocationsResponse
     */
	public function postMerchantsMerchantIdShippingLocations(
        \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdShippingLocationsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdShippingLocationsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdShippingLocationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/merchants/{merchantId}/shippingLocations', \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdShippingLocationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "shippingLocation", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdShippingLocationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->shippingLocation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ShippingLocation', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an order
     * 
     * Creates an order for payment terminal products for the merchant account identified in the path.
     * 
     * To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Terminal ordering read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdTerminalOrdersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdTerminalOrdersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdTerminalOrdersResponse
     */
	public function postMerchantsMerchantIdTerminalOrders(
        \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdTerminalOrdersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdTerminalOrdersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdTerminalOrdersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/merchants/{merchantId}/terminalOrders', \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdTerminalOrdersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "terminalOrderRequest", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdTerminalOrdersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->terminalOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TerminalOrder', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Cancel an order
     * 
     * Cancels the terminal products order identified in the path.
     * Cancelling is only possible while the order has the status **Placed**.
     * To cancel an order, make a POST call without a request body. The response returns the full order details, but with the status changed to **Cancelled**.
     * 
     * To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Terminal ordering read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdTerminalOrdersOrderIdCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdTerminalOrdersOrderIdCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdTerminalOrdersOrderIdCancelResponse
     */
	public function postMerchantsMerchantIdTerminalOrdersOrderIdCancel(
        \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdTerminalOrdersOrderIdCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdTerminalOrdersOrderIdCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdTerminalOrdersOrderIdCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/merchants/{merchantId}/terminalOrders/{orderId}/cancel', \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdTerminalOrdersOrderIdCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdTerminalOrdersOrderIdCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->terminalOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TerminalOrder', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
}