<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class DataExporterConfigs 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get all data exporter configs
     * 
     * Get all data exporter configs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataExporterTemplateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataExporterTemplateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataExporterTemplateResponse
     */
	public function dataExporterTemplate(
        \OpenAPI\OpenAPI\Models\Operations\DataExporterTemplateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataExporterTemplateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataExporterTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/data-exporter-configs/_template');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataExporterTemplateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataExporterTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dataExporterConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DataExporterConfig', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Create a new data exporter configs
     * 
     * Create a new data exporter configs
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\DataExporterConfig $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateBulkDataExporterConfigsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateBulkDataExporterConfigsResponse
     */
	public function createBulkDataExporterConfigs(
        \OpenAPI\OpenAPI\Models\Shared\DataExporterConfig $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateBulkDataExporterConfigsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateBulkDataExporterConfigsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/data-exporter-configs/_bulk');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateBulkDataExporterConfigsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createBulkDataExporterConfigs200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\CreateBulkDataExporterConfigs200ApplicationJSON>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Create a new data exporter config
     * 
     * Create a new data exporter config
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\DataExporterConfig $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDataExporterConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDataExporterConfigResponse
     */
	public function createDataExporterConfig(
        \OpenAPI\OpenAPI\Models\Shared\DataExporterConfig $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateDataExporterConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDataExporterConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/data-exporter-configs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDataExporterConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dataExporterConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DataExporterConfig', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Delete a data exporter config
     * 
     * Delete a data exporter config
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDataExporterConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDataExporterConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDataExporterConfigResponse
     */
	public function deleteDataExporterConfig(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDataExporterConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteDataExporterConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDataExporterConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/data-exporter-configs/{dataExporterConfigId}', \OpenAPI\OpenAPI\Models\Operations\DeleteDataExporterConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDataExporterConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleted = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Deleted', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Delete a data exporter config
     * 
     * Delete a data exporter config
     * 
     * @param array<\OpenAPI\OpenAPI\Models\Shared\Patch> $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletebulkDataExporterConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletebulkDataExporterConfigResponse
     */
	public function deletebulkDataExporterConfig(
        array $request,
        \OpenAPI\OpenAPI\Models\Operations\DeletebulkDataExporterConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletebulkDataExporterConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/data-exporter-configs/_bulk');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletebulkDataExporterConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deletebulkDataExporterConfig200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\DeletebulkDataExporterConfig200ApplicationJSON>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get all data exporter configs
     * 
     * Get all data exporter configs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FindAllDataExportersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FindAllDataExportersResponse
     */
	public function findAllDataExporters(
        \OpenAPI\OpenAPI\Models\Operations\FindAllDataExportersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FindAllDataExportersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/data-exporter-configs');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FindAllDataExportersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dataExporterConfigs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\DataExporterConfig>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get a data exporter config
     * 
     * Get a data exporter config
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FindDataExporterConfigByIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FindDataExporterConfigByIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FindDataExporterConfigByIdResponse
     */
	public function findDataExporterConfigById(
        \OpenAPI\OpenAPI\Models\Operations\FindDataExporterConfigByIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FindDataExporterConfigByIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FindDataExporterConfigByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/data-exporter-configs/{dataExporterConfigId}', \OpenAPI\OpenAPI\Models\Operations\FindDataExporterConfigByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FindDataExporterConfigByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dataExporterConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DataExporterConfig', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update a data exporter configs with a diff
     * 
     * Update a data exporter configs with a diff
     * 
     * @param array<\OpenAPI\OpenAPI\Models\Shared\Patch> $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchBulkDataExporterConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchBulkDataExporterConfigResponse
     */
	public function patchBulkDataExporterConfig(
        array $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchBulkDataExporterConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchBulkDataExporterConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/data-exporter-configs/_bulk');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchBulkDataExporterConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patchBulkDataExporterConfig200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\PatchBulkDataExporterConfig200ApplicationJSON>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update a data exporter config with a diff
     * 
     * Update a data exporter config with a diff
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchDataExporterConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchDataExporterConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchDataExporterConfigResponse
     */
	public function patchDataExporterConfig(
        \OpenAPI\OpenAPI\Models\Operations\PatchDataExporterConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchDataExporterConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchDataExporterConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/data-exporter-configs/{dataExporterConfigId}', \OpenAPI\OpenAPI\Models\Operations\PatchDataExporterConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchDataExporterConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dataExporterConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DataExporterConfig', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update a data exporter configs
     * 
     * Update a data exporter configs
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\DataExporterConfig $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateBulkDataExporterConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateBulkDataExporterConfigResponse
     */
	public function updateBulkDataExporterConfig(
        \OpenAPI\OpenAPI\Models\Shared\DataExporterConfig $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateBulkDataExporterConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateBulkDataExporterConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/data-exporter-configs/_bulk');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateBulkDataExporterConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateBulkDataExporterConfig200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\UpdateBulkDataExporterConfig200ApplicationJSON>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update a data exporter config
     * 
     * Update a data exporter config
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDataExporterConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDataExporterConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDataExporterConfigResponse
     */
	public function updateDataExporterConfig(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDataExporterConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateDataExporterConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDataExporterConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/data-exporter-configs/{dataExporterConfigId}', \OpenAPI\OpenAPI\Models\Operations\UpdateDataExporterConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "dataExporterConfig", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDataExporterConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dataExporterConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DataExporterConfig', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}