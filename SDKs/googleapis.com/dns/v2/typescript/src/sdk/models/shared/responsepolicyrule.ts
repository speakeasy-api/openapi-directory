/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ResponsePolicyRuleLocalData } from "./responsepolicyrulelocaldata";
import { Expose, Type } from "class-transformer";

/**
 * Answer this query with a behavior rather than DNS data.
 */
export enum ResponsePolicyRuleBehaviorEnum {
  BehaviorUnspecified = "BEHAVIOR_UNSPECIFIED",
  BypassResponsePolicy = "BYPASS_RESPONSE_POLICY",
}

/**
 * A Response Policy Rule is a selector that applies its behavior to queries that match the selector. Selectors are DNS names, which may be wildcards or exact matches. Each DNS query subject to a Response Policy matches at most one ResponsePolicyRule, as identified by the dns_name field with the longest matching suffix.
 */
export class ResponsePolicyRule extends SpeakeasyBase {
  /**
   * Answer this query with a behavior rather than DNS data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "behavior" })
  behavior?: ResponsePolicyRuleBehaviorEnum;

  /**
   * The DNS name (wildcard or exact) to apply this rule to. Must be unique within the Response Policy Rule.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dnsName" })
  dnsName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "localData" })
  @Type(() => ResponsePolicyRuleLocalData)
  localData?: ResponsePolicyRuleLocalData;

  /**
   * An identifier for this rule. Must be unique with the ResponsePolicy.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ruleName" })
  ruleName?: string;
}
