"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import forecastitem as shared_forecastitem
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GsiPredictionRequest:
    
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""Any valid Stromkonto account (address)."""  
    zip: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'zip', 'style': 'form', 'explode': True }})
    r"""Zipcode (Postleitzahl) of a city in Germany."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GsiPrediction200ApplicationJSONLocation:
    r"""Standarized location info sourced for prediction"""
    
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city'), 'exclude': lambda f: f is None }})
    r"""Pretty Print city name"""  
    zip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip'), 'exclude': lambda f: f is None }})
    r"""Zipcode (Postleitzahl)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GsiPrediction200ApplicationJSONMatrixH0:
    r"""Indicates number of hours a device should run"""
    
    avg_1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_1'), 'exclude': lambda f: f is None }})
    r"""device should run in 1 hour"""  
    avg_2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_2'), 'exclude': lambda f: f is None }})
    r"""device should run in 2 hours"""  
    avg_3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_3'), 'exclude': lambda f: f is None }})
    r"""device should run in 3 hour"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GsiPrediction200ApplicationJSONMatrix:
    r"""Device switching recommendation."""
    
    h0: Optional[GsiPrediction200ApplicationJSONMatrixH0] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('h0'), 'exclude': lambda f: f is None }})
    r"""Indicates number of hours a device should run"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GsiPrediction200ApplicationJSON:
    r"""Success"""
    
    forecast: Optional[list[shared_forecastitem.ForecastItem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forecast'), 'exclude': lambda f: f is None }})
    r"""Prediction for the upcomming hours"""  
    location: Optional[GsiPrediction200ApplicationJSONLocation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})
    r"""Standarized location info sourced for prediction"""  
    matrix: Optional[GsiPrediction200ApplicationJSONMatrix] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matrix'), 'exclude': lambda f: f is None }})
    r"""Device switching recommendation."""  
    

@dataclasses.dataclass
class GsiPredictionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    gsi_prediction_200_application_json_object: Optional[GsiPrediction200ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    