<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class TaggedShows 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a specific tag
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUserTagsTagIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUserTagsTagIdResponse
     */
	public function deleteUserTagsTagId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUserTagsTagIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUserTagsTagIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/tags/{tag_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteUserTagsTagIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUserTagsTagIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Untag a show
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUserTagsTagIdShowsShowIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUserTagsTagIdShowsShowIdResponse
     */
	public function deleteUserTagsTagIdShowsShowId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUserTagsTagIdShowsShowIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUserTagsTagIdShowsShowIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/tags/{tag_id}/shows/{show_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteUserTagsTagIdShowsShowIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUserTagsTagIdShowsShowIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * List all tags
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserTagsResponse
     */
	public function getUserTags(
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/tags');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tags = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Tag>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all shows under this tag
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserTagsTagIdShowsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserTagsTagIdShowsResponse
     */
	public function getUserTagsTagIdShows(
        \OpenAPI\OpenAPI\Models\Operations\GetUserTagsTagIdShowsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserTagsTagIdShowsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/tags/{tag_id}/shows', \OpenAPI\OpenAPI\Models\Operations\GetUserTagsTagIdShowsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUserTagsTagIdShowsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserTagsTagIdShowsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tagInstances = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TagInstance>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update a specific tag
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchUserTagsTagIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchUserTagsTagIdResponse
     */
	public function patchUserTagsTagId(
        \OpenAPI\OpenAPI\Models\Operations\PatchUserTagsTagIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchUserTagsTagIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/tags/{tag_id}', \OpenAPI\OpenAPI\Models\Operations\PatchUserTagsTagIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "tagInput", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchUserTagsTagIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tag', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
        }

        return $response;
    }
	
    /**
     * Create a new tag
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\TagInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostUserTagsResponse
     */
	public function postUserTags(
        \OpenAPI\OpenAPI\Models\Shared\TagInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostUserTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/tags');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostUserTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tag', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
        }

        return $response;
    }
	
    /**
     * Tag a show
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutUserTagsTagIdShowsShowIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutUserTagsTagIdShowsShowIdResponse
     */
	public function putUserTagsTagIdShowsShowId(
        \OpenAPI\OpenAPI\Models\Operations\PutUserTagsTagIdShowsShowIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutUserTagsTagIdShowsShowIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/tags/{tag_id}/shows/{show_id}', \OpenAPI\OpenAPI\Models\Operations\PutUserTagsTagIdShowsShowIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutUserTagsTagIdShowsShowIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tagInstance = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TagInstance', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}