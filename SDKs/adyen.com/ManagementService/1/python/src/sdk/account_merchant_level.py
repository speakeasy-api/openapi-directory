"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class AccountMerchantLevel:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_merchants(self, request: operations.GetMerchantsRequest, security: operations.GetMerchantsSecurity) -> operations.GetMerchantsResponse:
        r"""Get a list of merchant accounts
        Returns the list of merchant accounts that your API credential has access to. The list is grouped into pages as defined by the query parameters. 
        
        To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Account read
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/merchants'
        
        query_params = utils.get_query_params(operations.GetMerchantsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMerchantsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListMerchantResponse])
                res.list_merchant_response = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_merchants_merchant_id(self, request: operations.GetMerchantsMerchantIDRequest, security: operations.GetMerchantsMerchantIDSecurity) -> operations.GetMerchantsMerchantIDResponse:
        r"""Get a merchant account
        Returns the merchant account specified in the path. Your API credential must have access to the merchant account.
        
        To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Account read
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMerchantsMerchantIDRequest, base_url, '/merchants/{merchantId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMerchantsMerchantIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Merchant])
                res.merchant = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def post_merchants(self, request: shared.CreateMerchantRequest, security: operations.PostMerchantsSecurity) -> operations.PostMerchantsResponse:
        r"""Create a merchant account
        Creates a merchant account for the company account specified in the request.
        
        Use this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.
        
        To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Accounts read and write
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/merchants'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostMerchantsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateMerchantResponse])
                res.create_merchant_response = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def post_merchants_merchant_id_activate(self, request: operations.PostMerchantsMerchantIDActivateRequest, security: operations.PostMerchantsMerchantIDActivateSecurity) -> operations.PostMerchantsMerchantIDActivateResponse:
        r"""Request to activate a merchant account
        Sends a request to activate the merchant account identified in the path.
        
        You get the result of the activation asychronously through a [`merchant.updated`](https://docs.adyen.com/api-explorer/ManagementNotification/latest/post/merchant.updated) webhook. Once the merchant account is activated, you can start using it to accept payments and payouts.
        
        Use this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.
        
        To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Accounts read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostMerchantsMerchantIDActivateRequest, base_url, '/merchants/{merchantId}/activate', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostMerchantsMerchantIDActivateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RequestActivationResponse])
                res.request_activation_response = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    