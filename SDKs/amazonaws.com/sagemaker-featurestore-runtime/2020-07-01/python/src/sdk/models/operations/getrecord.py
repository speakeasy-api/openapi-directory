"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import getrecordresponse as shared_getrecordresponse
from typing import Any, Optional


@dataclasses.dataclass
class GetRecordRequest:
    
    feature_group_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'FeatureGroupName', 'style': 'simple', 'explode': False }})
    r"""The name of the feature group from which you want to retrieve a record."""  
    record_identifier_value_as_string: str = dataclasses.field(metadata={'query_param': { 'field_name': 'RecordIdentifierValueAsString', 'style': 'form', 'explode': True }})
    r"""The value that corresponds to <code>RecordIdentifier</code> type and uniquely identifies the record in the <code>FeatureGroup</code>."""  
    feature_name: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'FeatureName', 'style': 'form', 'explode': True }})
    r"""List of names of Features to be retrieved. If not specified, the latest value for all the Features are returned."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GetRecordResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_forbidden: Optional[Any] = dataclasses.field(default=None)
    r"""AccessForbidden"""  
    get_record_response: Optional[shared_getrecordresponse.GetRecordResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_failure: Optional[Any] = dataclasses.field(default=None)
    r"""InternalFailure"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFound"""  
    service_unavailable: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceUnavailable"""  
    validation_error: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationError"""  
    