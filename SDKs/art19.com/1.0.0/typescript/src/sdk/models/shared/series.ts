/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ResourceIdentifier } from "./resourceidentifier";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The status of the series
 */
export enum SeriesAttributesStatusEnum {
  Active = "active",
  Inactive = "inactive",
}

/**
 * The type of the series
 */
export enum SeriesAttributesTypeEnum {
  Series = "Series",
}

export class SeriesAttributes extends SpeakeasyBase {
  /**
   * The Amazon Music subscription URL
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amazon_subscription_url" })
  amazonSubscriptionUrl?: string;

  /**
   * The CastBox subscription URL
   */
  @SpeakeasyMetadata()
  @Expose({ name: "castbox_subscription_url" })
  castboxSubscriptionUrl?: string;

  /**
   * This will be replaced by the relationship `cover_image` in a future update.<br/>
   *
   * @remarks
   * The image ID of the cover art for this series. The `/images` endpoint provideds details to the image.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cover_image_id" })
  coverImageId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  /**
   * The description of the series eventually in HTML format
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Determines whether `description` is in HTML format or plain.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description_is_html" })
  descriptionIsHtml?: boolean;

  /**
   * The description with all HTML markup removed. If the description does not contain markup
   *
   * @remarks
   * this is identitcal to `description`.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description_plain" })
  descriptionPlain?: string;

  /**
   * The URL of the series on Facebook
   */
  @SpeakeasyMetadata()
  @Expose({ name: "facebook_url" })
  facebookUrl?: string;

  /**
   * The Google subscription URL
   */
  @SpeakeasyMetadata()
  @Expose({ name: "google_subscription_url" })
  googleSubscriptionUrl?: string;

  /**
   * The iHeartRadio subscription URL
   */
  @SpeakeasyMetadata()
  @Expose({ name: "iheart_subscription_url" })
  iheartSubscriptionUrl?: string;

  /**
   * The URL of the series on Instagram
   */
  @SpeakeasyMetadata()
  @Expose({ name: "instagram_url" })
  instagramUrl?: string;

  /**
   * If `null` or `true`, the ART19 web player will render an iTunes subscription badge
   */
  @SpeakeasyMetadata()
  @Expose({ name: "itunes_subscription_badge_enabled" })
  itunesSubscriptionBadgeEnabled?: boolean;

  /**
   * The Apple iTunes subscription URL
   */
  @SpeakeasyMetadata()
  @Expose({ name: "itunes_subscription_url" })
  itunesSubscriptionUrl?: string;

  /**
   * The URL of the series on LinkedIn
   */
  @SpeakeasyMetadata()
  @Expose({ name: "linkedin_url" })
  linkedinUrl?: string;

  /**
   * The Pocket Casts subscription URL
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pocket_casts_subscription_url" })
  pocketCastsSubscriptionUrl?: string;

  /**
   * The URL of the RSS feed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "podcast_subscription_url" })
  podcastSubscriptionUrl?: string;

  /**
   * If this is `true`, a public web page for this series is available under
   *
   * @remarks
   * `https://art19.com/shows/{slug}`, where `slug` is the value of the corresponding attribute.
   * This public page provides details about the series as well as descriptive links to all its
   * episodes. If this is `false`, no such public page is available.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "public_page_enabled" })
  publicPageEnabled?: boolean;

  /**
   * If present, this is the preferred title for the series in the RSS Feed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "public_title" })
  publicTitle?: string;

  /**
   * The RadioPublic subscription URL
   */
  @SpeakeasyMetadata()
  @Expose({ name: "radio_public_subscription_url" })
  radioPublicSubscriptionUrl?: string;

  /**
   * The author responsible for the RSS feed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rss_author" })
  rssAuthor?: string;

  /**
   * The copyright disclaimer for the contents of the show, appearing after a Â© symbol, e.g. `2020 ART19, Inc.`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rss_copyright" })
  rssCopyright?: string;

  /**
   * The pubic point of contact for the show
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rss_email" })
  rssEmail?: string;

  /**
   * The name of the contact for the show
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rss_owner" })
  rssOwner?: string;

  /**
   * This slug is unique over all series and networks system wide and is used to access the series' feed
   *
   * @remarks
   * as well as its eventually enabled public page on ART19.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "slug" })
  slug?: string;

  /**
   * The title of the series modified for sorting. This converts all characters to
   *
   * @remarks
   * lower case, removes an eventually leading `The` as well as leading and trailling whitespace characters.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sort_title" })
  sortTitle?: string;

  /**
   * If `null` or `true`, the ART19 web player will render a Spotify subscription badge
   */
  @SpeakeasyMetadata()
  @Expose({ name: "spotify_subscription_badge_enabled" })
  spotifySubscriptionBadgeEnabled?: boolean;

  /**
   * The Spotify subscription URL
   */
  @SpeakeasyMetadata()
  @Expose({ name: "spotify_subscription_url" })
  spotifySubscriptionUrl?: string;

  /**
   * The status of the series
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: SeriesAttributesStatusEnum;

  /**
   * If `null` or `true`, the ART19 web player will render a Stitcher subscription badge
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stitcher_subscription_badge_enabled" })
  stitcherSubscriptionBadgeEnabled?: boolean;

  /**
   * The Stitcher subscription URL
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stitcher_subscription_url" })
  stitcherSubscriptionUrl?: string;

  /**
   * The title of the series
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;

  /**
   * The URL of the series on Tumblr
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tumblr_url" })
  tumblrUrl?: string;

  /**
   * The TuneIn subscription URL
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tune_in_subscription_url" })
  tuneInSubscriptionUrl?: string;

  /**
   * The URL of the series on Twitter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "twitter_url" })
  twitterUrl?: string;

  /**
   * The type of the series
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: SeriesAttributesTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;

  /**
   * The custom website URL for the series
   */
  @SpeakeasyMetadata()
  @Expose({ name: "website_url" })
  websiteUrl?: string;
}

export class SeriesRelationshipsAListOfClassificationsAssociatedWithTheSeries extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ResourceIdentifier })
  @Expose({ name: "data" })
  @Type(() => ResourceIdentifier)
  data?: ResourceIdentifier[];
}

/**
 * The cover image for the series
 */
export class SeriesRelationshipsCoverImage extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  @Type(() => ResourceIdentifier)
  data?: ResourceIdentifier;
}

export class SeriesRelationshipsAListOfCreditsGivenToPeopleInTheSeries extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ResourceIdentifier })
  @Expose({ name: "data" })
  @Type(() => ResourceIdentifier)
  data?: ResourceIdentifier[];
}

export class SeriesRelationshipsAListOfPublishedAndReleasedEpisodesWithAnActualMediaFile extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ResourceIdentifier })
  @Expose({ name: "data" })
  @Type(() => ResourceIdentifier)
  data?: ResourceIdentifier[];
}

export class SeriesRelationshipsTheCoverImageForTheSeries extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ResourceIdentifier })
  @Expose({ name: "data" })
  @Type(() => ResourceIdentifier)
  data?: ResourceIdentifier[];
}

export class SeriesRelationshipsTheNetworkTheSeriesBelongsTo extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  @Type(() => ResourceIdentifier)
  data?: ResourceIdentifier;
}

export class SeriesRelationshipsAListOfSeasonsInTheSeries extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ResourceIdentifier })
  @Expose({ name: "data" })
  @Type(() => ResourceIdentifier)
  data?: ResourceIdentifier[];
}

export class SeriesRelationshipsAListOfAssociationsLinkingTagsToTheSeries extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ResourceIdentifier })
  @Expose({ name: "data" })
  @Type(() => ResourceIdentifier)
  data?: ResourceIdentifier[];
}

export class SeriesRelationshipsAListOfTagsAssociatedWithTheSeries extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ResourceIdentifier })
  @Expose({ name: "data" })
  @Type(() => ResourceIdentifier)
  data?: ResourceIdentifier[];
}

export class SeriesRelationships extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "classification_inclusions" })
  @Type(() => SeriesRelationshipsAListOfClassificationsAssociatedWithTheSeries)
  classificationInclusions?: SeriesRelationshipsAListOfClassificationsAssociatedWithTheSeries;

  /**
   * The cover image for the series
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cover_image" })
  @Type(() => SeriesRelationshipsCoverImage)
  coverImage?: SeriesRelationshipsCoverImage;

  @SpeakeasyMetadata()
  @Expose({ name: "credits" })
  @Type(() => SeriesRelationshipsAListOfCreditsGivenToPeopleInTheSeries)
  credits?: SeriesRelationshipsAListOfCreditsGivenToPeopleInTheSeries;

  @SpeakeasyMetadata()
  @Expose({ name: "episodes" })
  @Type(
    () =>
      SeriesRelationshipsAListOfPublishedAndReleasedEpisodesWithAnActualMediaFile
  )
  episodes?: SeriesRelationshipsAListOfPublishedAndReleasedEpisodesWithAnActualMediaFile;

  @SpeakeasyMetadata()
  @Expose({ name: "images" })
  @Type(() => SeriesRelationshipsTheCoverImageForTheSeries)
  images?: SeriesRelationshipsTheCoverImageForTheSeries;

  @SpeakeasyMetadata()
  @Expose({ name: "network" })
  @Type(() => SeriesRelationshipsTheNetworkTheSeriesBelongsTo)
  network?: SeriesRelationshipsTheNetworkTheSeriesBelongsTo;

  @SpeakeasyMetadata()
  @Expose({ name: "seasons" })
  @Type(() => SeriesRelationshipsAListOfSeasonsInTheSeries)
  seasons?: SeriesRelationshipsAListOfSeasonsInTheSeries;

  @SpeakeasyMetadata()
  @Expose({ name: "taggings" })
  @Type(() => SeriesRelationshipsAListOfAssociationsLinkingTagsToTheSeries)
  taggings?: SeriesRelationshipsAListOfAssociationsLinkingTagsToTheSeries;

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  @Type(() => SeriesRelationshipsAListOfTagsAssociatedWithTheSeries)
  tags?: SeriesRelationshipsAListOfTagsAssociatedWithTheSeries;
}

export class Series extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "attributes" })
  @Type(() => SeriesAttributes)
  attributes?: SeriesAttributes;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "relationships" })
  @Type(() => SeriesRelationships)
  relationships?: SeriesRelationships;

  /**
   * The type of resource. This is always `series`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}
