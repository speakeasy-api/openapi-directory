"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class BusinessUnit:
    r"""Get Business Unit information."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_business_units_v3_business_units_user_user_id_(self, request: operations.GetBusinessUnitsV3BusinessUnitsUserUserIDRequest, security: operations.GetBusinessUnitsV3BusinessUnitsUserUserIDSecurity) -> operations.GetBusinessUnitsV3BusinessUnitsUserUserIDResponse:
        r"""Get Business Units for a user
        Get Business Units identified by `userId`. The `userId` refers to the userâ€™s ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetBusinessUnitsV3BusinessUnitsUserUserIDRequest, base_url, '/business-units/v3/business-units/user/{userId}', request)
        
        query_params = utils.get_query_params(operations.GetBusinessUnitsV3BusinessUnitsUserUserIDRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBusinessUnitsV3BusinessUnitsUserUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CollectionResponsePublicBusinessUnitNoPaging])
                res.collection_response_public_business_unit_no_paging = out
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    