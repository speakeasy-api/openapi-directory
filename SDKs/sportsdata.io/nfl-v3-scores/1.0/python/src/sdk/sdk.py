"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

SERVERS = [
    "http://azure-api.sportsdata.io/v3/nfl/scores",
    "https://azure-api.sportsdata.io/v3/nfl/scores",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""NFL schedules, scores, odds, weather, and news API."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        
    
    
    def are_games_in_progress(self, request: operations.AreGamesInProgressRequest) -> operations.AreGamesInProgressResponse:
        r"""Are Games In Progress
        Returns <code>true</code> if there is at least one game being played at the time of the request or <code>false</code> if there are none.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AreGamesInProgressRequest, base_url, '/{format}/AreAnyGamesInProgress', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AreGamesInProgressResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bool])
                res.are_games_in_progress_200_application_json_boolean = out

        return res

    def bye_weeks(self, request: operations.ByeWeeksRequest) -> operations.ByeWeeksResponse:
        r"""Bye Weeks
        Get bye weeks for the teams during a specified NFL season.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ByeWeeksRequest, base_url, '/{format}/Byes/{season}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ByeWeeksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Bye]])
                res.byes = out

        return res

    def depth_charts(self, request: operations.DepthChartsRequest) -> operations.DepthChartsResponse:
        r"""Depth Charts
        Depth charts for all NFL teams split by offensive, defensive, and special teams position groupings.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DepthChartsRequest, base_url, '/{format}/DepthCharts', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DepthChartsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TeamDepthChart]])
                res.team_depth_charts = out

        return res

    def game_stats_by_season_deprecated_use_team_game_stats_instead(self, request: operations.GameStatsBySeasonDeprecatedUseTeamGameStatsInsteadRequest) -> operations.GameStatsBySeasonDeprecatedUseTeamGameStatsInsteadResponse:
        r"""Game Stats by Season (Deprecated, use Team Game Stats instead)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GameStatsBySeasonDeprecatedUseTeamGameStatsInsteadRequest, base_url, '/{format}/GameStats/{season}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GameStatsBySeasonDeprecatedUseTeamGameStatsInsteadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Game]])
                res.games = out

        return res

    def game_stats_by_week_deprecated_use_team_game_stats_instead(self, request: operations.GameStatsByWeekDeprecatedUseTeamGameStatsInsteadRequest) -> operations.GameStatsByWeekDeprecatedUseTeamGameStatsInsteadResponse:
        r"""Game Stats by Week (Deprecated, use Team Game Stats instead)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GameStatsByWeekDeprecatedUseTeamGameStatsInsteadRequest, base_url, '/{format}/GameStatsByWeek/{season}/{week}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GameStatsByWeekDeprecatedUseTeamGameStatsInsteadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Game]])
                res.games = out

        return res

    def news(self, request: operations.NewsRequest) -> operations.NewsResponse:
        r"""News"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NewsRequest, base_url, '/{format}/News', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NewsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.News]])
                res.news = out

        return res

    def news_by_date(self, request: operations.NewsByDateRequest) -> operations.NewsByDateResponse:
        r"""News by Date"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NewsByDateRequest, base_url, '/{format}/NewsByDate/{date}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NewsByDateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.News]])
                res.news = out

        return res

    def news_by_player(self, request: operations.NewsByPlayerRequest) -> operations.NewsByPlayerResponse:
        r"""News by Player"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NewsByPlayerRequest, base_url, '/{format}/NewsByPlayerID/{playerid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NewsByPlayerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.News]])
                res.news = out

        return res

    def news_by_team(self, request: operations.NewsByTeamRequest) -> operations.NewsByTeamResponse:
        r"""News by Team"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NewsByTeamRequest, base_url, '/{format}/NewsByTeam/{team}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NewsByTeamResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.News]])
                res.news = out

        return res

    def player_details_by_available(self, request: operations.PlayerDetailsByAvailableRequest) -> operations.PlayerDetailsByAvailableResponse:
        r"""Player Details by Available"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PlayerDetailsByAvailableRequest, base_url, '/{format}/Players', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlayerDetailsByAvailableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Player]])
                res.players = out

        return res

    def player_details_by_free_agents(self, request: operations.PlayerDetailsByFreeAgentsRequest) -> operations.PlayerDetailsByFreeAgentsResponse:
        r"""Player Details by Free Agents"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PlayerDetailsByFreeAgentsRequest, base_url, '/{format}/FreeAgents', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlayerDetailsByFreeAgentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Player]])
                res.players = out

        return res

    def player_details_by_player(self, request: operations.PlayerDetailsByPlayerRequest) -> operations.PlayerDetailsByPlayerResponse:
        r"""Player Details by Player"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PlayerDetailsByPlayerRequest, base_url, '/{format}/Player/{playerid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlayerDetailsByPlayerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PlayerDetail])
                res.player_detail = out

        return res

    def player_details_by_rookie_draft_year(self, request: operations.PlayerDetailsByRookieDraftYearRequest) -> operations.PlayerDetailsByRookieDraftYearResponse:
        r"""Player Details by Rookie Draft Year"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PlayerDetailsByRookieDraftYearRequest, base_url, '/{format}/Rookies/{season}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlayerDetailsByRookieDraftYearResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Player]])
                res.players = out

        return res

    def player_details_by_team(self, request: operations.PlayerDetailsByTeamRequest) -> operations.PlayerDetailsByTeamResponse:
        r"""Player Details by Team"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PlayerDetailsByTeamRequest, base_url, '/{format}/Players/{team}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlayerDetailsByTeamResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PlayerDetail]])
                res.player_details = out

        return res

    def referees(self, request: operations.RefereesRequest) -> operations.RefereesResponse:
        r"""Referees
        Returns full list of NFL Referees
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RefereesRequest, base_url, '/{format}/Referees', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RefereesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Referee]])
                res.referees = out

        return res

    def schedule(self, request: operations.ScheduleRequest) -> operations.ScheduleResponse:
        r"""Schedule
        Game schedule for a specified season.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ScheduleRequest, base_url, '/{format}/Schedules/{season}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ScheduleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Schedule]])
                res.schedules = out

        return res

    def scores_by_date(self, request: operations.ScoresByDateRequest) -> operations.ScoresByDateResponse:
        r"""Scores by Date
        Get game scores for a specified week of a season.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ScoresByDateRequest, base_url, '/{format}/ScoresByDate/{date}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ScoresByDateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Score]])
                res.scores = out

        return res

    def scores_by_season(self, request: operations.ScoresBySeasonRequest) -> operations.ScoresBySeasonResponse:
        r"""Scores by Season
        Game scores for a specified season.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ScoresBySeasonRequest, base_url, '/{format}/Scores/{season}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ScoresBySeasonResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Score]])
                res.scores = out

        return res

    def scores_by_week(self, request: operations.ScoresByWeekRequest) -> operations.ScoresByWeekResponse:
        r"""Scores by Week
        Get game scores for a specified week of a season.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ScoresByWeekRequest, base_url, '/{format}/ScoresByWeek/{season}/{week}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ScoresByWeekResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Score]])
                res.scores = out

        return res

    def scores_by_week_simulation(self, request: operations.ScoresByWeekSimulationRequest) -> operations.ScoresByWeekSimulationResponse:
        r"""Scores by Week Simulation
        Gets simulated live scores of NFL games, covering the Conference Championship games on January 21, 2018.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ScoresByWeekSimulationRequest, base_url, '/{format}/SimulatedScores/{numberofplays}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ScoresByWeekSimulationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Score]])
                res.scores = out

        return res

    def season_current(self, request: operations.SeasonCurrentRequest) -> operations.SeasonCurrentResponse:
        r"""Season Current
        Year of the current NFL season. This value changes at the start of the new NFL league year. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SeasonCurrentRequest, base_url, '/{format}/CurrentSeason', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SeasonCurrentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.season_current_200_application_json_integer = out

        return res

    def season_last_completed(self, request: operations.SeasonLastCompletedRequest) -> operations.SeasonLastCompletedResponse:
        r"""Season Last Completed
        Year of the most recently completed season. this value changes immediately after the Super Bowl. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SeasonLastCompletedRequest, base_url, '/{format}/LastCompletedSeason', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SeasonLastCompletedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.season_last_completed_200_application_json_integer = out

        return res

    def season_upcoming(self, request: operations.SeasonUpcomingRequest) -> operations.SeasonUpcomingResponse:
        r"""Season Upcoming
        Year of the current NFL season, if we are in the mid-season. If we are in the off-season, then year of the next upcoming season. This value changes immediately after the Super Bowl. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SeasonUpcomingRequest, base_url, '/{format}/UpcomingSeason', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SeasonUpcomingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.season_upcoming_200_application_json_integer = out

        return res

    def stadiums(self, request: operations.StadiumsRequest) -> operations.StadiumsResponse:
        r"""Stadiums
        This method returns all stadiums.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.StadiumsRequest, base_url, '/{format}/Stadiums', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StadiumsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Stadium]])
                res.stadiums = out

        return res

    def standings(self, request: operations.StandingsRequest) -> operations.StandingsResponse:
        r"""Standings"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StandingsRequest, base_url, '/{format}/Standings/{season}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StandingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Standing]])
                res.standings = out

        return res

    def team_game_logs_by_season(self, request: operations.TeamGameLogsBySeasonRequest) -> operations.TeamGameLogsBySeasonResponse:
        r"""Team Game Logs By Season
        Game by game log of total team statistics.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.TeamGameLogsBySeasonRequest, base_url, '/{format}/TeamGameStatsBySeason/{season}/{teamid}/{numberofgames}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TeamGameLogsBySeasonResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TeamGame]])
                res.team_games = out

        return res

    def team_game_stats(self, request: operations.TeamGameStatsRequest) -> operations.TeamGameStatsResponse:
        r"""Team Game Stats"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TeamGameStatsRequest, base_url, '/{format}/TeamGameStats/{season}/{week}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TeamGameStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TeamGame]])
                res.team_games = out

        return res

    def team_season_stats(self, request: operations.TeamSeasonStatsRequest) -> operations.TeamSeasonStatsResponse:
        r"""Team Season Stats"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TeamSeasonStatsRequest, base_url, '/{format}/TeamSeasonStats/{season}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TeamSeasonStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TeamSeason]])
                res.team_seasons = out

        return res

    def teams_active(self, request: operations.TeamsActiveRequest) -> operations.TeamsActiveResponse:
        r"""Teams (Active)
        Gets all active teams.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.TeamsActiveRequest, base_url, '/{format}/Teams', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TeamsActiveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Team]])
                res.teams = out

        return res

    def teams_all(self, request: operations.TeamsAllRequest) -> operations.TeamsAllResponse:
        r"""Teams (All)
        Gets all teams, including pro bowl teams.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.TeamsAllRequest, base_url, '/{format}/AllTeams', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TeamsAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Team]])
                res.teams = out

        return res

    def teams_by_season(self, request: operations.TeamsBySeasonRequest) -> operations.TeamsBySeasonResponse:
        r"""Teams by Season
        List of teams playing in a specified season.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.TeamsBySeasonRequest, base_url, '/{format}/Teams/{season}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TeamsBySeasonResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Team]])
                res.teams = out

        return res

    def timeframes(self, request: operations.TimeframesRequest) -> operations.TimeframesResponse:
        r"""Timeframes
        Get detailed information about past, present, and future timeframes.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.TimeframesRequest, base_url, '/{format}/Timeframes/{type}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TimeframesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Timeframe]])
                res.timeframes = out

        return res

    def week_current(self, request: operations.WeekCurrentRequest) -> operations.WeekCurrentResponse:
        r"""Week Current
        Number of the current week of the NFL season. This value usually changes on Tuesday nights or Wednesday mornings at midnight ET.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.WeekCurrentRequest, base_url, '/{format}/CurrentWeek', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WeekCurrentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.week_current_200_application_json_integer = out

        return res

    def week_last_completed(self, request: operations.WeekLastCompletedRequest) -> operations.WeekLastCompletedResponse:
        r"""Week Last Completed
        Number of the last completed week of the NFL season. This value usually changes on Tuesday nights or Wednesday mornings at midnight ET.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.WeekLastCompletedRequest, base_url, '/{format}/LastCompletedWeek', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WeekLastCompletedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.week_last_completed_200_application_json_integer = out

        return res

    def week_upcoming(self, request: operations.WeekUpcomingRequest) -> operations.WeekUpcomingResponse:
        r"""Week Upcoming
        Number of the upcoming week of the NFL season. This value usually changes on Tuesday nights or Wednesday mornings at midnight ET.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.WeekUpcomingRequest, base_url, '/{format}/UpcomingWeek', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WeekUpcomingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.week_upcoming_200_application_json_integer = out

        return res

    def x_ping(self, request: operations.XPingRequest) -> operations.XPingResponse:
        r"""X Ping
        Ping NFL API
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.XPingRequest, base_url, '/{format}/Ping/{seconds}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.XPingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.x_ping_200_application_json_any = out

        return res

    