"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class WritableCircuitTerminationTerminationEnum(str, Enum):
    A = 'A'
    Z = 'Z'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WritableCircuitTerminationInput:
    
    circuit: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('circuit') }})  
    port_speed: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('port_speed') }})  
    site: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('site') }})  
    term_side: WritableCircuitTerminationTerminationEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('term_side') }})  
    interface: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interface'), 'exclude': lambda f: f is None }})  
    pp_info: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pp_info'), 'exclude': lambda f: f is None }})  
    upstream_speed: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upstream_speed'), 'exclude': lambda f: f is None }})
    r"""Upstream speed, if different from port speed"""  
    xconnect_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('xconnect_id'), 'exclude': lambda f: f is None }})  
    