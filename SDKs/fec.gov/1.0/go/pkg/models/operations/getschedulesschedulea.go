// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

type GetSchedulesScheduleAContributorTypeEnum string

const (
	GetSchedulesScheduleAContributorTypeEnumIndividual GetSchedulesScheduleAContributorTypeEnum = "individual"
	GetSchedulesScheduleAContributorTypeEnumCommittee  GetSchedulesScheduleAContributorTypeEnum = "committee"
)

func (e *GetSchedulesScheduleAContributorTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "individual":
		fallthrough
	case "committee":
		*e = GetSchedulesScheduleAContributorTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSchedulesScheduleAContributorTypeEnum: %s", s)
	}
}

type GetSchedulesScheduleARecipientCommitteeDesignationEnum string

const (
	GetSchedulesScheduleARecipientCommitteeDesignationEnumUnknown GetSchedulesScheduleARecipientCommitteeDesignationEnum = ""
	GetSchedulesScheduleARecipientCommitteeDesignationEnumA       GetSchedulesScheduleARecipientCommitteeDesignationEnum = "A"
	GetSchedulesScheduleARecipientCommitteeDesignationEnumJ       GetSchedulesScheduleARecipientCommitteeDesignationEnum = "J"
	GetSchedulesScheduleARecipientCommitteeDesignationEnumP       GetSchedulesScheduleARecipientCommitteeDesignationEnum = "P"
	GetSchedulesScheduleARecipientCommitteeDesignationEnumU       GetSchedulesScheduleARecipientCommitteeDesignationEnum = "U"
	GetSchedulesScheduleARecipientCommitteeDesignationEnumB       GetSchedulesScheduleARecipientCommitteeDesignationEnum = "B"
	GetSchedulesScheduleARecipientCommitteeDesignationEnumD       GetSchedulesScheduleARecipientCommitteeDesignationEnum = "D"
)

func (e *GetSchedulesScheduleARecipientCommitteeDesignationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "A":
		fallthrough
	case "J":
		fallthrough
	case "P":
		fallthrough
	case "U":
		fallthrough
	case "B":
		fallthrough
	case "D":
		*e = GetSchedulesScheduleARecipientCommitteeDesignationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSchedulesScheduleARecipientCommitteeDesignationEnum: %s", s)
	}
}

type GetSchedulesScheduleARecipientCommitteeOrgTypeEnum string

const (
	GetSchedulesScheduleARecipientCommitteeOrgTypeEnumUnknown GetSchedulesScheduleARecipientCommitteeOrgTypeEnum = ""
	GetSchedulesScheduleARecipientCommitteeOrgTypeEnumC       GetSchedulesScheduleARecipientCommitteeOrgTypeEnum = "C"
	GetSchedulesScheduleARecipientCommitteeOrgTypeEnumL       GetSchedulesScheduleARecipientCommitteeOrgTypeEnum = "L"
	GetSchedulesScheduleARecipientCommitteeOrgTypeEnumM       GetSchedulesScheduleARecipientCommitteeOrgTypeEnum = "M"
	GetSchedulesScheduleARecipientCommitteeOrgTypeEnumT       GetSchedulesScheduleARecipientCommitteeOrgTypeEnum = "T"
	GetSchedulesScheduleARecipientCommitteeOrgTypeEnumV       GetSchedulesScheduleARecipientCommitteeOrgTypeEnum = "V"
	GetSchedulesScheduleARecipientCommitteeOrgTypeEnumW       GetSchedulesScheduleARecipientCommitteeOrgTypeEnum = "W"
)

func (e *GetSchedulesScheduleARecipientCommitteeOrgTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "C":
		fallthrough
	case "L":
		fallthrough
	case "M":
		fallthrough
	case "T":
		fallthrough
	case "V":
		fallthrough
	case "W":
		*e = GetSchedulesScheduleARecipientCommitteeOrgTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSchedulesScheduleARecipientCommitteeOrgTypeEnum: %s", s)
	}
}

type GetSchedulesScheduleARecipientCommitteeTypeEnum string

const (
	GetSchedulesScheduleARecipientCommitteeTypeEnumUnknown GetSchedulesScheduleARecipientCommitteeTypeEnum = ""
	GetSchedulesScheduleARecipientCommitteeTypeEnumC       GetSchedulesScheduleARecipientCommitteeTypeEnum = "C"
	GetSchedulesScheduleARecipientCommitteeTypeEnumD       GetSchedulesScheduleARecipientCommitteeTypeEnum = "D"
	GetSchedulesScheduleARecipientCommitteeTypeEnumE       GetSchedulesScheduleARecipientCommitteeTypeEnum = "E"
	GetSchedulesScheduleARecipientCommitteeTypeEnumH       GetSchedulesScheduleARecipientCommitteeTypeEnum = "H"
	GetSchedulesScheduleARecipientCommitteeTypeEnumI       GetSchedulesScheduleARecipientCommitteeTypeEnum = "I"
	GetSchedulesScheduleARecipientCommitteeTypeEnumN       GetSchedulesScheduleARecipientCommitteeTypeEnum = "N"
	GetSchedulesScheduleARecipientCommitteeTypeEnumO       GetSchedulesScheduleARecipientCommitteeTypeEnum = "O"
	GetSchedulesScheduleARecipientCommitteeTypeEnumP       GetSchedulesScheduleARecipientCommitteeTypeEnum = "P"
	GetSchedulesScheduleARecipientCommitteeTypeEnumQ       GetSchedulesScheduleARecipientCommitteeTypeEnum = "Q"
	GetSchedulesScheduleARecipientCommitteeTypeEnumS       GetSchedulesScheduleARecipientCommitteeTypeEnum = "S"
	GetSchedulesScheduleARecipientCommitteeTypeEnumU       GetSchedulesScheduleARecipientCommitteeTypeEnum = "U"
	GetSchedulesScheduleARecipientCommitteeTypeEnumV       GetSchedulesScheduleARecipientCommitteeTypeEnum = "V"
	GetSchedulesScheduleARecipientCommitteeTypeEnumW       GetSchedulesScheduleARecipientCommitteeTypeEnum = "W"
	GetSchedulesScheduleARecipientCommitteeTypeEnumX       GetSchedulesScheduleARecipientCommitteeTypeEnum = "X"
	GetSchedulesScheduleARecipientCommitteeTypeEnumY       GetSchedulesScheduleARecipientCommitteeTypeEnum = "Y"
	GetSchedulesScheduleARecipientCommitteeTypeEnumZ       GetSchedulesScheduleARecipientCommitteeTypeEnum = "Z"
)

func (e *GetSchedulesScheduleARecipientCommitteeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "C":
		fallthrough
	case "D":
		fallthrough
	case "E":
		fallthrough
	case "H":
		fallthrough
	case "I":
		fallthrough
	case "N":
		fallthrough
	case "O":
		fallthrough
	case "P":
		fallthrough
	case "Q":
		fallthrough
	case "S":
		fallthrough
	case "U":
		fallthrough
	case "V":
		fallthrough
	case "W":
		fallthrough
	case "X":
		fallthrough
	case "Y":
		fallthrough
	case "Z":
		*e = GetSchedulesScheduleARecipientCommitteeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSchedulesScheduleARecipientCommitteeTypeEnum: %s", s)
	}
}

type GetSchedulesScheduleAQueryParams struct {
	// API key for https://api.data.gov. Get one at https://api.data.gov/signup.
	//
	APIKey string `queryParam:"style=form,explode=true,name=api_key"`
	// A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
	//
	CommitteeID []string `queryParam:"style=form,explode=true,name=committee_id"`
	// City of contributor
	ContributorCity []string `queryParam:"style=form,explode=true,name=contributor_city"`
	// Employer of contributor, filers need to make an effort to gather this information
	ContributorEmployer []string `queryParam:"style=form,explode=true,name=contributor_employer"`
	// The FEC identifier should be represented here if the contributor is registered with the FEC.
	ContributorID []string `queryParam:"style=form,explode=true,name=contributor_id"`
	// Name of contributor
	ContributorName []string `queryParam:"style=form,explode=true,name=contributor_name"`
	// Occupation of contributor, filers need to make an effort to gather this information
	ContributorOccupation []string `queryParam:"style=form,explode=true,name=contributor_occupation"`
	// State of contributor
	ContributorState []string `queryParam:"style=form,explode=true,name=contributor_state"`
	// Filters individual or committee contributions based on line number
	ContributorType []GetSchedulesScheduleAContributorTypeEnum `queryParam:"style=form,explode=true,name=contributor_type"`
	// Zip code of contributor
	ContributorZip []string `queryParam:"style=form,explode=true,name=contributor_zip"`
	// An unique identifier for each page where the electronic or paper filing is reported.
	//
	ImageNumber []string `queryParam:"style=form,explode=true,name=image_number"`
	// Restrict to non-earmarked individual contributions where memo code is true. Filtering individuals is useful to make sure contributions are not double reported and in creating breakdowns of the amount of money coming from individuals.
	IsIndividual *bool `queryParam:"style=form,explode=true,name=is_individual"`
	// When sorting by `contribution_receipt_amount`, this is populated with the         `contribution_receipt_amount` of the last result. However, you will need to pass the index         of that last result to `last_index` to get the next page.
	LastContributionReceiptAmount *float32 `queryParam:"style=form,explode=true,name=last_contribution_receipt_amount"`
	// When sorting by `contribution_receipt_date`, this is populated with the         `contribution_receipt_date` of the last result. However, you will need to pass the index         of that last result to `last_index` to get the next page.
	LastContributionReceiptDate *types.Date `queryParam:"style=form,explode=true,name=last_contribution_receipt_date"`
	// Index of last result from previous page
	LastIndex *int `queryParam:"style=form,explode=true,name=last_index"`
	// Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.
	LineNumber *string `queryParam:"style=form,explode=true,name=line_number"`
	// Filter for all amounts less than a value.
	MaxAmount *string `queryParam:"style=form,explode=true,name=max_amount"`
	// Maximum date
	MaxDate *types.Date `queryParam:"style=form,explode=true,name=max_date"`
	// Maxium image number of the page where the schedule item is reported
	MaxImageNumber *string `queryParam:"style=form,explode=true,name=max_image_number"`
	// Maximum load date
	MaxLoadDate *types.Date `queryParam:"style=form,explode=true,name=max_load_date"`
	// Filter for all amounts greater than a value.
	MinAmount *string `queryParam:"style=form,explode=true,name=min_amount"`
	// Minimum date
	MinDate *types.Date `queryParam:"style=form,explode=true,name=min_date"`
	// Minium image number of the page where the schedule item is reported
	MinImageNumber *string `queryParam:"style=form,explode=true,name=min_image_number"`
	// Minimum load date
	MinLoadDate *types.Date `queryParam:"style=form,explode=true,name=min_load_date"`
	// The number of results returned per page. Defaults to 20.
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// The one-letter designation code of the organization:
	//          - A authorized by a candidate
	//          - J joint fundraising committee
	//          - P principal campaign committee of a candidate
	//          - U unauthorized
	//          - B lobbyist/registrant PAC
	//          - D leadership PAC
	//
	RecipientCommitteeDesignation []GetSchedulesScheduleARecipientCommitteeDesignationEnum `queryParam:"style=form,explode=true,name=recipient_committee_designation"`
	// The one-letter code for the kind for organization:
	//         - C corporation
	//         - L labor organization
	//         - M membership organization
	//         - T trade association
	//         - V cooperative
	//         - W corporation without capital stock
	//
	RecipientCommitteeOrgType []GetSchedulesScheduleARecipientCommitteeOrgTypeEnum `queryParam:"style=form,explode=true,name=recipient_committee_org_type"`
	// The one-letter type code of the organization:
	//         - C communication cost
	//         - D delegate
	//         - E electioneering communication
	//         - H House
	//         - I independent expenditure filer (not a committee)
	//         - N PAC - nonqualified
	//         - O independent expenditure-only (super PACs)
	//         - P presidential
	//         - Q PAC - qualified
	//         - S Senate
	//         - U single candidate independent expenditure
	//         - V PAC with non-contribution account, nonqualified
	//         - W PAC with non-contribution account, qualified
	//         - X party, nonqualified
	//         - Y party, qualified
	//         - Z national party non-federal account
	//
	RecipientCommitteeType []GetSchedulesScheduleARecipientCommitteeTypeEnum `queryParam:"style=form,explode=true,name=recipient_committee_type"`
	// Provide a field to sort by. Use `-` for descending order.
	//
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Hide null values on sorted column(s).
	SortHideNull *bool `queryParam:"style=form,explode=true,name=sort_hide_null"`
	// Toggle that filters out all rows having sort column that is non-null
	SortNullOnly *bool `queryParam:"style=form,explode=true,name=sort_null_only"`
	// This is a two-year period that is derived from the year a transaction took place in the
	// Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction
	// (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b)
	// the two_year_transaction_period is named after the ending, even-numbered year. If we do not
	// have the date  of the transaction, we fall back to using the report year (report_year in both
	// tables) instead,  making the same cycle adjustment as necessary. If no transaction year is
	// specified, the results default to the most current cycle.
	//
	TwoYearTransactionPeriod []int `queryParam:"style=form,explode=true,name=two_year_transaction_period"`
}

type GetSchedulesScheduleARequest struct {
	QueryParams GetSchedulesScheduleAQueryParams
}

type GetSchedulesScheduleAResponse struct {
	ContentType   string
	ScheduleAPage *shared.ScheduleAPage
	StatusCode    int
	RawResponse   *http.Response
}
