"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import v1money as shared_v1money
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class V1CreateRefundRequest:
    r"""V1CreateRefundRequest"""
    
    payment_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payment_id') }})
    r"""The ID of the payment to refund. If you are creating a `PARTIAL`
    refund for a split tender payment, instead provide the id of the
    particular tender you want to refund.
    """  
    reason: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason') }})
    r"""The reason for the refund."""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of refund (FULL or PARTIAL)."""  
    refunded_money: Optional[shared_v1money.V1Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunded_money'), 'exclude': lambda f: f is None }})  
    request_idempotence_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_idempotence_key'), 'exclude': lambda f: f is None }})
    r"""An optional key to ensure idempotence if you issue the same PARTIAL refund request more than once."""  
    