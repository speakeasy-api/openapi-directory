<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PortfolioOptimization 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Equal Risk Contributions Portfolio
     * 
     * Compute the asset weights of the equal risk contributions portfolio, optionally subject to:  
     * * Minimum and maximum weights constraints  
     * 
     * References
     *  * [Richard, Jean-Charles and Roncalli, Thierry, Constrained Risk Budgeting Portfolios: Theory, Algorithms, Applications & Puzzles](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3331184)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationEqualRiskContributionsRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationEqualRiskContributionsResponse
     */
	public function postPortfolioOptimizationEqualRiskContributions(
        \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationEqualRiskContributionsRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationEqualRiskContributionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/portfolio/optimization/equal-risk-contributions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationEqualRiskContributionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPortfolioOptimizationEqualRiskContributions200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationEqualRiskContributions200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Equal Sharpe Ratio Contributions Portfolio
     * 
     * Compute the asset weights of the equal Sharpe Ratio contributions portfolio.
     * 
     * References
     *  * [Andreas Steiner, Sharpe Ratio Contribution and Attribution Analysis](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1839166")
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationEqualSharpeRatioContributionsRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationEqualSharpeRatioContributionsResponse
     */
	public function postPortfolioOptimizationEqualSharpeRatioContributions(
        \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationEqualSharpeRatioContributionsRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationEqualSharpeRatioContributionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/portfolio/optimization/equal-sharpe-ratio-contributions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationEqualSharpeRatioContributionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPortfolioOptimizationEqualSharpeRatioContributions200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationEqualSharpeRatioContributions200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Equal Volatility Weighted Portfolio
     * 
     * Compute the asset weights of the equal volatility-weighted portfolio.
     * 
     * References
     *  * [Tristan Froidure, Khalid Jalalzai and Yves Choueifaty, Portfolio Rho-Representativity, International Journal of Theoretical and Applied FinanceVol. 22, No. 07, 1950034 (2019)](https://www.worldscientific.com/doi/10.1142/S0219024919500341)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationEqualVolatilityWeightedRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationEqualVolatilityWeightedResponse
     */
	public function postPortfolioOptimizationEqualVolatilityWeighted(
        \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationEqualVolatilityWeightedRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationEqualVolatilityWeightedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/portfolio/optimization/equal-volatility-weighted');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationEqualVolatilityWeightedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPortfolioOptimizationEqualVolatilityWeighted200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationEqualVolatilityWeighted200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Equal Weighted Portfolio
     * 
     * Compute the asset weights of the equal-weighted portfolio.
     * 
     * References
     *  * [Victor DeMiguel and al., Optimal Versus Naive Diversification: How Inefficient is the 1/N Portfolio Strategy?](https://academic.oup.com/rfs/article-abstract/22/5/1915/1592901?redirectedFrom=fulltext)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationEqualWeightedRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationEqualWeightedResponse
     */
	public function postPortfolioOptimizationEqualWeighted(
        \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationEqualWeightedRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationEqualWeightedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/portfolio/optimization/equal-weighted');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationEqualWeightedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPortfolioOptimizationEqualWeighted200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationEqualWeighted200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Hierarchical Risk Parity Portfolio
     * 
     * Compute the asset weights of the hierarchical risk parity portfolio, optionally subject to:  
     * * Minimum and maximum weights constraints
     * * Minimum and maximum portfolio exposure constraints
     * 
     * References
     *  * [Lopez de Prado, M. (2016). Building diversified portfolios that outperform out-of-sample. Journal of Portfolio Management, 42(4), 59–69](https://jpm.pm-research.com/content/42/4/59)
     *  * [Johann Pfitzinger & Nico Katzke, 2019. A constrained hierarchical risk parity algorithm with cluster-based capital allocation. Working Papers 14/2019, Stellenbosch University, Department of Economics](https://ideas.repec.org/p/sza/wpaper/wpapers328.html)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationHierarchicalRiskParityRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationHierarchicalRiskParityResponse
     */
	public function postPortfolioOptimizationHierarchicalRiskParity(
        \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationHierarchicalRiskParityRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationHierarchicalRiskParityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/portfolio/optimization/hierarchical-risk-parity');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationHierarchicalRiskParityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPortfolioOptimizationHierarchicalRiskParity200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationHierarchicalRiskParity200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Hierarchical Clustering-Based Risk Parity Portfolio
     * 
     * Compute the asset weights of the hierarchical clustering-based risk parity portfolio, optionally subject to:  
     * * Minimum and maximum weights constraints
     * * Minimum and maximum portfolio exposure constraints
     * 
     * References
     *  * [Machine Learning for Asset Management: New Developments and Financial Applications, Emmanuel Jurczenko, Chapter 9, Harald Lohre,Carsten Rother,Kilian Axel Schäfer, Hierarchical Risk Parity: Accounting for Tail Dependencies in Multi-asset Multi-factor Allocations](https://onlinelibrary.wiley.com/doi/10.1002/9781119751182.ch9)
     *  * [Thomas Raffinot, Hierarchical Clustering-Based Asset Allocation, The Journal of Portfolio Management Multi-Asset Special Issue 2018, 44 (2) 89-99](https://jpm.pm-research.com/content/44/2/89.abstract)
     *  * [Raffinot, Thomas, The Hierarchical Equal Risk Contribution Portfolio](https://ssrn.com/abstract=3237540)
     *  * [Johann Pfitzinger & Nico Katzke, 2019. A constrained hierarchical risk parity algorithm with cluster-based capital allocation. Working Papers 14/2019, Stellenbosch University, Department of Economics](https://ideas.repec.org/p/sza/wpaper/wpapers328.html)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedResponse
     */
	public function postPortfolioOptimizationHierarchicalRiskParityClusteringBased(
        \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/portfolio/optimization/hierarchical-risk-parity/clustering-based');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPortfolioOptimizationHierarchicalRiskParityClusteringBased200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationHierarchicalRiskParityClusteringBased200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Inverse Variance Weighted Portfolio
     * 
     * Compute the asset weights of the inverse variance-weighted portfolio.
     * 
     * References
     *  * [Raul Leote de Carvalho and al., Demystifying Equity Risk-Based Strategies: A Simple Alpha Plus Beta Description](https://doi.org/10.3905/jpm.2012.38.3.056)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationInverseVarianceWeightedRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationInverseVarianceWeightedResponse
     */
	public function postPortfolioOptimizationInverseVarianceWeighted(
        \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationInverseVarianceWeightedRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationInverseVarianceWeightedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/portfolio/optimization/inverse-variance-weighted');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationInverseVarianceWeightedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPortfolioOptimizationInverseVarianceWeighted200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationInverseVarianceWeighted200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Inverse Volatility Weighted Portfolio
     * 
     * Compute the asset weights of the inverse volatility-weighted portfolio.
     * 
     * References
     *  * [Raul Leote de Carvalho and al., Demystifying Equity Risk-Based Strategies: A Simple Alpha Plus Beta Description](https://doi.org/10.3905/jpm.2012.38.3.056)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationInverseVolatilityWeightedRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationInverseVolatilityWeightedResponse
     */
	public function postPortfolioOptimizationInverseVolatilityWeighted(
        \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationInverseVolatilityWeightedRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationInverseVolatilityWeightedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/portfolio/optimization/inverse-volatility-weighted');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationInverseVolatilityWeightedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPortfolioOptimizationInverseVolatilityWeighted200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationInverseVolatilityWeighted200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Market Capitalization Weighted Portfolio
     * 
     * Compute the asset weights of the market capitalization-weighted portfolio.
     * 
     * References
     *  * [Wikipedia, Capitalization-weighted Index](https://en.wikipedia.org/wiki/Capitalization-weighted_index)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMarketCapitalizationWeightedRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMarketCapitalizationWeightedResponse
     */
	public function postPortfolioOptimizationMarketCapitalizationWeighted(
        \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMarketCapitalizationWeightedRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMarketCapitalizationWeightedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/portfolio/optimization/market-capitalization-weighted');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMarketCapitalizationWeightedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPortfolioOptimizationMarketCapitalizationWeighted200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMarketCapitalizationWeighted200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Maximum Decorrelation Portfolio
     * 
     * Compute the asset weights of the maximum decorrelation portfolio, optionally subject to:  
     * * Minimum and maximum weights constraints
     * * Maximum group weights constraints
     * * Minimum and maximum portfolio exposure constraints
     * 
     * References
     *  * [F. Goltz, S. Sivasubramanian, Scientific Beta Maximum Decorrelation Indices](http://www.scientificbeta.com/download/file/scientific-beta-max-decorrelation-indices)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumDecorrelationRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumDecorrelationResponse
     */
	public function postPortfolioOptimizationMaximumDecorrelation(
        \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumDecorrelationRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumDecorrelationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/portfolio/optimization/maximum-decorrelation');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumDecorrelationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPortfolioOptimizationMaximumDecorrelation200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumDecorrelation200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Maximum Ulcer Performance Index Portfolio
     * 
     * Compute the asset weights of the maximum Ulcer Performance Index portfolio, optionally subject to:  
     * * Minimum and maximum weights constraints
     * * Maximum group weights constraints
     * * Minimum and maximum portfolio exposure constraints
     * 
     * Notes:  
     * * This endpoint will return an error if the maximum Ulcer Performance Index portfolio has a negative Ulcer Performance Index
     * 
     * References
     *  * [Peter G. Martin, Ulcer Index, An Alternative Approach to the Measurement of Investment Risk & Risk-Adjusted Performance](http://www.tangotools.com/ui/ui.htm)
     *  * [A. Chekhlov, S. Uryasev, M. Zabarankin, Portfolio Optimization with Drawdown Constraints, Supply Chain and Finance, p 209-228](https://doi.org/10.1142/9789812562586_0013)
     *  * [A. Chekhlov, S. Uryasev, M. Zabarankin, Drawdown Measure in Portfolio Optimization, International Journal of Theoretical and Applied FinanceVol. 08, No. 01, pp. 13-58 (2005)](https://www.worldscientific.com/doi/10.1142/S0219024905002767)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumUlcerPerformanceIndexRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumUlcerPerformanceIndexResponse
     */
	public function postPortfolioOptimizationMaximumUlcerPerformanceIndex(
        \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumUlcerPerformanceIndexRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumUlcerPerformanceIndexResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/portfolio/optimization/maximum-ulcer-performance-index');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumUlcerPerformanceIndexResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPortfolioOptimizationMaximumUlcerPerformanceIndex200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumUlcerPerformanceIndex200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Minimum Correlation Portfolio
     * 
     * Compute the asset weights of the (heuristic) minimum correlation portfolio, which is a portfolio built using the Minimum Correlation Algorithm discovered by [David Varadi](https://cssanalytics.wordpress.com/).
     * 
     * References
     *  * [CSSA, Minimum Correlation Algorithm Paper Release](https://cssanalytics.wordpress.com/2012/09/21/minimum-correlation-algorithm-paper-release/)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumCorrelationRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumCorrelationResponse
     */
	public function postPortfolioOptimizationMinimumCorrelation(
        \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumCorrelationRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumCorrelationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/portfolio/optimization/minimum-correlation');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumCorrelationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPortfolioOptimizationMinimumCorrelation200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumCorrelation200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Minimum Ulcer Index Portfolio
     * 
     * Compute the asset weights of the minimum Ulcer Index portfolio, optionally subject to:  
     * * Minimum and maximum weights constraints
     * * Maximum group weights constraints
     * * Minimum and maximum portfolio exposure constraints
     * 
     * References
     *  * [Peter G. Martin, Ulcer Index, An Alternative Approach to the Measurement of Investment Risk & Risk-Adjusted Performance](http://www.tangotools.com/ui/ui.htm)
     *  * [A. Chekhlov, S. Uryasev, M. Zabarankin, Portfolio Optimization with Drawdown Constraints, Supply Chain and Finance, p 209-228](https://doi.org/10.1142/9789812562586_0013)
     *  * [A. Chekhlov, S. Uryasev, M. Zabarankin, Drawdown Measure in Portfolio Optimization, International Journal of Theoretical and Applied FinanceVol. 08, No. 01, pp. 13-58 (2005)](https://www.worldscientific.com/doi/10.1142/S0219024905002767)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumUlcerIndexRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumUlcerIndexResponse
     */
	public function postPortfolioOptimizationMinimumUlcerIndex(
        \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumUlcerIndexRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumUlcerIndexResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/portfolio/optimization/minimum-ulcer-index');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumUlcerIndexResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPortfolioOptimizationMinimumUlcerIndex200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumUlcerIndex200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Most Diversified Portfolio
     * 
     * Compute the asset weights of the most diversified portfolio, optionally subject to:  
     * * Minimum and maximum weights constraints
     * * Maximum group weights constraints
     * * Minimum and maximum portfolio exposure constraints
     * 
     * References
     *  * [Yves Choueifaty and Yves Coignard, Toward Maximum Diversification, The Journal of Portfolio Management Fall 2008, 35 (1) 40-51](https://doi.org/10.3905/JPM.2008.35.1.40)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMostDiversifiedRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMostDiversifiedResponse
     */
	public function postPortfolioOptimizationMostDiversified(
        \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMostDiversifiedRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMostDiversifiedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/portfolio/optimization/most-diversified');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMostDiversifiedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPortfolioOptimizationMostDiversified200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMostDiversified200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}