// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// QueryVmwareHostSnappableStatusEnum - Requests additional data about VMware Hosts based on the specified query value.
type QueryVmwareHostSnappableStatusEnum string

const (
	QueryVmwareHostSnappableStatusEnumProtectable QueryVmwareHostSnappableStatusEnum = "Protectable"
)

func (e QueryVmwareHostSnappableStatusEnum) ToPointer() *QueryVmwareHostSnappableStatusEnum {
	return &e
}

func (e *QueryVmwareHostSnappableStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Protectable":
		*e = QueryVmwareHostSnappableStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryVmwareHostSnappableStatusEnum: %v", v)
	}
}

type QueryVmwareHostRequest struct {
	// Filter by ID of Compute Cluster.
	ComputeClusterID *string `queryParam:"style=form,explode=true,name=compute_cluster_id"`
	// ID of the Primary cluster.
	PrimaryClusterID *string `queryParam:"style=form,explode=true,name=primary_cluster_id"`
	// Requests additional data about VMware Hosts based on the specified query value.
	SnappableStatus *QueryVmwareHostSnappableStatusEnum `queryParam:"style=form,explode=true,name=snappable_status"`
}

type QueryVmwareHostResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// List of VMware host summaries.
	VmwareHostSummaryListResponse *shared.VmwareHostSummaryListResponse
}
