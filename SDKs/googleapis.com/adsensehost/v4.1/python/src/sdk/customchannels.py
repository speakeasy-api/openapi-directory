"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Customchannels:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def adsensehost_customchannels_delete(self, request: operations.AdsensehostCustomchannelsDeleteRequest, security: operations.AdsensehostCustomchannelsDeleteSecurity) -> operations.AdsensehostCustomchannelsDeleteResponse:
        r"""Delete a specific custom channel from the host AdSense account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdsensehostCustomchannelsDeleteRequest, base_url, '/adclients/{adClientId}/customchannels/{customChannelId}', request)
        
        query_params = utils.get_query_params(operations.AdsensehostCustomchannelsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdsensehostCustomchannelsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomChannel])
                res.custom_channel = out

        return res

    def adsensehost_customchannels_get(self, request: operations.AdsensehostCustomchannelsGetRequest, security: operations.AdsensehostCustomchannelsGetSecurity) -> operations.AdsensehostCustomchannelsGetResponse:
        r"""Get a specific custom channel from the host AdSense account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdsensehostCustomchannelsGetRequest, base_url, '/adclients/{adClientId}/customchannels/{customChannelId}', request)
        
        query_params = utils.get_query_params(operations.AdsensehostCustomchannelsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdsensehostCustomchannelsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomChannel])
                res.custom_channel = out

        return res

    def adsensehost_customchannels_insert(self, request: operations.AdsensehostCustomchannelsInsertRequest, security: operations.AdsensehostCustomchannelsInsertSecurity) -> operations.AdsensehostCustomchannelsInsertResponse:
        r"""Add a new custom channel to the host AdSense account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdsensehostCustomchannelsInsertRequest, base_url, '/adclients/{adClientId}/customchannels', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "custom_channel", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AdsensehostCustomchannelsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdsensehostCustomchannelsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomChannel])
                res.custom_channel = out

        return res

    def adsensehost_customchannels_list(self, request: operations.AdsensehostCustomchannelsListRequest, security: operations.AdsensehostCustomchannelsListSecurity) -> operations.AdsensehostCustomchannelsListResponse:
        r"""List all host custom channels in this AdSense account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdsensehostCustomchannelsListRequest, base_url, '/adclients/{adClientId}/customchannels', request)
        
        query_params = utils.get_query_params(operations.AdsensehostCustomchannelsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdsensehostCustomchannelsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomChannels])
                res.custom_channels = out

        return res

    def adsensehost_customchannels_patch(self, request: operations.AdsensehostCustomchannelsPatchRequest, security: operations.AdsensehostCustomchannelsPatchSecurity) -> operations.AdsensehostCustomchannelsPatchResponse:
        r"""Update a custom channel in the host AdSense account. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdsensehostCustomchannelsPatchRequest, base_url, '/adclients/{adClientId}/customchannels', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "custom_channel", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AdsensehostCustomchannelsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdsensehostCustomchannelsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomChannel])
                res.custom_channel = out

        return res

    def adsensehost_customchannels_update(self, request: operations.AdsensehostCustomchannelsUpdateRequest, security: operations.AdsensehostCustomchannelsUpdateSecurity) -> operations.AdsensehostCustomchannelsUpdateResponse:
        r"""Update a custom channel in the host AdSense account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdsensehostCustomchannelsUpdateRequest, base_url, '/adclients/{adClientId}/customchannels', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "custom_channel", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AdsensehostCustomchannelsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdsensehostCustomchannelsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomChannel])
                res.custom_channel = out

        return res

    