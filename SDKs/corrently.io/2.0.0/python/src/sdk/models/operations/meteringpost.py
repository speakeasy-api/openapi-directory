"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MeteringPostRequestBody:
    
    one_8_0: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('1.8.0'), 'exclude': lambda f: f is None }})
    r"""Meter Reading (prefered in Wh)"""  
    account: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account'), 'exclude': lambda f: f is None }})
    r"""Stromkonto account (address) associated with this metering."""  
    energy: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('energy'), 'exclude': lambda f: f is None }})
    r"""Alias for 1.8.0"""  
    secret: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secret'), 'exclude': lambda f: f is None }})
    r"""Some private password you might choose on first update. However you need to use the same secret on every further posts."""  
    value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Alias for 1.8.0"""  
    zip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip'), 'exclude': lambda f: f is None }})
    r"""Zipcode (Postleitzahl) of metered location"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MeteringPost200ApplicationJSON:
    r"""Success"""
    
    processing_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_processingTime'), 'exclude': lambda f: f is None }})
    r"""Time this reading got imported into consensus (e.q. signed timestamp)."""  
    one_8_0: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('1.8.0'), 'exclude': lambda f: f is None }})
    r"""Reading as provided as input in Wh"""  
    one_8_1: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('1.8.1'), 'exclude': lambda f: f is None }})
    r"""Green energy calculated using Green Power Index (GrünstromIndex) in Wh"""  
    one_8_2: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('1.8.2'), 'exclude': lambda f: f is None }})
    r"""Grey energy calculated using Green Power Index (GrünstromIndex) in Wh"""  
    account: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account'), 'exclude': lambda f: f is None }})
    r"""Stromkonto/Metering address allocated (this is not the MELOID!)"""  
    co2_g_oekostrom: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('co2_g_oekostrom'), 'exclude': lambda f: f is None }})
    r"""CO2 Emission of metered energy in a green energy mix (e.q. Ökostromtarif)"""  
    co2_g_standard: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('co2_g_standard'), 'exclude': lambda f: f is None }})
    r"""CO2 Emission of metered energy in a standard mix"""  
    time_stamp: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeStamp'), 'exclude': lambda f: f is None }})
    r"""API Consensus time this reading was fully received"""  
    

@dataclasses.dataclass
class MeteringPostResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    metering_post_200_application_json_object: Optional[MeteringPost200ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    