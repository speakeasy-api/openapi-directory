/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { PositionFilteringEnum } from "./positionfilteringenum";
import { Expose, Transform } from "class-transformer";

/**
 * Always returns <code>RequestBasedUsage</code>.Deprecated. Always returns RequestBasedUsage.
 */
export enum DescribeTrackerResponsePricingPlanEnum {
  RequestBasedUsage = "RequestBasedUsage",
  MobileAssetTracking = "MobileAssetTracking",
  MobileAssetManagement = "MobileAssetManagement",
}

/**
 * Success
 */
export class DescribeTrackerResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "CreateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createTime: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description: string;

  @SpeakeasyMetadata()
  @Expose({ name: "KmsKeyId" })
  kmsKeyId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "PositionFiltering" })
  positionFiltering?: PositionFilteringEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "PricingPlan" })
  pricingPlan?: DescribeTrackerResponsePricingPlanEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "PricingPlanDataSource" })
  pricingPlanDataSource?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Tags" })
  tags?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "TrackerArn" })
  trackerArn: string;

  @SpeakeasyMetadata()
  @Expose({ name: "TrackerName" })
  trackerName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "UpdateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updateTime: Date;
}
