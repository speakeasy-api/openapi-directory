"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import filefilekeys as shared_filefilekeys
from ..shared import range as shared_range
from ..shared import useridfileiditem as shared_useridfileiditem
from ..shared import useruserpublickey as shared_useruserpublickey
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MissingKeysResponse:
    r"""Missing keys information"""
    
    files: Optional[list[shared_filefilekeys.FileFileKeys]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('files'), 'exclude': lambda f: f is None }})
    r"""List of file keys"""  
    items: Optional[list[shared_useridfileiditem.UserIDFileIDItem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('items'), 'exclude': lambda f: f is None }})
    r"""List of user ID and file ID mappings"""  
    range: Optional[shared_range.Range] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('range'), 'exclude': lambda f: f is None }})
    r"""Range information"""  
    users: Optional[list[shared_useruserpublickey.UserUserPublicKey]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('users'), 'exclude': lambda f: f is None }})
    r"""List of user public keys"""  
    