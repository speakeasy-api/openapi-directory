"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETModifyVpcAttributeActionEnum(str, Enum):
    MODIFY_VPC_ATTRIBUTE = 'ModifyVpcAttribute'


@dataclasses.dataclass
class GETModifyVpcAttributeEnableDNSHostnames:
    r"""Describes a value for a resource attribute that is a Boolean value."""
    
    value: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Value' }})  
    

@dataclasses.dataclass
class GETModifyVpcAttributeEnableDNSSupport:
    r"""Describes a value for a resource attribute that is a Boolean value."""
    
    value: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Value' }})  
    

@dataclasses.dataclass
class GETModifyVpcAttributeEnableNetworkAddressUsageMetrics:
    r"""Describes a value for a resource attribute that is a Boolean value."""
    
    value: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Value' }})  
    
class GETModifyVpcAttributeVersionEnum(str, Enum):
    TWO_THOUSAND_AND_SIXTEEN_11_15 = '2016-11-15'


@dataclasses.dataclass
class GETModifyVpcAttributeRequest:
    
    action: GETModifyVpcAttributeActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    version: GETModifyVpcAttributeVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    vpc_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'VpcId', 'style': 'form', 'explode': True }})
    r"""The ID of the VPC."""  
    enable_dns_hostnames: Optional[GETModifyVpcAttributeEnableDNSHostnames] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'EnableDnsHostnames', 'style': 'form', 'explode': True }})
    r"""<p>Indicates whether the instances launched in the VPC get DNS hostnames. If enabled, instances in the VPC get DNS hostnames; otherwise, they do not.</p> <p>You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute. You can only enable DNS hostnames if you've enabled DNS support.</p>"""  
    enable_dns_support: Optional[GETModifyVpcAttributeEnableDNSSupport] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'EnableDnsSupport', 'style': 'form', 'explode': True }})
    r"""<p>Indicates whether the DNS resolution is supported for the VPC. If enabled, queries to the Amazon provided DNS server at the 169.254.169.253 IP address, or the reserved IP address at the base of the VPC network range \\"plus two\\" succeed. If disabled, the Amazon provided DNS service in the VPC that resolves public DNS hostnames to IP addresses is not enabled.</p> <p>You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute.</p>"""  
    enable_network_address_usage_metrics: Optional[GETModifyVpcAttributeEnableNetworkAddressUsageMetrics] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'EnableNetworkAddressUsageMetrics', 'style': 'form', 'explode': True }})
    r"""Indicates whether Network Address Usage metrics are enabled for your VPC."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETModifyVpcAttributeResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    