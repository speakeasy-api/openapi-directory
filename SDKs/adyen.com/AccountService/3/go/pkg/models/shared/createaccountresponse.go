// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreateAccountResponseStatusEnum - The status of the account.
// >Permitted values: `Active`.
type CreateAccountResponseStatusEnum string

const (
	CreateAccountResponseStatusEnumActive    CreateAccountResponseStatusEnum = "Active"
	CreateAccountResponseStatusEnumClosed    CreateAccountResponseStatusEnum = "Closed"
	CreateAccountResponseStatusEnumInactive  CreateAccountResponseStatusEnum = "Inactive"
	CreateAccountResponseStatusEnumSuspended CreateAccountResponseStatusEnum = "Suspended"
)

func (e CreateAccountResponseStatusEnum) ToPointer() *CreateAccountResponseStatusEnum {
	return &e
}

func (e *CreateAccountResponseStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Active":
		fallthrough
	case "Closed":
		fallthrough
	case "Inactive":
		fallthrough
	case "Suspended":
		*e = CreateAccountResponseStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAccountResponseStatusEnum: %v", v)
	}
}

// CreateAccountResponse - OK - the request has succeeded.
type CreateAccountResponse struct {
	// The code of the new account.
	AccountCode *string `json:"accountCode,omitempty"`
	// The code of the account holder.
	AccountHolderCode *string                 `json:"accountHolderCode,omitempty"`
	PayoutSchedule    *PayoutScheduleResponse `json:"payoutSchedule,omitempty"`
	// The reference of a request. Can be used to uniquely identify the request.
	PspReference *string `json:"pspReference,omitempty"`
	// The result code.
	ResultCode *string `json:"resultCode,omitempty"`
	// The status of the account.
	// >Permitted values: `Active`.
	Status *CreateAccountResponseStatusEnum `json:"status,omitempty"`
	// Indicates whether the request is processed asynchronously. Depending on the request's platform settings, the following scenarios may be applied:
	// * **true**: The request is queued and will be executed when the providing service is available in the order in which the requests are received.
	// * **false**: The processing of the request is immediately attempted; it may result in an error if the providing service is unavailable.
	SubmittedAsync *bool `json:"submittedAsync,omitempty"`
}
