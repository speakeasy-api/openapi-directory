"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from typing import Optional


@dataclasses.dataclass
class GroupCallParameters:
    r"""POST parameters"""
    
    answer_url: str = dataclasses.field(metadata={'form': { 'field_name': 'AnswerUrl' }})
    r"""Fully qualified URL which will provide the RestXML once the call connects"""  
    delimiter: str = dataclasses.field(metadata={'form': { 'field_name': 'Delimiter' }})
    r"""Any character, except `/` and `,`, which will be used as a separator within several parameters"""  
    from_: str = dataclasses.field(metadata={'form': { 'field_name': 'From' }})
    r"""Phone number to be used as Caller ID"""  
    gateways: str = dataclasses.field(metadata={'form': { 'field_name': 'Gateways' }})
    r"""Comma separated FreeSWITCH gateway strings. When multiple gateways are specified, they will be tried sequentially (failover)"""  
    to: str = dataclasses.field(metadata={'form': { 'field_name': 'To' }})
    r"""Phone number to be called"""  
    caller_name: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'CallerName' }})
    r"""Caller Name to be set for the call"""  
    confirm_key: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ConfirmKey' }})
    r"""DTMF tone the called party must send to accept the call"""  
    confirm_sound: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ConfirmSound' }})
    r"""Remote URL to fetch with POST HTTP request which must return a RestXML with Play, Wait and/or Speak Elements only (all others are ignored). This RESTXML is played to the called party when he answered"""  
    core_uuid: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'CoreUUID' }})
    r"""Core UUID of the desired FreeSWITCH instance (an Eqivo extension)"""  
    extra_dial_string: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ExtraDialString' }})
    r"""Additional [channel variables](https://freeswitch.org/confluence/display/FREESWITCH/Channel+Variables) to be added to the originate FreeSWITCH API call."""  
    gateway_codecs: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'GatewayCodecs' }})
    r"""List of codec(s) to be used for each gateway. Enclose codec groups in single quotes"""  
    gateway_retries: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'GatewayRetries' }})
    r"""List of maximum retry counts for each gateway"""  
    gateway_timeouts: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'GatewayTimeouts' }})
    r"""List of maximum timeout amounts (in seconds) for each gateway"""  
    hangup_on_ring: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'HangupOnRing' }})
    r"""Schedules the call's hangup at a given time offset (in seconds) after the destination starts ringing"""  
    hangup_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'HangupUrl' }})
    r"""Fully qualified URL to which the call hangup notification will be POSTed. `HangupCause` is added to the usual call [call notification parameters](#/components/schemas/CallNotificationParameters)"""  
    reject_causes: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'RejectCauses' }})
    r"""Comma separated reject causes"""  
    ring_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'RingUrl' }})
    r"""Fully qualified URL to which the call ringing notification will be POSTed. `RequestUUID` and `CallUUID` is added to the usual [call notification parameters](#/components/schemas/CallNotificationParameters)"""  
    send_digits: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'SendDigits' }})
    r"""DTMF tones to be sent when the call is answered. Each occurrence of `w` implies a 0.5 seconds delay whereas `W` will apply a whole second delay. To alter the tone duration (by default, 2000ms), append `@` and the length in milliseconds at the end of the string"""  
    send_on_preanswer: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'SendOnPreanswer' }})
    r"""When set to `true`, DTMF tones will be sent as early media rather than when the call is answered"""  
    time_limit: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'TimeLimit' }})
    r"""Schedules the call's hangup at a given time offset (in seconds) after the call is answered"""  
    