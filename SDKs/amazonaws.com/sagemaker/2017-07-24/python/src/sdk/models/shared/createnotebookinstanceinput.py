"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import directinternetaccess_enum as shared_directinternetaccess_enum
from ..shared import instancemetadataserviceconfiguration as shared_instancemetadataserviceconfiguration
from ..shared import instancetype_enum as shared_instancetype_enum
from ..shared import notebookinstanceacceleratortype_enum as shared_notebookinstanceacceleratortype_enum
from ..shared import rootaccess_enum as shared_rootaccess_enum
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNotebookInstanceInput:
    
    instance_type: shared_instancetype_enum.InstanceTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceType') }})  
    notebook_instance_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NotebookInstanceName') }})  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleArn') }})  
    accelerator_types: Optional[list[shared_notebookinstanceacceleratortype_enum.NotebookInstanceAcceleratorTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AcceleratorTypes'), 'exclude': lambda f: f is None }})  
    additional_code_repositories: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdditionalCodeRepositories'), 'exclude': lambda f: f is None }})  
    default_code_repository: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DefaultCodeRepository'), 'exclude': lambda f: f is None }})  
    direct_internet_access: Optional[shared_directinternetaccess_enum.DirectInternetAccessEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DirectInternetAccess'), 'exclude': lambda f: f is None }})  
    instance_metadata_service_configuration: Optional[shared_instancemetadataserviceconfiguration.InstanceMetadataServiceConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceMetadataServiceConfiguration'), 'exclude': lambda f: f is None }})  
    kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KmsKeyId'), 'exclude': lambda f: f is None }})  
    lifecycle_config_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LifecycleConfigName'), 'exclude': lambda f: f is None }})  
    platform_identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlatformIdentifier'), 'exclude': lambda f: f is None }})  
    root_access: Optional[shared_rootaccess_enum.RootAccessEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RootAccess'), 'exclude': lambda f: f is None }})  
    security_group_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityGroupIds'), 'exclude': lambda f: f is None }})  
    subnet_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubnetId'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    volume_size_in_gb: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VolumeSizeInGB'), 'exclude': lambda f: f is None }})  
    