/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class NetworkConnection {
    /**
     * Local IP address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("localIpAddress")
    public String localIpAddress;
    public NetworkConnection withLocalIpAddress(String localIpAddress) {
        this.localIpAddress = localIpAddress;
        return this;
    }
    
    /**
     * Local port.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("localPort")
    public Integer localPort;
    public NetworkConnection withLocalPort(Integer localPort) {
        this.localPort = localPort;
        return this;
    }
    
    /**
     * Process ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pid")
    public String pid;
    public NetworkConnection withPid(String pid) {
        this.pid = pid;
        return this;
    }
    
    /**
     * Process or service name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("processName")
    public String processName;
    public NetworkConnection withProcessName(String processName) {
        this.processName = processName;
        return this;
    }
    
    /**
     * Connection protocol (e.g. TCP/UDP).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("protocol")
    public String protocol;
    public NetworkConnection withProtocol(String protocol) {
        this.protocol = protocol;
        return this;
    }
    
    /**
     * Remote IP address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remoteIpAddress")
    public String remoteIpAddress;
    public NetworkConnection withRemoteIpAddress(String remoteIpAddress) {
        this.remoteIpAddress = remoteIpAddress;
        return this;
    }
    
    /**
     * Remote port.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remotePort")
    public Integer remotePort;
    public NetworkConnection withRemotePort(Integer remotePort) {
        this.remotePort = remotePort;
        return this;
    }
    
    /**
     * Connection state (e.g. CONNECTED).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public String state;
    public NetworkConnection withState(String state) {
        this.state = state;
        return this;
    }
    
}
