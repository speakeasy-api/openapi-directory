// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type RitinSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type RitinRequestBodyCertificateParameters struct {
	// Reference No.
	RefNo string `json:"RefNo"`
	// Token No.
	TokenNo string `json:"TokenNo"`
}

// RitinRequestBodyFormatEnum - The format of the certificate in response.
type RitinRequestBodyFormatEnum string

const (
	RitinRequestBodyFormatEnumPdf RitinRequestBodyFormatEnum = "pdf"
)

func (e RitinRequestBodyFormatEnum) ToPointer() *RitinRequestBodyFormatEnum {
	return &e
}

func (e *RitinRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = RitinRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RitinRequestBodyFormatEnum: %v", v)
	}
}

// RitinRequestBody - Request format
type RitinRequestBody struct {
	CertificateParameters *RitinRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format RitinRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Ritin504ApplicationJSONErrorEnum string

const (
	Ritin504ApplicationJSONErrorEnumGatewayTimeout Ritin504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Ritin504ApplicationJSONErrorEnum) ToPointer() *Ritin504ApplicationJSONErrorEnum {
	return &e
}

func (e *Ritin504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Ritin504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ritin504ApplicationJSONErrorEnum: %v", v)
	}
}

type Ritin504ApplicationJSONErrorDescriptionEnum string

const (
	Ritin504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Ritin504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Ritin504ApplicationJSONErrorDescriptionEnum) ToPointer() *Ritin504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ritin504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Ritin504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ritin504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ritin504ApplicationJSON - Gateway timeout
type Ritin504ApplicationJSON struct {
	Error            *Ritin504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ritin504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ritin503ApplicationJSONErrorEnum string

const (
	Ritin503ApplicationJSONErrorEnumServiceUnavailable Ritin503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Ritin503ApplicationJSONErrorEnum) ToPointer() *Ritin503ApplicationJSONErrorEnum {
	return &e
}

func (e *Ritin503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Ritin503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ritin503ApplicationJSONErrorEnum: %v", v)
	}
}

type Ritin503ApplicationJSONErrorDescriptionEnum string

const (
	Ritin503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Ritin503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Ritin503ApplicationJSONErrorDescriptionEnum) ToPointer() *Ritin503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ritin503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Ritin503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ritin503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ritin503ApplicationJSON - Service unavailable
type Ritin503ApplicationJSON struct {
	Error            *Ritin503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ritin503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ritin502ApplicationJSONErrorEnum string

const (
	Ritin502ApplicationJSONErrorEnumBadGatewy Ritin502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Ritin502ApplicationJSONErrorEnum) ToPointer() *Ritin502ApplicationJSONErrorEnum {
	return &e
}

func (e *Ritin502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Ritin502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ritin502ApplicationJSONErrorEnum: %v", v)
	}
}

type Ritin502ApplicationJSONErrorDescriptionEnum string

const (
	Ritin502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Ritin502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Ritin502ApplicationJSONErrorDescriptionEnum) ToPointer() *Ritin502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ritin502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Ritin502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ritin502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ritin502ApplicationJSON - Bad gateway
type Ritin502ApplicationJSON struct {
	Error            *Ritin502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ritin502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ritin500ApplicationJSONErrorEnum string

const (
	Ritin500ApplicationJSONErrorEnumInternalServerError Ritin500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Ritin500ApplicationJSONErrorEnum) ToPointer() *Ritin500ApplicationJSONErrorEnum {
	return &e
}

func (e *Ritin500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Ritin500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ritin500ApplicationJSONErrorEnum: %v", v)
	}
}

type Ritin500ApplicationJSONErrorDescriptionEnum string

const (
	Ritin500ApplicationJSONErrorDescriptionEnumInternalServerError Ritin500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Ritin500ApplicationJSONErrorDescriptionEnum) ToPointer() *Ritin500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ritin500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Ritin500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ritin500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ritin500ApplicationJSON - Internal server error
type Ritin500ApplicationJSON struct {
	Error            *Ritin500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ritin500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ritin404ApplicationJSONErrorEnum string

const (
	Ritin404ApplicationJSONErrorEnumRecordNotFound Ritin404ApplicationJSONErrorEnum = "record_not_found"
	Ritin404ApplicationJSONErrorEnumURLNotFound    Ritin404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Ritin404ApplicationJSONErrorEnum) ToPointer() *Ritin404ApplicationJSONErrorEnum {
	return &e
}

func (e *Ritin404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Ritin404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ritin404ApplicationJSONErrorEnum: %v", v)
	}
}

type Ritin404ApplicationJSONErrorDescriptionEnum string

const (
	Ritin404ApplicationJSONErrorDescriptionEnumNoRecordFound               Ritin404ApplicationJSONErrorDescriptionEnum = "No record found"
	Ritin404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Ritin404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Ritin404ApplicationJSONErrorDescriptionEnum) ToPointer() *Ritin404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ritin404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Ritin404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ritin404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ritin404ApplicationJSON - No record found
type Ritin404ApplicationJSON struct {
	Error            *Ritin404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ritin404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ritin401ApplicationJSONErrorEnum string

const (
	Ritin401ApplicationJSONErrorEnumInvalidAuthentication Ritin401ApplicationJSONErrorEnum = "invalid_authentication"
	Ritin401ApplicationJSONErrorEnumInvalidAuthorization  Ritin401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Ritin401ApplicationJSONErrorEnum) ToPointer() *Ritin401ApplicationJSONErrorEnum {
	return &e
}

func (e *Ritin401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Ritin401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ritin401ApplicationJSONErrorEnum: %v", v)
	}
}

type Ritin401ApplicationJSONErrorDescriptionEnum string

const (
	Ritin401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Ritin401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Ritin401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Ritin401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Ritin401ApplicationJSONErrorDescriptionEnum) ToPointer() *Ritin401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ritin401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Ritin401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ritin401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ritin401ApplicationJSON - Unauthorized access
type Ritin401ApplicationJSON struct {
	Error            *Ritin401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ritin401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ritin400ApplicationJSONErrorEnum string

const (
	Ritin400ApplicationJSONErrorEnumMissingParameter Ritin400ApplicationJSONErrorEnum = "missing_parameter"
	Ritin400ApplicationJSONErrorEnumInvalidParameter Ritin400ApplicationJSONErrorEnum = "invalid_parameter"
	Ritin400ApplicationJSONErrorEnumInvalidFormat    Ritin400ApplicationJSONErrorEnum = "invalid_format"
	Ritin400ApplicationJSONErrorEnumInvalidTxnid     Ritin400ApplicationJSONErrorEnum = "invalid_txnid"
	Ritin400ApplicationJSONErrorEnumInvalidConsentid Ritin400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Ritin400ApplicationJSONErrorEnum) ToPointer() *Ritin400ApplicationJSONErrorEnum {
	return &e
}

func (e *Ritin400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Ritin400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ritin400ApplicationJSONErrorEnum: %v", v)
	}
}

type Ritin400ApplicationJSONErrorDescriptionEnum string

const (
	Ritin400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Ritin400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Ritin400ApplicationJSONErrorDescriptionEnumBadRequest                              Ritin400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Ritin400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Ritin400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Ritin400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Ritin400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Ritin400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Ritin400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Ritin400ApplicationJSONErrorDescriptionEnum) ToPointer() *Ritin400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ritin400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Ritin400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ritin400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ritin400ApplicationJSON - Bad request
type Ritin400ApplicationJSON struct {
	Error            *Ritin400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ritin400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type RitinResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Ritin400ApplicationJSONObject *Ritin400ApplicationJSON
	// Unauthorized access
	Ritin401ApplicationJSONObject *Ritin401ApplicationJSON
	// No record found
	Ritin404ApplicationJSONObject *Ritin404ApplicationJSON
	// Internal server error
	Ritin500ApplicationJSONObject *Ritin500ApplicationJSON
	// Bad gateway
	Ritin502ApplicationJSONObject *Ritin502ApplicationJSON
	// Service unavailable
	Ritin503ApplicationJSONObject *Ritin503ApplicationJSON
	// Gateway timeout
	Ritin504ApplicationJSONObject *Ritin504ApplicationJSON
}
