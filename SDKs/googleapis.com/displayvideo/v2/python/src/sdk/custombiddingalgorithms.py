"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class CustomBiddingAlgorithms:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def displayvideo_custom_bidding_algorithms_create(self, request: operations.DisplayvideoCustomBiddingAlgorithmsCreateRequest, security: operations.DisplayvideoCustomBiddingAlgorithmsCreateSecurity) -> operations.DisplayvideoCustomBiddingAlgorithmsCreateResponse:
        r"""Creates a new custom bidding algorithm. Returns the newly created custom bidding algorithm if successful."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/customBiddingAlgorithms'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "custom_bidding_algorithm_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DisplayvideoCustomBiddingAlgorithmsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoCustomBiddingAlgorithmsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomBiddingAlgorithm])
                res.custom_bidding_algorithm = out

        return res

    def displayvideo_custom_bidding_algorithms_get(self, request: operations.DisplayvideoCustomBiddingAlgorithmsGetRequest, security: operations.DisplayvideoCustomBiddingAlgorithmsGetSecurity) -> operations.DisplayvideoCustomBiddingAlgorithmsGetResponse:
        r"""Gets a custom bidding algorithm."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoCustomBiddingAlgorithmsGetRequest, base_url, '/v2/customBiddingAlgorithms/{customBiddingAlgorithmId}', request)
        
        query_params = utils.get_query_params(operations.DisplayvideoCustomBiddingAlgorithmsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoCustomBiddingAlgorithmsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomBiddingAlgorithm])
                res.custom_bidding_algorithm = out

        return res

    def displayvideo_custom_bidding_algorithms_list(self, request: operations.DisplayvideoCustomBiddingAlgorithmsListRequest, security: operations.DisplayvideoCustomBiddingAlgorithmsListSecurity) -> operations.DisplayvideoCustomBiddingAlgorithmsListResponse:
        r"""Lists custom bidding algorithms that are accessible to the current user and can be used in bidding stratgies. The order is defined by the order_by parameter."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/customBiddingAlgorithms'
        
        query_params = utils.get_query_params(operations.DisplayvideoCustomBiddingAlgorithmsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoCustomBiddingAlgorithmsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListCustomBiddingAlgorithmsResponse])
                res.list_custom_bidding_algorithms_response = out

        return res

    def displayvideo_custom_bidding_algorithms_patch(self, request: operations.DisplayvideoCustomBiddingAlgorithmsPatchRequest, security: operations.DisplayvideoCustomBiddingAlgorithmsPatchSecurity) -> operations.DisplayvideoCustomBiddingAlgorithmsPatchResponse:
        r"""Updates an existing custom bidding algorithm. Returns the updated custom bidding algorithm if successful."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoCustomBiddingAlgorithmsPatchRequest, base_url, '/v2/customBiddingAlgorithms/{customBiddingAlgorithmId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "custom_bidding_algorithm_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DisplayvideoCustomBiddingAlgorithmsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoCustomBiddingAlgorithmsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomBiddingAlgorithm])
                res.custom_bidding_algorithm = out

        return res

    def displayvideo_custom_bidding_algorithms_scripts_create(self, request: operations.DisplayvideoCustomBiddingAlgorithmsScriptsCreateRequest, security: operations.DisplayvideoCustomBiddingAlgorithmsScriptsCreateSecurity) -> operations.DisplayvideoCustomBiddingAlgorithmsScriptsCreateResponse:
        r"""Creates a new custom bidding script. Returns the newly created script if successful."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoCustomBiddingAlgorithmsScriptsCreateRequest, base_url, '/v2/customBiddingAlgorithms/{customBiddingAlgorithmId}/scripts', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "custom_bidding_script_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DisplayvideoCustomBiddingAlgorithmsScriptsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoCustomBiddingAlgorithmsScriptsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomBiddingScript])
                res.custom_bidding_script = out

        return res

    def displayvideo_custom_bidding_algorithms_scripts_get(self, request: operations.DisplayvideoCustomBiddingAlgorithmsScriptsGetRequest, security: operations.DisplayvideoCustomBiddingAlgorithmsScriptsGetSecurity) -> operations.DisplayvideoCustomBiddingAlgorithmsScriptsGetResponse:
        r"""Gets a custom bidding script."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoCustomBiddingAlgorithmsScriptsGetRequest, base_url, '/v2/customBiddingAlgorithms/{customBiddingAlgorithmId}/scripts/{customBiddingScriptId}', request)
        
        query_params = utils.get_query_params(operations.DisplayvideoCustomBiddingAlgorithmsScriptsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoCustomBiddingAlgorithmsScriptsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomBiddingScript])
                res.custom_bidding_script = out

        return res

    def displayvideo_custom_bidding_algorithms_scripts_list(self, request: operations.DisplayvideoCustomBiddingAlgorithmsScriptsListRequest, security: operations.DisplayvideoCustomBiddingAlgorithmsScriptsListSecurity) -> operations.DisplayvideoCustomBiddingAlgorithmsScriptsListResponse:
        r"""Lists custom bidding scripts that belong to the given algorithm. The order is defined by the order_by parameter."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoCustomBiddingAlgorithmsScriptsListRequest, base_url, '/v2/customBiddingAlgorithms/{customBiddingAlgorithmId}/scripts', request)
        
        query_params = utils.get_query_params(operations.DisplayvideoCustomBiddingAlgorithmsScriptsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoCustomBiddingAlgorithmsScriptsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListCustomBiddingScriptsResponse])
                res.list_custom_bidding_scripts_response = out

        return res

    def displayvideo_custom_bidding_algorithms_upload_script(self, request: operations.DisplayvideoCustomBiddingAlgorithmsUploadScriptRequest, security: operations.DisplayvideoCustomBiddingAlgorithmsUploadScriptSecurity) -> operations.DisplayvideoCustomBiddingAlgorithmsUploadScriptResponse:
        r"""Creates a custom bidding script reference object for a script file. The resulting reference object provides a resource path to which the script file should be uploaded. This reference object should be included in when creating a new custom bidding script object."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoCustomBiddingAlgorithmsUploadScriptRequest, base_url, '/v2/customBiddingAlgorithms/{customBiddingAlgorithmId}:uploadScript', request)
        
        query_params = utils.get_query_params(operations.DisplayvideoCustomBiddingAlgorithmsUploadScriptRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoCustomBiddingAlgorithmsUploadScriptResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomBiddingScriptRef])
                res.custom_bidding_script_ref = out

        return res

    