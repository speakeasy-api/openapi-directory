<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 * 
 * https://docs.aws.amazon.com/sagemaker/ - Amazon Web Services documentation
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 * @see https://docs.aws.amazon.com/sagemaker/
 */
class SDK
{
	public const SERVERS = [
        /** The SageMaker multi-region endpoint */
		'http://api.sagemaker.{region}.amazonaws.com',
        /** The SageMaker multi-region endpoint */
		'https://api.sagemaker.{region}.amazonaws.com',
        /** The SageMaker endpoint for China (Beijing) and China (Ningxia) */
		'http://api.sagemaker.{region}.amazonaws.com.cn',
        /** The SageMaker endpoint for China (Beijing) and China (Ningxia) */
		'https://api.sagemaker.{region}.amazonaws.com.cn',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	private ?Models\Shared\Security $_security;
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client	 
	 * @param Models\Shared\Security|null $security
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, ?Models\Shared\Security $security, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($security !== null) {
			$this->_security = $security;
			$this->_securityClient = Utils\Utils::configureSecurityClient($this->_defaultClient, $this->_security);
		}
		
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Creates an <i>association</i> between the source and the destination. A source can be associated with multiple destinations, and a destination can be associated with multiple sources. An association is a lineage tracking entity. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker ML Lineage Tracking</a>.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddAssociationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddAssociationResponse
     */
	public function addAssociation(
        \OpenAPI\OpenAPI\Models\Operations\AddAssociationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddAssociationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.AddAssociation');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "addAssociationRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddAssociationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addAssociationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AddAssociationResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Adds or overwrites one or more tags for the specified SageMaker resource. You can add tags to notebook instances, training jobs, hyperparameter tuning jobs, batch transform jobs, models, labeling jobs, work teams, endpoint configurations, and endpoints.</p> <p>Each tag consists of a key and an optional value. Tag keys must be unique per resource. For more information about tags, see For more information, see <a href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">Amazon Web Services Tagging Strategies</a>.</p> <note> <p>Tags that you add to a hyperparameter tuning job by calling this API are also added to any training jobs that the hyperparameter tuning job launches after you call this API, but not to training jobs that the hyperparameter tuning job launched before you called this API. To make sure that the tags associated with a hyperparameter tuning job are also added to all training jobs that the hyperparameter tuning job launches, add the tags when you first create the tuning job by specifying them in the <code>Tags</code> parameter of <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateHyperParameterTuningJob.html">CreateHyperParameterTuningJob</a> </p> </note> <note> <p>Tags that you add to a SageMaker Studio Domain or User Profile by calling this API are also added to any Apps that the Domain or User Profile launches after you call this API, but not to Apps that the Domain or User Profile launched before you called this API. To make sure that the tags associated with a Domain or User Profile are also added to all Apps that the Domain or User Profile launches, add the tags when you first create the Domain or User Profile by specifying them in the <code>Tags</code> parameter of <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateDomain.html">CreateDomain</a> or <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateUserProfile.html">CreateUserProfile</a>.</p> </note>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddTagsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddTagsResponse
     */
	public function addTags(
        \OpenAPI\OpenAPI\Models\Operations\AddTagsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.AddTags');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "addTagsInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addTagsOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AddTagsOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Associates a trial component with a trial. A trial component can be associated with multiple trials. To disassociate a trial component from a trial, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DisassociateTrialComponent.html">DisassociateTrialComponent</a> API.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AssociateTrialComponentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AssociateTrialComponentResponse
     */
	public function associateTrialComponent(
        \OpenAPI\OpenAPI\Models\Operations\AssociateTrialComponentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AssociateTrialComponentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.AssociateTrialComponent');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "associateTrialComponentRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AssociateTrialComponentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associateTrialComponentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociateTrialComponentResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * This action batch describes a list of versioned model packages
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BatchDescribeModelPackageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BatchDescribeModelPackageResponse
     */
	public function batchDescribeModelPackage(
        \OpenAPI\OpenAPI\Models\Operations\BatchDescribeModelPackageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BatchDescribeModelPackageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.BatchDescribeModelPackage');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchDescribeModelPackageInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BatchDescribeModelPackageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchDescribeModelPackageOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchDescribeModelPackageOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an <i>action</i>. An action is a lineage tracking entity that represents an action or activity. For example, a model deployment or an HPO job. Generally, an action involves at least one input or output artifact. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker ML Lineage Tracking</a>.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateActionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateActionResponse
     */
	public function createAction(
        \OpenAPI\OpenAPI\Models\Operations\CreateActionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateActionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateAction');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createActionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateActionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createActionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateActionResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a machine learning algorithm that you can use in SageMaker and list in the Amazon Web Services Marketplace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAlgorithmRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAlgorithmResponse
     */
	public function createAlgorithm(
        \OpenAPI\OpenAPI\Models\Operations\CreateAlgorithmRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAlgorithmResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateAlgorithm');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createAlgorithmInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAlgorithmResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createAlgorithmOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateAlgorithmOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a running app for the specified UserProfile. This operation is automatically invoked by Amazon SageMaker Studio upon access to the associated Domain, and when new kernel configurations are selected by the user. A user may have multiple Apps active simultaneously.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAppRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAppResponse
     */
	public function createApp(
        \OpenAPI\OpenAPI\Models\Operations\CreateAppRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAppResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateApp');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createAppRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAppResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createAppResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateAppResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a configuration for running a SageMaker image as a KernelGateway app. The configuration specifies the Amazon Elastic File System (EFS) storage volume on the image, and a list of the kernels in the image.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAppImageConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAppImageConfigResponse
     */
	public function createAppImageConfig(
        \OpenAPI\OpenAPI\Models\Operations\CreateAppImageConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAppImageConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateAppImageConfig');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createAppImageConfigRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAppImageConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createAppImageConfigResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateAppImageConfigResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an <i>artifact</i>. An artifact is a lineage tracking entity that represents a URI addressable object or data. Some examples are the S3 URI of a dataset and the ECR registry path of an image. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker ML Lineage Tracking</a>.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateArtifactRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateArtifactResponse
     */
	public function createArtifact(
        \OpenAPI\OpenAPI\Models\Operations\CreateArtifactRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateArtifactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateArtifact');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createArtifactRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateArtifactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createArtifactResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateArtifactResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Creates an Autopilot job.</p> <p>Find the best-performing model after you run an Autopilot job by calling <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJob.html">DescribeAutoMLJob</a>.</p> <p>For information about how to use Autopilot, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development.html">Automate Model Development with Amazon SageMaker Autopilot</a>.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAutoMLJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAutoMLJobResponse
     */
	public function createAutoMLJob(
        \OpenAPI\OpenAPI\Models\Operations\CreateAutoMLJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAutoMLJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateAutoMLJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createAutoMLJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAutoMLJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createAutoMLJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateAutoMLJobResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Creates an Amazon SageMaker AutoML job that uses non-tabular data such as images or text for Computer Vision or Natural Language Processing problems.</p> <p>Find the resulting model after you run an AutoML job V2 by calling <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJobV2.html">DescribeAutoMLJobV2</a>.</p> <p>To create an <code>AutoMLJob</code> using tabular data, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJob.html">CreateAutoMLJob</a>.</p> <note> <p>This API action is callable through SageMaker Canvas only. Calling it directly from the CLI or an SDK results in an error.</p> </note>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAutoMLJobV2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAutoMLJobV2Response
     */
	public function createAutoMLJobV2(
        \OpenAPI\OpenAPI\Models\Operations\CreateAutoMLJobV2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAutoMLJobV2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateAutoMLJobV2');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createAutoMLJobV2Request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAutoMLJobV2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createAutoMLJobV2Response = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateAutoMLJobV2Response', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Creates a Git repository as a resource in your SageMaker account. You can associate the repository with notebook instances so that you can use Git source control for the notebooks you create. The Git repository is a resource in your SageMaker account, so it can be associated with more than one notebook instance, and it persists independently from the lifecycle of any notebook instances it is associated with.</p> <p>The repository can be hosted either in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any other Git repository.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCodeRepositoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCodeRepositoryResponse
     */
	public function createCodeRepository(
        \OpenAPI\OpenAPI\Models\Operations\CreateCodeRepositoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCodeRepositoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateCodeRepository');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createCodeRepositoryInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCodeRepositoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createCodeRepositoryOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateCodeRepositoryOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Starts a model compilation job. After the model has been compiled, Amazon SageMaker saves the resulting model artifacts to an Amazon Simple Storage Service (Amazon S3) bucket that you specify. </p> <p>If you choose to host your model using Amazon SageMaker hosting services, you can use the resulting model artifacts as part of the model. You can also use the artifacts with Amazon Web Services IoT Greengrass. In that case, deploy them as an ML resource.</p> <p>In the request body, you provide the following:</p> <ul> <li> <p>A name for the compilation job</p> </li> <li> <p> Information about the input model artifacts </p> </li> <li> <p>The output location for the compiled model and the device (target) that the model runs on </p> </li> <li> <p>The Amazon Resource Name (ARN) of the IAM role that Amazon SageMaker assumes to perform the model compilation job. </p> </li> </ul> <p>You can also provide a <code>Tag</code> to track the model compilation job's resource use and costs. The response body contains the <code>CompilationJobArn</code> for the compiled job.</p> <p>To stop a model compilation job, use <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_StopCompilationJob.html">StopCompilationJob</a>. To get information about a particular model compilation job, use <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeCompilationJob.html">DescribeCompilationJob</a>. To get information about multiple model compilation jobs, use <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListCompilationJobs.html">ListCompilationJobs</a>.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCompilationJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCompilationJobResponse
     */
	public function createCompilationJob(
        \OpenAPI\OpenAPI\Models\Operations\CreateCompilationJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCompilationJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateCompilationJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createCompilationJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCompilationJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createCompilationJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateCompilationJobResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a <i>context</i>. A context is a lineage tracking entity that represents a logical grouping of other tracking or experiment entities. Some examples are an endpoint and a model package. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker ML Lineage Tracking</a>.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateContextRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateContextResponse
     */
	public function createContext(
        \OpenAPI\OpenAPI\Models\Operations\CreateContextRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateContextResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateContext');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createContextRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateContextResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createContextResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateContextResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a definition for a job that monitors data quality and drift. For information about model monitor, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html">Amazon SageMaker Model Monitor</a>.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDataQualityJobDefinitionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDataQualityJobDefinitionResponse
     */
	public function createDataQualityJobDefinition(
        \OpenAPI\OpenAPI\Models\Operations\CreateDataQualityJobDefinitionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDataQualityJobDefinitionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateDataQualityJobDefinition');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createDataQualityJobDefinitionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDataQualityJobDefinitionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createDataQualityJobDefinitionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateDataQualityJobDefinitionResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a device fleet.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDeviceFleetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDeviceFleetResponse
     */
	public function createDeviceFleet(
        \OpenAPI\OpenAPI\Models\Operations\CreateDeviceFleetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDeviceFleetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateDeviceFleet');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createDeviceFleetRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDeviceFleetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Creates a <code>Domain</code> used by Amazon SageMaker Studio. A domain consists of an associated Amazon Elastic File System (EFS) volume, a list of authorized users, and a variety of security, application, policy, and Amazon Virtual Private Cloud (VPC) configurations. Users within a domain can share notebook files and other artifacts with each other.</p> <p> <b>EFS storage</b> </p> <p>When a domain is created, an EFS volume is created for use by all of the users within the domain. Each user receives a private home directory within the EFS volume for notebooks, Git repositories, and data files.</p> <p>SageMaker uses the Amazon Web Services Key Management Service (Amazon Web Services KMS) to encrypt the EFS volume attached to the domain with an Amazon Web Services managed key by default. For more control, you can specify a customer managed key. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/encryption-at-rest.html">Protect Data at Rest Using Encryption</a>.</p> <p> <b>VPC configuration</b> </p> <p>All SageMaker Studio traffic between the domain and the EFS volume is through the specified VPC and subnets. For other Studio traffic, you can specify the <code>AppNetworkAccessType</code> parameter. <code>AppNetworkAccessType</code> corresponds to the network access type that you choose when you onboard to Studio. The following options are available:</p> <ul> <li> <p> <code>PublicInternetOnly</code> - Non-EFS traffic goes through a VPC managed by Amazon SageMaker, which allows internet access. This is the default value.</p> </li> <li> <p> <code>VpcOnly</code> - All Studio traffic is through the specified VPC and subnets. Internet access is disabled by default. To allow internet access, you must specify a NAT gateway.</p> <p>When internet access is disabled, you won't be able to run a Studio notebook or to train or host models unless your VPC has an interface endpoint to the SageMaker API and runtime or a NAT gateway and your security groups allow outbound connections.</p> </li> </ul> <important> <p>NFS traffic over TCP on port 2049 needs to be allowed in both inbound and outbound rules in order to launch a SageMaker Studio app successfully.</p> </important> <p>For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-notebooks-and-internet-access.html">Connect SageMaker Studio Notebooks to Resources in a VPC</a>.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDomainRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDomainResponse
     */
	public function createDomain(
        \OpenAPI\OpenAPI\Models\Operations\CreateDomainRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDomainResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateDomain');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createDomainRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDomainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createDomainResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateDomainResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an edge deployment plan, consisting of multiple stages. Each stage may have a different deployment configuration and devices.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateEdgeDeploymentPlanRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateEdgeDeploymentPlanResponse
     */
	public function createEdgeDeploymentPlan(
        \OpenAPI\OpenAPI\Models\Operations\CreateEdgeDeploymentPlanRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateEdgeDeploymentPlanResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateEdgeDeploymentPlan');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createEdgeDeploymentPlanRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateEdgeDeploymentPlanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createEdgeDeploymentPlanResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateEdgeDeploymentPlanResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new stage in an existing edge deployment plan.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateEdgeDeploymentStageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateEdgeDeploymentStageResponse
     */
	public function createEdgeDeploymentStage(
        \OpenAPI\OpenAPI\Models\Operations\CreateEdgeDeploymentStageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateEdgeDeploymentStageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateEdgeDeploymentStage');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createEdgeDeploymentStageRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateEdgeDeploymentStageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts a SageMaker Edge Manager model packaging job. Edge Manager will use the model artifacts from the Amazon Simple Storage Service bucket that you specify. After the model has been packaged, Amazon SageMaker saves the resulting artifacts to an S3 bucket that you specify.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateEdgePackagingJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateEdgePackagingJobResponse
     */
	public function createEdgePackagingJob(
        \OpenAPI\OpenAPI\Models\Operations\CreateEdgePackagingJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateEdgePackagingJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateEdgePackagingJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createEdgePackagingJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateEdgePackagingJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Creates an endpoint using the endpoint configuration specified in the request. SageMaker uses the endpoint to provision resources and deploy models. You create the endpoint configuration with the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html">CreateEndpointConfig</a> API. </p> <p> Use this API to deploy models using SageMaker hosting services. </p> <p>For an example that calls this method when deploying a model to SageMaker hosting services, see the <a href="https://github.com/aws/amazon-sagemaker-examples/blob/master/sagemaker-fundamentals/create-endpoint/create_endpoint.ipynb">Create Endpoint example notebook.</a> </p> <note> <p> You must not delete an <code>EndpointConfig</code> that is in use by an endpoint that is live or while the <code>UpdateEndpoint</code> or <code>CreateEndpoint</code> operations are being performed on the endpoint. To update an endpoint, you must create a new <code>EndpointConfig</code>.</p> </note> <p>The endpoint name must be unique within an Amazon Web Services Region in your Amazon Web Services account. </p> <p>When it receives the request, SageMaker creates the endpoint, launches the resources (ML compute instances), and deploys the model(s) on them. </p> <note> <p>When you call <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a>, a load call is made to DynamoDB to verify that your endpoint configuration exists. When you read data from a DynamoDB table supporting <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html"> <code>Eventually Consistent Reads</code> </a>, the response might not reflect the results of a recently completed write operation. The response might include some stale data. If the dependent entities are not yet in DynamoDB, this causes a validation error. If you repeat your read request after a short time, the response should return the latest data. So retry logic is recommended to handle these possible issues. We also recommend that customers call <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpointConfig.html">DescribeEndpointConfig</a> before calling <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a> to minimize the potential impact of a DynamoDB eventually consistent read.</p> </note> <p>When SageMaker receives the request, it sets the endpoint status to <code>Creating</code>. After it creates the endpoint, it sets the status to <code>InService</code>. SageMaker can then process incoming requests for inferences. To check the status of an endpoint, use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpoint.html">DescribeEndpoint</a> API.</p> <p>If any of the models hosted at this endpoint get model data from an Amazon S3 location, SageMaker uses Amazon Web Services Security Token Service to download model artifacts from the S3 path you provided. Amazon Web Services STS is activated in your Amazon Web Services account by default. If you previously deactivated Amazon Web Services STS for a region, you need to reactivate Amazon Web Services STS for that region. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating Amazon Web Services STS in an Amazon Web Services Region</a> in the <i>Amazon Web Services Identity and Access Management User Guide</i>.</p> <note> <p> To add the IAM role policies for using this API operation, go to the <a href="https://console.aws.amazon.com/iam/">IAM console</a>, and choose Roles in the left navigation pane. Search the IAM role that you want to grant access to use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html">CreateEndpointConfig</a> API operations, add the following policies to the role. </p> <ul> <li> <p>Option 1: For a full SageMaker access, search and attach the <code>AmazonSageMakerFullAccess</code> policy.</p> </li> <li> <p>Option 2: For granting a limited access to an IAM role, paste the following Action elements manually into the JSON file of the IAM role: </p> <p> <code>"Action": ["sagemaker:CreateEndpoint", "sagemaker:CreateEndpointConfig"]</code> </p> <p> <code>"Resource": [</code> </p> <p> <code>"arn:aws:sagemaker:region:account-id:endpoint/endpointName"</code> </p> <p> <code>"arn:aws:sagemaker:region:account-id:endpoint-config/endpointConfigName"</code> </p> <p> <code>]</code> </p> <p>For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/api-permissions-reference.html">SageMaker API Permissions: Actions, Permissions, and Resources Reference</a>.</p> </li> </ul> </note>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateEndpointRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateEndpointResponse
     */
	public function createEndpoint(
        \OpenAPI\OpenAPI\Models\Operations\CreateEndpointRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateEndpointResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateEndpoint');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createEndpointInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateEndpointResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createEndpointOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateEndpointOutput', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Creates an endpoint configuration that SageMaker hosting services uses to deploy models. In the configuration, you identify one or more models, created using the <code>CreateModel</code> API, to deploy and the resources that you want SageMaker to provision. Then you call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a> API.</p> <note> <p> Use this API if you want to use SageMaker hosting services to deploy models into production. </p> </note> <p>In the request, you define a <code>ProductionVariant</code>, for each model that you want to deploy. Each <code>ProductionVariant</code> parameter also describes the resources that you want SageMaker to provision. This includes the number and type of ML compute instances to deploy. </p> <p>If you are hosting multiple models, you also assign a <code>VariantWeight</code> to specify how much traffic you want to allocate to each model. For example, suppose that you want to host two models, A and B, and you assign traffic weight 2 for model A and 1 for model B. SageMaker distributes two-thirds of the traffic to Model A, and one-third to model B. </p> <note> <p>When you call <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a>, a load call is made to DynamoDB to verify that your endpoint configuration exists. When you read data from a DynamoDB table supporting <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html"> <code>Eventually Consistent Reads</code> </a>, the response might not reflect the results of a recently completed write operation. The response might include some stale data. If the dependent entities are not yet in DynamoDB, this causes a validation error. If you repeat your read request after a short time, the response should return the latest data. So retry logic is recommended to handle these possible issues. We also recommend that customers call <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpointConfig.html">DescribeEndpointConfig</a> before calling <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a> to minimize the potential impact of a DynamoDB eventually consistent read.</p> </note>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateEndpointConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateEndpointConfigResponse
     */
	public function createEndpointConfig(
        \OpenAPI\OpenAPI\Models\Operations\CreateEndpointConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateEndpointConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateEndpointConfig');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createEndpointConfigInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateEndpointConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createEndpointConfigOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateEndpointConfigOutput', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Creates a SageMaker <i>experiment</i>. An experiment is a collection of <i>trials</i> that are observed, compared and evaluated as a group. A trial is a set of steps, called <i>trial components</i>, that produce a machine learning model.</p> <note> <p>In the Studio UI, trials are referred to as <i>run groups</i> and trial components are referred to as <i>runs</i>.</p> </note> <p>The goal of an experiment is to determine the components that produce the best model. Multiple trials are performed, each one isolating and measuring the impact of a change to one or more inputs, while keeping the remaining inputs constant.</p> <p>When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you must use the logging APIs provided by the SDK.</p> <p>You can add tags to experiments, trials, trial components and then use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API to search for the tags.</p> <p>To add a description to an experiment, specify the optional <code>Description</code> parameter. To add a description later, or to change the description, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateExperiment.html">UpdateExperiment</a> API.</p> <p>To get a list of all your experiments, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListExperiments.html">ListExperiments</a> API. To view an experiment's properties, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeExperiment.html">DescribeExperiment</a> API. To get a list of all the trials associated with an experiment, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListTrials.html">ListTrials</a> API. To create a trial call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrial.html">CreateTrial</a> API.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateExperimentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateExperimentResponse
     */
	public function createExperiment(
        \OpenAPI\OpenAPI\Models\Operations\CreateExperimentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateExperimentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateExperiment');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createExperimentRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateExperimentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createExperimentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateExperimentResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Create a new <code>FeatureGroup</code>. A <code>FeatureGroup</code> is a group of <code>Features</code> defined in the <code>FeatureStore</code> to describe a <code>Record</code>. </p> <p>The <code>FeatureGroup</code> defines the schema and features contained in the FeatureGroup. A <code>FeatureGroup</code> definition is composed of a list of <code>Features</code>, a <code>RecordIdentifierFeatureName</code>, an <code>EventTimeFeatureName</code> and configurations for its <code>OnlineStore</code> and <code>OfflineStore</code>. Check <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">Amazon Web Services service quotas</a> to see the <code>FeatureGroup</code>s quota for your Amazon Web Services account.</p> <important> <p>You must include at least one of <code>OnlineStoreConfig</code> and <code>OfflineStoreConfig</code> to create a <code>FeatureGroup</code>.</p> </important>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateFeatureGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateFeatureGroupResponse
     */
	public function createFeatureGroup(
        \OpenAPI\OpenAPI\Models\Operations\CreateFeatureGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateFeatureGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateFeatureGroup');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createFeatureGroupRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateFeatureGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createFeatureGroupResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateFeatureGroupResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a flow definition.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateFlowDefinitionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateFlowDefinitionResponse
     */
	public function createFlowDefinition(
        \OpenAPI\OpenAPI\Models\Operations\CreateFlowDefinitionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateFlowDefinitionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateFlowDefinition');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createFlowDefinitionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateFlowDefinitionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createFlowDefinitionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateFlowDefinitionResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Create a hub.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateHubRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateHubResponse
     */
	public function createHub(
        \OpenAPI\OpenAPI\Models\Operations\CreateHubRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateHubResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateHub');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createHubRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateHubResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createHubResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateHubResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Defines the settings you will use for the human review workflow user interface. Reviewers will see a three-panel interface with an instruction area, the item to review, and an input area.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateHumanTaskUiRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateHumanTaskUiResponse
     */
	public function createHumanTaskUi(
        \OpenAPI\OpenAPI\Models\Operations\CreateHumanTaskUiRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateHumanTaskUiResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateHumanTaskUi');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createHumanTaskUiRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateHumanTaskUiResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createHumanTaskUiResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateHumanTaskUiResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Starts a hyperparameter tuning job. A hyperparameter tuning job finds the best version of a model by running many training jobs on your dataset using the algorithm you choose and values for hyperparameters within ranges that you specify. It then chooses the hyperparameter values that result in a model that performs the best, as measured by an objective metric that you choose.</p> <p>A hyperparameter tuning job automatically creates Amazon SageMaker experiments, trials, and trial components for each training job that it runs. You can view these entities in Amazon SageMaker Studio. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/experiments-view-compare.html#experiments-view">View Experiments, Trials, and Trial Components</a>.</p> <important> <p>Do not include any security-sensitive information including account access IDs, secrets or tokens in any hyperparameter field. If the use of security-sensitive credentials are detected, SageMaker will reject your training job request and return an exception error.</p> </important>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateHyperParameterTuningJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateHyperParameterTuningJobResponse
     */
	public function createHyperParameterTuningJob(
        \OpenAPI\OpenAPI\Models\Operations\CreateHyperParameterTuningJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateHyperParameterTuningJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateHyperParameterTuningJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createHyperParameterTuningJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateHyperParameterTuningJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createHyperParameterTuningJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateHyperParameterTuningJobResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a custom SageMaker image. A SageMaker image is a set of image versions. Each image version represents a container image stored in Amazon Elastic Container Registry (ECR). For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-byoi.html">Bring your own SageMaker image</a>.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateImageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateImageResponse
     */
	public function createImage(
        \OpenAPI\OpenAPI\Models\Operations\CreateImageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateImageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateImage');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createImageRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateImageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createImageResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateImageResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a version of the SageMaker image specified by <code>ImageName</code>. The version represents the Amazon Elastic Container Registry (ECR) container image specified by <code>BaseImage</code>.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateImageVersionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateImageVersionResponse
     */
	public function createImageVersion(
        \OpenAPI\OpenAPI\Models\Operations\CreateImageVersionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateImageVersionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateImageVersion');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createImageVersionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateImageVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createImageVersionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateImageVersionResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 482) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p> Creates an inference experiment using the configurations specified in the request. </p> <p> Use this API to setup and schedule an experiment to compare model variants on a Amazon SageMaker inference endpoint. For more information about inference experiments, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/shadow-tests.html">Shadow tests</a>. </p> <p> Amazon SageMaker begins your experiment at the scheduled time and routes traffic to your endpoint's model variants based on your specified configuration. </p> <p> While the experiment is in progress or after it has concluded, you can view metrics that compare your model variants. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/shadow-tests-view-monitor-edit.html">View, monitor, and edit shadow tests</a>. </p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInferenceExperimentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateInferenceExperimentResponse
     */
	public function createInferenceExperiment(
        \OpenAPI\OpenAPI\Models\Operations\CreateInferenceExperimentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateInferenceExperimentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateInferenceExperiment');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createInferenceExperimentRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateInferenceExperimentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createInferenceExperimentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateInferenceExperimentResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts a recommendation job. You can create either an instance recommendation or load test job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInferenceRecommendationsJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateInferenceRecommendationsJobResponse
     */
	public function createInferenceRecommendationsJob(
        \OpenAPI\OpenAPI\Models\Operations\CreateInferenceRecommendationsJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateInferenceRecommendationsJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateInferenceRecommendationsJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createInferenceRecommendationsJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateInferenceRecommendationsJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createInferenceRecommendationsJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateInferenceRecommendationsJobResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Creates a job that uses workers to label the data objects in your input dataset. You can use the labeled data to train machine learning models. </p> <p>You can select your workforce from one of three providers:</p> <ul> <li> <p>A private workforce that you create. It can include employees, contractors, and outside experts. Use a private workforce when want the data to stay within your organization or when a specific set of skills is required.</p> </li> <li> <p>One or more vendors that you select from the Amazon Web Services Marketplace. Vendors provide expertise in specific areas. </p> </li> <li> <p>The Amazon Mechanical Turk workforce. This is the largest workforce, but it should only be used for public data or data that has been stripped of any personally identifiable information.</p> </li> </ul> <p>You can also use <i>automated data labeling</i> to reduce the number of data objects that need to be labeled by a human. Automated data labeling uses <i>active learning</i> to determine if a data object can be labeled by machine or if it needs to be sent to a human worker. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-automated-labeling.html">Using Automated Data Labeling</a>.</p> <p>The data objects to be labeled are contained in an Amazon S3 bucket. You create a <i>manifest file</i> that describes the location of each object. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-data.html">Using Input and Output Data</a>.</p> <p>The output can be used as the manifest file for another labeling job or as training data for your machine learning models.</p> <p>You can use this operation to create a static labeling job or a streaming labeling job. A static labeling job stops if all data objects in the input manifest file identified in <code>ManifestS3Uri</code> have been labeled. A streaming labeling job runs perpetually until it is manually stopped, or remains idle for 10 days. You can send new data objects to an active (<code>InProgress</code>) streaming labeling job in real time. To learn how to create a static labeling job, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-create-labeling-job-api.html">Create a Labeling Job (API) </a> in the Amazon SageMaker Developer Guide. To learn how to create a streaming labeling job, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-streaming-create-job.html">Create a Streaming Labeling Job</a>.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateLabelingJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateLabelingJobResponse
     */
	public function createLabelingJob(
        \OpenAPI\OpenAPI\Models\Operations\CreateLabelingJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateLabelingJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateLabelingJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createLabelingJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateLabelingJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createLabelingJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateLabelingJobResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Creates a model in SageMaker. In the request, you name the model and describe a primary container. For the primary container, you specify the Docker image that contains inference code, artifacts (from prior training), and a custom environment map that the inference code uses when you deploy the model for predictions.</p> <p>Use this API to create a model if you want to use SageMaker hosting services or run a batch transform job.</p> <p>To host your model, you create an endpoint configuration with the <code>CreateEndpointConfig</code> API, and then create an endpoint with the <code>CreateEndpoint</code> API. SageMaker then deploys all of the containers that you defined for the model in the hosting environment. </p> <p>For an example that calls this method when deploying a model to SageMaker hosting services, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/realtime-endpoints-deployment.html#realtime-endpoints-deployment-create-model">Create a Model (Amazon Web Services SDK for Python (Boto 3)).</a> </p> <p>To run a batch transform using your model, you start a job with the <code>CreateTransformJob</code> API. SageMaker uses your model and your dataset to get inferences which are then saved to a specified S3 location.</p> <p>In the request, you also provide an IAM role that SageMaker can assume to access model artifacts and docker image for deployment on ML compute hosting instances or for batch transform jobs. In addition, you also use the IAM role to manage permissions the inference code needs. For example, if the inference code access any other Amazon Web Services resources, you grant necessary permissions via this role.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateModelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateModelResponse
     */
	public function createModel(
        \OpenAPI\OpenAPI\Models\Operations\CreateModelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateModelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateModel');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createModelInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateModelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createModelOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateModelOutput', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates the definition for a model bias job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateModelBiasJobDefinitionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateModelBiasJobDefinitionResponse
     */
	public function createModelBiasJobDefinition(
        \OpenAPI\OpenAPI\Models\Operations\CreateModelBiasJobDefinitionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateModelBiasJobDefinitionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateModelBiasJobDefinition');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createModelBiasJobDefinitionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateModelBiasJobDefinitionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createModelBiasJobDefinitionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateModelBiasJobDefinitionResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Creates an Amazon SageMaker Model Card.</p> <p>For information about how to use model cards, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards.html">Amazon SageMaker Model Card</a>.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateModelCardRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateModelCardResponse
     */
	public function createModelCard(
        \OpenAPI\OpenAPI\Models\Operations\CreateModelCardRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateModelCardResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateModelCard');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createModelCardRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateModelCardResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createModelCardResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateModelCardResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conflictException = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an Amazon SageMaker Model Card export job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateModelCardExportJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateModelCardExportJobResponse
     */
	public function createModelCardExportJob(
        \OpenAPI\OpenAPI\Models\Operations\CreateModelCardExportJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateModelCardExportJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateModelCardExportJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createModelCardExportJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateModelCardExportJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createModelCardExportJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateModelCardExportJobResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 482) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conflictException = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates the definition for a model explainability job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateModelExplainabilityJobDefinitionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateModelExplainabilityJobDefinitionResponse
     */
	public function createModelExplainabilityJobDefinition(
        \OpenAPI\OpenAPI\Models\Operations\CreateModelExplainabilityJobDefinitionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateModelExplainabilityJobDefinitionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateModelExplainabilityJobDefinition');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createModelExplainabilityJobDefinitionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateModelExplainabilityJobDefinitionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createModelExplainabilityJobDefinitionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateModelExplainabilityJobDefinitionResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Creates a model package that you can use to create SageMaker models or list on Amazon Web Services Marketplace, or a versioned model that is part of a model group. Buyers can subscribe to model packages listed on Amazon Web Services Marketplace to create models in SageMaker.</p> <p>To create a model package by specifying a Docker container that contains your inference code and the Amazon S3 location of your model artifacts, provide values for <code>InferenceSpecification</code>. To create a model from an algorithm resource that you created or subscribed to in Amazon Web Services Marketplace, provide a value for <code>SourceAlgorithmSpecification</code>.</p> <note> <p>There are two types of model packages:</p> <ul> <li> <p>Versioned - a model that is part of a model group in the model registry.</p> </li> <li> <p>Unversioned - a model package that is not part of a model group.</p> </li> </ul> </note>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateModelPackageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateModelPackageResponse
     */
	public function createModelPackage(
        \OpenAPI\OpenAPI\Models\Operations\CreateModelPackageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateModelPackageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateModelPackage');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createModelPackageInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateModelPackageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createModelPackageOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateModelPackageOutput', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conflictException = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a model group. A model group contains a group of model versions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateModelPackageGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateModelPackageGroupResponse
     */
	public function createModelPackageGroup(
        \OpenAPI\OpenAPI\Models\Operations\CreateModelPackageGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateModelPackageGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateModelPackageGroup');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createModelPackageGroupInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateModelPackageGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createModelPackageGroupOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateModelPackageGroupOutput', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a definition for a job that monitors model quality and drift. For information about model monitor, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html">Amazon SageMaker Model Monitor</a>.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateModelQualityJobDefinitionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateModelQualityJobDefinitionResponse
     */
	public function createModelQualityJobDefinition(
        \OpenAPI\OpenAPI\Models\Operations\CreateModelQualityJobDefinitionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateModelQualityJobDefinitionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateModelQualityJobDefinition');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createModelQualityJobDefinitionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateModelQualityJobDefinitionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createModelQualityJobDefinitionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateModelQualityJobDefinitionResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a schedule that regularly starts Amazon SageMaker Processing Jobs to monitor the data captured for an Amazon SageMaker Endpoint.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateMonitoringScheduleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateMonitoringScheduleResponse
     */
	public function createMonitoringSchedule(
        \OpenAPI\OpenAPI\Models\Operations\CreateMonitoringScheduleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateMonitoringScheduleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateMonitoringSchedule');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createMonitoringScheduleRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateMonitoringScheduleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createMonitoringScheduleResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateMonitoringScheduleResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Creates an SageMaker notebook instance. A notebook instance is a machine learning (ML) compute instance running on a Jupyter notebook. </p> <p>In a <code>CreateNotebookInstance</code> request, specify the type of ML compute instance that you want to run. SageMaker launches the instance, installs common libraries that you can use to explore datasets for model training, and attaches an ML storage volume to the notebook instance. </p> <p>SageMaker also provides a set of example notebooks. Each notebook demonstrates how to use SageMaker with a specific algorithm or with a machine learning framework. </p> <p>After receiving the request, SageMaker does the following:</p> <ol> <li> <p>Creates a network interface in the SageMaker VPC.</p> </li> <li> <p>(Option) If you specified <code>SubnetId</code>, SageMaker creates a network interface in your own VPC, which is inferred from the subnet ID that you provide in the input. When creating this network interface, SageMaker attaches the security group that you specified in the request to the network interface that it creates in your VPC.</p> </li> <li> <p>Launches an EC2 instance of the type specified in the request in the SageMaker VPC. If you specified <code>SubnetId</code> of your VPC, SageMaker specifies both network interfaces when launching this instance. This enables inbound traffic from your own VPC to the notebook instance, assuming that the security groups allow it.</p> </li> </ol> <p>After creating the notebook instance, SageMaker returns its Amazon Resource Name (ARN). You can't change the name of a notebook instance after you create it.</p> <p>After SageMaker creates the notebook instance, you can connect to the Jupyter server and work in Jupyter notebooks. For example, you can write code to explore a dataset that you can use for model training, train a model, host models by creating SageMaker endpoints, and validate hosted models. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html">How It Works</a>. </p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNotebookInstanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNotebookInstanceResponse
     */
	public function createNotebookInstance(
        \OpenAPI\OpenAPI\Models\Operations\CreateNotebookInstanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNotebookInstanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateNotebookInstance');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createNotebookInstanceInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNotebookInstanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNotebookInstanceOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateNotebookInstanceOutput', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Creates a lifecycle configuration that you can associate with a notebook instance. A <i>lifecycle configuration</i> is a collection of shell scripts that run when you create or start a notebook instance.</p> <p>Each lifecycle configuration script has a limit of 16384 characters.</p> <p>The value of the <code>$PATH</code> environment variable that is available to both scripts is <code>/sbin:bin:/usr/sbin:/usr/bin</code>.</p> <p>View CloudWatch Logs for notebook instance lifecycle configurations in log group <code>/aws/sagemaker/NotebookInstances</code> in log stream <code>[notebook-instance-name]/[LifecycleConfigHook]</code>.</p> <p>Lifecycle configuration scripts cannot run for longer than 5 minutes. If a script runs for longer than 5 minutes, it fails and the notebook instance is not created or started.</p> <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step 2.1: (Optional) Customize a Notebook Instance</a>.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNotebookInstanceLifecycleConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNotebookInstanceLifecycleConfigResponse
     */
	public function createNotebookInstanceLifecycleConfig(
        \OpenAPI\OpenAPI\Models\Operations\CreateNotebookInstanceLifecycleConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNotebookInstanceLifecycleConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateNotebookInstanceLifecycleConfig');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createNotebookInstanceLifecycleConfigInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNotebookInstanceLifecycleConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNotebookInstanceLifecycleConfigOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateNotebookInstanceLifecycleConfigOutput', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a pipeline using a JSON pipeline definition.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePipelineRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatePipelineResponse
     */
	public function createPipeline(
        \OpenAPI\OpenAPI\Models\Operations\CreatePipelineRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatePipelineResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreatePipeline');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createPipelineRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatePipelineResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createPipelineResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreatePipelineResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Creates a URL for a specified UserProfile in a Domain. When accessed in a web browser, the user will be automatically signed in to Amazon SageMaker Studio, and granted access to all of the Apps and files associated with the Domain's Amazon Elastic File System (EFS) volume. This operation can only be called when the authentication mode equals IAM. </p> <p>The IAM role or user passed to this API defines the permissions to access the app. Once the presigned URL is created, no additional permission is required to access this URL. IAM authorization policies for this API are also enforced for every HTTP request and WebSocket frame that attempts to connect to the app.</p> <p>You can restrict access to this API and to the URL that it returns to a list of IP addresses, Amazon VPCs or Amazon VPC Endpoints that you specify. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-interface-endpoint.html">Connect to SageMaker Studio Through an Interface VPC Endpoint</a> .</p> <note> <p>The URL that you get from a call to <code>CreatePresignedDomainUrl</code> has a default timeout of 5 minutes. You can configure this value using <code>ExpiresInSeconds</code>. If you try to use the URL after the timeout limit expires, you are directed to the Amazon Web Services console sign-in page.</p> </note>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePresignedDomainUrlRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatePresignedDomainUrlResponse
     */
	public function createPresignedDomainUrl(
        \OpenAPI\OpenAPI\Models\Operations\CreatePresignedDomainUrlRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatePresignedDomainUrlResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreatePresignedDomainUrl');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createPresignedDomainUrlRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatePresignedDomainUrlResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createPresignedDomainUrlResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreatePresignedDomainUrlResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Returns a URL that you can use to connect to the Jupyter server from a notebook instance. In the SageMaker console, when you choose <code>Open</code> next to a notebook instance, SageMaker opens a new tab showing the Jupyter server home page from the notebook instance. The console uses this API to get the URL and show the page.</p> <p> The IAM role or user used to call this API defines the permissions to access the notebook instance. Once the presigned URL is created, no additional permission is required to access this URL. IAM authorization policies for this API are also enforced for every HTTP request and WebSocket frame that attempts to connect to the notebook instance.</p> <p>You can restrict access to this API and to the URL that it returns to a list of IP addresses that you specify. Use the <code>NotIpAddress</code> condition operator and the <code>aws:SourceIP</code> condition context key to specify the list of IP addresses that you want to have access to the notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/security_iam_id-based-policy-examples.html#nbi-ip-filter">Limit Access to a Notebook Instance by IP Address</a>.</p> <note> <p>The URL that you get from a call to <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreatePresignedNotebookInstanceUrl.html">CreatePresignedNotebookInstanceUrl</a> is valid only for 5 minutes. If you try to use the URL after the 5-minute limit expires, you are directed to the Amazon Web Services console sign-in page.</p> </note>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePresignedNotebookInstanceUrlRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatePresignedNotebookInstanceUrlResponse
     */
	public function createPresignedNotebookInstanceUrl(
        \OpenAPI\OpenAPI\Models\Operations\CreatePresignedNotebookInstanceUrlRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatePresignedNotebookInstanceUrlResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreatePresignedNotebookInstanceUrl');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createPresignedNotebookInstanceUrlInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatePresignedNotebookInstanceUrlResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createPresignedNotebookInstanceUrlOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreatePresignedNotebookInstanceUrlOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a processing job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateProcessingJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateProcessingJobResponse
     */
	public function createProcessingJob(
        \OpenAPI\OpenAPI\Models\Operations\CreateProcessingJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateProcessingJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateProcessingJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createProcessingJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateProcessingJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createProcessingJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateProcessingJobResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 482) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a machine learning (ML) project that can contain one or more templates that set up an ML pipeline from training to deploying an approved model.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateProjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateProjectResponse
     */
	public function createProject(
        \OpenAPI\OpenAPI\Models\Operations\CreateProjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateProjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateProject');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createProjectInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateProjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createProjectOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateProjectOutput', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a space used for real time collaboration in a Domain.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSpaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSpaceResponse
     */
	public function createSpace(
        \OpenAPI\OpenAPI\Models\Operations\CreateSpaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSpaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateSpace');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createSpaceRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSpaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createSpaceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateSpaceResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Studio Lifecycle Configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateStudioLifecycleConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateStudioLifecycleConfigResponse
     */
	public function createStudioLifecycleConfig(
        \OpenAPI\OpenAPI\Models\Operations\CreateStudioLifecycleConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateStudioLifecycleConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateStudioLifecycleConfig');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createStudioLifecycleConfigRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateStudioLifecycleConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createStudioLifecycleConfigResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateStudioLifecycleConfigResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Starts a model training job. After training completes, SageMaker saves the resulting model artifacts to an Amazon S3 location that you specify. </p> <p>If you choose to host your model using SageMaker hosting services, you can use the resulting model artifacts as part of the model. You can also use the artifacts in a machine learning service other than SageMaker, provided that you know how to use them for inference. </p> <p>In the request body, you provide the following: </p> <ul> <li> <p> <code>AlgorithmSpecification</code> - Identifies the training algorithm to use. </p> </li> <li> <p> <code>HyperParameters</code> - Specify these algorithm-specific parameters to enable the estimation of model parameters during training. Hyperparameters can be tuned to optimize this learning process. For a list of hyperparameters for each training algorithm provided by SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>. </p> <important> <p>Do not include any security-sensitive information including account access IDs, secrets or tokens in any hyperparameter field. If the use of security-sensitive credentials are detected, SageMaker will reject your training job request and return an exception error.</p> </important> </li> <li> <p> <code>InputDataConfig</code> - Describes the input required by the training job and the Amazon S3, EFS, or FSx location where it is stored.</p> </li> <li> <p> <code>OutputDataConfig</code> - Identifies the Amazon S3 bucket where you want SageMaker to save the results of model training. </p> </li> <li> <p> <code>ResourceConfig</code> - Identifies the resources, ML compute instances, and ML storage volumes to deploy for model training. In distributed training, you specify more than one instance. </p> </li> <li> <p> <code>EnableManagedSpotTraining</code> - Optimize the cost of training machine learning models by up to 80% by using Amazon EC2 Spot instances. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-managed-spot-training.html">Managed Spot Training</a>. </p> </li> <li> <p> <code>RoleArn</code> - The Amazon Resource Name (ARN) that SageMaker assumes to perform tasks on your behalf during model training. You must grant this role the necessary permissions so that SageMaker can successfully complete model training. </p> </li> <li> <p> <code>StoppingCondition</code> - To help cap training costs, use <code>MaxRuntimeInSeconds</code> to set a time limit for training. Use <code>MaxWaitTimeInSeconds</code> to specify how long a managed spot training job has to complete. </p> </li> <li> <p> <code>Environment</code> - The environment variables to set in the Docker container.</p> </li> <li> <p> <code>RetryStrategy</code> - The number of times to retry the job when the job fails due to an <code>InternalServerError</code>.</p> </li> </ul> <p> For more information about SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html">How It Works</a>. </p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTrainingJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTrainingJobResponse
     */
	public function createTrainingJob(
        \OpenAPI\OpenAPI\Models\Operations\CreateTrainingJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTrainingJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateTrainingJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createTrainingJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTrainingJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createTrainingJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateTrainingJobResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 482) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Starts a transform job. A transform job uses a trained model to get inferences on a dataset and saves these results to an Amazon S3 location that you specify.</p> <p>To perform batch transformations, you create a transform job and use the data that you have readily available.</p> <p>In the request body, you provide the following:</p> <ul> <li> <p> <code>TransformJobName</code> - Identifies the transform job. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account.</p> </li> <li> <p> <code>ModelName</code> - Identifies the model to use. <code>ModelName</code> must be the name of an existing Amazon SageMaker model in the same Amazon Web Services Region and Amazon Web Services account. For information on creating a model, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html">CreateModel</a>.</p> </li> <li> <p> <code>TransformInput</code> - Describes the dataset to be transformed and the Amazon S3 location where it is stored.</p> </li> <li> <p> <code>TransformOutput</code> - Identifies the Amazon S3 location where you want Amazon SageMaker to save the results from the transform job.</p> </li> <li> <p> <code>TransformResources</code> - Identifies the ML compute instances for the transform job.</p> </li> </ul> <p>For more information about how batch transformation works, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html">Batch Transform</a>.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTransformJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTransformJobResponse
     */
	public function createTransformJob(
        \OpenAPI\OpenAPI\Models\Operations\CreateTransformJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTransformJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateTransformJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createTransformJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTransformJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createTransformJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateTransformJobResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 482) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Creates an SageMaker <i>trial</i>. A trial is a set of steps called <i>trial components</i> that produce a machine learning model. A trial is part of a single SageMaker <i>experiment</i>.</p> <p>When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you must use the logging APIs provided by the SDK.</p> <p>You can add tags to a trial and then use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API to search for the tags.</p> <p>To get a list of all your trials, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListTrials.html">ListTrials</a> API. To view a trial's properties, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrial.html">DescribeTrial</a> API. To create a trial component, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrialComponent.html">CreateTrialComponent</a> API.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTrialRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTrialResponse
     */
	public function createTrial(
        \OpenAPI\OpenAPI\Models\Operations\CreateTrialRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTrialResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateTrial');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createTrialRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTrialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createTrialResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateTrialResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Creates a <i>trial component</i>, which is a stage of a machine learning <i>trial</i>. A trial is composed of one or more trial components. A trial component can be used in multiple trials.</p> <p>Trial components include pre-processing jobs, training jobs, and batch transform jobs.</p> <p>When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you must use the logging APIs provided by the SDK.</p> <p>You can add tags to a trial component and then use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API to search for the tags.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTrialComponentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTrialComponentResponse
     */
	public function createTrialComponent(
        \OpenAPI\OpenAPI\Models\Operations\CreateTrialComponentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTrialComponentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateTrialComponent');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createTrialComponentRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTrialComponentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createTrialComponentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateTrialComponentResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a user profile. A user profile represents a single user within a domain, and is the main way to reference a "person" for the purposes of sharing, reporting, and other user-oriented features. This entity is created when a user onboards to Amazon SageMaker Studio. If an administrator invites a person by email or imports them from IAM Identity Center, a user profile is automatically created. A user profile is the primary holder of settings for an individual user and has a reference to the user's private Amazon Elastic File System (EFS) home directory. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUserProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateUserProfileResponse
     */
	public function createUserProfile(
        \OpenAPI\OpenAPI\Models\Operations\CreateUserProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateUserProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateUserProfile');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createUserProfileRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateUserProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createUserProfileResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateUserProfileResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Use this operation to create a workforce. This operation will return an error if a workforce already exists in the Amazon Web Services Region that you specify. You can only create one workforce in each Amazon Web Services Region per Amazon Web Services account.</p> <p>If you want to create a new workforce in an Amazon Web Services Region where a workforce already exists, use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteWorkforce.html">DeleteWorkforce</a> API operation to delete the existing workforce and then use <code>CreateWorkforce</code> to create a new workforce.</p> <p>To create a private workforce using Amazon Cognito, you must specify a Cognito user pool in <code>CognitoConfig</code>. You can also create an Amazon Cognito workforce using the Amazon SageMaker console. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html"> Create a Private Workforce (Amazon Cognito)</a>.</p> <p>To create a private workforce using your own OIDC Identity Provider (IdP), specify your IdP configuration in <code>OidcConfig</code>. Your OIDC IdP must support <i>groups</i> because groups are used by Ground Truth and Amazon A2I to create work teams. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private-oidc.html"> Create a Private Workforce (OIDC IdP)</a>.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateWorkforceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateWorkforceResponse
     */
	public function createWorkforce(
        \OpenAPI\OpenAPI\Models\Operations\CreateWorkforceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateWorkforceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateWorkforce');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createWorkforceRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateWorkforceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createWorkforceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateWorkforceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Creates a new work team for labeling your data. A work team is defined by one or more Amazon Cognito user pools. You must first create the user pools before you can create a work team.</p> <p>You cannot create more than 25 work teams in an account and region.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateWorkteamRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateWorkteamResponse
     */
	public function createWorkteam(
        \OpenAPI\OpenAPI\Models\Operations\CreateWorkteamRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateWorkteamResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.CreateWorkteam');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createWorkteamRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateWorkteamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createWorkteamResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateWorkteamResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an action.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteActionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteActionResponse
     */
	public function deleteAction(
        \OpenAPI\OpenAPI\Models\Operations\DeleteActionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteActionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteAction');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteActionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteActionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteActionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeleteActionResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes the specified algorithm from your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAlgorithmRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAlgorithmResponse
     */
	public function deleteAlgorithm(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAlgorithmRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAlgorithmResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteAlgorithm');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteAlgorithmInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAlgorithmResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Used to stop and delete an app.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAppRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAppResponse
     */
	public function deleteApp(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAppRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAppResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteApp');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteAppRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAppResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an AppImageConfig.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAppImageConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAppImageConfigResponse
     */
	public function deleteAppImageConfig(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAppImageConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAppImageConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteAppImageConfig');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteAppImageConfigRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAppImageConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an artifact. Either <code>ArtifactArn</code> or <code>Source</code> must be specified.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteArtifactRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteArtifactResponse
     */
	public function deleteArtifact(
        \OpenAPI\OpenAPI\Models\Operations\DeleteArtifactRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteArtifactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteArtifact');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteArtifactRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteArtifactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteArtifactResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeleteArtifactResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an association.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAssociationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAssociationResponse
     */
	public function deleteAssociation(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAssociationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAssociationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteAssociation');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteAssociationRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAssociationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteAssociationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeleteAssociationResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified Git repository from your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCodeRepositoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCodeRepositoryResponse
     */
	public function deleteCodeRepository(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCodeRepositoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCodeRepositoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteCodeRepository');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteCodeRepositoryInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCodeRepositoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Deletes an context.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteContextRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteContextResponse
     */
	public function deleteContext(
        \OpenAPI\OpenAPI\Models\Operations\DeleteContextRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteContextResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteContext');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteContextRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteContextResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteContextResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeleteContextResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a data quality monitoring job definition.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDataQualityJobDefinitionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDataQualityJobDefinitionResponse
     */
	public function deleteDataQualityJobDefinition(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDataQualityJobDefinitionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDataQualityJobDefinitionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteDataQualityJobDefinition');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteDataQualityJobDefinitionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDataQualityJobDefinitionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a fleet.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceFleetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceFleetResponse
     */
	public function deleteDeviceFleet(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceFleetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceFleetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteDeviceFleet');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteDeviceFleetRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceFleetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Used to delete a domain. If you onboarded with IAM mode, you will need to delete your domain to onboard again using IAM Identity Center. Use with caution. All of the members of the domain will lose access to their EFS volume, including data, notebooks, and other artifacts. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDomainRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDomainResponse
     */
	public function deleteDomain(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDomainRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDomainResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteDomain');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteDomainRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDomainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an edge deployment plan if (and only if) all the stages in the plan are inactive or there are no stages in the plan.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteEdgeDeploymentPlanRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteEdgeDeploymentPlanResponse
     */
	public function deleteEdgeDeploymentPlan(
        \OpenAPI\OpenAPI\Models\Operations\DeleteEdgeDeploymentPlanRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteEdgeDeploymentPlanResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteEdgeDeploymentPlan');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteEdgeDeploymentPlanRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteEdgeDeploymentPlanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a stage in an edge deployment plan if (and only if) the stage is inactive.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteEdgeDeploymentStageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteEdgeDeploymentStageResponse
     */
	public function deleteEdgeDeploymentStage(
        \OpenAPI\OpenAPI\Models\Operations\DeleteEdgeDeploymentStageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteEdgeDeploymentStageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteEdgeDeploymentStage');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteEdgeDeploymentStageRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteEdgeDeploymentStageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Deletes an endpoint. SageMaker frees up all of the resources that were deployed when the endpoint was created. </p> <p>SageMaker retires any custom KMS key grants associated with the endpoint, meaning you don't need to use the <a href="http://docs.aws.amazon.com/kms/latest/APIReference/API_RevokeGrant.html">RevokeGrant</a> API call.</p> <p>When you delete your endpoint, SageMaker asynchronously deletes associated endpoint resources such as KMS key grants. You might still see these resources in your account for a few minutes after deleting your endpoint. Do not delete or revoke the permissions for your <code> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html#sagemaker-CreateModel-request-ExecutionRoleArn">ExecutionRoleArn</a> </code>, otherwise SageMaker cannot delete these resources.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteEndpointRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteEndpointResponse
     */
	public function deleteEndpoint(
        \OpenAPI\OpenAPI\Models\Operations\DeleteEndpointRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteEndpointResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteEndpoint');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteEndpointInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteEndpointResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * <p>Deletes an endpoint configuration. The <code>DeleteEndpointConfig</code> API deletes only the specified configuration. It does not delete endpoints created using the configuration. </p> <p>You must not delete an <code>EndpointConfig</code> in use by an endpoint that is live or while the <code>UpdateEndpoint</code> or <code>CreateEndpoint</code> operations are being performed on the endpoint. If you delete the <code>EndpointConfig</code> of an endpoint that is active or being created or updated you may lose visibility into the instance type the endpoint is using. The endpoint must be deleted in order to stop incurring charges.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteEndpointConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteEndpointConfigResponse
     */
	public function deleteEndpointConfig(
        \OpenAPI\OpenAPI\Models\Operations\DeleteEndpointConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteEndpointConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteEndpointConfig');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteEndpointConfigInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteEndpointConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Deletes an SageMaker experiment. All trials associated with the experiment must be deleted first. Use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListTrials.html">ListTrials</a> API to get a list of the trials associated with the experiment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteExperimentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteExperimentResponse
     */
	public function deleteExperiment(
        \OpenAPI\OpenAPI\Models\Operations\DeleteExperimentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteExperimentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteExperiment');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteExperimentRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteExperimentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteExperimentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeleteExperimentResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Delete the <code>FeatureGroup</code> and any data that was written to the <code>OnlineStore</code> of the <code>FeatureGroup</code>. Data cannot be accessed from the <code>OnlineStore</code> immediately after <code>DeleteFeatureGroup</code> is called. </p> <p>Data written into the <code>OfflineStore</code> will not be deleted. The Amazon Web Services Glue database and tables that are automatically created for your <code>OfflineStore</code> are not deleted. </p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFeatureGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteFeatureGroupResponse
     */
	public function deleteFeatureGroup(
        \OpenAPI\OpenAPI\Models\Operations\DeleteFeatureGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteFeatureGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteFeatureGroup');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteFeatureGroupRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteFeatureGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified flow definition.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFlowDefinitionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteFlowDefinitionResponse
     */
	public function deleteFlowDefinition(
        \OpenAPI\OpenAPI\Models\Operations\DeleteFlowDefinitionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteFlowDefinitionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteFlowDefinition');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteFlowDefinitionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteFlowDefinitionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteFlowDefinitionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Delete a hub.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteHubRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteHubResponse
     */
	public function deleteHub(
        \OpenAPI\OpenAPI\Models\Operations\DeleteHubRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteHubResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteHub');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteHubRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteHubResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Delete the contents of a hub.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteHubContentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteHubContentResponse
     */
	public function deleteHubContent(
        \OpenAPI\OpenAPI\Models\Operations\DeleteHubContentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteHubContentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteHubContent');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteHubContentRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteHubContentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Use this operation to delete a human task user interface (worker task template).</p> <p> To see a list of human task user interfaces (work task templates) in your account, use <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListHumanTaskUis.html">ListHumanTaskUis</a>. When you delete a worker task template, it no longer appears when you call <code>ListHumanTaskUis</code>.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteHumanTaskUiRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteHumanTaskUiResponse
     */
	public function deleteHumanTaskUi(
        \OpenAPI\OpenAPI\Models\Operations\DeleteHumanTaskUiRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteHumanTaskUiResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteHumanTaskUi');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteHumanTaskUiRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteHumanTaskUiResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteHumanTaskUiResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a SageMaker image and all versions of the image. The container images aren't deleted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteImageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteImageResponse
     */
	public function deleteImage(
        \OpenAPI\OpenAPI\Models\Operations\DeleteImageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteImageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteImage');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteImageRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteImageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteImageResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a version of a SageMaker image. The container image the version represents isn't deleted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteImageVersionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteImageVersionResponse
     */
	public function deleteImageVersion(
        \OpenAPI\OpenAPI\Models\Operations\DeleteImageVersionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteImageVersionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteImageVersion');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteImageVersionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteImageVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteImageVersionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Deletes an inference experiment.</p> <note> <p> This operation does not delete your endpoint, variants, or any underlying resources. This operation only deletes the metadata of your experiment. </p> </note>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteInferenceExperimentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteInferenceExperimentResponse
     */
	public function deleteInferenceExperiment(
        \OpenAPI\OpenAPI\Models\Operations\DeleteInferenceExperimentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteInferenceExperimentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteInferenceExperiment');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteInferenceExperimentRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteInferenceExperimentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteInferenceExperimentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeleteInferenceExperimentResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conflictException = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a model. The <code>DeleteModel</code> API deletes only the model entry that was created in SageMaker when you called the <code>CreateModel</code> API. It does not delete model artifacts, inference code, or the IAM role that you specified when creating the model. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteModelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteModelResponse
     */
	public function deleteModel(
        \OpenAPI\OpenAPI\Models\Operations\DeleteModelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteModelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteModel');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteModelInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteModelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Deletes an Amazon SageMaker model bias job definition.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteModelBiasJobDefinitionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteModelBiasJobDefinitionResponse
     */
	public function deleteModelBiasJobDefinition(
        \OpenAPI\OpenAPI\Models\Operations\DeleteModelBiasJobDefinitionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteModelBiasJobDefinitionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteModelBiasJobDefinition');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteModelBiasJobDefinitionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteModelBiasJobDefinitionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an Amazon SageMaker Model Card.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteModelCardRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteModelCardResponse
     */
	public function deleteModelCard(
        \OpenAPI\OpenAPI\Models\Operations\DeleteModelCardRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteModelCardResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteModelCard');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteModelCardRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteModelCardResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conflictException = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an Amazon SageMaker model explainability job definition.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteModelExplainabilityJobDefinitionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteModelExplainabilityJobDefinitionResponse
     */
	public function deleteModelExplainabilityJobDefinition(
        \OpenAPI\OpenAPI\Models\Operations\DeleteModelExplainabilityJobDefinitionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteModelExplainabilityJobDefinitionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteModelExplainabilityJobDefinition');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteModelExplainabilityJobDefinitionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteModelExplainabilityJobDefinitionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Deletes a model package.</p> <p>A model package is used to create SageMaker models or list on Amazon Web Services Marketplace. Buyers can subscribe to model packages listed on Amazon Web Services Marketplace to create models in SageMaker.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteModelPackageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteModelPackageResponse
     */
	public function deleteModelPackage(
        \OpenAPI\OpenAPI\Models\Operations\DeleteModelPackageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteModelPackageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteModelPackage');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteModelPackageInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteModelPackageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conflictException = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified model group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteModelPackageGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteModelPackageGroupResponse
     */
	public function deleteModelPackageGroup(
        \OpenAPI\OpenAPI\Models\Operations\DeleteModelPackageGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteModelPackageGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteModelPackageGroup');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteModelPackageGroupInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteModelPackageGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conflictException = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a model group resource policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteModelPackageGroupPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteModelPackageGroupPolicyResponse
     */
	public function deleteModelPackageGroupPolicy(
        \OpenAPI\OpenAPI\Models\Operations\DeleteModelPackageGroupPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteModelPackageGroupPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteModelPackageGroupPolicy');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteModelPackageGroupPolicyInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteModelPackageGroupPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Deletes the secified model quality monitoring job definition.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteModelQualityJobDefinitionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteModelQualityJobDefinitionResponse
     */
	public function deleteModelQualityJobDefinition(
        \OpenAPI\OpenAPI\Models\Operations\DeleteModelQualityJobDefinitionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteModelQualityJobDefinitionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteModelQualityJobDefinition');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteModelQualityJobDefinitionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteModelQualityJobDefinitionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a monitoring schedule. Also stops the schedule had not already been stopped. This does not delete the job execution history of the monitoring schedule. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMonitoringScheduleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteMonitoringScheduleResponse
     */
	public function deleteMonitoringSchedule(
        \OpenAPI\OpenAPI\Models\Operations\DeleteMonitoringScheduleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteMonitoringScheduleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteMonitoringSchedule');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteMonitoringScheduleRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteMonitoringScheduleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p> Deletes an SageMaker notebook instance. Before you can delete a notebook instance, you must call the <code>StopNotebookInstance</code> API. </p> <important> <p>When you delete a notebook instance, you lose all of your data. SageMaker removes the ML compute instance, and deletes the ML storage volume and the network interface associated with the notebook instance. </p> </important>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNotebookInstanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNotebookInstanceResponse
     */
	public function deleteNotebookInstance(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNotebookInstanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNotebookInstanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteNotebookInstance');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteNotebookInstanceInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNotebookInstanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Deletes a notebook instance lifecycle configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNotebookInstanceLifecycleConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNotebookInstanceLifecycleConfigResponse
     */
	public function deleteNotebookInstanceLifecycleConfig(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNotebookInstanceLifecycleConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNotebookInstanceLifecycleConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteNotebookInstanceLifecycleConfig');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteNotebookInstanceLifecycleConfigInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNotebookInstanceLifecycleConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Deletes a pipeline if there are no running instances of the pipeline. To delete a pipeline, you must stop all running instances of the pipeline using the <code>StopPipelineExecution</code> API. When you delete a pipeline, all instances of the pipeline are deleted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePipelineRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletePipelineResponse
     */
	public function deletePipeline(
        \OpenAPI\OpenAPI\Models\Operations\DeletePipelineRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletePipelineResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeletePipeline');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deletePipelineRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletePipelineResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deletePipelineResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeletePipelineResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteProjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteProjectResponse
     */
	public function deleteProject(
        \OpenAPI\OpenAPI\Models\Operations\DeleteProjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteProjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteProject');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteProjectInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteProjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conflictException = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Used to delete a space.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpaceResponse
     */
	public function deleteSpace(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteSpace');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteSpaceRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the Studio Lifecycle Configuration. In order to delete the Lifecycle Configuration, there must be no running apps using the Lifecycle Configuration. You must also remove the Lifecycle Configuration from UserSettings in all Domains and UserProfiles.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteStudioLifecycleConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteStudioLifecycleConfigResponse
     */
	public function deleteStudioLifecycleConfig(
        \OpenAPI\OpenAPI\Models\Operations\DeleteStudioLifecycleConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteStudioLifecycleConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteStudioLifecycleConfig');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteStudioLifecycleConfigRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteStudioLifecycleConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Deletes the specified tags from an SageMaker resource.</p> <p>To list a resource's tags, use the <code>ListTags</code> API. </p> <note> <p>When you call this API to delete tags from a hyperparameter tuning job, the deleted tags are not removed from training jobs that the hyperparameter tuning job launched before you called this API.</p> </note> <note> <p>When you call this API to delete tags from a SageMaker Studio Domain or User Profile, the deleted tags are not removed from Apps that the SageMaker Studio Domain or User Profile launched before you called this API.</p> </note>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTagsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteTagsResponse
     */
	public function deleteTags(
        \OpenAPI\OpenAPI\Models\Operations\DeleteTagsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteTags');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteTagsInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteTagsOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified trial. All trial components that make up the trial must be deleted first. Use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrialComponent.html">DescribeTrialComponent</a> API to get the list of trial components.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTrialRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteTrialResponse
     */
	public function deleteTrial(
        \OpenAPI\OpenAPI\Models\Operations\DeleteTrialRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteTrialResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteTrial');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteTrialRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteTrialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteTrialResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeleteTrialResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified trial component. A trial component must be disassociated from all trials before the trial component can be deleted. To disassociate a trial component from a trial, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DisassociateTrialComponent.html">DisassociateTrialComponent</a> API.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTrialComponentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteTrialComponentResponse
     */
	public function deleteTrialComponent(
        \OpenAPI\OpenAPI\Models\Operations\DeleteTrialComponentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteTrialComponentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteTrialComponent');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteTrialComponentRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteTrialComponentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteTrialComponentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeleteTrialComponentResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a user profile. When a user profile is deleted, the user loses access to their EFS volume, including data, notebooks, and other artifacts.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUserProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUserProfileResponse
     */
	public function deleteUserProfile(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUserProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUserProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteUserProfile');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteUserProfileRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUserProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Use this operation to delete a workforce.</p> <p>If you want to create a new workforce in an Amazon Web Services Region where a workforce already exists, use this operation to delete the existing workforce and then use <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateWorkforce.html">CreateWorkforce</a> to create a new workforce.</p> <important> <p>If a private workforce contains one or more work teams, you must use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteWorkteam.html">DeleteWorkteam</a> operation to delete all work teams before you delete the workforce. If you try to delete a workforce that contains one or more work teams, you will recieve a <code>ResourceInUse</code> error.</p> </important>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWorkforceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteWorkforceResponse
     */
	public function deleteWorkforce(
        \OpenAPI\OpenAPI\Models\Operations\DeleteWorkforceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteWorkforceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteWorkforce');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteWorkforceRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteWorkforceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteWorkforceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an existing work team. This operation can't be undone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWorkteamRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteWorkteamResponse
     */
	public function deleteWorkteam(
        \OpenAPI\OpenAPI\Models\Operations\DeleteWorkteamRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteWorkteamResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeleteWorkteam');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteWorkteamRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteWorkteamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteWorkteamResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeleteWorkteamResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deregisters the specified devices. After you deregister a device, you will need to re-register the devices.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeregisterDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeregisterDevicesResponse
     */
	public function deregisterDevices(
        \OpenAPI\OpenAPI\Models\Operations\DeregisterDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeregisterDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DeregisterDevices');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deregisterDevicesRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeregisterDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Describes an action.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeActionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeActionResponse
     */
	public function describeAction(
        \OpenAPI\OpenAPI\Models\Operations\DescribeActionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeActionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeAction');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeActionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeActionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeActionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeActionResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a description of the specified algorithm that is in your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeAlgorithmRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeAlgorithmResponse
     */
	public function describeAlgorithm(
        \OpenAPI\OpenAPI\Models\Operations\DescribeAlgorithmRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeAlgorithmResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeAlgorithm');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeAlgorithmInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeAlgorithmResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeAlgorithmOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeAlgorithmOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Describes the app.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeAppRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeAppResponse
     */
	public function describeApp(
        \OpenAPI\OpenAPI\Models\Operations\DescribeAppRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeAppResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeApp');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeAppRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeAppResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeAppResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeAppResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Describes an AppImageConfig.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeAppImageConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeAppImageConfigResponse
     */
	public function describeAppImageConfig(
        \OpenAPI\OpenAPI\Models\Operations\DescribeAppImageConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeAppImageConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeAppImageConfig');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeAppImageConfigRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeAppImageConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeAppImageConfigResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeAppImageConfigResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Describes an artifact.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeArtifactRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeArtifactResponse
     */
	public function describeArtifact(
        \OpenAPI\OpenAPI\Models\Operations\DescribeArtifactRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeArtifactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeArtifact');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeArtifactRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeArtifactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeArtifactResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeArtifactResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns information about an Amazon SageMaker AutoML job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeAutoMLJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeAutoMLJobResponse
     */
	public function describeAutoMLJob(
        \OpenAPI\OpenAPI\Models\Operations\DescribeAutoMLJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeAutoMLJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeAutoMLJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeAutoMLJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeAutoMLJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeAutoMLJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeAutoMLJobResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Returns information about an Amazon SageMaker AutoML V2 job.</p> <note> <p>This API action is callable through SageMaker Canvas only. Calling it directly from the CLI or an SDK results in an error.</p> </note>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeAutoMLJobV2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeAutoMLJobV2Response
     */
	public function describeAutoMLJobV2(
        \OpenAPI\OpenAPI\Models\Operations\DescribeAutoMLJobV2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeAutoMLJobV2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeAutoMLJobV2');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeAutoMLJobV2Request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeAutoMLJobV2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeAutoMLJobV2Response = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeAutoMLJobV2Response', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets details about the specified Git repository.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeCodeRepositoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeCodeRepositoryResponse
     */
	public function describeCodeRepository(
        \OpenAPI\OpenAPI\Models\Operations\DescribeCodeRepositoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeCodeRepositoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeCodeRepository');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeCodeRepositoryInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeCodeRepositoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeCodeRepositoryOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeCodeRepositoryOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Returns information about a model compilation job.</p> <p>To create a model compilation job, use <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateCompilationJob.html">CreateCompilationJob</a>. To get information about multiple model compilation jobs, use <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListCompilationJobs.html">ListCompilationJobs</a>.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeCompilationJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeCompilationJobResponse
     */
	public function describeCompilationJob(
        \OpenAPI\OpenAPI\Models\Operations\DescribeCompilationJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeCompilationJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeCompilationJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeCompilationJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeCompilationJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeCompilationJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeCompilationJobResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Describes a context.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeContextRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeContextResponse
     */
	public function describeContext(
        \OpenAPI\OpenAPI\Models\Operations\DescribeContextRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeContextResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeContext');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeContextRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeContextResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeContextResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeContextResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the details of a data quality monitoring job definition.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeDataQualityJobDefinitionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeDataQualityJobDefinitionResponse
     */
	public function describeDataQualityJobDefinition(
        \OpenAPI\OpenAPI\Models\Operations\DescribeDataQualityJobDefinitionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeDataQualityJobDefinitionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeDataQualityJobDefinition');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeDataQualityJobDefinitionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeDataQualityJobDefinitionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeDataQualityJobDefinitionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeDataQualityJobDefinitionResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Describes the device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeDeviceResponse
     */
	public function describeDevice(
        \OpenAPI\OpenAPI\Models\Operations\DescribeDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeDevice');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeDeviceRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeDeviceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeDeviceResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * A description of the fleet the device belongs to.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeDeviceFleetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeDeviceFleetResponse
     */
	public function describeDeviceFleet(
        \OpenAPI\OpenAPI\Models\Operations\DescribeDeviceFleetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeDeviceFleetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeDeviceFleet');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeDeviceFleetRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeDeviceFleetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeDeviceFleetResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeDeviceFleetResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * The description of the domain.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeDomainRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeDomainResponse
     */
	public function describeDomain(
        \OpenAPI\OpenAPI\Models\Operations\DescribeDomainRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeDomainResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeDomain');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeDomainRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeDomainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeDomainResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeDomainResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Describes an edge deployment plan with deployment status per stage.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeEdgeDeploymentPlanRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeEdgeDeploymentPlanResponse
     */
	public function describeEdgeDeploymentPlan(
        \OpenAPI\OpenAPI\Models\Operations\DescribeEdgeDeploymentPlanRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeEdgeDeploymentPlanResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeEdgeDeploymentPlan');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeEdgeDeploymentPlanRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeEdgeDeploymentPlanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeEdgeDeploymentPlanResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeEdgeDeploymentPlanResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * A description of edge packaging jobs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeEdgePackagingJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeEdgePackagingJobResponse
     */
	public function describeEdgePackagingJob(
        \OpenAPI\OpenAPI\Models\Operations\DescribeEdgePackagingJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeEdgePackagingJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeEdgePackagingJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeEdgePackagingJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeEdgePackagingJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeEdgePackagingJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeEdgePackagingJobResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the description of an endpoint.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeEndpointRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeEndpointResponse
     */
	public function describeEndpoint(
        \OpenAPI\OpenAPI\Models\Operations\DescribeEndpointRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeEndpointResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeEndpoint');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeEndpointInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeEndpointResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeEndpointOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeEndpointOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the description of an endpoint configuration created using the <code>CreateEndpointConfig</code> API.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeEndpointConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeEndpointConfigResponse
     */
	public function describeEndpointConfig(
        \OpenAPI\OpenAPI\Models\Operations\DescribeEndpointConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeEndpointConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeEndpointConfig');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeEndpointConfigInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeEndpointConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeEndpointConfigOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeEndpointConfigOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Provides a list of an experiment's properties.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeExperimentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeExperimentResponse
     */
	public function describeExperiment(
        \OpenAPI\OpenAPI\Models\Operations\DescribeExperimentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeExperimentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeExperiment');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeExperimentRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeExperimentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeExperimentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeExperimentResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Use this operation to describe a <code>FeatureGroup</code>. The response includes information on the creation time, <code>FeatureGroup</code> name, the unique identifier for each <code>FeatureGroup</code>, and more.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeFeatureGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeFeatureGroupResponse
     */
	public function describeFeatureGroup(
        \OpenAPI\OpenAPI\Models\Operations\DescribeFeatureGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeFeatureGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeFeatureGroup');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeFeatureGroupRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeFeatureGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeFeatureGroupResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeFeatureGroupResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Shows the metadata for a feature within a feature group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeFeatureMetadataRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeFeatureMetadataResponse
     */
	public function describeFeatureMetadata(
        \OpenAPI\OpenAPI\Models\Operations\DescribeFeatureMetadataRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeFeatureMetadataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeFeatureMetadata');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeFeatureMetadataRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeFeatureMetadataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeFeatureMetadataResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeFeatureMetadataResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns information about the specified flow definition.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeFlowDefinitionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeFlowDefinitionResponse
     */
	public function describeFlowDefinition(
        \OpenAPI\OpenAPI\Models\Operations\DescribeFlowDefinitionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeFlowDefinitionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeFlowDefinition');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeFlowDefinitionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeFlowDefinitionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeFlowDefinitionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeFlowDefinitionResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Describe a hub.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeHubRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeHubResponse
     */
	public function describeHub(
        \OpenAPI\OpenAPI\Models\Operations\DescribeHubRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeHubResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeHub');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeHubRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeHubResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeHubResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeHubResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Describe the content of a hub.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeHubContentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeHubContentResponse
     */
	public function describeHubContent(
        \OpenAPI\OpenAPI\Models\Operations\DescribeHubContentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeHubContentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeHubContent');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeHubContentRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeHubContentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeHubContentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeHubContentResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns information about the requested human task user interface (worker task template).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeHumanTaskUiRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeHumanTaskUiResponse
     */
	public function describeHumanTaskUi(
        \OpenAPI\OpenAPI\Models\Operations\DescribeHumanTaskUiRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeHumanTaskUiResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeHumanTaskUi');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeHumanTaskUiRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeHumanTaskUiResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeHumanTaskUiResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeHumanTaskUiResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a description of a hyperparameter tuning job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeHyperParameterTuningJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeHyperParameterTuningJobResponse
     */
	public function describeHyperParameterTuningJob(
        \OpenAPI\OpenAPI\Models\Operations\DescribeHyperParameterTuningJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeHyperParameterTuningJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeHyperParameterTuningJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeHyperParameterTuningJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeHyperParameterTuningJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeHyperParameterTuningJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeHyperParameterTuningJobResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Describes a SageMaker image.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeImageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeImageResponse
     */
	public function describeImage(
        \OpenAPI\OpenAPI\Models\Operations\DescribeImageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeImageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeImage');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeImageRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeImageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeImageResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeImageResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Describes a version of a SageMaker image.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeImageVersionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeImageVersionResponse
     */
	public function describeImageVersion(
        \OpenAPI\OpenAPI\Models\Operations\DescribeImageVersionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeImageVersionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeImageVersion');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeImageVersionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeImageVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeImageVersionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeImageVersionResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns details about an inference experiment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeInferenceExperimentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeInferenceExperimentResponse
     */
	public function describeInferenceExperiment(
        \OpenAPI\OpenAPI\Models\Operations\DescribeInferenceExperimentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeInferenceExperimentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeInferenceExperiment');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeInferenceExperimentRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeInferenceExperimentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeInferenceExperimentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeInferenceExperimentResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Provides the results of the Inference Recommender job. One or more recommendation jobs are returned.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeInferenceRecommendationsJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeInferenceRecommendationsJobResponse
     */
	public function describeInferenceRecommendationsJob(
        \OpenAPI\OpenAPI\Models\Operations\DescribeInferenceRecommendationsJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeInferenceRecommendationsJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeInferenceRecommendationsJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeInferenceRecommendationsJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeInferenceRecommendationsJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeInferenceRecommendationsJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeInferenceRecommendationsJobResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets information about a labeling job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeLabelingJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeLabelingJobResponse
     */
	public function describeLabelingJob(
        \OpenAPI\OpenAPI\Models\Operations\DescribeLabelingJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeLabelingJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeLabelingJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeLabelingJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeLabelingJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeLabelingJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeLabelingJobResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Provides a list of properties for the requested lineage group. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/xaccount-lineage-tracking.html"> Cross-Account Lineage Tracking </a> in the <i>Amazon SageMaker Developer Guide</i>.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeLineageGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeLineageGroupResponse
     */
	public function describeLineageGroup(
        \OpenAPI\OpenAPI\Models\Operations\DescribeLineageGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeLineageGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeLineageGroup');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeLineageGroupRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeLineageGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeLineageGroupResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeLineageGroupResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Describes a model that you created using the <code>CreateModel</code> API.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeModelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeModelResponse
     */
	public function describeModel(
        \OpenAPI\OpenAPI\Models\Operations\DescribeModelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeModelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeModel');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeModelInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeModelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeModelOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeModelOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a description of a model bias job definition.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeModelBiasJobDefinitionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeModelBiasJobDefinitionResponse
     */
	public function describeModelBiasJobDefinition(
        \OpenAPI\OpenAPI\Models\Operations\DescribeModelBiasJobDefinitionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeModelBiasJobDefinitionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeModelBiasJobDefinition');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeModelBiasJobDefinitionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeModelBiasJobDefinitionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeModelBiasJobDefinitionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeModelBiasJobDefinitionResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Describes the content, creation time, and security configuration of an Amazon SageMaker Model Card.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeModelCardRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeModelCardResponse
     */
	public function describeModelCard(
        \OpenAPI\OpenAPI\Models\Operations\DescribeModelCardRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeModelCardResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeModelCard');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeModelCardRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeModelCardResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeModelCardResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeModelCardResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Describes an Amazon SageMaker Model Card export job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeModelCardExportJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeModelCardExportJobResponse
     */
	public function describeModelCardExportJob(
        \OpenAPI\OpenAPI\Models\Operations\DescribeModelCardExportJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeModelCardExportJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeModelCardExportJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeModelCardExportJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeModelCardExportJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeModelCardExportJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeModelCardExportJobResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a description of a model explainability job definition.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeModelExplainabilityJobDefinitionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeModelExplainabilityJobDefinitionResponse
     */
	public function describeModelExplainabilityJobDefinition(
        \OpenAPI\OpenAPI\Models\Operations\DescribeModelExplainabilityJobDefinitionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeModelExplainabilityJobDefinitionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeModelExplainabilityJobDefinition');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeModelExplainabilityJobDefinitionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeModelExplainabilityJobDefinitionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeModelExplainabilityJobDefinitionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeModelExplainabilityJobDefinitionResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Returns a description of the specified model package, which is used to create SageMaker models or list them on Amazon Web Services Marketplace.</p> <p>To create models in SageMaker, buyers can subscribe to model packages listed on Amazon Web Services Marketplace.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeModelPackageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeModelPackageResponse
     */
	public function describeModelPackage(
        \OpenAPI\OpenAPI\Models\Operations\DescribeModelPackageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeModelPackageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeModelPackage');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeModelPackageInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeModelPackageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeModelPackageOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeModelPackageOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a description for the specified model group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeModelPackageGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeModelPackageGroupResponse
     */
	public function describeModelPackageGroup(
        \OpenAPI\OpenAPI\Models\Operations\DescribeModelPackageGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeModelPackageGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeModelPackageGroup');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeModelPackageGroupInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeModelPackageGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeModelPackageGroupOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeModelPackageGroupOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a description of a model quality job definition.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeModelQualityJobDefinitionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeModelQualityJobDefinitionResponse
     */
	public function describeModelQualityJobDefinition(
        \OpenAPI\OpenAPI\Models\Operations\DescribeModelQualityJobDefinitionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeModelQualityJobDefinitionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeModelQualityJobDefinition');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeModelQualityJobDefinitionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeModelQualityJobDefinitionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeModelQualityJobDefinitionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeModelQualityJobDefinitionResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Describes the schedule for a monitoring job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeMonitoringScheduleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeMonitoringScheduleResponse
     */
	public function describeMonitoringSchedule(
        \OpenAPI\OpenAPI\Models\Operations\DescribeMonitoringScheduleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeMonitoringScheduleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeMonitoringSchedule');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeMonitoringScheduleRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeMonitoringScheduleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeMonitoringScheduleResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeMonitoringScheduleResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns information about a notebook instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeNotebookInstanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeNotebookInstanceResponse
     */
	public function describeNotebookInstance(
        \OpenAPI\OpenAPI\Models\Operations\DescribeNotebookInstanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeNotebookInstanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeNotebookInstance');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeNotebookInstanceInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeNotebookInstanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeNotebookInstanceOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeNotebookInstanceOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Returns a description of a notebook instance lifecycle configuration.</p> <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step 2.1: (Optional) Customize a Notebook Instance</a>.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeNotebookInstanceLifecycleConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeNotebookInstanceLifecycleConfigResponse
     */
	public function describeNotebookInstanceLifecycleConfig(
        \OpenAPI\OpenAPI\Models\Operations\DescribeNotebookInstanceLifecycleConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeNotebookInstanceLifecycleConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeNotebookInstanceLifecycleConfig');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeNotebookInstanceLifecycleConfigInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeNotebookInstanceLifecycleConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeNotebookInstanceLifecycleConfigOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeNotebookInstanceLifecycleConfigOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Describes the details of a pipeline.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribePipelineRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribePipelineResponse
     */
	public function describePipeline(
        \OpenAPI\OpenAPI\Models\Operations\DescribePipelineRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribePipelineResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribePipeline');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describePipelineRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribePipelineResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describePipelineResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribePipelineResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Describes the details of an execution's pipeline definition.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribePipelineDefinitionForExecutionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribePipelineDefinitionForExecutionResponse
     */
	public function describePipelineDefinitionForExecution(
        \OpenAPI\OpenAPI\Models\Operations\DescribePipelineDefinitionForExecutionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribePipelineDefinitionForExecutionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribePipelineDefinitionForExecution');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describePipelineDefinitionForExecutionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribePipelineDefinitionForExecutionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describePipelineDefinitionForExecutionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribePipelineDefinitionForExecutionResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Describes the details of a pipeline execution.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribePipelineExecutionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribePipelineExecutionResponse
     */
	public function describePipelineExecution(
        \OpenAPI\OpenAPI\Models\Operations\DescribePipelineExecutionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribePipelineExecutionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribePipelineExecution');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describePipelineExecutionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribePipelineExecutionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describePipelineExecutionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribePipelineExecutionResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a description of a processing job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeProcessingJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeProcessingJobResponse
     */
	public function describeProcessingJob(
        \OpenAPI\OpenAPI\Models\Operations\DescribeProcessingJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeProcessingJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeProcessingJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeProcessingJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeProcessingJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeProcessingJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeProcessingJobResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Describes the details of a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeProjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeProjectResponse
     */
	public function describeProject(
        \OpenAPI\OpenAPI\Models\Operations\DescribeProjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeProjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeProject');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeProjectInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeProjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeProjectOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeProjectOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Describes the space.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeSpaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeSpaceResponse
     */
	public function describeSpace(
        \OpenAPI\OpenAPI\Models\Operations\DescribeSpaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeSpaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeSpace');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeSpaceRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeSpaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeSpaceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeSpaceResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Describes the Studio Lifecycle Configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeStudioLifecycleConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeStudioLifecycleConfigResponse
     */
	public function describeStudioLifecycleConfig(
        \OpenAPI\OpenAPI\Models\Operations\DescribeStudioLifecycleConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeStudioLifecycleConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeStudioLifecycleConfig');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeStudioLifecycleConfigRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeStudioLifecycleConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeStudioLifecycleConfigResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeStudioLifecycleConfigResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets information about a work team provided by a vendor. It returns details about the subscription with a vendor in the Amazon Web Services Marketplace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeSubscribedWorkteamRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeSubscribedWorkteamResponse
     */
	public function describeSubscribedWorkteam(
        \OpenAPI\OpenAPI\Models\Operations\DescribeSubscribedWorkteamRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeSubscribedWorkteamResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeSubscribedWorkteam');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeSubscribedWorkteamRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeSubscribedWorkteamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeSubscribedWorkteamResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeSubscribedWorkteamResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Returns information about a training job. </p> <p>Some of the attributes below only appear if the training job successfully starts. If the training job fails, <code>TrainingJobStatus</code> is <code>Failed</code> and, depending on the <code>FailureReason</code>, attributes like <code>TrainingStartTime</code>, <code>TrainingTimeInSeconds</code>, <code>TrainingEndTime</code>, and <code>BillableTimeInSeconds</code> may not be present in the response.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeTrainingJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeTrainingJobResponse
     */
	public function describeTrainingJob(
        \OpenAPI\OpenAPI\Models\Operations\DescribeTrainingJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeTrainingJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeTrainingJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeTrainingJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeTrainingJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeTrainingJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeTrainingJobResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns information about a transform job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeTransformJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeTransformJobResponse
     */
	public function describeTransformJob(
        \OpenAPI\OpenAPI\Models\Operations\DescribeTransformJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeTransformJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeTransformJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeTransformJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeTransformJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeTransformJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeTransformJobResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Provides a list of a trial's properties.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeTrialRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeTrialResponse
     */
	public function describeTrial(
        \OpenAPI\OpenAPI\Models\Operations\DescribeTrialRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeTrialResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeTrial');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeTrialRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeTrialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeTrialResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeTrialResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Provides a list of a trials component's properties.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeTrialComponentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeTrialComponentResponse
     */
	public function describeTrialComponent(
        \OpenAPI\OpenAPI\Models\Operations\DescribeTrialComponentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeTrialComponentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeTrialComponent');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeTrialComponentRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeTrialComponentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeTrialComponentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeTrialComponentResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Describes a user profile. For more information, see <code>CreateUserProfile</code>.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeUserProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeUserProfileResponse
     */
	public function describeUserProfile(
        \OpenAPI\OpenAPI\Models\Operations\DescribeUserProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeUserProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeUserProfile');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeUserProfileRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeUserProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeUserProfileResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeUserProfileResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Lists private workforce information, including workforce name, Amazon Resource Name (ARN), and, if applicable, allowed IP address ranges (<a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>). Allowable IP address ranges are the IP addresses that workers can use to access tasks. </p> <important> <p>This operation applies only to private workforces.</p> </important>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeWorkforceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeWorkforceResponse
     */
	public function describeWorkforce(
        \OpenAPI\OpenAPI\Models\Operations\DescribeWorkforceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeWorkforceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeWorkforce');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeWorkforceRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeWorkforceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeWorkforceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeWorkforceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets information about a specific work team. You can see information such as the create date, the last updated date, membership information, and the work team's Amazon Resource Name (ARN).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeWorkteamRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeWorkteamResponse
     */
	public function describeWorkteam(
        \OpenAPI\OpenAPI\Models\Operations\DescribeWorkteamRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeWorkteamResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DescribeWorkteam');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "describeWorkteamRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeWorkteamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->describeWorkteamResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescribeWorkteamResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Disables using Service Catalog in SageMaker. Service Catalog is used to create SageMaker projects.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisableSagemakerServicecatalogPortfolioRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DisableSagemakerServicecatalogPortfolioResponse
     */
	public function disableSagemakerServicecatalogPortfolio(
        \OpenAPI\OpenAPI\Models\Operations\DisableSagemakerServicecatalogPortfolioRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DisableSagemakerServicecatalogPortfolioResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DisableSagemakerServicecatalogPortfolio');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisableSagemakerServicecatalogPortfolioResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->disableSagemakerServicecatalogPortfolioOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Disassociates a trial component from a trial. This doesn't effect other trials the component is associated with. Before you can delete a component, you must disassociate the component from all trials it is associated with. To associate a trial component with a trial, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AssociateTrialComponent.html">AssociateTrialComponent</a> API.</p> <p>To get a list of the trials a component is associated with, use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API. Specify <code>ExperimentTrialComponent</code> for the <code>Resource</code> parameter. The list appears in the response under <code>Results.TrialComponent.Parents</code>.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisassociateTrialComponentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DisassociateTrialComponentResponse
     */
	public function disassociateTrialComponent(
        \OpenAPI\OpenAPI\Models\Operations\DisassociateTrialComponentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DisassociateTrialComponentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.DisassociateTrialComponent');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "disassociateTrialComponentRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisassociateTrialComponentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->disassociateTrialComponentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DisassociateTrialComponentResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enables using Service Catalog in SageMaker. Service Catalog is used to create SageMaker projects.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnableSagemakerServicecatalogPortfolioRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnableSagemakerServicecatalogPortfolioResponse
     */
	public function enableSagemakerServicecatalogPortfolio(
        \OpenAPI\OpenAPI\Models\Operations\EnableSagemakerServicecatalogPortfolioRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnableSagemakerServicecatalogPortfolioResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.EnableSagemakerServicecatalogPortfolio');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnableSagemakerServicecatalogPortfolioResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enableSagemakerServicecatalogPortfolioOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Describes a fleet.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceFleetReportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceFleetReportResponse
     */
	public function getDeviceFleetReport(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceFleetReportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceFleetReportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.GetDeviceFleetReport');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "getDeviceFleetReportRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceFleetReportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceFleetReportResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetDeviceFleetReportResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * The resource policy for the lineage group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLineageGroupPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLineageGroupPolicyResponse
     */
	public function getLineageGroupPolicy(
        \OpenAPI\OpenAPI\Models\Operations\GetLineageGroupPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLineageGroupPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.GetLineageGroupPolicy');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "getLineageGroupPolicyRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLineageGroupPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getLineageGroupPolicyResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetLineageGroupPolicyResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a resource policy that manages access for a model group. For information about resource policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html">Identity-based policies and resource-based policies</a> in the <i>Amazon Web Services Identity and Access Management User Guide.</i>.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetModelPackageGroupPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetModelPackageGroupPolicyResponse
     */
	public function getModelPackageGroupPolicy(
        \OpenAPI\OpenAPI\Models\Operations\GetModelPackageGroupPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetModelPackageGroupPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.GetModelPackageGroupPolicy');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "getModelPackageGroupPolicyInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetModelPackageGroupPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getModelPackageGroupPolicyOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetModelPackageGroupPolicyOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the status of Service Catalog in SageMaker. Service Catalog is used to create SageMaker projects.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSagemakerServicecatalogPortfolioStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSagemakerServicecatalogPortfolioStatusResponse
     */
	public function getSagemakerServicecatalogPortfolioStatus(
        \OpenAPI\OpenAPI\Models\Operations\GetSagemakerServicecatalogPortfolioStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSagemakerServicecatalogPortfolioStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.GetSagemakerServicecatalogPortfolioStatus');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSagemakerServicecatalogPortfolioStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSagemakerServicecatalogPortfolioStatusOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetSagemakerServicecatalogPortfolioStatusOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * An auto-complete API for the search functionality in the SageMaker console. It returns suggestions of possible matches for the property name to use in <code>Search</code> queries. Provides suggestions for <code>HyperParameters</code>, <code>Tags</code>, and <code>Metrics</code>.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSearchSuggestionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSearchSuggestionsResponse
     */
	public function getSearchSuggestions(
        \OpenAPI\OpenAPI\Models\Operations\GetSearchSuggestionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSearchSuggestionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.GetSearchSuggestions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "getSearchSuggestionsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSearchSuggestionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSearchSuggestionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetSearchSuggestionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Import hub content.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportHubContentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportHubContentResponse
     */
	public function importHubContent(
        \OpenAPI\OpenAPI\Models\Operations\ImportHubContentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportHubContentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ImportHubContent');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "importHubContentRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportHubContentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->importHubContentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImportHubContentResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 482) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the actions in your account and their properties.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListActionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListActionsResponse
     */
	public function listActions(
        \OpenAPI\OpenAPI\Models\Operations\ListActionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListActionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListActions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listActionsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListActionsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListActionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listActionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListActionsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the machine learning algorithms that have been created.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAlgorithmsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAlgorithmsResponse
     */
	public function listAlgorithms(
        \OpenAPI\OpenAPI\Models\Operations\ListAlgorithmsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAlgorithmsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListAlgorithms');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listAlgorithmsInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListAlgorithmsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAlgorithmsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAlgorithmsOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAlgorithmsOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the aliases of a specified image or image version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAliasesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAliasesResponse
     */
	public function listAliases(
        \OpenAPI\OpenAPI\Models\Operations\ListAliasesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAliasesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListAliases');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listAliasesRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListAliasesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAliasesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAliasesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAliasesResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the AppImageConfigs in your account and their properties. The list can be filtered by creation time or modified time, and whether the AppImageConfig name contains a specified string.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAppImageConfigsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAppImageConfigsResponse
     */
	public function listAppImageConfigs(
        \OpenAPI\OpenAPI\Models\Operations\ListAppImageConfigsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAppImageConfigsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListAppImageConfigs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listAppImageConfigsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListAppImageConfigsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAppImageConfigsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAppImageConfigsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAppImageConfigsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists apps.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAppsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAppsResponse
     */
	public function listApps(
        \OpenAPI\OpenAPI\Models\Operations\ListAppsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAppsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListApps');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listAppsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListAppsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAppsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAppsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAppsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the artifacts in your account and their properties.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListArtifactsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListArtifactsResponse
     */
	public function listArtifacts(
        \OpenAPI\OpenAPI\Models\Operations\ListArtifactsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListArtifactsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListArtifacts');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listArtifactsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListArtifactsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListArtifactsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listArtifactsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListArtifactsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the associations in your account and their properties.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAssociationsResponse
     */
	public function listAssociations(
        \OpenAPI\OpenAPI\Models\Operations\ListAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListAssociations');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listAssociationsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListAssociationsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAssociationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAssociationsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Request a list of jobs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAutoMLJobsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAutoMLJobsResponse
     */
	public function listAutoMLJobs(
        \OpenAPI\OpenAPI\Models\Operations\ListAutoMLJobsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAutoMLJobsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListAutoMLJobs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listAutoMLJobsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListAutoMLJobsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAutoMLJobsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAutoMLJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAutoMLJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the candidates created for the job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCandidatesForAutoMLJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCandidatesForAutoMLJobResponse
     */
	public function listCandidatesForAutoMLJob(
        \OpenAPI\OpenAPI\Models\Operations\ListCandidatesForAutoMLJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCandidatesForAutoMLJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListCandidatesForAutoMLJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listCandidatesForAutoMLJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCandidatesForAutoMLJobRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCandidatesForAutoMLJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCandidatesForAutoMLJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCandidatesForAutoMLJobResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a list of the Git repositories in your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCodeRepositoriesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCodeRepositoriesResponse
     */
	public function listCodeRepositories(
        \OpenAPI\OpenAPI\Models\Operations\ListCodeRepositoriesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCodeRepositoriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListCodeRepositories');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listCodeRepositoriesInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCodeRepositoriesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCodeRepositoriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCodeRepositoriesOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCodeRepositoriesOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Lists model compilation jobs that satisfy various filters.</p> <p>To create a model compilation job, use <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateCompilationJob.html">CreateCompilationJob</a>. To get information about a particular model compilation job you have created, use <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeCompilationJob.html">DescribeCompilationJob</a>.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCompilationJobsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCompilationJobsResponse
     */
	public function listCompilationJobs(
        \OpenAPI\OpenAPI\Models\Operations\ListCompilationJobsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCompilationJobsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListCompilationJobs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listCompilationJobsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCompilationJobsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCompilationJobsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCompilationJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCompilationJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the contexts in your account and their properties.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListContextsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListContextsResponse
     */
	public function listContexts(
        \OpenAPI\OpenAPI\Models\Operations\ListContextsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListContextsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListContexts');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listContextsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListContextsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListContextsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listContextsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListContextsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the data quality job definitions in your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDataQualityJobDefinitionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDataQualityJobDefinitionsResponse
     */
	public function listDataQualityJobDefinitions(
        \OpenAPI\OpenAPI\Models\Operations\ListDataQualityJobDefinitionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDataQualityJobDefinitionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListDataQualityJobDefinitions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listDataQualityJobDefinitionsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDataQualityJobDefinitionsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDataQualityJobDefinitionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDataQualityJobDefinitionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListDataQualityJobDefinitionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of devices in the fleet.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDeviceFleetsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDeviceFleetsResponse
     */
	public function listDeviceFleets(
        \OpenAPI\OpenAPI\Models\Operations\ListDeviceFleetsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDeviceFleetsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListDeviceFleets');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listDeviceFleetsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDeviceFleetsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDeviceFleetsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDeviceFleetsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListDeviceFleetsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * A list of devices.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDevicesResponse
     */
	public function listDevices(
        \OpenAPI\OpenAPI\Models\Operations\ListDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListDevices');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listDevicesRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDevicesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDevicesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListDevicesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the domains.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDomainsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDomainsResponse
     */
	public function listDomains(
        \OpenAPI\OpenAPI\Models\Operations\ListDomainsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDomainsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListDomains');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listDomainsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDomainsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDomainsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDomainsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListDomainsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all edge deployment plans.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEdgeDeploymentPlansRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListEdgeDeploymentPlansResponse
     */
	public function listEdgeDeploymentPlans(
        \OpenAPI\OpenAPI\Models\Operations\ListEdgeDeploymentPlansRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListEdgeDeploymentPlansResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListEdgeDeploymentPlans');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listEdgeDeploymentPlansRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListEdgeDeploymentPlansRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListEdgeDeploymentPlansResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEdgeDeploymentPlansResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListEdgeDeploymentPlansResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of edge packaging jobs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEdgePackagingJobsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListEdgePackagingJobsResponse
     */
	public function listEdgePackagingJobs(
        \OpenAPI\OpenAPI\Models\Operations\ListEdgePackagingJobsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListEdgePackagingJobsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListEdgePackagingJobs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listEdgePackagingJobsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListEdgePackagingJobsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListEdgePackagingJobsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEdgePackagingJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListEdgePackagingJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists endpoint configurations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEndpointConfigsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListEndpointConfigsResponse
     */
	public function listEndpointConfigs(
        \OpenAPI\OpenAPI\Models\Operations\ListEndpointConfigsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListEndpointConfigsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListEndpointConfigs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listEndpointConfigsInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListEndpointConfigsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListEndpointConfigsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEndpointConfigsOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListEndpointConfigsOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEndpointsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListEndpointsResponse
     */
	public function listEndpoints(
        \OpenAPI\OpenAPI\Models\Operations\ListEndpointsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListEndpointsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListEndpoints');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listEndpointsInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListEndpointsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListEndpointsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEndpointsOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListEndpointsOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the experiments in your account. The list can be filtered to show only experiments that were created in a specific time range. The list can be sorted by experiment name or creation time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListExperimentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListExperimentsResponse
     */
	public function listExperiments(
        \OpenAPI\OpenAPI\Models\Operations\ListExperimentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListExperimentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListExperiments');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listExperimentsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListExperimentsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListExperimentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listExperimentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListExperimentsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List <code>FeatureGroup</code>s based on given filter and order.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFeatureGroupsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListFeatureGroupsResponse
     */
	public function listFeatureGroups(
        \OpenAPI\OpenAPI\Models\Operations\ListFeatureGroupsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListFeatureGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListFeatureGroups');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listFeatureGroupsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListFeatureGroupsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListFeatureGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFeatureGroupsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListFeatureGroupsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns information about the flow definitions in your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFlowDefinitionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListFlowDefinitionsResponse
     */
	public function listFlowDefinitions(
        \OpenAPI\OpenAPI\Models\Operations\ListFlowDefinitionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListFlowDefinitionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListFlowDefinitions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listFlowDefinitionsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListFlowDefinitionsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListFlowDefinitionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFlowDefinitionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListFlowDefinitionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>List hub content versions.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListHubContentVersionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListHubContentVersionsResponse
     */
	public function listHubContentVersions(
        \OpenAPI\OpenAPI\Models\Operations\ListHubContentVersionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListHubContentVersionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListHubContentVersions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listHubContentVersionsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListHubContentVersionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listHubContentVersionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListHubContentVersionsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>List the contents of a hub.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListHubContentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListHubContentsResponse
     */
	public function listHubContents(
        \OpenAPI\OpenAPI\Models\Operations\ListHubContentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListHubContentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListHubContents');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listHubContentsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListHubContentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listHubContentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListHubContentsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>List all existing hubs.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListHubsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListHubsResponse
     */
	public function listHubs(
        \OpenAPI\OpenAPI\Models\Operations\ListHubsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListHubsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListHubs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listHubsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListHubsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listHubsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListHubsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns information about the human task user interfaces in your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListHumanTaskUisRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListHumanTaskUisResponse
     */
	public function listHumanTaskUis(
        \OpenAPI\OpenAPI\Models\Operations\ListHumanTaskUisRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListHumanTaskUisResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListHumanTaskUis');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listHumanTaskUisRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListHumanTaskUisRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListHumanTaskUisResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listHumanTaskUisResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListHumanTaskUisResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a list of <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobSummary.html">HyperParameterTuningJobSummary</a> objects that describe the hyperparameter tuning jobs launched in your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListHyperParameterTuningJobsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListHyperParameterTuningJobsResponse
     */
	public function listHyperParameterTuningJobs(
        \OpenAPI\OpenAPI\Models\Operations\ListHyperParameterTuningJobsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListHyperParameterTuningJobsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListHyperParameterTuningJobs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listHyperParameterTuningJobsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListHyperParameterTuningJobsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListHyperParameterTuningJobsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listHyperParameterTuningJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListHyperParameterTuningJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the versions of a specified image and their properties. The list can be filtered by creation time or modified time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListImageVersionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListImageVersionsResponse
     */
	public function listImageVersions(
        \OpenAPI\OpenAPI\Models\Operations\ListImageVersionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListImageVersionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListImageVersions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listImageVersionsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListImageVersionsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListImageVersionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listImageVersionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListImageVersionsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the images in your account and their properties. The list can be filtered by creation time or modified time, and whether the image name contains a specified string.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListImagesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListImagesResponse
     */
	public function listImages(
        \OpenAPI\OpenAPI\Models\Operations\ListImagesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListImagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListImages');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listImagesRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListImagesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListImagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listImagesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListImagesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all inference experiments.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInferenceExperimentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListInferenceExperimentsResponse
     */
	public function listInferenceExperiments(
        \OpenAPI\OpenAPI\Models\Operations\ListInferenceExperimentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListInferenceExperimentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListInferenceExperiments');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listInferenceExperimentsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListInferenceExperimentsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListInferenceExperimentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInferenceExperimentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListInferenceExperimentsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Returns a list of the subtasks for an Inference Recommender job.</p> <p>The supported subtasks are benchmarks, which evaluate the performance of your model on different instance types.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInferenceRecommendationsJobStepsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListInferenceRecommendationsJobStepsResponse
     */
	public function listInferenceRecommendationsJobSteps(
        \OpenAPI\OpenAPI\Models\Operations\ListInferenceRecommendationsJobStepsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListInferenceRecommendationsJobStepsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListInferenceRecommendationsJobSteps');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listInferenceRecommendationsJobStepsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListInferenceRecommendationsJobStepsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListInferenceRecommendationsJobStepsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInferenceRecommendationsJobStepsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListInferenceRecommendationsJobStepsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists recommendation jobs that satisfy various filters.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInferenceRecommendationsJobsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListInferenceRecommendationsJobsResponse
     */
	public function listInferenceRecommendationsJobs(
        \OpenAPI\OpenAPI\Models\Operations\ListInferenceRecommendationsJobsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListInferenceRecommendationsJobsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListInferenceRecommendationsJobs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listInferenceRecommendationsJobsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListInferenceRecommendationsJobsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListInferenceRecommendationsJobsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInferenceRecommendationsJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListInferenceRecommendationsJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a list of labeling jobs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListLabelingJobsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListLabelingJobsResponse
     */
	public function listLabelingJobs(
        \OpenAPI\OpenAPI\Models\Operations\ListLabelingJobsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListLabelingJobsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListLabelingJobs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listLabelingJobsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListLabelingJobsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListLabelingJobsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLabelingJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLabelingJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a list of labeling jobs assigned to a specified work team.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListLabelingJobsForWorkteamRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListLabelingJobsForWorkteamResponse
     */
	public function listLabelingJobsForWorkteam(
        \OpenAPI\OpenAPI\Models\Operations\ListLabelingJobsForWorkteamRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListLabelingJobsForWorkteamResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListLabelingJobsForWorkteam');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listLabelingJobsForWorkteamRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListLabelingJobsForWorkteamRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListLabelingJobsForWorkteamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLabelingJobsForWorkteamResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLabelingJobsForWorkteamResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * A list of lineage groups shared with your Amazon Web Services account. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/xaccount-lineage-tracking.html"> Cross-Account Lineage Tracking </a> in the <i>Amazon SageMaker Developer Guide</i>.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListLineageGroupsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListLineageGroupsResponse
     */
	public function listLineageGroups(
        \OpenAPI\OpenAPI\Models\Operations\ListLineageGroupsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListLineageGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListLineageGroups');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listLineageGroupsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListLineageGroupsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListLineageGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLineageGroupsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLineageGroupsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists model bias jobs definitions that satisfy various filters.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListModelBiasJobDefinitionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListModelBiasJobDefinitionsResponse
     */
	public function listModelBiasJobDefinitions(
        \OpenAPI\OpenAPI\Models\Operations\ListModelBiasJobDefinitionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListModelBiasJobDefinitionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListModelBiasJobDefinitions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listModelBiasJobDefinitionsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListModelBiasJobDefinitionsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListModelBiasJobDefinitionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listModelBiasJobDefinitionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListModelBiasJobDefinitionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the export jobs for the Amazon SageMaker Model Card.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListModelCardExportJobsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListModelCardExportJobsResponse
     */
	public function listModelCardExportJobs(
        \OpenAPI\OpenAPI\Models\Operations\ListModelCardExportJobsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListModelCardExportJobsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListModelCardExportJobs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listModelCardExportJobsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListModelCardExportJobsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListModelCardExportJobsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listModelCardExportJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListModelCardExportJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List existing versions of an Amazon SageMaker Model Card.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListModelCardVersionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListModelCardVersionsResponse
     */
	public function listModelCardVersions(
        \OpenAPI\OpenAPI\Models\Operations\ListModelCardVersionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListModelCardVersionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListModelCardVersions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listModelCardVersionsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListModelCardVersionsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListModelCardVersionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listModelCardVersionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListModelCardVersionsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List existing model cards.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListModelCardsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListModelCardsResponse
     */
	public function listModelCards(
        \OpenAPI\OpenAPI\Models\Operations\ListModelCardsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListModelCardsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListModelCards');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listModelCardsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListModelCardsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListModelCardsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listModelCardsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListModelCardsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists model explainability job definitions that satisfy various filters.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListModelExplainabilityJobDefinitionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListModelExplainabilityJobDefinitionsResponse
     */
	public function listModelExplainabilityJobDefinitions(
        \OpenAPI\OpenAPI\Models\Operations\ListModelExplainabilityJobDefinitionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListModelExplainabilityJobDefinitionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListModelExplainabilityJobDefinitions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listModelExplainabilityJobDefinitionsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListModelExplainabilityJobDefinitionsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListModelExplainabilityJobDefinitionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listModelExplainabilityJobDefinitionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListModelExplainabilityJobDefinitionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the domain, framework, task, and model name of standard machine learning models found in common model zoos.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListModelMetadataRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListModelMetadataResponse
     */
	public function listModelMetadata(
        \OpenAPI\OpenAPI\Models\Operations\ListModelMetadataRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListModelMetadataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListModelMetadata');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listModelMetadataRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListModelMetadataRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListModelMetadataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listModelMetadataResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListModelMetadataResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a list of the model groups in your Amazon Web Services account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListModelPackageGroupsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListModelPackageGroupsResponse
     */
	public function listModelPackageGroups(
        \OpenAPI\OpenAPI\Models\Operations\ListModelPackageGroupsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListModelPackageGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListModelPackageGroups');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listModelPackageGroupsInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListModelPackageGroupsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListModelPackageGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listModelPackageGroupsOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListModelPackageGroupsOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the model packages that have been created.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListModelPackagesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListModelPackagesResponse
     */
	public function listModelPackages(
        \OpenAPI\OpenAPI\Models\Operations\ListModelPackagesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListModelPackagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListModelPackages');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listModelPackagesInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListModelPackagesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListModelPackagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listModelPackagesOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListModelPackagesOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a list of model quality monitoring job definitions in your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListModelQualityJobDefinitionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListModelQualityJobDefinitionsResponse
     */
	public function listModelQualityJobDefinitions(
        \OpenAPI\OpenAPI\Models\Operations\ListModelQualityJobDefinitionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListModelQualityJobDefinitionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListModelQualityJobDefinitions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listModelQualityJobDefinitionsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListModelQualityJobDefinitionsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListModelQualityJobDefinitionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listModelQualityJobDefinitionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListModelQualityJobDefinitionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists models created with the <code>CreateModel</code> API.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListModelsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListModelsResponse
     */
	public function listModels(
        \OpenAPI\OpenAPI\Models\Operations\ListModelsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListModelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListModels');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listModelsInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListModelsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListModelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listModelsOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListModelsOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a list of past alerts in a model monitoring schedule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMonitoringAlertHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListMonitoringAlertHistoryResponse
     */
	public function listMonitoringAlertHistory(
        \OpenAPI\OpenAPI\Models\Operations\ListMonitoringAlertHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListMonitoringAlertHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListMonitoringAlertHistory');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listMonitoringAlertHistoryRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListMonitoringAlertHistoryRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListMonitoringAlertHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMonitoringAlertHistoryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListMonitoringAlertHistoryResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the alerts for a single monitoring schedule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMonitoringAlertsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListMonitoringAlertsResponse
     */
	public function listMonitoringAlerts(
        \OpenAPI\OpenAPI\Models\Operations\ListMonitoringAlertsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListMonitoringAlertsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListMonitoringAlerts');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listMonitoringAlertsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListMonitoringAlertsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListMonitoringAlertsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMonitoringAlertsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListMonitoringAlertsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of all monitoring job executions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMonitoringExecutionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListMonitoringExecutionsResponse
     */
	public function listMonitoringExecutions(
        \OpenAPI\OpenAPI\Models\Operations\ListMonitoringExecutionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListMonitoringExecutionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListMonitoringExecutions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listMonitoringExecutionsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListMonitoringExecutionsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListMonitoringExecutionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMonitoringExecutionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListMonitoringExecutionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of all monitoring schedules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMonitoringSchedulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListMonitoringSchedulesResponse
     */
	public function listMonitoringSchedules(
        \OpenAPI\OpenAPI\Models\Operations\ListMonitoringSchedulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListMonitoringSchedulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListMonitoringSchedules');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listMonitoringSchedulesRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListMonitoringSchedulesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListMonitoringSchedulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMonitoringSchedulesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListMonitoringSchedulesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists notebook instance lifestyle configurations created with the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateNotebookInstanceLifecycleConfig.html">CreateNotebookInstanceLifecycleConfig</a> API.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListNotebookInstanceLifecycleConfigsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListNotebookInstanceLifecycleConfigsResponse
     */
	public function listNotebookInstanceLifecycleConfigs(
        \OpenAPI\OpenAPI\Models\Operations\ListNotebookInstanceLifecycleConfigsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListNotebookInstanceLifecycleConfigsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListNotebookInstanceLifecycleConfigs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listNotebookInstanceLifecycleConfigsInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListNotebookInstanceLifecycleConfigsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListNotebookInstanceLifecycleConfigsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listNotebookInstanceLifecycleConfigsOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListNotebookInstanceLifecycleConfigsOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of the SageMaker notebook instances in the requester's account in an Amazon Web Services Region. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListNotebookInstancesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListNotebookInstancesResponse
     */
	public function listNotebookInstances(
        \OpenAPI\OpenAPI\Models\Operations\ListNotebookInstancesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListNotebookInstancesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListNotebookInstances');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listNotebookInstancesInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListNotebookInstancesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListNotebookInstancesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listNotebookInstancesOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListNotebookInstancesOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a list of <code>PipeLineExecutionStep</code> objects.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListPipelineExecutionStepsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListPipelineExecutionStepsResponse
     */
	public function listPipelineExecutionSteps(
        \OpenAPI\OpenAPI\Models\Operations\ListPipelineExecutionStepsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListPipelineExecutionStepsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListPipelineExecutionSteps');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listPipelineExecutionStepsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListPipelineExecutionStepsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListPipelineExecutionStepsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPipelineExecutionStepsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListPipelineExecutionStepsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a list of the pipeline executions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListPipelineExecutionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListPipelineExecutionsResponse
     */
	public function listPipelineExecutions(
        \OpenAPI\OpenAPI\Models\Operations\ListPipelineExecutionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListPipelineExecutionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListPipelineExecutions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listPipelineExecutionsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListPipelineExecutionsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListPipelineExecutionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPipelineExecutionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListPipelineExecutionsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a list of parameters for a pipeline execution.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListPipelineParametersForExecutionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListPipelineParametersForExecutionResponse
     */
	public function listPipelineParametersForExecution(
        \OpenAPI\OpenAPI\Models\Operations\ListPipelineParametersForExecutionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListPipelineParametersForExecutionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListPipelineParametersForExecution');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listPipelineParametersForExecutionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListPipelineParametersForExecutionRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListPipelineParametersForExecutionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPipelineParametersForExecutionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListPipelineParametersForExecutionResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a list of pipelines.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListPipelinesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListPipelinesResponse
     */
	public function listPipelines(
        \OpenAPI\OpenAPI\Models\Operations\ListPipelinesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListPipelinesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListPipelines');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listPipelinesRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListPipelinesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListPipelinesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPipelinesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListPipelinesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists processing jobs that satisfy various filters.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListProcessingJobsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListProcessingJobsResponse
     */
	public function listProcessingJobs(
        \OpenAPI\OpenAPI\Models\Operations\ListProcessingJobsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListProcessingJobsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListProcessingJobs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listProcessingJobsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListProcessingJobsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListProcessingJobsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listProcessingJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListProcessingJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a list of the projects in an Amazon Web Services account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListProjectsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListProjectsResponse
     */
	public function listProjects(
        \OpenAPI\OpenAPI\Models\Operations\ListProjectsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListProjectsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListProjects');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listProjectsInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListProjectsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListProjectsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listProjectsOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListProjectsOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists spaces.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSpacesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSpacesResponse
     */
	public function listSpaces(
        \OpenAPI\OpenAPI\Models\Operations\ListSpacesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSpacesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListSpaces');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listSpacesRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSpacesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSpacesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSpacesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListSpacesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists devices allocated to the stage, containing detailed device information and deployment status.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListStageDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListStageDevicesResponse
     */
	public function listStageDevices(
        \OpenAPI\OpenAPI\Models\Operations\ListStageDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListStageDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListStageDevices');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listStageDevicesRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListStageDevicesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListStageDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listStageDevicesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListStageDevicesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the Studio Lifecycle Configurations in your Amazon Web Services Account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListStudioLifecycleConfigsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListStudioLifecycleConfigsResponse
     */
	public function listStudioLifecycleConfigs(
        \OpenAPI\OpenAPI\Models\Operations\ListStudioLifecycleConfigsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListStudioLifecycleConfigsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListStudioLifecycleConfigs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listStudioLifecycleConfigsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListStudioLifecycleConfigsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListStudioLifecycleConfigsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listStudioLifecycleConfigsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListStudioLifecycleConfigsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a list of the work teams that you are subscribed to in the Amazon Web Services Marketplace. The list may be empty if no work team satisfies the filter specified in the <code>NameContains</code> parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSubscribedWorkteamsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSubscribedWorkteamsResponse
     */
	public function listSubscribedWorkteams(
        \OpenAPI\OpenAPI\Models\Operations\ListSubscribedWorkteamsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSubscribedWorkteamsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListSubscribedWorkteams');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listSubscribedWorkteamsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSubscribedWorkteamsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSubscribedWorkteamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSubscribedWorkteamsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListSubscribedWorkteamsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the tags for the specified SageMaker resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTagsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListTagsResponse
     */
	public function listTags(
        \OpenAPI\OpenAPI\Models\Operations\ListTagsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListTags');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listTagsInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListTagsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTagsOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTagsOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Lists training jobs.</p> <note> <p>When <code>StatusEquals</code> and <code>MaxResults</code> are set at the same time, the <code>MaxResults</code> number of training jobs are first retrieved ignoring the <code>StatusEquals</code> parameter and then they are filtered by the <code>StatusEquals</code> parameter, which is returned as a response.</p> <p>For example, if <code>ListTrainingJobs</code> is invoked with the following parameters:</p> <p> <code>{ ... MaxResults: 100, StatusEquals: InProgress ... }</code> </p> <p>First, 100 trainings jobs with any status, including those other than <code>InProgress</code>, are selected (sorted according to the creation time, from the most current to the oldest). Next, those with a status of <code>InProgress</code> are returned.</p> <p>You can quickly test the API using the following Amazon Web Services CLI code.</p> <p> <code>aws sagemaker list-training-jobs --max-results 100 --status-equals InProgress</code> </p> </note>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTrainingJobsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListTrainingJobsResponse
     */
	public function listTrainingJobs(
        \OpenAPI\OpenAPI\Models\Operations\ListTrainingJobsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListTrainingJobsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListTrainingJobs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listTrainingJobsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListTrainingJobsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListTrainingJobsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTrainingJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTrainingJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a list of <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TrainingJobSummary.html">TrainingJobSummary</a> objects that describe the training jobs that a hyperparameter tuning job launched.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTrainingJobsForHyperParameterTuningJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListTrainingJobsForHyperParameterTuningJobResponse
     */
	public function listTrainingJobsForHyperParameterTuningJob(
        \OpenAPI\OpenAPI\Models\Operations\ListTrainingJobsForHyperParameterTuningJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListTrainingJobsForHyperParameterTuningJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListTrainingJobsForHyperParameterTuningJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listTrainingJobsForHyperParameterTuningJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListTrainingJobsForHyperParameterTuningJobRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListTrainingJobsForHyperParameterTuningJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTrainingJobsForHyperParameterTuningJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTrainingJobsForHyperParameterTuningJobResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists transform jobs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTransformJobsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListTransformJobsResponse
     */
	public function listTransformJobs(
        \OpenAPI\OpenAPI\Models\Operations\ListTransformJobsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListTransformJobsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListTransformJobs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listTransformJobsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListTransformJobsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListTransformJobsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTransformJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTransformJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Lists the trial components in your account. You can sort the list by trial component name or creation time. You can filter the list to show only components that were created in a specific time range. You can also filter on one of the following:</p> <ul> <li> <p> <code>ExperimentName</code> </p> </li> <li> <p> <code>SourceArn</code> </p> </li> <li> <p> <code>TrialName</code> </p> </li> </ul>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTrialComponentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListTrialComponentsResponse
     */
	public function listTrialComponents(
        \OpenAPI\OpenAPI\Models\Operations\ListTrialComponentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListTrialComponentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListTrialComponents');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listTrialComponentsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListTrialComponentsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListTrialComponentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTrialComponentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTrialComponentsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the trials in your account. Specify an experiment name to limit the list to the trials that are part of that experiment. Specify a trial component name to limit the list to the trials that associated with that trial component. The list can be filtered to show only trials that were created in a specific time range. The list can be sorted by trial name or creation time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTrialsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListTrialsResponse
     */
	public function listTrials(
        \OpenAPI\OpenAPI\Models\Operations\ListTrialsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListTrialsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListTrials');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listTrialsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListTrialsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListTrialsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTrialsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTrialsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists user profiles.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUserProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListUserProfilesResponse
     */
	public function listUserProfiles(
        \OpenAPI\OpenAPI\Models\Operations\ListUserProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListUserProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListUserProfiles');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listUserProfilesRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListUserProfilesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListUserProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUserProfilesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListUserProfilesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Use this operation to list all private and vendor workforces in an Amazon Web Services Region. Note that you can only have one private workforce per Amazon Web Services Region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListWorkforcesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListWorkforcesResponse
     */
	public function listWorkforces(
        \OpenAPI\OpenAPI\Models\Operations\ListWorkforcesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListWorkforcesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListWorkforces');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listWorkforcesRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListWorkforcesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListWorkforcesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listWorkforcesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListWorkforcesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a list of private work teams that you have defined in a region. The list may be empty if no work team satisfies the filter specified in the <code>NameContains</code> parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListWorkteamsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListWorkteamsResponse
     */
	public function listWorkteams(
        \OpenAPI\OpenAPI\Models\Operations\ListWorkteamsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListWorkteamsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.ListWorkteams');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listWorkteamsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListWorkteamsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListWorkteamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listWorkteamsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListWorkteamsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds a resouce policy to control access to a model group. For information about resoure policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html">Identity-based policies and resource-based policies</a> in the <i>Amazon Web Services Identity and Access Management User Guide.</i>.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutModelPackageGroupPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutModelPackageGroupPolicyResponse
     */
	public function putModelPackageGroupPolicy(
        \OpenAPI\OpenAPI\Models\Operations\PutModelPackageGroupPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutModelPackageGroupPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.PutModelPackageGroupPolicy');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "putModelPackageGroupPolicyInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutModelPackageGroupPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putModelPackageGroupPolicyOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PutModelPackageGroupPolicyOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Use this action to inspect your lineage and discover relationships between entities. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/querying-lineage-entities.html"> Querying Lineage Entities</a> in the <i>Amazon SageMaker Developer Guide</i>.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QueryLineageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QueryLineageResponse
     */
	public function queryLineage(
        \OpenAPI\OpenAPI\Models\Operations\QueryLineageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QueryLineageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.QueryLineage');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "queryLineageRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QueryLineageRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QueryLineageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->queryLineageResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\QueryLineageResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Register devices.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RegisterDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RegisterDevicesResponse
     */
	public function registerDevices(
        \OpenAPI\OpenAPI\Models\Operations\RegisterDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RegisterDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.RegisterDevices');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "registerDevicesRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RegisterDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Renders the UI template so that you can preview the worker's experience. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RenderUiTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RenderUiTemplateResponse
     */
	public function renderUiTemplate(
        \OpenAPI\OpenAPI\Models\Operations\RenderUiTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RenderUiTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.RenderUiTemplate');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "renderUiTemplateRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RenderUiTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->renderUiTemplateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RenderUiTemplateResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retry the execution of the pipeline.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetryPipelineExecutionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RetryPipelineExecutionResponse
     */
	public function retryPipelineExecution(
        \OpenAPI\OpenAPI\Models\Operations\RetryPipelineExecutionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RetryPipelineExecutionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.RetryPipelineExecution');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "retryPipelineExecutionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetryPipelineExecutionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->retryPipelineExecutionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RetryPipelineExecutionResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 482) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conflictException = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Finds SageMaker resources that match a search query. Matching resources are returned as a list of <code>SearchRecord</code> objects in the response. You can sort the search results by any resource property in a ascending or descending order.</p> <p>You can query against the following value types: numeric, text, Boolean, and timestamp.</p> <note> <p>The Search API may provide access to otherwise restricted data. See <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/api-permissions-reference.html">Amazon SageMaker API Permissions: Actions, Permissions, and Resources Reference</a> for more information.</p> </note>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchResponse
     */
	public function search(
        \OpenAPI\OpenAPI\Models\Operations\SearchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.Search');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "searchRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SearchRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Notifies the pipeline that the execution of a callback step failed, along with a message describing why. When a callback step is run, the pipeline generates a callback token and includes the token in a message sent to Amazon Simple Queue Service (Amazon SQS).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SendPipelineExecutionStepFailureRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SendPipelineExecutionStepFailureResponse
     */
	public function sendPipelineExecutionStepFailure(
        \OpenAPI\OpenAPI\Models\Operations\SendPipelineExecutionStepFailureRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SendPipelineExecutionStepFailureResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.SendPipelineExecutionStepFailure');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sendPipelineExecutionStepFailureRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SendPipelineExecutionStepFailureResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sendPipelineExecutionStepFailureResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SendPipelineExecutionStepFailureResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Notifies the pipeline that the execution of a callback step succeeded and provides a list of the step's output parameters. When a callback step is run, the pipeline generates a callback token and includes the token in a message sent to Amazon Simple Queue Service (Amazon SQS).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SendPipelineExecutionStepSuccessRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SendPipelineExecutionStepSuccessResponse
     */
	public function sendPipelineExecutionStepSuccess(
        \OpenAPI\OpenAPI\Models\Operations\SendPipelineExecutionStepSuccessRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SendPipelineExecutionStepSuccessResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.SendPipelineExecutionStepSuccess');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sendPipelineExecutionStepSuccessRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SendPipelineExecutionStepSuccessResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sendPipelineExecutionStepSuccessResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SendPipelineExecutionStepSuccessResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts a stage in an edge deployment plan.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StartEdgeDeploymentStageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StartEdgeDeploymentStageResponse
     */
	public function startEdgeDeploymentStage(
        \OpenAPI\OpenAPI\Models\Operations\StartEdgeDeploymentStageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StartEdgeDeploymentStageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.StartEdgeDeploymentStage');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "startEdgeDeploymentStageRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StartEdgeDeploymentStageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Starts an inference experiment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StartInferenceExperimentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StartInferenceExperimentResponse
     */
	public function startInferenceExperiment(
        \OpenAPI\OpenAPI\Models\Operations\StartInferenceExperimentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StartInferenceExperimentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.StartInferenceExperiment');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "startInferenceExperimentRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StartInferenceExperimentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->startInferenceExperimentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StartInferenceExperimentResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conflictException = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Starts a previously stopped monitoring schedule.</p> <note> <p>By default, when you successfully create a new schedule, the status of a monitoring schedule is <code>scheduled</code>.</p> </note>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StartMonitoringScheduleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StartMonitoringScheduleResponse
     */
	public function startMonitoringSchedule(
        \OpenAPI\OpenAPI\Models\Operations\StartMonitoringScheduleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StartMonitoringScheduleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.StartMonitoringSchedule');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "startMonitoringScheduleRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StartMonitoringScheduleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Launches an ML compute instance with the latest version of the libraries and attaches your ML storage volume. After configuring the notebook instance, SageMaker sets the notebook instance status to <code>InService</code>. A notebook instance's status must be <code>InService</code> before you can connect to your Jupyter notebook. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StartNotebookInstanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StartNotebookInstanceResponse
     */
	public function startNotebookInstance(
        \OpenAPI\OpenAPI\Models\Operations\StartNotebookInstanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StartNotebookInstanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.StartNotebookInstance');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "startNotebookInstanceInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StartNotebookInstanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts a pipeline execution.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StartPipelineExecutionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StartPipelineExecutionResponse
     */
	public function startPipelineExecution(
        \OpenAPI\OpenAPI\Models\Operations\StartPipelineExecutionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StartPipelineExecutionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.StartPipelineExecution');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "startPipelineExecutionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StartPipelineExecutionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->startPipelineExecutionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StartPipelineExecutionResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * A method for forcing a running job to shut down.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StopAutoMLJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StopAutoMLJobResponse
     */
	public function stopAutoMLJob(
        \OpenAPI\OpenAPI\Models\Operations\StopAutoMLJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StopAutoMLJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.StopAutoMLJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "stopAutoMLJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StopAutoMLJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Stops a model compilation job.</p> <p> To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal. This gracefully shuts the job down. If the job hasn't stopped, it sends the SIGKILL signal.</p> <p>When it receives a <code>StopCompilationJob</code> request, Amazon SageMaker changes the <code>CompilationJobStatus</code> of the job to <code>Stopping</code>. After Amazon SageMaker stops the job, it sets the <code>CompilationJobStatus</code> to <code>Stopped</code>. </p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StopCompilationJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StopCompilationJobResponse
     */
	public function stopCompilationJob(
        \OpenAPI\OpenAPI\Models\Operations\StopCompilationJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StopCompilationJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.StopCompilationJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "stopCompilationJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StopCompilationJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stops a stage in an edge deployment plan.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StopEdgeDeploymentStageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StopEdgeDeploymentStageResponse
     */
	public function stopEdgeDeploymentStage(
        \OpenAPI\OpenAPI\Models\Operations\StopEdgeDeploymentStageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StopEdgeDeploymentStageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.StopEdgeDeploymentStage');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "stopEdgeDeploymentStageRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StopEdgeDeploymentStageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Request to stop an edge packaging job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StopEdgePackagingJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StopEdgePackagingJobResponse
     */
	public function stopEdgePackagingJob(
        \OpenAPI\OpenAPI\Models\Operations\StopEdgePackagingJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StopEdgePackagingJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.StopEdgePackagingJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "stopEdgePackagingJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StopEdgePackagingJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * <p>Stops a running hyperparameter tuning job and all running training jobs that the tuning job launched.</p> <p>All model artifacts output from the training jobs are stored in Amazon Simple Storage Service (Amazon S3). All data that the training jobs write to Amazon CloudWatch Logs are still available in CloudWatch. After the tuning job moves to the <code>Stopped</code> state, it releases all reserved resources for the tuning job.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StopHyperParameterTuningJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StopHyperParameterTuningJobResponse
     */
	public function stopHyperParameterTuningJob(
        \OpenAPI\OpenAPI\Models\Operations\StopHyperParameterTuningJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StopHyperParameterTuningJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.StopHyperParameterTuningJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "stopHyperParameterTuningJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StopHyperParameterTuningJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stops an inference experiment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StopInferenceExperimentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StopInferenceExperimentResponse
     */
	public function stopInferenceExperiment(
        \OpenAPI\OpenAPI\Models\Operations\StopInferenceExperimentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StopInferenceExperimentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.StopInferenceExperiment');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "stopInferenceExperimentRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StopInferenceExperimentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->stopInferenceExperimentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StopInferenceExperimentResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conflictException = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stops an Inference Recommender job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StopInferenceRecommendationsJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StopInferenceRecommendationsJobResponse
     */
	public function stopInferenceRecommendationsJob(
        \OpenAPI\OpenAPI\Models\Operations\StopInferenceRecommendationsJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StopInferenceRecommendationsJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.StopInferenceRecommendationsJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "stopInferenceRecommendationsJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StopInferenceRecommendationsJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stops a running labeling job. A job that is stopped cannot be restarted. Any results obtained before the job is stopped are placed in the Amazon S3 output bucket.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StopLabelingJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StopLabelingJobResponse
     */
	public function stopLabelingJob(
        \OpenAPI\OpenAPI\Models\Operations\StopLabelingJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StopLabelingJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.StopLabelingJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "stopLabelingJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StopLabelingJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stops a previously started monitoring schedule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StopMonitoringScheduleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StopMonitoringScheduleResponse
     */
	public function stopMonitoringSchedule(
        \OpenAPI\OpenAPI\Models\Operations\StopMonitoringScheduleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StopMonitoringScheduleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.StopMonitoringSchedule');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "stopMonitoringScheduleRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StopMonitoringScheduleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Terminates the ML compute instance. Before terminating the instance, SageMaker disconnects the ML storage volume from it. SageMaker preserves the ML storage volume. SageMaker stops charging you for the ML compute instance when you call <code>StopNotebookInstance</code>.</p> <p>To access data on the ML storage volume for a notebook instance that has been terminated, call the <code>StartNotebookInstance</code> API. <code>StartNotebookInstance</code> launches another ML compute instance, configures it, and attaches the preserved ML storage volume so you can continue your work. </p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StopNotebookInstanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StopNotebookInstanceResponse
     */
	public function stopNotebookInstance(
        \OpenAPI\OpenAPI\Models\Operations\StopNotebookInstanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StopNotebookInstanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.StopNotebookInstance');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "stopNotebookInstanceInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StopNotebookInstanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * <p>Stops a pipeline execution.</p> <p> <b>Callback Step</b> </p> <p>A pipeline execution won't stop while a callback step is running. When you call <code>StopPipelineExecution</code> on a pipeline execution with a running callback step, SageMaker Pipelines sends an additional Amazon SQS message to the specified SQS queue. The body of the SQS message contains a "Status" field which is set to "Stopping".</p> <p>You should add logic to your Amazon SQS message consumer to take any needed action (for example, resource cleanup) upon receipt of the message followed by a call to <code>SendPipelineExecutionStepSuccess</code> or <code>SendPipelineExecutionStepFailure</code>.</p> <p>Only when SageMaker Pipelines receives one of these calls will it stop the pipeline execution.</p> <p> <b>Lambda Step</b> </p> <p>A pipeline execution can't be stopped while a lambda step is running because the Lambda function invoked by the lambda step can't be stopped. If you attempt to stop the execution while the Lambda function is running, the pipeline waits for the Lambda function to finish or until the timeout is hit, whichever occurs first, and then stops. If the Lambda function finishes, the pipeline execution status is <code>Stopped</code>. If the timeout is hit the pipeline execution status is <code>Failed</code>.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StopPipelineExecutionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StopPipelineExecutionResponse
     */
	public function stopPipelineExecution(
        \OpenAPI\OpenAPI\Models\Operations\StopPipelineExecutionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StopPipelineExecutionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.StopPipelineExecution');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "stopPipelineExecutionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StopPipelineExecutionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->stopPipelineExecutionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StopPipelineExecutionResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stops a processing job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StopProcessingJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StopProcessingJobResponse
     */
	public function stopProcessingJob(
        \OpenAPI\OpenAPI\Models\Operations\StopProcessingJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StopProcessingJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.StopProcessingJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "stopProcessingJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StopProcessingJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Stops a training job. To stop a job, SageMaker sends the algorithm the <code>SIGTERM</code> signal, which delays job termination for 120 seconds. Algorithms might use this 120-second window to save the model artifacts, so the results of the training is not lost. </p> <p>When it receives a <code>StopTrainingJob</code> request, SageMaker changes the status of the job to <code>Stopping</code>. After SageMaker stops the job, it sets the status to <code>Stopped</code>.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StopTrainingJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StopTrainingJobResponse
     */
	public function stopTrainingJob(
        \OpenAPI\OpenAPI\Models\Operations\StopTrainingJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StopTrainingJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.StopTrainingJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "stopTrainingJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StopTrainingJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Stops a batch transform job.</p> <p>When Amazon SageMaker receives a <code>StopTransformJob</code> request, the status of the job changes to <code>Stopping</code>. After Amazon SageMaker stops the job, the status is set to <code>Stopped</code>. When you stop a batch transform job before it is completed, Amazon SageMaker doesn't store the job's output in Amazon S3.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StopTransformJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StopTransformJobResponse
     */
	public function stopTransformJob(
        \OpenAPI\OpenAPI\Models\Operations\StopTransformJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StopTransformJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.StopTransformJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "stopTransformJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StopTransformJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an action.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateActionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateActionResponse
     */
	public function updateAction(
        \OpenAPI\OpenAPI\Models\Operations\UpdateActionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateActionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateAction');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateActionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateActionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateActionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateActionResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conflictException = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the properties of an AppImageConfig.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAppImageConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateAppImageConfigResponse
     */
	public function updateAppImageConfig(
        \OpenAPI\OpenAPI\Models\Operations\UpdateAppImageConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateAppImageConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateAppImageConfig');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateAppImageConfigRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateAppImageConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateAppImageConfigResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateAppImageConfigResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an artifact.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactResponse
     */
	public function updateArtifact(
        \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateArtifact');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateArtifactRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateArtifactResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateArtifactResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conflictException = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified Git repository with the specified values.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCodeRepositoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCodeRepositoryResponse
     */
	public function updateCodeRepository(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCodeRepositoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCodeRepositoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateCodeRepository');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateCodeRepositoryInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCodeRepositoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateCodeRepositoryOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateCodeRepositoryOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a context.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateContextRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateContextResponse
     */
	public function updateContext(
        \OpenAPI\OpenAPI\Models\Operations\UpdateContextRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateContextResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateContext');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateContextRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateContextResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateContextResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateContextResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conflictException = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a fleet of devices.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceFleetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceFleetResponse
     */
	public function updateDeviceFleet(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceFleetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceFleetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateDeviceFleet');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateDeviceFleetRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceFleetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates one or more devices in a fleet.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDevicesResponse
     */
	public function updateDevices(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateDevices');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateDevicesRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Updates the default settings for new user profiles in the domain.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDomainRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDomainResponse
     */
	public function updateDomain(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDomainRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDomainResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateDomain');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateDomainRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDomainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDomainResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateDomainResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 482) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Deploys the new <code>EndpointConfig</code> specified in the request, switches to using newly created endpoint, and then deletes resources provisioned for the endpoint using the previous <code>EndpointConfig</code> (there is no availability loss). </p> <p>When SageMaker receives the request, it sets the endpoint status to <code>Updating</code>. After updating the endpoint, it sets the status to <code>InService</code>. To check the status of an endpoint, use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpoint.html">DescribeEndpoint</a> API. </p> <note> <p>You must not delete an <code>EndpointConfig</code> in use by an endpoint that is live or while the <code>UpdateEndpoint</code> or <code>CreateEndpoint</code> operations are being performed on the endpoint. To update an endpoint, you must create a new <code>EndpointConfig</code>.</p> <p>If you delete the <code>EndpointConfig</code> of an endpoint that is active or being created or updated you may lose visibility into the instance type the endpoint is using. The endpoint must be deleted in order to stop incurring charges.</p> </note>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateEndpointRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateEndpointResponse
     */
	public function updateEndpoint(
        \OpenAPI\OpenAPI\Models\Operations\UpdateEndpointRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateEndpointResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateEndpoint');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateEndpointInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateEndpointResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateEndpointOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateEndpointOutput', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates variant weight of one or more variants associated with an existing endpoint, or capacity of one variant associated with an existing endpoint. When it receives the request, SageMaker sets the endpoint status to <code>Updating</code>. After updating the endpoint, it sets the status to <code>InService</code>. To check the status of an endpoint, use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpoint.html">DescribeEndpoint</a> API. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateEndpointWeightsAndCapacitiesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateEndpointWeightsAndCapacitiesResponse
     */
	public function updateEndpointWeightsAndCapacities(
        \OpenAPI\OpenAPI\Models\Operations\UpdateEndpointWeightsAndCapacitiesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateEndpointWeightsAndCapacitiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateEndpointWeightsAndCapacities');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateEndpointWeightsAndCapacitiesInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateEndpointWeightsAndCapacitiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateEndpointWeightsAndCapacitiesOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateEndpointWeightsAndCapacitiesOutput', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds, updates, or removes the description of an experiment. Updates the display name of an experiment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateExperimentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateExperimentResponse
     */
	public function updateExperiment(
        \OpenAPI\OpenAPI\Models\Operations\UpdateExperimentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateExperimentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateExperiment');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateExperimentRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateExperimentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateExperimentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateExperimentResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conflictException = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the feature group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateFeatureGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateFeatureGroupResponse
     */
	public function updateFeatureGroup(
        \OpenAPI\OpenAPI\Models\Operations\UpdateFeatureGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateFeatureGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateFeatureGroup');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateFeatureGroupRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateFeatureGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateFeatureGroupResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateFeatureGroupResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the description and parameters of the feature group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateFeatureMetadataRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateFeatureMetadataResponse
     */
	public function updateFeatureMetadata(
        \OpenAPI\OpenAPI\Models\Operations\UpdateFeatureMetadataRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateFeatureMetadataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateFeatureMetadata');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateFeatureMetadataRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateFeatureMetadataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Update a hub.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateHubRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateHubResponse
     */
	public function updateHub(
        \OpenAPI\OpenAPI\Models\Operations\UpdateHubRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateHubResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateHub');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateHubRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateHubResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateHubResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateHubResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the properties of a SageMaker image. To change the image's tags, use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AddTags.html">AddTags</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteTags.html">DeleteTags</a> APIs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateImageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateImageResponse
     */
	public function updateImage(
        \OpenAPI\OpenAPI\Models\Operations\UpdateImageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateImageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateImage');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateImageRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateImageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateImageResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateImageResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the properties of a SageMaker image version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateImageVersionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateImageVersionResponse
     */
	public function updateImageVersion(
        \OpenAPI\OpenAPI\Models\Operations\UpdateImageVersionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateImageVersionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateImageVersion');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateImageVersionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateImageVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateImageVersionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateImageVersionResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     *  Updates an inference experiment that you created. The status of the inference experiment has to be either <code>Created</code>, <code>Running</code>. For more information on the status of an inference experiment, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeInferenceExperiment.html">DescribeInferenceExperiment</a>. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateInferenceExperimentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateInferenceExperimentResponse
     */
	public function updateInferenceExperiment(
        \OpenAPI\OpenAPI\Models\Operations\UpdateInferenceExperimentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateInferenceExperimentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateInferenceExperiment');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateInferenceExperimentRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateInferenceExperimentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateInferenceExperimentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateInferenceExperimentResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conflictException = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Update an Amazon SageMaker Model Card.</p> <important> <p>You cannot update both model card content and model card status in a single call.</p> </important>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateModelCardRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateModelCardResponse
     */
	public function updateModelCard(
        \OpenAPI\OpenAPI\Models\Operations\UpdateModelCardRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateModelCardResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateModelCard');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateModelCardRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateModelCardResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateModelCardResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateModelCardResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 482) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conflictException = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a versioned model.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateModelPackageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateModelPackageResponse
     */
	public function updateModelPackage(
        \OpenAPI\OpenAPI\Models\Operations\UpdateModelPackageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateModelPackageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateModelPackage');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateModelPackageInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateModelPackageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateModelPackageOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateModelPackageOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the parameters of a model monitor alert.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateMonitoringAlertRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateMonitoringAlertResponse
     */
	public function updateMonitoringAlert(
        \OpenAPI\OpenAPI\Models\Operations\UpdateMonitoringAlertRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateMonitoringAlertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateMonitoringAlert');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateMonitoringAlertRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateMonitoringAlertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateMonitoringAlertResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateMonitoringAlertResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a previously created schedule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateMonitoringScheduleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateMonitoringScheduleResponse
     */
	public function updateMonitoringSchedule(
        \OpenAPI\OpenAPI\Models\Operations\UpdateMonitoringScheduleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateMonitoringScheduleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateMonitoringSchedule');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateMonitoringScheduleRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateMonitoringScheduleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateMonitoringScheduleResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateMonitoringScheduleResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a notebook instance. NotebookInstance updates include upgrading or downgrading the ML compute instance used for your notebook instance to accommodate changes in your workload requirements.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNotebookInstanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNotebookInstanceResponse
     */
	public function updateNotebookInstance(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNotebookInstanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNotebookInstanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateNotebookInstance');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateNotebookInstanceInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNotebookInstanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNotebookInstanceOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a notebook instance lifecycle configuration created with the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateNotebookInstanceLifecycleConfig.html">CreateNotebookInstanceLifecycleConfig</a> API.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNotebookInstanceLifecycleConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNotebookInstanceLifecycleConfigResponse
     */
	public function updateNotebookInstanceLifecycleConfig(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNotebookInstanceLifecycleConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNotebookInstanceLifecycleConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateNotebookInstanceLifecycleConfig');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateNotebookInstanceLifecycleConfigInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNotebookInstanceLifecycleConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNotebookInstanceLifecycleConfigOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a pipeline.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePipelineRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePipelineResponse
     */
	public function updatePipeline(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePipelineRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePipelineResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdatePipeline');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updatePipelineRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePipelineResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updatePipelineResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdatePipelineResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a pipeline execution.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePipelineExecutionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePipelineExecutionResponse
     */
	public function updatePipelineExecution(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePipelineExecutionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePipelineExecutionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdatePipelineExecution');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updatePipelineExecutionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePipelineExecutionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updatePipelineExecutionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdatePipelineExecutionResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Updates a machine learning (ML) project that is created from a template that sets up an ML pipeline from training to deploying an approved model.</p> <note> <p>You must not update a project that is in use. If you update the <code>ServiceCatalogProvisioningUpdateDetails</code> of a project that is active or being created, or updated, you may lose resources already created by the project.</p> </note>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateProjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateProjectResponse
     */
	public function updateProject(
        \OpenAPI\OpenAPI\Models\Operations\UpdateProjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateProjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateProject');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateProjectInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateProjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateProjectOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateProjectOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the settings of a space.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSpaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSpaceResponse
     */
	public function updateSpace(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSpaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSpaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateSpace');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateSpaceRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSpaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateSpaceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateSpaceResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 482) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a model training job to request a new Debugger profiling configuration or to change warm pool retention length.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTrainingJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateTrainingJobResponse
     */
	public function updateTrainingJob(
        \OpenAPI\OpenAPI\Models\Operations\UpdateTrainingJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateTrainingJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateTrainingJob');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateTrainingJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateTrainingJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateTrainingJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateTrainingJobResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the display name of a trial.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTrialRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateTrialResponse
     */
	public function updateTrial(
        \OpenAPI\OpenAPI\Models\Operations\UpdateTrialRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateTrialResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateTrial');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateTrialRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateTrialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateTrialResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateTrialResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conflictException = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates one or more properties of a trial component.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTrialComponentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateTrialComponentResponse
     */
	public function updateTrialComponent(
        \OpenAPI\OpenAPI\Models\Operations\UpdateTrialComponentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateTrialComponentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateTrialComponent');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateTrialComponentRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateTrialComponentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateTrialComponentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateTrialComponentResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conflictException = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a user profile.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUserProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateUserProfileResponse
     */
	public function updateUserProfile(
        \OpenAPI\OpenAPI\Models\Operations\UpdateUserProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateUserProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateUserProfile');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateUserProfileRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateUserProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateUserProfileResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateUserProfileResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceInUse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 482) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * <p>Use this operation to update your workforce. You can use this operation to require that workers use specific IP addresses to work on tasks and to update your OpenID Connect (OIDC) Identity Provider (IdP) workforce configuration.</p> <p>The worker portal is now supported in VPC and public internet.</p> <p> Use <code>SourceIpConfig</code> to restrict worker access to tasks to a specific range of IP addresses. You specify allowed IP addresses by creating a list of up to ten <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>. By default, a workforce isn't restricted to specific IP addresses. If you specify a range of IP addresses, workers who attempt to access tasks using any IP address outside the specified range are denied and get a <code>Not Found</code> error message on the worker portal.</p> <p>To restrict access to all the workers in public internet, add the <code>SourceIpConfig</code> CIDR value as "10.0.0.0/16".</p> <important> <p>Amazon SageMaker does not support Source Ip restriction for worker portals in VPC.</p> </important> <p>Use <code>OidcConfig</code> to update the configuration of a workforce created using your own OIDC IdP. </p> <important> <p>You can only update your OIDC IdP configuration when there are no work teams associated with your workforce. You can delete work teams using the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteWorkteam.html">DeleteWorkteam</a> operation.</p> </important> <p>After restricting access to a range of IP addresses or updating your OIDC IdP configuration with this operation, you can view details about your update workforce using the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeWorkforce.html">DescribeWorkforce</a> operation.</p> <important> <p>This operation only applies to private workforces.</p> </important>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateWorkforceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateWorkforceResponse
     */
	public function updateWorkforce(
        \OpenAPI\OpenAPI\Models\Operations\UpdateWorkforceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateWorkforceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateWorkforce');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateWorkforceRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateWorkforceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateWorkforceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateWorkforceResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conflictException = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing work team with new member definitions or description.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateWorkteamRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateWorkteamResponse
     */
	public function updateWorkteam(
        \OpenAPI\OpenAPI\Models\Operations\UpdateWorkteamRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateWorkteamResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#X-Amz-Target=SageMaker.UpdateWorkteam');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateWorkteamRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateWorkteamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateWorkteamResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateWorkteamResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceLimitExceeded = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
}