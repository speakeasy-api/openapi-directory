// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// AuthenticateAuthenticationGrantTypeEnum - Always `AccessToken`. (This will change to `refresh_token` in a future release.)
type AuthenticateAuthenticationGrantTypeEnum string

const (
	AuthenticateAuthenticationGrantTypeEnumAccessToken AuthenticateAuthenticationGrantTypeEnum = "AccessToken"
)

func (e *AuthenticateAuthenticationGrantTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AccessToken":
		*e = AuthenticateAuthenticationGrantTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthenticateAuthenticationGrantTypeEnum: %s", s)
	}
}

// AuthenticateAuthentication - Authentication data
type AuthenticateAuthentication struct {
	// The Client ID for this API Application
	ClientID *string `json:"clientId,omitempty"`
	// The SHA256 hash of the nonce above and the app’s Client Key. The Client Key will only be shown to you when you create the app, so don’t forget to save it somewhere safe. SECRET=( `/bin/echo -n $NONCE$CLIENT_KEY | sha256sum` ).
	ClientSecret *string `json:"clientSecret,omitempty"`
	// Always `AccessToken`. (This will change to `refresh_token` in a future release.)
	GrantType *AuthenticateAuthenticationGrantTypeEnum `json:"grantType,omitempty"`
	// A random non-repeating number used as a salt for the `clientSecret` below. The simplest nonce is a unix time.
	Nonce *int64 `json:"nonce,omitempty"`
	// The Refresh Token for this API Application
	RefreshToken *string `json:"refreshToken,omitempty"`
}

type AuthenticateRequest struct {
	// Authentication data
	Request AuthenticateAuthentication `request:"mediaType=application/json"`
}

// AuthenticateAccessToken - Successfully authenticated
type AuthenticateAccessToken struct {
	// The App Bearer Access Token you can use in further API calls.
	AccessToken *string `json:"accessToken,omitempty"`
	// The ID of the application you are using.
	APIApplicationID *int64 `json:"apiApplicationId,omitempty"`
	// The business ID for the business.
	BusinessID *int64 `json:"businessId,omitempty"`
	// The expiry date and time for this token (ISO-8601).
	Expiry *time.Time `json:"expiry,omitempty"`
	// The permissions assigned to the Access Token as an array of strings. This provides information on what API access it is allowed. See the section on Scope below.
	Permissions []string `json:"permissions,omitempty"`
}

type AuthenticateResponse struct {
	// Successfully authenticated
	AccessToken *AuthenticateAccessToken
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
