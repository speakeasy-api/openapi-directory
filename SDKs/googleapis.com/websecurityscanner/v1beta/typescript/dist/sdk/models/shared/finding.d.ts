import { SpeakeasyBase } from "../../../internal/utils";
import { Form } from "./form";
import { OutdatedLibrary } from "./outdatedlibrary";
import { ViolatingResource } from "./violatingresource";
import { VulnerableHeaders } from "./vulnerableheaders";
import { VulnerableParameters } from "./vulnerableparameters";
import { Xss } from "./xss";
import { Xxe } from "./xxe";
/**
 * The severity level of the reported vulnerability.
 */
export declare enum FindingSeverityEnum {
    SeverityUnspecified = "SEVERITY_UNSPECIFIED",
    Critical = "CRITICAL",
    High = "HIGH",
    Medium = "MEDIUM",
    Low = "LOW"
}
/**
 * A Finding resource represents a vulnerability instance identified during a ScanRun.
 */
export declare class Finding extends SpeakeasyBase {
    /**
     * The body of the request that triggered the vulnerability.
     */
    body?: string;
    /**
     * The description of the vulnerability.
     */
    description?: string;
    /**
     * The URL where the browser lands when the vulnerability is detected.
     */
    finalUrl?: string;
    /**
     * The type of the Finding. Detailed and up-to-date information on findings can be found here: https://cloud.google.com/security-command-center/docs/how-to-remediate-web-security-scanner
     */
    findingType?: string;
    /**
     * ! Information about a vulnerability with an HTML.
     */
    form?: Form;
    /**
     * If the vulnerability was originated from nested IFrame, the immediate parent IFrame is reported.
     */
    frameUrl?: string;
    /**
     * The URL produced by the server-side fuzzer and used in the request that triggered the vulnerability.
     */
    fuzzedUrl?: string;
    /**
     * The http method of the request that triggered the vulnerability, in uppercase.
     */
    httpMethod?: string;
    /**
     * The resource name of the Finding. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}/scanruns/{scanRunId}/findings/{findingId}'. The finding IDs are generated by the system.
     */
    name?: string;
    /**
     * Information reported for an outdated library.
     */
    outdatedLibrary?: OutdatedLibrary;
    /**
     * The URL containing human-readable payload that user can leverage to reproduce the vulnerability.
     */
    reproductionUrl?: string;
    /**
     * The severity level of the reported vulnerability.
     */
    severity?: FindingSeverityEnum;
    /**
     * The tracking ID uniquely identifies a vulnerability instance across multiple ScanRuns.
     */
    trackingId?: string;
    /**
     * Information regarding any resource causing the vulnerability such as JavaScript sources, image, audio files, etc.
     */
    violatingResource?: ViolatingResource;
    /**
     * Information about vulnerable or missing HTTP Headers.
     */
    vulnerableHeaders?: VulnerableHeaders;
    /**
     * Information about vulnerable request parameters.
     */
    vulnerableParameters?: VulnerableParameters;
    /**
     * Information reported for an XSS.
     */
    xss?: Xss;
    /**
     * Information reported for an XXE.
     */
    xxe?: Xxe;
}
