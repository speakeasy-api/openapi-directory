/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Orderreturns {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Acks an order return in your Merchant Center account.
   */
  contentOrderreturnsAcknowledge(
    req: operations.ContentOrderreturnsAcknowledgeRequest,
    security: operations.ContentOrderreturnsAcknowledgeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentOrderreturnsAcknowledgeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentOrderreturnsAcknowledgeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/orderreturns/{returnId}/acknowledge",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "orderreturnsAcknowledgeRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentOrderreturnsAcknowledgeSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentOrderreturnsAcknowledgeResponse =
        new operations.ContentOrderreturnsAcknowledgeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.orderreturnsAcknowledgeResponse = utils.objectToClass(
              httpRes?.data,
              shared.OrderreturnsAcknowledgeResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create return in your Merchant Center account.
   */
  contentOrderreturnsCreateorderreturn(
    req: operations.ContentOrderreturnsCreateorderreturnRequest,
    security: operations.ContentOrderreturnsCreateorderreturnSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentOrderreturnsCreateorderreturnResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentOrderreturnsCreateorderreturnRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/orderreturns/createOrderReturn",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "orderreturnsCreateOrderReturnRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentOrderreturnsCreateorderreturnSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentOrderreturnsCreateorderreturnResponse =
        new operations.ContentOrderreturnsCreateorderreturnResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.orderreturnsCreateOrderReturnResponse = utils.objectToClass(
              httpRes?.data,
              shared.OrderreturnsCreateOrderReturnResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves an order return from your Merchant Center account.
   */
  contentOrderreturnsGet(
    req: operations.ContentOrderreturnsGetRequest,
    security: operations.ContentOrderreturnsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentOrderreturnsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentOrderreturnsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/orderreturns/{returnId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentOrderreturnsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentOrderreturnsGetResponse =
        new operations.ContentOrderreturnsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.merchantOrderReturn = utils.objectToClass(
              httpRes?.data,
              shared.MerchantOrderReturn
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Links a return shipping label to a return id. You can only create one return label per return id. Since the label is sent to the buyer, the linked return label cannot be updated or deleted. If you try to create multiple return shipping labels for a single return id, every create request except the first will fail.
   */
  contentOrderreturnsLabelsCreate(
    req: operations.ContentOrderreturnsLabelsCreateRequest,
    security: operations.ContentOrderreturnsLabelsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentOrderreturnsLabelsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentOrderreturnsLabelsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/orderreturns/{returnId}/labels",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "returnShippingLabel",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentOrderreturnsLabelsCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentOrderreturnsLabelsCreateResponse =
        new operations.ContentOrderreturnsLabelsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.returnShippingLabel = utils.objectToClass(
              httpRes?.data,
              shared.ReturnShippingLabel
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists order returns in your Merchant Center account.
   */
  contentOrderreturnsList(
    req: operations.ContentOrderreturnsListRequest,
    security: operations.ContentOrderreturnsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentOrderreturnsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentOrderreturnsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/orderreturns",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentOrderreturnsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentOrderreturnsListResponse =
        new operations.ContentOrderreturnsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.orderreturnsListResponse = utils.objectToClass(
              httpRes?.data,
              shared.OrderreturnsListResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Processes return in your Merchant Center account.
   */
  contentOrderreturnsProcess(
    req: operations.ContentOrderreturnsProcessRequest,
    security: operations.ContentOrderreturnsProcessSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentOrderreturnsProcessResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentOrderreturnsProcessRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/orderreturns/{returnId}/process",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "orderreturnsProcessRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentOrderreturnsProcessSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentOrderreturnsProcessResponse =
        new operations.ContentOrderreturnsProcessResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.orderreturnsProcessResponse = utils.objectToClass(
              httpRes?.data,
              shared.OrderreturnsProcessResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
