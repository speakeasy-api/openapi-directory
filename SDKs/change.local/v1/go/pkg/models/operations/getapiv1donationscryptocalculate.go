// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetAPIV1DonationsCryptoCalculateSecurity struct {
	Password string `security:"scheme,type=http,subtype=basic,name=password"`
	Username string `security:"scheme,type=http,subtype=basic,name=username"`
}

// GetAPIV1DonationsCryptoCalculateCurrencyEnum - The currency of the transaction.
type GetAPIV1DonationsCryptoCalculateCurrencyEnum string

const (
	GetAPIV1DonationsCryptoCalculateCurrencyEnumEth GetAPIV1DonationsCryptoCalculateCurrencyEnum = "eth"
	GetAPIV1DonationsCryptoCalculateCurrencyEnumBtc GetAPIV1DonationsCryptoCalculateCurrencyEnum = "btc"
)

func (e *GetAPIV1DonationsCryptoCalculateCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "eth":
		fallthrough
	case "btc":
		*e = GetAPIV1DonationsCryptoCalculateCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAPIV1DonationsCryptoCalculateCurrencyEnum: %s", s)
	}
}

type GetAPIV1DonationsCryptoCalculateRequest struct {
	// The number of transactions to offset.
	Count *float64 `queryParam:"style=form,explode=true,name=count"`
	// The currency of the transaction.
	Currency GetAPIV1DonationsCryptoCalculateCurrencyEnum `queryParam:"style=form,explode=true,name=currency"`
}

type GetAPIV1DonationsCryptoCalculateResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
