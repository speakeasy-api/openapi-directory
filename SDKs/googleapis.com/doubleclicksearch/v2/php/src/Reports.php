<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Reports 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Generates and returns a report immediately.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGenerateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGenerateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGenerateResponse
     */
	public function doubleclicksearchReportsGenerate(
        \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGenerateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGenerateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGenerateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/doubleclicksearch/v2/reports/generate');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "reportRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGenerateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGenerateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->report = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Report', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Polls for the status of a report request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGetResponse
     */
	public function doubleclicksearchReportsGet(
        \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/doubleclicksearch/v2/reports/{reportId}', \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->report = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Report', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Downloads a report file encoded in UTF-8.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGetFileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGetFileSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGetFileResponse
     */
	public function doubleclicksearchReportsGetFile(
        \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGetFileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGetFileSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGetFileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/doubleclicksearch/v2/reports/{reportId}/files/{reportFragment}', \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGetFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGetFileRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGetFileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Downloads a csv file(encoded in UTF-8) that contains ID mappings between legacy SA360 and new SA360. The file includes all children entities of the given advertiser(e.g. engine accounts, campaigns, ad groups, etc.) that exist in both legacy SA360 and new SA360.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGetIdMappingFileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGetIdMappingFileSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGetIdMappingFileResponse
     */
	public function doubleclicksearchReportsGetIdMappingFile(
        \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGetIdMappingFileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGetIdMappingFileSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGetIdMappingFileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/doubleclicksearch/v2/agency/{agencyId}/advertiser/{advertiserId}/idmapping', \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGetIdMappingFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGetIdMappingFileRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsGetIdMappingFileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->idMappingFile = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Inserts a report request into the reporting system.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsRequestRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsRequestSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsRequestResponse
     */
	public function doubleclicksearchReportsRequest(
        \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsRequestRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsRequestSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsRequestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/doubleclicksearch/v2/reports');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "reportRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsRequestRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchReportsRequestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->report = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Report', 'json');
            }
        }

        return $response;
    }
}