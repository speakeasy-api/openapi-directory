<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RegionSslPolicies 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes the specified SSL policy. The SSL policy resource can be deleted only if it is not in use by any TargetHttpsProxy or TargetSslProxy resources.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesDeleteResponse
     */
	public function computeRegionSslPoliciesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/sslPolicies/{sslPolicy}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all of the ordered rules present in a single specified policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesGetResponse
     */
	public function computeRegionSslPoliciesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/sslPolicies/{sslPolicy}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sslPolicy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SslPolicy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new policy in the specified project and region using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesInsertResponse
     */
	public function computeRegionSslPoliciesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/sslPolicies', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sslPolicy", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the SSL policies that have been configured for the specified project and region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesListResponse
     */
	public function computeRegionSslPoliciesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/sslPolicies', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sslPoliciesList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SslPoliciesList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all features that can be specified in the SSL policy when using custom profile.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesListAvailableFeaturesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesListAvailableFeaturesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesListAvailableFeaturesResponse
     */
	public function computeRegionSslPoliciesListAvailableFeatures(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesListAvailableFeaturesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesListAvailableFeaturesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesListAvailableFeaturesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/sslPolicies/listAvailableFeatures', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesListAvailableFeaturesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesListAvailableFeaturesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesListAvailableFeaturesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sslPoliciesListAvailableFeaturesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SslPoliciesListAvailableFeaturesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches the specified SSL policy with the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesPatchResponse
     */
	public function computeRegionSslPoliciesPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/sslPolicies/{sslPolicy}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sslPolicy1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSslPoliciesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}