/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SslConfig - SSL Configuration of a connection
 */
public class SslConfig {
    /**
     * Additional SSL related field values
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalVariables")
    public ConfigVariable[] additionalVariables;

    public SslConfig withAdditionalVariables(ConfigVariable[] additionalVariables) {
        this.additionalVariables = additionalVariables;
        return this;
    }
    
    /**
     * Type of Client Cert (PEM/JKS/.. etc.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientCertType")
    public SslConfigClientCertTypeEnum clientCertType;

    public SslConfig withClientCertType(SslConfigClientCertTypeEnum clientCertType) {
        this.clientCertType = clientCertType;
        return this;
    }
    
    /**
     * Secret provides a reference to entries in Secret Manager.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientCertificate")
    public Secret clientCertificate;

    public SslConfig withClientCertificate(Secret clientCertificate) {
        this.clientCertificate = clientCertificate;
        return this;
    }
    
    /**
     * Secret provides a reference to entries in Secret Manager.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientPrivateKey")
    public Secret clientPrivateKey;

    public SslConfig withClientPrivateKey(Secret clientPrivateKey) {
        this.clientPrivateKey = clientPrivateKey;
        return this;
    }
    
    /**
     * Secret provides a reference to entries in Secret Manager.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientPrivateKeyPass")
    public Secret clientPrivateKeyPass;

    public SslConfig withClientPrivateKeyPass(Secret clientPrivateKeyPass) {
        this.clientPrivateKeyPass = clientPrivateKeyPass;
        return this;
    }
    
    /**
     * Secret provides a reference to entries in Secret Manager.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("privateServerCertificate")
    public Secret privateServerCertificate;

    public SslConfig withPrivateServerCertificate(Secret privateServerCertificate) {
        this.privateServerCertificate = privateServerCertificate;
        return this;
    }
    
    /**
     * Type of Server Cert (PEM/JKS/.. etc.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serverCertType")
    public SslConfigServerCertTypeEnum serverCertType;

    public SslConfig withServerCertType(SslConfigServerCertTypeEnum serverCertType) {
        this.serverCertType = serverCertType;
        return this;
    }
    
    /**
     * Trust Model of the SSL connection
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trustModel")
    public SslConfigTrustModelEnum trustModel;

    public SslConfig withTrustModel(SslConfigTrustModelEnum trustModel) {
        this.trustModel = trustModel;
        return this;
    }
    
    /**
     * Controls the ssl type for the given connector version.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public SslConfigTypeEnum type;

    public SslConfig withType(SslConfigTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * Bool for enabling SSL
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("useSsl")
    public Boolean useSsl;

    public SslConfig withUseSsl(Boolean useSsl) {
        this.useSsl = useSsl;
        return this;
    }
    
    public SslConfig(){}
}
