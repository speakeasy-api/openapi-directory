<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ExecutionInput - A running instance of a [Workflow](/workflows/docs/reference/rest/v1beta/projects.locations.workflows).
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ExecutionInput
{
    /**
     * Input parameters of the execution represented as a JSON string. The size limit is 32KB. *Note*: If you are using the REST API directly to run your workflow, you must escape any JSON string value of `argument`. Example: `'{"argument":"{\"firstName\":\"FIRST\",\"lastName\":\"LAST\"}"}'`
     * 
     * @var ?string $argument
     */
	#[\JMS\Serializer\Annotation\SerializedName('argument')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $argument = null;
    
    /**
     * The call logging level associated to this execution.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ExecutionCallLogLevelEnum $callLogLevel
     */
	#[\JMS\Serializer\Annotation\SerializedName('callLogLevel')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ExecutionCallLogLevelEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ExecutionCallLogLevelEnum $callLogLevel = null;
    
    /**
     * Error describes why the execution was abnormally terminated.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Error $error
     */
	#[\JMS\Serializer\Annotation\SerializedName('error')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Error')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Error $error = null;
    
    /**
     * Represents the current status of this execution.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Status $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Status')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Status $status = null;
    
	public function __construct()
	{
		$this->argument = null;
		$this->callLogLevel = null;
		$this->error = null;
		$this->status = null;
	}
}
