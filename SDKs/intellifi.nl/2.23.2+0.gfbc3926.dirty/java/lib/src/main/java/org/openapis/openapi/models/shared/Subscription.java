/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Subscription - A JSON object containing the subscription
 */
public class Subscription {
    /**
     * The `custom` value is only for your custom references, you may use it to save additional attributes. The custom value is not used in any other place. This field may contain any datatype that you like: null (default), string, integer, boolean, object etc...
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom")
    public Object custom;
    public Subscription withCustom(Object custom) {
        this.custom = custom;
        return this;
    }
    
    /**
     * The number of hours this event is retained in the database. *Only use larger numbers if you know what you are doing.* A couple of hours is enough for most use cases.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("database_hold_time_h")
    public Long databaseHoldTimeH;
    public Subscription withDatabaseHoldTimeH(Long databaseHoldTimeH) {
        this.databaseHoldTimeH = databaseHoldTimeH;
        return this;
    }
    
    /**
     * Additional field to add some notes about this subscription.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public Subscription withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Url to the individual resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("events_url")
    public String eventsUrl;
    public Subscription withEventsUrl(String eventsUrl) {
        this.eventsUrl = eventsUrl;
        return this;
    }
    
    /**
     * Unique identifier for resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Subscription withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * If set to `true`, resource references in an event (e.g. the location an item moved to) are resolved and populated with data instead of giving just an ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("populate_events")
    public Boolean populateEvents;
    public Subscription withPopulateEvents(Boolean populateEvents) {
        this.populateEvents = populateEvents;
        return this;
    }
    
    /**
     * If `target_url` is set or has been set before, and delivery to the target URL failed at least once, this contains debugging information about the nature of the most recent failure.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_delivery_last_failure")
    public java.util.Map<String, Object> targetDeliveryLastFailure;
    public Subscription withTargetDeliveryLastFailure(java.util.Map<String, Object> targetDeliveryLastFailure) {
        this.targetDeliveryLastFailure = targetDeliveryLastFailure;
        return this;
    }
    
    /**
     * If `target_url` is set, `target_delivery_status.ok` will be `true` or `false` depending on whether events are being succesfully delivered. `target_delivery_status.since` indicates when t his status last changed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_delivery_status")
    public java.util.Map<String, Object> targetDeliveryStatus;
    public Subscription withTargetDeliveryStatus(java.util.Map<String, Object> targetDeliveryStatus) {
        this.targetDeliveryStatus = targetDeliveryStatus;
        return this;
    }
    
    /**
     * Set to `true` if you want our server to retry if `target_url` is not giving back a `2xx` success code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_retry")
    public Boolean targetRetry;
    public Subscription withTargetRetry(Boolean targetRetry) {
        this.targetRetry = targetRetry;
        return this;
    }
    
    /**
     * Url to an external service that all applicable events are pushed to (webhook). Configure to `null` if you don't wish to use this (default).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_url")
    public String targetUrl;
    public Subscription withTargetUrl(String targetUrl) {
        this.targetUrl = targetUrl;
        return this;
    }
    
    /**
     * [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time_created")
    public String timeCreated;
    public Subscription withTimeCreated(String timeCreated) {
        this.timeCreated = timeCreated;
        return this;
    }
    
    /**
     * [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time_updated")
    public String timeUpdated;
    public Subscription withTimeUpdated(String timeUpdated) {
        this.timeUpdated = timeUpdated;
        return this;
    }
    
    /**
     * MQTT filter that is applied to all events. Allows you to select and filter events. See [Event filtering](https://intellifi.zendesk.com/hc/en-us/articles/360008791494) for more information
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("topic_filter")
    public String topicFilter;
    public Subscription withTopicFilter(String topicFilter) {
        this.topicFilter = topicFilter;
        return this;
    }
    
    /**
     * Url to the individual resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;
    public Subscription withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * Whether or not the `target_url` endpoint TLS certificate is verified to be valid.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verify_target_certificate")
    public Boolean verifyTargetCertificate;
    public Subscription withVerifyTargetCertificate(Boolean verifyTargetCertificate) {
        this.verifyTargetCertificate = verifyTargetCertificate;
        return this;
    }
    
}
