// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdateSiteRackPhysicalPropertiesPathParams struct {
	//  The ID or the Amazon Resource Name (ARN) of the site.
	SiteID string `pathParam:"style=simple,explode=false,name=SiteId"`
}

type UpdateSiteRackPhysicalPropertiesHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// UpdateSiteRackPhysicalPropertiesRequestBodyFiberOpticCableTypeEnum - The type of fiber that you will use to attach the Outpost to your network.
type UpdateSiteRackPhysicalPropertiesRequestBodyFiberOpticCableTypeEnum string

const (
	UpdateSiteRackPhysicalPropertiesRequestBodyFiberOpticCableTypeEnumSingleMode UpdateSiteRackPhysicalPropertiesRequestBodyFiberOpticCableTypeEnum = "SINGLE_MODE"
	UpdateSiteRackPhysicalPropertiesRequestBodyFiberOpticCableTypeEnumMultiMode  UpdateSiteRackPhysicalPropertiesRequestBodyFiberOpticCableTypeEnum = "MULTI_MODE"
)

func (e *UpdateSiteRackPhysicalPropertiesRequestBodyFiberOpticCableTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SINGLE_MODE":
		fallthrough
	case "MULTI_MODE":
		*e = UpdateSiteRackPhysicalPropertiesRequestBodyFiberOpticCableTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSiteRackPhysicalPropertiesRequestBodyFiberOpticCableTypeEnum: %s", s)
	}
}

// UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnum - The maximum rack weight that this site can support. <code>NO_LIMIT</code> is over 2000lbs.
type UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnum string

const (
	UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnumNoLimit    UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnum = "NO_LIMIT"
	UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnumMax1400Lbs UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnum = "MAX_1400_LBS"
	UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnumMax1600Lbs UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnum = "MAX_1600_LBS"
	UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnumMax1800Lbs UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnum = "MAX_1800_LBS"
	UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnumMax2000Lbs UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnum = "MAX_2000_LBS"
)

func (e *UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NO_LIMIT":
		fallthrough
	case "MAX_1400_LBS":
		fallthrough
	case "MAX_1600_LBS":
		fallthrough
	case "MAX_1800_LBS":
		fallthrough
	case "MAX_2000_LBS":
		*e = UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnum: %s", s)
	}
}

// UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum - <p>The type of optical standard that you will use to attach the Outpost to your network. This field is dependent on uplink speed, fiber type, and distance to the upstream device. For more information about networking requirements for racks, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#facility-networking">Network</a> in the Amazon Web Services Outposts User Guide. </p> <ul> <li> <p> <code>OPTIC_10GBASE_SR</code>: 10GBASE-SR</p> </li> <li> <p> <code>OPTIC_10GBASE_IR</code>: 10GBASE-IR</p> </li> <li> <p> <code>OPTIC_10GBASE_LR</code>: 10GBASE-LR</p> </li> <li> <p> <code>OPTIC_40GBASE_SR</code>: 40GBASE-SR</p> </li> <li> <p> <code>OPTIC_40GBASE_ESR</code>: 40GBASE-ESR</p> </li> <li> <p> <code>OPTIC_40GBASE_IR4_LR4L</code>: 40GBASE-IR (LR4L)</p> </li> <li> <p> <code>OPTIC_40GBASE_LR4</code>: 40GBASE-LR4</p> </li> <li> <p> <code>OPTIC_100GBASE_SR4</code>: 100GBASE-SR4</p> </li> <li> <p> <code>OPTIC_100GBASE_CWDM4</code>: 100GBASE-CWDM4</p> </li> <li> <p> <code>OPTIC_100GBASE_LR4</code>: 100GBASE-LR4</p> </li> <li> <p> <code>OPTIC_100G_PSM4_MSA</code>: 100G PSM4 MSA</p> </li> <li> <p> <code>OPTIC_1000BASE_LX</code>: 1000Base-LX</p> </li> <li> <p> <code>OPTIC_1000BASE_SX</code> : 1000Base-SX</p> </li> </ul>
type UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum string

const (
	UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnumOptic10GbaseSr      UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum = "OPTIC_10GBASE_SR"
	UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnumOptic10GbaseIr      UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum = "OPTIC_10GBASE_IR"
	UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnumOptic10GbaseLr      UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum = "OPTIC_10GBASE_LR"
	UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnumOptic40GbaseSr      UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum = "OPTIC_40GBASE_SR"
	UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnumOptic40GbaseEsr     UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum = "OPTIC_40GBASE_ESR"
	UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnumOptic40GbaseIr4Lr4L UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum = "OPTIC_40GBASE_IR4_LR4L"
	UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnumOptic40GbaseLr4     UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum = "OPTIC_40GBASE_LR4"
	UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnumOptic100GbaseSr4    UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum = "OPTIC_100GBASE_SR4"
	UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnumOptic100GbaseCwdm4  UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum = "OPTIC_100GBASE_CWDM4"
	UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnumOptic100GbaseLr4    UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum = "OPTIC_100GBASE_LR4"
	UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnumOptic100GPsm4Msa    UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum = "OPTIC_100G_PSM4_MSA"
	UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnumOptic1000BaseLx     UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum = "OPTIC_1000BASE_LX"
	UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnumOptic1000BaseSx     UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum = "OPTIC_1000BASE_SX"
)

func (e *UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "OPTIC_10GBASE_SR":
		fallthrough
	case "OPTIC_10GBASE_IR":
		fallthrough
	case "OPTIC_10GBASE_LR":
		fallthrough
	case "OPTIC_40GBASE_SR":
		fallthrough
	case "OPTIC_40GBASE_ESR":
		fallthrough
	case "OPTIC_40GBASE_IR4_LR4L":
		fallthrough
	case "OPTIC_40GBASE_LR4":
		fallthrough
	case "OPTIC_100GBASE_SR4":
		fallthrough
	case "OPTIC_100GBASE_CWDM4":
		fallthrough
	case "OPTIC_100GBASE_LR4":
		fallthrough
	case "OPTIC_100G_PSM4_MSA":
		fallthrough
	case "OPTIC_1000BASE_LX":
		fallthrough
	case "OPTIC_1000BASE_SX":
		*e = UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum: %s", s)
	}
}

// UpdateSiteRackPhysicalPropertiesRequestBodyPowerConnectorEnum - <p>The power connector that Amazon Web Services should plan to provide for connections to the hardware. Note the correlation between <code>PowerPhase</code> and <code>PowerConnector</code>. </p> <ul> <li> <p>Single-phase AC feed</p> <ul> <li> <p> <b>L6-30P</b> – (common in US); 30A; single phase</p> </li> <li> <p> <b>IEC309 (blue)</b> – P+N+E, 6hr; 32 A; single phase</p> </li> </ul> </li> <li> <p>Three-phase AC feed</p> <ul> <li> <p> <b>AH530P7W (red)</b> – 3P+N+E, 7hr; 30A; three phase</p> </li> <li> <p> <b>AH532P6W (red)</b> – 3P+N+E, 6hr; 32A; three phase</p> </li> </ul> </li> </ul>
type UpdateSiteRackPhysicalPropertiesRequestBodyPowerConnectorEnum string

const (
	UpdateSiteRackPhysicalPropertiesRequestBodyPowerConnectorEnumL630P    UpdateSiteRackPhysicalPropertiesRequestBodyPowerConnectorEnum = "L6_30P"
	UpdateSiteRackPhysicalPropertiesRequestBodyPowerConnectorEnumIec309   UpdateSiteRackPhysicalPropertiesRequestBodyPowerConnectorEnum = "IEC309"
	UpdateSiteRackPhysicalPropertiesRequestBodyPowerConnectorEnumAh530P7W UpdateSiteRackPhysicalPropertiesRequestBodyPowerConnectorEnum = "AH530P7W"
	UpdateSiteRackPhysicalPropertiesRequestBodyPowerConnectorEnumAh532P6W UpdateSiteRackPhysicalPropertiesRequestBodyPowerConnectorEnum = "AH532P6W"
)

func (e *UpdateSiteRackPhysicalPropertiesRequestBodyPowerConnectorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "L6_30P":
		fallthrough
	case "IEC309":
		fallthrough
	case "AH530P7W":
		fallthrough
	case "AH532P6W":
		*e = UpdateSiteRackPhysicalPropertiesRequestBodyPowerConnectorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSiteRackPhysicalPropertiesRequestBodyPowerConnectorEnum: %s", s)
	}
}

// UpdateSiteRackPhysicalPropertiesRequestBodyPowerDrawKvaEnum - The power draw, in kVA, available at the hardware placement position for the rack.
type UpdateSiteRackPhysicalPropertiesRequestBodyPowerDrawKvaEnum string

const (
	UpdateSiteRackPhysicalPropertiesRequestBodyPowerDrawKvaEnumPower5Kva  UpdateSiteRackPhysicalPropertiesRequestBodyPowerDrawKvaEnum = "POWER_5_KVA"
	UpdateSiteRackPhysicalPropertiesRequestBodyPowerDrawKvaEnumPower10Kva UpdateSiteRackPhysicalPropertiesRequestBodyPowerDrawKvaEnum = "POWER_10_KVA"
	UpdateSiteRackPhysicalPropertiesRequestBodyPowerDrawKvaEnumPower15Kva UpdateSiteRackPhysicalPropertiesRequestBodyPowerDrawKvaEnum = "POWER_15_KVA"
	UpdateSiteRackPhysicalPropertiesRequestBodyPowerDrawKvaEnumPower30Kva UpdateSiteRackPhysicalPropertiesRequestBodyPowerDrawKvaEnum = "POWER_30_KVA"
)

func (e *UpdateSiteRackPhysicalPropertiesRequestBodyPowerDrawKvaEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "POWER_5_KVA":
		fallthrough
	case "POWER_10_KVA":
		fallthrough
	case "POWER_15_KVA":
		fallthrough
	case "POWER_30_KVA":
		*e = UpdateSiteRackPhysicalPropertiesRequestBodyPowerDrawKvaEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSiteRackPhysicalPropertiesRequestBodyPowerDrawKvaEnum: %s", s)
	}
}

// UpdateSiteRackPhysicalPropertiesRequestBodyPowerFeedDropEnum - Indicates whether the power feed comes above or below the rack.
type UpdateSiteRackPhysicalPropertiesRequestBodyPowerFeedDropEnum string

const (
	UpdateSiteRackPhysicalPropertiesRequestBodyPowerFeedDropEnumAboveRack UpdateSiteRackPhysicalPropertiesRequestBodyPowerFeedDropEnum = "ABOVE_RACK"
	UpdateSiteRackPhysicalPropertiesRequestBodyPowerFeedDropEnumBelowRack UpdateSiteRackPhysicalPropertiesRequestBodyPowerFeedDropEnum = "BELOW_RACK"
)

func (e *UpdateSiteRackPhysicalPropertiesRequestBodyPowerFeedDropEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ABOVE_RACK":
		fallthrough
	case "BELOW_RACK":
		*e = UpdateSiteRackPhysicalPropertiesRequestBodyPowerFeedDropEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSiteRackPhysicalPropertiesRequestBodyPowerFeedDropEnum: %s", s)
	}
}

// UpdateSiteRackPhysicalPropertiesRequestBodyPowerPhaseEnum - <p>The power option that you can provide for hardware. </p> <ul> <li> <p>Single-phase AC feed: 200 V to 277 V, 50 Hz or 60 Hz</p> </li> <li> <p>Three-phase AC feed: 346 V to 480 V, 50 Hz or 60 Hz</p> </li> </ul>
type UpdateSiteRackPhysicalPropertiesRequestBodyPowerPhaseEnum string

const (
	UpdateSiteRackPhysicalPropertiesRequestBodyPowerPhaseEnumSinglePhase UpdateSiteRackPhysicalPropertiesRequestBodyPowerPhaseEnum = "SINGLE_PHASE"
	UpdateSiteRackPhysicalPropertiesRequestBodyPowerPhaseEnumThreePhase  UpdateSiteRackPhysicalPropertiesRequestBodyPowerPhaseEnum = "THREE_PHASE"
)

func (e *UpdateSiteRackPhysicalPropertiesRequestBodyPowerPhaseEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SINGLE_PHASE":
		fallthrough
	case "THREE_PHASE":
		*e = UpdateSiteRackPhysicalPropertiesRequestBodyPowerPhaseEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSiteRackPhysicalPropertiesRequestBodyPowerPhaseEnum: %s", s)
	}
}

// UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum - <p>Racks come with two Outpost network devices. Depending on the supported uplink speed at the site, the Outpost network devices provide a variable number of uplinks. Specify the number of uplinks for each Outpost network device that you intend to use to connect the rack to your network. Note the correlation between <code>UplinkGbps</code> and <code>UplinkCount</code>. </p> <ul> <li> <p>1Gbps - Uplinks available: 1, 2, 4, 6, 8</p> </li> <li> <p>10Gbps - Uplinks available: 1, 2, 4, 8, 12, 16</p> </li> <li> <p>40 and 100 Gbps- Uplinks available: 1, 2, 4</p> </li> </ul>
type UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum string

const (
	UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnumUplinkCount1  UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum = "UPLINK_COUNT_1"
	UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnumUplinkCount2  UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum = "UPLINK_COUNT_2"
	UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnumUplinkCount3  UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum = "UPLINK_COUNT_3"
	UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnumUplinkCount4  UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum = "UPLINK_COUNT_4"
	UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnumUplinkCount5  UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum = "UPLINK_COUNT_5"
	UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnumUplinkCount6  UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum = "UPLINK_COUNT_6"
	UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnumUplinkCount7  UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum = "UPLINK_COUNT_7"
	UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnumUplinkCount8  UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum = "UPLINK_COUNT_8"
	UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnumUplinkCount12 UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum = "UPLINK_COUNT_12"
	UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnumUplinkCount16 UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum = "UPLINK_COUNT_16"
)

func (e *UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UPLINK_COUNT_1":
		fallthrough
	case "UPLINK_COUNT_2":
		fallthrough
	case "UPLINK_COUNT_3":
		fallthrough
	case "UPLINK_COUNT_4":
		fallthrough
	case "UPLINK_COUNT_5":
		fallthrough
	case "UPLINK_COUNT_6":
		fallthrough
	case "UPLINK_COUNT_7":
		fallthrough
	case "UPLINK_COUNT_8":
		fallthrough
	case "UPLINK_COUNT_12":
		fallthrough
	case "UPLINK_COUNT_16":
		*e = UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum: %s", s)
	}
}

// UpdateSiteRackPhysicalPropertiesRequestBodyUplinkGbpsEnum - The uplink speed the rack should support for the connection to the Region.
type UpdateSiteRackPhysicalPropertiesRequestBodyUplinkGbpsEnum string

const (
	UpdateSiteRackPhysicalPropertiesRequestBodyUplinkGbpsEnumUplink1G   UpdateSiteRackPhysicalPropertiesRequestBodyUplinkGbpsEnum = "UPLINK_1G"
	UpdateSiteRackPhysicalPropertiesRequestBodyUplinkGbpsEnumUplink10G  UpdateSiteRackPhysicalPropertiesRequestBodyUplinkGbpsEnum = "UPLINK_10G"
	UpdateSiteRackPhysicalPropertiesRequestBodyUplinkGbpsEnumUplink40G  UpdateSiteRackPhysicalPropertiesRequestBodyUplinkGbpsEnum = "UPLINK_40G"
	UpdateSiteRackPhysicalPropertiesRequestBodyUplinkGbpsEnumUplink100G UpdateSiteRackPhysicalPropertiesRequestBodyUplinkGbpsEnum = "UPLINK_100G"
)

func (e *UpdateSiteRackPhysicalPropertiesRequestBodyUplinkGbpsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UPLINK_1G":
		fallthrough
	case "UPLINK_10G":
		fallthrough
	case "UPLINK_40G":
		fallthrough
	case "UPLINK_100G":
		*e = UpdateSiteRackPhysicalPropertiesRequestBodyUplinkGbpsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSiteRackPhysicalPropertiesRequestBodyUplinkGbpsEnum: %s", s)
	}
}

type UpdateSiteRackPhysicalPropertiesRequestBody struct {
	// The type of fiber that you will use to attach the Outpost to your network.
	FiberOpticCableType *UpdateSiteRackPhysicalPropertiesRequestBodyFiberOpticCableTypeEnum `json:"FiberOpticCableType,omitempty"`
	// The maximum rack weight that this site can support. <code>NO_LIMIT</code> is over 2000lbs.
	MaximumSupportedWeightLbs *UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnum `json:"MaximumSupportedWeightLbs,omitempty"`
	// <p>The type of optical standard that you will use to attach the Outpost to your network. This field is dependent on uplink speed, fiber type, and distance to the upstream device. For more information about networking requirements for racks, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#facility-networking">Network</a> in the Amazon Web Services Outposts User Guide. </p> <ul> <li> <p> <code>OPTIC_10GBASE_SR</code>: 10GBASE-SR</p> </li> <li> <p> <code>OPTIC_10GBASE_IR</code>: 10GBASE-IR</p> </li> <li> <p> <code>OPTIC_10GBASE_LR</code>: 10GBASE-LR</p> </li> <li> <p> <code>OPTIC_40GBASE_SR</code>: 40GBASE-SR</p> </li> <li> <p> <code>OPTIC_40GBASE_ESR</code>: 40GBASE-ESR</p> </li> <li> <p> <code>OPTIC_40GBASE_IR4_LR4L</code>: 40GBASE-IR (LR4L)</p> </li> <li> <p> <code>OPTIC_40GBASE_LR4</code>: 40GBASE-LR4</p> </li> <li> <p> <code>OPTIC_100GBASE_SR4</code>: 100GBASE-SR4</p> </li> <li> <p> <code>OPTIC_100GBASE_CWDM4</code>: 100GBASE-CWDM4</p> </li> <li> <p> <code>OPTIC_100GBASE_LR4</code>: 100GBASE-LR4</p> </li> <li> <p> <code>OPTIC_100G_PSM4_MSA</code>: 100G PSM4 MSA</p> </li> <li> <p> <code>OPTIC_1000BASE_LX</code>: 1000Base-LX</p> </li> <li> <p> <code>OPTIC_1000BASE_SX</code> : 1000Base-SX</p> </li> </ul>
	OpticalStandard *UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum `json:"OpticalStandard,omitempty"`
	// <p>The power connector that Amazon Web Services should plan to provide for connections to the hardware. Note the correlation between <code>PowerPhase</code> and <code>PowerConnector</code>. </p> <ul> <li> <p>Single-phase AC feed</p> <ul> <li> <p> <b>L6-30P</b> – (common in US); 30A; single phase</p> </li> <li> <p> <b>IEC309 (blue)</b> – P+N+E, 6hr; 32 A; single phase</p> </li> </ul> </li> <li> <p>Three-phase AC feed</p> <ul> <li> <p> <b>AH530P7W (red)</b> – 3P+N+E, 7hr; 30A; three phase</p> </li> <li> <p> <b>AH532P6W (red)</b> – 3P+N+E, 6hr; 32A; three phase</p> </li> </ul> </li> </ul>
	PowerConnector *UpdateSiteRackPhysicalPropertiesRequestBodyPowerConnectorEnum `json:"PowerConnector,omitempty"`
	// The power draw, in kVA, available at the hardware placement position for the rack.
	PowerDrawKva *UpdateSiteRackPhysicalPropertiesRequestBodyPowerDrawKvaEnum `json:"PowerDrawKva,omitempty"`
	// Indicates whether the power feed comes above or below the rack.
	PowerFeedDrop *UpdateSiteRackPhysicalPropertiesRequestBodyPowerFeedDropEnum `json:"PowerFeedDrop,omitempty"`
	// <p>The power option that you can provide for hardware. </p> <ul> <li> <p>Single-phase AC feed: 200 V to 277 V, 50 Hz or 60 Hz</p> </li> <li> <p>Three-phase AC feed: 346 V to 480 V, 50 Hz or 60 Hz</p> </li> </ul>
	PowerPhase *UpdateSiteRackPhysicalPropertiesRequestBodyPowerPhaseEnum `json:"PowerPhase,omitempty"`
	// <p>Racks come with two Outpost network devices. Depending on the supported uplink speed at the site, the Outpost network devices provide a variable number of uplinks. Specify the number of uplinks for each Outpost network device that you intend to use to connect the rack to your network. Note the correlation between <code>UplinkGbps</code> and <code>UplinkCount</code>. </p> <ul> <li> <p>1Gbps - Uplinks available: 1, 2, 4, 6, 8</p> </li> <li> <p>10Gbps - Uplinks available: 1, 2, 4, 8, 12, 16</p> </li> <li> <p>40 and 100 Gbps- Uplinks available: 1, 2, 4</p> </li> </ul>
	UplinkCount *UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum `json:"UplinkCount,omitempty"`
	// The uplink speed the rack should support for the connection to the Region.
	UplinkGbps *UpdateSiteRackPhysicalPropertiesRequestBodyUplinkGbpsEnum `json:"UplinkGbps,omitempty"`
}

type UpdateSiteRackPhysicalPropertiesRequest struct {
	PathParams UpdateSiteRackPhysicalPropertiesPathParams
	Headers    UpdateSiteRackPhysicalPropertiesHeaders
	Request    UpdateSiteRackPhysicalPropertiesRequestBody `request:"mediaType=application/json"`
}

type UpdateSiteRackPhysicalPropertiesResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// InternalServerException
	InternalServerException interface{}
	// NotFoundException
	NotFoundException interface{}
	StatusCode        int
	RawResponse       *http.Response
	// Success
	UpdateSiteRackPhysicalPropertiesOutput *shared.UpdateSiteRackPhysicalPropertiesOutput
	// ValidationException
	ValidationException interface{}
}
