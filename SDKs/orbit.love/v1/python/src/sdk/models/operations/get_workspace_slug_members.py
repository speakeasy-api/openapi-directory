"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class GetWorkspaceSlugMembersSecurity:
    
    bearer: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'bearer', 'field_name': 'Authorization' }})  
    
class GetWorkspaceSlugMembersActivityTypeEnum(str, Enum):
    r"""Comma separated list of activity types"""
    DISCOURSE_TOPIC_CREATED = 'discourse:topic:created'
    DISCOURSE_POST_LIKED = 'discourse:post:liked'
    DISCOURSE_USER_CREATED = 'discourse:user:created'
    DISCOURSE_POST_CREATED = 'discourse:post:created'
    SLACK_MESSAGE_SENT = 'slack:message:sent'
    SLACK_THREAD_REPLIED = 'slack:thread:replied'
    SLACK_CHANNEL_JOINED = 'slack:channel:joined'
    NOTE_CREATED = 'note:created'
    POST_CREATED = 'post:created'
    ISSUES_OPENED = 'issues:opened'
    DISCORD_MESSAGE_SENT = 'discord:message:sent'
    ISSUE_COMMENT_CREATED = 'issue_comment:created'
    DISCORD_THREAD_REPLIED = 'discord:thread:replied'
    CUSTOM_HAPPENED = 'custom:happened'
    DEV_COMMENT = 'dev:comment'
    DISCORD_MESSAGE_REPLIED = 'discord:message:replied'
    DISCORD_SERVER_JOINED = 'discord:server:joined'
    INSIDED_CONVERSATION_STARTED = 'insided:conversation:started'
    FORK_CREATED = 'fork:created'
    INSIDED_IDEA_REPLIED = 'insided:idea:replied'
    INSIDED_ARTICLE_CREATED = 'insided:article:created'
    DISCUSSIONS_DISCUSSION_CREATED = 'discussions:discussion_created'
    INSIDED_QUESTION_REPLIED = 'insided:question:replied'
    DISCUSSIONS_COMMENT = 'discussions:comment'
    DISCUSSIONS_REPLY = 'discussions:reply'
    INSIDED_ARTICLE_REPLIED = 'insided:article:replied'
    INSIDED_QUESTION_ASKED = 'insided:question:asked'
    INSIDED_CONVERSATION_REPLIED = 'insided:conversation:replied'
    INSIDED_IDEA_SUBMITTED = 'insided:idea:submitted'
    REDDIT_COMMENT = 'reddit:comment'
    REDDIT_POST = 'reddit:post'
    STACKOVERFLOW_ANSWER = 'stackoverflow:answer'
    LINKEDIN_COMMENT = 'linkedin:comment'
    PULL_REQUESTS_OPENED = 'pull_requests:opened'
    PULL_REQUESTS_MERGED = 'pull_requests:merged'
    STAR_CREATED = 'star:created'
    STACKOVERFLOW_QUESTION = 'stackoverflow:question'
    TWEET_SENT = 'tweet:sent'
    TWITTER_FOLLOWED = 'twitter:followed'
    YOUTUBE_COMMENT = 'youtube:comment'

class GetWorkspaceSlugMembersAffiliationEnum(str, Enum):
    MEMBER = 'member'
    TEAMMATE = 'teammate'

class GetWorkspaceSlugMembersDirectionEnum(str, Enum):
    ASC = 'ASC'
    DESC = 'DESC'

class GetWorkspaceSlugMembersIdentityEnum(str, Enum):
    GITHUB = 'github'
    TWITTER = 'twitter'
    EMAIL = 'email'
    DISCOURSE = 'discourse'
    LINKEDIN = 'linkedin'
    DEVTO = 'devto'
    SLACK = 'slack'
    DISCORD = 'discord'

class GetWorkspaceSlugMembersItemsEnum(str, Enum):
    TEN = '10'
    FIFTY = '50'
    ONE_HUNDRED = '100'

class GetWorkspaceSlugMembersSortEnum(str, Enum):
    ACTIVITIES_COUNT = 'activities_count'
    COMPANY = 'company'
    CREATED_AT = 'created_at'
    FIRST_ACTIVITY = 'first_activity'
    GITHUB_FOLLOWERS = 'github_followers'
    ID = 'id'
    LAST_ACTIVITY = 'last_activity'
    LOCATION = 'location'
    LOVE = 'love'
    NAME = 'name'
    ORBIT = 'orbit'
    REACH = 'reach'
    TITLE = 'title'
    TWITTER_FOLLOWERS = 'twitter_followers'
    UPDATED_AT = 'updated_at'


@dataclasses.dataclass
class GetWorkspaceSlugMembersRequest:
    
    workspace_slug: str = dataclasses.field(metadata={'path_param': { 'field_name': 'workspace_slug', 'style': 'simple', 'explode': False }})  
    activities_count_max: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'activities_count_max', 'style': 'form', 'explode': True }})  
    activities_count_min: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'activities_count_min', 'style': 'form', 'explode': True }})  
    activity_type: Optional[GetWorkspaceSlugMembersActivityTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'activity_type', 'style': 'form', 'explode': True }})
    r"""Comma separated list of activity types"""  
    affiliation: Optional[GetWorkspaceSlugMembersAffiliationEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'affiliation', 'style': 'form', 'explode': True }})  
    cities: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cities[]', 'style': 'form', 'explode': True }})
    r"""Comma separated list of cities. The union (OR) of cities is applied."""  
    company: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'company[]', 'style': 'form', 'explode': True }})
    r"""Comma separated list of companies. The union (OR) of companies is applied."""  
    countries: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'countries[]', 'style': 'form', 'explode': True }})
    r"""Comma separated list of countries. The union (OR) of countries is applied."""  
    direction: Optional[GetWorkspaceSlugMembersDirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'direction', 'style': 'form', 'explode': True }})  
    end_date: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'end_date', 'style': 'form', 'explode': True }})
    r"""Filter activities before this date. Format: YYYY-MM-DD."""  
    identity: Optional[GetWorkspaceSlugMembersIdentityEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'identity', 'style': 'form', 'explode': True }})  
    items: Optional[GetWorkspaceSlugMembersItemsEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'items', 'style': 'form', 'explode': True }})  
    member_tags: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'member_tags', 'style': 'form', 'explode': True }})
    r"""The list of tags to filter against. Separate tags with `,` to do an intersection (AND), or with `|` to do a union (OR)"""  
    orbit: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'orbit', 'style': 'form', 'explode': True }})
    r"""The list of orbit levels to filter against. Accepted values are 1, 2, 3, 4, n. In the request, a format like `23` would include levels 2 and 3. `n` is for members with no orbit level."""  
    page: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})  
    query: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'query', 'style': 'form', 'explode': True }})  
    regions: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'regions[]', 'style': 'form', 'explode': True }})
    r"""Comma separated list of regions. The union (OR) of regions is applied."""  
    relative: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'relative', 'style': 'form', 'explode': True }})
    r"""Relative timeframes. Format: this_<integer>_<period>, with period in [days, weeks, months, years]. For example, this_30_days."""  
    sort: Optional[GetWorkspaceSlugMembersSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})  
    start_date: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'start_date', 'style': 'form', 'explode': True }})
    r"""Filter activities after this date. Format: YYYY-MM-DD."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'title[]', 'style': 'form', 'explode': True }})
    r"""Comma separated list of job titles. The union (OR) of job titles is applied."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""Deprecated in favor of the activity_type parameter."""  
    

@dataclasses.dataclass
class GetWorkspaceSlugMembersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    