/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Subscription - Subscription information
 */
public class Subscription {
    /**
     * An allotment of credits as part of a subscription
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allotment")
    public Allotment allotment;
    public Subscription withAllotment(Allotment allotment) {
        this.allotment = allotment;
        return this;
    }
    
    /**
     * Identifier for the type of assets associated with this subscription (images, videos, audio, editorial)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("asset_type")
    public String assetType;
    public Subscription withAssetType(String assetType) {
        this.assetType = assetType;
        return this;
    }
    
    /**
     * Description of the subscription
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public Subscription withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Date the subscription ends
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("expiration_time")
    public OffsetDateTime expirationTime;
    public Subscription withExpirationTime(OffsetDateTime expirationTime) {
        this.expirationTime = expirationTime;
        return this;
    }
    
    /**
     * List of formats that are licensable for the subscription
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("formats")
    public LicenseFormat[] formats;
    public Subscription withFormats(LicenseFormat[] formats) {
        this.formats = formats;
        return this;
    }
    
    /**
     * Unique internal identifier for the subscription
     */
    @JsonProperty("id")
    public String id;
    public Subscription withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Internal identifier for the type of subscription
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("license")
    public String license;
    public Subscription withLicense(String license) {
        this.license = license;
        return this;
    }
    
    /**
     * Subscription metadata; different for each customer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public java.util.Map<String, Object> metadata;
    public Subscription withMetadata(java.util.Map<String, Object> metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * Price
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price_per_download")
    public Price pricePerDownload;
    public Subscription withPricePerDownload(Price pricePerDownload) {
        this.pricePerDownload = pricePerDownload;
        return this;
    }
    
}
