// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetOccupantsNearestOutputFormatLocationDescriptorEnum - Describes the nature of the address location. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#locationDescriptor target="_blank">locationDescriptor</a>
type GetOccupantsNearestOutputFormatLocationDescriptorEnum string

const (
	GetOccupantsNearestOutputFormatLocationDescriptorEnumAny            GetOccupantsNearestOutputFormatLocationDescriptorEnum = "any"
	GetOccupantsNearestOutputFormatLocationDescriptorEnumAccessPoint    GetOccupantsNearestOutputFormatLocationDescriptorEnum = "accessPoint"
	GetOccupantsNearestOutputFormatLocationDescriptorEnumFrontDoorPoint GetOccupantsNearestOutputFormatLocationDescriptorEnum = "frontDoorPoint"
	GetOccupantsNearestOutputFormatLocationDescriptorEnumParcelPoint    GetOccupantsNearestOutputFormatLocationDescriptorEnum = "parcelPoint"
	GetOccupantsNearestOutputFormatLocationDescriptorEnumRooftopPoint   GetOccupantsNearestOutputFormatLocationDescriptorEnum = "rooftopPoint"
	GetOccupantsNearestOutputFormatLocationDescriptorEnumRoutingPoint   GetOccupantsNearestOutputFormatLocationDescriptorEnum = "routingPoint"
)

func (e *GetOccupantsNearestOutputFormatLocationDescriptorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "any":
		fallthrough
	case "accessPoint":
		fallthrough
	case "frontDoorPoint":
		fallthrough
	case "parcelPoint":
		fallthrough
	case "rooftopPoint":
		fallthrough
	case "routingPoint":
		*e = GetOccupantsNearestOutputFormatLocationDescriptorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOccupantsNearestOutputFormatLocationDescriptorEnum: %s", s)
	}
}

// GetOccupantsNearestOutputFormatOutputFormatEnum - Results format. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target="_blank">outputFormat</a>.
//
// Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS=4326)
type GetOccupantsNearestOutputFormatOutputFormatEnum string

const (
	GetOccupantsNearestOutputFormatOutputFormatEnumJSON    GetOccupantsNearestOutputFormatOutputFormatEnum = "json"
	GetOccupantsNearestOutputFormatOutputFormatEnumGeojson GetOccupantsNearestOutputFormatOutputFormatEnum = "geojson"
	GetOccupantsNearestOutputFormatOutputFormatEnumXhtml   GetOccupantsNearestOutputFormatOutputFormatEnum = "xhtml"
	GetOccupantsNearestOutputFormatOutputFormatEnumKml     GetOccupantsNearestOutputFormatOutputFormatEnum = "kml"
	GetOccupantsNearestOutputFormatOutputFormatEnumGml     GetOccupantsNearestOutputFormatOutputFormatEnum = "gml"
	GetOccupantsNearestOutputFormatOutputFormatEnumCsv     GetOccupantsNearestOutputFormatOutputFormatEnum = "csv"
	GetOccupantsNearestOutputFormatOutputFormatEnumShpz    GetOccupantsNearestOutputFormatOutputFormatEnum = "shpz"
)

func (e *GetOccupantsNearestOutputFormatOutputFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "json":
		fallthrough
	case "geojson":
		fallthrough
	case "xhtml":
		fallthrough
	case "kml":
		fallthrough
	case "gml":
		fallthrough
	case "csv":
		fallthrough
	case "shpz":
		*e = GetOccupantsNearestOutputFormatOutputFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOccupantsNearestOutputFormatOutputFormatEnum: %s", s)
	}
}

// GetOccupantsNearestOutputFormatOutputSrsEnum - The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
type GetOccupantsNearestOutputFormatOutputSrsEnum string

const (
	GetOccupantsNearestOutputFormatOutputSrsEnumFourThousandThreeHundredAndTwentySix  GetOccupantsNearestOutputFormatOutputSrsEnum = "4326"
	GetOccupantsNearestOutputFormatOutputSrsEnumFourThousandTwoHundredAndSixtyNine    GetOccupantsNearestOutputFormatOutputSrsEnum = "4269"
	GetOccupantsNearestOutputFormatOutputSrsEnumThreeThousandAndFive                  GetOccupantsNearestOutputFormatOutputSrsEnum = "3005"
	GetOccupantsNearestOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndSeven  GetOccupantsNearestOutputFormatOutputSrsEnum = "26907"
	GetOccupantsNearestOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndEight  GetOccupantsNearestOutputFormatOutputSrsEnum = "26908"
	GetOccupantsNearestOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndNine   GetOccupantsNearestOutputFormatOutputSrsEnum = "26909"
	GetOccupantsNearestOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndTen    GetOccupantsNearestOutputFormatOutputSrsEnum = "26910"
	GetOccupantsNearestOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndEleven GetOccupantsNearestOutputFormatOutputSrsEnum = "26911"
)

func (e *GetOccupantsNearestOutputFormatOutputSrsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "4326":
		fallthrough
	case "4269":
		fallthrough
	case "3005":
		fallthrough
	case "26907":
		fallthrough
	case "26908":
		fallthrough
	case "26909":
		fallthrough
	case "26910":
		fallthrough
	case "26911":
		*e = GetOccupantsNearestOutputFormatOutputSrsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOccupantsNearestOutputFormatOutputSrsEnum: %s", s)
	}
}

type GetOccupantsNearestOutputFormatRequest struct {
	// If true, include only basic match and address details in results. Not supported for shp, csv, and gml formats.
	Brief *bool `queryParam:"style=form,explode=true,name=brief"`
	// Describes the nature of the address location. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#locationDescriptor target="_blank">locationDescriptor</a>
	LocationDescriptor *GetOccupantsNearestOutputFormatLocationDescriptorEnum `queryParam:"style=form,explode=true,name=locationDescriptor"`
	// The maximum distance (in metres) to search from the given point.  If not specified, the search distance is unlimited.
	MaxDistance *int64 `queryParam:"style=form,explode=true,name=maxDistance"`
	// Results format. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target="_blank">outputFormat</a>.
	//
	// Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS=4326)
	OutputFormat GetOccupantsNearestOutputFormatOutputFormatEnum `pathParam:"style=simple,explode=false,name=outputFormat"`
	// The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
	OutputSRS *GetOccupantsNearestOutputFormatOutputSrsEnum `queryParam:"style=form,explode=true,name=outputSRS"`
	// The point (x,y) from which the nearest site will be identified. The coordinates must be specified in the same SRS as given by the 'outputSRS' parameter.
	Point string `queryParam:"style=form,explode=true,name=point"`
	// The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
	SetBack *int64 `queryParam:"style=form,explode=true,name=setBack"`
	// Example: schools;courts;employment<br>A list of tags separated by semicolons.
	Tags *string `queryParam:"style=form,explode=true,name=tags"`
}

type GetOccupantsNearestOutputFormatResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
