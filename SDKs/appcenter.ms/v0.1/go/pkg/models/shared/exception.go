// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ExceptionFramesLanguageEnum - programming language of the frame
type ExceptionFramesLanguageEnum string

const (
	ExceptionFramesLanguageEnumJavaScript   ExceptionFramesLanguageEnum = "JavaScript"
	ExceptionFramesLanguageEnumCSharp       ExceptionFramesLanguageEnum = "CSharp"
	ExceptionFramesLanguageEnumObjectiveC   ExceptionFramesLanguageEnum = "Objective-C"
	ExceptionFramesLanguageEnumObjectiveCpp ExceptionFramesLanguageEnum = "Objective-Cpp"
	ExceptionFramesLanguageEnumCpp          ExceptionFramesLanguageEnum = "Cpp"
	ExceptionFramesLanguageEnumC            ExceptionFramesLanguageEnum = "C"
	ExceptionFramesLanguageEnumSwift        ExceptionFramesLanguageEnum = "Swift"
	ExceptionFramesLanguageEnumJava         ExceptionFramesLanguageEnum = "Java"
	ExceptionFramesLanguageEnumUnknown      ExceptionFramesLanguageEnum = "Unknown"
)

func (e ExceptionFramesLanguageEnum) ToPointer() *ExceptionFramesLanguageEnum {
	return &e
}

func (e *ExceptionFramesLanguageEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "JavaScript":
		fallthrough
	case "CSharp":
		fallthrough
	case "Objective-C":
		fallthrough
	case "Objective-Cpp":
		fallthrough
	case "Cpp":
		fallthrough
	case "C":
		fallthrough
	case "Swift":
		fallthrough
	case "Java":
		fallthrough
	case "Unknown":
		*e = ExceptionFramesLanguageEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExceptionFramesLanguageEnum: %v", v)
	}
}

// ExceptionFrames - a single frame of a stack trace
type ExceptionFrames struct {
	// address of the frame
	Address *string `json:"address,omitempty"`
	// this line isn't from any framework
	AppCode bool `json:"app_code"`
	// is a class method
	ClassMethod *bool `json:"class_method,omitempty"`
	// name of the class
	ClassName *string `json:"class_name,omitempty"`
	// Formatted frame string
	CodeFormatted string `json:"code_formatted"`
	// Raw frame string
	CodeRaw string `json:"code_raw"`
	// name of the file
	File *string `json:"file,omitempty"`
	// Name of the framework
	FrameworkName *string `json:"framework_name,omitempty"`
	// programming language of the frame
	Language *ExceptionFramesLanguageEnum `json:"language,omitempty"`
	// line number
	Line *int64 `json:"line,omitempty"`
	// name of the method
	Method *string `json:"method,omitempty"`
	// parameters of the frames method
	MethodParams *string `json:"method_params,omitempty"`
	// frame should be shown always
	Relevant *bool `json:"relevant,omitempty"`
}

// ExceptionPlatformEnum - SDK/Platform this thread is beeing generated from
type ExceptionPlatformEnum string

const (
	ExceptionPlatformEnumIos         ExceptionPlatformEnum = "ios"
	ExceptionPlatformEnumAndroid     ExceptionPlatformEnum = "android"
	ExceptionPlatformEnumXamarin     ExceptionPlatformEnum = "xamarin"
	ExceptionPlatformEnumReactNative ExceptionPlatformEnum = "react-native"
	ExceptionPlatformEnumNdk         ExceptionPlatformEnum = "ndk"
	ExceptionPlatformEnumUnity       ExceptionPlatformEnum = "unity"
	ExceptionPlatformEnumOther       ExceptionPlatformEnum = "other"
)

func (e ExceptionPlatformEnum) ToPointer() *ExceptionPlatformEnum {
	return &e
}

func (e *ExceptionPlatformEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ios":
		fallthrough
	case "android":
		fallthrough
	case "xamarin":
		fallthrough
	case "react-native":
		fallthrough
	case "ndk":
		fallthrough
	case "unity":
		fallthrough
	case "other":
		*e = ExceptionPlatformEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExceptionPlatformEnum: %v", v)
	}
}

// Exception - a exception
type Exception struct {
	// frames of the excetpion
	Frames          []ExceptionFrames `json:"frames"`
	InnerExceptions []Exception       `json:"inner_exceptions,omitempty"`
	// SDK/Platform this thread is beeing generated from
	Platform *ExceptionPlatformEnum `json:"platform,omitempty"`
	// Reason of the exception
	Reason *string `json:"reason,omitempty"`
	// relevant exception (crashed)
	Relevant *bool `json:"relevant,omitempty"`
	// Type of the exception (NSSomethingException, NullPointerException)
	Type *string `json:"type,omitempty"`
}
