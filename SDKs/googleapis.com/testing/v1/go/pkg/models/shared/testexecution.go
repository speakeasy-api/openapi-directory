// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TestExecutionStateEnum - Output only. Indicates the current progress of the test execution (e.g., FINISHED).
type TestExecutionStateEnum string

const (
	TestExecutionStateEnumTestStateUnspecified     TestExecutionStateEnum = "TEST_STATE_UNSPECIFIED"
	TestExecutionStateEnumValidating               TestExecutionStateEnum = "VALIDATING"
	TestExecutionStateEnumPending                  TestExecutionStateEnum = "PENDING"
	TestExecutionStateEnumRunning                  TestExecutionStateEnum = "RUNNING"
	TestExecutionStateEnumFinished                 TestExecutionStateEnum = "FINISHED"
	TestExecutionStateEnumError                    TestExecutionStateEnum = "ERROR"
	TestExecutionStateEnumUnsupportedEnvironment   TestExecutionStateEnum = "UNSUPPORTED_ENVIRONMENT"
	TestExecutionStateEnumIncompatibleEnvironment  TestExecutionStateEnum = "INCOMPATIBLE_ENVIRONMENT"
	TestExecutionStateEnumIncompatibleArchitecture TestExecutionStateEnum = "INCOMPATIBLE_ARCHITECTURE"
	TestExecutionStateEnumCancelled                TestExecutionStateEnum = "CANCELLED"
	TestExecutionStateEnumInvalid                  TestExecutionStateEnum = "INVALID"
)

func (e TestExecutionStateEnum) ToPointer() *TestExecutionStateEnum {
	return &e
}

func (e *TestExecutionStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TEST_STATE_UNSPECIFIED":
		fallthrough
	case "VALIDATING":
		fallthrough
	case "PENDING":
		fallthrough
	case "RUNNING":
		fallthrough
	case "FINISHED":
		fallthrough
	case "ERROR":
		fallthrough
	case "UNSUPPORTED_ENVIRONMENT":
		fallthrough
	case "INCOMPATIBLE_ENVIRONMENT":
		fallthrough
	case "INCOMPATIBLE_ARCHITECTURE":
		fallthrough
	case "CANCELLED":
		fallthrough
	case "INVALID":
		*e = TestExecutionStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TestExecutionStateEnum: %v", v)
	}
}

// TestExecution - A single test executed in a single environment.
type TestExecution struct {
	// The environment in which the test is run.
	Environment *Environment `json:"environment,omitempty"`
	// Output only. Unique id set by the service.
	ID *string `json:"id,omitempty"`
	// Output only. Id of the containing TestMatrix.
	MatrixID *string `json:"matrixId,omitempty"`
	// Output only. The cloud project that owns the test execution.
	ProjectID *string `json:"projectId,omitempty"`
	// Output only. Details about the shard.
	Shard *Shard `json:"shard,omitempty"`
	// Output only. Indicates the current progress of the test execution (e.g., FINISHED).
	State *TestExecutionStateEnum `json:"state,omitempty"`
	// Additional details about the progress of the running test.
	TestDetails *TestDetails `json:"testDetails,omitempty"`
	// A description of how to run the test.
	TestSpecification *TestSpecification `json:"testSpecification,omitempty"`
	// Output only. The time this test execution was initially created.
	Timestamp *string `json:"timestamp,omitempty"`
	// Represents a tool results step resource. This has the results of a TestExecution.
	ToolResultsStep *ToolResultsStep `json:"toolResultsStep,omitempty"`
}
