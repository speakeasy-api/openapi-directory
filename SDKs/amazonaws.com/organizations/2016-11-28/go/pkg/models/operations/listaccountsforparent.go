// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListAccountsForParentQueryParams struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
}

// ListAccountsForParentXAmzTargetEnum
type ListAccountsForParentXAmzTargetEnum string

const (
	ListAccountsForParentXAmzTargetEnumAwsOrganizationsV20161128ListAccountsForParent ListAccountsForParentXAmzTargetEnum = "AWSOrganizationsV20161128.ListAccountsForParent"
)

func (e *ListAccountsForParentXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWSOrganizationsV20161128.ListAccountsForParent":
		*e = ListAccountsForParentXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAccountsForParentXAmzTargetEnum: %s", s)
	}
}

type ListAccountsForParentHeaders struct {
	XAmzAlgorithm     *string                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListAccountsForParentXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListAccountsForParentRequest struct {
	QueryParams ListAccountsForParentQueryParams
	Headers     ListAccountsForParentHeaders
	Request     shared.ListAccountsForParentRequest `request:"mediaType=application/json"`
}

type ListAccountsForParentResponse struct {
	// AWSOrganizationsNotInUseException
	AWSOrganizationsNotInUseException interface{}
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// InvalidInputException
	InvalidInputException interface{}
	// Success
	ListAccountsForParentResponse *shared.ListAccountsForParentResponse
	// ParentNotFoundException
	ParentNotFoundException interface{}
	// ServiceException
	ServiceException interface{}
	StatusCode       int
	RawResponse      *http.Response
	// TooManyRequestsException
	TooManyRequestsException interface{}
}
