"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import justification as shared_justification
from ..shared import relatedurl as shared_relatedurl
from ..shared import remediation as shared_remediation
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class VexAssessmentStateEnum(str, Enum):
    r"""Provides the state of this Vulnerability assessment."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    AFFECTED = 'AFFECTED'
    NOT_AFFECTED = 'NOT_AFFECTED'
    FIXED = 'FIXED'
    UNDER_INVESTIGATION = 'UNDER_INVESTIGATION'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VexAssessment:
    r"""VexAssessment provides all publisher provided Vex information that is related to this vulnerability."""
    
    cve: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cve'), 'exclude': lambda f: f is None }})
    r"""Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability."""  
    impacts: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('impacts'), 'exclude': lambda f: f is None }})
    r"""Contains information about the impact of this vulnerability, this will change with time."""  
    justification: Optional[shared_justification.Justification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('justification'), 'exclude': lambda f: f is None }})
    r"""Justification provides the justification when the state of the assessment if NOT_AFFECTED."""  
    note_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('noteName'), 'exclude': lambda f: f is None }})
    r"""The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`."""  
    related_uris: Optional[list[shared_relatedurl.RelatedURL]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relatedUris'), 'exclude': lambda f: f is None }})
    r"""Holds a list of references associated with this vulnerability item and assessment."""  
    remediations: Optional[list[shared_remediation.Remediation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remediations'), 'exclude': lambda f: f is None }})
    r"""Specifies details on how to handle (and presumably, fix) a vulnerability."""  
    state: Optional[VexAssessmentStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Provides the state of this Vulnerability assessment."""  
    