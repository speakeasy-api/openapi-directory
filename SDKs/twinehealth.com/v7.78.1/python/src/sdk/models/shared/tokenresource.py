"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TokenResourceAttributesTokenTypeEnum(str, Enum):
    BEARER = 'bearer'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TokenResourceAttributes:
    
    access_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('access_token') }})  
    expires_in: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expires_in') }})  
    refresh_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refresh_token') }})  
    token_type: TokenResourceAttributesTokenTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('token_type') }})  
    
class TokenResourceRelationshipsGroupsDataTypeEnum(str, Enum):
    GROUP = 'group'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TokenResourceRelationshipsGroupsData:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    type: TokenResourceRelationshipsGroupsDataTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TokenResourceRelationshipsGroupsLinks:
    
    related: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('related') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TokenResourceRelationshipsGroups:
    
    data: list[TokenResourceRelationshipsGroupsData] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data') }})  
    links: TokenResourceRelationshipsGroupsLinks = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links') }})  
    
class TokenResourceRelationshipsOrganizationDataTypeEnum(str, Enum):
    ORGANIZATION = 'organization'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TokenResourceRelationshipsOrganizationData:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    type: TokenResourceRelationshipsOrganizationDataTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TokenResourceRelationshipsOrganizationLinks:
    
    related: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('related') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TokenResourceRelationshipsOrganization:
    
    data: TokenResourceRelationshipsOrganizationData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data') }})  
    links: TokenResourceRelationshipsOrganizationLinks = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TokenResourceRelationships:
    
    groups: Optional[TokenResourceRelationshipsGroups] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groups'), 'exclude': lambda f: f is None }})  
    organization: Optional[TokenResourceRelationshipsOrganization] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization'), 'exclude': lambda f: f is None }})  
    
class TokenResourceTypeEnum(str, Enum):
    TOKEN = 'token'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TokenResource:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    type: TokenResourceTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    attributes: Optional[TokenResourceAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})  
    relationships: Optional[TokenResourceRelationships] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships'), 'exclude': lambda f: f is None }})  
    