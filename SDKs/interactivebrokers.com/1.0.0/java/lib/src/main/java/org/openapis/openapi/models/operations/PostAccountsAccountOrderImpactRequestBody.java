/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PostAccountsAccountOrderImpactRequestBody - Order Parameters
 */
public class PostAccountsAccountOrderImpactRequestBody {
    /**
     * Required price to support Stop and Stop Limit orders
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Aux Price")
    public Double auxPrice;
    public PostAccountsAccountOrderImpactRequestBody withAuxPrice(Double auxPrice) {
        this.auxPrice = auxPrice;
        return this;
    }
    
    /**
     * The internal IB identifier for the trading product specified as an integer (can be obtained in response to /secdef request)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ContractId")
    public Double contractId;
    public PostAccountsAccountOrderImpactRequestBody withContractId(Double contractId) {
        this.contractId = contractId;
        return this;
    }
    
    /**
     * The currency in which the FX pair trades (only for InstrumentType=CASH)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Currency")
    public String currency;
    public PostAccountsAccountOrderImpactRequestBody withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * The order ID assigned by the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CustomerOrderId")
    public String customerOrderId;
    public PostAccountsAccountOrderImpactRequestBody withCustomerOrderId(String customerOrderId) {
        this.customerOrderId = customerOrderId;
        return this;
    }
    
    /**
     * The instrument type of the contract
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InstrumentType")
    public String instrumentType;
    public PostAccountsAccountOrderImpactRequestBody withInstrumentType(String instrumentType) {
        this.instrumentType = instrumentType;
        return this;
    }
    
    /**
     * The exchange on which the trading product is listed (only for InstrumentType=STK)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ListingExchange")
    public String listingExchange;
    public PostAccountsAccountOrderImpactRequestBody withListingExchange(String listingExchange) {
        this.listingExchange = listingExchange;
        return this;
    }
    
    /**
     * Market = '1'
     * Limit = '2'
     * Stop = '3'
     * StopLimit = '4'
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Order Type")
    public org.openapis.openapi.models.shared.OrderTypeEnum orderType;
    public PostAccountsAccountOrderImpactRequestBody withOrderType(org.openapis.openapi.models.shared.OrderTypeEnum orderType) {
        this.orderType = orderType;
        return this;
    }
    
    /**
     * The order price
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Price")
    public Double price;
    public PostAccountsAccountOrderImpactRequestBody withPrice(Double price) {
        this.price = price;
        return this;
    }
    
    /**
     * The number of units in the order; contracts or shares
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Quantity")
    public Double quantity;
    public PostAccountsAccountOrderImpactRequestBody withQuantity(Double quantity) {
        this.quantity = quantity;
        return this;
    }
    
    /**
     * Buy = '1', Sell = '2'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Side")
    public PostAccountsAccountOrderImpactRequestBodySideEnum side;
    public PostAccountsAccountOrderImpactRequestBody withSide(PostAccountsAccountOrderImpactRequestBodySideEnum side) {
        this.side = side;
        return this;
    }
    
    /**
     * The symbol that identifies the trading product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Ticker")
    public String ticker;
    public PostAccountsAccountOrderImpactRequestBody withTicker(String ticker) {
        this.ticker = ticker;
        return this;
    }
    
    /**
     * Defines order's active lifetime.
     * Day = '0'
     * GTC (Good till Cancel) = '1'
     * IOC (Immediate or Cancel) = '3'
     * Open = '2'
     * Close = '7'
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Time in Force")
    public org.openapis.openapi.models.shared.TimeInForceEnum timeInForce;
    public PostAccountsAccountOrderImpactRequestBody withTimeInForce(org.openapis.openapi.models.shared.TimeInForceEnum timeInForce) {
        this.timeInForce = timeInForce;
        return this;
    }
    
}
