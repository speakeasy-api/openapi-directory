"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import status as shared_status
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ReposCreateCommitStatusRequestBodyStateEnum(str, Enum):
    r"""The state of the status. Can be one of `error`, `failure`, `pending`, or `success`."""
    ERROR = 'error'
    FAILURE = 'failure'
    PENDING = 'pending'
    SUCCESS = 'success'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReposCreateCommitStatusRequestBody:
    
    state: ReposCreateCommitStatusRequestBodyStateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""The state of the status. Can be one of `error`, `failure`, `pending`, or `success`."""  
    context: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('context'), 'exclude': lambda f: f is None }})
    r"""A string label to differentiate this status from the status of other systems. This field is case-insensitive."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A short description of the status."""  
    target_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target_url'), 'exclude': lambda f: f is None }})
    r"""The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.
    For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:  
    `http://ci.example.com/user/repo/build/sha`
    """  
    

@dataclasses.dataclass
class ReposCreateCommitStatusRequest:
    
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})  
    request_body: ReposCreateCommitStatusRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    sha: str = dataclasses.field(metadata={'path_param': { 'field_name': 'sha', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ReposCreateCommitStatusResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    status: Optional[shared_status.Status] = dataclasses.field(default=None)
    r"""Response"""  
    