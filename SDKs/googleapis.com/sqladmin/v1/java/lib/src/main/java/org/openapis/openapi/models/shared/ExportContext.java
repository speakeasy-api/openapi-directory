/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ExportContext - Database instance export context.
 */
public class ExportContext {
    /**
     * Options for exporting BAK files (SQL Server-only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bakExportOptions")
    public ExportContextBakExportOptions bakExportOptions;
    public ExportContext withBakExportOptions(ExportContextBakExportOptions bakExportOptions) {
        this.bakExportOptions = bakExportOptions;
        return this;
    }
    
    /**
     * Options for exporting data as CSV. `MySQL` and `PostgreSQL` instances only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("csvExportOptions")
    public ExportContextCsvExportOptions csvExportOptions;
    public ExportContext withCsvExportOptions(ExportContextCsvExportOptions csvExportOptions) {
        this.csvExportOptions = csvExportOptions;
        return this;
    }
    
    /**
     * Databases to be exported. `MySQL instances:` If `fileType` is `SQL` and no database is specified, all databases are exported, except for the `mysql` system database. If `fileType` is `CSV`, you can specify one database, either by using this property or by using the `csvExportOptions.selectQuery` property, which takes precedence over this property. `PostgreSQL instances:` You must specify one database to be exported. If `fileType` is `CSV`, this database must match the one specified in the `csvExportOptions.selectQuery` property. `SQL Server instances:` You must specify one database to be exported, and the `fileType` must be `BAK`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("databases")
    public String[] databases;
    public ExportContext withDatabases(String[] databases) {
        this.databases = databases;
        return this;
    }
    
    /**
     * The file type for the specified uri.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileType")
    public ExportContextFileTypeEnum fileType;
    public ExportContext withFileType(ExportContextFileTypeEnum fileType) {
        this.fileType = fileType;
        return this;
    }
    
    /**
     * This is always `sql#exportContext`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public ExportContext withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Option for export offload.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offload")
    public Boolean offload;
    public ExportContext withOffload(Boolean offload) {
        this.offload = offload;
        return this;
    }
    
    /**
     * Options for exporting data as SQL statements.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sqlExportOptions")
    public ExportContextSqlExportOptions sqlExportOptions;
    public ExportContext withSqlExportOptions(ExportContextSqlExportOptions sqlExportOptions) {
        this.sqlExportOptions = sqlExportOptions;
        return this;
    }
    
    /**
     * The path to the file in Google Cloud Storage where the export will be stored. The URI is in the form `gs://bucketName/fileName`. If the file already exists, the request succeeds, but the operation fails. If `fileType` is `SQL` and the filename ends with .gz, the contents are compressed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uri")
    public String uri;
    public ExportContext withUri(String uri) {
        this.uri = uri;
        return this;
    }
    
}
