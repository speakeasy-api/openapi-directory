/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Describes an Amazon DynamoDB data source configuration.
 */
export class UpdateDataSourceRequestBodyDynamodbConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "awsRegion" })
  awsRegion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "deltaSyncConfig" })
  @Type(() => shared.DeltaSyncConfig)
  deltaSyncConfig?: shared.DeltaSyncConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "tableName" })
  tableName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "useCallerCredentials" })
  useCallerCredentials?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "versioned" })
  versioned?: boolean;
}

/**
 * <p>Describes an OpenSearch data source configuration.</p> <p>As of September 2021, Amazon Elasticsearch service is Amazon OpenSearch Service. This configuration is deprecated. For new data sources, use <a>OpenSearchServiceDataSourceConfig</a> to specify an OpenSearch data source.</p>
 */
export class UpdateDataSourceRequestBodyElasticsearchConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "awsRegion" })
  awsRegion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "endpoint" })
  endpoint?: string;
}

/**
 * Describes an Amazon EventBridge bus data source configuration.
 */
export class UpdateDataSourceRequestBodyEventBridgeConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "eventBusArn" })
  eventBusArn?: string;
}

/**
 * Describes an HTTP data source configuration.
 */
export class UpdateDataSourceRequestBodyHttpConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "authorizationConfig" })
  @Type(() => shared.AuthorizationConfig)
  authorizationConfig?: shared.AuthorizationConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "endpoint" })
  endpoint?: string;
}

/**
 * Describes an Lambda data source configuration.
 */
export class UpdateDataSourceRequestBodyLambdaConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "lambdaFunctionArn" })
  lambdaFunctionArn?: string;
}

/**
 * Describes an OpenSearch data source configuration.
 */
export class UpdateDataSourceRequestBodyOpenSearchServiceConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "awsRegion" })
  awsRegion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "endpoint" })
  endpoint?: string;
}

/**
 * Describes a relational database data source configuration.
 */
export class UpdateDataSourceRequestBodyRelationalDatabaseConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "rdsHttpEndpointConfig" })
  @Type(() => shared.RdsHttpEndpointConfig)
  rdsHttpEndpointConfig?: shared.RdsHttpEndpointConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "relationalDatabaseSourceType" })
  relationalDatabaseSourceType?: shared.RelationalDatabaseSourceTypeEnum;
}

/**
 * The new data source type.
 */
export enum UpdateDataSourceRequestBodyTypeEnum {
  AwsLambda = "AWS_LAMBDA",
  AmazonDynamodb = "AMAZON_DYNAMODB",
  AmazonElasticsearch = "AMAZON_ELASTICSEARCH",
  None = "NONE",
  Http = "HTTP",
  RelationalDatabase = "RELATIONAL_DATABASE",
  AmazonOpensearchService = "AMAZON_OPENSEARCH_SERVICE",
  AmazonEventbridge = "AMAZON_EVENTBRIDGE",
}

export class UpdateDataSourceRequestBody extends SpeakeasyBase {
  /**
   * The new description for the data source.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Describes an Amazon DynamoDB data source configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dynamodbConfig" })
  @Type(() => UpdateDataSourceRequestBodyDynamodbConfig)
  dynamodbConfig?: UpdateDataSourceRequestBodyDynamodbConfig;

  /**
   * <p>Describes an OpenSearch data source configuration.</p> <p>As of September 2021, Amazon Elasticsearch service is Amazon OpenSearch Service. This configuration is deprecated. For new data sources, use <a>OpenSearchServiceDataSourceConfig</a> to specify an OpenSearch data source.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "elasticsearchConfig" })
  @Type(() => UpdateDataSourceRequestBodyElasticsearchConfig)
  elasticsearchConfig?: UpdateDataSourceRequestBodyElasticsearchConfig;

  /**
   * Describes an Amazon EventBridge bus data source configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "eventBridgeConfig" })
  @Type(() => UpdateDataSourceRequestBodyEventBridgeConfig)
  eventBridgeConfig?: UpdateDataSourceRequestBodyEventBridgeConfig;

  /**
   * Describes an HTTP data source configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "httpConfig" })
  @Type(() => UpdateDataSourceRequestBodyHttpConfig)
  httpConfig?: UpdateDataSourceRequestBodyHttpConfig;

  /**
   * Describes an Lambda data source configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lambdaConfig" })
  @Type(() => UpdateDataSourceRequestBodyLambdaConfig)
  lambdaConfig?: UpdateDataSourceRequestBodyLambdaConfig;

  /**
   * Describes an OpenSearch data source configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "openSearchServiceConfig" })
  @Type(() => UpdateDataSourceRequestBodyOpenSearchServiceConfig)
  openSearchServiceConfig?: UpdateDataSourceRequestBodyOpenSearchServiceConfig;

  /**
   * Describes a relational database data source configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "relationalDatabaseConfig" })
  @Type(() => UpdateDataSourceRequestBodyRelationalDatabaseConfig)
  relationalDatabaseConfig?: UpdateDataSourceRequestBodyRelationalDatabaseConfig;

  /**
   * The new service role Amazon Resource Name (ARN) for the data source.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serviceRoleArn" })
  serviceRoleArn?: string;

  /**
   * The new data source type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: UpdateDataSourceRequestBodyTypeEnum;
}

export class UpdateDataSourceRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateDataSourceRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The API ID.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=apiId",
  })
  apiId: string;

  /**
   * The new name for the data source.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=name",
  })
  name: string;
}

export class UpdateDataSourceResponse extends SpeakeasyBase {
  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  /**
   * ConcurrentModificationException
   */
  @SpeakeasyMetadata()
  concurrentModificationException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * NotFoundException
   */
  @SpeakeasyMetadata()
  notFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * UnauthorizedException
   */
  @SpeakeasyMetadata()
  unauthorizedException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateDataSourceResponse?: shared.UpdateDataSourceResponse;
}
