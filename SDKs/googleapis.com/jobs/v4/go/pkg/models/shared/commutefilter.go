// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CommuteFilterCommuteMethodEnum - Required. The method of transportation to calculate the commute time for.
type CommuteFilterCommuteMethodEnum string

const (
	CommuteFilterCommuteMethodEnumCommuteMethodUnspecified CommuteFilterCommuteMethodEnum = "COMMUTE_METHOD_UNSPECIFIED"
	CommuteFilterCommuteMethodEnumDriving                  CommuteFilterCommuteMethodEnum = "DRIVING"
	CommuteFilterCommuteMethodEnumTransit                  CommuteFilterCommuteMethodEnum = "TRANSIT"
	CommuteFilterCommuteMethodEnumWalking                  CommuteFilterCommuteMethodEnum = "WALKING"
	CommuteFilterCommuteMethodEnumCycling                  CommuteFilterCommuteMethodEnum = "CYCLING"
	CommuteFilterCommuteMethodEnumTransitAccessible        CommuteFilterCommuteMethodEnum = "TRANSIT_ACCESSIBLE"
)

func (e CommuteFilterCommuteMethodEnum) ToPointer() *CommuteFilterCommuteMethodEnum {
	return &e
}

func (e *CommuteFilterCommuteMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "COMMUTE_METHOD_UNSPECIFIED":
		fallthrough
	case "DRIVING":
		fallthrough
	case "TRANSIT":
		fallthrough
	case "WALKING":
		fallthrough
	case "CYCLING":
		fallthrough
	case "TRANSIT_ACCESSIBLE":
		*e = CommuteFilterCommuteMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CommuteFilterCommuteMethodEnum: %v", v)
	}
}

// CommuteFilterRoadTrafficEnum - Specifies the traffic density to use when calculating commute time.
type CommuteFilterRoadTrafficEnum string

const (
	CommuteFilterRoadTrafficEnumRoadTrafficUnspecified CommuteFilterRoadTrafficEnum = "ROAD_TRAFFIC_UNSPECIFIED"
	CommuteFilterRoadTrafficEnumTrafficFree            CommuteFilterRoadTrafficEnum = "TRAFFIC_FREE"
	CommuteFilterRoadTrafficEnumBusyHour               CommuteFilterRoadTrafficEnum = "BUSY_HOUR"
)

func (e CommuteFilterRoadTrafficEnum) ToPointer() *CommuteFilterRoadTrafficEnum {
	return &e
}

func (e *CommuteFilterRoadTrafficEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ROAD_TRAFFIC_UNSPECIFIED":
		fallthrough
	case "TRAFFIC_FREE":
		fallthrough
	case "BUSY_HOUR":
		*e = CommuteFilterRoadTrafficEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CommuteFilterRoadTrafficEnum: %v", v)
	}
}

// CommuteFilter - Parameters needed for commute search.
type CommuteFilter struct {
	// If `true`, jobs without street level addresses may also be returned. For city level addresses, the city center is used. For state and coarser level addresses, text matching is used. If this field is set to `false` or isn't specified, only jobs that include street level addresses will be returned by commute search.
	AllowImpreciseAddresses *bool `json:"allowImpreciseAddresses,omitempty"`
	// Required. The method of transportation to calculate the commute time for.
	CommuteMethod *CommuteFilterCommuteMethodEnum `json:"commuteMethod,omitempty"`
	// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
	DepartureTime *TimeOfDay `json:"departureTime,omitempty"`
	// Specifies the traffic density to use when calculating commute time.
	RoadTraffic *CommuteFilterRoadTrafficEnum `json:"roadTraffic,omitempty"`
	// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
	StartCoordinates *LatLng `json:"startCoordinates,omitempty"`
	// Required. The maximum travel time in seconds. The maximum allowed value is `3600s` (one hour). Format is `123s`.
	TravelDuration *string `json:"travelDuration,omitempty"`
}
