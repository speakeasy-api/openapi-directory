// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTDescribeEngineDefaultParametersActionEnum
type POSTDescribeEngineDefaultParametersActionEnum string

const (
	POSTDescribeEngineDefaultParametersActionEnumDescribeEngineDefaultParameters POSTDescribeEngineDefaultParametersActionEnum = "DescribeEngineDefaultParameters"
)

func (e *POSTDescribeEngineDefaultParametersActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DescribeEngineDefaultParameters":
		*e = POSTDescribeEngineDefaultParametersActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeEngineDefaultParametersActionEnum: %s", s)
	}
}

// POSTDescribeEngineDefaultParametersVersionEnum
type POSTDescribeEngineDefaultParametersVersionEnum string

const (
	POSTDescribeEngineDefaultParametersVersionEnumTwoThousandAndThirteen0110 POSTDescribeEngineDefaultParametersVersionEnum = "2013-01-10"
)

func (e *POSTDescribeEngineDefaultParametersVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2013-01-10":
		*e = POSTDescribeEngineDefaultParametersVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeEngineDefaultParametersVersionEnum: %s", s)
	}
}

type POSTDescribeEngineDefaultParametersQueryParams struct {
	Action POSTDescribeEngineDefaultParametersActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Pagination token
	Marker *string `queryParam:"style=form,explode=true,name=Marker"`
	// Pagination limit
	MaxRecords *string                                        `queryParam:"style=form,explode=true,name=MaxRecords"`
	Version    POSTDescribeEngineDefaultParametersVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTDescribeEngineDefaultParametersHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTDescribeEngineDefaultParametersRequest struct {
	QueryParams POSTDescribeEngineDefaultParametersQueryParams
	Headers     POSTDescribeEngineDefaultParametersHeaders
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTDescribeEngineDefaultParametersResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
