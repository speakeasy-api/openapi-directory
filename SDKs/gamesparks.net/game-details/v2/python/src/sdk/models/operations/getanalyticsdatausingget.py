"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import analyticsdataswaggermodel as shared_analyticsdataswaggermodel
from ..shared import messagemodel as shared_messagemodel
from datetime import date
from enum import Enum
from typing import Optional

class GETAnalyticsDataUsingGETDataTypeEnum(str, Enum):
    r"""dataType"""
    ACTIVE_DEVICES = 'activeDevices'
    ACTIVE_LOCATIONS = 'activeLocations'
    ACTIVE_USERS = 'activeUsers'
    AVERAGE_BANDWIDTH_PER_USER = 'averageBandwidthPerUser'
    AVERAGE_DAU_OVER_MAU = 'averageDauOverMau'
    AVERAGE_JS_EXECUTION_TIME = 'averageJsExecutionTime'
    AVERAGE_REQUESTS_PER_USER = 'averageRequestsPerUser'
    AVERAGE_RESPONSE_TIME = 'averageResponseTime'
    AVERAGE_RESPONSE_TIME_PER_TYPE = 'averageResponseTimePerType'
    SCRIPT_LOG_LEVELS_COUNT = 'scriptLogLevelsCount'
    SESSION_ANALYTIC = 'sessionAnalytic'
    STORAGE_PER_USER = 'storagePerUser'
    CUSTOM_ANALYTIC_TOTAL = 'customAnalyticTotal'
    CUSTOM_ANALYTIC_USER = 'customAnalyticUser'
    TIMED_ANALYTIC_TOTAL = 'timedAnalyticTotal'
    SESSION_ANALYTIC_TOTAL = 'sessionAnalyticTotal'
    CONNECTED_USERS = 'connectedUsers'

class GETAnalyticsDataUsingGETPrecisionEnum(str, Enum):
    r"""precision"""
    HOURLY = 'HOURLY'
    DAILY = 'DAILY'
    MONTHLY = 'MONTHLY'

class GETAnalyticsDataUsingGETStageEnum(str, Enum):
    r"""stage"""
    LIVE = 'LIVE'
    PREVIEW = 'PREVIEW'


@dataclasses.dataclass
class GETAnalyticsDataUsingGETRequest:
    
    api_key: str = dataclasses.field(metadata={'path_param': { 'field_name': 'apiKey', 'style': 'simple', 'explode': False }})
    r"""apiKey"""  
    data_type: GETAnalyticsDataUsingGETDataTypeEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'dataType', 'style': 'form', 'explode': True }})
    r"""dataType"""  
    end_date: date = dataclasses.field(metadata={'query_param': { 'field_name': 'endDate', 'style': 'form', 'explode': True }})
    r"""yyyy-MM-dd"""  
    precision: GETAnalyticsDataUsingGETPrecisionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'precision', 'style': 'form', 'explode': True }})
    r"""precision"""  
    stage: GETAnalyticsDataUsingGETStageEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'stage', 'style': 'form', 'explode': True }})
    r"""stage"""  
    start_date: date = dataclasses.field(metadata={'query_param': { 'field_name': 'startDate', 'style': 'form', 'explode': True }})
    r"""yyyy-MM-dd"""  
    keys: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'keys', 'style': 'form', 'explode': True }})
    r"""the keys to select. For example \\"ReturningUsers\\", \\"NewUsers\\", etc"""  
    

@dataclasses.dataclass
class GETAnalyticsDataUsingGETResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    analytics_data_swagger_models: Optional[list[shared_analyticsdataswaggermodel.AnalyticsDataSwaggerModel]] = dataclasses.field(default=None)
    r"""OK"""  
    message_model: Optional[shared_messagemodel.MessageModel] = dataclasses.field(default=None)
    r"""json error"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    