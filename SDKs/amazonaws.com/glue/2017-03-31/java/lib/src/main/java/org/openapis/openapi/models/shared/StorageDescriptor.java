/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * StorageDescriptor - Describes the physical storage of table data.
 */
public class StorageDescriptor {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AdditionalLocations")
    public String[] additionalLocations;

    public StorageDescriptor withAdditionalLocations(String[] additionalLocations) {
        this.additionalLocations = additionalLocations;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BucketColumns")
    public String[] bucketColumns;

    public StorageDescriptor withBucketColumns(String[] bucketColumns) {
        this.bucketColumns = bucketColumns;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Columns")
    public Column[] columns;

    public StorageDescriptor withColumns(Column[] columns) {
        this.columns = columns;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Compressed")
    public Boolean compressed;

    public StorageDescriptor withCompressed(Boolean compressed) {
        this.compressed = compressed;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InputFormat")
    public String inputFormat;

    public StorageDescriptor withInputFormat(String inputFormat) {
        this.inputFormat = inputFormat;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Location")
    public String location;

    public StorageDescriptor withLocation(String location) {
        this.location = location;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NumberOfBuckets")
    public Long numberOfBuckets;

    public StorageDescriptor withNumberOfBuckets(Long numberOfBuckets) {
        this.numberOfBuckets = numberOfBuckets;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OutputFormat")
    public String outputFormat;

    public StorageDescriptor withOutputFormat(String outputFormat) {
        this.outputFormat = outputFormat;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Parameters")
    public java.util.Map<String, String> parameters;

    public StorageDescriptor withParameters(java.util.Map<String, String> parameters) {
        this.parameters = parameters;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SchemaReference")
    public SchemaReference schemaReference;

    public StorageDescriptor withSchemaReference(SchemaReference schemaReference) {
        this.schemaReference = schemaReference;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SerdeInfo")
    public SerDeInfo serdeInfo;

    public StorageDescriptor withSerdeInfo(SerDeInfo serdeInfo) {
        this.serdeInfo = serdeInfo;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SkewedInfo")
    public SkewedInfo skewedInfo;

    public StorageDescriptor withSkewedInfo(SkewedInfo skewedInfo) {
        this.skewedInfo = skewedInfo;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SortColumns")
    public Order[] sortColumns;

    public StorageDescriptor withSortColumns(Order[] sortColumns) {
        this.sortColumns = sortColumns;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StoredAsSubDirectories")
    public Boolean storedAsSubDirectories;

    public StorageDescriptor withStoredAsSubDirectories(Boolean storedAsSubDirectories) {
        this.storedAsSubDirectories = storedAsSubDirectories;
        return this;
    }
    
    public StorageDescriptor(){}
}
