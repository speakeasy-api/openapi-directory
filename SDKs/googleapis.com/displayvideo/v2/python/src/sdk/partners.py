"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Partners:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def displayvideo_partners_channels_create(self, request: operations.DisplayvideoPartnersChannelsCreateRequest, security: operations.DisplayvideoPartnersChannelsCreateSecurity) -> operations.DisplayvideoPartnersChannelsCreateResponse:
        r"""Creates a new channel. Returns the newly created channel if successful."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoPartnersChannelsCreateRequest, base_url, '/v2/partners/{partnerId}/channels', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "channel_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DisplayvideoPartnersChannelsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoPartnersChannelsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Channel])
                res.channel = out

        return res

    def displayvideo_partners_channels_list(self, request: operations.DisplayvideoPartnersChannelsListRequest, security: operations.DisplayvideoPartnersChannelsListSecurity) -> operations.DisplayvideoPartnersChannelsListResponse:
        r"""Lists channels for a partner or advertiser."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoPartnersChannelsListRequest, base_url, '/v2/partners/{partnerId}/channels', request)
        
        query_params = utils.get_query_params(operations.DisplayvideoPartnersChannelsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoPartnersChannelsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListChannelsResponse])
                res.list_channels_response = out

        return res

    def displayvideo_partners_channels_patch(self, request: operations.DisplayvideoPartnersChannelsPatchRequest, security: operations.DisplayvideoPartnersChannelsPatchSecurity) -> operations.DisplayvideoPartnersChannelsPatchResponse:
        r"""Updates a channel. Returns the updated channel if successful."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoPartnersChannelsPatchRequest, base_url, '/v2/partners/{partnerId}/channels/{channelId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "channel_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DisplayvideoPartnersChannelsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoPartnersChannelsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Channel])
                res.channel = out

        return res

    def displayvideo_partners_channels_sites_bulk_edit(self, request: operations.DisplayvideoPartnersChannelsSitesBulkEditRequest, security: operations.DisplayvideoPartnersChannelsSitesBulkEditSecurity) -> operations.DisplayvideoPartnersChannelsSitesBulkEditResponse:
        r"""Bulk edits sites under a single channel. The operation will delete the sites provided in BulkEditSitesRequest.deleted_sites and then create the sites provided in BulkEditSitesRequest.created_sites."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoPartnersChannelsSitesBulkEditRequest, base_url, '/v2/partners/{partnerId}/channels/{channelId}/sites:bulkEdit', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "bulk_edit_sites_request_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DisplayvideoPartnersChannelsSitesBulkEditRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoPartnersChannelsSitesBulkEditResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BulkEditSitesResponse])
                res.bulk_edit_sites_response = out

        return res

    def displayvideo_partners_channels_sites_delete(self, request: operations.DisplayvideoPartnersChannelsSitesDeleteRequest, security: operations.DisplayvideoPartnersChannelsSitesDeleteSecurity) -> operations.DisplayvideoPartnersChannelsSitesDeleteResponse:
        r"""Deletes a site from a channel."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoPartnersChannelsSitesDeleteRequest, base_url, '/v2/partners/{partnerId}/channels/{channelId}/sites/{urlOrAppId}', request)
        
        query_params = utils.get_query_params(operations.DisplayvideoPartnersChannelsSitesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoPartnersChannelsSitesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def displayvideo_partners_channels_sites_list(self, request: operations.DisplayvideoPartnersChannelsSitesListRequest, security: operations.DisplayvideoPartnersChannelsSitesListSecurity) -> operations.DisplayvideoPartnersChannelsSitesListResponse:
        r"""Lists sites in a channel."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoPartnersChannelsSitesListRequest, base_url, '/v2/partners/{partnerId}/channels/{channelId}/sites', request)
        
        query_params = utils.get_query_params(operations.DisplayvideoPartnersChannelsSitesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoPartnersChannelsSitesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListSitesResponse])
                res.list_sites_response = out

        return res

    def displayvideo_partners_channels_sites_replace(self, request: operations.DisplayvideoPartnersChannelsSitesReplaceRequest, security: operations.DisplayvideoPartnersChannelsSitesReplaceSecurity) -> operations.DisplayvideoPartnersChannelsSitesReplaceResponse:
        r"""Replaces all of the sites under a single channel. The operation will replace the sites under a channel with the sites provided in ReplaceSitesRequest.new_sites."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoPartnersChannelsSitesReplaceRequest, base_url, '/v2/partners/{partnerId}/channels/{channelId}/sites:replace', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "replace_sites_request_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DisplayvideoPartnersChannelsSitesReplaceRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoPartnersChannelsSitesReplaceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReplaceSitesResponse])
                res.replace_sites_response = out

        return res

    def displayvideo_partners_edit_assigned_targeting_options(self, request: operations.DisplayvideoPartnersEditAssignedTargetingOptionsRequest, security: operations.DisplayvideoPartnersEditAssignedTargetingOptionsSecurity) -> operations.DisplayvideoPartnersEditAssignedTargetingOptionsResponse:
        r"""Edits targeting options under a single partner. The operation will delete the assigned targeting options provided in BulkEditPartnerAssignedTargetingOptionsRequest.deleteRequests and then create the assigned targeting options provided in BulkEditPartnerAssignedTargetingOptionsRequest.createRequests ."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoPartnersEditAssignedTargetingOptionsRequest, base_url, '/v2/partners/{partnerId}:editAssignedTargetingOptions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "bulk_edit_partner_assigned_targeting_options_request_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DisplayvideoPartnersEditAssignedTargetingOptionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoPartnersEditAssignedTargetingOptionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BulkEditPartnerAssignedTargetingOptionsResponse])
                res.bulk_edit_partner_assigned_targeting_options_response = out

        return res

    def displayvideo_partners_get(self, request: operations.DisplayvideoPartnersGetRequest, security: operations.DisplayvideoPartnersGetSecurity) -> operations.DisplayvideoPartnersGetResponse:
        r"""Gets a partner."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoPartnersGetRequest, base_url, '/v2/partners/{partnerId}', request)
        
        query_params = utils.get_query_params(operations.DisplayvideoPartnersGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoPartnersGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Partner])
                res.partner = out

        return res

    def displayvideo_partners_list(self, request: operations.DisplayvideoPartnersListRequest, security: operations.DisplayvideoPartnersListSecurity) -> operations.DisplayvideoPartnersListResponse:
        r"""Lists partners that are accessible to the current user. The order is defined by the order_by parameter."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/partners'
        
        query_params = utils.get_query_params(operations.DisplayvideoPartnersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoPartnersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListPartnersResponse])
                res.list_partners_response = out

        return res

    def displayvideo_partners_targeting_types_assigned_targeting_options_create(self, request: operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsCreateRequest, security: operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsCreateSecurity) -> operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsCreateResponse:
        r"""Assigns a targeting option to a partner. Returns the assigned targeting option if successful."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsCreateRequest, base_url, '/v2/partners/{partnerId}/targetingTypes/{targetingType}/assignedTargetingOptions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "assigned_targeting_option_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AssignedTargetingOption])
                res.assigned_targeting_option = out

        return res

    def displayvideo_partners_targeting_types_assigned_targeting_options_delete(self, request: operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsDeleteRequest, security: operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsDeleteSecurity) -> operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsDeleteResponse:
        r"""Deletes an assigned targeting option from a partner."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsDeleteRequest, base_url, '/v2/partners/{partnerId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}', request)
        
        query_params = utils.get_query_params(operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def displayvideo_partners_targeting_types_assigned_targeting_options_get(self, request: operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsGetRequest, security: operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsGetSecurity) -> operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsGetResponse:
        r"""Gets a single targeting option assigned to a partner."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsGetRequest, base_url, '/v2/partners/{partnerId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}', request)
        
        query_params = utils.get_query_params(operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AssignedTargetingOption])
                res.assigned_targeting_option = out

        return res

    def displayvideo_partners_targeting_types_assigned_targeting_options_list(self, request: operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsListRequest, security: operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsListSecurity) -> operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsListResponse:
        r"""Lists the targeting options assigned to a partner."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsListRequest, base_url, '/v2/partners/{partnerId}/targetingTypes/{targetingType}/assignedTargetingOptions', request)
        
        query_params = utils.get_query_params(operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListPartnerAssignedTargetingOptionsResponse])
                res.list_partner_assigned_targeting_options_response = out

        return res

    