/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Warehouses {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Activate warehouse
   *
   * @remarks
   * Activates a given warehouse, by warehouse ID.
   */
  activateWarehouse(
    req: operations.ActivateWarehouseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ActivateWarehouseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ActivateWarehouseRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/logistics/pvt/configuration/warehouses/{warehouseId}/activation",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ActivateWarehouseResponse =
        new operations.ActivateWarehouseResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * List all warehouses
   *
   * @remarks
   * Lists information about all warehouses set up in your store.
   */
  allWarehouses(
    req: operations.AllWarehousesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AllWarehousesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AllWarehousesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/api/logistics/pvt/configuration/warehouses";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AllWarehousesResponse =
        new operations.AllWarehousesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.allWarehouses200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.allWarehouses200ApplicationJSONObjects = utils.objectToClass(
              httpRes?.data,
              operations.AllWarehouses200ApplicationJSON,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create/update warehouse
   *
   * @remarks
   * Creates or updates your store's warehouses
   */
  createUpdateWarehouse(
    req: operations.CreateUpdateWarehouseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateUpdateWarehouseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateUpdateWarehouseRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/api/logistics/pvt/configuration/warehouses";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateUpdateWarehouseResponse =
        new operations.CreateUpdateWarehouseResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Deactivate warehouse
   *
   * @remarks
   * Deactivates a given warehouse by warehouse ID.
   */
  deactivateWarehouse(
    req: operations.DeactivateWarehouseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeactivateWarehouseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeactivateWarehouseRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/logistics/pvt/configuration/warehouses/{warehouseId}/deactivation",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeactivateWarehouseResponse =
        new operations.DeactivateWarehouseResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Remove warehouse
   *
   * @remarks
   * Deletes given warehouse by warehouse ID.
   */
  removeWarehouse(
    req: operations.RemoveWarehouseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RemoveWarehouseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RemoveWarehouseRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/logistics/pvt/configuration/warehouses/{warehouseId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RemoveWarehouseResponse =
        new operations.RemoveWarehouseResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * List warehouse by ID
   *
   * @remarks
   * Lists the information of a given warehouse, searching by warehouse ID.
   */
  warehouseById(
    req: operations.WarehouseByIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.WarehouseByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.WarehouseByIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/logistics/pvt/configuration/warehouses/{warehouseId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WarehouseByIdResponse =
        new operations.WarehouseByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.warehouseById200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.WarehouseById200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
