"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import exportlabelstaskrunproperties as shared_exportlabelstaskrunproperties
from ..shared import findmatchestaskrunproperties as shared_findmatchestaskrunproperties
from ..shared import importlabelstaskrunproperties as shared_importlabelstaskrunproperties
from ..shared import labelingsetgenerationtaskrunproperties as shared_labelingsetgenerationtaskrunproperties
from ..shared import tasktype_enum as shared_tasktype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TaskRunProperties:
    r"""The configuration properties for the task run."""
    
    export_labels_task_run_properties: Optional[shared_exportlabelstaskrunproperties.ExportLabelsTaskRunProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExportLabelsTaskRunProperties'), 'exclude': lambda f: f is None }})  
    find_matches_task_run_properties: Optional[shared_findmatchestaskrunproperties.FindMatchesTaskRunProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FindMatchesTaskRunProperties'), 'exclude': lambda f: f is None }})  
    import_labels_task_run_properties: Optional[shared_importlabelstaskrunproperties.ImportLabelsTaskRunProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImportLabelsTaskRunProperties'), 'exclude': lambda f: f is None }})  
    labeling_set_generation_task_run_properties: Optional[shared_labelingsetgenerationtaskrunproperties.LabelingSetGenerationTaskRunProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LabelingSetGenerationTaskRunProperties'), 'exclude': lambda f: f is None }})  
    task_type: Optional[shared_tasktype_enum.TaskTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaskType'), 'exclude': lambda f: f is None }})  
    