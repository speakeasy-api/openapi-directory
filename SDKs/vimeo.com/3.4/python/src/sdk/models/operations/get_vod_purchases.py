"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import legacy_error as shared_legacy_error
from ..shared import on_demand_page as shared_on_demand_page
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class GetVodPurchasesSecurity:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class GetVodPurchasesDirectionEnum(str, Enum):
    r"""The sort direction of the results."""
    ASC = 'asc'
    DESC = 'desc'

class GetVodPurchasesFilterEnum(str, Enum):
    r"""The type of On Demand videos to show.
    
    Option descriptions:
     * `important` - Will show all pages which are about to expire.
    """
    ALL = 'all'
    EXPIRING_SOON = 'expiring_soon'
    FILM = 'film'
    IMPORTANT = 'important'
    PURCHASED = 'purchased'
    RENTED = 'rented'
    SERIES = 'series'
    SUBSCRIPTION = 'subscription'
    UNWATCHED = 'unwatched'
    WATCHED = 'watched'

class GetVodPurchasesSortEnum(str, Enum):
    r"""The way to sort the results."""
    ADDED = 'added'
    ALPHABETICAL = 'alphabetical'
    DATE = 'date'
    NAME = 'name'
    PURCHASE_TIME = 'purchase_time'
    RATING = 'rating'
    RELEASE_DATE = 'release_date'


@dataclasses.dataclass
class GetVodPurchasesRequest:
    
    direction: Optional[GetVodPurchasesDirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'direction', 'style': 'form', 'explode': True }})
    r"""The sort direction of the results."""  
    filter: Optional[GetVodPurchasesFilterEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter', 'style': 'form', 'explode': True }})
    r"""The type of On Demand videos to show.
    
    Option descriptions:
     * `important` - Will show all pages which are about to expire.
    """  
    page: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""The page number of the results to show."""  
    per_page: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""The number of items to show on each page of results, up to a maximum of 100."""  
    sort: Optional[GetVodPurchasesSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""The way to sort the results."""  
    

@dataclasses.dataclass
class GetVodPurchasesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    legacy_error: Optional[shared_legacy_error.LegacyError] = dataclasses.field(default=None)
    r"""The authenticated user can't view the purchases and rentals for another user's account."""  
    on_demand_pages: Optional[list[shared_on_demand_page.OnDemandPage]] = dataclasses.field(default=None)
    r"""The purchases and rentals were returned."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    