"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Spotsets:
    r"""The `spotsets` resource contains a collection of set definitons for each Smartspot and allows for remote mananagement.
    Spotsets are stored and used on the Smartspot locally and synced between Smartspot and server.
    Spotsets primarly are used as an input for Sense&Control.
    https://intellifi.zendesk.com/hc/en-us/articles/360009282834
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_spotsets(self) -> operations.GetSpotsetsResponse:
        r"""Get spotsets"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/spotsets'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpotsetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.spot_set = out

        return res

    def get_spotsets_id_(self, request: operations.GetSpotsetsIDRequest) -> operations.GetSpotsetsIDResponse:
        r"""Get spotset"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpotsetsIDRequest, base_url, '/spotsets/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpotsetsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.spot_set = out

        return res

    def post_spotsets(self, request: Any) -> operations.PostSpotsetsResponse:
        r"""Create spotset"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/spotsets'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpotsetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseDefaultResource])
                res.response_default_resource = out

        return res

    def put_spotsets_id_(self, request: operations.PutSpotsetsIDRequest) -> operations.PutSpotsetsIDResponse:
        r"""Update existing spotset"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutSpotsetsIDRequest, base_url, '/spotsets/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "spot_set_update", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutSpotsetsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseDefaultResource])
                res.response_default_resource = out

        return res

    