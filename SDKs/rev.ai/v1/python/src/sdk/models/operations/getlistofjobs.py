"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import job as shared_job
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class GetListOfJobsRequest:
    
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Limits the number of jobs returned, default is 100, max is 1000"""  
    starting_after: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'starting_after', 'style': 'form', 'explode': True }})
    r"""If specified, returns transcription jobs submitted before the job with this id, exclusive (job with this id is not included)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetListOfJobs401ApplicationProblemPlusJSON:
    r"""Request Unauthorized
    ***
    Caused by an old or invalid [access token](#section/Authentication/Access-Token), try regenerating your token on your [access token page](https://rev.ai/access_token).
    """
    
    status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""HTTP status code of the error"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Short, human-readable summary of the problem type"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetListOfJobs400ApplicationProblemPlusJSON:
    r"""Problem details object returned on errors"""
    
    parameters: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameters'), 'exclude': lambda f: f is None }})
    r"""Invalid properties object where each property is the key, mapped to a list of reasons why the property is invalid"""  
    status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""HTTP status code of the error"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Short, human-readable summary of the problem type"""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""URI that identifies the problem"""  
    

@dataclasses.dataclass
class GetListOfJobsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_list_of_jobs_400_application_problem_plus_json_object: Optional[GetListOfJobs400ApplicationProblemPlusJSON] = dataclasses.field(default=None)
    r"""Bad Request"""  
    get_list_of_jobs_401_application_problem_plus_json_object: Optional[GetListOfJobs401ApplicationProblemPlusJSON] = dataclasses.field(default=None)
    r"""Request Unauthorized
    ***
    Caused by an old or invalid [access token](#section/Authentication/Access-Token), try regenerating your token on your [access token page](https://rev.ai/access_token).
    """  
    jobs: Optional[list[shared_job.Job]] = dataclasses.field(default=None)
    r"""List of Rev.ai Transcription Jobs"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    