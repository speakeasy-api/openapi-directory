"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awsautoscalinglaunchconfigurationblockdevicemappingsdetails as shared_awsautoscalinglaunchconfigurationblockdevicemappingsdetails
from ..shared import awsautoscalinglaunchconfigurationinstancemonitoringdetails as shared_awsautoscalinglaunchconfigurationinstancemonitoringdetails
from ..shared import awsautoscalinglaunchconfigurationmetadataoptions as shared_awsautoscalinglaunchconfigurationmetadataoptions
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsAutoScalingLaunchConfigurationDetails:
    r"""Details about a launch configuration."""
    
    associate_public_ip_address: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AssociatePublicIpAddress'), 'exclude': lambda f: f is None }})  
    block_device_mappings: Optional[list[shared_awsautoscalinglaunchconfigurationblockdevicemappingsdetails.AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BlockDeviceMappings'), 'exclude': lambda f: f is None }})  
    classic_link_vpc_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClassicLinkVpcId'), 'exclude': lambda f: f is None }})  
    classic_link_vpc_security_groups: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClassicLinkVpcSecurityGroups'), 'exclude': lambda f: f is None }})  
    created_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedTime'), 'exclude': lambda f: f is None }})  
    ebs_optimized: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EbsOptimized'), 'exclude': lambda f: f is None }})  
    iam_instance_profile: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IamInstanceProfile'), 'exclude': lambda f: f is None }})  
    image_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImageId'), 'exclude': lambda f: f is None }})  
    instance_monitoring: Optional[shared_awsautoscalinglaunchconfigurationinstancemonitoringdetails.AwsAutoScalingLaunchConfigurationInstanceMonitoringDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceMonitoring'), 'exclude': lambda f: f is None }})  
    instance_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceType'), 'exclude': lambda f: f is None }})  
    kernel_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KernelId'), 'exclude': lambda f: f is None }})  
    key_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeyName'), 'exclude': lambda f: f is None }})  
    launch_configuration_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LaunchConfigurationName'), 'exclude': lambda f: f is None }})  
    metadata_options: Optional[shared_awsautoscalinglaunchconfigurationmetadataoptions.AwsAutoScalingLaunchConfigurationMetadataOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MetadataOptions'), 'exclude': lambda f: f is None }})  
    placement_tenancy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlacementTenancy'), 'exclude': lambda f: f is None }})  
    ramdisk_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RamdiskId'), 'exclude': lambda f: f is None }})  
    security_groups: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityGroups'), 'exclude': lambda f: f is None }})  
    spot_price: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SpotPrice'), 'exclude': lambda f: f is None }})  
    user_data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserData'), 'exclude': lambda f: f is None }})  
    