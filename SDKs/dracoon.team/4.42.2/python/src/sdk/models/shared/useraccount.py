"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import rolelist as shared_rolelist
from ..shared import userattributes as shared_userattributes
from ..shared import userauthdata as shared_userauthdata
from ..shared import userauthmethod as shared_userauthmethod
from ..shared import usergroup as shared_usergroup
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserAccount:
    r"""User information"""
    
    auth_data: shared_userauthdata.UserAuthData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authData') }})
    r"""User Authentication Data"""  
    first_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstName') }})
    r"""User first name"""  
    has_manageable_rooms: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasManageableRooms') }})
    r"""User has manageable rooms"""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Unique identifier for the user"""  
    is_locked: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isLocked') }})
    r"""User is locked:
    
    * `false` - unlocked
    
    * `true` - locked
    
    
    
    User is locked and can not login anymore.
    """  
    language: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language') }})
    r"""&#128640; Since v4.20.0
    
    IETF language tag
    """  
    last_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastName') }})
    r"""User last name"""  
    lock_status: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lockStatus') }})
    r"""&#128679; Deprecated since v4.7.0
    
    User lock status:
    
    * `0` - locked
    
    * `1` - Web access allowed
    
    * `2` - Web and mobile access allowed
    
    
    
    Please use `isLocked` instead.
    """  
    needs_to_change_password: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('needsToChangePassword') }})
    r"""&#128679; Deprecated since v4.13.0
    
    Determines whether user has to change his / her password
    """  
    user_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userName') }})
    r"""&#128640; Since v4.13.0
    
    Username
    """  
    user_roles: shared_rolelist.RoleList = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userRoles') }})
    r"""List of roles"""  
    auth_methods: Optional[list[shared_userauthmethod.UserAuthMethod]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authMethods'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.13.0
    
    Authentication methods:
    
    * `sql`
    
    * `active_directory`
    
    * `radius`
    
    * `openid`
    
    use `authData` instead
    """  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Email"""  
    expire_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expireAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Expiration date"""  
    gender: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gender'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.12.0
    
    Gender
    """  
    home_room_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('homeRoomId'), 'exclude': lambda f: f is None }})
    r"""Homeroom ID"""  
    is_encryption_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isEncryptionEnabled'), 'exclude': lambda f: f is None }})
    r"""User has generated private key.
    
    Possible if client-side encryption is active for this customer
    """  
    last_login_fail_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastLoginFailAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Last failed logon date"""  
    last_login_fail_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastLoginFailIp'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.6.0
    
    Last failed logon IP address
    """  
    last_login_success_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastLoginSuccessAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Last successful logon date"""  
    last_login_success_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastLoginSuccessIp'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.6.0
    
    Last successful logon IP address
    """  
    login: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('login'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.13.0
    
    User login name
    """  
    must_set_email: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mustSetEmail'), 'exclude': lambda f: f is None }})
    r"""&#128640; Since v4.13.0
    
    If `true`, the user must set the `email` at the first login.
    """  
    needs_to_accept_eula: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('needsToAcceptEULA'), 'exclude': lambda f: f is None }})
    r"""User has accepted EULA.
    
    Present, if EULA is system global active.
    
    cf. `GET system/config/settings/general` - `eulaEnabled`
    """  
    needs_to_change_user_name: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('needsToChangeUserName'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.13.0
    
    If `true`, the user must change the `userName` at the first login.
    """  
    phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone'), 'exclude': lambda f: f is None }})
    r"""Phone number"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.18.0
    
    Job title
    """  
    user_attributes: Optional[shared_userattributes.UserAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userAttributes'), 'exclude': lambda f: f is None }})
    r"""User custom attributes (list of key-value pairs)"""  
    user_groups: Optional[list[shared_usergroup.UserGroup]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userGroups'), 'exclude': lambda f: f is None }})
    r"""All groups the user is member of"""  
    