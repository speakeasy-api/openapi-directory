<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Advertisers 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Uploads an asset. Returns the ID of the newly uploaded asset if successful. The asset file size should be no more than 10 MB for images, 200 MB for ZIP files, and 1 GB for videos. Must be used within the [multipart media upload process](/display-video/api/guides/how-tos/upload#multipart). Examples using provided client libraries can be found in our [Creating Creatives guide](/display-video/api/guides/creating-creatives/overview#upload_an_asset).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersAssetsUploadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersAssetsUploadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersAssetsUploadResponse
     */
	public function displayvideoAdvertisersAssetsUpload(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersAssetsUploadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersAssetsUploadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersAssetsUploadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/assets', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersAssetsUploadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersAssetsUploadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersAssetsUploadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createAssetResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateAssetResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Audits an advertiser. Returns the counts of used entities per resource type under the advertiser provided. Used entities count towards their respective resource limit. See https://support.google.com/displayvideo/answer/6071450.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersAuditRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersAuditSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersAuditResponse
     */
	public function displayvideoAdvertisersAudit(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersAuditRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersAuditSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersAuditResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}:audit', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersAuditRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersAuditRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersAuditResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->auditAdvertiserResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AuditAdvertiserResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new campaign. Returns the newly created campaign if successful.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsCreateResponse
     */
	public function displayvideoAdvertisersCampaignsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/campaigns', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "campaignInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->campaign = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Campaign', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Permanently deletes a campaign. A deleted campaign cannot be recovered. The campaign should be archived first, i.e. set entity_status to `ENTITY_STATUS_ARCHIVED`, to be able to delete it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsDeleteResponse
     */
	public function displayvideoAdvertisersCampaignsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/campaigns/{campaignId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a campaign.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsGetResponse
     */
	public function displayvideoAdvertisersCampaignsGet(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/campaigns/{campaignId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->campaign = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Campaign', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists campaigns in an advertiser. The order is defined by the order_by parameter. If a filter by entity_status is not specified, campaigns with `ENTITY_STATUS_ARCHIVED` will not be included in the results.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsListResponse
     */
	public function displayvideoAdvertisersCampaignsList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/campaigns', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCampaignsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCampaignsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists assigned targeting options of a campaign across targeting types.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsListAssignedTargetingOptionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsListAssignedTargetingOptionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsListAssignedTargetingOptionsResponse
     */
	public function displayvideoAdvertisersCampaignsListAssignedTargetingOptions(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsListAssignedTargetingOptionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsListAssignedTargetingOptionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsListAssignedTargetingOptionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/campaigns/{campaignId}:listAssignedTargetingOptions', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsListAssignedTargetingOptionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsListAssignedTargetingOptionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsListAssignedTargetingOptionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkListCampaignAssignedTargetingOptionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BulkListCampaignAssignedTargetingOptionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing campaign. Returns the updated campaign if successful.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsPatchResponse
     */
	public function displayvideoAdvertisersCampaignsPatch(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/campaigns/{campaignId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "campaignInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->campaign = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Campaign', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a single targeting option assigned to a campaign.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsGetResponse
     */
	public function displayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsGet(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/campaigns/{campaignId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignedTargetingOption = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssignedTargetingOption', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the targeting options assigned to a campaign for a specified targeting type.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsListResponse
     */
	public function displayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/campaigns/{campaignId}/targetingTypes/{targetingType}/assignedTargetingOptions', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCampaignAssignedTargetingOptionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCampaignAssignedTargetingOptionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new channel. Returns the newly created channel if successful.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsCreateResponse
     */
	public function displayvideoAdvertisersChannelsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/channels', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "channelInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->channel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Channel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists channels for a partner or advertiser.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsListResponse
     */
	public function displayvideoAdvertisersChannelsList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/channels', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listChannelsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListChannelsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a channel. Returns the updated channel if successful.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsPatchResponse
     */
	public function displayvideoAdvertisersChannelsPatch(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/channels/{channelId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "channelInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->channel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Channel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Bulk edits sites under a single channel. The operation will delete the sites provided in BulkEditSitesRequest.deleted_sites and then create the sites provided in BulkEditSitesRequest.created_sites.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesBulkEditRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesBulkEditSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesBulkEditResponse
     */
	public function displayvideoAdvertisersChannelsSitesBulkEdit(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesBulkEditRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesBulkEditSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesBulkEditResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/channels/{channelId}/sites:bulkEdit', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesBulkEditRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "bulkEditSitesRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesBulkEditRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesBulkEditResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkEditSitesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BulkEditSitesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a site from a channel.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesDeleteResponse
     */
	public function displayvideoAdvertisersChannelsSitesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/channels/{channelId}/sites/{urlOrAppId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists sites in a channel.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesListResponse
     */
	public function displayvideoAdvertisersChannelsSitesList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/channels/{channelId}/sites', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSitesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListSitesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Replaces all of the sites under a single channel. The operation will replace the sites under a channel with the sites provided in ReplaceSitesRequest.new_sites.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesReplaceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesReplaceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesReplaceResponse
     */
	public function displayvideoAdvertisersChannelsSitesReplace(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesReplaceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesReplaceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesReplaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/channels/{channelId}/sites:replace', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesReplaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "replaceSitesRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesReplaceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersChannelsSitesReplaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->replaceSitesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReplaceSitesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new advertiser. Returns the newly created advertiser if successful. This method can take up to 180 seconds to complete.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreateResponse
     */
	public function displayvideoAdvertisersCreate(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "advertiserInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->advertiser = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Advertiser', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new creative. Returns the newly created creative if successful.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesCreateResponse
     */
	public function displayvideoAdvertisersCreativesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/creatives', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "creativeInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->creative = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Creative', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a creative. Returns error code `NOT_FOUND` if the creative does not exist. The creative should be archived first, i.e. set entity_status to `ENTITY_STATUS_ARCHIVED`, before it can be deleted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesDeleteResponse
     */
	public function displayvideoAdvertisersCreativesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/creatives/{creativeId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a creative.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesGetResponse
     */
	public function displayvideoAdvertisersCreativesGet(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/creatives/{creativeId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->creative = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Creative', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists creatives in an advertiser. The order is defined by the order_by parameter. If a filter by entity_status is not specified, creatives with `ENTITY_STATUS_ARCHIVED` will not be included in the results.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesListResponse
     */
	public function displayvideoAdvertisersCreativesList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/creatives', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCreativesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCreativesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing creative. Returns the updated creative if successful.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesPatchResponse
     */
	public function displayvideoAdvertisersCreativesPatch(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/creatives/{creativeId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "creativeInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersCreativesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->creative = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Creative', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an advertiser. Deleting an advertiser will delete all of its child resources, for example, campaigns, insertion orders and line items. A deleted advertiser cannot be recovered.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersDeleteResponse
     */
	public function displayvideoAdvertisersDelete(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Edits targeting options under a single advertiser. The operation will delete the assigned targeting options provided in BulkEditAdvertiserAssignedTargetingOptionsRequest.delete_requests and then create the assigned targeting options provided in BulkEditAdvertiserAssignedTargetingOptionsRequest.create_requests .
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersEditAssignedTargetingOptionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersEditAssignedTargetingOptionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersEditAssignedTargetingOptionsResponse
     */
	public function displayvideoAdvertisersEditAssignedTargetingOptions(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersEditAssignedTargetingOptionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersEditAssignedTargetingOptionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersEditAssignedTargetingOptionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}:editAssignedTargetingOptions', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersEditAssignedTargetingOptionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "bulkEditAdvertiserAssignedTargetingOptionsRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersEditAssignedTargetingOptionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersEditAssignedTargetingOptionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkEditAdvertiserAssignedTargetingOptionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BulkEditAdvertiserAssignedTargetingOptionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets an advertiser.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersGetResponse
     */
	public function displayvideoAdvertisersGet(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->advertiser = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Advertiser', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new insertion order. Returns the newly created insertion order if successful.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersCreateResponse
     */
	public function displayvideoAdvertisersInsertionOrdersCreate(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/insertionOrders', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "insertionOrderInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->insertionOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InsertionOrder', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an insertion order. Returns error code `NOT_FOUND` if the insertion order does not exist. The insertion order should be archived first, i.e. set entity_status to `ENTITY_STATUS_ARCHIVED`, to be able to delete it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersDeleteResponse
     */
	public function displayvideoAdvertisersInsertionOrdersDelete(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/insertionOrders/{insertionOrderId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets an insertion order. Returns error code `NOT_FOUND` if the insertion order does not exist.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersGetResponse
     */
	public function displayvideoAdvertisersInsertionOrdersGet(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/insertionOrders/{insertionOrderId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->insertionOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InsertionOrder', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists insertion orders in an advertiser. The order is defined by the order_by parameter. If a filter by entity_status is not specified, insertion orders with `ENTITY_STATUS_ARCHIVED` will not be included in the results.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersListResponse
     */
	public function displayvideoAdvertisersInsertionOrdersList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/insertionOrders', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInsertionOrdersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListInsertionOrdersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists assigned targeting options of an insertion order across targeting types.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersListAssignedTargetingOptionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersListAssignedTargetingOptionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersListAssignedTargetingOptionsResponse
     */
	public function displayvideoAdvertisersInsertionOrdersListAssignedTargetingOptions(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersListAssignedTargetingOptionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersListAssignedTargetingOptionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersListAssignedTargetingOptionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/insertionOrders/{insertionOrderId}:listAssignedTargetingOptions', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersListAssignedTargetingOptionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersListAssignedTargetingOptionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersListAssignedTargetingOptionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkListInsertionOrderAssignedTargetingOptionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BulkListInsertionOrderAssignedTargetingOptionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing insertion order. Returns the updated insertion order if successful.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersPatchResponse
     */
	public function displayvideoAdvertisersInsertionOrdersPatch(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/insertionOrders/{insertionOrderId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "insertionOrderInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->insertionOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InsertionOrder', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Assigns a targeting option to an insertion order. Returns the assigned targeting option if successful. Supported targeting types: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_BROWSER` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_KEYWORD` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_VIEWABILITY`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsCreateResponse
     */
	public function displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/insertionOrders/{insertionOrderId}/targetingTypes/{targetingType}/assignedTargetingOptions', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "assignedTargetingOptionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignedTargetingOption = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssignedTargetingOption', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an assigned targeting option from an insertion order. Supported targeting types: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_BROWSER` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_KEYWORD` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_VIEWABILITY`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsDeleteResponse
     */
	public function displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/insertionOrders/{insertionOrderId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a single targeting option assigned to an insertion order.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsGetResponse
     */
	public function displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsGet(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/insertionOrders/{insertionOrderId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignedTargetingOption = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssignedTargetingOption', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the targeting options assigned to an insertion order.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsListResponse
     */
	public function displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/insertionOrders/{insertionOrderId}/targetingTypes/{targetingType}/assignedTargetingOptions', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInsertionOrderAssignedTargetingOptionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListInsertionOrderAssignedTargetingOptionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists invoices posted for an advertiser in a given month. Invoices generated by billing profiles with a "Partner" invoice level are not retrievable through this method.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInvoicesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInvoicesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInvoicesListResponse
     */
	public function displayvideoAdvertisersInvoicesList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInvoicesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInvoicesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInvoicesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/invoices', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInvoicesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInvoicesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInvoicesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInvoicesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListInvoicesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the invoice currency used by an advertiser in a given month.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInvoicesLookupInvoiceCurrencyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInvoicesLookupInvoiceCurrencySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInvoicesLookupInvoiceCurrencyResponse
     */
	public function displayvideoAdvertisersInvoicesLookupInvoiceCurrency(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInvoicesLookupInvoiceCurrencyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInvoicesLookupInvoiceCurrencySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInvoicesLookupInvoiceCurrencyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/invoices:lookupInvoiceCurrency', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInvoicesLookupInvoiceCurrencyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInvoicesLookupInvoiceCurrencyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersInvoicesLookupInvoiceCurrencyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->lookupInvoiceCurrencyResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LookupInvoiceCurrencyResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Bulk edits targeting options under multiple line items. The operation will delete the assigned targeting options provided in BulkEditAssignedTargetingOptionsRequest.delete_requests and then create the assigned targeting options provided in BulkEditAssignedTargetingOptionsRequest.create_requests. Requests to this endpoint cannot be made concurrently with the following requests updating the same line item: * BulkUpdate * UpdateLineItem * CreateLineItemAssignedTargetingOption * DeleteLineItemAssignedTargetingOption
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsBulkEditAssignedTargetingOptionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsBulkEditAssignedTargetingOptionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsBulkEditAssignedTargetingOptionsResponse
     */
	public function displayvideoAdvertisersLineItemsBulkEditAssignedTargetingOptions(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsBulkEditAssignedTargetingOptionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsBulkEditAssignedTargetingOptionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsBulkEditAssignedTargetingOptionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/lineItems:bulkEditAssignedTargetingOptions', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsBulkEditAssignedTargetingOptionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "bulkEditAssignedTargetingOptionsRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsBulkEditAssignedTargetingOptionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsBulkEditAssignedTargetingOptionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkEditAssignedTargetingOptionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BulkEditAssignedTargetingOptionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists assigned targeting options for multiple line items across targeting types.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsBulkListAssignedTargetingOptionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsBulkListAssignedTargetingOptionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsBulkListAssignedTargetingOptionsResponse
     */
	public function displayvideoAdvertisersLineItemsBulkListAssignedTargetingOptions(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsBulkListAssignedTargetingOptionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsBulkListAssignedTargetingOptionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsBulkListAssignedTargetingOptionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/lineItems:bulkListAssignedTargetingOptions', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsBulkListAssignedTargetingOptionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsBulkListAssignedTargetingOptionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsBulkListAssignedTargetingOptionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkListAssignedTargetingOptionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BulkListAssignedTargetingOptionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates multiple line items. Requests to this endpoint cannot be made concurrently with the following requests updating the same line item: * BulkEditAssignedTargetingOptions * UpdateLineItem * CreateLineItemAssignedTargetingOption * DeleteLineItemAssignedTargetingOption
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsBulkUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsBulkUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsBulkUpdateResponse
     */
	public function displayvideoAdvertisersLineItemsBulkUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsBulkUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsBulkUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsBulkUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/lineItems:bulkUpdate', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsBulkUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "bulkUpdateLineItemsRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsBulkUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsBulkUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkUpdateLineItemsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BulkUpdateLineItemsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new line item. Returns the newly created line item if successful.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsCreateResponse
     */
	public function displayvideoAdvertisersLineItemsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/lineItems', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "lineItemInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->lineItem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LineItem', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a line item. Returns error code `NOT_FOUND` if the line item does not exist. The line item should be archived first, i.e. set entity_status to `ENTITY_STATUS_ARCHIVED`, to be able to delete it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsDeleteResponse
     */
	public function displayvideoAdvertisersLineItemsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/lineItems/{lineItemId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Duplicates a line item. Returns the ID of the created line item if successful.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsDuplicateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsDuplicateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsDuplicateResponse
     */
	public function displayvideoAdvertisersLineItemsDuplicate(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsDuplicateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsDuplicateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsDuplicateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/lineItems/{lineItemId}:duplicate', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsDuplicateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "duplicateLineItemRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsDuplicateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsDuplicateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->duplicateLineItemResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DuplicateLineItemResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new line item with settings (including targeting) inherited from the insertion order and an `ENTITY_STATUS_DRAFT` entity_status. Returns the newly created line item if successful. There are default values based on the three fields: * The insertion order's insertion_order_type * The insertion order's automation_type * The given line_item_type
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsGenerateDefaultRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsGenerateDefaultSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsGenerateDefaultResponse
     */
	public function displayvideoAdvertisersLineItemsGenerateDefault(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsGenerateDefaultRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsGenerateDefaultSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsGenerateDefaultResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/lineItems:generateDefault', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsGenerateDefaultRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "generateDefaultLineItemRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsGenerateDefaultRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsGenerateDefaultResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->lineItem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LineItem', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a line item.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsGetResponse
     */
	public function displayvideoAdvertisersLineItemsGet(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/lineItems/{lineItemId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->lineItem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LineItem', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists line items in an advertiser. The order is defined by the order_by parameter. If a filter by entity_status is not specified, line items with `ENTITY_STATUS_ARCHIVED` will not be included in the results.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsListResponse
     */
	public function displayvideoAdvertisersLineItemsList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/lineItems', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLineItemsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLineItemsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing line item. Returns the updated line item if successful. Requests to this endpoint cannot be made concurrently with the following requests updating the same line item: * BulkEditAssignedTargetingOptions * BulkUpdateLineItems * CreateLineItemAssignedTargetingOption * DeleteLineItemAssignedTargetingOption
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsPatchResponse
     */
	public function displayvideoAdvertisersLineItemsPatch(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/lineItems/{lineItemId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "lineItemInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->lineItem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LineItem', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Assigns a targeting option to a line item. Returns the assigned targeting option if successful. Requests to this endpoint cannot be made concurrently with the following requests updating the same line item: * BulkEditAssignedTargetingOptions * BulkUpdate * UpdateLineItem * DeleteLineItemAssignedTargetingOption
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsCreateResponse
     */
	public function displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/lineItems/{lineItemId}/targetingTypes/{targetingType}/assignedTargetingOptions', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "assignedTargetingOptionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignedTargetingOption = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssignedTargetingOption', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an assigned targeting option from a line item. Requests to this endpoint cannot be made concurrently with the following requests updating the same line item: * BulkEditAssignedTargetingOptions * BulkUpdate * UpdateLineItem * CreateLineItemAssignedTargetingOption
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsDeleteResponse
     */
	public function displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/lineItems/{lineItemId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a single targeting option assigned to a line item.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsGetResponse
     */
	public function displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsGet(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/lineItems/{lineItemId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignedTargetingOption = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssignedTargetingOption', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the targeting options assigned to a line item.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsListResponse
     */
	public function displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/lineItems/{lineItemId}/targetingTypes/{targetingType}/assignedTargetingOptions', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLineItemAssignedTargetingOptionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLineItemAssignedTargetingOptionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists advertisers that are accessible to the current user. The order is defined by the order_by parameter. A single partner_id is required. Cross-partner listing is not supported.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersListResponse
     */
	public function displayvideoAdvertisersList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAdvertisersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAdvertisersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists assigned targeting options of an advertiser across targeting types.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersListAssignedTargetingOptionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersListAssignedTargetingOptionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersListAssignedTargetingOptionsResponse
     */
	public function displayvideoAdvertisersListAssignedTargetingOptions(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersListAssignedTargetingOptionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersListAssignedTargetingOptionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersListAssignedTargetingOptionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}:listAssignedTargetingOptions', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersListAssignedTargetingOptionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersListAssignedTargetingOptionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersListAssignedTargetingOptionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkListAdvertiserAssignedTargetingOptionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BulkListAdvertiserAssignedTargetingOptionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Bulk edits multiple assignments between locations and a single location list. The operation will delete the assigned locations provided in BulkEditAssignedLocationsRequest.deleted_assigned_locations and then create the assigned locations provided in BulkEditAssignedLocationsRequest.created_assigned_locations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsBulkEditRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsBulkEditSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsBulkEditResponse
     */
	public function displayvideoAdvertisersLocationListsAssignedLocationsBulkEdit(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsBulkEditRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsBulkEditSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsBulkEditResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations:bulkEdit', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsBulkEditRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "bulkEditAssignedLocationsRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsBulkEditRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsBulkEditResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkEditAssignedLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BulkEditAssignedLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an assignment between a location and a location list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsCreateResponse
     */
	public function displayvideoAdvertisersLocationListsAssignedLocationsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "assignedLocationInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignedLocation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssignedLocation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the assignment between a location and a location list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsDeleteResponse
     */
	public function displayvideoAdvertisersLocationListsAssignedLocationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations/{assignedLocationId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists locations assigned to a location list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsListResponse
     */
	public function displayvideoAdvertisersLocationListsAssignedLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsAssignedLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAssignedLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAssignedLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new location list. Returns the newly created location list if successful.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsCreateResponse
     */
	public function displayvideoAdvertisersLocationListsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/locationLists', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "locationListInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->locationList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LocationList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists location lists based on a given advertiser id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsListResponse
     */
	public function displayvideoAdvertisersLocationListsList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/locationLists', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationListsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationListsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a location list. Returns the updated location list if successful.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsPatchResponse
     */
	public function displayvideoAdvertisersLocationListsPatch(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/locationLists/{locationListId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "locationListInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersLocationListsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->locationList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LocationList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Activates a manual trigger. Each activation of the manual trigger must be at least 5 minutes apart, otherwise an error will be returned. **Warning:** Line Items using manual triggers will stop serving in Display & Video 360 on **May 17, 2023**. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersActivateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersActivateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersActivateResponse
     */
	public function displayvideoAdvertisersManualTriggersActivate(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersActivateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersActivateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersActivateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/manualTriggers/{triggerId}:activate', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersActivateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersActivateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersActivateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->manualTrigger = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ManualTrigger', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new manual trigger. Returns the newly created manual trigger if successful. **Warning:** Line Items using manual triggers will stop serving in Display & Video 360 on **May 17, 2023**. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersCreateResponse
     */
	public function displayvideoAdvertisersManualTriggersCreate(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/manualTriggers', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "manualTriggerInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->manualTrigger = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ManualTrigger', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deactivates a manual trigger. **Warning:** Line Items using manual triggers will stop serving in Display & Video 360 on **May 17, 2023**. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersDeactivateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersDeactivateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersDeactivateResponse
     */
	public function displayvideoAdvertisersManualTriggersDeactivate(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersDeactivateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersDeactivateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersDeactivateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/manualTriggers/{triggerId}:deactivate', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersDeactivateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersDeactivateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersDeactivateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->manualTrigger = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ManualTrigger', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a manual trigger. **Warning:** Line Items using manual triggers will stop serving in Display & Video 360 on **May 17, 2023**. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersGetResponse
     */
	public function displayvideoAdvertisersManualTriggersGet(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/manualTriggers/{triggerId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->manualTrigger = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ManualTrigger', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists manual triggers that are accessible to the current user for a given advertiser ID. The order is defined by the order_by parameter. A single advertiser_id is required. **Warning:** Line Items using manual triggers will stop serving in Display & Video 360 on **May 17, 2023**. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersListResponse
     */
	public function displayvideoAdvertisersManualTriggersList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/manualTriggers', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listManualTriggersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListManualTriggersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a manual trigger. Returns the updated manual trigger if successful. **Warning:** Line Items using manual triggers will stop serving in Display & Video 360 on **May 17, 2023**. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersPatchResponse
     */
	public function displayvideoAdvertisersManualTriggersPatch(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/manualTriggers/{triggerId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "manualTriggerInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersManualTriggersPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->manualTrigger = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ManualTrigger', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new negative keyword list. Returns the newly created negative keyword list if successful.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsCreateResponse
     */
	public function displayvideoAdvertisersNegativeKeywordListsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/negativeKeywordLists', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "negativeKeywordListInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->negativeKeywordList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NegativeKeywordList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists negative keyword lists based on a given advertiser id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsListResponse
     */
	public function displayvideoAdvertisersNegativeKeywordListsList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/negativeKeywordLists', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listNegativeKeywordListsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListNegativeKeywordListsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Bulk edits negative keywords in a single negative keyword list. The operation will delete the negative keywords provided in BulkEditNegativeKeywordsRequest.deleted_negative_keywords and then create the negative keywords provided in BulkEditNegativeKeywordsRequest.created_negative_keywords. This operation is guaranteed to be atomic and will never result in a partial success or partial failure.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsBulkEditRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsBulkEditSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsBulkEditResponse
     */
	public function displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsBulkEdit(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsBulkEditRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsBulkEditSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsBulkEditResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/negativeKeywordLists/{negativeKeywordListId}/negativeKeywords:bulkEdit', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsBulkEditRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "bulkEditNegativeKeywordsRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsBulkEditRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsBulkEditResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkEditNegativeKeywordsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BulkEditNegativeKeywordsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a negative keyword from a negative keyword list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsDeleteResponse
     */
	public function displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/negativeKeywordLists/{negativeKeywordListId}/negativeKeywords/{keywordValue}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists negative keywords in a negative keyword list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsListResponse
     */
	public function displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/negativeKeywordLists/{negativeKeywordListId}/negativeKeywords', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listNegativeKeywordsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListNegativeKeywordsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Replaces all negative keywords in a single negative keyword list. The operation will replace the keywords in a negative keyword list with keywords provided in ReplaceNegativeKeywordsRequest.new_negative_keywords.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsReplaceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsReplaceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsReplaceResponse
     */
	public function displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsReplace(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsReplaceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsReplaceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsReplaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/negativeKeywordLists/{negativeKeywordListId}/negativeKeywords:replace', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsReplaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "replaceNegativeKeywordsRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsReplaceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsNegativeKeywordsReplaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->replaceNegativeKeywordsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReplaceNegativeKeywordsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a negative keyword list. Returns the updated negative keyword list if successful.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsPatchResponse
     */
	public function displayvideoAdvertisersNegativeKeywordListsPatch(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/negativeKeywordLists/{negativeKeywordListId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "negativeKeywordListInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersNegativeKeywordListsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->negativeKeywordList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NegativeKeywordList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing advertiser. Returns the updated advertiser if successful.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersPatchResponse
     */
	public function displayvideoAdvertisersPatch(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "advertiserInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->advertiser = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Advertiser', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Assigns a targeting option to an advertiser. Returns the assigned targeting option if successful.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsCreateResponse
     */
	public function displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/targetingTypes/{targetingType}/assignedTargetingOptions', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "assignedTargetingOptionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignedTargetingOption = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssignedTargetingOption', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an assigned targeting option from an advertiser.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsDeleteResponse
     */
	public function displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a single targeting option assigned to an advertiser.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsGetResponse
     */
	public function displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsGet(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignedTargetingOption = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssignedTargetingOption', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the targeting options assigned to an advertiser.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsListResponse
     */
	public function displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/targetingTypes/{targetingType}/assignedTargetingOptions', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAdvertiserAssignedTargetingOptionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAdvertiserAssignedTargetingOptionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a YouTube ad group ad.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupAdsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupAdsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupAdsGetResponse
     */
	public function displayvideoAdvertisersYoutubeAdGroupAdsGet(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupAdsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupAdsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupAdsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/youtubeAdGroupAds/{youtubeAdGroupAdId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupAdsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupAdsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupAdsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->youtubeAdGroupAd = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\YoutubeAdGroupAd', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists YouTube ad group ads.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupAdsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupAdsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupAdsListResponse
     */
	public function displayvideoAdvertisersYoutubeAdGroupAdsList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupAdsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupAdsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupAdsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/youtubeAdGroupAds', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupAdsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupAdsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupAdsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listYoutubeAdGroupAdsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListYoutubeAdGroupAdsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists assigned targeting options for multiple YouTube ad groups across targeting types. Inherieted assigned targeting options are not included.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsBulkListAdGroupAssignedTargetingOptionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsBulkListAdGroupAssignedTargetingOptionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsBulkListAdGroupAssignedTargetingOptionsResponse
     */
	public function displayvideoAdvertisersYoutubeAdGroupsBulkListAdGroupAssignedTargetingOptions(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsBulkListAdGroupAssignedTargetingOptionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsBulkListAdGroupAssignedTargetingOptionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsBulkListAdGroupAssignedTargetingOptionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/youtubeAdGroups:bulkListAdGroupAssignedTargetingOptions', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsBulkListAdGroupAssignedTargetingOptionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsBulkListAdGroupAssignedTargetingOptionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsBulkListAdGroupAssignedTargetingOptionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkListAdGroupAssignedTargetingOptionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BulkListAdGroupAssignedTargetingOptionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a YouTube ad group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsGetResponse
     */
	public function displayvideoAdvertisersYoutubeAdGroupsGet(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/youtubeAdGroups/{youtubeAdGroupId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->youtubeAdGroup = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\YoutubeAdGroup', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists YouTube ad groups.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsListResponse
     */
	public function displayvideoAdvertisersYoutubeAdGroupsList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/youtubeAdGroups', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listYoutubeAdGroupsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListYoutubeAdGroupsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a single targeting option assigned to a YouTube ad group. Inherited assigned targeting options are not included.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsGetResponse
     */
	public function displayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsGet(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/youtubeAdGroups/{youtubeAdGroupId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignedTargetingOption = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssignedTargetingOption', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the targeting options assigned to a YouTube ad group. Inherited assigned targeting options are not included.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsListResponse
     */
	public function displayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/advertisers/{advertiserId}/youtubeAdGroups/{youtubeAdGroupId}/targetingTypes/{targetingType}/assignedTargetingOptions', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listYoutubeAdGroupAssignedTargetingOptionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListYoutubeAdGroupAssignedTargetingOptionsResponse', 'json');
            }
        }

        return $response;
    }
}