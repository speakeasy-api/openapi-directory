"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class CreateDatalakeExceptionsSubscriptionRequestBodySubscriptionProtocolEnum(str, Enum):
    r"""The subscription protocol to which exception notifications are posted."""
    HTTP = 'HTTP'
    HTTPS = 'HTTPS'
    EMAIL = 'EMAIL'
    EMAIL_JSON = 'EMAIL_JSON'
    SMS = 'SMS'
    SQS = 'SQS'
    LAMBDA = 'LAMBDA'
    APP = 'APP'
    FIREHOSE = 'FIREHOSE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateDatalakeExceptionsSubscriptionRequestBody:
    
    notification_endpoint: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notificationEndpoint') }})
    r"""The Amazon Web Services account where you want to receive exception notifications."""  
    subscription_protocol: CreateDatalakeExceptionsSubscriptionRequestBodySubscriptionProtocolEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionProtocol') }})
    r"""The subscription protocol to which exception notifications are posted."""  
    

@dataclasses.dataclass
class CreateDatalakeExceptionsSubscriptionRequest:
    
    request_body: CreateDatalakeExceptionsSubscriptionRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateDatalakeExceptionsSubscriptionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    account_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccountNotFoundException"""  
    create_datalake_exceptions_subscription_response: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Success"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    