/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * StreamDescription - Represents all of the data describing a particular stream.
 */
public class StreamDescription {
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("CreationRequestDateTime")
    public OffsetDateTime creationRequestDateTime;
    public StreamDescription withCreationRequestDateTime(OffsetDateTime creationRequestDateTime) {
        this.creationRequestDateTime = creationRequestDateTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("KeySchema")
    public KeySchemaElement[] keySchema;
    public StreamDescription withKeySchema(KeySchemaElement[] keySchema) {
        this.keySchema = keySchema;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LastEvaluatedShardId")
    public String lastEvaluatedShardId;
    public StreamDescription withLastEvaluatedShardId(String lastEvaluatedShardId) {
        this.lastEvaluatedShardId = lastEvaluatedShardId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Shards")
    public Shard[] shards;
    public StreamDescription withShards(Shard[] shards) {
        this.shards = shards;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StreamArn")
    public String streamArn;
    public StreamDescription withStreamArn(String streamArn) {
        this.streamArn = streamArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StreamLabel")
    public String streamLabel;
    public StreamDescription withStreamLabel(String streamLabel) {
        this.streamLabel = streamLabel;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StreamStatus")
    public StreamStatusEnum streamStatus;
    public StreamDescription withStreamStatus(StreamStatusEnum streamStatus) {
        this.streamStatus = streamStatus;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StreamViewType")
    public StreamViewTypeEnum streamViewType;
    public StreamDescription withStreamViewType(StreamViewTypeEnum streamViewType) {
        this.streamViewType = streamViewType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TableName")
    public String tableName;
    public StreamDescription withTableName(String tableName) {
        this.tableName = tableName;
        return this;
    }
    
}
