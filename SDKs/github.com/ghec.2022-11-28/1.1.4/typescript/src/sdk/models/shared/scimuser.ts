/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

export class ScimUserEmails extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "primary" })
  primary?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value: string;
}

export class ScimUserGroups extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "display" })
  display?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

export class ScimUserMeta extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  created?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "lastModified" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastModified?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  location?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "resourceType" })
  resourceType?: string;
}

export class ScimUserName extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "familyName" })
  familyName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "formatted" })
  formatted?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "givenName" })
  givenName?: string;
}

export enum ScimUserOperationsOpEnum {
  Add = "add",
  Remove = "remove",
  Replace = "replace",
}

export class ScimUserOperations extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "op" })
  op: ScimUserOperationsOpEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "path" })
  path?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: any;
}

export class ScimUserRoles extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "display" })
  display?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "primary" })
  primary?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

/**
 * SCIM /Users provisioning endpoints
 */
export class ScimUser extends SpeakeasyBase {
  /**
   * The active status of the User.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "active" })
  active: boolean;

  /**
   * The name of the user, suitable for display to end-users
   */
  @SpeakeasyMetadata()
  @Expose({ name: "displayName" })
  displayName?: string;

  /**
   * user emails
   */
  @SpeakeasyMetadata({ elemType: ScimUserEmails })
  @Expose({ name: "emails" })
  @Type(() => ScimUserEmails)
  emails: ScimUserEmails[];

  /**
   * The ID of the User.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "externalId" })
  externalId?: string;

  /**
   * associated groups
   */
  @SpeakeasyMetadata({ elemType: ScimUserGroups })
  @Expose({ name: "groups" })
  @Type(() => ScimUserGroups)
  groups?: ScimUserGroups[];

  /**
   * Unique identifier of an external identity
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(() => ScimUserMeta)
  meta: ScimUserMeta;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  @Type(() => ScimUserName)
  name?: ScimUserName;

  /**
   * Set of operations to be performed
   */
  @SpeakeasyMetadata({ elemType: ScimUserOperations })
  @Expose({ name: "operations" })
  @Type(() => ScimUserOperations)
  operations?: ScimUserOperations[];

  /**
   * The ID of the organization.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "organization_id" })
  organizationId?: number;

  @SpeakeasyMetadata({ elemType: ScimUserRoles })
  @Expose({ name: "roles" })
  @Type(() => ScimUserRoles)
  roles?: ScimUserRoles[];

  /**
   * SCIM schema used.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "schemas" })
  schemas: string[];

  /**
   * Configured by the admin. Could be an email, login, or username
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userName" })
  userName?: string;
}
