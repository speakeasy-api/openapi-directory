/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * TestCase - `TestCase` messages provide the request context and an expectation as to whether the given context will be allowed or denied. Test cases may specify the `request`, `resource`, and `function_mocks` to mock a function call to a service-provided function. The `request` object represents context present at request-time. The `resource` is the value of the target resource as it appears in persistent storage before the request is executed.
 */
public class TestCase {
    /**
     * Test expectation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expectation")
    public TestCaseExpectationEnum expectation;
    public TestCase withExpectation(TestCaseExpectationEnum expectation) {
        this.expectation = expectation;
        return this;
    }
    
    /**
     * Specifies what should be included in the response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expressionReportLevel")
    public TestCaseExpressionReportLevelEnum expressionReportLevel;
    public TestCase withExpressionReportLevel(TestCaseExpressionReportLevelEnum expressionReportLevel) {
        this.expressionReportLevel = expressionReportLevel;
        return this;
    }
    
    /**
     * Optional function mocks for service-defined functions. If not set, any service defined function is expected to return an error, which may or may not influence the test outcome.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("functionMocks")
    public FunctionMock[] functionMocks;
    public TestCase withFunctionMocks(FunctionMock[] functionMocks) {
        this.functionMocks = functionMocks;
        return this;
    }
    
    /**
     * Specifies whether paths (such as request.path) are encoded and how.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pathEncoding")
    public TestCasePathEncodingEnum pathEncoding;
    public TestCase withPathEncoding(TestCasePathEncodingEnum pathEncoding) {
        this.pathEncoding = pathEncoding;
        return this;
    }
    
    /**
     * Request context. The exact format of the request context is service-dependent. See the appropriate service documentation for information about the supported fields and types on the request. Minimally, all services support the following fields and types: Request field | Type ---------------|----------------- auth.uid | `string` auth.token | `map` headers | `map` method | `string` params | `map` path | `string` time | `google.protobuf.Timestamp` If the request value is not well-formed for the service, the request will be rejected as an invalid argument.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request")
    public Object request;
    public TestCase withRequest(Object request) {
        this.request = request;
        return this;
    }
    
    /**
     * Optional resource value as it appears in persistent storage before the request is fulfilled. The resource type depends on the `request.path` value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    public Object resource;
    public TestCase withResource(Object resource) {
        this.resource = resource;
        return this;
    }
    
}
