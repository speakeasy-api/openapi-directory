import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
export declare class Connection {
    _defaultClient: AxiosInstance;
    _securityClient: AxiosInstance;
    _serverURL: string;
    _language: string;
    _sdkVersion: string;
    _genVersion: string;
    constructor(defaultClient: AxiosInstance, securityClient: AxiosInstance, serverURL: string, language: string, sdkVersion: string, genVersion: string);
    /**
     * createConnection - Create a connection between a source and a destination
    **/
    createConnection(req: operations.CreateConnectionRequest, config?: AxiosRequestConfig): Promise<operations.CreateConnectionResponse>;
    /**
     * deleteConnection - Delete a connection
    **/
    deleteConnection(req: operations.DeleteConnectionRequest, config?: AxiosRequestConfig): Promise<operations.DeleteConnectionResponse>;
    /**
     * getConnection - Get a connection
    **/
    getConnection(req: operations.GetConnectionRequest, config?: AxiosRequestConfig): Promise<operations.GetConnectionResponse>;
    /**
     * getState - Fetch the current state for a connection.
    **/
    getState(req: operations.GetStateRequest, config?: AxiosRequestConfig): Promise<operations.GetStateResponse>;
    /**
     * listConnectionsForWorkspace - Returns all connections for a workspace.
     *
     * List connections for workspace. Does not return deleted connections.
    **/
    listConnectionsForWorkspace(req: operations.ListConnectionsForWorkspaceRequest, config?: AxiosRequestConfig): Promise<operations.ListConnectionsForWorkspaceResponse>;
    /**
     * resetConnection - Reset the data for the connection. Deletes data generated by the connection in the destination. Resets any cursors back to initial state.
    **/
    resetConnection(req: operations.ResetConnectionRequest, config?: AxiosRequestConfig): Promise<operations.ResetConnectionResponse>;
    /**
     * syncConnection - Trigger a manual sync of the connection
    **/
    syncConnection(req: operations.SyncConnectionRequest, config?: AxiosRequestConfig): Promise<operations.SyncConnectionResponse>;
    /**
     * updateConnection - Update a connection
    **/
    updateConnection(req: operations.UpdateConnectionRequest, config?: AxiosRequestConfig): Promise<operations.UpdateConnectionResponse>;
}
