/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class ErrorsErrorSearchSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-API-Token",
  })
  apiToken: string;
}

/**
 * It controls the order of sorting
 */
export enum ErrorsErrorSearchOrderEnum {
  Desc = "desc",
  Asc = "asc",
}

/**
 * It controls the sort based on specified field
 */
export enum ErrorsErrorSearchSortEnum {
  Timestamp = "timestamp",
  ErrorGroupId = "errorGroupId",
  ExceptionClassName = "exceptionClassName",
  ExceptionFile = "exceptionFile",
  ExceptionLine = "exceptionLine",
  ExceptionMessage = "exceptionMessage",
  ExceptionMethod = "exceptionMethod",
  DeviceName = "deviceName",
  OsVersion = "osVersion",
  UserId = "userId",
}

export class ErrorsErrorSearchRequest extends SpeakeasyBase {
  /**
   * The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=$skip" })
  dollarSkip?: number;

  /**
   * The maximum number of results to return
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=$top" })
  dollarTop?: number;

  /**
   * The name of the application
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=app_name",
  })
  appName: string;

  /**
   * A filter as specified in OData notation
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter",
  })
  filter?: string;

  /**
   * It controls the order of sorting
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=order" })
  order?: ErrorsErrorSearchOrderEnum;

  /**
   * The name of the owner
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner_name",
  })
  ownerName: string;

  /**
   * A query string
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=q" })
  q?: string;

  /**
   * It controls the sort based on specified field
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: ErrorsErrorSearchSortEnum;
}

export enum ErrorsErrorSearchDefaultApplicationJSONErrorCodeEnum {
  BadRequest = "BadRequest",
  Conflict = "Conflict",
  NotAcceptable = "NotAcceptable",
  NotFound = "NotFound",
  InternalServerError = "InternalServerError",
  Unauthorized = "Unauthorized",
  TooManyRequests = "TooManyRequests",
}

export class ErrorsErrorSearchDefaultApplicationJSONError extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: ErrorsErrorSearchDefaultApplicationJSONErrorCodeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Error code with reason
 */
export class ErrorsErrorSearchDefaultApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => ErrorsErrorSearchDefaultApplicationJSONError)
  error: ErrorsErrorSearchDefaultApplicationJSONError;
}

export class ErrorsErrorSearch200ApplicationJSONErrors extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "deviceName" })
  deviceName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "errorId" })
  errorId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "hasAttachments" })
  hasAttachments?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "hasBreadcrumbs" })
  hasBreadcrumbs?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "language" })
  language?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "osType" })
  osType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "osVersion" })
  osVersion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "timestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  timestamp?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "userId" })
  userId?: string;
}

/**
 * List of errors
 */
export class ErrorsErrorSearch200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ErrorsErrorSearch200ApplicationJSONErrors })
  @Expose({ name: "errors" })
  @Type(() => ErrorsErrorSearch200ApplicationJSONErrors)
  errors?: ErrorsErrorSearch200ApplicationJSONErrors[];

  @SpeakeasyMetadata()
  @Expose({ name: "hasMoreResults" })
  hasMoreResults?: boolean;
}

export class ErrorsErrorSearchResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * List of errors
   */
  @SpeakeasyMetadata()
  errorsErrorSearch200ApplicationJSONObject?: ErrorsErrorSearch200ApplicationJSON;

  /**
   * Error code with reason
   */
  @SpeakeasyMetadata()
  errorsErrorSearchDefaultApplicationJSONObject?: ErrorsErrorSearchDefaultApplicationJSON;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
