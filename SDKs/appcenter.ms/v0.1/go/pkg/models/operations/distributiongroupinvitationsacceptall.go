// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DistributionGroupInvitationsAcceptAllSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type DistributionGroupInvitationsAcceptAllRequest struct {
	// allow empty body for custom http-client lib
	Request  map[string]interface{} `request:"mediaType=application/json"`
	Security DistributionGroupInvitationsAcceptAllSecurity
}

type DistributionGroupInvitationsAcceptAllDefaultApplicationJSONErrorCodeEnum string

const (
	DistributionGroupInvitationsAcceptAllDefaultApplicationJSONErrorCodeEnumBadRequest          DistributionGroupInvitationsAcceptAllDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	DistributionGroupInvitationsAcceptAllDefaultApplicationJSONErrorCodeEnumConflict            DistributionGroupInvitationsAcceptAllDefaultApplicationJSONErrorCodeEnum = "Conflict"
	DistributionGroupInvitationsAcceptAllDefaultApplicationJSONErrorCodeEnumNotAcceptable       DistributionGroupInvitationsAcceptAllDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	DistributionGroupInvitationsAcceptAllDefaultApplicationJSONErrorCodeEnumNotFound            DistributionGroupInvitationsAcceptAllDefaultApplicationJSONErrorCodeEnum = "NotFound"
	DistributionGroupInvitationsAcceptAllDefaultApplicationJSONErrorCodeEnumInternalServerError DistributionGroupInvitationsAcceptAllDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	DistributionGroupInvitationsAcceptAllDefaultApplicationJSONErrorCodeEnumUnauthorized        DistributionGroupInvitationsAcceptAllDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	DistributionGroupInvitationsAcceptAllDefaultApplicationJSONErrorCodeEnumTooManyRequests     DistributionGroupInvitationsAcceptAllDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *DistributionGroupInvitationsAcceptAllDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = DistributionGroupInvitationsAcceptAllDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DistributionGroupInvitationsAcceptAllDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type DistributionGroupInvitationsAcceptAllDefaultApplicationJSONError struct {
	Code    DistributionGroupInvitationsAcceptAllDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                                   `json:"message"`
}

// DistributionGroupInvitationsAcceptAllDefaultApplicationJSON - Error
type DistributionGroupInvitationsAcceptAllDefaultApplicationJSON struct {
	Error DistributionGroupInvitationsAcceptAllDefaultApplicationJSONError `json:"error"`
}

type DistributionGroupInvitationsAcceptAllResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Error
	DistributionGroupInvitationsAcceptAllDefaultApplicationJSONObject *DistributionGroupInvitationsAcceptAllDefaultApplicationJSON
}
