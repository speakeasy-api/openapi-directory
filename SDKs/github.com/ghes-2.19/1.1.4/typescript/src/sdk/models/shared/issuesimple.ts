/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AuthorAssociationEnum } from "./authorassociationenum";
import { Label } from "./label";
import { NullableIntegration } from "./nullableintegration";
import { NullableMilestone } from "./nullablemilestone";
import { NullableSimpleUser } from "./nullablesimpleuser";
import { Repository } from "./repository";
import { SimpleUser } from "./simpleuser";
import { Expose, Transform, Type } from "class-transformer";

export class IssueSimplePullRequest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "diff_url" })
  diffUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "html_url" })
  htmlUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merged_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  mergedAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "patch_url" })
  patchUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}

/**
 * Issue Simple
 */
export class IssueSimple extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "active_lock_reason" })
  activeLockReason?: string;

  /**
   * Simple User
   */
  @SpeakeasyMetadata()
  @Expose({ name: "assignee" })
  @Type(() => NullableSimpleUser)
  assignee: NullableSimpleUser;

  @SpeakeasyMetadata({ elemType: SimpleUser })
  @Expose({ name: "assignees" })
  @Type(() => SimpleUser)
  assignees?: SimpleUser[];

  /**
   * How the author is associated with the repository.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "author_association" })
  authorAssociation: AuthorAssociationEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "body" })
  body?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "body_html" })
  bodyHtml?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "body_text" })
  bodyText?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "closed_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  closedAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "comments" })
  comments: number;

  @SpeakeasyMetadata()
  @Expose({ name: "comments_url" })
  commentsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "events_url" })
  eventsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "html_url" })
  htmlUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  @SpeakeasyMetadata({ elemType: Label })
  @Expose({ name: "labels" })
  @Type(() => Label)
  labels: Label[];

  @SpeakeasyMetadata()
  @Expose({ name: "labels_url" })
  labelsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "locked" })
  locked: boolean;

  /**
   * A collection of related issues and pull requests.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "milestone" })
  @Type(() => NullableMilestone)
  milestone: NullableMilestone;

  @SpeakeasyMetadata()
  @Expose({ name: "node_id" })
  nodeId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "number" })
  number: number;

  /**
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "performed_via_github_app" })
  @Type(() => NullableIntegration)
  performedViaGithubApp?: NullableIntegration;

  @SpeakeasyMetadata()
  @Expose({ name: "pull_request" })
  @Type(() => IssueSimplePullRequest)
  pullRequest?: IssueSimplePullRequest;

  /**
   * A git repository
   */
  @SpeakeasyMetadata()
  @Expose({ name: "repository" })
  @Type(() => Repository)
  repository?: Repository;

  @SpeakeasyMetadata()
  @Expose({ name: "repository_url" })
  repositoryUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: string;

  @SpeakeasyMetadata()
  @Expose({ name: "timeline_url" })
  timelineUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: string;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;

  /**
   * Simple User
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => NullableSimpleUser)
  user: NullableSimpleUser;
}
