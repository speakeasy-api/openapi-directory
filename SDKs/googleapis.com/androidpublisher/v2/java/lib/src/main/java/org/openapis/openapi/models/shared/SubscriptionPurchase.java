/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;



/**
 * SubscriptionPurchase - A SubscriptionPurchase resource indicates the status of a user's subscription purchase.
 */
public class SubscriptionPurchase {
    /**
     * Whether the subscription will automatically be renewed when it reaches its current expiry time.
     */
    
    public Boolean autoRenewing;

    public SubscriptionPurchase withAutoRenewing(Boolean autoRenewing) {
        this.autoRenewing = autoRenewing;
        return this;
    }
    
    /**
     * The reason why a subscription was canceled or is not auto-renewing. Possible values are:  
     * - User canceled the subscription 
     * - Subscription was canceled by the system, for example because of a billing problem 
     * - Subscription was replaced with a new subscription 
     * - Subscription was canceled by the developer
     */
    
    public Integer cancelReason;

    public SubscriptionPurchase withCancelReason(Integer cancelReason) {
        this.cancelReason = cancelReason;
        return this;
    }
    
    /**
     * Information provided by the user when they complete the subscription cancellation flow (cancellation reason survey).
     */
    
    public SubscriptionCancelSurveyResult cancelSurveyResult;

    public SubscriptionPurchase withCancelSurveyResult(SubscriptionCancelSurveyResult cancelSurveyResult) {
        this.cancelSurveyResult = cancelSurveyResult;
        return this;
    }
    
    /**
     * ISO 3166-1 alpha-2 billing country/region code of the user at the time the subscription was granted.
     */
    
    public String countryCode;

    public SubscriptionPurchase withCountryCode(String countryCode) {
        this.countryCode = countryCode;
        return this;
    }
    
    /**
     * A developer-specified string that contains supplemental information about an order.
     */
    
    public String developerPayload;

    public SubscriptionPurchase withDeveloperPayload(String developerPayload) {
        this.developerPayload = developerPayload;
        return this;
    }
    
    /**
     * The email address of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'.
     */
    
    public String emailAddress;

    public SubscriptionPurchase withEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
        return this;
    }
    
    /**
     * Time at which the subscription will expire, in milliseconds since the Epoch.
     */
    
    public String expiryTimeMillis;

    public SubscriptionPurchase withExpiryTimeMillis(String expiryTimeMillis) {
        this.expiryTimeMillis = expiryTimeMillis;
        return this;
    }
    
    /**
     * The family name of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'.
     */
    
    public String familyName;

    public SubscriptionPurchase withFamilyName(String familyName) {
        this.familyName = familyName;
        return this;
    }
    
    /**
     * The given name of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'.
     */
    
    public String givenName;

    public SubscriptionPurchase withGivenName(String givenName) {
        this.givenName = givenName;
        return this;
    }
    
    /**
     * This kind represents a subscriptionPurchase object in the androidpublisher service.
     */
    
    public String kind;

    public SubscriptionPurchase withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * The purchase token of the originating purchase if this subscription is one of the following:  
     * - Re-signup of a canceled but non-lapsed subscription 
     * - Upgrade/downgrade from a previous subscription  For example, suppose a user originally signs up and you receive purchase token X, then the user cancels and goes through the resignup flow (before their subscription lapses) and you receive purchase token Y, and finally the user upgrades their subscription and you receive purchase token Z. If you call this API with purchase token Z, this field will be set to Y. If you call this API with purchase token Y, this field will be set to X. If you call this API with purchase token X, this field will not be set.
     */
    
    public String linkedPurchaseToken;

    public SubscriptionPurchase withLinkedPurchaseToken(String linkedPurchaseToken) {
        this.linkedPurchaseToken = linkedPurchaseToken;
        return this;
    }
    
    /**
     * The order id of the latest recurring order associated with the purchase of the subscription.
     */
    
    public String orderId;

    public SubscriptionPurchase withOrderId(String orderId) {
        this.orderId = orderId;
        return this;
    }
    
    /**
     * The payment state of the subscription. Possible values are:  
     * - Payment pending 
     * - Payment received 
     * - Free trial 
     * - Pending deferred upgrade/downgrade
     */
    
    public Integer paymentState;

    public SubscriptionPurchase withPaymentState(Integer paymentState) {
        this.paymentState = paymentState;
        return this;
    }
    
    /**
     * Price of the subscription, not including tax. Price is expressed in micro-units, where 1,000,000 micro-units represents one unit of the currency. For example, if the subscription price is \u20ac1.99, price_amount_micros is 1990000.
     */
    
    public String priceAmountMicros;

    public SubscriptionPurchase withPriceAmountMicros(String priceAmountMicros) {
        this.priceAmountMicros = priceAmountMicros;
        return this;
    }
    
    /**
     * Contains the price change information for a subscription that can be used to control the user journey for the price change in the app. This can be in the form of seeking confirmation from the user or tailoring the experience for a successful conversion.
     */
    
    public SubscriptionPriceChange priceChange;

    public SubscriptionPurchase withPriceChange(SubscriptionPriceChange priceChange) {
        this.priceChange = priceChange;
        return this;
    }
    
    /**
     * ISO 4217 currency code for the subscription price. For example, if the price is specified in British pounds sterling, price_currency_code is "GBP".
     */
    
    public String priceCurrencyCode;

    public SubscriptionPurchase withPriceCurrencyCode(String priceCurrencyCode) {
        this.priceCurrencyCode = priceCurrencyCode;
        return this;
    }
    
    /**
     * The Google profile id of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'.
     */
    
    public String profileId;

    public SubscriptionPurchase withProfileId(String profileId) {
        this.profileId = profileId;
        return this;
    }
    
    /**
     * The profile name of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'.
     */
    
    public String profileName;

    public SubscriptionPurchase withProfileName(String profileName) {
        this.profileName = profileName;
        return this;
    }
    
    /**
     * The type of purchase of the subscription. This field is only set if this purchase was not made using the standard in-app billing flow. Possible values are:  
     * - Test (i.e. purchased from a license testing account) 
     * - Promo (i.e. purchased using a promo code)
     */
    
    public Integer purchaseType;

    public SubscriptionPurchase withPurchaseType(Integer purchaseType) {
        this.purchaseType = purchaseType;
        return this;
    }
    
    /**
     * Time at which the subscription was granted, in milliseconds since the Epoch.
     */
    
    public String startTimeMillis;

    public SubscriptionPurchase withStartTimeMillis(String startTimeMillis) {
        this.startTimeMillis = startTimeMillis;
        return this;
    }
    
    /**
     * The time at which the subscription was canceled by the user, in milliseconds since the epoch. Only present if cancelReason is 0.
     */
    
    public String userCancellationTimeMillis;

    public SubscriptionPurchase withUserCancellationTimeMillis(String userCancellationTimeMillis) {
        this.userCancellationTimeMillis = userCancellationTimeMillis;
        return this;
    }
    
    public SubscriptionPurchase(){}
}
