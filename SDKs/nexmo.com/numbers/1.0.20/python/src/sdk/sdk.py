"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "https://rest.nexmo.com",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""The Numbers API enables you to manage your existing numbers and buy new virtual numbers for use with the Vonage APIs. Further information is here: <https://developer.nexmo.com/numbers/overview>
    https://developer.nexmo.com/numbers/overview - Numbers product documentation on the Vonage Developer Portal
    """

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        
    
    
    def buy_a_number(self, request: shared.NumberDetails) -> operations.BuyANumberResponse:
        r"""Buy a number
        Request to purchase a specific inbound number.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/number/buy'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BuyANumberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Response])
                res.response = out
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Unauthorized])
                res.unauthorized = out
        elif http_res.status_code == 420:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Response420])
                res.response420 = out

        return res

    def cancel_a_number(self, request: shared.NumberDetails) -> operations.CancelANumberResponse:
        r"""Cancel a number
        Cancel your subscription for a specific inbound number.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/number/cancel'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CancelANumberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Response])
                res.response = out
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Unauthorized])
                res.unauthorized = out

        return res

    def get_available_numbers(self, request: operations.GetAvailableNumbersRequest) -> operations.GetAvailableNumbersResponse:
        r"""Search available numbers
        Retrieve inbound numbers that are available for the specified country.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/number/search'
        
        query_params = utils.get_query_params(operations.GetAvailableNumbersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAvailableNumbersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AvailableNumbers])
                res.available_numbers = out
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountUnauthorized])
                res.account_unauthorized = out

        return res

    def get_owned_numbers(self, request: operations.GetOwnedNumbersRequest) -> operations.GetOwnedNumbersResponse:
        r"""List the numbers you own
        Retrieve all the inbound numbers associated with your Vonage account.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/numbers'
        
        query_params = utils.get_query_params(operations.GetOwnedNumbersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOwnedNumbersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InboundNumbers])
                res.inbound_numbers = out
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountUnauthorized])
                res.account_unauthorized = out

        return res

    def update_a_number(self, request: shared.NumberDetailsUpdate) -> operations.UpdateANumberResponse:
        r"""Update a number
        Change the behaviour of a number that you own.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/number/update'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateANumberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Response])
                res.response = out
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Unauthorized])
                res.unauthorized = out

        return res

    