"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import errorresponsemessage as shared_errorresponsemessage
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SubscriptionPushReporting:
    r"""The subscription push reporting"""
    
    duration: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration') }})
    r"""The duration of the push operation"""  
    event_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventId') }})
    r"""The message identifier. It's a guid."""  
    last_order_modification_utc_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastOrderModificationUtcDate'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""This modification date correspond to the last order pushed by your subscription consumer"""  
    order_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderCount') }})
    r"""The order count sent"""  
    subscription_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionId') }})
    r"""The identifier of the subscription to the orders for a merchant"""  
    succeed: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('succeed') }})
    r"""Indicates if the push operation has succeed"""  
    error_message: Optional[shared_errorresponsemessage.ErrorResponseMessage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorMessage'), 'exclude': lambda f: f is None }})  
    http_status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('httpStatus'), 'exclude': lambda f: f is None }})
    r"""The HTTP status received from the consumer"""  
    max_retry_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxRetryCount'), 'exclude': lambda f: f is None }})
    r"""The maximum BeezUP will retry to push orders. When we the retry count will reach maximum retry count, the subscription will be deactivated."""  
    next_scheduled_retry_utc_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextScheduledRetryUtcDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The next scheduled  date we retry to send orders"""  
    request_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestUri'), 'exclude': lambda f: f is None }})
    r"""The URL <a href=\\"https://en.wikipedia.org/wiki/URL\\">https://en.wikipedia.org/wiki/URL</a>"""  
    response_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('responseUri'), 'exclude': lambda f: f is None }})
    r"""The URL <a href=\\"https://en.wikipedia.org/wiki/URL\\">https://en.wikipedia.org/wiki/URL</a>"""  
    retry_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retryCount'), 'exclude': lambda f: f is None }})
    r"""The retry count. When we the retry count will reach maximum retry count, the subscription will be deactivated."""  
    