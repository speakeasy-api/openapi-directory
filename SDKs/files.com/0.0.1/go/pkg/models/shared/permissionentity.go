// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PermissionEntityPermissionEnum - Permission type
type PermissionEntityPermissionEnum string

const (
	PermissionEntityPermissionEnumFull      PermissionEntityPermissionEnum = "full"
	PermissionEntityPermissionEnumReadonly  PermissionEntityPermissionEnum = "readonly"
	PermissionEntityPermissionEnumWriteonly PermissionEntityPermissionEnum = "writeonly"
	PermissionEntityPermissionEnumList      PermissionEntityPermissionEnum = "list"
	PermissionEntityPermissionEnumHistory   PermissionEntityPermissionEnum = "history"
	PermissionEntityPermissionEnumAdmin     PermissionEntityPermissionEnum = "admin"
	PermissionEntityPermissionEnumBundle    PermissionEntityPermissionEnum = "bundle"
)

func (e *PermissionEntityPermissionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "full":
		fallthrough
	case "readonly":
		fallthrough
	case "writeonly":
		fallthrough
	case "list":
		fallthrough
	case "history":
		fallthrough
	case "admin":
		fallthrough
	case "bundle":
		*e = PermissionEntityPermissionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PermissionEntityPermissionEnum: %s", s)
	}
}

// PermissionEntity - List Permissions
type PermissionEntity struct {
	// Group ID
	GroupID *int `json:"group_id,omitempty"`
	// Group name if applicable
	GroupName *string `json:"group_name,omitempty"`
	// Permission ID
	ID *int `json:"id,omitempty"`
	// Folder path
	Path *string `json:"path,omitempty"`
	// Permission type
	Permission *PermissionEntityPermissionEnum `json:"permission,omitempty"`
	// Does this permission apply to subfolders?
	Recursive *bool `json:"recursive,omitempty"`
	// User ID
	UserID *int `json:"user_id,omitempty"`
	// User's username
	Username *string `json:"username,omitempty"`
}
