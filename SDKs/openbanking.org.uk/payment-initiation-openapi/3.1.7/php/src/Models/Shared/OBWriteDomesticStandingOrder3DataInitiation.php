<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * OBWriteDomesticStandingOrder3DataInitiation - The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a domestic standing order.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class OBWriteDomesticStandingOrder3DataInitiation
{
    /**
     * Identification assigned by an institution to identify an account. This identification is known by the account owner.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticStandingOrder3DataInitiationCreditorAccount $creditorAccount
     */
	#[\JMS\Serializer\Annotation\SerializedName('CreditorAccount')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticStandingOrder3DataInitiationCreditorAccount')]
    public OBWriteDomesticStandingOrder3DataInitiationCreditorAccount $creditorAccount;
    
    /**
     * Provides the details to identify the debtor account.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticStandingOrder3DataInitiationDebtorAccount $debtorAccount
     */
	#[\JMS\Serializer\Annotation\SerializedName('DebtorAccount')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticStandingOrder3DataInitiationDebtorAccount')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?OBWriteDomesticStandingOrder3DataInitiationDebtorAccount $debtorAccount = null;
    
    /**
     * The amount of the final Standing Order
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticStandingOrder3DataInitiationFinalPaymentAmount $finalPaymentAmount
     */
	#[\JMS\Serializer\Annotation\SerializedName('FinalPaymentAmount')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticStandingOrder3DataInitiationFinalPaymentAmount')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?OBWriteDomesticStandingOrder3DataInitiationFinalPaymentAmount $finalPaymentAmount = null;
    
    /**
     * The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
     * 
     * All date-time fields in responses must include the timezone. An example is below:
     * 2017-04-05T10:43:07+00:00
     * 
     * @var ?\DateTime $finalPaymentDateTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('FinalPaymentDateTime')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $finalPaymentDateTime = null;
    
    /**
     * The amount of the first Standing Order
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticStandingOrder3DataInitiationFirstPaymentAmount $firstPaymentAmount
     */
	#[\JMS\Serializer\Annotation\SerializedName('FirstPaymentAmount')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticStandingOrder3DataInitiationFirstPaymentAmount')]
    public OBWriteDomesticStandingOrder3DataInitiationFirstPaymentAmount $firstPaymentAmount;
    
    /**
     * The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
     * 
     * All date-time fields in responses must include the timezone. An example is below:
     * 2017-04-05T10:43:07+00:00
     * 
     * @var \DateTime $firstPaymentDateTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('FirstPaymentDateTime')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $firstPaymentDateTime;
    
    /**
     * Individual Definitions:
     * 
     * EvryDay - Every day
     * EvryWorkgDay - Every working day
     * IntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07)
     * WkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07)
     * IntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-5 to -1, 1 to 31)
     * QtrDay - Quarterly (either ENGLISH, SCOTTISH, or RECEIVED). 
     * ENGLISH = Paid on the 25th March, 24th June, 29th September and 25th December. 
     * SCOTTISH = Paid on the 2nd February, 15th May, 1st August and 11th November.
     * RECEIVED = Paid on the 20th March, 19th June, 24th September and 20th December. 
     * Individual Patterns:
     * EvryDay (ScheduleCode)
     * EvryWorkgDay (ScheduleCode)
     * IntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek)
     * WkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek)
     * IntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth)
     * QtrDay: + either (ENGLISH, SCOTTISH or RECEIVED) ScheduleCode + QuarterDay
     * The regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here:
     * EvryDay
     * EvryWorkgDay
     * IntrvlWkDay:0[1-9]:0[1-7]
     * WkInMnthDay:0[1-5]:0[1-7]
     * IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01])
     * QtrDay:(ENGLISH|SCOTTISH|RECEIVED)
     * Full Regular Expression:
     * ^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
     * 
     * @var string $frequency
     */
	#[\JMS\Serializer\Annotation\SerializedName('Frequency')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $frequency;
    
    /**
     * Number of the payments that will be made in completing this frequency sequence including any executed since the sequence start date.
     * 
     * @var ?string $numberOfPayments
     */
	#[\JMS\Serializer\Annotation\SerializedName('NumberOfPayments')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $numberOfPayments = null;
    
    /**
     * The amount of the recurring Standing Order
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticStandingOrder3DataInitiationRecurringPaymentAmount $recurringPaymentAmount
     */
	#[\JMS\Serializer\Annotation\SerializedName('RecurringPaymentAmount')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticStandingOrder3DataInitiationRecurringPaymentAmount')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?OBWriteDomesticStandingOrder3DataInitiationRecurringPaymentAmount $recurringPaymentAmount = null;
    
    /**
     * The date on which the first recurring payment for a Standing Order schedule will be made. 
     * 
     * Usage: This must be populated only if the first recurring date is different to the first payment date.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
     * All date-time fields in responses must include the timezone. An example is below:
     * 2017-04-05T10:43:07+00:00
     * 
     * @var ?\DateTime $recurringPaymentDateTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('RecurringPaymentDateTime')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $recurringPaymentDateTime = null;
    
    /**
     * Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
     * 
     * Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
     * If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
     * 
     * @var ?string $reference
     */
	#[\JMS\Serializer\Annotation\SerializedName('Reference')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $reference = null;
    
    /**
     * Additional information that can not be captured in the structured fields and/or any other specific block.
     * 
     * @var ?array<string, mixed> $supplementaryData
     */
	#[\JMS\Serializer\Annotation\SerializedName('SupplementaryData')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $supplementaryData = null;
    
	public function __construct()
	{
		$this->creditorAccount = new \OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticStandingOrder3DataInitiationCreditorAccount();
		$this->debtorAccount = null;
		$this->finalPaymentAmount = null;
		$this->finalPaymentDateTime = null;
		$this->firstPaymentAmount = new \OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticStandingOrder3DataInitiationFirstPaymentAmount();
		$this->firstPaymentDateTime = new \DateTime();
		$this->frequency = "";
		$this->numberOfPayments = null;
		$this->recurringPaymentAmount = null;
		$this->recurringPaymentDateTime = null;
		$this->reference = null;
		$this->supplementaryData = null;
	}
}
