"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDeviceCellularGatewayPortForwardingRulesRequestBodyRules:
    
    access: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('access') }})
    r"""`any` or `restricted`. Specify the right to make inbound connections on the specified ports or port ranges. If `restricted`, a list of allowed IPs is mandatory."""  
    lan_ip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lanIp') }})
    r"""The IP address of the server or device that hosts the internal resource that you wish to make available on the WAN"""  
    local_port: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('localPort') }})
    r"""A port or port ranges that will receive the forwarded traffic from the WAN"""  
    protocol: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocol') }})
    r"""TCP or UDP"""  
    public_port: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publicPort') }})
    r"""A port or port ranges that will be forwarded to the host on the LAN"""  
    allowed_ips: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedIps'), 'exclude': lambda f: f is None }})
    r"""An array of ranges of WAN IP addresses that are allowed to make inbound connections on the specified ports or port ranges."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""A descriptive name for the rule"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDeviceCellularGatewayPortForwardingRulesRequestBody:
    
    rules: Optional[list[UpdateDeviceCellularGatewayPortForwardingRulesRequestBodyRules]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rules'), 'exclude': lambda f: f is None }})
    r"""An array of port forwarding params"""  
    

@dataclasses.dataclass
class UpdateDeviceCellularGatewayPortForwardingRulesRequest:
    
    serial: str = dataclasses.field(metadata={'path_param': { 'field_name': 'serial', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateDeviceCellularGatewayPortForwardingRulesRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateDeviceCellularGatewayPortForwardingRulesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_device_cellular_gateway_port_forwarding_rules_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    