/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform } from "class-transformer";

/**
 * Specifies a high-level geographical location constraint for where your resilience policy data can be stored.
 */
export enum UpdateResiliencyPolicyRequestBodyDataLocationConstraintEnum {
  AnyLocation = "AnyLocation",
  SameContinent = "SameContinent",
  SameCountry = "SameCountry",
}

/**
 * The tier for this resiliency policy, ranging from the highest severity (<code>MissionCritical</code>) to lowest (<code>NonCritical</code>).
 */
export enum UpdateResiliencyPolicyRequestBodyTierEnum {
  MissionCritical = "MissionCritical",
  Critical = "Critical",
  Important = "Important",
  CoreServices = "CoreServices",
  NonCritical = "NonCritical",
}

export class UpdateResiliencyPolicyRequestBody extends SpeakeasyBase {
  /**
   * Specifies a high-level geographical location constraint for where your resilience policy data can be stored.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dataLocationConstraint" })
  dataLocationConstraint?: UpdateResiliencyPolicyRequestBodyDataLocationConstraintEnum;

  /**
   * The type of resiliency policy to be created, including the recovery time objective (RTO) and recovery point objective (RPO) in seconds.
   */
  @SpeakeasyMetadata({ elemType: shared.FailurePolicy })
  @Expose({ name: "policy" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.FailurePolicy> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], shared.FailurePolicy);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  policy?: Record<string, shared.FailurePolicy>;

  /**
   * The Amazon Resource Name (ARN) of the resiliency policy. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:resiliency-policy/<code>policy-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i> guide.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "policyArn" })
  policyArn: string;

  /**
   * The description for the policy.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "policyDescription" })
  policyDescription?: string;

  /**
   * The name of the policy
   */
  @SpeakeasyMetadata()
  @Expose({ name: "policyName" })
  policyName?: string;

  /**
   * The tier for this resiliency policy, ranging from the highest severity (<code>MissionCritical</code>) to lowest (<code>NonCritical</code>).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tier" })
  tier?: UpdateResiliencyPolicyRequestBodyTierEnum;
}

export class UpdateResiliencyPolicyRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateResiliencyPolicyRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class UpdateResiliencyPolicyResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateResiliencyPolicyResponse?: shared.UpdateResiliencyPolicyResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
