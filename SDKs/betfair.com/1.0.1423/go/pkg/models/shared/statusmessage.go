// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// StatusMessageErrorCodeEnum - The type of error in case of a failure
type StatusMessageErrorCodeEnum string

const (
	StatusMessageErrorCodeEnumNoAppKey                   StatusMessageErrorCodeEnum = "NO_APP_KEY"
	StatusMessageErrorCodeEnumInvalidAppKey              StatusMessageErrorCodeEnum = "INVALID_APP_KEY"
	StatusMessageErrorCodeEnumNoSession                  StatusMessageErrorCodeEnum = "NO_SESSION"
	StatusMessageErrorCodeEnumInvalidSessionInformation  StatusMessageErrorCodeEnum = "INVALID_SESSION_INFORMATION"
	StatusMessageErrorCodeEnumNotAuthorized              StatusMessageErrorCodeEnum = "NOT_AUTHORIZED"
	StatusMessageErrorCodeEnumInvalidInput               StatusMessageErrorCodeEnum = "INVALID_INPUT"
	StatusMessageErrorCodeEnumInvalidClock               StatusMessageErrorCodeEnum = "INVALID_CLOCK"
	StatusMessageErrorCodeEnumUnexpectedError            StatusMessageErrorCodeEnum = "UNEXPECTED_ERROR"
	StatusMessageErrorCodeEnumTimeout                    StatusMessageErrorCodeEnum = "TIMEOUT"
	StatusMessageErrorCodeEnumSubscriptionLimitExceeded  StatusMessageErrorCodeEnum = "SUBSCRIPTION_LIMIT_EXCEEDED"
	StatusMessageErrorCodeEnumInvalidRequest             StatusMessageErrorCodeEnum = "INVALID_REQUEST"
	StatusMessageErrorCodeEnumConnectionFailed           StatusMessageErrorCodeEnum = "CONNECTION_FAILED"
	StatusMessageErrorCodeEnumMaxConnectionLimitExceeded StatusMessageErrorCodeEnum = "MAX_CONNECTION_LIMIT_EXCEEDED"
	StatusMessageErrorCodeEnumTooManyRequests            StatusMessageErrorCodeEnum = "TOO_MANY_REQUESTS"
)

func (e *StatusMessageErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NO_APP_KEY":
		fallthrough
	case "INVALID_APP_KEY":
		fallthrough
	case "NO_SESSION":
		fallthrough
	case "INVALID_SESSION_INFORMATION":
		fallthrough
	case "NOT_AUTHORIZED":
		fallthrough
	case "INVALID_INPUT":
		fallthrough
	case "INVALID_CLOCK":
		fallthrough
	case "UNEXPECTED_ERROR":
		fallthrough
	case "TIMEOUT":
		fallthrough
	case "SUBSCRIPTION_LIMIT_EXCEEDED":
		fallthrough
	case "INVALID_REQUEST":
		fallthrough
	case "CONNECTION_FAILED":
		fallthrough
	case "MAX_CONNECTION_LIMIT_EXCEEDED":
		fallthrough
	case "TOO_MANY_REQUESTS":
		*e = StatusMessageErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StatusMessageErrorCodeEnum: %s", s)
	}
}

// StatusMessageStatusCodeEnum - The status of the last request
type StatusMessageStatusCodeEnum string

const (
	StatusMessageStatusCodeEnumSuccess StatusMessageStatusCodeEnum = "SUCCESS"
	StatusMessageStatusCodeEnumFailure StatusMessageStatusCodeEnum = "FAILURE"
)

func (e *StatusMessageStatusCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SUCCESS":
		fallthrough
	case "FAILURE":
		*e = StatusMessageStatusCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StatusMessageStatusCodeEnum: %s", s)
	}
}

type StatusMessage struct {
	// Is the connection now closed
	ConnectionClosed *bool `json:"connectionClosed,omitempty"`
	// The connection id
	ConnectionID *string `json:"connectionId,omitempty"`
	// The number of connections available for this account at this moment in time. Present on responses to Authentication messages only.
	ConnectionsAvailable *int `json:"connectionsAvailable,omitempty"`
	// The type of error in case of a failure
	ErrorCode *StatusMessageErrorCodeEnum `json:"errorCode,omitempty"`
	// Additional message in case of a failure
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// Client generated unique id to link request with response (like json rpc)
	ID *int `json:"id,omitempty"`
	// The operation type
	Op *string `json:"op,omitempty"`
	// The status of the last request
	StatusCode *StatusMessageStatusCodeEnum `json:"statusCode,omitempty"`
}
