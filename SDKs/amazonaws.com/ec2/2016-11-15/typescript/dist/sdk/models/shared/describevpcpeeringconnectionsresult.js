"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DescribeVpcPeeringConnectionsResult = exports.DescribeVpcPeeringConnectionsResultVpcPeeringConnections = exports.DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsTags = exports.DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatus = exports.DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum = exports.DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfo = exports.DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoPeeringOptions = exports.DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoIpv6CidrBlockSet = exports.DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoCidrBlockSet = exports.DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfo = exports.DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoPeeringOptions = exports.DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoIpv6CidrBlockSet = exports.DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoCidrBlockSet = void 0;
var utils_1 = require("../../../internal/utils");
/**
 * Describes an IPv4 CIDR block.
 */
var DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoCidrBlockSet = /** @class */ (function (_super) {
    __extends(DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoCidrBlockSet, _super);
    function DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoCidrBlockSet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoCidrBlockSet.prototype, "cidrBlock", void 0);
    return DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoCidrBlockSet;
}(utils_1.SpeakeasyBase));
exports.DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoCidrBlockSet = DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoCidrBlockSet;
/**
 * Describes an IPv6 CIDR block.
 */
var DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoIpv6CidrBlockSet = /** @class */ (function (_super) {
    __extends(DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoIpv6CidrBlockSet, _super);
    function DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoIpv6CidrBlockSet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoIpv6CidrBlockSet.prototype, "ipv6CidrBlock", void 0);
    return DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoIpv6CidrBlockSet;
}(utils_1.SpeakeasyBase));
exports.DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoIpv6CidrBlockSet = DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoIpv6CidrBlockSet;
/**
 * Information about the VPC peering connection options for the accepter or requester VPC.
 */
var DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoPeeringOptions = /** @class */ (function (_super) {
    __extends(DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoPeeringOptions, _super);
    function DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoPeeringOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoPeeringOptions.prototype, "allowDnsResolutionFromRemoteVpc", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoPeeringOptions.prototype, "allowEgressFromLocalClassicLinkToRemoteVpc", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoPeeringOptions.prototype, "allowEgressFromLocalVpcToRemoteClassicLink", void 0);
    return DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoPeeringOptions;
}(utils_1.SpeakeasyBase));
exports.DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoPeeringOptions = DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoPeeringOptions;
/**
 * Information about the accepter VPC. CIDR block information is only returned when describing an active VPC peering connection.
 */
var DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfo = /** @class */ (function (_super) {
    __extends(DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfo, _super);
    function DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfo.prototype, "cidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoCidrBlockSet,
        }),
        __metadata("design:type", Array)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfo.prototype, "cidrBlockSet", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoIpv6CidrBlockSet,
        }),
        __metadata("design:type", Array)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfo.prototype, "ipv6CidrBlockSet", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfo.prototype, "ownerId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoPeeringOptions)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfo.prototype, "peeringOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfo.prototype, "region", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfo.prototype, "vpcId", void 0);
    return DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfo;
}(utils_1.SpeakeasyBase));
exports.DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfo = DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfo;
/**
 * Describes an IPv4 CIDR block.
 */
var DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoCidrBlockSet = /** @class */ (function (_super) {
    __extends(DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoCidrBlockSet, _super);
    function DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoCidrBlockSet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoCidrBlockSet.prototype, "cidrBlock", void 0);
    return DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoCidrBlockSet;
}(utils_1.SpeakeasyBase));
exports.DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoCidrBlockSet = DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoCidrBlockSet;
/**
 * Describes an IPv6 CIDR block.
 */
var DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoIpv6CidrBlockSet = /** @class */ (function (_super) {
    __extends(DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoIpv6CidrBlockSet, _super);
    function DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoIpv6CidrBlockSet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoIpv6CidrBlockSet.prototype, "ipv6CidrBlock", void 0);
    return DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoIpv6CidrBlockSet;
}(utils_1.SpeakeasyBase));
exports.DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoIpv6CidrBlockSet = DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoIpv6CidrBlockSet;
/**
 * Information about the VPC peering connection options for the accepter or requester VPC.
 */
var DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoPeeringOptions = /** @class */ (function (_super) {
    __extends(DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoPeeringOptions, _super);
    function DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoPeeringOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoPeeringOptions.prototype, "allowDnsResolutionFromRemoteVpc", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoPeeringOptions.prototype, "allowEgressFromLocalClassicLinkToRemoteVpc", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoPeeringOptions.prototype, "allowEgressFromLocalVpcToRemoteClassicLink", void 0);
    return DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoPeeringOptions;
}(utils_1.SpeakeasyBase));
exports.DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoPeeringOptions = DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoPeeringOptions;
/**
 * Information about the requester VPC. CIDR block information is only returned when describing an active VPC peering connection.
 */
var DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfo = /** @class */ (function (_super) {
    __extends(DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfo, _super);
    function DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfo.prototype, "cidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoCidrBlockSet,
        }),
        __metadata("design:type", Array)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfo.prototype, "cidrBlockSet", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoIpv6CidrBlockSet,
        }),
        __metadata("design:type", Array)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfo.prototype, "ipv6CidrBlockSet", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfo.prototype, "ownerId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoPeeringOptions)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfo.prototype, "peeringOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfo.prototype, "region", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfo.prototype, "vpcId", void 0);
    return DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfo;
}(utils_1.SpeakeasyBase));
exports.DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfo = DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfo;
/**
 * The status of the VPC peering connection.
 */
var DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum;
(function (DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum) {
    DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum["InitiatingRequest"] = "initiating-request";
    DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum["PendingAcceptance"] = "pending-acceptance";
    DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum["Active"] = "active";
    DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum["Deleted"] = "deleted";
    DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum["Rejected"] = "rejected";
    DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum["Failed"] = "failed";
    DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum["Expired"] = "expired";
    DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum["Provisioning"] = "provisioning";
    DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum["Deleting"] = "deleting";
})(DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum = exports.DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum || (exports.DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum = {}));
/**
 * The status of the VPC peering connection.
 */
var DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatus = /** @class */ (function (_super) {
    __extends(DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatus, _super);
    function DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatus() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatus.prototype, "code", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatus.prototype, "message", void 0);
    return DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatus;
}(utils_1.SpeakeasyBase));
exports.DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatus = DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatus;
/**
 * Describes a tag.
 */
var DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsTags = /** @class */ (function (_super) {
    __extends(DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsTags, _super);
    function DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsTags() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsTags.prototype, "key", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsTags.prototype, "value", void 0);
    return DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsTags;
}(utils_1.SpeakeasyBase));
exports.DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsTags = DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsTags;
/**
 * Describes a VPC peering connection.
 */
var DescribeVpcPeeringConnectionsResultVpcPeeringConnections = /** @class */ (function (_super) {
    __extends(DescribeVpcPeeringConnectionsResultVpcPeeringConnections, _super);
    function DescribeVpcPeeringConnectionsResultVpcPeeringConnections() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfo)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnections.prototype, "accepterVpcInfo", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Date)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnections.prototype, "expirationTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfo)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnections.prototype, "requesterVpcInfo", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatus)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnections.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsTags,
        }),
        __metadata("design:type", Array)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnections.prototype, "tags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpcPeeringConnectionsResultVpcPeeringConnections.prototype, "vpcPeeringConnectionId", void 0);
    return DescribeVpcPeeringConnectionsResultVpcPeeringConnections;
}(utils_1.SpeakeasyBase));
exports.DescribeVpcPeeringConnectionsResultVpcPeeringConnections = DescribeVpcPeeringConnectionsResultVpcPeeringConnections;
/**
 * Success
 */
var DescribeVpcPeeringConnectionsResult = /** @class */ (function (_super) {
    __extends(DescribeVpcPeeringConnectionsResult, _super);
    function DescribeVpcPeeringConnectionsResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpcPeeringConnectionsResult.prototype, "nextToken", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: DescribeVpcPeeringConnectionsResultVpcPeeringConnections,
        }),
        __metadata("design:type", Array)
    ], DescribeVpcPeeringConnectionsResult.prototype, "vpcPeeringConnections", void 0);
    return DescribeVpcPeeringConnectionsResult;
}(utils_1.SpeakeasyBase));
exports.DescribeVpcPeeringConnectionsResult = DescribeVpcPeeringConnectionsResult;
