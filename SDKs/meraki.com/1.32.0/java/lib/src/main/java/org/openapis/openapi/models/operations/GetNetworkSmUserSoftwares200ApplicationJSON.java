/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class GetNetworkSmUserSoftwares200ApplicationJSON {
    /**
     * The Meraki managed application Id for this record on a particular device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appId")
    public String appId;

    public GetNetworkSmUserSoftwares200ApplicationJSON withAppId(String appId) {
        this.appId = appId;
        return this;
    }
    
    /**
     * The size of the software bundle.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bundleSize")
    public Long bundleSize;

    public GetNetworkSmUserSoftwares200ApplicationJSON withBundleSize(Long bundleSize) {
        this.bundleSize = bundleSize;
        return this;
    }
    
    /**
     * When the Meraki record for the software was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    public String createdAt;

    public GetNetworkSmUserSoftwares200ApplicationJSON withCreatedAt(String createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The Meraki managed device Id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deviceId")
    public String deviceId;

    public GetNetworkSmUserSoftwares200ApplicationJSON withDeviceId(String deviceId) {
        this.deviceId = deviceId;
        return this;
    }
    
    /**
     * The size of the data stored in the application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dynamicSize")
    public Long dynamicSize;

    public GetNetworkSmUserSoftwares200ApplicationJSON withDynamicSize(Long dynamicSize) {
        this.dynamicSize = dynamicSize;
        return this;
    }
    
    /**
     * The Meraki software Id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public GetNetworkSmUserSoftwares200ApplicationJSON withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Software bundle identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("identifier")
    public String identifier;

    public GetNetworkSmUserSoftwares200ApplicationJSON withIdentifier(String identifier) {
        this.identifier = identifier;
        return this;
    }
    
    /**
     * When the Software was installed on the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("installedAt")
    public String installedAt;

    public GetNetworkSmUserSoftwares200ApplicationJSON withInstalledAt(String installedAt) {
        this.installedAt = installedAt;
        return this;
    }
    
    /**
     * A boolean indicating whether or not an iOS redemption code was used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iosRedemptionCode")
    public Boolean iosRedemptionCode;

    public GetNetworkSmUserSoftwares200ApplicationJSON withIosRedemptionCode(Boolean iosRedemptionCode) {
        this.iosRedemptionCode = iosRedemptionCode;
        return this;
    }
    
    /**
     * A boolean indicating whether or not the software is managed by Meraki.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isManaged")
    public Boolean isManaged;

    public GetNetworkSmUserSoftwares200ApplicationJSON withIsManaged(Boolean isManaged) {
        this.isManaged = isManaged;
        return this;
    }
    
    /**
     * The itunes numerical identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itunesId")
    public String itunesId;

    public GetNetworkSmUserSoftwares200ApplicationJSON withItunesId(String itunesId) {
        this.itunesId = itunesId;
        return this;
    }
    
    /**
     * The license key associated with this software installation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("licenseKey")
    public String licenseKey;

    public GetNetworkSmUserSoftwares200ApplicationJSON withLicenseKey(String licenseKey) {
        this.licenseKey = licenseKey;
        return this;
    }
    
    /**
     * The name of the software.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public GetNetworkSmUserSoftwares200ApplicationJSON withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The path on the device where the software record is located.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path")
    public String path;

    public GetNetworkSmUserSoftwares200ApplicationJSON withPath(String path) {
        this.path = path;
        return this;
    }
    
    /**
     * The redemption code used for this software.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redemptionCode")
    public Long redemptionCode;

    public GetNetworkSmUserSoftwares200ApplicationJSON withRedemptionCode(Long redemptionCode) {
        this.redemptionCode = redemptionCode;
        return this;
    }
    
    /**
     * Short version notation for the software.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shortVersion")
    public String shortVersion;

    public GetNetworkSmUserSoftwares200ApplicationJSON withShortVersion(String shortVersion) {
        this.shortVersion = shortVersion;
        return this;
    }
    
    /**
     * The management status of the software.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;

    public GetNetworkSmUserSoftwares200ApplicationJSON withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * A boolean indicating this software record should be installed on the associated device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("toInstall")
    public Boolean toInstall;

    public GetNetworkSmUserSoftwares200ApplicationJSON withToInstall(Boolean toInstall) {
        this.toInstall = toInstall;
        return this;
    }
    
    /**
     * A boolean indicating this software record should be uninstalled on the associated device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("toUninstall")
    public Boolean toUninstall;

    public GetNetworkSmUserSoftwares200ApplicationJSON withToUninstall(Boolean toUninstall) {
        this.toUninstall = toUninstall;
        return this;
    }
    
    /**
     * When the record was uninstalled from the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uninstalledAt")
    public String uninstalledAt;

    public GetNetworkSmUserSoftwares200ApplicationJSON withUninstalledAt(String uninstalledAt) {
        this.uninstalledAt = uninstalledAt;
        return this;
    }
    
    /**
     * When the record was last updated by Meraki.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedAt")
    public String updatedAt;

    public GetNetworkSmUserSoftwares200ApplicationJSON withUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * The vendor of the software.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vendor")
    public String vendor;

    public GetNetworkSmUserSoftwares200ApplicationJSON withVendor(String vendor) {
        this.vendor = vendor;
        return this;
    }
    
    /**
     * Full version notation for the software.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public String version;

    public GetNetworkSmUserSoftwares200ApplicationJSON withVersion(String version) {
        this.version = version;
        return this;
    }
    
    public GetNetworkSmUserSoftwares200ApplicationJSON(){}
}
