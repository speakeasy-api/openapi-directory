"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import _xgafv_enum as shared__xgafv_enum
from ..shared import alt_enum as shared_alt_enum
from ..shared import creativeslistresponse as shared_creativeslistresponse
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class DfareportingCreativesListSecurity:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class DfareportingCreativesListSortFieldEnum(str, Enum):
    r"""Field by which to sort the list."""
    ID = 'ID'
    NAME = 'NAME'

class DfareportingCreativesListSortOrderEnum(str, Enum):
    r"""Order of sorted results."""
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'

class DfareportingCreativesListTypesEnum(str, Enum):
    IMAGE = 'IMAGE'
    DISPLAY_REDIRECT = 'DISPLAY_REDIRECT'
    CUSTOM_DISPLAY = 'CUSTOM_DISPLAY'
    INTERNAL_REDIRECT = 'INTERNAL_REDIRECT'
    CUSTOM_DISPLAY_INTERSTITIAL = 'CUSTOM_DISPLAY_INTERSTITIAL'
    INTERSTITIAL_INTERNAL_REDIRECT = 'INTERSTITIAL_INTERNAL_REDIRECT'
    TRACKING_TEXT = 'TRACKING_TEXT'
    RICH_MEDIA_DISPLAY_BANNER = 'RICH_MEDIA_DISPLAY_BANNER'
    RICH_MEDIA_INPAGE_FLOATING = 'RICH_MEDIA_INPAGE_FLOATING'
    RICH_MEDIA_IM_EXPAND = 'RICH_MEDIA_IM_EXPAND'
    RICH_MEDIA_DISPLAY_EXPANDING = 'RICH_MEDIA_DISPLAY_EXPANDING'
    RICH_MEDIA_DISPLAY_INTERSTITIAL = 'RICH_MEDIA_DISPLAY_INTERSTITIAL'
    RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL = 'RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL'
    RICH_MEDIA_MOBILE_IN_APP = 'RICH_MEDIA_MOBILE_IN_APP'
    FLASH_INPAGE = 'FLASH_INPAGE'
    INSTREAM_VIDEO = 'INSTREAM_VIDEO'
    VPAID_LINEAR_VIDEO = 'VPAID_LINEAR_VIDEO'
    VPAID_NON_LINEAR_VIDEO = 'VPAID_NON_LINEAR_VIDEO'
    INSTREAM_VIDEO_REDIRECT = 'INSTREAM_VIDEO_REDIRECT'
    RICH_MEDIA_PEEL_DOWN = 'RICH_MEDIA_PEEL_DOWN'
    HTML5_BANNER = 'HTML5_BANNER'
    DISPLAY = 'DISPLAY'
    DISPLAY_IMAGE_GALLERY = 'DISPLAY_IMAGE_GALLERY'
    BRAND_SAFE_DEFAULT_INSTREAM_VIDEO = 'BRAND_SAFE_DEFAULT_INSTREAM_VIDEO'
    INSTREAM_AUDIO = 'INSTREAM_AUDIO'


@dataclasses.dataclass
class DfareportingCreativesListRequest:
    
    profile_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'profileId', 'style': 'simple', 'explode': False }})
    r"""User profile ID associated with this request."""  
    dollar_xgafv: Optional[shared__xgafv_enum.XgafvEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$.xgafv', 'style': 'form', 'explode': True }})
    r"""V1 error format."""  
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'access_token', 'style': 'form', 'explode': True }})
    r"""OAuth access token."""  
    active: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'active', 'style': 'form', 'explode': True }})
    r"""Select only active creatives. Leave blank to select active and inactive creatives."""  
    advertiser_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'advertiserId', 'style': 'form', 'explode': True }})
    r"""Select only creatives with this advertiser ID."""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for response."""  
    archived: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'archived', 'style': 'form', 'explode': True }})
    r"""Select only archived creatives. Leave blank to select archived and unarchived creatives."""  
    callback: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'callback', 'style': 'form', 'explode': True }})
    r"""JSONP"""  
    campaign_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'campaignId', 'style': 'form', 'explode': True }})
    r"""Select only creatives with this campaign ID."""  
    companion_creative_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'companionCreativeIds', 'style': 'form', 'explode': True }})
    r"""Select only in-stream video creatives with these companion IDs."""  
    creative_field_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'creativeFieldIds', 'style': 'form', 'explode': True }})
    r"""Select only creatives with these creative field IDs."""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ids', 'style': 'form', 'explode': True }})
    r"""Select only creatives with these IDs."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""Maximum number of results to return."""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pageToken', 'style': 'form', 'explode': True }})
    r"""Value of the nextPageToken from the previous result page."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."""  
    rendering_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'renderingIds', 'style': 'form', 'explode': True }})
    r"""Select only creatives with these rendering IDs."""  
    search_string: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'searchString', 'style': 'form', 'explode': True }})
    r"""Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \\"creative*2015\\" will return objects with names like \\"creative June 2015\\", \\"creative April 2015\\", or simply \\"creative 2015\\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \\"creative\\" will match objects with name \\"my creative\\", \\"creative 2015\\", or simply \\"creative\\"."""  
    size_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sizeIds', 'style': 'form', 'explode': True }})
    r"""Select only creatives with these size IDs."""  
    sort_field: Optional[DfareportingCreativesListSortFieldEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sortField', 'style': 'form', 'explode': True }})
    r"""Field by which to sort the list."""  
    sort_order: Optional[DfareportingCreativesListSortOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sortOrder', 'style': 'form', 'explode': True }})
    r"""Order of sorted results."""  
    studio_creative_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'studioCreativeId', 'style': 'form', 'explode': True }})
    r"""Select only creatives corresponding to this Studio creative ID."""  
    types: Optional[list[DfareportingCreativesListTypesEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'types', 'style': 'form', 'explode': True }})
    r"""Select only creatives with these creative types."""  
    upload_protocol: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'upload_protocol', 'style': 'form', 'explode': True }})
    r"""Upload protocol for media (e.g. \\"raw\\", \\"multipart\\")."""  
    upload_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'uploadType', 'style': 'form', 'explode': True }})
    r"""Legacy upload protocol for media (e.g. \\"media\\", \\"multipart\\")."""  
    

@dataclasses.dataclass
class DfareportingCreativesListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    creatives_list_response: Optional[shared_creativeslistresponse.CreativesListResponse] = dataclasses.field(default=None)
    r"""Successful response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    