"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DistibutionReleasesInstallAnalyticsRequestBodyReleases:
    
    distribution_group_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distribution_group_id') }})
    r"""distribution group id"""  
    release_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('release_id') }})
    r"""release id"""  
    user_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id') }})
    r"""user id"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DistibutionReleasesInstallAnalyticsRequestBody:
    r"""The install analytics request payload"""
    
    releases: Optional[list[DistibutionReleasesInstallAnalyticsRequestBodyReleases]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releases'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class DistibutionReleasesInstallAnalyticsRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the app"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the app owner"""  
    request_body: DistibutionReleasesInstallAnalyticsRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""The install analytics request payload"""  
    

@dataclasses.dataclass
class DistibutionReleasesInstallAnalyticsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    