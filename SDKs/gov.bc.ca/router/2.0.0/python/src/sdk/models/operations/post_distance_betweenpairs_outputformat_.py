"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from datetime import datetime
from enum import Enum
from typing import Optional

class PostDistanceBetweenPairsOutputFormatCriteriaEnum(str, Enum):
    r"""Routing criteria to optimize (e.g., shortest, fastest). Default is shortest."""
    SHORTEST = 'shortest'
    FASTEST = 'fastest'

class PostDistanceBetweenPairsOutputFormatDistanceUnitEnum(str, Enum):
    r"""distance unit of measure (e.g., km, mi). Default is km."""
    KM = 'km'
    MI = 'mi'

class PostDistanceBetweenPairsOutputFormatOutputFormatEnum(str, Enum):
    r"""Format of representation"""
    JSON = 'json'
    HTML = 'html'

class PostDistanceBetweenPairsOutputFormatOutputSrsEnum(str, Enum):
    r"""The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\\"_blank\\">outputSRS</a>"""
    FOUR_THOUSAND_THREE_HUNDRED_AND_TWENTY_SIX = '4326'
    FOUR_THOUSAND_TWO_HUNDRED_AND_SIXTY_NINE = '4269'
    THREE_THOUSAND_AND_FIVE = '3005'
    TWENTY_SIX_THOUSAND_NINE_HUNDRED_AND_SEVEN = '26907'
    TWENTY_SIX_THOUSAND_NINE_HUNDRED_AND_EIGHT = '26908'
    TWENTY_SIX_THOUSAND_NINE_HUNDRED_AND_NINE = '26909'
    TWENTY_SIX_THOUSAND_NINE_HUNDRED_AND_TEN = '26910'
    TWENTY_SIX_THOUSAND_NINE_HUNDRED_AND_ELEVEN = '26911'


@dataclasses.dataclass
class PostDistanceBetweenPairsOutputFormatRequest:
    
    from_points: str = dataclasses.field(metadata={'query_param': { 'field_name': 'fromPoints', 'style': 'form', 'explode': True }})
    r"""A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a>"""  
    output_format: PostDistanceBetweenPairsOutputFormatOutputFormatEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'outputFormat', 'style': 'simple', 'explode': False }})
    r"""Format of representation"""  
    to_points: str = dataclasses.field(metadata={'query_param': { 'field_name': 'toPoints', 'style': 'form', 'explode': True }})
    r"""A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a>"""  
    correct_side: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'correctSide', 'style': 'form', 'explode': True }})
    r"""If true, route starts and ends on same side of road as start and end points.Default is false."""  
    criteria: Optional[PostDistanceBetweenPairsOutputFormatCriteriaEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'criteria', 'style': 'form', 'explode': True }})
    r"""Routing criteria to optimize (e.g., shortest, fastest). Default is shortest."""  
    departure: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'departure', 'style': 'form', 'explode': True }})
    r"""departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled"""  
    disable: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'disable', 'style': 'form', 'explode': True }})
    r"""A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)"""  
    distance_unit: Optional[PostDistanceBetweenPairsOutputFormatDistanceUnitEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'distanceUnit', 'style': 'form', 'explode': True }})
    r"""distance unit of measure (e.g., km, mi). Default is km."""  
    max_pairs: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxPairs', 'style': 'form', 'explode': True }})
    r"""The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint."""  
    output_srs: Optional[PostDistanceBetweenPairsOutputFormatOutputSrsEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'outputSRS', 'style': 'form', 'explode': True }})
    r"""The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\\"_blank\\">outputSRS</a>"""  
    route_description: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'routeDescription', 'style': 'form', 'explode': True }})
    r"""Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)"""  
    

@dataclasses.dataclass
class PostDistanceBetweenPairsOutputFormatResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    