"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class SymbolsListSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclasses.dataclass
class SymbolsListRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SymbolsList500ApplicationJSON:
    r"""Internal error"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SymbolsList403ApplicationJSON:
    r"""Unauthorized"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    
class SymbolsList200ApplicationJSONOriginEnum(str, Enum):
    r"""The origin of the symbol file"""
    SYSTEM = 'System'
    USER = 'User'

class SymbolsList200ApplicationJSONStatusEnum(str, Enum):
    r"""Whether the symbol is ignored."""
    AVAILABLE = 'available'
    IGNORED = 'ignored'

class SymbolsList200ApplicationJSONTypeEnum(str, Enum):
    r"""The type of the symbol for the current symbol upload"""
    APPLE = 'Apple'
    JAVA_SCRIPT = 'JavaScript'
    BREAKPAD = 'Breakpad'
    ANDROID_PROGUARD = 'AndroidProguard'
    UWP = 'UWP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SymbolsList200ApplicationJSON:
    
    alternate_symbol_ids: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alternate_symbol_ids') }})
    r"""The other symbols in the same file"""  
    app_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_id') }})
    r"""The application that this symbol belongs to"""  
    origin: SymbolsList200ApplicationJSONOriginEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('origin') }})
    r"""The origin of the symbol file"""  
    platform: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platform') }})
    r"""The platform that this symbol is associated with"""  
    status: SymbolsList200ApplicationJSONStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Whether the symbol is ignored."""  
    symbol_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('symbol_id') }})
    r"""The unique id for this symbol (uuid)"""  
    symbol_upload_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('symbol_upload_id') }})
    r"""The id of the symbol upload this symbol belongs to."""  
    type: SymbolsList200ApplicationJSONTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of the symbol for the current symbol upload"""  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""The path name of the symbol file in blob storage"""  
    build: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('build'), 'exclude': lambda f: f is None }})
    r"""The build number. Optional for Apple. Required for Android."""  
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""The version number. Optional for Apple. Required for Android."""  
    

@dataclasses.dataclass
class SymbolsListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    symbols_list_200_application_json_objects: Optional[list[SymbolsList200ApplicationJSON]] = dataclasses.field(default=None)
    r"""Success"""  
    symbols_list_403_application_json_object: Optional[SymbolsList403ApplicationJSON] = dataclasses.field(default=None)
    r"""Unauthorized"""  
    symbols_list_500_application_json_object: Optional[SymbolsList500ApplicationJSON] = dataclasses.field(default=None)
    r"""Internal error"""  
    