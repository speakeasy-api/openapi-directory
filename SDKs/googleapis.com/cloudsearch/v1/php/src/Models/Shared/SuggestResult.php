<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * SuggestResult - One suggestion result.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class SuggestResult
{
    /**
     * This field contains information about the person being suggested.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\PeopleSuggestion $peopleSuggestion
     */
	#[\JMS\Serializer\Annotation\SerializedName('peopleSuggestion')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\PeopleSuggestion')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PeopleSuggestion $peopleSuggestion = null;
    
    /**
     * This field does not contain anything as of now and is just used as an indicator that the suggest result was a phrase completion.
     * 
     * @var ?array<string, mixed> $querySuggestion
     */
	#[\JMS\Serializer\Annotation\SerializedName('querySuggestion')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $querySuggestion = null;
    
    /**
     * Defines sources for the suggest/search APIs.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Source $source
     */
	#[\JMS\Serializer\Annotation\SerializedName('source')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Source')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Source $source = null;
    
    /**
     * The suggested query that will be used for search, when the user clicks on the suggestion
     * 
     * @var ?string $suggestedQuery
     */
	#[\JMS\Serializer\Annotation\SerializedName('suggestedQuery')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $suggestedQuery = null;
    
	public function __construct()
	{
		$this->peopleSuggestion = null;
		$this->querySuggestion = null;
		$this->source = null;
		$this->suggestedQuery = null;
	}
}
