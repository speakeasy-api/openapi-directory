"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GetHyphenationSourceDictionaryEnum(str, Enum):
    r"""Get from a single dictionary. Valid options: ahd-5, century, wiktionary, webster, and wordnet."""
    AHD_5 = 'ahd-5'
    CENTURY = 'century'
    WIKTIONARY = 'wiktionary'
    WEBSTER = 'webster'
    WORDNET = 'wordnet'

class GetHyphenationUseCanonicalEnum(str, Enum):
    r"""If true will try to return a correct word root ('cats' -> 'cat'). If false returns exactly what was requested."""
    FALSE = 'false'
    TRUE = 'true'


@dataclasses.dataclass
class GetHyphenationRequest:
    
    word: str = dataclasses.field(metadata={'path_param': { 'field_name': 'word', 'style': 'simple', 'explode': False }})
    r"""Word to get syllables for"""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Maximum number of results to return"""  
    source_dictionary: Optional[GetHyphenationSourceDictionaryEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sourceDictionary', 'style': 'form', 'explode': True }})
    r"""Get from a single dictionary. Valid options: ahd-5, century, wiktionary, webster, and wordnet."""  
    use_canonical: Optional[GetHyphenationUseCanonicalEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'useCanonical', 'style': 'form', 'explode': True }})
    r"""If true will try to return a correct word root ('cats' -> 'cat'). If false returns exactly what was requested."""  
    

@dataclasses.dataclass
class GetHyphenationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    