// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type EstimationAPIStatusRequest struct {
	ID          int    `queryParam:"style=form,explode=true,name=id"`
	XAuthKey    string `header:"style=simple,explode=false,name=x-auth-key"`
	XAuthSecret string `header:"style=simple,explode=false,name=x-auth-secret"`
}

// EstimationAPIStatus200TextJSONEnum - OK
type EstimationAPIStatus200TextJSONEnum string

const (
	EstimationAPIStatus200TextJSONEnumDraft    EstimationAPIStatus200TextJSONEnum = "Draft"
	EstimationAPIStatus200TextJSONEnumAccepted EstimationAPIStatus200TextJSONEnum = "Accepted"
	EstimationAPIStatus200TextJSONEnumRejected EstimationAPIStatus200TextJSONEnum = "Rejected"
)

func (e EstimationAPIStatus200TextJSONEnum) ToPointer() *EstimationAPIStatus200TextJSONEnum {
	return &e
}

func (e *EstimationAPIStatus200TextJSONEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Draft":
		fallthrough
	case "Accepted":
		fallthrough
	case "Rejected":
		*e = EstimationAPIStatus200TextJSONEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EstimationAPIStatus200TextJSONEnum: %v", v)
	}
}

// EstimationAPIStatus200ApplicationXMLEnum - OK
type EstimationAPIStatus200ApplicationXMLEnum string

const (
	EstimationAPIStatus200ApplicationXMLEnumDraft    EstimationAPIStatus200ApplicationXMLEnum = "Draft"
	EstimationAPIStatus200ApplicationXMLEnumAccepted EstimationAPIStatus200ApplicationXMLEnum = "Accepted"
	EstimationAPIStatus200ApplicationXMLEnumRejected EstimationAPIStatus200ApplicationXMLEnum = "Rejected"
)

func (e EstimationAPIStatus200ApplicationXMLEnum) ToPointer() *EstimationAPIStatus200ApplicationXMLEnum {
	return &e
}

func (e *EstimationAPIStatus200ApplicationXMLEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Draft":
		fallthrough
	case "Accepted":
		fallthrough
	case "Rejected":
		*e = EstimationAPIStatus200ApplicationXMLEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EstimationAPIStatus200ApplicationXMLEnum: %v", v)
	}
}

// EstimationAPIStatus200ApplicationJSONEnum - OK
type EstimationAPIStatus200ApplicationJSONEnum string

const (
	EstimationAPIStatus200ApplicationJSONEnumDraft    EstimationAPIStatus200ApplicationJSONEnum = "Draft"
	EstimationAPIStatus200ApplicationJSONEnumAccepted EstimationAPIStatus200ApplicationJSONEnum = "Accepted"
	EstimationAPIStatus200ApplicationJSONEnumRejected EstimationAPIStatus200ApplicationJSONEnum = "Rejected"
)

func (e EstimationAPIStatus200ApplicationJSONEnum) ToPointer() *EstimationAPIStatus200ApplicationJSONEnum {
	return &e
}

func (e *EstimationAPIStatus200ApplicationJSONEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Draft":
		fallthrough
	case "Accepted":
		fallthrough
	case "Rejected":
		*e = EstimationAPIStatus200ApplicationJSONEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EstimationAPIStatus200ApplicationJSONEnum: %v", v)
	}
}

type EstimationAPIStatusResponse struct {
	Body        []byte
	ContentType string
	// OK
	EstimationAPIStatus200ApplicationJSONStringEnum *EstimationAPIStatus200ApplicationJSONEnum
	// OK
	EstimationAPIStatus200TextJSONStringEnum *EstimationAPIStatus200TextJSONEnum
	StatusCode                               int
	RawResponse                              *http.Response
}
