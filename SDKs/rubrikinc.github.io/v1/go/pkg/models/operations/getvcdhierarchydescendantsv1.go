// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetVcdHierarchyDescendantsV1ObjectTypeEnum - Filter by node object type.
type GetVcdHierarchyDescendantsV1ObjectTypeEnum string

const (
	GetVcdHierarchyDescendantsV1ObjectTypeEnumCluster   GetVcdHierarchyDescendantsV1ObjectTypeEnum = "Cluster"
	GetVcdHierarchyDescendantsV1ObjectTypeEnumVimServer GetVcdHierarchyDescendantsV1ObjectTypeEnum = "VimServer"
	GetVcdHierarchyDescendantsV1ObjectTypeEnumOrg       GetVcdHierarchyDescendantsV1ObjectTypeEnum = "Org"
	GetVcdHierarchyDescendantsV1ObjectTypeEnumOrgVdc    GetVcdHierarchyDescendantsV1ObjectTypeEnum = "OrgVdc"
	GetVcdHierarchyDescendantsV1ObjectTypeEnumCatalog   GetVcdHierarchyDescendantsV1ObjectTypeEnum = "Catalog"
	GetVcdHierarchyDescendantsV1ObjectTypeEnumVApp      GetVcdHierarchyDescendantsV1ObjectTypeEnum = "vApp"
)

func (e GetVcdHierarchyDescendantsV1ObjectTypeEnum) ToPointer() *GetVcdHierarchyDescendantsV1ObjectTypeEnum {
	return &e
}

func (e *GetVcdHierarchyDescendantsV1ObjectTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Cluster":
		fallthrough
	case "VimServer":
		fallthrough
	case "Org":
		fallthrough
	case "OrgVdc":
		fallthrough
	case "Catalog":
		fallthrough
	case "vApp":
		*e = GetVcdHierarchyDescendantsV1ObjectTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetVcdHierarchyDescendantsV1ObjectTypeEnum: %v", v)
	}
}

// GetVcdHierarchyDescendantsV1SLAAssignmentEnum - Filter by SLA assignment type.
type GetVcdHierarchyDescendantsV1SLAAssignmentEnum string

const (
	GetVcdHierarchyDescendantsV1SLAAssignmentEnumDerived    GetVcdHierarchyDescendantsV1SLAAssignmentEnum = "Derived"
	GetVcdHierarchyDescendantsV1SLAAssignmentEnumDirect     GetVcdHierarchyDescendantsV1SLAAssignmentEnum = "Direct"
	GetVcdHierarchyDescendantsV1SLAAssignmentEnumUnassigned GetVcdHierarchyDescendantsV1SLAAssignmentEnum = "Unassigned"
)

func (e GetVcdHierarchyDescendantsV1SLAAssignmentEnum) ToPointer() *GetVcdHierarchyDescendantsV1SLAAssignmentEnum {
	return &e
}

func (e *GetVcdHierarchyDescendantsV1SLAAssignmentEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Derived":
		fallthrough
	case "Direct":
		fallthrough
	case "Unassigned":
		*e = GetVcdHierarchyDescendantsV1SLAAssignmentEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetVcdHierarchyDescendantsV1SLAAssignmentEnum: %v", v)
	}
}

// GetVcdHierarchyDescendantsV1SnappableStatusEnum - Filters vCD hierarchy objects based on the specified query value.
type GetVcdHierarchyDescendantsV1SnappableStatusEnum string

const (
	GetVcdHierarchyDescendantsV1SnappableStatusEnumProtectable GetVcdHierarchyDescendantsV1SnappableStatusEnum = "Protectable"
)

func (e GetVcdHierarchyDescendantsV1SnappableStatusEnum) ToPointer() *GetVcdHierarchyDescendantsV1SnappableStatusEnum {
	return &e
}

func (e *GetVcdHierarchyDescendantsV1SnappableStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Protectable":
		*e = GetVcdHierarchyDescendantsV1SnappableStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetVcdHierarchyDescendantsV1SnappableStatusEnum: %v", v)
	}
}

// GetVcdHierarchyDescendantsV1SortByEnum - Attribute to sort the results on.
type GetVcdHierarchyDescendantsV1SortByEnum string

const (
	GetVcdHierarchyDescendantsV1SortByEnumName                   GetVcdHierarchyDescendantsV1SortByEnum = "Name"
	GetVcdHierarchyDescendantsV1SortByEnumEffectiveSLADomainName GetVcdHierarchyDescendantsV1SortByEnum = "EffectiveSlaDomainName"
	GetVcdHierarchyDescendantsV1SortByEnumSLAAssignment          GetVcdHierarchyDescendantsV1SortByEnum = "SlaAssignment"
	GetVcdHierarchyDescendantsV1SortByEnumConnectionStatus       GetVcdHierarchyDescendantsV1SortByEnum = "ConnectionStatus"
	GetVcdHierarchyDescendantsV1SortByEnumVappCount              GetVcdHierarchyDescendantsV1SortByEnum = "VappCount"
)

func (e GetVcdHierarchyDescendantsV1SortByEnum) ToPointer() *GetVcdHierarchyDescendantsV1SortByEnum {
	return &e
}

func (e *GetVcdHierarchyDescendantsV1SortByEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Name":
		fallthrough
	case "EffectiveSlaDomainName":
		fallthrough
	case "SlaAssignment":
		fallthrough
	case "ConnectionStatus":
		fallthrough
	case "VappCount":
		*e = GetVcdHierarchyDescendantsV1SortByEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetVcdHierarchyDescendantsV1SortByEnum: %v", v)
	}
}

// GetVcdHierarchyDescendantsV1SortOrderEnum - Order for sorting the results, either ascending or descending.
type GetVcdHierarchyDescendantsV1SortOrderEnum string

const (
	GetVcdHierarchyDescendantsV1SortOrderEnumAsc  GetVcdHierarchyDescendantsV1SortOrderEnum = "asc"
	GetVcdHierarchyDescendantsV1SortOrderEnumDesc GetVcdHierarchyDescendantsV1SortOrderEnum = "desc"
)

func (e GetVcdHierarchyDescendantsV1SortOrderEnum) ToPointer() *GetVcdHierarchyDescendantsV1SortOrderEnum {
	return &e
}

func (e *GetVcdHierarchyDescendantsV1SortOrderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetVcdHierarchyDescendantsV1SortOrderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetVcdHierarchyDescendantsV1SortOrderEnum: %v", v)
	}
}

type GetVcdHierarchyDescendantsV1Request struct {
	// Filter by ID of effective SLA domain.
	EffectiveSLADomainID *string `queryParam:"style=form,explode=true,name=effective_sla_domain_id"`
	// ID of the parent vCD hierarchy object. To get top-level nodes, use **root** as the ID.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Filter by isRelic field of vCD vApp hierarchy object. Return both relic and non-relic descendants if this query is not set.
	IsRelic *bool `queryParam:"style=form,explode=true,name=is_relic"`
	// Limit the number of matches returned.
	Limit *int `queryParam:"style=form,explode=true,name=limit"`
	// Search object by object name.
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// Filter by node object type.
	ObjectType *GetVcdHierarchyDescendantsV1ObjectTypeEnum `queryParam:"style=form,explode=true,name=object_type"`
	// Ignore these many matches in the beginning.
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// Filter by primary cluster ID, or **local**.
	PrimaryClusterID *string `queryParam:"style=form,explode=true,name=primary_cluster_id"`
	// Filter by SLA assignment type.
	SLAAssignment *GetVcdHierarchyDescendantsV1SLAAssignmentEnum `queryParam:"style=form,explode=true,name=sla_assignment"`
	// Filters vCD hierarchy objects based on the specified query value.
	SnappableStatus *GetVcdHierarchyDescendantsV1SnappableStatusEnum `queryParam:"style=form,explode=true,name=snappable_status"`
	// Attribute to sort the results on.
	SortBy *GetVcdHierarchyDescendantsV1SortByEnum `queryParam:"style=form,explode=true,name=sort_by"`
	// Order for sorting the results, either ascending or descending.
	SortOrder *GetVcdHierarchyDescendantsV1SortOrderEnum `queryParam:"style=form,explode=true,name=sort_order"`
}

type GetVcdHierarchyDescendantsV1Response struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Summary list of descendant objects.
	VcdHierarchyObjectSummaryListResponse *shared.VcdHierarchyObjectSummaryListResponse
}
