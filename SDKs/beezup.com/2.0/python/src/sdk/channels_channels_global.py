"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ChannelsChannelsGlobal:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_available_channels(self, request: operations.GetAvailableChannelsRequest) -> operations.GetAvailableChannelsResponse:
        r"""List all available channel for this store"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/user/channels/'
        
        query_params = utils.get_query_params(operations.GetAvailableChannelsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAvailableChannelsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ChannelHeader]])
                res.channel_headers = out

        return res

    def get_channel_categories(self, request: operations.GetChannelCategoriesRequest) -> operations.GetChannelCategoriesResponse:
        r"""Get channel categories"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetChannelCategoriesRequest, base_url, '/v2/user/channels/{channelId}/categories', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetChannelCategoriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ChannelRootCategory])
                res.channel_root_category = out

        return res

    def get_channel_columns(self, request: operations.GetChannelColumnsRequest) -> operations.GetChannelColumnsResponse:
        r"""Get channel columns"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetChannelColumnsRequest, base_url, '/v2/user/channels/{channelId}/columns', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetChannelColumnsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ChannelColumn]])
                res.channel_columns = out

        return res

    def get_channel_info(self, request: operations.GetChannelInfoRequest) -> operations.GetChannelInfoResponse:
        r"""Get channel information"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetChannelInfoRequest, base_url, '/v2/user/channels/{channelId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetChannelInfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ChannelInfo])
                res.channel_info = out

        return res

    