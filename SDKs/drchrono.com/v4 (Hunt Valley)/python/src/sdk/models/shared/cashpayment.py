"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CashPaymentPaymentMethodEnum(str, Enum):
    r"""`\\"CASH\\", \\"CHCK\\" for Check, \\"DBIT\\" for Debit, \\"CRDT\\" for Credit Card, \\"AMEX\\" for American Express, \\"VISA\\", \\"MSTR\\" for Mastercard, \\"DISC\\" for Discover, \\"SQR1\\" for Square (legacy), \\"SQRE\\" for Square, \\"PTPA\\" for Patient Payments, \\"ONPT\\" for onpatient, \\"OTHR\\" for Other`"""
    CASH = 'CASH'
    CHCK = 'CHCK'
    DBIT = 'DBIT'
    CRDT = 'CRDT'
    AMEX = 'AMEX'
    VISA = 'VISA'
    MSTR = 'MSTR'
    DISC = 'DISC'
    SQR1 = 'SQR1'
    SQRE = 'SQRE'
    PTPA = 'PTPA'
    ONPT = 'ONPT'
    OTHR = 'OTHR'

class CashPaymentPaymentTransactionTypeEnum(str, Enum):
    r"""`\\"\\" for Credit, \\"REF\\" for Refund, \\"COR\\" for Correction, \\"COPAY\\" for Copay, \\"COINSR\\" for Coinsurance, \\"OTHR\\" for Other`"""
    UNKNOWN = ''
    REF = 'REF'
    COR = 'COR'
    COPAY = 'COPAY'
    COINSR = 'COINSR'
    OTHR = 'OTHR'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CashPayment:
    r"""Created"""
    
    patient: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patient') }})  
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""Amount of cash for this payment, cannot be zero"""  
    appointment: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appointment'), 'exclude': lambda f: f is None }})
    r"""If this is absent, the apponitment will be inferred from line item"""  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})  
    created_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_by'), 'exclude': lambda f: f is None }})  
    doctor: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doctor'), 'exclude': lambda f: f is None }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    line_item: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line_item'), 'exclude': lambda f: f is None }})  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})  
    payment_method: Optional[CashPaymentPaymentMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payment_method'), 'exclude': lambda f: f is None }})
    r"""`\\"CASH\\", \\"CHCK\\" for Check, \\"DBIT\\" for Debit, \\"CRDT\\" for Credit Card, \\"AMEX\\" for American Express, \\"VISA\\", \\"MSTR\\" for Mastercard, \\"DISC\\" for Discover, \\"SQR1\\" for Square (legacy), \\"SQRE\\" for Square, \\"PTPA\\" for Patient Payments, \\"ONPT\\" for onpatient, \\"OTHR\\" for Other`"""  
    payment_transaction_type: Optional[CashPaymentPaymentTransactionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payment_transaction_type'), 'exclude': lambda f: f is None }})
    r"""`\\"\\" for Credit, \\"REF\\" for Refund, \\"COR\\" for Correction, \\"COPAY\\" for Copay, \\"COINSR\\" for Coinsurance, \\"OTHR\\" for Other`"""  
    posted_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('posted_date'), 'exclude': lambda f: f is None }})  
    received_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('received_date'), 'exclude': lambda f: f is None }})  
    trace_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trace_number'), 'exclude': lambda f: f is None }})  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})  
    