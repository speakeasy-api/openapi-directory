/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class WebResource {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Relinquish ownership of a website or domain.
   */
  siteVerificationWebResourceDelete(
    req: operations.SiteVerificationWebResourceDeleteRequest,
    security: operations.SiteVerificationWebResourceDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SiteVerificationWebResourceDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SiteVerificationWebResourceDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/webResource/{id}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SiteVerificationWebResourceDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SiteVerificationWebResourceDeleteResponse =
        new operations.SiteVerificationWebResourceDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get the most current data for a website or domain.
   */
  siteVerificationWebResourceGet(
    req: operations.SiteVerificationWebResourceGetRequest,
    security: operations.SiteVerificationWebResourceGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SiteVerificationWebResourceGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SiteVerificationWebResourceGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/webResource/{id}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SiteVerificationWebResourceGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SiteVerificationWebResourceGetResponse =
        new operations.SiteVerificationWebResourceGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.siteVerificationWebResourceResource = utils.objectToClass(
              httpRes?.data,
              shared.SiteVerificationWebResourceResource
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a verification token for placing on a website or domain.
   */
  siteVerificationWebResourceGetToken(
    req: operations.SiteVerificationWebResourceGetTokenRequest,
    security: operations.SiteVerificationWebResourceGetTokenSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SiteVerificationWebResourceGetTokenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SiteVerificationWebResourceGetTokenRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/token";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "siteVerificationWebResourceGettokenRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SiteVerificationWebResourceGetTokenSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SiteVerificationWebResourceGetTokenResponse =
        new operations.SiteVerificationWebResourceGetTokenResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.siteVerificationWebResourceGettokenResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.SiteVerificationWebResourceGettokenResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Attempt verification of a website or domain.
   */
  siteVerificationWebResourceInsert(
    req: operations.SiteVerificationWebResourceInsertRequest,
    security: operations.SiteVerificationWebResourceInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SiteVerificationWebResourceInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SiteVerificationWebResourceInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/webResource";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "siteVerificationWebResourceResource",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SiteVerificationWebResourceInsertSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SiteVerificationWebResourceInsertResponse =
        new operations.SiteVerificationWebResourceInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.siteVerificationWebResourceResource = utils.objectToClass(
              httpRes?.data,
              shared.SiteVerificationWebResourceResource
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the list of your verified websites and domains.
   */
  siteVerificationWebResourceList(
    req: operations.SiteVerificationWebResourceListRequest,
    security: operations.SiteVerificationWebResourceListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SiteVerificationWebResourceListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SiteVerificationWebResourceListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/webResource";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SiteVerificationWebResourceListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SiteVerificationWebResourceListResponse =
        new operations.SiteVerificationWebResourceListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.siteVerificationWebResourceListResponse = utils.objectToClass(
              httpRes?.data,
              shared.SiteVerificationWebResourceListResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Modify the list of owners for your website or domain. This method supports patch semantics.
   */
  siteVerificationWebResourcePatch(
    req: operations.SiteVerificationWebResourcePatchRequest,
    security: operations.SiteVerificationWebResourcePatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SiteVerificationWebResourcePatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SiteVerificationWebResourcePatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/webResource/{id}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "siteVerificationWebResourceResource",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SiteVerificationWebResourcePatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SiteVerificationWebResourcePatchResponse =
        new operations.SiteVerificationWebResourcePatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.siteVerificationWebResourceResource = utils.objectToClass(
              httpRes?.data,
              shared.SiteVerificationWebResourceResource
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Modify the list of owners for your website or domain.
   */
  siteVerificationWebResourceUpdate(
    req: operations.SiteVerificationWebResourceUpdateRequest,
    security: operations.SiteVerificationWebResourceUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SiteVerificationWebResourceUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SiteVerificationWebResourceUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/webResource/{id}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "siteVerificationWebResourceResource",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SiteVerificationWebResourceUpdateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SiteVerificationWebResourceUpdateResponse =
        new operations.SiteVerificationWebResourceUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.siteVerificationWebResourceResource = utils.objectToClass(
              httpRes?.data,
              shared.SiteVerificationWebResourceResource
            );
          }
          break;
      }

      return res;
    });
  }
}
