/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class CreateInvestorSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=x-api-key",
  })
  apiSecretKey: string;
}

export class CreateInvestorRootTypeForInvestorCreationRequestAddress extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "address_line" })
  addressLine?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city?: string;

  /**
   * 3 character country code inline with ISO 3166-1 alpha-3
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country: string;

  @SpeakeasyMetadata()
  @Expose({ name: "postal_code" })
  postalCode: string;

  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "street_name" })
  streetName?: string;
}

/**
 * If not populated, will be defaulted to inactive
 */
export enum CreateInvestorRootTypeForInvestorCreationRequestBankAccountsAccountStatusEnum {
  Active = "active",
  Inactive = "inactive",
}

/**
 * Only one account should be the default
 */
export enum CreateInvestorRootTypeForInvestorCreationRequestBankAccountsDefaultAccountEnum {
  Yes = "yes",
  No = "no",
}

export class CreateInvestorRootTypeForInvestorCreationRequestBankAccounts extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "account_name" })
  accountName: string;

  /**
   * If not populated, will be defaulted to inactive
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account_status" })
  accountStatus?: CreateInvestorRootTypeForInvestorCreationRequestBankAccountsAccountStatusEnum;

  /**
   * Unique for the investor
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bank_account_number" })
  bankAccountNumber: string;

  @SpeakeasyMetadata()
  @Expose({ name: "building_society_roll_number" })
  buildingSocietyRollNumber?: string;

  /**
   * Only one account should be the default
   */
  @SpeakeasyMetadata()
  @Expose({ name: "default_account" })
  defaultAccount: CreateInvestorRootTypeForInvestorCreationRequestBankAccountsDefaultAccountEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "sort_code" })
  sortCode?: string;
}

export class CreateInvestorRootTypeForInvestorCreationRequestDateOfBirth extends SpeakeasyBase {
  /**
   * two digit string `DD`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "day" })
  day: string;

  /**
   * two digit string `MM`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "month" })
  month: string;

  /**
   * four digit string `YYYY`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "year" })
  year: string;
}

export enum CreateInvestorRootTypeForInvestorCreationRequestDealingStatusEnum {
  Inactive = "inactive",
  Active = "active",
}

/**
 * Status of an investor best describes their personal circumstances.
 */
export enum CreateInvestorRootTypeForInvestorCreationRequestEmploymentStatusEnum {
  Employed = "employed",
  SelfEmployed = "self_employed",
  Pensioner = "pensioner",
  ChildUnder16 = "child_under_16",
  InFullTimeEducation = "in_full_time_education",
  Unemployed = "unemployed",
  CaringForAPersonOver16 = "caring_for_a_person_over_16",
  CaringForAPersonUnder16 = "caring_for_a_person_under_16",
  Other = "other",
}

export class CreateInvestorRootTypeForInvestorCreationRequestExpressionOfWishSippBeneficiaries extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  address: string;

  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "first_name" })
  firstName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "last_name" })
  lastName: string;

  /**
   * Percentage of assets that will be allocated to the beneficiary
   */
  @SpeakeasyMetadata()
  @Expose({ name: "percentage" })
  percentage: string;

  @SpeakeasyMetadata()
  @Expose({ name: "phone_number" })
  phoneNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tax_id" })
  taxId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;
}

export class CreateInvestorRootTypeForInvestorCreationRequestExpressionOfWishSippNominees extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  address: string;

  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "first_name" })
  firstName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "last_name" })
  lastName: string;

  /**
   * Percentage of assets that will be allocated to the nominee
   */
  @SpeakeasyMetadata()
  @Expose({ name: "percentage" })
  percentage: string;

  @SpeakeasyMetadata()
  @Expose({ name: "phone_number" })
  phoneNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tax_id" })
  taxId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;
}

/**
 * Beneficiary and nominee list of the expression of wish.
 */
export class CreateInvestorRootTypeForInvestorCreationRequestExpressionOfWish extends SpeakeasyBase {
  /**
   * Beneficiaries list of the expression of wish
   */
  @SpeakeasyMetadata({
    elemType:
      CreateInvestorRootTypeForInvestorCreationRequestExpressionOfWishSippBeneficiaries,
  })
  @Expose({ name: "sipp_beneficiaries" })
  @Type(
    () =>
      CreateInvestorRootTypeForInvestorCreationRequestExpressionOfWishSippBeneficiaries
  )
  sippBeneficiaries?: CreateInvestorRootTypeForInvestorCreationRequestExpressionOfWishSippBeneficiaries[];

  /**
   * Nominees list of the expression of wish
   */
  @SpeakeasyMetadata({
    elemType:
      CreateInvestorRootTypeForInvestorCreationRequestExpressionOfWishSippNominees,
  })
  @Expose({ name: "sipp_nominees" })
  @Type(
    () =>
      CreateInvestorRootTypeForInvestorCreationRequestExpressionOfWishSippNominees
  )
  sippNominees?: CreateInvestorRootTypeForInvestorCreationRequestExpressionOfWishSippNominees[];
}

export class CreateInvestorRootTypeForInvestorCreationRequestIdNumbers extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id_number" })
  idNumber: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id_type" })
  idType: string;
}

export enum CreateInvestorRootTypeForInvestorCreationRequestKycAmlStatusEnum {
  Submitted = "submitted",
  KycFailedError = "kyc_failed_error",
  Pending = "pending",
  Clear = "clear",
  NotStarted = "not_started",
}

/**
 * primary=Primary protection, enhanced=Enhanced protection, fp12=Fixed protection 2012, fp14=Fixed protection 2014, fp16=Fixed protection 2016, ip14=Individual protection 2014, ip16=Individual protection 2016
 */
export enum CreateInvestorRootTypeForInvestorCreationRequestLtaProtectionDetailsLtaProtectionTypeEnum {
  Primary = "primary",
  Enhanced = "enhanced",
  Fp12 = "fp12",
  Fp14 = "fp14",
  Ip14 = "ip14",
  Fp16 = "fp16",
  Ip16 = "ip16",
}

export class CreateInvestorRootTypeForInvestorCreationRequestLtaProtectionDetails extends SpeakeasyBase {
  /**
   * Protected lifetime allowance of the investor. Required when the lta_protection_type is ip14 or ip16.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lta_individual_protection_amount" })
  ltaIndividualProtectionAmount?: string;

  /**
   * Primary protection factor of the investor. Required only when the lta_protection_type is primary.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lta_primary_protection_factor" })
  ltaPrimaryProtectionFactor?: string;

  /**
   * Protection notification number issued by HMRC. Required for protection from 2016 onwards. Required when the lta_protection_type is fp14 or ip16.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lta_protection_notification_number" })
  ltaProtectionNotificationNumber?: string;

  /**
   * Scheme administrator reference issued by HMRC. Required for protection from 2016 onwards. Required when the lta_protection_type is fp14 or ip16.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lta_protection_scheme_administrator_reference" })
  ltaProtectionSchemeAdministratorReference?: string;

  /**
   * primary=Primary protection, enhanced=Enhanced protection, fp12=Fixed protection 2012, fp14=Fixed protection 2014, fp16=Fixed protection 2016, ip14=Individual protection 2014, ip16=Individual protection 2016
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lta_protection_type" })
  ltaProtectionType: CreateInvestorRootTypeForInvestorCreationRequestLtaProtectionDetailsLtaProtectionTypeEnum;
}

/**
 * Residence of the investor for tax purposes. (for example, to claim relief at source) GB-ENG=England GB-NIR=Northern Ireland GB-SCT=Scotland GB-WLS=Wales.
 */
export enum CreateInvestorRootTypeForInvestorCreationRequestTaxResidenceEnum {
  GbEng = "GB-ENG",
  GbNir = "GB-NIR",
  GbSct = "GB-SCT",
  GbWls = "GB-WLS",
}

/**
 * JSON for the Investor creation request resource type
 */
export class CreateInvestorRootTypeForInvestorCreationRequestInput extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  @Type(() => CreateInvestorRootTypeForInvestorCreationRequestAddress)
  address: CreateInvestorRootTypeForInvestorCreationRequestAddress;

  @SpeakeasyMetadata({
    elemType: CreateInvestorRootTypeForInvestorCreationRequestBankAccounts,
  })
  @Expose({ name: "bank_accounts" })
  @Type(() => CreateInvestorRootTypeForInvestorCreationRequestBankAccounts)
  bankAccounts?: CreateInvestorRootTypeForInvestorCreationRequestBankAccounts[];

  @SpeakeasyMetadata()
  @Expose({ name: "date_of_birth" })
  @Type(() => CreateInvestorRootTypeForInvestorCreationRequestDateOfBirth)
  dateOfBirth: CreateInvestorRootTypeForInvestorCreationRequestDateOfBirth;

  @SpeakeasyMetadata()
  @Expose({ name: "dealing_status" })
  dealingStatus?: CreateInvestorRootTypeForInvestorCreationRequestDealingStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * Status of an investor best describes their personal circumstances.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "employment_status" })
  employmentStatus?: CreateInvestorRootTypeForInvestorCreationRequestEmploymentStatusEnum;

  /**
   * Beneficiary and nominee list of the expression of wish.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expression_of_wish" })
  @Type(() => CreateInvestorRootTypeForInvestorCreationRequestExpressionOfWish)
  expressionOfWish?: CreateInvestorRootTypeForInvestorCreationRequestExpressionOfWish;

  @SpeakeasyMetadata()
  @Expose({ name: "first_name" })
  firstName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "gender" })
  gender?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "home_number" })
  homeNumber?: string;

  @SpeakeasyMetadata({
    elemType: CreateInvestorRootTypeForInvestorCreationRequestIdNumbers,
  })
  @Expose({ name: "id_numbers" })
  @Type(() => CreateInvestorRootTypeForInvestorCreationRequestIdNumbers)
  idNumbers?: CreateInvestorRootTypeForInvestorCreationRequestIdNumbers[];

  @SpeakeasyMetadata()
  @Expose({ name: "investor_id" })
  investorId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "kyc_aml_status" })
  kycAmlStatus?: CreateInvestorRootTypeForInvestorCreationRequestKycAmlStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "last_name" })
  lastName: string;

  /**
   * Additional details of the lifetime allowance protections of the investor.
   */
  @SpeakeasyMetadata({
    elemType:
      CreateInvestorRootTypeForInvestorCreationRequestLtaProtectionDetails,
  })
  @Expose({ name: "lta_protection_details" })
  @Type(
    () => CreateInvestorRootTypeForInvestorCreationRequestLtaProtectionDetails
  )
  ltaProtectionDetails?: CreateInvestorRootTypeForInvestorCreationRequestLtaProtectionDetails[];

  @SpeakeasyMetadata()
  @Expose({ name: "mifid_tax_id" })
  mifidTaxId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "mobile_number" })
  mobileNumber?: string;

  /**
   * Whether the investor has triggered the Money Purchase Annual Allowance.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mpaa_triggered" })
  mpaaTriggered?: boolean;

  /**
   * Date of triggering the Money Purchase Annual Allowance. This is only required if mpaa_triggered is true.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mpaa_triggered_date" })
  mpaaTriggeredDate?: string;

  /**
   * 3 character country code inline with ISO 3166-1 alpha-3
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nationality" })
  nationality: string;

  @SpeakeasyMetadata()
  @Expose({ name: "office_number" })
  officeNumber?: string;

  /**
   * Intended retirement age of the investor.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "retirement_age" })
  retirementAge?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "tax_id" })
  taxId: string;

  /**
   * Residence of the investor for tax purposes. (for example, to claim relief at source) GB-ENG=England GB-NIR=Northern Ireland GB-SCT=Scotland GB-WLS=Wales.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tax_residence" })
  taxResidence?: CreateInvestorRootTypeForInvestorCreationRequestTaxResidenceEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "tax_residency_compliant" })
  taxResidencyCompliant: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;
}

export class CreateInvestorRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateInvestorRootTypeForInvestorCreationRequestInput;

  /**
   * ApiSecretKey
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=x-api-key",
  })
  xApiKey: string;
}

/**
 * System error. Retry later. If the error persist, contact WOS support
 */
export class CreateInvestor500ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
 */
export class CreateInvestor429ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Your authentication information is missing or invalid. Please check the keys are properly set and its correct
 */
export class CreateInvestor403ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * You do not have permissions to access this resource.
 */
export class CreateInvestor401ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Request is not complete and may have one or more validations errors. Please check the error message and the code
 */
export class CreateInvestor400ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

export class CreateInvestorRootTypeForInvestorCreationResponseAddress extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "address_line" })
  addressLine?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city?: string;

  /**
   * 3 character country code inline with ISO 3166-1 alpha-3
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country: string;

  @SpeakeasyMetadata()
  @Expose({ name: "postal_code" })
  postalCode: string;

  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "street_name" })
  streetName?: string;
}

/**
 * If not populated, will be defaulted to inactive
 */
export enum CreateInvestorRootTypeForInvestorCreationResponseBankAccountsAccountStatusEnum {
  Active = "active",
  Inactive = "inactive",
}

/**
 * Only one account should be the default
 */
export enum CreateInvestorRootTypeForInvestorCreationResponseBankAccountsDefaultAccountEnum {
  Yes = "yes",
  No = "no",
}

export enum CreateInvestorRootTypeForInvestorCreationResponseBankAccountsStatusEnum {
  Failed = "failed",
  Success = "success",
}

export class CreateInvestorRootTypeForInvestorCreationResponseBankAccounts extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "account_name" })
  accountName: string;

  /**
   * If not populated, will be defaulted to inactive
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account_status" })
  accountStatus?: CreateInvestorRootTypeForInvestorCreationResponseBankAccountsAccountStatusEnum;

  /**
   * system generated id
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bank_account_id" })
  bankAccountId?: string;

  /**
   * Unique for the investor
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bank_account_number" })
  bankAccountNumber: string;

  @SpeakeasyMetadata()
  @Expose({ name: "building_society_roll_number" })
  buildingSocietyRollNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  /**
   * Only one account should be the default
   */
  @SpeakeasyMetadata()
  @Expose({ name: "default_account" })
  defaultAccount: CreateInvestorRootTypeForInvestorCreationResponseBankAccountsDefaultAccountEnum;

  /**
   * If the bank account creation failed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_message" })
  errorMessage?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "investor_id" })
  investorId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "reference_version" })
  referenceVersion?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "sort_code" })
  sortCode?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: CreateInvestorRootTypeForInvestorCreationResponseBankAccountsStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;
}

export class CreateInvestorRootTypeForInvestorCreationResponseDateOfBirth extends SpeakeasyBase {
  /**
   * two digit string `DD`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "day" })
  day?: string;

  /**
   * two digit string `MM`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "month" })
  month?: string;

  /**
   * four digit string `YYYY`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "year" })
  year?: string;
}

export enum CreateInvestorRootTypeForInvestorCreationResponseDealingStatusEnum {
  Inactive = "inactive",
  Active = "active",
}

export enum CreateInvestorRootTypeForInvestorCreationResponseEmploymentStatusEnum {
  Employed = "employed",
  SelfEmployed = "self_employed",
  Pensioner = "pensioner",
  ChildUnder16 = "child_under_16",
  InFullTimeEducation = "in_full_time_education",
  Unemployed = "unemployed",
  CaringForAPersonOver16 = "caring_for_a_person_over_16",
  CaringForAPersonUnder16 = "caring_for_a_person_under_16",
  Other = "other",
}

export class CreateInvestorRootTypeForInvestorCreationResponseExpressionOfWishSippBeneficiaries extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  address: string;

  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "first_name" })
  firstName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "last_name" })
  lastName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "percentage" })
  percentage: string;

  @SpeakeasyMetadata()
  @Expose({ name: "phone_number" })
  phoneNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tax_id" })
  taxId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;
}

export class CreateInvestorRootTypeForInvestorCreationResponseExpressionOfWishSippNominees extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  address: string;

  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "first_name" })
  firstName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "last_name" })
  lastName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "percentage" })
  percentage: string;

  @SpeakeasyMetadata()
  @Expose({ name: "phone_number" })
  phoneNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tax_id" })
  taxId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;
}

export class CreateInvestorRootTypeForInvestorCreationResponseExpressionOfWish extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType:
      CreateInvestorRootTypeForInvestorCreationResponseExpressionOfWishSippBeneficiaries,
  })
  @Expose({ name: "sipp_beneficiaries" })
  @Type(
    () =>
      CreateInvestorRootTypeForInvestorCreationResponseExpressionOfWishSippBeneficiaries
  )
  sippBeneficiaries?: CreateInvestorRootTypeForInvestorCreationResponseExpressionOfWishSippBeneficiaries[];

  @SpeakeasyMetadata({
    elemType:
      CreateInvestorRootTypeForInvestorCreationResponseExpressionOfWishSippNominees,
  })
  @Expose({ name: "sipp_nominees" })
  @Type(
    () =>
      CreateInvestorRootTypeForInvestorCreationResponseExpressionOfWishSippNominees
  )
  sippNominees?: CreateInvestorRootTypeForInvestorCreationResponseExpressionOfWishSippNominees[];
}

export class CreateInvestorRootTypeForInvestorCreationResponseIdNumbers extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id_number" })
  idNumber: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id_type" })
  idType: string;
}

export enum CreateInvestorRootTypeForInvestorCreationResponseKycAmlStatusEnum {
  Submitted = "submitted",
  KycFailedError = "kyc_failed_error",
  Pending = "pending",
  Clear = "clear",
  NotStarted = "not_started",
}

export enum CreateInvestorRootTypeForInvestorCreationResponseLtaProtectionDetailsLtaProtectionTypeEnum {
  Primary = "primary",
  Enhanced = "enhanced",
  Fp12 = "fp12",
  Fp14 = "fp14",
  Ip14 = "ip14",
  Fp16 = "fp16",
  Ip16 = "ip16",
}

export class CreateInvestorRootTypeForInvestorCreationResponseLtaProtectionDetails extends SpeakeasyBase {
  /**
   * Required when the lta_protection_type is ip14 or ip16.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lta_individual_protection_amount" })
  ltaIndividualProtectionAmount?: string;

  /**
   * Required only when the lta_protection_type is primary
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lta_primary_protection_factor" })
  ltaPrimaryProtectionFactor?: string;

  /**
   * Required when the lta_protection_type is fp14 or ip16.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lta_protection_notification_number" })
  ltaProtectionNotificationNumber?: string;

  /**
   * Required when the lta_protection_type is fp14 or ip16.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lta_protection_scheme_administrator_reference" })
  ltaProtectionSchemeAdministratorReference?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "lta_protection_type" })
  ltaProtectionType: CreateInvestorRootTypeForInvestorCreationResponseLtaProtectionDetailsLtaProtectionTypeEnum;
}

export enum CreateInvestorRootTypeForInvestorCreationResponseStatusEnum {
  KycPending = "kyc_pending",
  KycFailed = "kyc_failed",
  Inactive = "inactive",
  Active = "active",
}

/**
 * Residence of the investor for tax purposes. (for example, to claim relief at source) GB-ENG=England GB-NIR=Northern Ireland GB-SCT=Scotland GB-WLS=Wales
 */
export enum CreateInvestorRootTypeForInvestorCreationResponseTaxResidenceEnum {
  GbEng = "GB-ENG",
  GbNir = "GB-NIR",
  GbSct = "GB-SCT",
  GbWls = "GB-WLS",
}

/**
 * JSON for the Investor creation response resource type
 */
export class CreateInvestorRootTypeForInvestorCreationResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  @Type(() => CreateInvestorRootTypeForInvestorCreationResponseAddress)
  address: CreateInvestorRootTypeForInvestorCreationResponseAddress;

  @SpeakeasyMetadata({
    elemType: CreateInvestorRootTypeForInvestorCreationResponseBankAccounts,
  })
  @Expose({ name: "bank_accounts" })
  @Type(() => CreateInvestorRootTypeForInvestorCreationResponseBankAccounts)
  bankAccounts?: CreateInvestorRootTypeForInvestorCreationResponseBankAccounts[];

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "date_of_birth" })
  @Type(() => CreateInvestorRootTypeForInvestorCreationResponseDateOfBirth)
  dateOfBirth: CreateInvestorRootTypeForInvestorCreationResponseDateOfBirth;

  @SpeakeasyMetadata()
  @Expose({ name: "dealing_status" })
  dealingStatus?: CreateInvestorRootTypeForInvestorCreationResponseDealingStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "employment_status" })
  employmentStatus?: CreateInvestorRootTypeForInvestorCreationResponseEmploymentStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "expression_of_wish" })
  @Type(() => CreateInvestorRootTypeForInvestorCreationResponseExpressionOfWish)
  expressionOfWish?: CreateInvestorRootTypeForInvestorCreationResponseExpressionOfWish;

  @SpeakeasyMetadata()
  @Expose({ name: "first_name" })
  firstName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "gender" })
  gender?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "home_number" })
  homeNumber?: string;

  @SpeakeasyMetadata({
    elemType: CreateInvestorRootTypeForInvestorCreationResponseIdNumbers,
  })
  @Expose({ name: "id_numbers" })
  @Type(() => CreateInvestorRootTypeForInvestorCreationResponseIdNumbers)
  idNumbers?: CreateInvestorRootTypeForInvestorCreationResponseIdNumbers[];

  @SpeakeasyMetadata()
  @Expose({ name: "investor_id" })
  investorId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "kyc_aml_status" })
  kycAmlStatus?: CreateInvestorRootTypeForInvestorCreationResponseKycAmlStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "kyc_aml_status_last_updated" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  kycAmlStatusLastUpdated?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "last_name" })
  lastName: string;

  @SpeakeasyMetadata({
    elemType:
      CreateInvestorRootTypeForInvestorCreationResponseLtaProtectionDetails,
  })
  @Expose({ name: "lta_protection_details" })
  @Type(
    () => CreateInvestorRootTypeForInvestorCreationResponseLtaProtectionDetails
  )
  ltaProtectionDetails?: CreateInvestorRootTypeForInvestorCreationResponseLtaProtectionDetails[];

  @SpeakeasyMetadata()
  @Expose({ name: "mifid_tax_id" })
  mifidTaxId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "mobile_number" })
  mobileNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "mpaa_triggered" })
  mpaaTriggered?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "mpaa_triggered_date" })
  mpaaTriggeredDate?: string;

  /**
   * 3 character country code inline with ISO 3166-1 alpha-3
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nationality" })
  nationality: string;

  @SpeakeasyMetadata()
  @Expose({ name: "office_number" })
  officeNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "reference_version" })
  referenceVersion?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "retirement_age" })
  retirementAge?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: CreateInvestorRootTypeForInvestorCreationResponseStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "tax_id" })
  taxId: string;

  /**
   * Residence of the investor for tax purposes. (for example, to claim relief at source) GB-ENG=England GB-NIR=Northern Ireland GB-SCT=Scotland GB-WLS=Wales
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tax_residence" })
  taxResidence?: CreateInvestorRootTypeForInvestorCreationResponseTaxResidenceEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "tax_residency_compliant" })
  taxResidencyCompliant: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;
}

export class CreateInvestorResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Resource created
   */
  @SpeakeasyMetadata()
  rootTypeForInvestorCreationResponse?: CreateInvestorRootTypeForInvestorCreationResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Request is not complete and may have one or more validations errors. Please check the error message and the code
   */
  @SpeakeasyMetadata()
  createInvestor400ApplicationJSONObject?: CreateInvestor400ApplicationJSON;

  /**
   * You do not have permissions to access this resource.
   */
  @SpeakeasyMetadata()
  createInvestor401ApplicationJSONObject?: CreateInvestor401ApplicationJSON;

  /**
   * Your authentication information is missing or invalid. Please check the keys are properly set and its correct
   */
  @SpeakeasyMetadata()
  createInvestor403ApplicationJSONObject?: CreateInvestor403ApplicationJSON;

  /**
   * You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
   */
  @SpeakeasyMetadata()
  createInvestor429ApplicationJSONObject?: CreateInvestor429ApplicationJSON;

  /**
   * System error. Retry later. If the error persist, contact WOS support
   */
  @SpeakeasyMetadata()
  createInvestor500ApplicationJSONObject?: CreateInvestor500ApplicationJSON;
}
