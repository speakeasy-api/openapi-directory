// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UnliWithoutApplicationnkApplicationSecurity struct {
	BasicAuth  *shared.SchemeBasicAuth `security:"scheme,type=http,subtype=basic"`
	BearerAuth *string                 `security:"scheme,type=http,subtype=bearer,name=Authorization"`
}

// UnliWithoutApplicationnkApplicationProviderEnum - Provider of the account you want to unlink an application from
type UnliWithoutApplicationnkApplicationProviderEnum string

const (
	UnliWithoutApplicationnkApplicationProviderEnumMessenger       UnliWithoutApplicationnkApplicationProviderEnum = "messenger"
	UnliWithoutApplicationnkApplicationProviderEnumViberServiceMsg UnliWithoutApplicationnkApplicationProviderEnum = "viber_service_msg"
	UnliWithoutApplicationnkApplicationProviderEnumWhatsapp        UnliWithoutApplicationnkApplicationProviderEnum = "whatsapp"
)

func (e *UnliWithoutApplicationnkApplicationProviderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "messenger":
		fallthrough
	case "viber_service_msg":
		fallthrough
	case "whatsapp":
		*e = UnliWithoutApplicationnkApplicationProviderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UnliWithoutApplicationnkApplicationProviderEnum: %s", s)
	}
}

type UnliWithoutApplicationnkApplicationRequest struct {
	// Id of the application you want to unlink
	ApplicationID string `pathParam:"style=simple,explode=false,name=application_id"`
	// External id of the account you want to unlink an application from
	ExternalID string `pathParam:"style=simple,explode=false,name=external_id"`
	// Provider of the account you want to unlink an application from
	Provider UnliWithoutApplicationnkApplicationProviderEnum `pathParam:"style=simple,explode=false,name=provider"`
}

// UnliWithoutApplicationnkApplication409ApplicationJSON - Conflict.
type UnliWithoutApplicationnkApplication409ApplicationJSON struct {
	// The application is not linked or doesn't exist.
	Detail *string `json:"detail,omitempty"`
	Title  *string `json:"title,omitempty"`
	Type   *string `json:"type,omitempty"`
}

// UnliWithoutApplicationnkApplication403ApplicationJSON - Forbidden.
type UnliWithoutApplicationnkApplication403ApplicationJSON struct {
	Detail *string `json:"detail,omitempty"`
	Title  *string `json:"title,omitempty"`
	Type   *string `json:"type,omitempty"`
}

type UnliWithoutApplicationnkApplicationResponse struct {
	// Unauthorized.
	FourHundredAndOneResponse *shared.FourHundredAndOneResponse
	ContentType               string
	StatusCode                int
	RawResponse               *http.Response
	// Forbidden.
	UnliWithoutApplicationnkApplication403ApplicationJSONObject *UnliWithoutApplicationnkApplication403ApplicationJSON
	// Conflict.
	UnliWithoutApplicationnkApplication409ApplicationJSONObject *UnliWithoutApplicationnkApplication409ApplicationJSON
}
