"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import batchdisassociateapprovalruletemplatefromrepositoriesinput as shared_batchdisassociateapprovalruletemplatefromrepositoriesinput
from ..shared import batchdisassociateapprovalruletemplatefromrepositoriesoutput as shared_batchdisassociateapprovalruletemplatefromrepositoriesoutput
from enum import Enum
from typing import Any, Optional

class BatchDisassociateApprovalRuleTemplateFromRepositoriesXAmzTargetEnum(str, Enum):
    CODE_COMMIT_20150413_BATCH_DISASSOCIATE_APPROVAL_RULE_TEMPLATE_FROM_REPOSITORIES = 'CodeCommit_20150413.BatchDisassociateApprovalRuleTemplateFromRepositories'


@dataclasses.dataclass
class BatchDisassociateApprovalRuleTemplateFromRepositoriesRequest:
    
    batch_disassociate_approval_rule_template_from_repositories_input: shared_batchdisassociateapprovalruletemplatefromrepositoriesinput.BatchDisassociateApprovalRuleTemplateFromRepositoriesInput = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: BatchDisassociateApprovalRuleTemplateFromRepositoriesXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class BatchDisassociateApprovalRuleTemplateFromRepositoriesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    approval_rule_template_does_not_exist_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ApprovalRuleTemplateDoesNotExistException"""  
    approval_rule_template_name_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ApprovalRuleTemplateNameRequiredException"""  
    batch_disassociate_approval_rule_template_from_repositories_output: Optional[shared_batchdisassociateapprovalruletemplatefromrepositoriesoutput.BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput] = dataclasses.field(default=None)
    r"""Success"""  
    encryption_integrity_checks_failed_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionIntegrityChecksFailedException"""  
    encryption_key_access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionKeyAccessDeniedException"""  
    encryption_key_disabled_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionKeyDisabledException"""  
    encryption_key_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionKeyNotFoundException"""  
    encryption_key_unavailable_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionKeyUnavailableException"""  
    invalid_approval_rule_template_name_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidApprovalRuleTemplateNameException"""  
    maximum_repository_names_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""MaximumRepositoryNamesExceededException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    repository_names_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""RepositoryNamesRequiredException"""  
    