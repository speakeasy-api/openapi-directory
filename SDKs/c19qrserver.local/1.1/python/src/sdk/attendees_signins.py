"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class AttendeesSignins:
    r"""Endpoints related to attendees signing in on the premises"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_signin_signin_id_(self, request: operations.DeleteSigninSigninIDRequest) -> operations.DeleteSigninSigninIDResponse:
        r"""Delete a signin record
        Delete a signin record
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSigninSigninIDRequest, base_url, '/signin/{signinId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSigninSigninIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvalidToken])
                res.invalid_token = out

        return res

    def get_signin_signin_id_(self, request: operations.GetSigninSigninIDRequest) -> operations.GetSigninSigninIDResponse:
        r"""Retrieve the information associated with a signin record
        Retrieve the information associated with a signin record
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSigninSigninIDRequest, base_url, '/signin/{signinId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSigninSigninIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Signin])
                res.signin = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvalidToken])
                res.invalid_token = out

        return res

    def get_signins(self, request: operations.GetSigninsRequest) -> operations.GetSigninsResponse:
        r"""Get signin info
        Returns a list of signin objects sorted by signin ID descending.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/signins'
        
        query_params = utils.get_query_params(operations.GetSigninsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSigninsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Signin]])
                res.signins = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvalidToken])
                res.invalid_token = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.KeyFailure])
                res.key_failure = out

        return res

    def post_signin(self, request: shared.Signin) -> operations.PostSigninResponse:
        r"""Create a new signin record"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/signin'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSigninResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SigninResponse])
                res.signin_response = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvalidToken])
                res.invalid_token = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.KeyFailure])
                res.key_failure = out

        return res

    def put_signin_signin_id_(self, request: operations.PutSigninSigninIDRequest) -> operations.PutSigninSigninIDResponse:
        r"""Update a signin record
        Update a signin record
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutSigninSigninIDRequest, base_url, '/signin/{signinId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "signin", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutSigninSigninIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserRecord])
                res.user_record = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvalidToken])
                res.invalid_token = out

        return res

    