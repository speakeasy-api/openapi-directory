// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DscerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type DscerRequestBodyCertificateParameters struct {
	// Application Number
	Aplno string `json:"aplno"`
	// Certificate Number
	Certno string `json:"certno"`
	// Security Code
	Sccd string `json:"sccd"`
}

// DscerRequestBodyFormatEnum - The format of the certificate in response.
type DscerRequestBodyFormatEnum string

const (
	DscerRequestBodyFormatEnumPdf DscerRequestBodyFormatEnum = "pdf"
)

func (e DscerRequestBodyFormatEnum) ToPointer() *DscerRequestBodyFormatEnum {
	return &e
}

func (e *DscerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = DscerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DscerRequestBodyFormatEnum: %v", v)
	}
}

// DscerRequestBody - Request format
type DscerRequestBody struct {
	CertificateParameters *DscerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format DscerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Dscer504ApplicationJSONErrorEnum string

const (
	Dscer504ApplicationJSONErrorEnumGatewayTimeout Dscer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Dscer504ApplicationJSONErrorEnum) ToPointer() *Dscer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Dscer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Dscer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dscer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Dscer504ApplicationJSONErrorDescriptionEnum string

const (
	Dscer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Dscer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Dscer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Dscer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dscer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Dscer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dscer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dscer504ApplicationJSON - Gateway timeout
type Dscer504ApplicationJSON struct {
	Error            *Dscer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dscer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dscer503ApplicationJSONErrorEnum string

const (
	Dscer503ApplicationJSONErrorEnumServiceUnavailable Dscer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Dscer503ApplicationJSONErrorEnum) ToPointer() *Dscer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Dscer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Dscer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dscer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Dscer503ApplicationJSONErrorDescriptionEnum string

const (
	Dscer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Dscer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Dscer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Dscer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dscer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Dscer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dscer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dscer503ApplicationJSON - Service unavailable
type Dscer503ApplicationJSON struct {
	Error            *Dscer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dscer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dscer502ApplicationJSONErrorEnum string

const (
	Dscer502ApplicationJSONErrorEnumBadGatewy Dscer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Dscer502ApplicationJSONErrorEnum) ToPointer() *Dscer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Dscer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Dscer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dscer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Dscer502ApplicationJSONErrorDescriptionEnum string

const (
	Dscer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Dscer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Dscer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Dscer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dscer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Dscer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dscer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dscer502ApplicationJSON - Bad gateway
type Dscer502ApplicationJSON struct {
	Error            *Dscer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dscer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dscer500ApplicationJSONErrorEnum string

const (
	Dscer500ApplicationJSONErrorEnumInternalServerError Dscer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Dscer500ApplicationJSONErrorEnum) ToPointer() *Dscer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Dscer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Dscer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dscer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Dscer500ApplicationJSONErrorDescriptionEnum string

const (
	Dscer500ApplicationJSONErrorDescriptionEnumInternalServerError Dscer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Dscer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Dscer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dscer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Dscer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dscer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dscer500ApplicationJSON - Internal server error
type Dscer500ApplicationJSON struct {
	Error            *Dscer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dscer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dscer404ApplicationJSONErrorEnum string

const (
	Dscer404ApplicationJSONErrorEnumRecordNotFound Dscer404ApplicationJSONErrorEnum = "record_not_found"
	Dscer404ApplicationJSONErrorEnumURLNotFound    Dscer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Dscer404ApplicationJSONErrorEnum) ToPointer() *Dscer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Dscer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Dscer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dscer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Dscer404ApplicationJSONErrorDescriptionEnum string

const (
	Dscer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Dscer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Dscer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Dscer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Dscer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Dscer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dscer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Dscer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dscer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dscer404ApplicationJSON - No record found
type Dscer404ApplicationJSON struct {
	Error            *Dscer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dscer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dscer401ApplicationJSONErrorEnum string

const (
	Dscer401ApplicationJSONErrorEnumInvalidAuthentication Dscer401ApplicationJSONErrorEnum = "invalid_authentication"
	Dscer401ApplicationJSONErrorEnumInvalidAuthorization  Dscer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Dscer401ApplicationJSONErrorEnum) ToPointer() *Dscer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Dscer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Dscer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dscer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Dscer401ApplicationJSONErrorDescriptionEnum string

const (
	Dscer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Dscer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Dscer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Dscer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Dscer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Dscer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dscer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Dscer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dscer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dscer401ApplicationJSON - Unauthorized access
type Dscer401ApplicationJSON struct {
	Error            *Dscer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dscer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dscer400ApplicationJSONErrorEnum string

const (
	Dscer400ApplicationJSONErrorEnumMissingParameter Dscer400ApplicationJSONErrorEnum = "missing_parameter"
	Dscer400ApplicationJSONErrorEnumInvalidParameter Dscer400ApplicationJSONErrorEnum = "invalid_parameter"
	Dscer400ApplicationJSONErrorEnumInvalidFormat    Dscer400ApplicationJSONErrorEnum = "invalid_format"
	Dscer400ApplicationJSONErrorEnumInvalidTxnid     Dscer400ApplicationJSONErrorEnum = "invalid_txnid"
	Dscer400ApplicationJSONErrorEnumInvalidConsentid Dscer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Dscer400ApplicationJSONErrorEnum) ToPointer() *Dscer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Dscer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Dscer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dscer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Dscer400ApplicationJSONErrorDescriptionEnum string

const (
	Dscer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Dscer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Dscer400ApplicationJSONErrorDescriptionEnumBadRequest                              Dscer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Dscer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Dscer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Dscer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Dscer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Dscer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Dscer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Dscer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Dscer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dscer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Dscer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dscer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dscer400ApplicationJSON - Bad request
type Dscer400ApplicationJSON struct {
	Error            *Dscer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dscer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type DscerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Dscer400ApplicationJSONObject *Dscer400ApplicationJSON
	// Unauthorized access
	Dscer401ApplicationJSONObject *Dscer401ApplicationJSON
	// No record found
	Dscer404ApplicationJSONObject *Dscer404ApplicationJSON
	// Internal server error
	Dscer500ApplicationJSONObject *Dscer500ApplicationJSON
	// Bad gateway
	Dscer502ApplicationJSONObject *Dscer502ApplicationJSON
	// Service unavailable
	Dscer503ApplicationJSONObject *Dscer503ApplicationJSON
	// Gateway timeout
	Dscer504ApplicationJSONObject *Dscer504ApplicationJSON
}
