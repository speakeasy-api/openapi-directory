"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PreprintsCreatePreprintAttributesInput:
    r"""The properties of the preprint entity."""
    
    doi: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doi'), 'exclude': lambda f: f is None }})
    r"""The DOI of the associated journal article, as entered by the user, if the preprint is published."""  
    license_record: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('license_record'), 'exclude': lambda f: f is None }})
    r"""The metadata (copyright year and holder) associated with a license, required for certain licenses."""  
    subjects: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subjects'), 'exclude': lambda f: f is None }})
    r"""A nested array structure that describe subjects related to the preprint, in the BePress taxonomy. Each dictionary contains the text and ID of a subject."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PreprintsCreatePreprintRelationshipsInput:
    r"""URLs to other entities or entity collections that have a relationship to the preprint entity."""
    
    node: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('node') }})
    r"""A relationship to the node that was created for the preprint, or from which the preprint was created."""  
    primary_file: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_file') }})
    r"""A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."""  
    provider: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provider') }})
    r"""A relationship to the preprint provider under which the preprint was created (OSF, socarxiv, psyarxiv, etc.)."""  
    bibliographic_contributors: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bibliographic_contributors'), 'exclude': lambda f: f is None }})
    r"""A relationship to the bibliographic contributors that are listed as contributing to this preprint."""  
    license: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('license'), 'exclude': lambda f: f is None }})
    r"""A relationship to the license that has been applied to the preprint."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PreprintsCreatePreprintInput:
    
    relationships: PreprintsCreatePreprintRelationshipsInput = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships') }})
    r"""URLs to other entities or entity collections that have a relationship to the preprint entity."""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type identifier of the preprint entity (`preprints`)."""  
    attributes: Optional[PreprintsCreatePreprintAttributesInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})
    r"""The properties of the preprint entity."""  
    

@dataclasses.dataclass
class PreprintsCreateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    