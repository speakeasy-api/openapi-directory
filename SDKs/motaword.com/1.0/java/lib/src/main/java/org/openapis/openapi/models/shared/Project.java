/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Project - Newly created project
 */
public class Project {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("average_scores")
    public java.util.Map<String, Float> averageScores;

    public Project withAverageScores(java.util.Map<String, Float> averageScores) {
        this.averageScores = averageScores;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("budget_code")
    public String budgetCode;

    public Project withBudgetCode(String budgetCode) {
        this.budgetCode = budgetCode;
        return this;
    }
    
    /**
     * Callback URL to notify when project status changed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callback_url")
    public String callbackUrl;

    public Project withCallbackUrl(String callbackUrl) {
        this.callbackUrl = callbackUrl;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("can_pam_manage")
    public Boolean canPamManage;

    public Project withCanPamManage(Boolean canPamManage) {
        this.canPamManage = canPamManage;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client")
    public User client;

    public Project withClient(User client) {
        this.client = client;
        return this;
    }
    
    /**
     * Assigned admin's id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cm_id")
    public Long cmId;

    public Project withCmId(Long cmId) {
        this.cmId = cmId;
        return this;
    }
    
    /**
     * the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("completed_on")
    public OffsetDateTime completedOn;

    public Project withCompletedOn(OffsetDateTime completedOn) {
        this.completedOn = completedOn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("continuous_project_type")
    public String continuousProjectType;

    public Project withContinuousProjectType(String continuousProjectType) {
        this.continuousProjectType = continuousProjectType;
        return this;
    }
    
    /**
     * Unix epoch time
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    public Long createdAt;

    public Project withCreatedAt(Long createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Custom data provided while creating a new project.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom")
    public java.util.Map<String, Object> custom;

    public Project withCustom(java.util.Map<String, Object> custom) {
        this.custom = custom;
        return this;
    }
    
    /**
     * Unix epoch time
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delivery_at")
    public Long deliveryAt;

    public Project withDeliveryAt(Long deliveryAt) {
        this.deliveryAt = deliveryAt;
        return this;
    }
    
    /**
     * A list of errors. Visible when creating a project and uploading your documents at the same time, in case of multiple errors.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errors")
    public Error[] errors;

    public Project withErrors(Error[] errors) {
        this.errors = errors;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;

    public Project withId(Long id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_api_project")
    public Boolean isApiProject;

    public Project withIsApiProject(Boolean isApiProject) {
        this.isApiProject = isApiProject;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_certified")
    public Boolean isCertified;

    public Project withIsCertified(Boolean isCertified) {
        this.isCertified = isCertified;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_continuous")
    public Boolean isContinuous;

    public Project withIsContinuous(Boolean isContinuous) {
        this.isContinuous = isContinuous;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_manual")
    public Boolean isManual;

    public Project withIsManual(Boolean isManual) {
        this.isManual = isManual;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("links")
    public ProjectLinks links;

    public Project withLinks(ProjectLinks links) {
        this.links = links;
        return this;
    }
    
    /**
     * Currently authed vendor's available working language pairs in this project. Includes rates per language pair. Includes complex pair logic such as bilingualism, project reverse pair enforcement etc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pairs")
    public VendorProjectPair[] pairs;

    public Project withPairs(VendorProjectPair[] pairs) {
        this.pairs = pairs;
        return this;
    }
    
    /**
     * Quote IDs of pivots
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pivoted_projects")
    public Long[] pivotedProjects;

    public Project withPivotedProjects(Long[] pivotedProjects) {
        this.pivotedProjects = pivotedProjects;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price")
    public ProjectPrice price;

    public Project withPrice(ProjectPrice price) {
        this.price = price;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price_without_discount")
    public ProjectPriceWithoutDiscount priceWithoutDiscount;

    public Project withPriceWithoutDiscount(ProjectPriceWithoutDiscount priceWithoutDiscount) {
        this.priceWithoutDiscount = priceWithoutDiscount;
        return this;
    }
    
    /**
     * Currently authed vendor's role in this project. If vendor has already joined, this contains the role they joined the project with. If not joined yet, this is the role that they can join the project with.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("role")
    public VendorProjectRoleEnum role;

    public Project withRole(VendorProjectRoleEnum role) {
        this.role = role;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("should_send_client_survey")
    public Boolean shouldSendClientSurvey;

    public Project withShouldSendClientSurvey(Boolean shouldSendClientSurvey) {
        this.shouldSendClientSurvey = shouldSendClientSurvey;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    public ProjectSourceEnum source;

    public Project withSource(ProjectSourceEnum source) {
        this.source = source;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_language")
    public String sourceLanguage;

    public Project withSourceLanguage(String sourceLanguage) {
        this.sourceLanguage = sourceLanguage;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public ProjectStatusEnum status;

    public Project withStatus(ProjectStatusEnum status) {
        this.status = status;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subjects")
    public String[] subjects;

    public Project withSubjects(String[] subjects) {
        this.subjects = subjects;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_languages")
    public String[] targetLanguages;

    public Project withTargetLanguages(String[] targetLanguages) {
        this.targetLanguages = targetLanguages;
        return this;
    }
    
    /**
     * TMS project name for this MW project. Requires privileged scope.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tms_name")
    public String tmsName;

    public Project withTmsName(String tmsName) {
        this.tmsName = tmsName;
        return this;
    }
    
    /**
     * Unix epoch time. Available only if status is `pending`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("valid_until")
    public Long validUntil;

    public Project withValidUntil(Long validUntil) {
        this.validUntil = validUntil;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vendor_word_count")
    public Long vendorWordCount;

    public Project withVendorWordCount(Long vendorWordCount) {
        this.vendorWordCount = vendorWordCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("word_count")
    public Long wordCount;

    public Project withWordCount(Long wordCount) {
        this.wordCount = wordCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("word_count_analysis")
    public ProjectWordCountAnalysis wordCountAnalysis;

    public Project withWordCountAnalysis(ProjectWordCountAnalysis wordCountAnalysis) {
        this.wordCountAnalysis = wordCountAnalysis;
        return this;
    }
    
    public Project(){}
}
