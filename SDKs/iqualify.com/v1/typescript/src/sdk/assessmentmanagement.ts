/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class AssessmentManagement {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Remove assessment document
   *
   * @remarks
   * Removes the assessment document file for a specified assessment in an offering.
   */
  deleteOfferingsOfferingIdAssessmentsAssessmentIdDocumentsDocumentId(
    req: operations.DeleteOfferingsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteOfferingsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DeleteOfferingsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/offerings/{offeringId}/assessments/{assessmentId}/documents/{documentId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteOfferingsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdResponse =
        new operations.DeleteOfferingsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Reset user's assessment to draft state
   *
   * @remarks
   * Resets the user's submitted assessment to a draft state.
   */
  deleteOfferingsOfferingIdUsersUserEmailAssessmentsAssessmentId(
    req: operations.DeleteOfferingsOfferingIdUsersUserEmailAssessmentsAssessmentIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteOfferingsOfferingIdUsersUserEmailAssessmentsAssessmentIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DeleteOfferingsOfferingIdUsersUserEmailAssessmentsAssessmentIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/offerings/{offeringId}/users/{userEmail}/assessments/{assessmentId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteOfferingsOfferingIdUsersUserEmailAssessmentsAssessmentIdResponse =
        new operations.DeleteOfferingsOfferingIdUsersUserEmailAssessmentsAssessmentIdResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find offering's activities
   *
   * @remarks
   * Responds with the activities in a specific offering.
   */
  getOfferingsOfferingIdActivitiesOpenresponse(
    req: operations.GetOfferingsOfferingIdActivitiesOpenresponseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOfferingsOfferingIdActivitiesOpenresponseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetOfferingsOfferingIdActivitiesOpenresponseRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/offerings/{offeringId}/activities/openresponse",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOfferingsOfferingIdActivitiesOpenresponseResponse =
        new operations.GetOfferingsOfferingIdActivitiesOpenresponseResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.offeringActivitiesResponses = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.offeringActivitiesResponses = utils.objectToClass(
              httpRes?.data,
              shared.OfferingActivitiesResponse,
              resFieldDepth
            );
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find offering's assessments
   *
   * @remarks
   * Responds with all assessments in an offering matching the offeringId.
   */
  getOfferingsOfferingIdAssessments(
    req: operations.GetOfferingsOfferingIdAssessmentsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOfferingsOfferingIdAssessmentsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetOfferingsOfferingIdAssessmentsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/offerings/{offeringId}/assessments",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOfferingsOfferingIdAssessmentsResponse =
        new operations.GetOfferingsOfferingIdAssessmentsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.assessmentResponses = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.assessmentResponses = utils.objectToClass(
              httpRes?.data,
              shared.AssessmentResponse,
              resFieldDepth
            );
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find learners with assessments pending x days before due date within the specified offeringId
   *
   * @remarks
   * Responds with learners who have one or more assessments due x days before the due date, with each assessment that is due, where x = the number of days specified in the request. The default is 3 days.
   */
  getOfferingsOfferingIdLearnersPendingSubmission(
    req: operations.GetOfferingsOfferingIdLearnersPendingSubmissionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOfferingsOfferingIdLearnersPendingSubmissionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetOfferingsOfferingIdLearnersPendingSubmissionRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/offerings/{offeringId}/learners/pending-submission",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOfferingsOfferingIdLearnersPendingSubmissionResponse =
        new operations.GetOfferingsOfferingIdLearnersPendingSubmissionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.assessmentPendingSubmissions = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.assessmentPendingSubmissions = utils.objectToClass(
              httpRes?.data,
              shared.AssessmentPendingSubmission,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find learner's open response assessment submissions
   *
   * @remarks
   * Responds with open response assessment submissions by a learner in an offering.
   */
  getOfferingsOfferingIdUsersUserEmailSubmissionsOpenResponse(
    req: operations.GetOfferingsOfferingIdUsersUserEmailSubmissionsOpenResponseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOfferingsOfferingIdUsersUserEmailSubmissionsOpenResponseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetOfferingsOfferingIdUsersUserEmailSubmissionsOpenResponseRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/offerings/{offeringId}/users/{userEmail}/submissions/open-response",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOfferingsOfferingIdUsersUserEmailSubmissionsOpenResponseResponse =
        new operations.GetOfferingsOfferingIdUsersUserEmailSubmissionsOpenResponseResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.assignments = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.assignments = utils.objectToClass(
              httpRes?.data,
              shared.Assignments,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update assessment details
   *
   * @remarks
   * Updates the assessment details for a specified assessment in an offering.
   */
  patchOfferingsOfferingIdAssessmentsAssessmentId(
    req: operations.PatchOfferingsOfferingIdAssessmentsAssessmentIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchOfferingsOfferingIdAssessmentsAssessmentIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PatchOfferingsOfferingIdAssessmentsAssessmentIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/offerings/{offeringId}/assessments/{assessmentId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "assessment",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchOfferingsOfferingIdAssessmentsAssessmentIdResponse =
        new operations.PatchOfferingsOfferingIdAssessmentsAssessmentIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.assessmentResponse = utils.objectToClass(
              httpRes?.data,
              shared.AssessmentResponse
            );
          }
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update the due dates for a learner's quiz attempt
   *
   * @remarks
   * Updates the due dates for a learner's quiz attempt specified by the assessmentId.
   */
  patchOfferingsOfferingIdAssessmentsAssessmentIdUserEmail(
    req: operations.PatchOfferingsOfferingIdAssessmentsAssessmentIdUserEmailRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchOfferingsOfferingIdAssessmentsAssessmentIdUserEmailResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PatchOfferingsOfferingIdAssessmentsAssessmentIdUserEmailRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/offerings/{offeringId}/assessments/{assessmentId}/{userEmail}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchOfferingsOfferingIdAssessmentsAssessmentIdUserEmailResponse =
        new operations.PatchOfferingsOfferingIdAssessmentsAssessmentIdUserEmailResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }
}
