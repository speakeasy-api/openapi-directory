// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// QueryVcenterSnappableStatusEnum - Determines whether to fetch vCenters with additional privilege checks.
type QueryVcenterSnappableStatusEnum string

const (
	QueryVcenterSnappableStatusEnumProtectable QueryVcenterSnappableStatusEnum = "Protectable"
)

func (e QueryVcenterSnappableStatusEnum) ToPointer() *QueryVcenterSnappableStatusEnum {
	return &e
}

func (e *QueryVcenterSnappableStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Protectable":
		*e = QueryVcenterSnappableStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryVcenterSnappableStatusEnum: %v", v)
	}
}

type QueryVcenterRequest struct {
	// Don't ping vCenters for connection status. The connection_status field in the response is unusable.
	IgnoreConnectionStatus *bool `queryParam:"style=form,explode=true,name=ignore_connection_status"`
	// Limits the information to the Rubrik cluster specified by the value of primary_cluster_id. Use 'local' for the Rubrik cluster that is hosting the current REST API session.
	PrimaryClusterID *string `queryParam:"style=form,explode=true,name=primary_cluster_id"`
	// Determines whether to fetch vCenters with additional privilege checks.
	SnappableStatus *QueryVcenterSnappableStatusEnum `queryParam:"style=form,explode=true,name=snappable_status"`
}

type QueryVcenterResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Summary information for managed vCenters.
	VcenterSummaryListResponse *shared.VcenterSummaryListResponse
}
