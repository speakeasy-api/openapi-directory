// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

// AccountBalances - The Account's balances in the minor unit of its currency. For dollars, for example, these values will represent cents.
type AccountBalances struct {
	// The Account's available balance, representing the current balance less any open Pending Transactions on the Account.
	AvailableBalance int64 `json:"available_balance"`
	// The Account's current balance, representing the sum of all posted Transactions on the Account.
	CurrentBalance int64 `json:"current_balance"`
}

// AccountCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Account currency.
type AccountCurrencyEnum string

const (
	AccountCurrencyEnumCad AccountCurrencyEnum = "CAD"
	AccountCurrencyEnumChf AccountCurrencyEnum = "CHF"
	AccountCurrencyEnumEur AccountCurrencyEnum = "EUR"
	AccountCurrencyEnumGbp AccountCurrencyEnum = "GBP"
	AccountCurrencyEnumJpy AccountCurrencyEnum = "JPY"
	AccountCurrencyEnumUsd AccountCurrencyEnum = "USD"
)

func (e *AccountCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = AccountCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountCurrencyEnum: %s", s)
	}
}

// AccountStatusEnum - The status of the Account.
type AccountStatusEnum string

const (
	AccountStatusEnumOpen   AccountStatusEnum = "open"
	AccountStatusEnumClosed AccountStatusEnum = "closed"
)

func (e *AccountStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "open":
		fallthrough
	case "closed":
		*e = AccountStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountStatusEnum: %s", s)
	}
}

// AccountTypeEnum - A constant representing the object's type. For this resource it will always be `account`.
type AccountTypeEnum string

const (
	AccountTypeEnumAccount AccountTypeEnum = "account"
)

func (e *AccountTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "account":
		*e = AccountTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountTypeEnum: %s", s)
	}
}

// Account - Accounts are your bank accounts with Increase. They store money, receive transfers, and send payments. They earn interest and have depository insurance.
type Account struct {
	// The Account's balances in the minor unit of its currency. For dollars, for example, these values will represent cents.
	Balances AccountBalances `json:"balances"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account was created.
	CreatedAt time.Time `json:"created_at"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Account currency.
	Currency AccountCurrencyEnum `json:"currency"`
	// The identifier for the Entity the Account belongs to.
	EntityID string `json:"entity_id"`
	// The Account identifier.
	ID string `json:"id"`
	// The identifier of an Entity that, while not owning the Account, is associated with its activity.
	InformationalEntityID string `json:"informational_entity_id"`
	// The interest accrued but not yet paid, expressed as a string containing a floating-point value.
	InterestAccrued string `json:"interest_accrued"`
	// The latest [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which interest was accrued.
	InterestAccruedAt types.Date `json:"interest_accrued_at"`
	// The name you choose for the Account.
	Name string `json:"name"`
	// The status of the Account.
	Status AccountStatusEnum `json:"status"`
	// A constant representing the object's type. For this resource it will always be `account`.
	Type AccountTypeEnum `json:"type"`
}
