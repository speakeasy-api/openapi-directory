<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class CreateMonitorRequestBody
{
    /**
     * A unique, case-sensitive string of up to 64 ASCII characters that you specify to make an idempotent API request. Don't reuse the same client token for other API requests.
     * 
     * @var ?string $clientToken
     */
	#[\JMS\Serializer\Annotation\SerializedName('ClientToken')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $clientToken = null;
    
    /**
     * Publish internet measurements to an Amazon S3 bucket in addition to CloudWatch Logs.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\CreateMonitorRequestBodyInternetMeasurementsLogDelivery $internetMeasurementsLogDelivery
     */
	#[\JMS\Serializer\Annotation\SerializedName('InternetMeasurementsLogDelivery')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\CreateMonitorRequestBodyInternetMeasurementsLogDelivery')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CreateMonitorRequestBodyInternetMeasurementsLogDelivery $internetMeasurementsLogDelivery = null;
    
    /**
     * <p>The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network or ASN, such as an internet service provider (ISP), that clients access the resources through. This limit helps control billing costs.</p> <p>To learn more, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/IMCityNetworksMaximum.html">Choosing a city-network maximum value </a> in the Amazon CloudWatch Internet Monitor section of the <i>CloudWatch User Guide</i>.</p>
     * 
     * @var ?int $maxCityNetworksToMonitor
     */
	#[\JMS\Serializer\Annotation\SerializedName('MaxCityNetworksToMonitor')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $maxCityNetworksToMonitor = null;
    
    /**
     * The name of the monitor. 
     * 
     * @var string $monitorName
     */
	#[\JMS\Serializer\Annotation\SerializedName('MonitorName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $monitorName;
    
    /**
     * <p>The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).</p> <p>You can add a combination of Amazon Virtual Private Clouds (VPCs) and Amazon CloudFront distributions, or you can add Amazon WorkSpaces directories. You can't add all three types of resources.</p> <note> <p>If you add only VPC resources, at least one VPC must have an Internet Gateway attached to it, to make sure that it has internet connectivity.</p> </note>
     * 
     * @var ?array<string> $resources
     */
	#[\JMS\Serializer\Annotation\SerializedName('Resources')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $resources = null;
    
    /**
     * The tags for a monitor. You can add a maximum of 50 tags in Internet Monitor.
     * 
     * @var ?array<string, string> $tags
     */
	#[\JMS\Serializer\Annotation\SerializedName('Tags')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $tags = null;
    
    /**
     * The percentage of the internet-facing traffic for your application that you want to monitor with this monitor.
     * 
     * @var ?int $trafficPercentageToMonitor
     */
	#[\JMS\Serializer\Annotation\SerializedName('TrafficPercentageToMonitor')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $trafficPercentageToMonitor = null;
    
	public function __construct()
	{
		$this->clientToken = null;
		$this->internetMeasurementsLogDelivery = null;
		$this->maxCityNetworksToMonitor = null;
		$this->monitorName = "";
		$this->resources = null;
		$this->tags = null;
		$this->trafficPercentageToMonitor = null;
	}
}
