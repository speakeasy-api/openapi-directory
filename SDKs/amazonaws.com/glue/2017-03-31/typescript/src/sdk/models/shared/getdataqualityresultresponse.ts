/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DataQualityRuleResult } from "./dataqualityruleresult";
import { DataSource } from "./datasource";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Success
 */
export class GetDataQualityResultResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "CompletedOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  completedOn?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "DataSource" })
  @Type(() => DataSource)
  dataSource?: DataSource;

  @SpeakeasyMetadata()
  @Expose({ name: "EvaluationContext" })
  evaluationContext?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "JobName" })
  jobName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "JobRunId" })
  jobRunId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ResultId" })
  resultId?: string;

  @SpeakeasyMetadata({ elemType: DataQualityRuleResult })
  @Expose({ name: "RuleResults" })
  @Type(() => DataQualityRuleResult)
  ruleResults?: DataQualityRuleResult[];

  @SpeakeasyMetadata()
  @Expose({ name: "RulesetEvaluationRunId" })
  rulesetEvaluationRunId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "RulesetName" })
  rulesetName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Score" })
  score?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "StartedOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startedOn?: Date;
}
