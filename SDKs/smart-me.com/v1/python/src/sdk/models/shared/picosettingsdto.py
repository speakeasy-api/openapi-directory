"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PicoSettingsDtoAuthenticationTypeEnum(str, Enum):
    r"""The authentication type"""
    NONE = 'None'
    BACKEND = 'Backend'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PicoSettingsDto:
    r"""DTO for the pico charging station settings"""
    
    authentication_type: Optional[PicoSettingsDtoAuthenticationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuthenticationType'), 'exclude': lambda f: f is None }})
    r"""The authentication type"""  
    car_id_detection: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CarIdDetection'), 'exclude': lambda f: f is None }})
    r"""Flag if the car id detection is enabled"""  
    display_brightness: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DisplayBrightness'), 'exclude': lambda f: f is None }})
    r"""The Brightness of the LCD Matrix display. 0 = minimum, 255 = maximum"""  
    dns_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DnsName'), 'exclude': lambda f: f is None }})
    r"""The DNS name of the pico's internal ip"""  
    fix_cable_lock_enable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FixCableLockEnable'), 'exclude': lambda f: f is None }})
    r"""Enable the fix lock of the charging cable"""  
    idle_image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IdleImageUrl'), 'exclude': lambda f: f is None }})
    r"""The url of the idle image"""  
    internal_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InternalIp'), 'exclude': lambda f: f is None }})
    r"""The internal IP address"""  
    loadmanagement_group_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LoadmanagementGroupId'), 'exclude': lambda f: f is None }})
    r"""The ID of the loadmanagement group"""  
    max_current: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxCurrent'), 'exclude': lambda f: f is None }})
    r"""The max current of this station (in A)"""  
    min_current: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MinCurrent'), 'exclude': lambda f: f is None }})
    r"""The max current of this station (in A)"""  
    modbus_tcp: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModbusTcp'), 'exclude': lambda f: f is None }})
    r"""Flag if ModbusTcp is enabled"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})
    r"""The name of the station"""  
    serial_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SerialNumber'), 'exclude': lambda f: f is None }})
    r"""The Serial number of the station"""  
    