// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// AddSettingTemplateApplicationJSONTypeEnum - The type of template. Values include `user`, `group`, `autoReceptionist`, `commonarea`, or `interop`.
type AddSettingTemplateApplicationJSONTypeEnum string

const (
	AddSettingTemplateApplicationJSONTypeEnumUser             AddSettingTemplateApplicationJSONTypeEnum = "user"
	AddSettingTemplateApplicationJSONTypeEnumGroup            AddSettingTemplateApplicationJSONTypeEnum = "group"
	AddSettingTemplateApplicationJSONTypeEnumAutoReceptionist AddSettingTemplateApplicationJSONTypeEnum = "autoReceptionist"
	AddSettingTemplateApplicationJSONTypeEnumCommonarea       AddSettingTemplateApplicationJSONTypeEnum = "commonarea"
	AddSettingTemplateApplicationJSONTypeEnumInterop          AddSettingTemplateApplicationJSONTypeEnum = "interop"
)

func (e *AddSettingTemplateApplicationJSONTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "user":
		fallthrough
	case "group":
		fallthrough
	case "autoReceptionist":
		fallthrough
	case "commonarea":
		fallthrough
	case "interop":
		*e = AddSettingTemplateApplicationJSONTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AddSettingTemplateApplicationJSONTypeEnum: %s", s)
	}
}

type AddSettingTemplateApplicationJSON struct {
	// A description of the template.
	Description *string `json:"description,omitempty"`
	// The name of the template.
	Name string `json:"name"`
	// Unique identifier of the site. Required only when multiple sites are enabled. See [Managing multiple sites](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites) for details.
	SiteID *string `json:"site_id,omitempty"`
	// The type of template. Values include `user`, `group`, `autoReceptionist`, `commonarea`, or `interop`.
	Type AddSettingTemplateApplicationJSONTypeEnum `json:"type"`
}

type AddSettingTemplateRequest struct {
	Request *AddSettingTemplateApplicationJSON `request:"mediaType=application/json"`
}

// AddSettingTemplate201ApplicationXML - **HTTP Status Code:** `201`<br>
// Created Successfully.
type AddSettingTemplate201ApplicationXML struct {
	// Template description.
	Description *string
	// Template ID.
	ID *string
	// Template name.
	Name *string
	// The type of template. Values include: `user`, `group`, `autoReceptionist`, `commonArea`, `zr`, or `interop`.
	Type *string
}

// AddSettingTemplate201ApplicationJSON - **HTTP Status Code:** `201`<br>
// Created Successfully.
type AddSettingTemplate201ApplicationJSON struct {
	// Template description.
	Description *string `json:"description,omitempty"`
	// Template ID.
	ID *string `json:"id,omitempty"`
	// Template name.
	Name *string `json:"name,omitempty"`
	// The type of template. Values include: `user`, `group`, `autoReceptionist`, `commonArea`, `zr`, or `interop`.
	Type *string `json:"type,omitempty"`
}

type AddSettingTemplateResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `201`<br>
	// Created Successfully.
	AddSettingTemplate201ApplicationJSONObject *AddSettingTemplate201ApplicationJSON
}
