// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTGetClusterCredentialsActionEnum
type POSTGetClusterCredentialsActionEnum string

const (
	POSTGetClusterCredentialsActionEnumGetClusterCredentials POSTGetClusterCredentialsActionEnum = "GetClusterCredentials"
)

func (e *POSTGetClusterCredentialsActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GetClusterCredentials":
		*e = POSTGetClusterCredentialsActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTGetClusterCredentialsActionEnum: %s", s)
	}
}

// POSTGetClusterCredentialsVersionEnum
type POSTGetClusterCredentialsVersionEnum string

const (
	POSTGetClusterCredentialsVersionEnumTwoThousandAndTwelve1201 POSTGetClusterCredentialsVersionEnum = "2012-12-01"
)

func (e *POSTGetClusterCredentialsVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2012-12-01":
		*e = POSTGetClusterCredentialsVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTGetClusterCredentialsVersionEnum: %s", s)
	}
}

type POSTGetClusterCredentialsQueryParams struct {
	Action  POSTGetClusterCredentialsActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	Version POSTGetClusterCredentialsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTGetClusterCredentialsHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTGetClusterCredentialsRequest struct {
	QueryParams POSTGetClusterCredentialsQueryParams
	Headers     POSTGetClusterCredentialsHeaders
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTGetClusterCredentialsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
