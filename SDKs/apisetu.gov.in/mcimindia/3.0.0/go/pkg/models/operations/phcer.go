// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PhcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type PhcerRequestBodyCertificateParameters struct {
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// Full name
	FullName string `json:"FullName"`
	// Registration No
	RegnNo string `json:"REGN_NO"`
	// Aadhaar number
	UID string `json:"UID"`
}

// PhcerRequestBodyFormatEnum - The format of the certificate in response.
type PhcerRequestBodyFormatEnum string

const (
	PhcerRequestBodyFormatEnumPdf PhcerRequestBodyFormatEnum = "pdf"
)

func (e PhcerRequestBodyFormatEnum) ToPointer() *PhcerRequestBodyFormatEnum {
	return &e
}

func (e *PhcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = PhcerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PhcerRequestBodyFormatEnum: %v", v)
	}
}

// PhcerRequestBody - Request format
type PhcerRequestBody struct {
	CertificateParameters *PhcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format PhcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Phcer504ApplicationJSONErrorEnum string

const (
	Phcer504ApplicationJSONErrorEnumGatewayTimeout Phcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Phcer504ApplicationJSONErrorEnum) ToPointer() *Phcer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Phcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Phcer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Phcer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Phcer504ApplicationJSONErrorDescriptionEnum string

const (
	Phcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Phcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Phcer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Phcer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Phcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Phcer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Phcer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Phcer504ApplicationJSON - Gateway timeout
type Phcer504ApplicationJSON struct {
	Error            *Phcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Phcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Phcer503ApplicationJSONErrorEnum string

const (
	Phcer503ApplicationJSONErrorEnumServiceUnavailable Phcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Phcer503ApplicationJSONErrorEnum) ToPointer() *Phcer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Phcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Phcer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Phcer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Phcer503ApplicationJSONErrorDescriptionEnum string

const (
	Phcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Phcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Phcer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Phcer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Phcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Phcer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Phcer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Phcer503ApplicationJSON - Service unavailable
type Phcer503ApplicationJSON struct {
	Error            *Phcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Phcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Phcer502ApplicationJSONErrorEnum string

const (
	Phcer502ApplicationJSONErrorEnumBadGatewy Phcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Phcer502ApplicationJSONErrorEnum) ToPointer() *Phcer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Phcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Phcer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Phcer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Phcer502ApplicationJSONErrorDescriptionEnum string

const (
	Phcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Phcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Phcer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Phcer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Phcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Phcer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Phcer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Phcer502ApplicationJSON - Bad gateway
type Phcer502ApplicationJSON struct {
	Error            *Phcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Phcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Phcer500ApplicationJSONErrorEnum string

const (
	Phcer500ApplicationJSONErrorEnumInternalServerError Phcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Phcer500ApplicationJSONErrorEnum) ToPointer() *Phcer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Phcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Phcer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Phcer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Phcer500ApplicationJSONErrorDescriptionEnum string

const (
	Phcer500ApplicationJSONErrorDescriptionEnumInternalServerError Phcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Phcer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Phcer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Phcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Phcer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Phcer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Phcer500ApplicationJSON - Internal server error
type Phcer500ApplicationJSON struct {
	Error            *Phcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Phcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Phcer404ApplicationJSONErrorEnum string

const (
	Phcer404ApplicationJSONErrorEnumRecordNotFound Phcer404ApplicationJSONErrorEnum = "record_not_found"
	Phcer404ApplicationJSONErrorEnumURLNotFound    Phcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Phcer404ApplicationJSONErrorEnum) ToPointer() *Phcer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Phcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Phcer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Phcer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Phcer404ApplicationJSONErrorDescriptionEnum string

const (
	Phcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Phcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Phcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Phcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Phcer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Phcer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Phcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Phcer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Phcer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Phcer404ApplicationJSON - No record found
type Phcer404ApplicationJSON struct {
	Error            *Phcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Phcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Phcer401ApplicationJSONErrorEnum string

const (
	Phcer401ApplicationJSONErrorEnumInvalidAuthentication Phcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Phcer401ApplicationJSONErrorEnumInvalidAuthorization  Phcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Phcer401ApplicationJSONErrorEnum) ToPointer() *Phcer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Phcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Phcer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Phcer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Phcer401ApplicationJSONErrorDescriptionEnum string

const (
	Phcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Phcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Phcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Phcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Phcer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Phcer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Phcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Phcer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Phcer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Phcer401ApplicationJSON - Unauthorized access
type Phcer401ApplicationJSON struct {
	Error            *Phcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Phcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Phcer400ApplicationJSONErrorEnum string

const (
	Phcer400ApplicationJSONErrorEnumMissingParameter Phcer400ApplicationJSONErrorEnum = "missing_parameter"
	Phcer400ApplicationJSONErrorEnumInvalidParameter Phcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Phcer400ApplicationJSONErrorEnumInvalidFormat    Phcer400ApplicationJSONErrorEnum = "invalid_format"
	Phcer400ApplicationJSONErrorEnumInvalidTxnid     Phcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Phcer400ApplicationJSONErrorEnumInvalidConsentid Phcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Phcer400ApplicationJSONErrorEnum) ToPointer() *Phcer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Phcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Phcer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Phcer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Phcer400ApplicationJSONErrorDescriptionEnum string

const (
	Phcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Phcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Phcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Phcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Phcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Phcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Phcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Phcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Phcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Phcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Phcer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Phcer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Phcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Phcer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Phcer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Phcer400ApplicationJSON - Bad request
type Phcer400ApplicationJSON struct {
	Error            *Phcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Phcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type PhcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Phcer400ApplicationJSONObject *Phcer400ApplicationJSON
	// Unauthorized access
	Phcer401ApplicationJSONObject *Phcer401ApplicationJSON
	// No record found
	Phcer404ApplicationJSONObject *Phcer404ApplicationJSON
	// Internal server error
	Phcer500ApplicationJSONObject *Phcer500ApplicationJSON
	// Bad gateway
	Phcer502ApplicationJSONObject *Phcer502ApplicationJSON
	// Service unavailable
	Phcer503ApplicationJSONObject *Phcer503ApplicationJSON
	// Gateway timeout
	Phcer504ApplicationJSONObject *Phcer504ApplicationJSON
}
