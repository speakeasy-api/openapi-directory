"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import eventsourceconfiguration as shared_eventsourceconfiguration
from ..shared import invalidparametervalueexception as shared_invalidparametervalueexception
from ..shared import serviceexception as shared_serviceexception
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddEventSourceRequestBody:
    
    event_source: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EventSource') }})
    r"""The Amazon Resource Name (ARN) of the Amazon Kinesis stream that is the event source. Any record added to this stream causes AWS Lambda to invoke your Lambda function. AWS Lambda POSTs the Amazon Kinesis event, containing records, to your Lambda function as JSON."""  
    function_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FunctionName') }})
    r"""The Lambda function to invoke when AWS Lambda detects an event on the stream."""  
    role: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Role') }})
    r"""The ARN of the IAM role (invocation role) that AWS Lambda can assume to read from the stream and invoke the function."""  
    batch_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BatchSize'), 'exclude': lambda f: f is None }})
    r"""The largest number of records that AWS Lambda will give to your function in a single event. The default is 100 records."""  
    parameters: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Parameters'), 'exclude': lambda f: f is None }})
    r"""A map (key-value pairs) defining the configuration for AWS Lambda to use when reading the event source. Currently, AWS Lambda supports only the <code>InitialPositionInStream</code> key. The valid values are: \\"TRIM_HORIZON\\" and \\"LATEST\\". The default value is \\"TRIM_HORIZON\\". For more information, go to <a href=\\"http://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html#Kinesis-GetShardIterator-request-ShardIteratorType\\">ShardIteratorType</a> in the Amazon Kinesis Service API Reference."""  
    

@dataclasses.dataclass
class AddEventSourceRequest:
    
    request_body: AddEventSourceRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class AddEventSourceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    event_source_configuration: Optional[shared_eventsourceconfiguration.EventSourceConfiguration] = dataclasses.field(default=None)
    r"""Success"""  
    invalid_parameter_value_exception: Optional[shared_invalidparametervalueexception.InvalidParameterValueException] = dataclasses.field(default=None)
    r"""InvalidParameterValueException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_exception: Optional[shared_serviceexception.ServiceException] = dataclasses.field(default=None)
    r"""ServiceException"""  
    