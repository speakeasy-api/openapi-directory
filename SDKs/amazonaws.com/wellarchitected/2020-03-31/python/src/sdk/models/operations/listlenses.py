"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import listlensesoutput as shared_listlensesoutput
from enum import Enum
from typing import Any, Optional

class ListLensesLensStatusEnum(str, Enum):
    r"""The status of lenses to be returned."""
    ALL = 'ALL'
    DRAFT = 'DRAFT'
    PUBLISHED = 'PUBLISHED'

class ListLensesLensTypeEnum(str, Enum):
    r"""The type of lenses to be returned."""
    AWS_OFFICIAL = 'AWS_OFFICIAL'
    CUSTOM_SHARED = 'CUSTOM_SHARED'
    CUSTOM_SELF = 'CUSTOM_SELF'


@dataclasses.dataclass
class ListLensesRequest:
    
    lens_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'LensName', 'style': 'form', 'explode': True }})  
    lens_status: Optional[ListLensesLensStatusEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'LensStatus', 'style': 'form', 'explode': True }})
    r"""The status of lenses to be returned."""  
    lens_type: Optional[ListLensesLensTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'LensType', 'style': 'form', 'explode': True }})
    r"""The type of lenses to be returned."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'MaxResults', 'style': 'form', 'explode': True }})  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'NextToken', 'style': 'form', 'explode': True }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ListLensesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    list_lenses_output: Optional[shared_listlensesoutput.ListLensesOutput] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    