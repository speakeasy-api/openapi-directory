// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PutComplianceItemsXAmzTargetEnum
type PutComplianceItemsXAmzTargetEnum string

const (
	PutComplianceItemsXAmzTargetEnumAmazonSsmPutComplianceItems PutComplianceItemsXAmzTargetEnum = "AmazonSSM.PutComplianceItems"
)

func (e *PutComplianceItemsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonSSM.PutComplianceItems":
		*e = PutComplianceItemsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutComplianceItemsXAmzTargetEnum: %s", s)
	}
}

type PutComplianceItemsHeaders struct {
	XAmzAlgorithm     *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        PutComplianceItemsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type PutComplianceItemsRequest struct {
	Headers PutComplianceItemsHeaders
	Request shared.PutComplianceItemsRequest `request:"mediaType=application/json"`
}

type PutComplianceItemsResponse struct {
	// ComplianceTypeCountLimitExceededException
	ComplianceTypeCountLimitExceededException interface{}
	ContentType                               string
	// InternalServerError
	InternalServerError interface{}
	// InvalidItemContentException
	InvalidItemContentException interface{}
	// InvalidResourceId
	InvalidResourceID interface{}
	// InvalidResourceType
	InvalidResourceType interface{}
	// ItemSizeLimitExceededException
	ItemSizeLimitExceededException interface{}
	// Success
	PutComplianceItemsResult map[string]interface{}
	StatusCode               int
	RawResponse              *http.Response
	// TotalSizeLimitExceededException
	TotalSizeLimitExceededException interface{}
}
