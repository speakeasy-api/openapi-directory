"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createdeploymentjobresponse as shared_createdeploymentjobresponse
from ..shared import deploymentapplicationconfig as shared_deploymentapplicationconfig
from ..shared import s3object as shared_s3object
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateDeploymentJobRequestBodyDeploymentConfig:
    r"""Information about a deployment configuration."""
    
    concurrent_deployment_percentage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('concurrentDeploymentPercentage'), 'exclude': lambda f: f is None }})  
    download_condition_file: Optional[shared_s3object.S3Object] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('downloadConditionFile'), 'exclude': lambda f: f is None }})  
    failure_threshold_percentage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failureThresholdPercentage'), 'exclude': lambda f: f is None }})  
    robot_deployment_timeout_in_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('robotDeploymentTimeoutInSeconds'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateDeploymentJobRequestBody:
    
    client_request_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientRequestToken') }})
    r"""Unique, case-sensitive identifier that you provide to ensure the idempotency of the request."""  
    deployment_application_configs: list[shared_deploymentapplicationconfig.DeploymentApplicationConfig] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deploymentApplicationConfigs') }})
    r"""The deployment application configuration."""  
    fleet: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fleet') }})
    r"""The Amazon Resource Name (ARN) of the fleet to deploy."""  
    deployment_config: Optional[CreateDeploymentJobRequestBodyDeploymentConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deploymentConfig'), 'exclude': lambda f: f is None }})
    r"""Information about a deployment configuration."""  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""A map that contains tag keys and tag values that are attached to the deployment job."""  
    

@dataclasses.dataclass
class CreateDeploymentJobRequest:
    
    request_body: CreateDeploymentJobRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateDeploymentJobResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    concurrent_deployment_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConcurrentDeploymentException"""  
    create_deployment_job_response: Optional[shared_createdeploymentjobresponse.CreateDeploymentJobResponse] = dataclasses.field(default=None)
    r"""Success"""  
    idempotent_parameter_mismatch_exception: Optional[Any] = dataclasses.field(default=None)
    r"""IdempotentParameterMismatchException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    invalid_parameter_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidParameterException"""  
    limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""LimitExceededException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    