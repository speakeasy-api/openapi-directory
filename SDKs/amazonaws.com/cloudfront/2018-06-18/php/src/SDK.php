<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 * 
 * https://docs.aws.amazon.com/cloudfront/ - Amazon Web Services documentation
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 * @see https://docs.aws.amazon.com/cloudfront/
 */
class SDK
{
	public const SERVERS = [
        /** The general CloudFront multi-region endpoint */
		'https://cloudfront.amazonaws.com',
        /** The CloudFront endpoint for China (Beijing) and China (Ningxia) */
		'http://cloudfront.{region}.amazonaws.com.cn',
        /** The CloudFront endpoint for China (Beijing) and China (Ningxia) */
		'https://cloudfront.{region}.amazonaws.com.cn',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	private ?Models\Shared\Security $_security;
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client	 
	 * @param Models\Shared\Security|null $security
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, ?Models\Shared\Security $security, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($security !== null) {
			$this->_security = $security;
			$this->_securityClient = Utils\Utils::configureSecurityClient($this->_defaultClient, $this->_security);
		}
		
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Creates a new origin access identity. If you're using Amazon S3 for your origin, you can use an origin access identity to require users to access your content using a CloudFront URL instead of the Amazon S3 URL. For more information about how to use origin access identities, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html">Serving Private Content through CloudFront</a> in the <i>Amazon CloudFront Developer Guide</i>.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCloudFrontOriginAccessIdentity20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCloudFrontOriginAccessIdentity20180618Response
     */
	public function createCloudFrontOriginAccessIdentity20180618(
        \OpenAPI\OpenAPI\Models\Operations\CreateCloudFrontOriginAccessIdentity20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCloudFrontOriginAccessIdentity20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/origin-access-identity/cloudfront');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCloudFrontOriginAccessIdentity20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * <p>Creates a new web distribution. You create a CloudFront distribution to tell CloudFront where you want content to be delivered from, and the details about how to track and manage content delivery. Send a <code>POST</code> request to the <code>/<i>CloudFront API version</i>/distribution</code>/<code>distribution ID</code> resource.</p> <important> <p>When you update a distribution, there are more required fields than when you create a distribution. When you update your distribution by using <a>UpdateDistribution</a>, follow the steps included in the documentation to get the current configuration and then make your updates. This helps to make sure that you include all of the required fields. To view a summary, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-overview-required-fields.html">Required Fields for Create Distribution and Update Distribution</a> in the <i>Amazon CloudFront Developer Guide</i>.</p> </important> <p>If you are using Adobe Flash Media Server's RTMP protocol, you set up a different kind of CloudFront distribution. For more information, see <a>CreateStreamingDistribution</a>.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDistribution20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDistribution20180618Response
     */
	public function createDistribution20180618(
        \OpenAPI\OpenAPI\Models\Operations\CreateDistribution20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDistribution20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/distribution');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDistribution20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485 or $httpResponse->getStatusCode() === 486 or $httpResponse->getStatusCode() === 487 or $httpResponse->getStatusCode() === 488 or $httpResponse->getStatusCode() === 489 or $httpResponse->getStatusCode() === 490 or $httpResponse->getStatusCode() === 491 or $httpResponse->getStatusCode() === 492 or $httpResponse->getStatusCode() === 493 or $httpResponse->getStatusCode() === 494 or $httpResponse->getStatusCode() === 495 or $httpResponse->getStatusCode() === 496 or $httpResponse->getStatusCode() === 497 or $httpResponse->getStatusCode() === 498 or $httpResponse->getStatusCode() === 499 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 501 or $httpResponse->getStatusCode() === 502 or $httpResponse->getStatusCode() === 503 or $httpResponse->getStatusCode() === 504 or $httpResponse->getStatusCode() === 505 or $httpResponse->getStatusCode() === 506 or $httpResponse->getStatusCode() === 507 or $httpResponse->getStatusCode() === 508 or $httpResponse->getStatusCode() === 509 or $httpResponse->getStatusCode() === 510 or $httpResponse->getStatusCode() === 511 or $httpResponse->getStatusCode() === 512 or $httpResponse->getStatusCode() === 513 or $httpResponse->getStatusCode() === 514 or $httpResponse->getStatusCode() === 515 or $httpResponse->getStatusCode() === 516 or $httpResponse->getStatusCode() === 517 or $httpResponse->getStatusCode() === 518 or $httpResponse->getStatusCode() === 519 or $httpResponse->getStatusCode() === 520 or $httpResponse->getStatusCode() === 521 or $httpResponse->getStatusCode() === 522) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Create a new distribution with tags.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDistributionWithTags20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDistributionWithTags20180618Response
     */
	public function createDistributionWithTags20180618(
        \OpenAPI\OpenAPI\Models\Operations\CreateDistributionWithTags20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDistributionWithTags20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/distribution#WithTags');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CreateDistributionWithTags20180618Request::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDistributionWithTags20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485 or $httpResponse->getStatusCode() === 486 or $httpResponse->getStatusCode() === 487 or $httpResponse->getStatusCode() === 488 or $httpResponse->getStatusCode() === 489 or $httpResponse->getStatusCode() === 490 or $httpResponse->getStatusCode() === 491 or $httpResponse->getStatusCode() === 492 or $httpResponse->getStatusCode() === 493 or $httpResponse->getStatusCode() === 494 or $httpResponse->getStatusCode() === 495 or $httpResponse->getStatusCode() === 496 or $httpResponse->getStatusCode() === 497 or $httpResponse->getStatusCode() === 498 or $httpResponse->getStatusCode() === 499 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 501 or $httpResponse->getStatusCode() === 502 or $httpResponse->getStatusCode() === 503 or $httpResponse->getStatusCode() === 504 or $httpResponse->getStatusCode() === 505 or $httpResponse->getStatusCode() === 506 or $httpResponse->getStatusCode() === 507 or $httpResponse->getStatusCode() === 508 or $httpResponse->getStatusCode() === 509 or $httpResponse->getStatusCode() === 510 or $httpResponse->getStatusCode() === 511 or $httpResponse->getStatusCode() === 512 or $httpResponse->getStatusCode() === 513 or $httpResponse->getStatusCode() === 514 or $httpResponse->getStatusCode() === 515 or $httpResponse->getStatusCode() === 516 or $httpResponse->getStatusCode() === 517 or $httpResponse->getStatusCode() === 518 or $httpResponse->getStatusCode() === 519 or $httpResponse->getStatusCode() === 520 or $httpResponse->getStatusCode() === 521 or $httpResponse->getStatusCode() === 522 or $httpResponse->getStatusCode() === 523) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Create a new field-level encryption configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateFieldLevelEncryptionConfig20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateFieldLevelEncryptionConfig20180618Response
     */
	public function createFieldLevelEncryptionConfig20180618(
        \OpenAPI\OpenAPI\Models\Operations\CreateFieldLevelEncryptionConfig20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateFieldLevelEncryptionConfig20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/field-level-encryption');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateFieldLevelEncryptionConfig20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485 or $httpResponse->getStatusCode() === 486 or $httpResponse->getStatusCode() === 487) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Create a field-level encryption profile.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateFieldLevelEncryptionProfile20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateFieldLevelEncryptionProfile20180618Response
     */
	public function createFieldLevelEncryptionProfile20180618(
        \OpenAPI\OpenAPI\Models\Operations\CreateFieldLevelEncryptionProfile20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateFieldLevelEncryptionProfile20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/field-level-encryption-profile');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateFieldLevelEncryptionProfile20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485 or $httpResponse->getStatusCode() === 486 or $httpResponse->getStatusCode() === 487) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Create a new invalidation. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInvalidation20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateInvalidation20180618Response
     */
	public function createInvalidation20180618(
        \OpenAPI\OpenAPI\Models\Operations\CreateInvalidation20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateInvalidation20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/distribution/{DistributionId}/invalidation', \OpenAPI\OpenAPI\Models\Operations\CreateInvalidation20180618Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateInvalidation20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485 or $httpResponse->getStatusCode() === 486) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Add a new public key to CloudFront to use, for example, for field-level encryption. You can add a maximum of 10 public keys with one AWS account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePublicKey20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatePublicKey20180618Response
     */
	public function createPublicKey20180618(
        \OpenAPI\OpenAPI\Models\Operations\CreatePublicKey20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatePublicKey20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/public-key');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatePublicKey20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * <p>Creates a new RMTP distribution. An RTMP distribution is similar to a web distribution, but an RTMP distribution streams media files using the Adobe Real-Time Messaging Protocol (RTMP) instead of serving files using HTTP. </p> <p>To create a new web distribution, submit a <code>POST</code> request to the <i>CloudFront API version</i>/distribution resource. The request body must include a document with a <i>StreamingDistributionConfig</i> element. The response echoes the <code>StreamingDistributionConfig</code> element and returns other information about the RTMP distribution.</p> <p>To get the status of your request, use the <i>GET StreamingDistribution</i> API action. When the value of <code>Enabled</code> is <code>true</code> and the value of <code>Status</code> is <code>Deployed</code>, your distribution is ready. A distribution usually deploys in less than 15 minutes.</p> <p>For more information about web distributions, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-rtmp.html">Working with RTMP Distributions</a> in the <i>Amazon CloudFront Developer Guide</i>.</p> <important> <p>Beginning with the 2012-05-05 version of the CloudFront API, we made substantial changes to the format of the XML document that you include in the request body when you create or update a web distribution or an RTMP distribution, and when you invalidate objects. With previous versions of the API, we discovered that it was too easy to accidentally delete one or more values for an element that accepts multiple values, for example, CNAMEs and trusted signers. Our changes for the 2012-05-05 release are intended to prevent these accidental deletions and to notify you when there's a mismatch between the number of values you say you're specifying in the <code>Quantity</code> element and the number of values specified.</p> </important>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateStreamingDistribution20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateStreamingDistribution20180618Response
     */
	public function createStreamingDistribution20180618(
        \OpenAPI\OpenAPI\Models\Operations\CreateStreamingDistribution20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateStreamingDistribution20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/streaming-distribution');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateStreamingDistribution20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485 or $httpResponse->getStatusCode() === 486 or $httpResponse->getStatusCode() === 487 or $httpResponse->getStatusCode() === 488 or $httpResponse->getStatusCode() === 489 or $httpResponse->getStatusCode() === 490 or $httpResponse->getStatusCode() === 491) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Create a new streaming distribution with tags.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateStreamingDistributionWithTags20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateStreamingDistributionWithTags20180618Response
     */
	public function createStreamingDistributionWithTags20180618(
        \OpenAPI\OpenAPI\Models\Operations\CreateStreamingDistributionWithTags20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateStreamingDistributionWithTags20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/streaming-distribution#WithTags');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CreateStreamingDistributionWithTags20180618Request::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateStreamingDistributionWithTags20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485 or $httpResponse->getStatusCode() === 486 or $httpResponse->getStatusCode() === 487 or $httpResponse->getStatusCode() === 488 or $httpResponse->getStatusCode() === 489 or $httpResponse->getStatusCode() === 490 or $httpResponse->getStatusCode() === 491 or $httpResponse->getStatusCode() === 492) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Delete an origin access identity. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCloudFrontOriginAccessIdentity20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCloudFrontOriginAccessIdentity20180618Response
     */
	public function deleteCloudFrontOriginAccessIdentity20180618(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCloudFrontOriginAccessIdentity20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCloudFrontOriginAccessIdentity20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/origin-access-identity/cloudfront/{Id}', \OpenAPI\OpenAPI\Models\Operations\DeleteCloudFrontOriginAccessIdentity20180618Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCloudFrontOriginAccessIdentity20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Delete a distribution. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDistribution20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDistribution20180618Response
     */
	public function deleteDistribution20180618(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDistribution20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDistribution20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/distribution/{Id}', \OpenAPI\OpenAPI\Models\Operations\DeleteDistribution20180618Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDistribution20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Remove a field-level encryption configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFieldLevelEncryptionConfig20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteFieldLevelEncryptionConfig20180618Response
     */
	public function deleteFieldLevelEncryptionConfig20180618(
        \OpenAPI\OpenAPI\Models\Operations\DeleteFieldLevelEncryptionConfig20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteFieldLevelEncryptionConfig20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/field-level-encryption/{Id}', \OpenAPI\OpenAPI\Models\Operations\DeleteFieldLevelEncryptionConfig20180618Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteFieldLevelEncryptionConfig20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Remove a field-level encryption profile.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFieldLevelEncryptionProfile20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteFieldLevelEncryptionProfile20180618Response
     */
	public function deleteFieldLevelEncryptionProfile20180618(
        \OpenAPI\OpenAPI\Models\Operations\DeleteFieldLevelEncryptionProfile20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteFieldLevelEncryptionProfile20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/field-level-encryption-profile/{Id}', \OpenAPI\OpenAPI\Models\Operations\DeleteFieldLevelEncryptionProfile20180618Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteFieldLevelEncryptionProfile20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Remove a public key you previously added to CloudFront.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePublicKey20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletePublicKey20180618Response
     */
	public function deletePublicKey20180618(
        \OpenAPI\OpenAPI\Models\Operations\DeletePublicKey20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletePublicKey20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/public-key/{Id}', \OpenAPI\OpenAPI\Models\Operations\DeletePublicKey20180618Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletePublicKey20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * <p>Delete a streaming distribution. To delete an RTMP distribution using the CloudFront API, perform the following steps.</p> <p> <b>To delete an RTMP distribution using the CloudFront API</b>:</p> <ol> <li> <p>Disable the RTMP distribution.</p> </li> <li> <p>Submit a <code>GET Streaming Distribution Config</code> request to get the current configuration and the <code>Etag</code> header for the distribution. </p> </li> <li> <p>Update the XML document that was returned in the response to your <code>GET Streaming Distribution Config</code> request to change the value of <code>Enabled</code> to <code>false</code>.</p> </li> <li> <p>Submit a <code>PUT Streaming Distribution Config</code> request to update the configuration for your distribution. In the request body, include the XML document that you updated in Step 3. Then set the value of the HTTP <code>If-Match</code> header to the value of the <code>ETag</code> header that CloudFront returned when you submitted the <code>GET Streaming Distribution Config</code> request in Step 2.</p> </li> <li> <p>Review the response to the <code>PUT Streaming Distribution Config</code> request to confirm that the distribution was successfully disabled.</p> </li> <li> <p>Submit a <code>GET Streaming Distribution Config</code> request to confirm that your changes have propagated. When propagation is complete, the value of <code>Status</code> is <code>Deployed</code>.</p> </li> <li> <p>Submit a <code>DELETE Streaming Distribution</code> request. Set the value of the HTTP <code>If-Match</code> header to the value of the <code>ETag</code> header that CloudFront returned when you submitted the <code>GET Streaming Distribution Config</code> request in Step 2.</p> </li> <li> <p>Review the response to your <code>DELETE Streaming Distribution</code> request to confirm that the distribution was successfully deleted.</p> </li> </ol> <p>For information about deleting a distribution using the CloudFront console, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/HowToDeleteDistribution.html">Deleting a Distribution</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteStreamingDistribution20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteStreamingDistribution20180618Response
     */
	public function deleteStreamingDistribution20180618(
        \OpenAPI\OpenAPI\Models\Operations\DeleteStreamingDistribution20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteStreamingDistribution20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/streaming-distribution/{Id}', \OpenAPI\OpenAPI\Models\Operations\DeleteStreamingDistribution20180618Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteStreamingDistribution20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get the information about an origin access identity. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCloudFrontOriginAccessIdentity20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCloudFrontOriginAccessIdentity20180618Response
     */
	public function getCloudFrontOriginAccessIdentity20180618(
        \OpenAPI\OpenAPI\Models\Operations\GetCloudFrontOriginAccessIdentity20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCloudFrontOriginAccessIdentity20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/origin-access-identity/cloudfront/{Id}', \OpenAPI\OpenAPI\Models\Operations\GetCloudFrontOriginAccessIdentity20180618Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCloudFrontOriginAccessIdentity20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get the configuration information about an origin access identity. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCloudFrontOriginAccessIdentityConfig20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCloudFrontOriginAccessIdentityConfig20180618Response
     */
	public function getCloudFrontOriginAccessIdentityConfig20180618(
        \OpenAPI\OpenAPI\Models\Operations\GetCloudFrontOriginAccessIdentityConfig20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCloudFrontOriginAccessIdentityConfig20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/origin-access-identity/cloudfront/{Id}/config', \OpenAPI\OpenAPI\Models\Operations\GetCloudFrontOriginAccessIdentityConfig20180618Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCloudFrontOriginAccessIdentityConfig20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get the information about a distribution. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistribution20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistribution20180618Response
     */
	public function getDistribution20180618(
        \OpenAPI\OpenAPI\Models\Operations\GetDistribution20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistribution20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/distribution/{Id}', \OpenAPI\OpenAPI\Models\Operations\GetDistribution20180618Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistribution20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get the configuration information about a distribution. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistributionConfig20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistributionConfig20180618Response
     */
	public function getDistributionConfig20180618(
        \OpenAPI\OpenAPI\Models\Operations\GetDistributionConfig20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistributionConfig20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/distribution/{Id}/config', \OpenAPI\OpenAPI\Models\Operations\GetDistributionConfig20180618Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistributionConfig20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get the field-level encryption configuration information.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFieldLevelEncryption20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFieldLevelEncryption20180618Response
     */
	public function getFieldLevelEncryption20180618(
        \OpenAPI\OpenAPI\Models\Operations\GetFieldLevelEncryption20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFieldLevelEncryption20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/field-level-encryption/{Id}', \OpenAPI\OpenAPI\Models\Operations\GetFieldLevelEncryption20180618Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFieldLevelEncryption20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get the field-level encryption configuration information.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFieldLevelEncryptionConfig20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFieldLevelEncryptionConfig20180618Response
     */
	public function getFieldLevelEncryptionConfig20180618(
        \OpenAPI\OpenAPI\Models\Operations\GetFieldLevelEncryptionConfig20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFieldLevelEncryptionConfig20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/field-level-encryption/{Id}/config', \OpenAPI\OpenAPI\Models\Operations\GetFieldLevelEncryptionConfig20180618Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFieldLevelEncryptionConfig20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get the field-level encryption profile information.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFieldLevelEncryptionProfile20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFieldLevelEncryptionProfile20180618Response
     */
	public function getFieldLevelEncryptionProfile20180618(
        \OpenAPI\OpenAPI\Models\Operations\GetFieldLevelEncryptionProfile20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFieldLevelEncryptionProfile20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/field-level-encryption-profile/{Id}', \OpenAPI\OpenAPI\Models\Operations\GetFieldLevelEncryptionProfile20180618Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFieldLevelEncryptionProfile20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get the field-level encryption profile configuration information.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFieldLevelEncryptionProfileConfig20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFieldLevelEncryptionProfileConfig20180618Response
     */
	public function getFieldLevelEncryptionProfileConfig20180618(
        \OpenAPI\OpenAPI\Models\Operations\GetFieldLevelEncryptionProfileConfig20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFieldLevelEncryptionProfileConfig20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/field-level-encryption-profile/{Id}/config', \OpenAPI\OpenAPI\Models\Operations\GetFieldLevelEncryptionProfileConfig20180618Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFieldLevelEncryptionProfileConfig20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get the information about an invalidation. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetInvalidation20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetInvalidation20180618Response
     */
	public function getInvalidation20180618(
        \OpenAPI\OpenAPI\Models\Operations\GetInvalidation20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetInvalidation20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/distribution/{DistributionId}/invalidation/{Id}', \OpenAPI\OpenAPI\Models\Operations\GetInvalidation20180618Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetInvalidation20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get the public key information.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPublicKey20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPublicKey20180618Response
     */
	public function getPublicKey20180618(
        \OpenAPI\OpenAPI\Models\Operations\GetPublicKey20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPublicKey20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/public-key/{Id}', \OpenAPI\OpenAPI\Models\Operations\GetPublicKey20180618Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPublicKey20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Return public key configuration informaation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPublicKeyConfig20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPublicKeyConfig20180618Response
     */
	public function getPublicKeyConfig20180618(
        \OpenAPI\OpenAPI\Models\Operations\GetPublicKeyConfig20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPublicKeyConfig20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/public-key/{Id}/config', \OpenAPI\OpenAPI\Models\Operations\GetPublicKeyConfig20180618Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPublicKeyConfig20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets information about a specified RTMP distribution, including the distribution configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetStreamingDistribution20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetStreamingDistribution20180618Response
     */
	public function getStreamingDistribution20180618(
        \OpenAPI\OpenAPI\Models\Operations\GetStreamingDistribution20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetStreamingDistribution20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/streaming-distribution/{Id}', \OpenAPI\OpenAPI\Models\Operations\GetStreamingDistribution20180618Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetStreamingDistribution20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get the configuration information about a streaming distribution. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetStreamingDistributionConfig20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetStreamingDistributionConfig20180618Response
     */
	public function getStreamingDistributionConfig20180618(
        \OpenAPI\OpenAPI\Models\Operations\GetStreamingDistributionConfig20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetStreamingDistributionConfig20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/streaming-distribution/{Id}/config', \OpenAPI\OpenAPI\Models\Operations\GetStreamingDistributionConfig20180618Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetStreamingDistributionConfig20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Lists origin access identities.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCloudFrontOriginAccessIdentities20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCloudFrontOriginAccessIdentities20180618Response
     */
	public function listCloudFrontOriginAccessIdentities20180618(
        \OpenAPI\OpenAPI\Models\Operations\ListCloudFrontOriginAccessIdentities20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCloudFrontOriginAccessIdentities20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/origin-access-identity/cloudfront');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCloudFrontOriginAccessIdentities20180618Request::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCloudFrontOriginAccessIdentities20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * List distributions. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDistributions20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDistributions20180618Response
     */
	public function listDistributions20180618(
        \OpenAPI\OpenAPI\Models\Operations\ListDistributions20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDistributions20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/distribution');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDistributions20180618Request::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDistributions20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * List the distributions that are associated with a specified AWS WAF web ACL. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDistributionsByWebACLId20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDistributionsByWebACLId20180618Response
     */
	public function listDistributionsByWebACLId20180618(
        \OpenAPI\OpenAPI\Models\Operations\ListDistributionsByWebACLId20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDistributionsByWebACLId20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/distributionsByWebACLId/{WebACLId}', \OpenAPI\OpenAPI\Models\Operations\ListDistributionsByWebACLId20180618Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDistributionsByWebACLId20180618Request::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDistributionsByWebACLId20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * List all field-level encryption configurations that have been created in CloudFront for this account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFieldLevelEncryptionConfigs20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListFieldLevelEncryptionConfigs20180618Response
     */
	public function listFieldLevelEncryptionConfigs20180618(
        \OpenAPI\OpenAPI\Models\Operations\ListFieldLevelEncryptionConfigs20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListFieldLevelEncryptionConfigs20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/field-level-encryption');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListFieldLevelEncryptionConfigs20180618Request::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListFieldLevelEncryptionConfigs20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Request a list of field-level encryption profiles that have been created in CloudFront for this account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFieldLevelEncryptionProfiles20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListFieldLevelEncryptionProfiles20180618Response
     */
	public function listFieldLevelEncryptionProfiles20180618(
        \OpenAPI\OpenAPI\Models\Operations\ListFieldLevelEncryptionProfiles20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListFieldLevelEncryptionProfiles20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/field-level-encryption-profile');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListFieldLevelEncryptionProfiles20180618Request::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListFieldLevelEncryptionProfiles20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Lists invalidation batches. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInvalidations20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListInvalidations20180618Response
     */
	public function listInvalidations20180618(
        \OpenAPI\OpenAPI\Models\Operations\ListInvalidations20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListInvalidations20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/distribution/{DistributionId}/invalidation', \OpenAPI\OpenAPI\Models\Operations\ListInvalidations20180618Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListInvalidations20180618Request::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListInvalidations20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * List all public keys that have been added to CloudFront for this account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListPublicKeys20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListPublicKeys20180618Response
     */
	public function listPublicKeys20180618(
        \OpenAPI\OpenAPI\Models\Operations\ListPublicKeys20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListPublicKeys20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/public-key');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListPublicKeys20180618Request::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListPublicKeys20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * List streaming distributions. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListStreamingDistributions20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListStreamingDistributions20180618Response
     */
	public function listStreamingDistributions20180618(
        \OpenAPI\OpenAPI\Models\Operations\ListStreamingDistributions20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListStreamingDistributions20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/streaming-distribution');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListStreamingDistributions20180618Request::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListStreamingDistributions20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * List tags for a CloudFront resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTagsForResource20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListTagsForResource20180618Response
     */
	public function listTagsForResource20180618(
        \OpenAPI\OpenAPI\Models\Operations\ListTagsForResource20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListTagsForResource20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/tagging#Resource');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListTagsForResource20180618Request::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListTagsForResource20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Add tags to a CloudFront resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagResource20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TagResource20180618Response
     */
	public function tagResource20180618(
        \OpenAPI\OpenAPI\Models\Operations\TagResource20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TagResource20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/tagging#Operation=Tag&Resource');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagResource20180618Request::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagResource20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Remove tags from a CloudFront resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UntagResource20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UntagResource20180618Response
     */
	public function untagResource20180618(
        \OpenAPI\OpenAPI\Models\Operations\UntagResource20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UntagResource20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/tagging#Operation=Untag&Resource');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UntagResource20180618Request::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UntagResource20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update an origin access identity. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCloudFrontOriginAccessIdentity20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCloudFrontOriginAccessIdentity20180618Response
     */
	public function updateCloudFrontOriginAccessIdentity20180618(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCloudFrontOriginAccessIdentity20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCloudFrontOriginAccessIdentity20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/origin-access-identity/cloudfront/{Id}/config', \OpenAPI\OpenAPI\Models\Operations\UpdateCloudFrontOriginAccessIdentity20180618Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCloudFrontOriginAccessIdentity20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485 or $httpResponse->getStatusCode() === 486 or $httpResponse->getStatusCode() === 487) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * <p>Updates the configuration for a web distribution. </p> <important> <p>When you update a distribution, there are more required fields than when you create a distribution. When you update your distribution by using this API action, follow the steps here to get the current configuration and then make your updates, to make sure that you include all of the required fields. To view a summary, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-overview-required-fields.html">Required Fields for Create Distribution and Update Distribution</a> in the <i>Amazon CloudFront Developer Guide</i>.</p> </important> <p>The update process includes getting the current distribution configuration, updating the XML document that is returned to make your changes, and then submitting an <code>UpdateDistribution</code> request to make the updates.</p> <p>For information about updating a distribution using the CloudFront console instead, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-creating-console.html">Creating a Distribution</a> in the <i>Amazon CloudFront Developer Guide</i>.</p> <p> <b>To update a web distribution using the CloudFront API</b> </p> <ol> <li> <p>Submit a <a>GetDistributionConfig</a> request to get the current configuration and an <code>Etag</code> header for the distribution.</p> <note> <p>If you update the distribution again, you must get a new <code>Etag</code> header.</p> </note> </li> <li> <p>Update the XML document that was returned in the response to your <code>GetDistributionConfig</code> request to include your changes. </p> <important> <p>When you edit the XML file, be aware of the following:</p> <ul> <li> <p>You must strip out the ETag parameter that is returned.</p> </li> <li> <p>Additional fields are required when you update a distribution. There may be fields included in the XML file for features that you haven't configured for your distribution. This is expected and required to successfully update the distribution.</p> </li> <li> <p>You can't change the value of <code>CallerReference</code>. If you try to change this value, CloudFront returns an <code>IllegalUpdate</code> error. </p> </li> <li> <p>The new configuration replaces the existing configuration; the values that you specify in an <code>UpdateDistribution</code> request are not merged into your existing configuration. When you add, delete, or replace values in an element that allows multiple values (for example, <code>CNAME</code>), you must specify all of the values that you want to appear in the updated distribution. In addition, you must update the corresponding <code>Quantity</code> element.</p> </li> </ul> </important> </li> <li> <p>Submit an <code>UpdateDistribution</code> request to update the configuration for your distribution:</p> <ul> <li> <p>In the request body, include the XML document that you updated in Step 2. The request body must include an XML document with a <code>DistributionConfig</code> element.</p> </li> <li> <p>Set the value of the HTTP <code>If-Match</code> header to the value of the <code>ETag</code> header that CloudFront returned when you submitted the <code>GetDistributionConfig</code> request in Step 1.</p> </li> </ul> </li> <li> <p>Review the response to the <code>UpdateDistribution</code> request to confirm that the configuration was successfully updated.</p> </li> <li> <p>Optional: Submit a <a>GetDistribution</a> request to confirm that your changes have propagated. When propagation is complete, the value of <code>Status</code> is <code>Deployed</code>.</p> </li> </ol>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDistribution20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDistribution20180618Response
     */
	public function updateDistribution20180618(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDistribution20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDistribution20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/distribution/{Id}/config', \OpenAPI\OpenAPI\Models\Operations\UpdateDistribution20180618Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDistribution20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485 or $httpResponse->getStatusCode() === 486 or $httpResponse->getStatusCode() === 487 or $httpResponse->getStatusCode() === 488 or $httpResponse->getStatusCode() === 489 or $httpResponse->getStatusCode() === 490 or $httpResponse->getStatusCode() === 491 or $httpResponse->getStatusCode() === 492 or $httpResponse->getStatusCode() === 493 or $httpResponse->getStatusCode() === 494 or $httpResponse->getStatusCode() === 495 or $httpResponse->getStatusCode() === 496 or $httpResponse->getStatusCode() === 497 or $httpResponse->getStatusCode() === 498 or $httpResponse->getStatusCode() === 499 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 501 or $httpResponse->getStatusCode() === 502 or $httpResponse->getStatusCode() === 503 or $httpResponse->getStatusCode() === 504 or $httpResponse->getStatusCode() === 505 or $httpResponse->getStatusCode() === 506 or $httpResponse->getStatusCode() === 507 or $httpResponse->getStatusCode() === 508 or $httpResponse->getStatusCode() === 509 or $httpResponse->getStatusCode() === 510 or $httpResponse->getStatusCode() === 511 or $httpResponse->getStatusCode() === 512 or $httpResponse->getStatusCode() === 513 or $httpResponse->getStatusCode() === 514 or $httpResponse->getStatusCode() === 515 or $httpResponse->getStatusCode() === 516 or $httpResponse->getStatusCode() === 517 or $httpResponse->getStatusCode() === 518 or $httpResponse->getStatusCode() === 519 or $httpResponse->getStatusCode() === 520 or $httpResponse->getStatusCode() === 521 or $httpResponse->getStatusCode() === 522) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update a field-level encryption configuration. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateFieldLevelEncryptionConfig20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateFieldLevelEncryptionConfig20180618Response
     */
	public function updateFieldLevelEncryptionConfig20180618(
        \OpenAPI\OpenAPI\Models\Operations\UpdateFieldLevelEncryptionConfig20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateFieldLevelEncryptionConfig20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/field-level-encryption/{Id}/config', \OpenAPI\OpenAPI\Models\Operations\UpdateFieldLevelEncryptionConfig20180618Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateFieldLevelEncryptionConfig20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485 or $httpResponse->getStatusCode() === 486 or $httpResponse->getStatusCode() === 487 or $httpResponse->getStatusCode() === 488 or $httpResponse->getStatusCode() === 489 or $httpResponse->getStatusCode() === 490) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update a field-level encryption profile. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateFieldLevelEncryptionProfile20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateFieldLevelEncryptionProfile20180618Response
     */
	public function updateFieldLevelEncryptionProfile20180618(
        \OpenAPI\OpenAPI\Models\Operations\UpdateFieldLevelEncryptionProfile20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateFieldLevelEncryptionProfile20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/field-level-encryption-profile/{Id}/config', \OpenAPI\OpenAPI\Models\Operations\UpdateFieldLevelEncryptionProfile20180618Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateFieldLevelEncryptionProfile20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485 or $httpResponse->getStatusCode() === 486 or $httpResponse->getStatusCode() === 487 or $httpResponse->getStatusCode() === 488 or $httpResponse->getStatusCode() === 489 or $httpResponse->getStatusCode() === 490 or $httpResponse->getStatusCode() === 491) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update public key information. Note that the only value you can change is the comment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePublicKey20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePublicKey20180618Response
     */
	public function updatePublicKey20180618(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePublicKey20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePublicKey20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/public-key/{Id}/config', \OpenAPI\OpenAPI\Models\Operations\UpdatePublicKey20180618Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePublicKey20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485 or $httpResponse->getStatusCode() === 486) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update a streaming distribution. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateStreamingDistribution20180618Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateStreamingDistribution20180618Response
     */
	public function updateStreamingDistribution20180618(
        \OpenAPI\OpenAPI\Models\Operations\UpdateStreamingDistribution20180618Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateStreamingDistribution20180618Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/2018-06-18/streaming-distribution/{Id}/config', \OpenAPI\OpenAPI\Models\Operations\UpdateStreamingDistribution20180618Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateStreamingDistribution20180618Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485 or $httpResponse->getStatusCode() === 486 or $httpResponse->getStatusCode() === 487 or $httpResponse->getStatusCode() === 488 or $httpResponse->getStatusCode() === 489 or $httpResponse->getStatusCode() === 490 or $httpResponse->getStatusCode() === 491 or $httpResponse->getStatusCode() === 492) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}