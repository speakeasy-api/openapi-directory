/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://studio.twilio.com",
	};
    /**
	 * CREATE_ENGAGEMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_ENGAGEMENT_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * CREATE_EXECUTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_EXECUTION_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * DELETE_ENGAGEMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_ENGAGEMENT_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * DELETE_EXECUTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_EXECUTION_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * DELETE_FLOW_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_FLOW_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * FETCH_ENGAGEMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ENGAGEMENT_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * FETCH_ENGAGEMENT_CONTEXT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ENGAGEMENT_CONTEXT_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * FETCH_EXECUTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_EXECUTION_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * FETCH_EXECUTION_CONTEXT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_EXECUTION_CONTEXT_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * FETCH_EXECUTION_STEP_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_EXECUTION_STEP_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * FETCH_EXECUTION_STEP_CONTEXT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_EXECUTION_STEP_CONTEXT_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * FETCH_FLOW_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_FLOW_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * FETCH_STEP_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_STEP_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * FETCH_STEP_CONTEXT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_STEP_CONTEXT_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * LIST_ENGAGEMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_ENGAGEMENT_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * LIST_EXECUTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_EXECUTION_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * LIST_EXECUTION_STEP_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_EXECUTION_STEP_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * LIST_FLOW_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_FLOW_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * LIST_STEP_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_STEP_SERVERS = {
        "https://studio.twilio.com",
    };
	
    /**
	 * UPDATE_EXECUTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_EXECUTION_SERVERS = {
        "https://studio.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
	}

    /**
     * Triggers a new Engagement for the Flow
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateEngagementResponse createEngagement(org.openapis.openapi.models.operations.CreateEngagementRequest request, org.openapis.openapi.models.operations.CreateEngagementSecurity security) throws Exception {
        return this.createEngagement(request, security, null);
    }

    /**
     * Triggers a new Engagement for the Flow
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateEngagementResponse createEngagement(org.openapis.openapi.models.operations.CreateEngagementRequest request, org.openapis.openapi.models.operations.CreateEngagementSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_ENGAGEMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateEngagementRequest.class, baseUrl, "/v1/Flows/{FlowSid}/Engagements", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateEngagementResponse res = new org.openapis.openapi.models.operations.CreateEngagementResponse() {{
            studioV1FlowEngagement = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StudioV1FlowEngagement out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StudioV1FlowEngagement.class);
                res.studioV1FlowEngagement = out;
            }
        }

        return res;
    }

    /**
     * Triggers a new Execution for the Flow
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateExecutionResponse createExecution(org.openapis.openapi.models.operations.CreateExecutionRequest request, org.openapis.openapi.models.operations.CreateExecutionSecurity security) throws Exception {
        return this.createExecution(request, security, null);
    }

    /**
     * Triggers a new Execution for the Flow
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateExecutionResponse createExecution(org.openapis.openapi.models.operations.CreateExecutionRequest request, org.openapis.openapi.models.operations.CreateExecutionSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_EXECUTION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateExecutionRequest.class, baseUrl, "/v1/Flows/{FlowSid}/Executions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateExecutionResponse res = new org.openapis.openapi.models.operations.CreateExecutionResponse() {{
            studioV1FlowExecution = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StudioV1FlowExecution out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StudioV1FlowExecution.class);
                res.studioV1FlowExecution = out;
            }
        }

        return res;
    }

    /**
     * Delete this Engagement and all Steps relating to it.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteEngagementResponse deleteEngagement(org.openapis.openapi.models.operations.DeleteEngagementRequest request, org.openapis.openapi.models.operations.DeleteEngagementSecurity security) throws Exception {
        return this.deleteEngagement(request, security, null);
    }

    /**
     * Delete this Engagement and all Steps relating to it.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteEngagementResponse deleteEngagement(org.openapis.openapi.models.operations.DeleteEngagementRequest request, org.openapis.openapi.models.operations.DeleteEngagementSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_ENGAGEMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteEngagementRequest.class, baseUrl, "/v1/Flows/{FlowSid}/Engagements/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteEngagementResponse res = new org.openapis.openapi.models.operations.DeleteEngagementResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete the Execution and all Steps relating to it.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteExecutionResponse deleteExecution(org.openapis.openapi.models.operations.DeleteExecutionRequest request, org.openapis.openapi.models.operations.DeleteExecutionSecurity security) throws Exception {
        return this.deleteExecution(request, security, null);
    }

    /**
     * Delete the Execution and all Steps relating to it.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteExecutionResponse deleteExecution(org.openapis.openapi.models.operations.DeleteExecutionRequest request, org.openapis.openapi.models.operations.DeleteExecutionSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_EXECUTION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteExecutionRequest.class, baseUrl, "/v1/Flows/{FlowSid}/Executions/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteExecutionResponse res = new org.openapis.openapi.models.operations.DeleteExecutionResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific Flow.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteFlowResponse deleteFlow(org.openapis.openapi.models.operations.DeleteFlowRequest request, org.openapis.openapi.models.operations.DeleteFlowSecurity security) throws Exception {
        return this.deleteFlow(request, security, null);
    }

    /**
     * Delete a specific Flow.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteFlowResponse deleteFlow(org.openapis.openapi.models.operations.DeleteFlowRequest request, org.openapis.openapi.models.operations.DeleteFlowSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_FLOW_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteFlowRequest.class, baseUrl, "/v1/Flows/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteFlowResponse res = new org.openapis.openapi.models.operations.DeleteFlowResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Retrieve an Engagement
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchEngagementResponse fetchEngagement(org.openapis.openapi.models.operations.FetchEngagementRequest request, org.openapis.openapi.models.operations.FetchEngagementSecurity security) throws Exception {
        return this.fetchEngagement(request, security, null);
    }

    /**
     * Retrieve an Engagement
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchEngagementResponse fetchEngagement(org.openapis.openapi.models.operations.FetchEngagementRequest request, org.openapis.openapi.models.operations.FetchEngagementSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_ENGAGEMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchEngagementRequest.class, baseUrl, "/v1/Flows/{FlowSid}/Engagements/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchEngagementResponse res = new org.openapis.openapi.models.operations.FetchEngagementResponse() {{
            studioV1FlowEngagement = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StudioV1FlowEngagement out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StudioV1FlowEngagement.class);
                res.studioV1FlowEngagement = out;
            }
        }

        return res;
    }

    /**
     * Retrieve the most recent context for an Engagement.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchEngagementContextResponse fetchEngagementContext(org.openapis.openapi.models.operations.FetchEngagementContextRequest request, org.openapis.openapi.models.operations.FetchEngagementContextSecurity security) throws Exception {
        return this.fetchEngagementContext(request, security, null);
    }

    /**
     * Retrieve the most recent context for an Engagement.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchEngagementContextResponse fetchEngagementContext(org.openapis.openapi.models.operations.FetchEngagementContextRequest request, org.openapis.openapi.models.operations.FetchEngagementContextSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_ENGAGEMENT_CONTEXT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchEngagementContextRequest.class, baseUrl, "/v1/Flows/{FlowSid}/Engagements/{EngagementSid}/Context", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchEngagementContextResponse res = new org.openapis.openapi.models.operations.FetchEngagementContextResponse() {{
            studioV1FlowEngagementEngagementContext = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StudioV1FlowEngagementEngagementContext out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StudioV1FlowEngagementEngagementContext.class);
                res.studioV1FlowEngagementEngagementContext = out;
            }
        }

        return res;
    }

    /**
     * Retrieve an Execution
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchExecutionResponse fetchExecution(org.openapis.openapi.models.operations.FetchExecutionRequest request, org.openapis.openapi.models.operations.FetchExecutionSecurity security) throws Exception {
        return this.fetchExecution(request, security, null);
    }

    /**
     * Retrieve an Execution
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchExecutionResponse fetchExecution(org.openapis.openapi.models.operations.FetchExecutionRequest request, org.openapis.openapi.models.operations.FetchExecutionSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_EXECUTION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchExecutionRequest.class, baseUrl, "/v1/Flows/{FlowSid}/Executions/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchExecutionResponse res = new org.openapis.openapi.models.operations.FetchExecutionResponse() {{
            studioV1FlowExecution = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StudioV1FlowExecution out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StudioV1FlowExecution.class);
                res.studioV1FlowExecution = out;
            }
        }

        return res;
    }

    /**
     * Retrieve the most recent context for an Execution.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchExecutionContextResponse fetchExecutionContext(org.openapis.openapi.models.operations.FetchExecutionContextRequest request, org.openapis.openapi.models.operations.FetchExecutionContextSecurity security) throws Exception {
        return this.fetchExecutionContext(request, security, null);
    }

    /**
     * Retrieve the most recent context for an Execution.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchExecutionContextResponse fetchExecutionContext(org.openapis.openapi.models.operations.FetchExecutionContextRequest request, org.openapis.openapi.models.operations.FetchExecutionContextSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_EXECUTION_CONTEXT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchExecutionContextRequest.class, baseUrl, "/v1/Flows/{FlowSid}/Executions/{ExecutionSid}/Context", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchExecutionContextResponse res = new org.openapis.openapi.models.operations.FetchExecutionContextResponse() {{
            studioV1FlowExecutionExecutionContext = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StudioV1FlowExecutionExecutionContext out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StudioV1FlowExecutionExecutionContext.class);
                res.studioV1FlowExecutionExecutionContext = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a Step.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchExecutionStepResponse fetchExecutionStep(org.openapis.openapi.models.operations.FetchExecutionStepRequest request, org.openapis.openapi.models.operations.FetchExecutionStepSecurity security) throws Exception {
        return this.fetchExecutionStep(request, security, null);
    }

    /**
     * Retrieve a Step.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchExecutionStepResponse fetchExecutionStep(org.openapis.openapi.models.operations.FetchExecutionStepRequest request, org.openapis.openapi.models.operations.FetchExecutionStepSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_EXECUTION_STEP_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchExecutionStepRequest.class, baseUrl, "/v1/Flows/{FlowSid}/Executions/{ExecutionSid}/Steps/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchExecutionStepResponse res = new org.openapis.openapi.models.operations.FetchExecutionStepResponse() {{
            studioV1FlowExecutionExecutionStep = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StudioV1FlowExecutionExecutionStep out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StudioV1FlowExecutionExecutionStep.class);
                res.studioV1FlowExecutionExecutionStep = out;
            }
        }

        return res;
    }

    /**
     * Retrieve the context for an Execution Step.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchExecutionStepContextResponse fetchExecutionStepContext(org.openapis.openapi.models.operations.FetchExecutionStepContextRequest request, org.openapis.openapi.models.operations.FetchExecutionStepContextSecurity security) throws Exception {
        return this.fetchExecutionStepContext(request, security, null);
    }

    /**
     * Retrieve the context for an Execution Step.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchExecutionStepContextResponse fetchExecutionStepContext(org.openapis.openapi.models.operations.FetchExecutionStepContextRequest request, org.openapis.openapi.models.operations.FetchExecutionStepContextSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_EXECUTION_STEP_CONTEXT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchExecutionStepContextRequest.class, baseUrl, "/v1/Flows/{FlowSid}/Executions/{ExecutionSid}/Steps/{StepSid}/Context", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchExecutionStepContextResponse res = new org.openapis.openapi.models.operations.FetchExecutionStepContextResponse() {{
            studioV1FlowExecutionExecutionStepExecutionStepContext = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StudioV1FlowExecutionExecutionStepExecutionStepContext out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StudioV1FlowExecutionExecutionStepExecutionStepContext.class);
                res.studioV1FlowExecutionExecutionStepExecutionStepContext = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a specific Flow.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchFlowResponse fetchFlow(org.openapis.openapi.models.operations.FetchFlowRequest request, org.openapis.openapi.models.operations.FetchFlowSecurity security) throws Exception {
        return this.fetchFlow(request, security, null);
    }

    /**
     * Retrieve a specific Flow.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchFlowResponse fetchFlow(org.openapis.openapi.models.operations.FetchFlowRequest request, org.openapis.openapi.models.operations.FetchFlowSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_FLOW_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchFlowRequest.class, baseUrl, "/v1/Flows/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchFlowResponse res = new org.openapis.openapi.models.operations.FetchFlowResponse() {{
            studioV1Flow = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StudioV1Flow out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StudioV1Flow.class);
                res.studioV1Flow = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a Step.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchStepResponse fetchStep(org.openapis.openapi.models.operations.FetchStepRequest request, org.openapis.openapi.models.operations.FetchStepSecurity security) throws Exception {
        return this.fetchStep(request, security, null);
    }

    /**
     * Retrieve a Step.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchStepResponse fetchStep(org.openapis.openapi.models.operations.FetchStepRequest request, org.openapis.openapi.models.operations.FetchStepSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_STEP_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchStepRequest.class, baseUrl, "/v1/Flows/{FlowSid}/Engagements/{EngagementSid}/Steps/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchStepResponse res = new org.openapis.openapi.models.operations.FetchStepResponse() {{
            studioV1FlowEngagementStep = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StudioV1FlowEngagementStep out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StudioV1FlowEngagementStep.class);
                res.studioV1FlowEngagementStep = out;
            }
        }

        return res;
    }

    /**
     * Retrieve the context for an Engagement Step.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchStepContextResponse fetchStepContext(org.openapis.openapi.models.operations.FetchStepContextRequest request, org.openapis.openapi.models.operations.FetchStepContextSecurity security) throws Exception {
        return this.fetchStepContext(request, security, null);
    }

    /**
     * Retrieve the context for an Engagement Step.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchStepContextResponse fetchStepContext(org.openapis.openapi.models.operations.FetchStepContextRequest request, org.openapis.openapi.models.operations.FetchStepContextSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_STEP_CONTEXT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchStepContextRequest.class, baseUrl, "/v1/Flows/{FlowSid}/Engagements/{EngagementSid}/Steps/{StepSid}/Context", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchStepContextResponse res = new org.openapis.openapi.models.operations.FetchStepContextResponse() {{
            studioV1FlowEngagementStepStepContext = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StudioV1FlowEngagementStepStepContext out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StudioV1FlowEngagementStepStepContext.class);
                res.studioV1FlowEngagementStepStepContext = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Engagements for the Flow.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListEngagementResponse listEngagement(org.openapis.openapi.models.operations.ListEngagementRequest request, org.openapis.openapi.models.operations.ListEngagementSecurity security) throws Exception {
        return this.listEngagement(request, security, null);
    }

    /**
     * Retrieve a list of all Engagements for the Flow.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListEngagementResponse listEngagement(org.openapis.openapi.models.operations.ListEngagementRequest request, org.openapis.openapi.models.operations.ListEngagementSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_ENGAGEMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListEngagementRequest.class, baseUrl, "/v1/Flows/{FlowSid}/Engagements", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListEngagementRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListEngagementResponse res = new org.openapis.openapi.models.operations.ListEngagementResponse() {{
            listEngagementResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListEngagementListEngagementResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListEngagementListEngagementResponse.class);
                res.listEngagementResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Executions for the Flow.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListExecutionResponse listExecution(org.openapis.openapi.models.operations.ListExecutionRequest request, org.openapis.openapi.models.operations.ListExecutionSecurity security) throws Exception {
        return this.listExecution(request, security, null);
    }

    /**
     * Retrieve a list of all Executions for the Flow.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListExecutionResponse listExecution(org.openapis.openapi.models.operations.ListExecutionRequest request, org.openapis.openapi.models.operations.ListExecutionSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_EXECUTION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListExecutionRequest.class, baseUrl, "/v1/Flows/{FlowSid}/Executions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListExecutionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListExecutionResponse res = new org.openapis.openapi.models.operations.ListExecutionResponse() {{
            listExecutionResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListExecutionListExecutionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListExecutionListExecutionResponse.class);
                res.listExecutionResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Steps for an Execution.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListExecutionStepResponse listExecutionStep(org.openapis.openapi.models.operations.ListExecutionStepRequest request, org.openapis.openapi.models.operations.ListExecutionStepSecurity security) throws Exception {
        return this.listExecutionStep(request, security, null);
    }

    /**
     * Retrieve a list of all Steps for an Execution.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListExecutionStepResponse listExecutionStep(org.openapis.openapi.models.operations.ListExecutionStepRequest request, org.openapis.openapi.models.operations.ListExecutionStepSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_EXECUTION_STEP_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListExecutionStepRequest.class, baseUrl, "/v1/Flows/{FlowSid}/Executions/{ExecutionSid}/Steps", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListExecutionStepRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListExecutionStepResponse res = new org.openapis.openapi.models.operations.ListExecutionStepResponse() {{
            listExecutionStepResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListExecutionStepListExecutionStepResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListExecutionStepListExecutionStepResponse.class);
                res.listExecutionStepResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Flows.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListFlowResponse listFlow(org.openapis.openapi.models.operations.ListFlowRequest request, org.openapis.openapi.models.operations.ListFlowSecurity security) throws Exception {
        return this.listFlow(request, security, null);
    }

    /**
     * Retrieve a list of all Flows.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListFlowResponse listFlow(org.openapis.openapi.models.operations.ListFlowRequest request, org.openapis.openapi.models.operations.ListFlowSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_FLOW_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Flows");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListFlowRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListFlowResponse res = new org.openapis.openapi.models.operations.ListFlowResponse() {{
            listFlowResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListFlowListFlowResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListFlowListFlowResponse.class);
                res.listFlowResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Steps for an Engagement.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListStepResponse listStep(org.openapis.openapi.models.operations.ListStepRequest request, org.openapis.openapi.models.operations.ListStepSecurity security) throws Exception {
        return this.listStep(request, security, null);
    }

    /**
     * Retrieve a list of all Steps for an Engagement.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListStepResponse listStep(org.openapis.openapi.models.operations.ListStepRequest request, org.openapis.openapi.models.operations.ListStepSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_STEP_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListStepRequest.class, baseUrl, "/v1/Flows/{FlowSid}/Engagements/{EngagementSid}/Steps", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListStepRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListStepResponse res = new org.openapis.openapi.models.operations.ListStepResponse() {{
            listStepResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListStepListStepResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListStepListStepResponse.class);
                res.listStepResponse = out;
            }
        }

        return res;
    }

    /**
     * Update the status of an Execution to `ended`.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateExecutionResponse updateExecution(org.openapis.openapi.models.operations.UpdateExecutionRequest request, org.openapis.openapi.models.operations.UpdateExecutionSecurity security) throws Exception {
        return this.updateExecution(request, security, null);
    }

    /**
     * Update the status of an Execution to `ended`.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateExecutionResponse updateExecution(org.openapis.openapi.models.operations.UpdateExecutionRequest request, org.openapis.openapi.models.operations.UpdateExecutionSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_EXECUTION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateExecutionRequest.class, baseUrl, "/v1/Flows/{FlowSid}/Executions/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateExecutionResponse res = new org.openapis.openapi.models.operations.UpdateExecutionResponse() {{
            studioV1FlowExecution = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StudioV1FlowExecution out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StudioV1FlowExecution.class);
                res.studioV1FlowExecution = out;
            }
        }

        return res;
    }
}