"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import check as shared_check
from ..shared import continuouscheckentry as shared_continuouscheckentry
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class ContinuousCheckContinuousCheckStatusEnum(str, Enum):
    r"""Shows whether the background check score rose, fell, stood the same or was just created"""
    NEW = 'new'
    UP = 'up'
    DOWN = 'down'
    SAME = 'same'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ContinuousCheck:
    r"""Continuous check allows for background checks to be performed on the same people or vehicles periodically and notifies if new information is found. Allowing companies to keep an eye on their workforce or vehicle fleet for any recent wrongdoing they might be involved in."""
    
    continuous_check_status: ContinuousCheckContinuousCheckStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContinuousCheckStatus') }})
    r"""Shows whether the background check score rose, fell, stood the same or was just created"""  
    frequency: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Frequency') }})
    r"""Time between background checks. It can be daily, weekly, monthly, yearly or have a custom frequency written as a number accompanied by d: day, w: week, m: month, y: year for instance: 3d: every three days, 2w: every two weeks"""  
    last_check_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastCheckID') }})
    r"""Last check ID"""  
    continuous_check_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContinuousCheckID'), 'exclude': lambda f: f is None }})
    r"""Continuous check ID [partition key and sort key]"""  
    creation_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Continuous check creation date in RFC3339 format"""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Enabled'), 'exclude': lambda f: f is None }})
    r"""Indicates whether continuous check is enabled"""  
    history: Optional[shared_continuouscheckentry.ContinuousCheckEntry] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('History'), 'exclude': lambda f: f is None }})
    r"""Represents to changelog entry of a continuous check"""  
    next_run_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NextRunDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Next background check date, in RFC3339 format (without time)"""  
    original_check: Optional[shared_check.Check] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OriginalCheck'), 'exclude': lambda f: f is None }})
    r"""Represents a background check"""  
    update_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdateDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Continuous check update date in RFC3339 format"""  
    