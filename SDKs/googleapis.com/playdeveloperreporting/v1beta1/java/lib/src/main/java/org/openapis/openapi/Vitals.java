/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Vitals {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Vitals(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Searches all error issues in which reports have been grouped.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PlaydeveloperreportingVitalsErrorsIssuesSearchResponse playdeveloperreportingVitalsErrorsIssuesSearch(org.openapis.openapi.models.operations.PlaydeveloperreportingVitalsErrorsIssuesSearchRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PlaydeveloperreportingVitalsErrorsIssuesSearchPathParams.class, baseUrl, "/v1beta1/{parent}/errorIssues:search", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.PlaydeveloperreportingVitalsErrorsIssuesSearchQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PlaydeveloperreportingVitalsErrorsIssuesSearchResponse res = new org.openapis.openapi.models.operations.PlaydeveloperreportingVitalsErrorsIssuesSearchResponse() {{
            googlePlayDeveloperReportingV1beta1SearchErrorIssuesResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GooglePlayDeveloperReportingV1beta1SearchErrorIssuesResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GooglePlayDeveloperReportingV1beta1SearchErrorIssuesResponse.class);
                res.googlePlayDeveloperReportingV1beta1SearchErrorIssuesResponse = out;
            }
        }

        return res;
    }

    /**
     * Searches all error reports received for an app.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PlaydeveloperreportingVitalsErrorsReportsSearchResponse playdeveloperreportingVitalsErrorsReportsSearch(org.openapis.openapi.models.operations.PlaydeveloperreportingVitalsErrorsReportsSearchRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PlaydeveloperreportingVitalsErrorsReportsSearchPathParams.class, baseUrl, "/v1beta1/{parent}/errorReports:search", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.PlaydeveloperreportingVitalsErrorsReportsSearchQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PlaydeveloperreportingVitalsErrorsReportsSearchResponse res = new org.openapis.openapi.models.operations.PlaydeveloperreportingVitalsErrorsReportsSearchResponse() {{
            googlePlayDeveloperReportingV1beta1SearchErrorReportsResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GooglePlayDeveloperReportingV1beta1SearchErrorReportsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GooglePlayDeveloperReportingV1beta1SearchErrorReportsResponse.class);
                res.googlePlayDeveloperReportingV1beta1SearchErrorReportsResponse = out;
            }
        }

        return res;
    }

    /**
     * Describes the properties of the metric set.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateGetResponse playdeveloperreportingVitalsStuckbackgroundwakelockrateGet(org.openapis.openapi.models.operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateGetRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateGetPathParams.class, baseUrl, "/v1beta1/{name}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateGetQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateGetResponse res = new org.openapis.openapi.models.operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateGetResponse() {{
            googlePlayDeveloperReportingV1beta1StuckBackgroundWakelockRateMetricSet = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GooglePlayDeveloperReportingV1beta1StuckBackgroundWakelockRateMetricSet out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GooglePlayDeveloperReportingV1beta1StuckBackgroundWakelockRateMetricSet.class);
                res.googlePlayDeveloperReportingV1beta1StuckBackgroundWakelockRateMetricSet = out;
            }
        }

        return res;
    }

    /**
     * Queries the metrics in the metric set.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateQueryResponse playdeveloperreportingVitalsStuckbackgroundwakelockrateQuery(org.openapis.openapi.models.operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateQueryRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateQueryPathParams.class, baseUrl, "/v1beta1/{name}:query", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateQueryQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateQueryResponse res = new org.openapis.openapi.models.operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateQueryResponse() {{
            googlePlayDeveloperReportingV1beta1QueryStuckBackgroundWakelockRateMetricSetResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GooglePlayDeveloperReportingV1beta1QueryStuckBackgroundWakelockRateMetricSetResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GooglePlayDeveloperReportingV1beta1QueryStuckBackgroundWakelockRateMetricSetResponse.class);
                res.googlePlayDeveloperReportingV1beta1QueryStuckBackgroundWakelockRateMetricSetResponse = out;
            }
        }

        return res;
    }
}