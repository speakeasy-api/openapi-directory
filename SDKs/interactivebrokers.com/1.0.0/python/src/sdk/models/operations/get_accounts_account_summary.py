"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetAccountsAccountSummaryRequest:
    
    account: str = dataclasses.field(metadata={'path_param': { 'field_name': 'account', 'style': 'simple', 'explode': False }})
    r"""Account Number"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAccountsAccountSummary200ApplicationJSONInfo:
    
    account_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountCode'), 'exclude': lambda f: f is None }})  
    account_ready: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountReady'), 'exclude': lambda f: f is None }})  
    account_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountType'), 'exclude': lambda f: f is None }})  
    cushion: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Cushion'), 'exclude': lambda f: f is None }})  
    day_trades_remaining: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DayTradesRemaining'), 'exclude': lambda f: f is None }})  
    day_trades_remaining_t: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DayTradesRemainingT'), 'exclude': lambda f: f is None }})  
    day_trades_remaining_t_plus_2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DayTradesRemainingT+2'), 'exclude': lambda f: f is None }})  
    day_trades_remaining_t_plus_3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DayTradesRemainingT+3'), 'exclude': lambda f: f is None }})  
    day_trades_remaining_t_plus_4: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DayTradesRemainingT+4'), 'exclude': lambda f: f is None }})  
    highest_severity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HighestSeverity'), 'exclude': lambda f: f is None }})  
    leverage_s: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Leverage-S'), 'exclude': lambda f: f is None }})  
    look_ahead_next_change: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LookAheadNextChange'), 'exclude': lambda f: f is None }})  
    segment_title_c: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SegmentTitle-C'), 'exclude': lambda f: f is None }})  
    segment_title_s: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SegmentTitle-S'), 'exclude': lambda f: f is None }})  
    trading_type_s: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TradingType-S'), 'exclude': lambda f: f is None }})  
    what_if_pm_enabled: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WhatIfPMEnabled'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAccountsAccountSummary200ApplicationJSONLedger:
    
    cash_balance: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CashBalance'), 'exclude': lambda f: f is None }})  
    cash_balance_fx_segment: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CashBalanceFXSegment'), 'exclude': lambda f: f is None }})  
    cash_cum_qty: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CashCumQty'), 'exclude': lambda f: f is None }})  
    exchange_rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExchangeRate'), 'exclude': lambda f: f is None }})  
    future_option_market_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FutureOptionMarketValue'), 'exclude': lambda f: f is None }})  
    future_pnl: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FuturePNL'), 'exclude': lambda f: f is None }})  
    net_dividend: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetDividend'), 'exclude': lambda f: f is None }})  
    net_interest: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetInterest'), 'exclude': lambda f: f is None }})  
    net_liquidation: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetLiquidation'), 'exclude': lambda f: f is None }})  
    option_market_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OptionMarketValue'), 'exclude': lambda f: f is None }})  
    realized_pnl: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RealizedPNL'), 'exclude': lambda f: f is None }})  
    stock_market_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StockMarketValue'), 'exclude': lambda f: f is None }})  
    total_cash_balance: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalCashBalance'), 'exclude': lambda f: f is None }})  
    unrealized_pnl: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UnrealizedPNL'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAccountsAccountSummary200ApplicationJSONSummary:
    
    accrued_cash: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccruedCash'), 'exclude': lambda f: f is None }})  
    accrued_cash_c: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccruedCash-C'), 'exclude': lambda f: f is None }})  
    accrued_cash_s: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccruedCash-S'), 'exclude': lambda f: f is None }})  
    accrued_dividend: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccruedDividend'), 'exclude': lambda f: f is None }})  
    accrued_dividend_c: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccruedDividend-C'), 'exclude': lambda f: f is None }})  
    accrued_dividend_s: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccruedDividend-S'), 'exclude': lambda f: f is None }})  
    available_funds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AvailableFunds'), 'exclude': lambda f: f is None }})  
    available_funds_c: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AvailableFunds-C'), 'exclude': lambda f: f is None }})  
    available_funds_s: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AvailableFunds-S'), 'exclude': lambda f: f is None }})  
    billable: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Billable'), 'exclude': lambda f: f is None }})  
    billable_c: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Billable-C'), 'exclude': lambda f: f is None }})  
    billable_s: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Billable-S'), 'exclude': lambda f: f is None }})  
    buying_power: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BuyingPower'), 'exclude': lambda f: f is None }})  
    equity_with_loan_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EquityWithLoanValue'), 'exclude': lambda f: f is None }})  
    equity_with_loan_value_c: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EquityWithLoanValue-C'), 'exclude': lambda f: f is None }})  
    equity_with_loan_value_s: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EquityWithLoanValue-S'), 'exclude': lambda f: f is None }})  
    excess_liquidity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExcessLiquidity'), 'exclude': lambda f: f is None }})  
    excess_liquidity_c: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExcessLiquidity-C'), 'exclude': lambda f: f is None }})  
    excess_liquidity_s: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExcessLiquidity-S'), 'exclude': lambda f: f is None }})  
    full_available_funds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FullAvailableFunds'), 'exclude': lambda f: f is None }})  
    full_available_funds_c: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FullAvailableFunds-C'), 'exclude': lambda f: f is None }})  
    full_available_funds_s: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FullAvailableFunds-S'), 'exclude': lambda f: f is None }})  
    full_excess_liquidity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FullExcessLiquidity'), 'exclude': lambda f: f is None }})  
    full_excess_liquidity_c: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FullExcessLiquidity-C'), 'exclude': lambda f: f is None }})  
    full_excess_liquidity_s: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FullExcessLiquidity-S'), 'exclude': lambda f: f is None }})  
    full_init_margin_req: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FullInitMarginReq'), 'exclude': lambda f: f is None }})  
    full_init_margin_req_c: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FullInitMarginReq-C'), 'exclude': lambda f: f is None }})  
    full_init_margin_req_s: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FullInitMarginReq-S'), 'exclude': lambda f: f is None }})  
    full_maint_margin_req: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FullMaintMarginReq'), 'exclude': lambda f: f is None }})  
    full_maint_margin_req_c: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FullMaintMarginReq-C'), 'exclude': lambda f: f is None }})  
    full_maint_margin_req_s: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FullMaintMarginReq-S'), 'exclude': lambda f: f is None }})  
    gross_position_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GrossPositionValue'), 'exclude': lambda f: f is None }})  
    gross_position_value_c: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GrossPositionValue-C'), 'exclude': lambda f: f is None }})  
    gross_position_value_s: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GrossPositionValue-S'), 'exclude': lambda f: f is None }})  
    indian_stock_haircut: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IndianStockHaircut'), 'exclude': lambda f: f is None }})  
    indian_stock_haircut_c: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IndianStockHaircut-C'), 'exclude': lambda f: f is None }})  
    indian_stock_haircut_s: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IndianStockHaircut-S'), 'exclude': lambda f: f is None }})  
    init_margin_req: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InitMarginReq'), 'exclude': lambda f: f is None }})  
    init_margin_req_c: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InitMarginReq-C'), 'exclude': lambda f: f is None }})  
    init_margin_req_s: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InitMarginReq-S'), 'exclude': lambda f: f is None }})  
    insured_deposit: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InsuredDeposit'), 'exclude': lambda f: f is None }})  
    insured_deposit_c: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InsuredDeposit-C'), 'exclude': lambda f: f is None }})  
    insured_deposit_s: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InsuredDeposit-S'), 'exclude': lambda f: f is None }})  
    look_ahead_available_funds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LookAheadAvailableFunds'), 'exclude': lambda f: f is None }})  
    look_ahead_available_funds_c: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LookAheadAvailableFunds-C'), 'exclude': lambda f: f is None }})  
    look_ahead_available_funds_s: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LookAheadAvailableFunds-S'), 'exclude': lambda f: f is None }})  
    look_ahead_excess_liquidity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LookAheadExcessLiquidity'), 'exclude': lambda f: f is None }})  
    look_ahead_excess_liquidity_c: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LookAheadExcessLiquidity-C'), 'exclude': lambda f: f is None }})  
    look_ahead_excess_liquidity_s: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LookAheadExcessLiquidity-S'), 'exclude': lambda f: f is None }})  
    look_ahead_init_margin_req: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LookAheadInitMarginReq'), 'exclude': lambda f: f is None }})  
    look_ahead_init_margin_req_c: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LookAheadInitMarginReq-C'), 'exclude': lambda f: f is None }})  
    look_ahead_init_margin_req_s: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LookAheadInitMarginReq-S'), 'exclude': lambda f: f is None }})  
    look_ahead_maint_margin_req: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LookAheadMaintMarginReq'), 'exclude': lambda f: f is None }})  
    look_ahead_maint_margin_req_c: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LookAheadMaintMarginReq-C'), 'exclude': lambda f: f is None }})  
    look_ahead_maint_margin_req_s: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LookAheadMaintMarginReq-S'), 'exclude': lambda f: f is None }})  
    maint_margin_req: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaintMarginReq'), 'exclude': lambda f: f is None }})  
    maint_margin_req_c: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaintMarginReq-C'), 'exclude': lambda f: f is None }})  
    maint_margin_req_s: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaintMarginReq-S'), 'exclude': lambda f: f is None }})  
    net_liquidation: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetLiquidation'), 'exclude': lambda f: f is None }})  
    net_liquidation_c: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetLiquidation-C'), 'exclude': lambda f: f is None }})  
    net_liquidation_s: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetLiquidation-S'), 'exclude': lambda f: f is None }})  
    net_liquidation_uncertainty: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetLiquidationUncertainty'), 'exclude': lambda f: f is None }})  
    pa_shares_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PASharesValue'), 'exclude': lambda f: f is None }})  
    pa_shares_value_c: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PASharesValue-C'), 'exclude': lambda f: f is None }})  
    pa_shares_value_s: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PASharesValue-S'), 'exclude': lambda f: f is None }})  
    post_expiration_excess: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PostExpirationExcess'), 'exclude': lambda f: f is None }})  
    post_expiration_excess_c: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PostExpirationExcess-C'), 'exclude': lambda f: f is None }})  
    post_expiration_excess_s: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PostExpirationExcess-S'), 'exclude': lambda f: f is None }})  
    post_expiration_margin: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PostExpirationMargin'), 'exclude': lambda f: f is None }})  
    post_expiration_margin_c: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PostExpirationMargin-C'), 'exclude': lambda f: f is None }})  
    post_expiration_margin_s: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PostExpirationMargin-S'), 'exclude': lambda f: f is None }})  
    reg_t_equity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RegTEquity'), 'exclude': lambda f: f is None }})  
    reg_t_equity_s: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RegTEquity-S'), 'exclude': lambda f: f is None }})  
    reg_t_margin: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RegTMargin'), 'exclude': lambda f: f is None }})  
    reg_t_margin_s: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RegTMargin-S'), 'exclude': lambda f: f is None }})  
    sma: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SMA'), 'exclude': lambda f: f is None }})  
    sma_s: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SMA-S'), 'exclude': lambda f: f is None }})  
    total_cash_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalCashValue'), 'exclude': lambda f: f is None }})  
    total_cash_value_c: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalCashValue-C'), 'exclude': lambda f: f is None }})  
    total_cash_value_s: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalCashValue-S'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAccountsAccountSummary200ApplicationJSON:
    r"""Returns object for account summary with multiple properties.
    A property is sufficed with -c if it provides commodity value, -s if it provides security value, and -c if its UKL segment value. 
    \"These values correspond to the TWS Account Window: https://www.interactivebrokers.com/en/software/tws/usersguidebook/realtimeactivitymonitoring/account_window.htm\" 
    """
    
    info: Optional[GetAccountsAccountSummary200ApplicationJSONInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Info'), 'exclude': lambda f: f is None }})  
    ledger: Optional[list[GetAccountsAccountSummary200ApplicationJSONLedger]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Ledger'), 'exclude': lambda f: f is None }})  
    summary: Optional[GetAccountsAccountSummary200ApplicationJSONSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Summary'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetAccountsAccountSummaryResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_accounts_account_summary_200_application_json_object: Optional[GetAccountsAccountSummary200ApplicationJSON] = dataclasses.field(default=None)
    r"""Returns object for account summary with multiple properties.
    A property is sufficed with -c if it provides commodity value, -s if it provides security value, and -c if its UKL segment value. 
    \"These values correspond to the TWS Account Window: https://www.interactivebrokers.com/en/software/tws/usersguidebook/realtimeactivitymonitoring/account_window.htm\" 
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    