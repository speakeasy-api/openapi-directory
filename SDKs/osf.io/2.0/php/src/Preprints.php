<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Preprints 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * List all Bibliographic Contributors
     * 
     * A paginated list of the Preprint's Bibliographic Contributors, sorted by their index.
     * Contributors are users who can make changes to the Preprint. Contributors with WRITE permissions may edit preprint details, and ADMIN Contributors may add or remove other Contributors.
     * 
     * Contributors are categorized as either "bibliographic" or "non-bibliographic". From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed on the project overview page on the OSF, while non-bibliographic contributors are not.
     * 
     * Note that if an anonymous view_only key is being used to view the list of contributors, the user relationship will not be exposed and the contributor ID will be an empty string.
     * 
     * #### Returns
     * Returns a JSON object containing `data` and `links` keys.
     * 
     * The `data` key contains an array of 10 contributors. Each resource in the array contains the full representation of the contributor, meaning additional requests to a contributor's detail view are not necessary. Additionally, the full representation of the user this contributor represents is automatically embedded within the `data` key of the response.
     * 
     * The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * #### Filtering
     * You can optionally request that the response only include contributors that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/preprints/y9jdt/contributors/?filter[bibliographic]=true.
     * 
     * Contributors may be filtered by their `bibliographic` and `permission` attributes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PreprintsBibliographicContributorsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PreprintsBibliographicContributorsListResponse
     */
	public function preprintsBibliographicContributorsList(
        \OpenAPI\OpenAPI\Models\Operations\PreprintsBibliographicContributorsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PreprintsBibliographicContributorsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/preprints/{preprint_id}/bibliographic_contributors/', \OpenAPI\OpenAPI\Models\Operations\PreprintsBibliographicContributorsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PreprintsBibliographicContributorsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Retrieve citation details
     * 
     * The citation details for a preprint, in CSL format.
     * #### Returns
     * Returns a JSON object with a `data` key that contains the representation of the details necessary for the preprint citation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PreprintsCitationListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PreprintsCitationListResponse
     */
	public function preprintsCitationList(
        \OpenAPI\OpenAPI\Models\Operations\PreprintsCitationListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PreprintsCitationListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/preprints/{preprint_id}/citation/', \OpenAPI\OpenAPI\Models\Operations\PreprintsCitationListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PreprintsCitationListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a styled citation
     * 
     * The citation for a preprint in a specific style.
     * #### Returns
     * Returns a JSON object with a `data` key that contains the representation of the preprint citation, in the requested style.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PreprintsCitationReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PreprintsCitationReadResponse
     */
	public function preprintsCitationRead(
        \OpenAPI\OpenAPI\Models\Operations\PreprintsCitationReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PreprintsCitationReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/preprints/{preprint_id}/citation/{style_id}/', \OpenAPI\OpenAPI\Models\Operations\PreprintsCitationReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PreprintsCitationReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a contributor
     * 
     * Retrieves the details of a contributor on this Preprint.
     * Contributors are categorized as either "bibliographic" or "non-bibliographic". From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed on the project overview page on the OSF, while non-bibliographic contributors are not.
     * 
     * Note that if an anonymous view_only key is being used to view the list of contributors, the user relationship will not be exposed and the contributor ID will be an empty string.
     * #### Returns
     * Returns a JSON object with a `data` key containing the representation of the requested contributor, if the request is successful.
     * 
     * If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PreprintsContributorReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PreprintsContributorReadResponse
     */
	public function preprintsContributorRead(
        \OpenAPI\OpenAPI\Models\Operations\PreprintsContributorReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PreprintsContributorReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/preprints/{preprint_id}/contributors/{user_id}/', \OpenAPI\OpenAPI\Models\Operations\PreprintsContributorReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PreprintsContributorReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Create a Contributor
     * 
     * Adds a contributor to a Preprint, effectively creating a relationship between the Preprint and a user.
     * 
     * Contributors are users who can make changes to the Preprint. Contributors with WRITE permissions may edit preprint details, and ADMIN Contributors may add or remove other Contributors.
     * 
     * Contributors are categorized as either "bibliographic" or "non-bibliographic" contributors. From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed on the project overview page on the OSF, while non-bibliographic contributors are not.
     * #### Permissions
     * Only project administrators can add contributors to a Preprint.
     * #### Required
     * A relationship object with a `data` key, containing the `users` type and valid user ID is required.
     * 
     * All attributes describing the relationship between the Preprint and the user are optional.
     * #### Returns
     * Returns a JSON object with a `data` key containing the representation of the new contributor, if the request is successful.
     * 
     * If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PreprintsContributorsCreateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PreprintsContributorsCreateResponse
     */
	public function preprintsContributorsCreate(
        \OpenAPI\OpenAPI\Models\Operations\PreprintsContributorsCreateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PreprintsContributorsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/preprints/{preprint_id}/contributors/', \OpenAPI\OpenAPI\Models\Operations\PreprintsContributorsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PreprintsContributorsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
        }

        return $response;
    }
	
    /**
     * List all Contributors for a Preprint
     * 
     * A paginated list of the Preprint's Contributors, sorted by their index.
     * 
     * Contributors are users who can make changes to the Preprint. Contributors with WRITE permissions may edit preprint details, and ADMIN Contributors may add or remove other Contributors.
     * 
     * Contributors are categorized as either "bibliographic" or "non-bibliographic". From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed on the project overview page on the OSF, while non-bibliographic contributors are not.
     * 
     * Note that if an anonymous view_only key is being used to view the list of Contributors, the user relationship will not be exposed and the Contributor ID will be an empty string.
     * 
     * #### Returns
     * Returns a JSON object containing `data` and `links` keys.
     * 
     * The `data` key contains an array of 10 contributors. Each resource in the array contains the full representation of the contributor, meaning additional requests to a contributor's detail view are not necessary. Additionally, the full representation of the user this contributor represents is automatically embedded within the `data` key of the response.
     * 
     * The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * #### Filtering
     * You can optionally request that the response only include contributors that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/preprints/y9jdt/contributors/?filter[bibliographic]=true.
     * 
     * Contributors may be filtered by their `bibliographic` and `permission` attributes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PreprintsContributorsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PreprintsContributorsListResponse
     */
	public function preprintsContributorsList(
        \OpenAPI\OpenAPI\Models\Operations\PreprintsContributorsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PreprintsContributorsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/preprints/{preprint_id}/contributors/', \OpenAPI\OpenAPI\Models\Operations\PreprintsContributorsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PreprintsContributorsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Create a preprint
     * 
     * Creates a new preprint.
     * #### Returns
     * Returns a JSON object with a `data` key containing the representation of the created preprint, if the request is successful.
     * 
     * If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes]() to understand why this request may have failed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PreprintsCreatePreprintInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PreprintsCreateResponse
     */
	public function preprintsCreate(
        \OpenAPI\OpenAPI\Models\Operations\PreprintsCreatePreprintInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PreprintsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/preprints/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PreprintsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
        }

        return $response;
    }
	
    /**
     * List all preprints
     * 
     * 
     * A paginated list of preprints from all preprint providers. The returned preprints are sorted by their creation date, with the most recent preprints appearing first.
     * #### Returns
     * Returns a JSON object containing `data` and `links` keys.
     * 
     * The `data` key contains an array of 10 preprints. Each resource in the array is a separate preprint object.
     * 
     * The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * 
     * This request should never return an error.
     * #### Filtering
     * You can optionally request that the response only include preprints that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/preprints/?filter[provider]=socarxiv.
     * 
     * Preprints may be filtered by their `id`, `is_published`, `date_created`, `date_modified`, and `provider`.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\PreprintsListResponse
     */
	public function preprintsList(
    ): \OpenAPI\OpenAPI\Models\Operations\PreprintsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/preprints/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PreprintsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update a preprint
     * 
     * Updates the specified preprint by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
     * #### Returns
     * Returns a JSON object with a `data` key containing the new representation of the updated preprint, if the request is successful.
     * 
     * If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes]() to understand why this request may have failed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PreprintsPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PreprintsPartialUpdateResponse
     */
	public function preprintsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PreprintsPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PreprintsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/preprints/{preprint_id}/', \OpenAPI\OpenAPI\Models\Operations\PreprintsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PreprintsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieve a preprint
     * 
     * Retrieves the details of a preprint.
     * #### Returns
     * Returns a JSON object with a `data` key containing the representation of the requested preprint, if the request is successful.
     * 
     * If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PreprintsReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PreprintsReadResponse
     */
	public function preprintsRead(
        \OpenAPI\OpenAPI\Models\Operations\PreprintsReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PreprintsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/preprints/{preprint_id}/', \OpenAPI\OpenAPI\Models\Operations\PreprintsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PreprintsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}