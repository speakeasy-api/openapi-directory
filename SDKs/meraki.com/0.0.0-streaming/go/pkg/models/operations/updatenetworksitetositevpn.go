// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UpdateNetworkSiteToSiteVpnPathParams struct {
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
}

type UpdateNetworkSiteToSiteVpnRequestBodyHubs struct {
	// The network ID of the hub.
	HubID string `json:"hubId"`
	// Only valid in 'spoke' mode. Indicates whether default route traffic should be sent to this hub.
	UseDefaultRoute *bool `json:"useDefaultRoute,omitempty"`
}

// UpdateNetworkSiteToSiteVpnRequestBodyModeEnum - The site-to-site VPN mode. Can be one of 'none', 'spoke' or 'hub'
type UpdateNetworkSiteToSiteVpnRequestBodyModeEnum string

const (
	UpdateNetworkSiteToSiteVpnRequestBodyModeEnumHub   UpdateNetworkSiteToSiteVpnRequestBodyModeEnum = "hub"
	UpdateNetworkSiteToSiteVpnRequestBodyModeEnumNone  UpdateNetworkSiteToSiteVpnRequestBodyModeEnum = "none"
	UpdateNetworkSiteToSiteVpnRequestBodyModeEnumSpoke UpdateNetworkSiteToSiteVpnRequestBodyModeEnum = "spoke"
)

func (e *UpdateNetworkSiteToSiteVpnRequestBodyModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "hub":
		fallthrough
	case "none":
		fallthrough
	case "spoke":
		*e = UpdateNetworkSiteToSiteVpnRequestBodyModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSiteToSiteVpnRequestBodyModeEnum: %s", s)
	}
}

type UpdateNetworkSiteToSiteVpnRequestBodySubnets struct {
	// The CIDR notation subnet used within the VPN
	LocalSubnet string `json:"localSubnet"`
	// Indicates the presence of the subnet in the VPN
	UseVpn *bool `json:"useVpn,omitempty"`
}

type UpdateNetworkSiteToSiteVpnRequestBody struct {
	// The list of VPN hubs, in order of preference. In spoke mode, at least 1 hub is required.
	Hubs []UpdateNetworkSiteToSiteVpnRequestBodyHubs `json:"hubs,omitempty"`
	// The site-to-site VPN mode. Can be one of 'none', 'spoke' or 'hub'
	Mode UpdateNetworkSiteToSiteVpnRequestBodyModeEnum `json:"mode"`
	// The list of subnets and their VPN presence.
	Subnets []UpdateNetworkSiteToSiteVpnRequestBodySubnets `json:"subnets,omitempty"`
}

type UpdateNetworkSiteToSiteVpnRequest struct {
	PathParams UpdateNetworkSiteToSiteVpnPathParams
	Request    UpdateNetworkSiteToSiteVpnRequestBody `request:"mediaType=application/json"`
}

type UpdateNetworkSiteToSiteVpnResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkSiteToSiteVpn200ApplicationJSONObject map[string]interface{}
}
