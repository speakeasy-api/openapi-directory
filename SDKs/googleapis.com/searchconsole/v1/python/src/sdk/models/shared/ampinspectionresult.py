"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import ampissue as shared_ampissue
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AmpInspectionResultAmpIndexStatusVerdictEnum(str, Enum):
    r"""Index status of the AMP URL."""
    VERDICT_UNSPECIFIED = 'VERDICT_UNSPECIFIED'
    PASS = 'PASS'
    PARTIAL = 'PARTIAL'
    FAIL = 'FAIL'
    NEUTRAL = 'NEUTRAL'

class AmpInspectionResultIndexingStateEnum(str, Enum):
    r"""Whether or not the page blocks indexing through a noindex rule."""
    AMP_INDEXING_STATE_UNSPECIFIED = 'AMP_INDEXING_STATE_UNSPECIFIED'
    AMP_INDEXING_ALLOWED = 'AMP_INDEXING_ALLOWED'
    BLOCKED_DUE_TO_NOINDEX = 'BLOCKED_DUE_TO_NOINDEX'
    BLOCKED_DUE_TO_EXPIRED_UNAVAILABLE_AFTER = 'BLOCKED_DUE_TO_EXPIRED_UNAVAILABLE_AFTER'

class AmpInspectionResultPageFetchStateEnum(str, Enum):
    r"""Whether or not Google could fetch the AMP."""
    PAGE_FETCH_STATE_UNSPECIFIED = 'PAGE_FETCH_STATE_UNSPECIFIED'
    SUCCESSFUL = 'SUCCESSFUL'
    SOFT_404 = 'SOFT_404'
    BLOCKED_ROBOTS_TXT = 'BLOCKED_ROBOTS_TXT'
    NOT_FOUND = 'NOT_FOUND'
    ACCESS_DENIED = 'ACCESS_DENIED'
    SERVER_ERROR = 'SERVER_ERROR'
    REDIRECT_ERROR = 'REDIRECT_ERROR'
    ACCESS_FORBIDDEN = 'ACCESS_FORBIDDEN'
    BLOCKED_4_XX = 'BLOCKED_4XX'
    INTERNAL_CRAWL_ERROR = 'INTERNAL_CRAWL_ERROR'
    INVALID_URL = 'INVALID_URL'

class AmpInspectionResultRobotsTxtStateEnum(str, Enum):
    r"""Whether or not the page is blocked to Google by a robots.txt rule."""
    ROBOTS_TXT_STATE_UNSPECIFIED = 'ROBOTS_TXT_STATE_UNSPECIFIED'
    ALLOWED = 'ALLOWED'
    DISALLOWED = 'DISALLOWED'

class AmpInspectionResultVerdictEnum(str, Enum):
    r"""The status of the most severe error on the page. If a page has both warnings and errors, the page status is error. Error status means the page cannot be shown in Search results."""
    VERDICT_UNSPECIFIED = 'VERDICT_UNSPECIFIED'
    PASS = 'PASS'
    PARTIAL = 'PARTIAL'
    FAIL = 'FAIL'
    NEUTRAL = 'NEUTRAL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AmpInspectionResult:
    r"""AMP inspection result of the live page or the current information from Google's index, depending on whether you requested a live inspection or not."""
    
    amp_index_status_verdict: Optional[AmpInspectionResultAmpIndexStatusVerdictEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ampIndexStatusVerdict'), 'exclude': lambda f: f is None }})
    r"""Index status of the AMP URL."""  
    amp_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ampUrl'), 'exclude': lambda f: f is None }})
    r"""URL of the AMP that was inspected. If the submitted URL is a desktop page that refers to an AMP version, the AMP version will be inspected."""  
    indexing_state: Optional[AmpInspectionResultIndexingStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('indexingState'), 'exclude': lambda f: f is None }})
    r"""Whether or not the page blocks indexing through a noindex rule."""  
    issues: Optional[list[shared_ampissue.AmpIssue]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issues'), 'exclude': lambda f: f is None }})
    r"""A list of zero or more AMP issues found for the inspected URL."""  
    last_crawl_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastCrawlTime'), 'exclude': lambda f: f is None }})
    r"""Last time this AMP version was crawled by Google. Absent if the URL was never crawled successfully."""  
    page_fetch_state: Optional[AmpInspectionResultPageFetchStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pageFetchState'), 'exclude': lambda f: f is None }})
    r"""Whether or not Google could fetch the AMP."""  
    robots_txt_state: Optional[AmpInspectionResultRobotsTxtStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('robotsTxtState'), 'exclude': lambda f: f is None }})
    r"""Whether or not the page is blocked to Google by a robots.txt rule."""  
    verdict: Optional[AmpInspectionResultVerdictEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verdict'), 'exclude': lambda f: f is None }})
    r"""The status of the most severe error on the page. If a page has both warnings and errors, the page status is error. Error status means the page cannot be shown in Search results."""  
    