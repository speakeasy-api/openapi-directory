"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import attributetype as shared_attributetype
from ..shared import mfaoptiontype as shared_mfaoptiontype
from ..shared import userstatustype_enum as shared_userstatustype_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdminGetUserResponse:
    r"""Represents the response from the server from the request to get the specified user as an administrator."""
    
    username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Username') }})  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Enabled'), 'exclude': lambda f: f is None }})  
    mfa_options: Optional[list[shared_mfaoptiontype.MFAOptionType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MFAOptions'), 'exclude': lambda f: f is None }})  
    preferred_mfa_setting: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PreferredMfaSetting'), 'exclude': lambda f: f is None }})  
    user_attributes: Optional[list[shared_attributetype.AttributeType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserAttributes'), 'exclude': lambda f: f is None }})  
    user_create_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserCreateDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    user_last_modified_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserLastModifiedDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    user_mfa_setting_list: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserMFASettingList'), 'exclude': lambda f: f is None }})  
    user_status: Optional[shared_userstatustype_enum.UserStatusTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserStatus'), 'exclude': lambda f: f is None }})  
    