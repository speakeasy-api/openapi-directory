// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type DedicatedTenancyModificationStateEnumEnum string

const (
	DedicatedTenancyModificationStateEnumEnumPending   DedicatedTenancyModificationStateEnumEnum = "PENDING"
	DedicatedTenancyModificationStateEnumEnumCompleted DedicatedTenancyModificationStateEnumEnum = "COMPLETED"
	DedicatedTenancyModificationStateEnumEnumFailed    DedicatedTenancyModificationStateEnumEnum = "FAILED"
)

func (e DedicatedTenancyModificationStateEnumEnum) ToPointer() *DedicatedTenancyModificationStateEnumEnum {
	return &e
}

func (e *DedicatedTenancyModificationStateEnumEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PENDING":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "FAILED":
		*e = DedicatedTenancyModificationStateEnumEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DedicatedTenancyModificationStateEnumEnum: %v", v)
	}
}
