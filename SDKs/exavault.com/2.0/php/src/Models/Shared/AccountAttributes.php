<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class AccountAttributes
{
    /**
     * Name of the account
     * 
     * @var ?string $accountName
     */
	#[\JMS\Serializer\Annotation\SerializedName('accountName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $accountName = null;
    
    /**
     * Whether the web application onboarding help is enabled for new users in the account.
     * 
     * @var ?bool $accountOnboarding
     */
	#[\JMS\Serializer\Annotation\SerializedName('accountOnboarding')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $accountOnboarding = null;
    
    /**
     * Range of IP addresses allowed to access this account.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\AccountAttributesAllowedIp> $allowedIp
     */
	#[\JMS\Serializer\Annotation\SerializedName('allowedIp')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\AccountAttributesAllowedIp>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $allowedIp = null;
    
    /**
     * Branding flag. Set to `true` if the account has branding functionality enabled.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\AccountAttributesBrandingEnum $branding
     */
	#[\JMS\Serializer\Annotation\SerializedName('branding')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\AccountAttributesBrandingEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?AccountAttributesBrandingEnum $branding = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('brandingSettings')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\BrandingSettings')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?BrandingSettings $brandingSettings = null;
    
    /**
     * (ExaVault Use Only) Internal ID of the account in CMS.
     * 
     * @var ?int $clientId
     */
	#[\JMS\Serializer\Annotation\SerializedName('clientId')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $clientId = null;
    
    /**
     * Flag to indicate whether the account requires complex passwords. Set to `true` to require complex passwords on all users and shares.
     * 
     * @var ?bool $complexPasswords
     */
	#[\JMS\Serializer\Annotation\SerializedName('complexPasswords')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $complexPasswords = null;
    
    /**
     * Timestamp of account creation.
     * 
     * @var ?\DateTime $created
     */
	#[\JMS\Serializer\Annotation\SerializedName('created')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $created = null;
    
    /**
     * Custom domain flag. Set to `true` if account type allows custom domain functionality.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\AccountAttributesCustomDomainEnum $customDomain
     */
	#[\JMS\Serializer\Annotation\SerializedName('customDomain')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\AccountAttributesCustomDomainEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?AccountAttributesCustomDomainEnum $customDomain = null;
    
    /**
     * Custom signature for all account emails users or recipients will receive.
     * 
     * @var ?string $customSignature
     */
	#[\JMS\Serializer\Annotation\SerializedName('customSignature')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $customSignature = null;
    
    /**
     * Custom domain used to brand this account.
     * 
     * @var ?array<string> $externalDomains
     */
	#[\JMS\Serializer\Annotation\SerializedName('externalDomains')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $externalDomains = null;
    
    /**
     * Maximum number of users the account can have. This can be increased by contacting ExaVault Support.
     * 
     * @var ?int $maxUsers
     */
	#[\JMS\Serializer\Annotation\SerializedName('maxUsers')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $maxUsers = null;
    
    /**
     * Timestamp of account modification.
     * 
     * @var ?\DateTime $modified
     */
	#[\JMS\Serializer\Annotation\SerializedName('modified')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $modified = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('planDetails')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\PlanDetails')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PlanDetails $planDetails = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('quota')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Quota')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Quota $quota = null;
    
    /**
     * Flag to indicate whether the account disables connections via insecure protocols (e.g. FTP). Set to `true` to disable all traffic over port 21.
     * 
     * @var ?bool $secureOnly
     */
	#[\JMS\Serializer\Annotation\SerializedName('secureOnly')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $secureOnly = null;
    
    /**
     * Flag to indicate showing of referrals links in the account. Set to `true` to include marketing messages in share invitations.
     * 
     * @var ?bool $showReferralLinks
     */
	#[\JMS\Serializer\Annotation\SerializedName('showReferralLinks')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $showReferralLinks = null;
    
    /**
     * Account status flag. A one (1) means the account is active; zero (0) means it is suspended.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\AccountAttributesStatusEnum $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\AccountAttributesStatusEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?AccountAttributesStatusEnum $status = null;
    
    /**
     * Current number of users on the account.
     * 
     * @var ?int $userCount
     */
	#[\JMS\Serializer\Annotation\SerializedName('userCount')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $userCount = null;
    
    /**
     * Content of welcome email each new user will receive.
     * 
     * @var ?string $welcomeEmailContent
     */
	#[\JMS\Serializer\Annotation\SerializedName('welcomeEmailContent')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $welcomeEmailContent = null;
    
    /**
     * Subject of welcome email each new user will receive.
     * 
     * @var ?string $welcomeEmailSubject
     */
	#[\JMS\Serializer\Annotation\SerializedName('welcomeEmailSubject')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $welcomeEmailSubject = null;
    
	public function __construct()
	{
		$this->accountName = null;
		$this->accountOnboarding = null;
		$this->allowedIp = null;
		$this->branding = null;
		$this->brandingSettings = null;
		$this->clientId = null;
		$this->complexPasswords = null;
		$this->created = null;
		$this->customDomain = null;
		$this->customSignature = null;
		$this->externalDomains = null;
		$this->maxUsers = null;
		$this->modified = null;
		$this->planDetails = null;
		$this->quota = null;
		$this->secureOnly = null;
		$this->showReferralLinks = null;
		$this->status = null;
		$this->userCount = null;
		$this->welcomeEmailContent = null;
		$this->welcomeEmailSubject = null;
	}
}
