/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class POSTReconcileRefundResponse {
    /**
     * The ID of the customer account that the refund is for.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountId")
    public String accountId;
    public POSTReconcileRefundResponse withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * The total amount of the refund.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    public Double amount;
    public POSTReconcileRefundResponse withAmount(Double amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * The date and time when the transaction was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("cancelledOn")
    public OffsetDateTime cancelledOn;
    public POSTReconcileRefundResponse withCancelledOn(OffsetDateTime cancelledOn) {
        this.cancelledOn = cancelledOn;
        return this;
    }
    
    /**
     * Comments about the refund.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("comment")
    public String comment;
    public POSTReconcileRefundResponse withComment(String comment) {
        this.comment = comment;
        return this;
    }
    
    /**
     * The ID of the Zuora user who created the refund.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdById")
    public String createdById;
    public POSTReconcileRefundResponse withCreatedById(String createdById) {
        this.createdById = createdById;
        return this;
    }
    
    /**
     * The date and time when the refund is created, in `yyyy-mm-dd hh:mm:ss` format.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdDate")
    public OffsetDateTime createdDate;
    public POSTReconcileRefundResponse withCreatedDate(OffsetDateTime createdDate) {
        this.createdDate = createdDate;
        return this;
    }
    
    /**
     * The ID of the credit memo that is refunded.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creditMemoId")
    public String creditMemoId;
    public POSTReconcileRefundResponse withCreditMemoId(String creditMemoId) {
        this.creditMemoId = creditMemoId;
        return this;
    }
    
    /**
     * Container for the finance information related to the refund.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("financeInformation")
    public POSTReconcileRefundResponseFinanceInformation financeInformation;
    public POSTReconcileRefundResponse withFinanceInformation(POSTReconcileRefundResponseFinanceInformation financeInformation) {
        this.financeInformation = financeInformation;
        return this;
    }
    
    /**
     * The ID of the gateway instance that processes the refund.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gatewayId")
    public String gatewayId;
    public POSTReconcileRefundResponse withGatewayId(String gatewayId) {
        this.gatewayId = gatewayId;
        return this;
    }
    
    /**
     * The reason of gateway reconciliation.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gatewayReconciliationReason")
    public String gatewayReconciliationReason;
    public POSTReconcileRefundResponse withGatewayReconciliationReason(String gatewayReconciliationReason) {
        this.gatewayReconciliationReason = gatewayReconciliationReason;
        return this;
    }
    
    /**
     * The status of gateway reconciliation.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gatewayReconciliationStatus")
    public String gatewayReconciliationStatus;
    public POSTReconcileRefundResponse withGatewayReconciliationStatus(String gatewayReconciliationStatus) {
        this.gatewayReconciliationStatus = gatewayReconciliationStatus;
        return this;
    }
    
    /**
     * The message returned from the payment gateway for the refund. This message is gateway-dependent.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gatewayResponse")
    public String gatewayResponse;
    public POSTReconcileRefundResponse withGatewayResponse(String gatewayResponse) {
        this.gatewayResponse = gatewayResponse;
        return this;
    }
    
    /**
     * The code returned from the payment gateway for the refund. This code is gateway-dependent.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gatewayResponseCode")
    public String gatewayResponseCode;
    public POSTReconcileRefundResponse withGatewayResponseCode(String gatewayResponseCode) {
        this.gatewayResponseCode = gatewayResponseCode;
        return this;
    }
    
    /**
     * The status of the refund in the gateway; used for reconciliation.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gatewayState")
    public POSTReconcileRefundResponseGatewayStateEnum gatewayState;
    public POSTReconcileRefundResponse withGatewayState(POSTReconcileRefundResponseGatewayStateEnum gatewayState) {
        this.gatewayState = gatewayState;
        return this;
    }
    
    /**
     * The ID of the refund.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public POSTReconcileRefundResponse withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The date and time when a refund was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("markedForSubmissionOn")
    public OffsetDateTime markedForSubmissionOn;
    public POSTReconcileRefundResponse withMarkedForSubmissionOn(OffsetDateTime markedForSubmissionOn) {
        this.markedForSubmissionOn = markedForSubmissionOn;
        return this;
    }
    
    /**
     * How an external refund was issued to a customer. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("methodType")
    public POSTReconcileRefundResponseMethodTypeEnum methodType;
    public POSTReconcileRefundResponse withMethodType(POSTReconcileRefundResponseMethodTypeEnum methodType) {
        this.methodType = methodType;
        return this;
    }
    
    /**
     * The unique identification number of the refund. For example, R-00000001.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    public String number;
    public POSTReconcileRefundResponse withNumber(String number) {
        this.number = number;
        return this;
    }
    
    /**
     * The ID of the payment that is refunded.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentId")
    public String paymentId;
    public POSTReconcileRefundResponse withPaymentId(String paymentId) {
        this.paymentId = paymentId;
        return this;
    }
    
    /**
     * The unique ID of the payment method that the customer used to make the refund.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentMethodId")
    public String paymentMethodId;
    public POSTReconcileRefundResponse withPaymentMethodId(String paymentMethodId) {
        this.paymentMethodId = paymentMethodId;
        return this;
    }
    
    /**
     * The unique ID of the payment method snapshot which is a copy of the particular Payment Method used in a transaction.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentMethodSnapshotId")
    public String paymentMethodSnapshotId;
    public POSTReconcileRefundResponse withPaymentMethodSnapshotId(String paymentMethodSnapshotId) {
        this.paymentMethodSnapshotId = paymentMethodSnapshotId;
        return this;
    }
    
    /**
     * The payout ID of the refund from the gateway side.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payoutId")
    public String payoutId;
    public POSTReconcileRefundResponse withPayoutId(String payoutId) {
        this.payoutId = payoutId;
        return this;
    }
    
    /**
     * A code identifying the reason for the transaction.      
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reasonCode")
    public String reasonCode;
    public POSTReconcileRefundResponse withReasonCode(String reasonCode) {
        this.reasonCode = reasonCode;
        return this;
    }
    
    /**
     * The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referenceId")
    public String referenceId;
    public POSTReconcileRefundResponse withReferenceId(String referenceId) {
        this.referenceId = referenceId;
        return this;
    }
    
    /**
     * The date when the refund takes effect, in `yyyy-mm-dd` format. For example, 2020-03-01.       
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("refundDate")
    public LocalDate refundDate;
    public POSTReconcileRefundResponse withRefundDate(LocalDate refundDate) {
        this.refundDate = refundDate;
        return this;
    }
    
    /**
     * The date and time when the refund was issued, in `yyyy-mm-dd hh:mm:ss` format.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("refundTransactionTime")
    public OffsetDateTime refundTransactionTime;
    public POSTReconcileRefundResponse withRefundTransactionTime(OffsetDateTime refundTransactionTime) {
        this.refundTransactionTime = refundTransactionTime;
        return this;
    }
    
    /**
     * The transaction ID returned by the payment gateway if there is an additional refund. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secondRefundReferenceId")
    public String secondRefundReferenceId;
    public POSTReconcileRefundResponse withSecondRefundReferenceId(String secondRefundReferenceId) {
        this.secondRefundReferenceId = secondRefundReferenceId;
        return this;
    }
    
    /**
     * The date and time when the transaction is settled, in `yyyy-mm-dd hh:mm:ss` format.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("settledOn")
    public OffsetDateTime settledOn;
    public POSTReconcileRefundResponse withSettledOn(OffsetDateTime settledOn) {
        this.settledOn = settledOn;
        return this;
    }
    
    /**
     * A payment gateway-specific field that maps Zuora to other gateways.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("softDescriptor")
    public String softDescriptor;
    public POSTReconcileRefundResponse withSoftDescriptor(String softDescriptor) {
        this.softDescriptor = softDescriptor;
        return this;
    }
    
    /**
     * A payment gateway-specific field that maps Zuora to other gateways.          
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("softDescriptorPhone")
    public String softDescriptorPhone;
    public POSTReconcileRefundResponse withSoftDescriptorPhone(String softDescriptorPhone) {
        this.softDescriptorPhone = softDescriptorPhone;
        return this;
    }
    
    /**
     * The status of the refund.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;
    public POSTReconcileRefundResponse withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * The date and time when the refund was submitted, in yyyy-mm-dd hh:mm:ss format.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("submittedOn")
    public OffsetDateTime submittedOn;
    public POSTReconcileRefundResponse withSubmittedOn(OffsetDateTime submittedOn) {
        this.submittedOn = submittedOn;
        return this;
    }
    
    /**
     * Indicates if the request is processed successfully.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("success")
    public Boolean success;
    public POSTReconcileRefundResponse withSuccess(Boolean success) {
        this.success = success;
        return this;
    }
    
    /**
     * The type of the refund.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public POSTReconcileRefundResponseTypeEnum type;
    public POSTReconcileRefundResponse withType(POSTReconcileRefundResponseTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * The ID of the Zuora user who last updated the refund.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedById")
    public String updatedById;
    public POSTReconcileRefundResponse withUpdatedById(String updatedById) {
        this.updatedById = updatedById;
        return this;
    }
    
    /**
     * The date and time when the refund was last updated, in `yyyy-mm-dd hh:mm:ss` format.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updatedDate")
    public OffsetDateTime updatedDate;
    public POSTReconcileRefundResponse withUpdatedDate(OffsetDateTime updatedDate) {
        this.updatedDate = updatedDate;
        return this;
    }
    
}
