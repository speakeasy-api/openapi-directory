// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type NHInteriorAvailability struct {
	From *string `json:"from,omitempty"`
	Note *string `json:"note,omitempty"`
}

type NHInteriorBuy struct {
	Currency *string `json:"currency,omitempty"`
	Price    *int64  `json:"price,omitempty"`
}

// NHInteriorCategoryEnum - The category of item as shown in the player's inventory.
type NHInteriorCategoryEnum string

const (
	NHInteriorCategoryEnumFloors    NHInteriorCategoryEnum = "Floors"
	NHInteriorCategoryEnumWallpaper NHInteriorCategoryEnum = "Wallpaper"
	NHInteriorCategoryEnumRugs      NHInteriorCategoryEnum = "Rugs"
)

func (e NHInteriorCategoryEnum) ToPointer() *NHInteriorCategoryEnum {
	return &e
}

func (e *NHInteriorCategoryEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Floors":
		fallthrough
	case "Wallpaper":
		fallthrough
	case "Rugs":
		*e = NHInteriorCategoryEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NHInteriorCategoryEnum: %v", v)
	}
}

// NHInteriorColorsEnum - (WIP)
type NHInteriorColorsEnum string

const (
	NHInteriorColorsEnumAqua     NHInteriorColorsEnum = "Aqua"
	NHInteriorColorsEnumBeige    NHInteriorColorsEnum = "Beige"
	NHInteriorColorsEnumBlack    NHInteriorColorsEnum = "Black"
	NHInteriorColorsEnumBlue     NHInteriorColorsEnum = "Blue"
	NHInteriorColorsEnumBrown    NHInteriorColorsEnum = "Brown"
	NHInteriorColorsEnumColorful NHInteriorColorsEnum = "Colorful"
	NHInteriorColorsEnumGray     NHInteriorColorsEnum = "Gray"
	NHInteriorColorsEnumGreen    NHInteriorColorsEnum = "Green"
	NHInteriorColorsEnumOrange   NHInteriorColorsEnum = "Orange"
	NHInteriorColorsEnumPink     NHInteriorColorsEnum = "Pink"
	NHInteriorColorsEnumPurple   NHInteriorColorsEnum = "Purple"
	NHInteriorColorsEnumRed      NHInteriorColorsEnum = "Red"
	NHInteriorColorsEnumWhite    NHInteriorColorsEnum = "White"
	NHInteriorColorsEnumYellow   NHInteriorColorsEnum = "Yellow"
)

func (e NHInteriorColorsEnum) ToPointer() *NHInteriorColorsEnum {
	return &e
}

func (e *NHInteriorColorsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Aqua":
		fallthrough
	case "Beige":
		fallthrough
	case "Black":
		fallthrough
	case "Blue":
		fallthrough
	case "Brown":
		fallthrough
	case "Colorful":
		fallthrough
	case "Gray":
		fallthrough
	case "Green":
		fallthrough
	case "Orange":
		fallthrough
	case "Pink":
		fallthrough
	case "Purple":
		fallthrough
	case "Red":
		fallthrough
	case "White":
		fallthrough
	case "Yellow":
		*e = NHInteriorColorsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NHInteriorColorsEnum: %v", v)
	}
}

// NHInterior - A JSON object describing the interior item.
type NHInterior struct {
	// Where the clothing may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.
	Availability []NHInteriorAvailability `json:"availability,omitempty"`
	// An array of prices, for when the interior may be purchased with Bells, Nook Miles, etc..
	Buy []NHInteriorBuy `json:"buy,omitempty"`
	// The category of item as shown in the player's inventory.
	Category *NHInteriorCategoryEnum `json:"category,omitempty"`
	// (WIP)
	Colors *NHInteriorColorsEnum `json:"colors,omitempty"`
	// The number of lengthwise grid spaces this item takes up.
	GridLength *float32 `json:"grid_length,omitempty"`
	// The number of widthwise grid spaces this item takes up.
	GridWidth *float32 `json:"grid_width,omitempty"`
	// The base value that the item provides to a player's Happy Home Academy score when placed in their home.
	HhaBase *int64 `json:"hha_base,omitempty"`
	// The HHA category the item is a part of, if any. If the item does not have an HHA category, this will be an empty string.
	HhaCategory *string `json:"hha_category,omitempty"`
	// Image of the interior.
	ImageURL *string `json:"image_url,omitempty"`
	// The [furniture series](https://nookipedia.com/wiki/Series_(furniture)) the item is a part of, if any. A series is a collection of furniture and interior items, all with the same theme. If the item is not part of a series, this will be an empty string.
	ItemSeries *string `json:"item_series,omitempty"`
	// The [furniture set](https://nookipedia.com/wiki/Set) the item is a part of, if any. A set is a smaller collection of related furniture items. If the item is not part of a set, this will be an empty string.
	ItemSet *string `json:"item_set,omitempty"`
	// The name of the interior.
	Name *string `json:"name,omitempty"`
	// Any additional miscellaneous information about the item, such as a name change from a past update.
	Notes *string `json:"notes,omitempty"`
	// The number of Bells the interior can be sold to Nook's store for.
	Sell *int64 `json:"sell,omitempty"`
	// The tag of an item, if any, which denotes a specific use or relation to an event. Tags are determined by Nintendo. Examples include "Chair", "Musical Instrument", and "Mario". If the item does not have a tag, this will be an empty string.
	Tag *string `json:"tag,omitempty"`
	// A list of [themes](https://nookipedia.com/wiki/Theme_(furniture)) (if any) that the item belongs to.
	Themes []string `json:"themes,omitempty"`
	// Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.
	Unlocked *bool `json:"unlocked,omitempty"`
	// Link to the respective Nookipedia article.
	URL *string `json:"url,omitempty"`
	// The version of *New Horizons* that the item was added. Items that were included at the game's launch have version "1.0.0".
	VersionAdded *string `json:"version_added,omitempty"`
}
