"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkNetflowRequestBody:
    
    collector_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collectorIp'), 'exclude': lambda f: f is None }})
    r"""The IPv4 address of the NetFlow collector."""  
    collector_port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collectorPort'), 'exclude': lambda f: f is None }})
    r"""The port that the NetFlow collector will be listening on."""  
    eta_dst_port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('etaDstPort'), 'exclude': lambda f: f is None }})
    r"""The port that the Encrypted Traffic Analytics collector will be listening on."""  
    eta_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('etaEnabled'), 'exclude': lambda f: f is None }})
    r"""Boolean indicating whether Encrypted Traffic Analytics is enabled (true) or disabled (false)."""  
    reporting_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reportingEnabled'), 'exclude': lambda f: f is None }})
    r"""Boolean indicating whether NetFlow traffic reporting is enabled (true) or disabled (false)."""  
    

@dataclasses.dataclass
class UpdateNetworkNetflowRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateNetworkNetflowRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateNetworkNetflowResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_netflow_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    