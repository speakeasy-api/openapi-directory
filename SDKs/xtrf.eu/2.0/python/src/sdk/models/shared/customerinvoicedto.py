"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import customerdetailsdto as shared_customerdetailsdto
from ..shared import customerinvoicedatesdto as shared_customerinvoicedatesdto
from ..shared import paymenttermsdto as shared_paymenttermsdto
from ..shared import taskdto as shared_taskdto
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CustomerInvoiceDTOStatusEnum(str, Enum):
    NOT_READY = 'NOT_READY'
    READY = 'READY'
    SENT = 'SENT'

class CustomerInvoiceDTOTypeEnum(str, Enum):
    FINAL = 'FINAL'
    DRAFT = 'DRAFT'
    CREDIT_NOTE = 'CREDIT_NOTE'

class CustomerInvoiceDTOVatCalculationRuleEnum(str, Enum):
    SUM_ITEMS = 'SUM_ITEMS'
    BY_NET_TOTAL = 'BY_NET_TOTAL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CustomerInvoiceDTO:
    r"""Success"""
    
    currency_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencyId'), 'exclude': lambda f: f is None }})  
    customer_details: Optional[shared_customerdetailsdto.CustomerDetailsDTO] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerDetails'), 'exclude': lambda f: f is None }})  
    customer_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerId'), 'exclude': lambda f: f is None }})  
    dates: Optional[shared_customerinvoicedatesdto.CustomerInvoiceDatesDTO] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dates'), 'exclude': lambda f: f is None }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    invoice_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invoiceNumber'), 'exclude': lambda f: f is None }})  
    payment_method_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentMethodId'), 'exclude': lambda f: f is None }})  
    payment_terms: Optional[shared_paymenttermsdto.PaymentTermsDTO] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentTerms'), 'exclude': lambda f: f is None }})  
    status: Optional[CustomerInvoiceDTOStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    tasks: Optional[list[shared_taskdto.TaskDTO]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tasks'), 'exclude': lambda f: f is None }})  
    tasks_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tasksValue'), 'exclude': lambda f: f is None }})  
    total_gross: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalGross'), 'exclude': lambda f: f is None }})  
    total_in_words: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalInWords'), 'exclude': lambda f: f is None }})  
    total_netto: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalNetto'), 'exclude': lambda f: f is None }})  
    type: Optional[CustomerInvoiceDTOTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    vat_calculation_rule: Optional[CustomerInvoiceDTOVatCalculationRuleEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vatCalculationRule'), 'exclude': lambda f: f is None }})  
    