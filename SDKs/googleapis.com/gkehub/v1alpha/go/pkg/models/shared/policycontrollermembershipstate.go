// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PolicyControllerMembershipStateStateEnum - The overall Policy Controller lifecycle state observed by the Hub Feature controller.
type PolicyControllerMembershipStateStateEnum string

const (
	PolicyControllerMembershipStateStateEnumLifecycleStateUnspecified PolicyControllerMembershipStateStateEnum = "LIFECYCLE_STATE_UNSPECIFIED"
	PolicyControllerMembershipStateStateEnumNotInstalled              PolicyControllerMembershipStateStateEnum = "NOT_INSTALLED"
	PolicyControllerMembershipStateStateEnumInstalling                PolicyControllerMembershipStateStateEnum = "INSTALLING"
	PolicyControllerMembershipStateStateEnumActive                    PolicyControllerMembershipStateStateEnum = "ACTIVE"
	PolicyControllerMembershipStateStateEnumUpdating                  PolicyControllerMembershipStateStateEnum = "UPDATING"
	PolicyControllerMembershipStateStateEnumDecommissioning           PolicyControllerMembershipStateStateEnum = "DECOMMISSIONING"
	PolicyControllerMembershipStateStateEnumClusterError              PolicyControllerMembershipStateStateEnum = "CLUSTER_ERROR"
	PolicyControllerMembershipStateStateEnumHubError                  PolicyControllerMembershipStateStateEnum = "HUB_ERROR"
	PolicyControllerMembershipStateStateEnumSuspended                 PolicyControllerMembershipStateStateEnum = "SUSPENDED"
)

func (e PolicyControllerMembershipStateStateEnum) ToPointer() *PolicyControllerMembershipStateStateEnum {
	return &e
}

func (e *PolicyControllerMembershipStateStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LIFECYCLE_STATE_UNSPECIFIED":
		fallthrough
	case "NOT_INSTALLED":
		fallthrough
	case "INSTALLING":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "UPDATING":
		fallthrough
	case "DECOMMISSIONING":
		fallthrough
	case "CLUSTER_ERROR":
		fallthrough
	case "HUB_ERROR":
		fallthrough
	case "SUSPENDED":
		*e = PolicyControllerMembershipStateStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PolicyControllerMembershipStateStateEnum: %v", v)
	}
}

// PolicyControllerMembershipState - **Policy Controller**: State for a single cluster.
type PolicyControllerMembershipState struct {
	// Currently these include (also serving as map keys): 1. "admission" 2. "audit" 3. "mutation"
	ComponentStates map[string]PolicyControllerOnClusterState `json:"componentStates,omitempty"`
	// The state of the template library and any bundles included in the chosen version of the manifest
	ContentStates map[string]PolicyControllerOnClusterState `json:"contentStates,omitempty"`
	// The state of the policy controller policy content
	PolicyContentState *PolicyControllerPolicyContentState `json:"policyContentState,omitempty"`
	// The overall Policy Controller lifecycle state observed by the Hub Feature controller.
	State *PolicyControllerMembershipStateStateEnum `json:"state,omitempty"`
}
