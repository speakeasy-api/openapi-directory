// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// RestoreArchiveArchiveRestoreKindEnum - What archive to restore (latest archive, latest commit in configuration repository, or archive with ID as given by listArchive)
type RestoreArchiveArchiveRestoreKindEnum string

const (
	RestoreArchiveArchiveRestoreKindEnumLatestArchive RestoreArchiveArchiveRestoreKindEnum = "latestArchive"
	RestoreArchiveArchiveRestoreKindEnumLatestCommit  RestoreArchiveArchiveRestoreKindEnum = "latestCommit"
	RestoreArchiveArchiveRestoreKindEnumArchiveID     RestoreArchiveArchiveRestoreKindEnum = "archive ID"
)

func (e *RestoreArchiveArchiveRestoreKindEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "latestArchive":
		fallthrough
	case "latestCommit":
		fallthrough
	case "archive ID":
		*e = RestoreArchiveArchiveRestoreKindEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RestoreArchiveArchiveRestoreKindEnum: %s", s)
	}
}

type RestoreArchivePathParams struct {
	// Type of archive to make
	ArchiveKind shared.ArchiveKindEnum `pathParam:"style=simple,explode=false,name=archiveKind"`
	// What archive to restore (latest archive, latest commit in configuration repository, or archive with ID as given by listArchive)
	ArchiveRestoreKind RestoreArchiveArchiveRestoreKindEnum `pathParam:"style=simple,explode=false,name=archiveRestoreKind"`
}

type RestoreArchiveRequest struct {
	PathParams RestoreArchivePathParams
}

// RestoreArchive200ApplicationJSONActionEnum - The kind of the archive
type RestoreArchive200ApplicationJSONActionEnum string

const (
	RestoreArchive200ApplicationJSONActionEnumRestoreFullLatestArchive       RestoreArchive200ApplicationJSONActionEnum = "restoreFullLatestArchive"
	RestoreArchive200ApplicationJSONActionEnumRestoreGroupLatestArchive      RestoreArchive200ApplicationJSONActionEnum = "restoreGroupLatestArchive"
	RestoreArchive200ApplicationJSONActionEnumRestoreRulesLatestArchive      RestoreArchive200ApplicationJSONActionEnum = "restoreRulesLatestArchive"
	RestoreArchive200ApplicationJSONActionEnumRestoreDirectivesLatestArchive RestoreArchive200ApplicationJSONActionEnum = "restoreDirectivesLatestArchive"
	RestoreArchive200ApplicationJSONActionEnumRestoreParametersLatestArchive RestoreArchive200ApplicationJSONActionEnum = "restoreParametersLatestArchive"
	RestoreArchive200ApplicationJSONActionEnumRestoreFullLatestCommit        RestoreArchive200ApplicationJSONActionEnum = "restoreFullLatestCommit"
	RestoreArchive200ApplicationJSONActionEnumRestoreGroupLatestCommit       RestoreArchive200ApplicationJSONActionEnum = "restoreGroupLatestCommit"
	RestoreArchive200ApplicationJSONActionEnumRestoreRulesLatestCommit       RestoreArchive200ApplicationJSONActionEnum = "restoreRulesLatestCommit"
	RestoreArchive200ApplicationJSONActionEnumRestoreDirectivesLatestCommit  RestoreArchive200ApplicationJSONActionEnum = "restoreDirectivesLatestCommit"
	RestoreArchive200ApplicationJSONActionEnumRestoreParametersLatestCommit  RestoreArchive200ApplicationJSONActionEnum = "restoreParametersLatestCommit"
	RestoreArchive200ApplicationJSONActionEnumArchiveFullDateRestore         RestoreArchive200ApplicationJSONActionEnum = "archiveFullDateRestore"
	RestoreArchive200ApplicationJSONActionEnumArchiveGroupDateRestore        RestoreArchive200ApplicationJSONActionEnum = "archiveGroupDateRestore"
	RestoreArchive200ApplicationJSONActionEnumArchiveRulesDateRestore        RestoreArchive200ApplicationJSONActionEnum = "archiveRulesDateRestore"
	RestoreArchive200ApplicationJSONActionEnumArchiveDirectivesDateRestore   RestoreArchive200ApplicationJSONActionEnum = "archiveDirectivesDateRestore"
	RestoreArchive200ApplicationJSONActionEnumArchiveParametersDateRestore   RestoreArchive200ApplicationJSONActionEnum = "archiveParametersDateRestore"
)

func (e *RestoreArchive200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "restoreFullLatestArchive":
		fallthrough
	case "restoreGroupLatestArchive":
		fallthrough
	case "restoreRulesLatestArchive":
		fallthrough
	case "restoreDirectivesLatestArchive":
		fallthrough
	case "restoreParametersLatestArchive":
		fallthrough
	case "restoreFullLatestCommit":
		fallthrough
	case "restoreGroupLatestCommit":
		fallthrough
	case "restoreRulesLatestCommit":
		fallthrough
	case "restoreDirectivesLatestCommit":
		fallthrough
	case "restoreParametersLatestCommit":
		fallthrough
	case "archiveFullDateRestore":
		fallthrough
	case "archiveGroupDateRestore":
		fallthrough
	case "archiveRulesDateRestore":
		fallthrough
	case "archiveDirectivesDateRestore":
		fallthrough
	case "archiveParametersDateRestore":
		*e = RestoreArchive200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RestoreArchive200ApplicationJSONActionEnum: %s", s)
	}
}

type RestoreArchive200ApplicationJSONData struct {
	Directive  *string `json:"directive,omitempty"`
	Full       *string `json:"full,omitempty"`
	Groups     *string `json:"groups,omitempty"`
	Parameters *string `json:"parameters,omitempty"`
	Rules      *string `json:"rules,omitempty"`
}

// RestoreArchive200ApplicationJSONResultEnum - Result of the request
type RestoreArchive200ApplicationJSONResultEnum string

const (
	RestoreArchive200ApplicationJSONResultEnumSuccess RestoreArchive200ApplicationJSONResultEnum = "success"
	RestoreArchive200ApplicationJSONResultEnumError   RestoreArchive200ApplicationJSONResultEnum = "error"
)

func (e *RestoreArchive200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = RestoreArchive200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RestoreArchive200ApplicationJSONResultEnum: %s", s)
	}
}

// RestoreArchive200ApplicationJSON - Success
type RestoreArchive200ApplicationJSON struct {
	// The kind of the archive
	Action RestoreArchive200ApplicationJSONActionEnum `json:"action"`
	Data   RestoreArchive200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result RestoreArchive200ApplicationJSONResultEnum `json:"result"`
}

type RestoreArchiveResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	RestoreArchive200ApplicationJSONObject *RestoreArchive200ApplicationJSON
}
