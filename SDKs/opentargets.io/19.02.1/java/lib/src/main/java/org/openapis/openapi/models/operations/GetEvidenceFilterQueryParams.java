/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetEvidenceFilterQueryParams {
    /**
     * Data source to consider.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=data source")
    public String dataSource;
    public GetEvidenceFilterQueryParams withDataSource(String dataSource) {
        this.dataSource = dataSource;
        return this;
    }
    
    /**
     * Type of data structure to return. Can be 'full', 'simple', 'ids', or 'count'.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=datastructure")
    public String datastructure;
    public GetEvidenceFilterQueryParams withDatastructure(String datastructure) {
        this.datastructure = datastructure;
        return this;
    }
    
    /**
     * Data type to consider.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=datatype")
    public String datatype;
    public GetEvidenceFilterQueryParams withDatatype(String datatype) {
        this.datatype = datatype;
        return this;
    }
    
    /**
     * An EFO code listed as disease.id.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=disease")
    public String disease;
    public GetEvidenceFilterQueryParams withDisease(String disease) {
        this.disease = disease;
        return this;
    }
    
    /**
     * The fields you want to retrieve. This will get priority over the data structure requested.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    public String fields;
    public GetEvidenceFilterQueryParams withFields(String fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * Format to get the data back. Can be 'json', 'xml', 'tab' or 'csv'. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=format")
    public String format;
    public GetEvidenceFilterQueryParams withFormat(String format) {
        this.format = format;
        return this;
    }
    
    /**
     * How many initial results should be skipped. Defaults to 0.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=from")
    public Double from;
    public GetEvidenceFilterQueryParams withFrom(Double from) {
        this.from = from;
        return this;
    }
    
    /**
     * A pathway identifier (meaning all the targets linked to that pathway).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pathway")
    public String pathway;
    public GetEvidenceFilterQueryParams withPathway(String pathway) {
        this.pathway = pathway;
        return this;
    }
    
    /**
     * Filter by maximum score value.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=scorevalue_max")
    public Float scorevalueMax;
    public GetEvidenceFilterQueryParams withScorevalueMax(Float scorevalueMax) {
        this.scorevalueMax = scorevalueMax;
        return this;
    }
    
    /**
     * Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=scorevalue_min")
    public Float scorevalueMin;
    public GetEvidenceFilterQueryParams withScorevalueMin(Float scorevalueMin) {
        this.scorevalueMin = scorevalueMin;
        return this;
    }
    
    /**
     * Maximum amount of results to return. Defaults to 10, max is 10000.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=size")
    public Double size;
    public GetEvidenceFilterQueryParams withSize(Double size) {
        this.size = size;
        return this;
    }
    
    /**
     * Sort by the given field. The default is 'scores.association_score' in descending order. Use '~' prefix to do ascending
     * order e.g. '~scores.association_score'. It supports multiple entries.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    public String sort;
    public GetEvidenceFilterQueryParams withSort(String sort) {
        this.sort = sort;
        return this;
    }
    
    /**
     * A target identifier listed as target.id.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=target")
    public String target;
    public GetEvidenceFilterQueryParams withTarget(String target) {
        this.target = target;
        return this;
    }
    
    /**
     * A UniProt keyword (meaning all the targets linked to that keyword).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=uniprotkw")
    public String uniprotkw;
    public GetEvidenceFilterQueryParams withUniprotkw(String uniprotkw) {
        this.uniprotkw = uniprotkw;
        return this;
    }
    
}
