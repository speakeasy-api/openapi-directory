// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type BigtableadminProjectsInstancesTablesListSecurityOption1 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type BigtableadminProjectsInstancesTablesListSecurityOption2 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type BigtableadminProjectsInstancesTablesListSecurityOption3 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type BigtableadminProjectsInstancesTablesListSecurityOption4 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type BigtableadminProjectsInstancesTablesListSecurityOption5 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type BigtableadminProjectsInstancesTablesListSecurityOption6 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type BigtableadminProjectsInstancesTablesListSecurity struct {
	Option1 *BigtableadminProjectsInstancesTablesListSecurityOption1 `security:"option"`
	Option2 *BigtableadminProjectsInstancesTablesListSecurityOption2 `security:"option"`
	Option3 *BigtableadminProjectsInstancesTablesListSecurityOption3 `security:"option"`
	Option4 *BigtableadminProjectsInstancesTablesListSecurityOption4 `security:"option"`
	Option5 *BigtableadminProjectsInstancesTablesListSecurityOption5 `security:"option"`
	Option6 *BigtableadminProjectsInstancesTablesListSecurityOption6 `security:"option"`
}

// BigtableadminProjectsInstancesTablesListViewEnum - The view to be applied to the returned tables' fields. Only NAME_ONLY view (default), REPLICATION_VIEW and ENCRYPTION_VIEW are supported.
type BigtableadminProjectsInstancesTablesListViewEnum string

const (
	BigtableadminProjectsInstancesTablesListViewEnumViewUnspecified BigtableadminProjectsInstancesTablesListViewEnum = "VIEW_UNSPECIFIED"
	BigtableadminProjectsInstancesTablesListViewEnumNameOnly        BigtableadminProjectsInstancesTablesListViewEnum = "NAME_ONLY"
	BigtableadminProjectsInstancesTablesListViewEnumSchemaView      BigtableadminProjectsInstancesTablesListViewEnum = "SCHEMA_VIEW"
	BigtableadminProjectsInstancesTablesListViewEnumReplicationView BigtableadminProjectsInstancesTablesListViewEnum = "REPLICATION_VIEW"
	BigtableadminProjectsInstancesTablesListViewEnumEncryptionView  BigtableadminProjectsInstancesTablesListViewEnum = "ENCRYPTION_VIEW"
	BigtableadminProjectsInstancesTablesListViewEnumStatsView       BigtableadminProjectsInstancesTablesListViewEnum = "STATS_VIEW"
	BigtableadminProjectsInstancesTablesListViewEnumFull            BigtableadminProjectsInstancesTablesListViewEnum = "FULL"
)

func (e BigtableadminProjectsInstancesTablesListViewEnum) ToPointer() *BigtableadminProjectsInstancesTablesListViewEnum {
	return &e
}

func (e *BigtableadminProjectsInstancesTablesListViewEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VIEW_UNSPECIFIED":
		fallthrough
	case "NAME_ONLY":
		fallthrough
	case "SCHEMA_VIEW":
		fallthrough
	case "REPLICATION_VIEW":
		fallthrough
	case "ENCRYPTION_VIEW":
		fallthrough
	case "STATS_VIEW":
		fallthrough
	case "FULL":
		*e = BigtableadminProjectsInstancesTablesListViewEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BigtableadminProjectsInstancesTablesListViewEnum: %v", v)
	}
}

type BigtableadminProjectsInstancesTablesListRequest struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Maximum number of results per page. A page_size of zero lets the server choose the number of items to return. A page_size which is strictly positive will return at most that many items. A negative page_size will cause an error. Following the first request, subsequent paginated calls are not required to pass a page_size. If a page_size is set in subsequent calls, it must match the page_size given in the first request.
	PageSize *int64 `queryParam:"style=form,explode=true,name=pageSize"`
	// The value of `next_page_token` returned by a previous call.
	PageToken *string `queryParam:"style=form,explode=true,name=pageToken"`
	// Required. The unique name of the instance for which tables should be listed. Values are of the form `projects/{project}/instances/{instance}`.
	Parent string `pathParam:"style=simple,explode=false,name=parent"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
	// The view to be applied to the returned tables' fields. Only NAME_ONLY view (default), REPLICATION_VIEW and ENCRYPTION_VIEW are supported.
	View *BigtableadminProjectsInstancesTablesListViewEnum `queryParam:"style=form,explode=true,name=view"`
}

type BigtableadminProjectsInstancesTablesListResponse struct {
	ContentType string
	// Successful response
	ListTablesResponse *shared.ListTablesResponse
	StatusCode         int
	RawResponse        *http.Response
}
