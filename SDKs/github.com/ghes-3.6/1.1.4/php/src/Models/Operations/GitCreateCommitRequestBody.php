<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class GitCreateCommitRequestBody
{
    /**
     * Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\GitCreateCommitRequestBodyAuthor $author
     */
	#[\JMS\Serializer\Annotation\SerializedName('author')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\GitCreateCommitRequestBodyAuthor')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GitCreateCommitRequestBodyAuthor $author = null;
    
    /**
     * Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\GitCreateCommitRequestBodyCommitter $committer
     */
	#[\JMS\Serializer\Annotation\SerializedName('committer')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\GitCreateCommitRequestBodyCommitter')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GitCreateCommitRequestBodyCommitter $committer = null;
    
    /**
     * The commit message
     * 
     * @var string $message
     */
	#[\JMS\Serializer\Annotation\SerializedName('message')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $message;
    
    /**
     * The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.
     * 
     * @var ?array<string> $parents
     */
	#[\JMS\Serializer\Annotation\SerializedName('parents')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $parents = null;
    
    /**
     * The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.
     * 
     * @var ?string $signature
     */
	#[\JMS\Serializer\Annotation\SerializedName('signature')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $signature = null;
    
    /**
     * The SHA of the tree object this commit points to
     * 
     * @var string $tree
     */
	#[\JMS\Serializer\Annotation\SerializedName('tree')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $tree;
    
	public function __construct()
	{
		$this->author = null;
		$this->committer = null;
		$this->message = "";
		$this->parents = null;
		$this->signature = null;
		$this->tree = "";
	}
}
