"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Consent:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def post_v0_5_consent_requests_init_json(self, request: operations.PostV05ConsentRequestsInitJSONRequest) -> operations.PostV05ConsentRequestsInitJSONResponse:
        r"""Create consent request
        Creates a consent request to get data about a patient by HIU user. CM should call Gateway - ***/v0.5/consent-requests/on-init*** API with the consent-request-id
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.5/consent-requests/init'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "consent_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV05ConsentRequestsInitJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code in [400, 401, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content

        return res

    def post_v0_5_consent_requests_init_raw(self, request: operations.PostV05ConsentRequestsInitRawRequest) -> operations.PostV05ConsentRequestsInitRawResponse:
        r"""Create consent request
        Creates a consent request to get data about a patient by HIU user. CM should call Gateway - ***/v0.5/consent-requests/on-init*** API with the consent-request-id
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.5/consent-requests/init'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV05ConsentRequestsInitRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code in [400, 401, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content

        return res

    def post_v0_5_consent_requests_status_json(self, request: operations.PostV05ConsentRequestsStatusJSONRequest) -> operations.PostV05ConsentRequestsStatusJSONResponse:
        r"""Get consent request status
        Get status of consent request done previously. CM responds by calling Gateway API - ***/v0.5/consent-requests/on-status***
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.5/consent-requests/status'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "consent_request_status_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV05ConsentRequestsStatusJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code in [400, 401, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content

        return res

    def post_v0_5_consent_requests_status_raw(self, request: operations.PostV05ConsentRequestsStatusRawRequest) -> operations.PostV05ConsentRequestsStatusRawResponse:
        r"""Get consent request status
        Get status of consent request done previously. CM responds by calling Gateway API - ***/v0.5/consent-requests/on-status***
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.5/consent-requests/status'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV05ConsentRequestsStatusRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code in [400, 401, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content

        return res

    def post_v0_5_consents_fetch(self, request: operations.PostV05ConsentsFetchRequest) -> operations.PostV05ConsentsFetchResponse:
        r"""Get consent artefact
        This API is called when a HIU makes a request to get a consent artefact. For response please refer to the Gateway ***/v0.5/consents/on-fetch***
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.5/consents/fetch'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "consent_fetch_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV05ConsentsFetchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code in [400, 401, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content

        return res

    def post_v0_5_consents_hip_on_notify_json(self, request: operations.PostV05ConsentsHipOnNotifyJSONRequest) -> operations.PostV05ConsentsHipOnNotifyJSONResponse:
        r"""Consent notification
        This API is called by HIP as acknowledgement to notification of consents, in cases of consent revocation and expiration, notified by CM earlier via Gateway API - ***/v0.5/consents/hip/notify***.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.5/consents/hip/on-notify'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "hip_consent_notification_response", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV05ConsentsHipOnNotifyJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code in [401, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content

        return res

    def post_v0_5_consents_hip_on_notify_raw(self, request: operations.PostV05ConsentsHipOnNotifyRawRequest) -> operations.PostV05ConsentsHipOnNotifyRawResponse:
        r"""Consent notification
        This API is called by HIP as acknowledgement to notification of consents, in cases of consent revocation and expiration, notified by CM earlier via Gateway API - ***/v0.5/consents/hip/notify***.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.5/consents/hip/on-notify'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV05ConsentsHipOnNotifyRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code in [401, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content

        return res

    def post_v0_5_consents_hiu_on_notify(self, request: operations.PostV05ConsentsHiuOnNotifyRequest) -> operations.PostV05ConsentsHiuOnNotifyResponse:
        r"""Consent notification
        This API is called by HIU as acknowledgement to consent notifications, specifically for cases when consent is REVOKED or EXPIRED, notified by CM earlier via Gateway API - ***/v0.5/consents/hiu/notify***.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.5/consents/hiu/on-notify'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "hiu_consent_notification_response", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV05ConsentsHiuOnNotifyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code in [401, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content

        return res

    