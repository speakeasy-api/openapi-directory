/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Tracks Endpoints.
 */
export class Tracks {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Deletes a track.
   */
  deleteTracksTrackId(
    req: operations.DeleteTracksTrackIdRequest,
    security: operations.DeleteTracksTrackIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteTracksTrackIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteTracksTrackIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/tracks/{track_id}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteTracksTrackIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteTracksTrackIdResponse =
        new operations.DeleteTracksTrackIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a track.
   */
  getTracksTrackId(
    req: operations.GetTracksTrackIdRequest,
    security: operations.GetTracksTrackIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTracksTrackIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTracksTrackIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/tracks/{track_id}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTracksTrackIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTracksTrackIdResponse =
        new operations.GetTracksTrackIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.track = utils.objectToClass(httpRes?.data, shared.Track);
          }
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the comments posted on the track(track_id).
   */
  getTracksTrackIdComments(
    req: operations.GetTracksTrackIdCommentsRequest,
    security: operations.GetTracksTrackIdCommentsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTracksTrackIdCommentsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTracksTrackIdCommentsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tracks/{track_id}/comments",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTracksTrackIdCommentsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTracksTrackIdCommentsResponse =
        new operations.GetTracksTrackIdCommentsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getTracksTrackIdComments200ApplicationJSONOneOf = httpRes?.data;
          }
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of users who have favorited or liked the track.
   */
  getTracksTrackIdFavoriters(
    req: operations.GetTracksTrackIdFavoritersRequest,
    security: operations.GetTracksTrackIdFavoritersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTracksTrackIdFavoritersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTracksTrackIdFavoritersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tracks/{track_id}/favoriters",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTracksTrackIdFavoritersSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTracksTrackIdFavoritersResponse =
        new operations.GetTracksTrackIdFavoritersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.usersList = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.usersList = utils.objectToClass(
              httpRes?.data,
              shared.UsersList,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns all related tracks of track on SoundCloud.
   */
  getTracksTrackIdRelated(
    req: operations.GetTracksTrackIdRelatedRequest,
    security: operations.GetTracksTrackIdRelatedSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTracksTrackIdRelatedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTracksTrackIdRelatedRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tracks/{track_id}/related",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTracksTrackIdRelatedSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTracksTrackIdRelatedResponse =
        new operations.GetTracksTrackIdRelatedResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getTracksTrackIdRelated200ApplicationJSONOneOf = httpRes?.data;
          }
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a collection of track's reposters.
   */
  getTracksTrackIdReposters(
    req: operations.GetTracksTrackIdRepostersRequest,
    security: operations.GetTracksTrackIdRepostersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTracksTrackIdRepostersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTracksTrackIdRepostersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tracks/{track_id}/reposters",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTracksTrackIdRepostersSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTracksTrackIdRepostersResponse =
        new operations.GetTracksTrackIdRepostersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.metaUsers = utils.objectToClass(
              httpRes?.data,
              shared.MetaUsers
            );
          }
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a track's streamable URLs
   */
  getTracksTrackIdStreams(
    req: operations.GetTracksTrackIdStreamsRequest,
    security: operations.GetTracksTrackIdStreamsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTracksTrackIdStreamsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTracksTrackIdStreamsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tracks/{track_id}/streams",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTracksTrackIdStreamsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTracksTrackIdStreamsResponse =
        new operations.GetTracksTrackIdStreamsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.streams = utils.objectToClass(httpRes?.data, shared.Streams);
          }
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Uploads a new track.
   */
  postTracks(
    req: shared.TrackDataRequest,
    security: operations.PostTracksSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostTracksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.TrackDataRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/tracks";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostTracksSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostTracksResponse =
        new operations.PostTracksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.track = utils.objectToClass(httpRes?.data, shared.Track);
          }
          break;
        case [400, 401].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the newly created comment on success
   */
  postTracksTrackIdComments(
    req: operations.PostTracksTrackIdCommentsRequest,
    security: operations.PostTracksTrackIdCommentsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostTracksTrackIdCommentsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostTracksTrackIdCommentsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tracks/{track_id}/comments",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostTracksTrackIdCommentsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostTracksTrackIdCommentsResponse =
        new operations.PostTracksTrackIdCommentsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.comment = utils.objectToClass(httpRes?.data, shared.Comment);
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tooManyRequests = utils.objectToClass(
              httpRes?.data,
              shared.TooManyRequests
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a track's information.
   */
  putTracksTrackIdJson(
    req: operations.PutTracksTrackIdJsonRequest,
    security: operations.PutTracksTrackIdJsonSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PutTracksTrackIdJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutTracksTrackIdJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/tracks/{track_id}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "trackMetadataRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PutTracksTrackIdJsonSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutTracksTrackIdJsonResponse =
        new operations.PutTracksTrackIdJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.track = utils.objectToClass(httpRes?.data, shared.Track);
          }
          break;
        case [400, 401].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a track's information.
   */
  putTracksTrackIdMultipart(
    req: operations.PutTracksTrackIdMultipartRequest,
    security: operations.PutTracksTrackIdMultipartSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PutTracksTrackIdMultipartResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutTracksTrackIdMultipartRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/tracks/{track_id}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "trackDataRequest",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PutTracksTrackIdMultipartSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutTracksTrackIdMultipartResponse =
        new operations.PutTracksTrackIdMultipartResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.track = utils.objectToClass(httpRes?.data, shared.Track);
          }
          break;
        case [400, 401].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }
}
