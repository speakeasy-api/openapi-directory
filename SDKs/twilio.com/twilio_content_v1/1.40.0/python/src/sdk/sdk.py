"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "https://content.twilio.com",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""This is the public Twilio REST API."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def delete_content(self, request: operations.DeleteContentRequest, security: operations.DeleteContentSecurity, server_url: Optional[str] = None) -> operations.DeleteContentResponse:
        r"""Deletes a Content resource"""
        base_url = operations.DELETE_CONTENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteContentRequest, base_url, '/v1/Content/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteContentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def fetch_approval_fetch(self, request: operations.FetchApprovalFetchRequest, security: operations.FetchApprovalFetchSecurity, server_url: Optional[str] = None) -> operations.FetchApprovalFetchResponse:
        r"""Fetch a Content resource's approval status by its unique Content Sid"""
        base_url = operations.FETCH_APPROVAL_FETCH_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchApprovalFetchRequest, base_url, '/v1/Content/{Sid}/ApprovalRequests', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchApprovalFetchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContentV1ContentApprovalFetch])
                res.content_v1_content_approval_fetch = out

        return res

    def fetch_content(self, request: operations.FetchContentRequest, security: operations.FetchContentSecurity, server_url: Optional[str] = None) -> operations.FetchContentResponse:
        r"""Fetch a Content resource by its unique Content Sid"""
        base_url = operations.FETCH_CONTENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchContentRequest, base_url, '/v1/Content/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchContentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContentV1Content])
                res.content_v1_content = out

        return res

    def list_content(self, request: operations.ListContentRequest, security: operations.ListContentSecurity, server_url: Optional[str] = None) -> operations.ListContentResponse:
        r"""Retrieve a list of Contents belonging to the account used to make the request"""
        base_url = operations.LIST_CONTENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Content'
        
        query_params = utils.get_query_params(operations.ListContentRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListContentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListContentListContentResponse])
                res.list_content_response = out

        return res

    def list_content_and_approvals(self, request: operations.ListContentAndApprovalsRequest, security: operations.ListContentAndApprovalsSecurity, server_url: Optional[str] = None) -> operations.ListContentAndApprovalsResponse:
        r"""Retrieve a list of Contents with approval statuses belonging to the account used to make the request"""
        base_url = operations.LIST_CONTENT_AND_APPROVALS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/ContentAndApprovals'
        
        query_params = utils.get_query_params(operations.ListContentAndApprovalsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListContentAndApprovalsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListContentAndApprovalsListContentAndApprovalsResponse])
                res.list_content_and_approvals_response = out

        return res

    def list_legacy_content(self, request: operations.ListLegacyContentRequest, security: operations.ListLegacyContentSecurity, server_url: Optional[str] = None) -> operations.ListLegacyContentResponse:
        r"""Retrieve a list of Legacy Contents belonging to the account used to make the request"""
        base_url = operations.LIST_LEGACY_CONTENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/LegacyContent'
        
        query_params = utils.get_query_params(operations.ListLegacyContentRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListLegacyContentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListLegacyContentListLegacyContentResponse])
                res.list_legacy_content_response = out

        return res

    