// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type HpcerSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type HpcerRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Roll Code
	Rollcode string `json:"rollcode"`
	// Roll No
	Rollno string `json:"rollno"`
	// Year
	Year string `json:"year"`
}

// HpcerRequestBodyFormatEnum - The format of the certificate in response.
type HpcerRequestBodyFormatEnum string

const (
	HpcerRequestBodyFormatEnumPdf HpcerRequestBodyFormatEnum = "pdf"
)

func (e *HpcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = HpcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for HpcerRequestBodyFormatEnum: %s", s)
	}
}

// HpcerRequestBody - Request format
type HpcerRequestBody struct {
	CertificateParameters *HpcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format HpcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type HpcerRequest struct {
	// Request format
	Request  *HpcerRequestBody `request:"mediaType=application/json"`
	Security HpcerSecurity
}

type Hpcer504ApplicationJSONErrorEnum string

const (
	Hpcer504ApplicationJSONErrorEnumGatewayTimeout Hpcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Hpcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Hpcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hpcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Hpcer504ApplicationJSONErrorDescriptionEnum string

const (
	Hpcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Hpcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Hpcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Hpcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hpcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Hpcer504ApplicationJSON - Gateway timeout
type Hpcer504ApplicationJSON struct {
	Error            *Hpcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hpcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hpcer503ApplicationJSONErrorEnum string

const (
	Hpcer503ApplicationJSONErrorEnumServiceUnavailable Hpcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Hpcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Hpcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hpcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Hpcer503ApplicationJSONErrorDescriptionEnum string

const (
	Hpcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Hpcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Hpcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Hpcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hpcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Hpcer503ApplicationJSON - Service unavailable
type Hpcer503ApplicationJSON struct {
	Error            *Hpcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hpcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hpcer502ApplicationJSONErrorEnum string

const (
	Hpcer502ApplicationJSONErrorEnumBadGatewy Hpcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Hpcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Hpcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hpcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Hpcer502ApplicationJSONErrorDescriptionEnum string

const (
	Hpcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Hpcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Hpcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Hpcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hpcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Hpcer502ApplicationJSON - Bad gateway
type Hpcer502ApplicationJSON struct {
	Error            *Hpcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hpcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hpcer500ApplicationJSONErrorEnum string

const (
	Hpcer500ApplicationJSONErrorEnumInternalServerError Hpcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Hpcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Hpcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hpcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Hpcer500ApplicationJSONErrorDescriptionEnum string

const (
	Hpcer500ApplicationJSONErrorDescriptionEnumInternalServerError Hpcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Hpcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Hpcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hpcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Hpcer500ApplicationJSON - Internal server error
type Hpcer500ApplicationJSON struct {
	Error            *Hpcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hpcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hpcer404ApplicationJSONErrorEnum string

const (
	Hpcer404ApplicationJSONErrorEnumRecordNotFound Hpcer404ApplicationJSONErrorEnum = "record_not_found"
	Hpcer404ApplicationJSONErrorEnumURLNotFound    Hpcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Hpcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Hpcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hpcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Hpcer404ApplicationJSONErrorDescriptionEnum string

const (
	Hpcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Hpcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Hpcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Hpcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Hpcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Hpcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hpcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Hpcer404ApplicationJSON - No record found
type Hpcer404ApplicationJSON struct {
	Error            *Hpcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hpcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hpcer401ApplicationJSONErrorEnum string

const (
	Hpcer401ApplicationJSONErrorEnumInvalidAuthentication Hpcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Hpcer401ApplicationJSONErrorEnumInvalidAuthorization  Hpcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Hpcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Hpcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hpcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Hpcer401ApplicationJSONErrorDescriptionEnum string

const (
	Hpcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Hpcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Hpcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Hpcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Hpcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Hpcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hpcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Hpcer401ApplicationJSON - Unauthorized access
type Hpcer401ApplicationJSON struct {
	Error            *Hpcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hpcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hpcer400ApplicationJSONErrorEnum string

const (
	Hpcer400ApplicationJSONErrorEnumMissingParameter Hpcer400ApplicationJSONErrorEnum = "missing_parameter"
	Hpcer400ApplicationJSONErrorEnumInvalidParameter Hpcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Hpcer400ApplicationJSONErrorEnumInvalidFormat    Hpcer400ApplicationJSONErrorEnum = "invalid_format"
	Hpcer400ApplicationJSONErrorEnumInvalidTxnid     Hpcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Hpcer400ApplicationJSONErrorEnumInvalidConsentid Hpcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Hpcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Hpcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hpcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Hpcer400ApplicationJSONErrorDescriptionEnum string

const (
	Hpcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Hpcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Hpcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Hpcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Hpcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Hpcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Hpcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Hpcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Hpcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Hpcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Hpcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Hpcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hpcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Hpcer400ApplicationJSON - Bad request
type Hpcer400ApplicationJSON struct {
	Error            *Hpcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hpcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type HpcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Hpcer400ApplicationJSONObject *Hpcer400ApplicationJSON
	// Unauthorized access
	Hpcer401ApplicationJSONObject *Hpcer401ApplicationJSON
	// No record found
	Hpcer404ApplicationJSONObject *Hpcer404ApplicationJSON
	// Internal server error
	Hpcer500ApplicationJSONObject *Hpcer500ApplicationJSON
	// Bad gateway
	Hpcer502ApplicationJSONObject *Hpcer502ApplicationJSON
	// Service unavailable
	Hpcer503ApplicationJSONObject *Hpcer503ApplicationJSON
	// Gateway timeout
	Hpcer504ApplicationJSONObject *Hpcer504ApplicationJSON
}
