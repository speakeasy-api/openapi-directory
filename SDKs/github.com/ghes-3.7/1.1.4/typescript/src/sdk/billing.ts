/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Monitor charges and usage from Actions and Packages.
 */
export class Billing {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get GitHub Advanced Security active committers for an enterprise
   *
   * @remarks
   * Gets the GitHub Advanced Security active committers for an enterprise per repository.
   *
   * Each distinct user login across all repositories is counted as a single Advanced Security seat, so the `total_advanced_security_committers` is not the sum of active_users for each repository.
   *
   * The total number of repositories with committer information is tracked by the `total_count` field.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.7/rest/reference/billing#export-advanced-security-active-committers-data-for-enterprise} - API method documentation
   */
  billingGetGithubAdvancedSecurityBillingGhe(
    req: operations.BillingGetGithubAdvancedSecurityBillingGheRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.BillingGetGithubAdvancedSecurityBillingGheResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BillingGetGithubAdvancedSecurityBillingGheRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/enterprises/{enterprise}/settings/billing/advanced-security",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BillingGetGithubAdvancedSecurityBillingGheResponse =
        new operations.BillingGetGithubAdvancedSecurityBillingGheResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.advancedSecurityActiveCommitters = utils.objectToClass(
              httpRes?.data,
              shared.AdvancedSecurityActiveCommitters
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get GitHub Advanced Security active committers for an organization
   *
   * @remarks
   * Gets the GitHub Advanced Security active committers for an organization per repository.
   *
   * Each distinct user login across all repositories is counted as a single Advanced Security seat, so the `total_advanced_security_committers` is not the sum of advanced_security_committers for each repository.
   *
   * If this organization defers to an enterprise for billing, the `total_advanced_security_committers` returned from the organization API may include some users that are in more than one organization, so they will only consume a single Advanced Security seat at the enterprise level.
   *
   * The total number of repositories with committer information is tracked by the `total_count` field.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.7/rest/reference/billing#get-github-advanced-security-active-committers-for-an-organization} - API method documentation
   */
  billingGetGithubAdvancedSecurityBillingOrg(
    req: operations.BillingGetGithubAdvancedSecurityBillingOrgRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.BillingGetGithubAdvancedSecurityBillingOrgResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BillingGetGithubAdvancedSecurityBillingOrgRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/orgs/{org}/settings/billing/advanced-security",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BillingGetGithubAdvancedSecurityBillingOrgResponse =
        new operations.BillingGetGithubAdvancedSecurityBillingOrgResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.advancedSecurityActiveCommitters = utils.objectToClass(
              httpRes?.data,
              shared.AdvancedSecurityActiveCommitters
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }
}
