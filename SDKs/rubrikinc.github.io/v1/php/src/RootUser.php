<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RootUser 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Generate a TOTP secret key for the given user
     * 
     * Use this endpoint to generate the time-based one time password (TOTP) secret key for a specified user account. The secret is a key value encoded in Base32 and includes a URI for generating a scannable QR code.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GenerateTotpSecretRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GenerateTotpSecretResponse
     */
	public function generateTotpSecret(
        \OpenAPI\OpenAPI\Models\Operations\GenerateTotpSecretRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GenerateTotpSecretResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/{id}/totp/new_secret', \OpenAPI\OpenAPI\Models\Operations\GenerateTotpSecretRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GenerateTotpSecretResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->totpSecret = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TotpSecret', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the TOTP status for the given user
     * 
     * Get the time-based one time password (TOTP) status for a specified user account. The TOTP status specifies whether that account has TOTP enabled and whether TOTP is being enforced for that account.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTotpStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTotpStatusResponse
     */
	public function getTotpStatus(
        \OpenAPI\OpenAPI\Models\Operations\GetTotpStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTotpStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/{id}/totp/status', \OpenAPI\OpenAPI\Models\Operations\GetTotpStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTotpStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->totpStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TotpStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the local user account lockout settings
     * 
     * Get the local user account lockout settings which are used to configure whether user accounts will be locked on failed logins, when they will be locked and the duration for which they will stay locked.
     * 
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserAccountLockoutSettingsResponse
     */
	public function getUserAccountLockoutSettings(
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserAccountLockoutSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/lockout');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserAccountLockoutSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->localUserAccountLockoutStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LocalUserAccountLockoutStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the local user account lockout settings
     * 
     * Update the local user account lockout settings which are used to configure whether user accounts will be locked on failed logins, when they will be locked and the duration for which they will stay locked.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\LocalUserAccountLockoutConfig $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ManageUserAccountLockoutSettingsResponse
     */
	public function manageUserAccountLockoutSettings(
        \OpenAPI\OpenAPI\Models\Shared\LocalUserAccountLockoutConfig $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ManageUserAccountLockoutSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/lockout');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ManageUserAccountLockoutSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->localUserAccountLockoutStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LocalUserAccountLockoutStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reset the TOTP for the given user
     * 
     * Reset the TOTP settings to the default disabled state for the specified user account.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ResetTotpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ResetTotpResponse
     */
	public function resetTotp(
        \OpenAPI\OpenAPI\Models\Operations\ResetTotpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ResetTotpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/{id}/totp/config', \OpenAPI\OpenAPI\Models\Operations\ResetTotpRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResetTotpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Configure the TOTP secret for the given user
     * 
     * Use this endpoint to configure the time-based one time password (TOTP) secret for a specified user account. The endpoint replaces an existing secret with the new one. The Rubrik cluster checks the secret against a one time password (OTP) to ensure validity.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetupTotpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SetupTotpResponse
     */
	public function setupTotp(
        \OpenAPI\OpenAPI\Models\Operations\SetupTotpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SetupTotpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/{id}/totp/config', \OpenAPI\OpenAPI\Models\Operations\SetupTotpRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "totpConfigUpdateRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetupTotpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Unlock a user account
     * 
     * Unlock a user account that has been locked because of too many failed login attempts.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnlockUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UnlockUserResponse
     */
	public function unlockUser(
        \OpenAPI\OpenAPI\Models\Operations\UnlockUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UnlockUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/{id}/unlock', \OpenAPI\OpenAPI\Models\Operations\UnlockUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnlockUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
}