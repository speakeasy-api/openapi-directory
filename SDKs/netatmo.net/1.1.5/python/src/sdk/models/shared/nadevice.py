"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import nadashboarddata as shared_nadashboarddata
from ..shared import nadate as shared_nadate
from ..shared import naheatingsystem as shared_naheatingsystem
from ..shared import nahousemodel as shared_nahousemodel
from ..shared import naobject as shared_naobject
from ..shared import naplace as shared_naplace
from ..shared import nathermprogram as shared_nathermprogram
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NADevice:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_id'), 'exclude': lambda f: f is None }})  
    behavior: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('behavior'), 'exclude': lambda f: f is None }})  
    cipher_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cipher_id'), 'exclude': lambda f: f is None }})  
    dashboard_data: Optional[shared_nadashboarddata.NADashboardData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dashboard_data'), 'exclude': lambda f: f is None }})  
    data_type: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data_type'), 'exclude': lambda f: f is None }})  
    date_setup: Optional[shared_nadate.NADate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_setup'), 'exclude': lambda f: f is None }})  
    firmware: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})  
    first_pid_avail: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_pid_avail'), 'exclude': lambda f: f is None }})  
    heating_system: Optional[shared_naheatingsystem.NAHeatingSystem] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('heating_system'), 'exclude': lambda f: f is None }})  
    house_model: Optional[shared_nahousemodel.NAHouseModel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('house_model'), 'exclude': lambda f: f is None }})  
    hw_version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hw_version'), 'exclude': lambda f: f is None }})  
    ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip'), 'exclude': lambda f: f is None }})  
    last_fw_update: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_fw_update'), 'exclude': lambda f: f is None }})  
    last_radio_store: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_radio_store'), 'exclude': lambda f: f is None }})  
    last_status_store: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_status_store'), 'exclude': lambda f: f is None }})  
    last_upgrade: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_upgrade'), 'exclude': lambda f: f is None }})  
    module_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('module_name'), 'exclude': lambda f: f is None }})  
    modules: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modules'), 'exclude': lambda f: f is None }})
    r"""It lists which modules are linked with this device"""  
    new_feature_avail: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('new_feature_avail'), 'exclude': lambda f: f is None }})  
    place: Optional[shared_naplace.NAPlace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('place'), 'exclude': lambda f: f is None }})  
    public_ext_data: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public_ext_data'), 'exclude': lambda f: f is None }})  
    setpoint: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('setpoint'), 'exclude': lambda f: f is None }})  
    setpoint_default_duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('setpoint_default_duration'), 'exclude': lambda f: f is None }})  
    setpoint_order: Optional[dict[str, list[shared_naobject.NAObject]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('setpoint_order'), 'exclude': lambda f: f is None }})  
    station_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('station_name'), 'exclude': lambda f: f is None }})  
    therm_program: Optional[dict[str, shared_nathermprogram.NAThermProgram]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('therm_program'), 'exclude': lambda f: f is None }})  
    therm_program_backup: Optional[dict[str, list[shared_nathermprogram.NAThermProgram]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('therm_program_backup'), 'exclude': lambda f: f is None }})  
    therm_program_order: Optional[dict[str, list[shared_naobject.NAObject]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('therm_program_order'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Included in every device or module. It defines the type of the device/module. Its values are among :
    NAMain : for the base station
    NAModule1 : for the outdoor module
    NAModule4 : for the additionnal indoor module
    NAModule3 : for the rain gauge module
    NAPlug : for the thermostat relay/plug
    NATherm1 : for the thermostat module
    """  
    udp_conn: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('udp_conn'), 'exclude': lambda f: f is None }})  
    user_owner: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_owner'), 'exclude': lambda f: f is None }})  
    wifi_status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wifi_status'), 'exclude': lambda f: f is None }})
    r"""It contains the current wifi status. The different thresholds to take into account are
    RSSI_THRESHOLD_0 = 86 bad signal
    RSSI_THRESHOLD_1 = 71 middle quality signal
    RSSI_THRESHOLD_2 = 56 good signal
    """  
    