"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MachineType = exports.MachineTypeArchitectureEnum = exports.MachineTypeAccelerators = void 0;
var utils_1 = require("../../../internal/utils");
var bundledlocalssds_1 = require("./bundledlocalssds");
var deprecationstatus_1 = require("./deprecationstatus");
var class_transformer_1 = require("class-transformer");
var MachineTypeAccelerators = /** @class */ (function (_super) {
    __extends(MachineTypeAccelerators, _super);
    function MachineTypeAccelerators() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "guestAcceleratorCount" }),
        __metadata("design:type", Number)
    ], MachineTypeAccelerators.prototype, "guestAcceleratorCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "guestAcceleratorType" }),
        __metadata("design:type", String)
    ], MachineTypeAccelerators.prototype, "guestAcceleratorType", void 0);
    return MachineTypeAccelerators;
}(utils_1.SpeakeasyBase));
exports.MachineTypeAccelerators = MachineTypeAccelerators;
/**
 * [Output Only] The architecture of the machine type.
 */
var MachineTypeArchitectureEnum;
(function (MachineTypeArchitectureEnum) {
    MachineTypeArchitectureEnum["ArchitectureUnspecified"] = "ARCHITECTURE_UNSPECIFIED";
    MachineTypeArchitectureEnum["Arm64"] = "ARM64";
    MachineTypeArchitectureEnum["X8664"] = "X86_64";
})(MachineTypeArchitectureEnum = exports.MachineTypeArchitectureEnum || (exports.MachineTypeArchitectureEnum = {}));
/**
 * Represents a Machine Type resource. You can use specific machine types for your VM instances based on performance and pricing requirements. For more information, read Machine Types.
 */
var MachineType = /** @class */ (function (_super) {
    __extends(MachineType, _super);
    function MachineType() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: MachineTypeAccelerators }),
        (0, class_transformer_1.Expose)({ name: "accelerators" }),
        (0, class_transformer_1.Type)(function () { return MachineTypeAccelerators; }),
        __metadata("design:type", Array)
    ], MachineType.prototype, "accelerators", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "architecture" }),
        __metadata("design:type", String)
    ], MachineType.prototype, "architecture", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "bundledLocalSsds" }),
        (0, class_transformer_1.Type)(function () { return bundledlocalssds_1.BundledLocalSsds; }),
        __metadata("design:type", bundledlocalssds_1.BundledLocalSsds)
    ], MachineType.prototype, "bundledLocalSsds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "creationTimestamp" }),
        __metadata("design:type", String)
    ], MachineType.prototype, "creationTimestamp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "deprecated" }),
        (0, class_transformer_1.Type)(function () { return deprecationstatus_1.DeprecationStatus; }),
        __metadata("design:type", deprecationstatus_1.DeprecationStatus)
    ], MachineType.prototype, "deprecated", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], MachineType.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "guestCpus" }),
        __metadata("design:type", Number)
    ], MachineType.prototype, "guestCpus", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], MachineType.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "isSharedCpu" }),
        __metadata("design:type", Boolean)
    ], MachineType.prototype, "isSharedCpu", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "kind" }),
        __metadata("design:type", String)
    ], MachineType.prototype, "kind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "maximumPersistentDisks" }),
        __metadata("design:type", Number)
    ], MachineType.prototype, "maximumPersistentDisks", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "maximumPersistentDisksSizeGb" }),
        __metadata("design:type", String)
    ], MachineType.prototype, "maximumPersistentDisksSizeGb", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "memoryMb" }),
        __metadata("design:type", Number)
    ], MachineType.prototype, "memoryMb", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], MachineType.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "selfLink" }),
        __metadata("design:type", String)
    ], MachineType.prototype, "selfLink", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "selfLinkWithId" }),
        __metadata("design:type", String)
    ], MachineType.prototype, "selfLinkWithId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "zone" }),
        __metadata("design:type", String)
    ], MachineType.prototype, "zone", void 0);
    return MachineType;
}(utils_1.SpeakeasyBase));
exports.MachineType = MachineType;
