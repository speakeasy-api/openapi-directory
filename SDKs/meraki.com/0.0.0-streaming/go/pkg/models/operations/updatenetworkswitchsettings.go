// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateNetworkSwitchSettingsRequestBodyPowerExceptionsPowerTypeEnum - Per switch exception (combined, redundant, useNetworkSetting)
type UpdateNetworkSwitchSettingsRequestBodyPowerExceptionsPowerTypeEnum string

const (
	UpdateNetworkSwitchSettingsRequestBodyPowerExceptionsPowerTypeEnumCombined          UpdateNetworkSwitchSettingsRequestBodyPowerExceptionsPowerTypeEnum = "combined"
	UpdateNetworkSwitchSettingsRequestBodyPowerExceptionsPowerTypeEnumRedundant         UpdateNetworkSwitchSettingsRequestBodyPowerExceptionsPowerTypeEnum = "redundant"
	UpdateNetworkSwitchSettingsRequestBodyPowerExceptionsPowerTypeEnumUseNetworkSetting UpdateNetworkSwitchSettingsRequestBodyPowerExceptionsPowerTypeEnum = "useNetworkSetting"
)

func (e UpdateNetworkSwitchSettingsRequestBodyPowerExceptionsPowerTypeEnum) ToPointer() *UpdateNetworkSwitchSettingsRequestBodyPowerExceptionsPowerTypeEnum {
	return &e
}

func (e *UpdateNetworkSwitchSettingsRequestBodyPowerExceptionsPowerTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "combined":
		fallthrough
	case "redundant":
		fallthrough
	case "useNetworkSetting":
		*e = UpdateNetworkSwitchSettingsRequestBodyPowerExceptionsPowerTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSwitchSettingsRequestBodyPowerExceptionsPowerTypeEnum: %v", v)
	}
}

type UpdateNetworkSwitchSettingsRequestBodyPowerExceptions struct {
	// Per switch exception (combined, redundant, useNetworkSetting)
	PowerType UpdateNetworkSwitchSettingsRequestBodyPowerExceptionsPowerTypeEnum `json:"powerType"`
	// Serial number of the switch
	Serial string `json:"serial"`
}

type UpdateNetworkSwitchSettingsRequestBody struct {
	// Exceptions on a per switch basis to "useCombinedPower"
	PowerExceptions []UpdateNetworkSwitchSettingsRequestBodyPowerExceptions `json:"powerExceptions,omitempty"`
	// The use Combined Power as the default behavior of secondary power supplies on supported devices.
	UseCombinedPower *bool `json:"useCombinedPower,omitempty"`
	// Management VLAN
	Vlan *int64 `json:"vlan,omitempty"`
}

type UpdateNetworkSwitchSettingsRequest struct {
	RequestBody *UpdateNetworkSwitchSettingsRequestBody `request:"mediaType=application/json"`
	NetworkID   string                                  `pathParam:"style=simple,explode=false,name=networkId"`
}

type UpdateNetworkSwitchSettingsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkSwitchSettings200ApplicationJSONObject map[string]interface{}
}
