// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DescribePlaceIndexResponsePricingPlanEnum - No longer used. Always returns <code>RequestBasedUsage</code>.Deprecated. Always returns RequestBasedUsage.
type DescribePlaceIndexResponsePricingPlanEnum string

const (
	DescribePlaceIndexResponsePricingPlanEnumRequestBasedUsage     DescribePlaceIndexResponsePricingPlanEnum = "RequestBasedUsage"
	DescribePlaceIndexResponsePricingPlanEnumMobileAssetTracking   DescribePlaceIndexResponsePricingPlanEnum = "MobileAssetTracking"
	DescribePlaceIndexResponsePricingPlanEnumMobileAssetManagement DescribePlaceIndexResponsePricingPlanEnum = "MobileAssetManagement"
)

func (e DescribePlaceIndexResponsePricingPlanEnum) ToPointer() *DescribePlaceIndexResponsePricingPlanEnum {
	return &e
}

func (e *DescribePlaceIndexResponsePricingPlanEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RequestBasedUsage":
		fallthrough
	case "MobileAssetTracking":
		fallthrough
	case "MobileAssetManagement":
		*e = DescribePlaceIndexResponsePricingPlanEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribePlaceIndexResponsePricingPlanEnum: %v", v)
	}
}

// DescribePlaceIndexResponse - Success
type DescribePlaceIndexResponse struct {
	CreateTime              time.Time                                  `json:"CreateTime"`
	DataSource              string                                     `json:"DataSource"`
	DataSourceConfiguration DataSourceConfiguration                    `json:"DataSourceConfiguration"`
	Description             string                                     `json:"Description"`
	IndexArn                string                                     `json:"IndexArn"`
	IndexName               string                                     `json:"IndexName"`
	PricingPlan             *DescribePlaceIndexResponsePricingPlanEnum `json:"PricingPlan,omitempty"`
	Tags                    map[string]string                          `json:"Tags,omitempty"`
	UpdateTime              time.Time                                  `json:"UpdateTime"`
}
