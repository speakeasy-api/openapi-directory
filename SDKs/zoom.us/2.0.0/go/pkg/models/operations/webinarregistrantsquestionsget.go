// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type WebinarRegistrantsQuestionsGetSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type WebinarRegistrantsQuestionsGetRequest struct {
	// The webinar ID in "**long**" format(represented as int64 data type in JSON).
	WebinarID int64 `pathParam:"style=simple,explode=false,name=webinarId"`
}

// WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsCustomQuestionsTypeEnum - The question-answer type.
type WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsCustomQuestionsTypeEnum string

const (
	WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsCustomQuestionsTypeEnumShort          WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsCustomQuestionsTypeEnum = "short"
	WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsCustomQuestionsTypeEnumSingleRadio    WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsCustomQuestionsTypeEnum = "single_radio"
	WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsCustomQuestionsTypeEnumSingleDropdown WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsCustomQuestionsTypeEnum = "single_dropdown"
	WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsCustomQuestionsTypeEnumMultiple       WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsCustomQuestionsTypeEnum = "multiple"
)

func (e *WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsCustomQuestionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "short":
		fallthrough
	case "single_radio":
		fallthrough
	case "single_dropdown":
		fallthrough
	case "multiple":
		*e = WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsCustomQuestionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsCustomQuestionsTypeEnum: %s", s)
	}
}

type WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsCustomQuestions struct {
	// An array of answer choices. Can't be used for short answer type.
	Answers []string `json:"answers,omitempty"`
	// State whether or not the custom question is required to be answered by a registrant.
	Required *bool `json:"required,omitempty"`
	// Custom question.
	Title *string `json:"title,omitempty"`
	// The question-answer type.
	Type *WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsCustomQuestionsTypeEnum `json:"type,omitempty"`
}

// WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnum - Field name
type WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnum string

const (
	WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnumLastName              WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnum = "last_name"
	WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnumAddress               WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnum = "address"
	WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnumCity                  WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnum = "city"
	WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnumCountry               WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnum = "country"
	WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnumZip                   WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnum = "zip"
	WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnumState                 WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnum = "state"
	WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnumPhone                 WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnum = "phone"
	WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnumIndustry              WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnum = "industry"
	WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnumOrg                   WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnum = "org"
	WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnumJobTitle              WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnum = "job_title"
	WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnumPurchasingTimeFrame   WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnum = "purchasing_time_frame"
	WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnumRoleInPurchaseProcess WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnum = "role_in_purchase_process"
	WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnumNoOfEmployees         WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnum = "no_of_employees"
	WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnumComments              WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnum = "comments"
)

func (e *WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "last_name":
		fallthrough
	case "address":
		fallthrough
	case "city":
		fallthrough
	case "country":
		fallthrough
	case "zip":
		fallthrough
	case "state":
		fallthrough
	case "phone":
		fallthrough
	case "industry":
		fallthrough
	case "org":
		fallthrough
	case "job_title":
		fallthrough
	case "purchasing_time_frame":
		fallthrough
	case "role_in_purchase_process":
		fallthrough
	case "no_of_employees":
		fallthrough
	case "comments":
		*e = WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnum: %s", s)
	}
}

type WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestions struct {
	// Field name
	FieldName *WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestionsFieldNameEnum `json:"field_name,omitempty"`
	// State whether the selected fields are required or optional.
	Required *bool `json:"required,omitempty"`
}

// WebinarRegistrantsQuestionsGetWebinarRegistrantQuestions - Webinar Registrant Questions
type WebinarRegistrantsQuestionsGetWebinarRegistrantQuestions struct {
	// Array of Registrant Custom Questions.
	CustomQuestions []WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsCustomQuestions `json:"custom_questions,omitempty"`
	// Array of registration fields whose values should be provided by registrants during registration.
	Questions []WebinarRegistrantsQuestionsGetWebinarRegistrantQuestionsQuestions `json:"questions,omitempty"`
}

type WebinarRegistrantsQuestionsGetResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br>
	// Webinar Registrant Question object returned
	WebinarRegistrantQuestions *WebinarRegistrantsQuestionsGetWebinarRegistrantQuestions
}
