"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import usagemetrics as shared_usagemetrics
from ..shared import usagesnapshot as shared_usagesnapshot
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RuntimeInfo:
    r"""Runtime information about workload execution."""
    
    approximate_usage: Optional[shared_usagemetrics.UsageMetrics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approximateUsage'), 'exclude': lambda f: f is None }})
    r"""Usage metrics represent approximate total resources consumed by a workload."""  
    current_usage: Optional[shared_usagesnapshot.UsageSnapshot] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentUsage'), 'exclude': lambda f: f is None }})
    r"""The usage snaphot represents the resources consumed by a workload at a specified time."""  
    diagnostic_output_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diagnosticOutputUri'), 'exclude': lambda f: f is None }})
    r"""Output only. A URI pointing to the location of the diagnostics tarball."""  
    endpoints: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endpoints'), 'exclude': lambda f: f is None }})
    r"""Output only. Map of remote access endpoints (such as web interfaces and APIs) to their URIs."""  
    output_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outputUri'), 'exclude': lambda f: f is None }})
    r"""Output only. A URI pointing to the location of the stdout and stderr of the workload."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RuntimeInfoInput:
    r"""Runtime information about workload execution."""
    
    approximate_usage: Optional[shared_usagemetrics.UsageMetrics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approximateUsage'), 'exclude': lambda f: f is None }})
    r"""Usage metrics represent approximate total resources consumed by a workload."""  
    current_usage: Optional[shared_usagesnapshot.UsageSnapshot] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentUsage'), 'exclude': lambda f: f is None }})
    r"""The usage snaphot represents the resources consumed by a workload at a specified time."""  
    