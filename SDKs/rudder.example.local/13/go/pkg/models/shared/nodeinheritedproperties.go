// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// NodeInheritedPropertiesPropertiesHierarchyKindEnum - The kind of object from which the property's value is inherited
type NodeInheritedPropertiesPropertiesHierarchyKindEnum string

const (
	NodeInheritedPropertiesPropertiesHierarchyKindEnumGlobal NodeInheritedPropertiesPropertiesHierarchyKindEnum = "global"
	NodeInheritedPropertiesPropertiesHierarchyKindEnumGroup  NodeInheritedPropertiesPropertiesHierarchyKindEnum = "group"
)

func (e *NodeInheritedPropertiesPropertiesHierarchyKindEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "global":
		fallthrough
	case "group":
		*e = NodeInheritedPropertiesPropertiesHierarchyKindEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NodeInheritedPropertiesPropertiesHierarchyKindEnum: %s", s)
	}
}

type NodeInheritedPropertiesPropertiesHierarchy struct {
	// in the case of a group, its identifier
	ID *string `json:"id,omitempty"`
	// The kind of object from which the property's value is inherited
	Kind NodeInheritedPropertiesPropertiesHierarchyKindEnum `json:"kind"`
	// in the case of a group, its name
	Name *string `json:"name,omitempty"`
	// a string representation of the value. If it was a json value, it will be escaped.
	Value string `json:"value"`
}

// NodeInheritedPropertiesPropertiesProviderEnum - Property provider (if the property is not a simple node property)
type NodeInheritedPropertiesPropertiesProviderEnum string

const (
	NodeInheritedPropertiesPropertiesProviderEnumInherited                 NodeInheritedPropertiesPropertiesProviderEnum = "inherited"
	NodeInheritedPropertiesPropertiesProviderEnumOverridden                NodeInheritedPropertiesPropertiesProviderEnum = "overridden"
	NodeInheritedPropertiesPropertiesProviderEnumPluginNameLikeDatasources NodeInheritedPropertiesPropertiesProviderEnum = "plugin name like datasources"
)

func (e *NodeInheritedPropertiesPropertiesProviderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "inherited":
		fallthrough
	case "overridden":
		fallthrough
	case "plugin name like datasources":
		*e = NodeInheritedPropertiesPropertiesProviderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NodeInheritedPropertiesPropertiesProviderEnum: %s", s)
	}
}

type NodeInheritedPropertiesProperties struct {
	// A description of the inheritance hierarchy for that property, with most direct parent at head and oldest one at tail
	Hierarchy []NodeInheritedPropertiesPropertiesHierarchy `json:"hierarchy,omitempty"`
	// Property name
	Name string `json:"name"`
	// The original value (ie, before overriding and inheritance resolution) for that node
	Origval interface{} `json:"origval,omitempty"`
	// Property provider (if the property is not a simple node property)
	Provider *NodeInheritedPropertiesPropertiesProviderEnum `json:"provider,omitempty"`
	// Resolved (ie, with inheritance and overriding done) property value (can be a string or JSON object)
	Value interface{} `json:"value"`
}

type NodeInheritedProperties struct {
	// Unique id of the node
	ID string `json:"id"`
	// Node properties (either set by user or filled by third party sources)
	Properties []NodeInheritedPropertiesProperties `json:"properties"`
}
