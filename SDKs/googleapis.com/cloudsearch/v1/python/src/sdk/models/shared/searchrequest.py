"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import contextattribute as shared_contextattribute
from ..shared import datasourcerestriction as shared_datasourcerestriction
from ..shared import facetoptions as shared_facetoptions
from ..shared import queryinterpretationoptions as shared_queryinterpretationoptions
from ..shared import requestoptions as shared_requestoptions
from ..shared import sortoptions as shared_sortoptions
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchRequest:
    r"""The search API request."""
    
    context_attributes: Optional[list[shared_contextattribute.ContextAttribute]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contextAttributes'), 'exclude': lambda f: f is None }})
    r"""Context attributes for the request which will be used to adjust ranking of search results. The maximum number of elements is 10."""  
    data_source_restrictions: Optional[list[shared_datasourcerestriction.DataSourceRestriction]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataSourceRestrictions'), 'exclude': lambda f: f is None }})
    r"""The sources to use for querying. If not specified, all data sources from the current search application are used."""  
    facet_options: Optional[list[shared_facetoptions.FacetOptions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('facetOptions'), 'exclude': lambda f: f is None }})  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pageSize'), 'exclude': lambda f: f is None }})
    r"""Maximum number of search results to return in one page. Valid values are between 1 and 100, inclusive. Default value is 10. Minimum value is 50 when results beyond 2000 are requested."""  
    query: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query'), 'exclude': lambda f: f is None }})
    r"""The raw query string. See supported search operators in the [Narrow your search with operators](https://support.google.com/cloudsearch/answer/6172299)"""  
    query_interpretation_options: Optional[shared_queryinterpretationoptions.QueryInterpretationOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queryInterpretationOptions'), 'exclude': lambda f: f is None }})
    r"""Options to interpret user query."""  
    request_options: Optional[shared_requestoptions.RequestOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestOptions'), 'exclude': lambda f: f is None }})
    r"""Shared request options for all RPC methods."""  
    sort_options: Optional[shared_sortoptions.SortOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sortOptions'), 'exclude': lambda f: f is None }})  
    start: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'exclude': lambda f: f is None }})
    r"""Starting index of the results."""  
    