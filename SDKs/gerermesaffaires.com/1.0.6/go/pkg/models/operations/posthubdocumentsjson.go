// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostHubDocumentsJSONSecurity struct {
	GmaAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type PostHubDocumentsApplicationJSONAccountingWorkbookEnum string

const (
	PostHubDocumentsApplicationJSONAccountingWorkbookEnumCustomer    PostHubDocumentsApplicationJSONAccountingWorkbookEnum = "customer"
	PostHubDocumentsApplicationJSONAccountingWorkbookEnumProvider    PostHubDocumentsApplicationJSONAccountingWorkbookEnum = "provider"
	PostHubDocumentsApplicationJSONAccountingWorkbookEnumBank        PostHubDocumentsApplicationJSONAccountingWorkbookEnum = "bank"
	PostHubDocumentsApplicationJSONAccountingWorkbookEnumCashWoucher PostHubDocumentsApplicationJSONAccountingWorkbookEnum = "cashWoucher"
	PostHubDocumentsApplicationJSONAccountingWorkbookEnumFiscal      PostHubDocumentsApplicationJSONAccountingWorkbookEnum = "fiscal"
	PostHubDocumentsApplicationJSONAccountingWorkbookEnumInsurance   PostHubDocumentsApplicationJSONAccountingWorkbookEnum = "insurance"
	PostHubDocumentsApplicationJSONAccountingWorkbookEnumSocial      PostHubDocumentsApplicationJSONAccountingWorkbookEnum = "social"
	PostHubDocumentsApplicationJSONAccountingWorkbookEnumOther       PostHubDocumentsApplicationJSONAccountingWorkbookEnum = "other"
	PostHubDocumentsApplicationJSONAccountingWorkbookEnumPermanent   PostHubDocumentsApplicationJSONAccountingWorkbookEnum = "permanent"
)

func (e *PostHubDocumentsApplicationJSONAccountingWorkbookEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "customer":
		fallthrough
	case "provider":
		fallthrough
	case "bank":
		fallthrough
	case "cashWoucher":
		fallthrough
	case "fiscal":
		fallthrough
	case "insurance":
		fallthrough
	case "social":
		fallthrough
	case "other":
		fallthrough
	case "permanent":
		*e = PostHubDocumentsApplicationJSONAccountingWorkbookEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostHubDocumentsApplicationJSONAccountingWorkbookEnum: %s", s)
	}
}

type PostHubDocumentsApplicationJSONAccounting struct {
	AccountedOn *string                                                `json:"AccountedOn,omitempty"`
	Workbook    *PostHubDocumentsApplicationJSONAccountingWorkbookEnum `json:"Workbook,omitempty"`
	YearMonth   *string                                                `json:"YearMonth,omitempty"`
}

type PostHubDocumentsApplicationJSONFile struct {
	Content64Encoded *string `json:"Content64Encoded,omitempty"`
	Name             *string `json:"Name,omitempty"`
}

// PostHubDocumentsApplicationJSON - Document to add
type PostHubDocumentsApplicationJSON struct {
	Accounting         *PostHubDocumentsApplicationJSONAccounting `json:"Accounting,omitempty"`
	AddContractAllowed *bool                                      `json:"AddContractAllowed,omitempty"`
	Author             *string                                    `json:"Author,omitempty"`
	Comment            *string                                    `json:"Comment,omitempty"`
	Date               *string                                    `json:"Date,omitempty"`
	File               PostHubDocumentsApplicationJSONFile        `json:"File"`
	Title              string                                     `json:"Title"`
}

// PostHubDocumentsJSON201ApplicationJSON - Id of documents created
type PostHubDocumentsJSON201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostHubDocumentsJSONResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of documents created
	PostHubDocumentsJSON201ApplicationJSONObject *PostHubDocumentsJSON201ApplicationJSON
}
