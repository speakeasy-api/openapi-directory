// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PatchSpacesSpaceIDFoldersIDMessagesMessageIDPathParams struct {
	// Id of the folder
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the message
	MessageID string `pathParam:"style=simple,explode=false,name=messageId"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

type PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBodyLevelEnum string

const (
	PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBodyLevelEnumConfidential PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBodyLevelEnum = "confidential"
	PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBodyLevelEnumRegular      PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBodyLevelEnum = "regular"
)

func (e *PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBodyLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "confidential":
		fallthrough
	case "regular":
		*e = PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBodyLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBodyLevelEnum: %s", s)
	}
}

type PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBodyNotifyHowEnum string

const (
	PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBodyNotifyHowEnumStd  PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBodyNotifyHowEnum = "std"
	PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBodyNotifyHowEnumMail PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBodyNotifyHowEnum = "mail"
	PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBodyNotifyHowEnumSms  PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBodyNotifyHowEnum = "sms"
)

func (e *PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBodyNotifyHowEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "std":
		fallthrough
	case "mail":
		fallthrough
	case "sms":
		*e = PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBodyNotifyHowEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBodyNotifyHowEnum: %s", s)
	}
}

type PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBodyNotify struct {
	How       *PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBodyNotifyHowEnum `json:"How,omitempty"`
	MemberIds []string                                                              `json:"MemberIds,omitempty"`
}

// PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBody - Message to modify (except Author and ModificationAuthor)
type PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBody struct {
	Level       *PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBodyLevelEnum `json:"Level,omitempty"`
	MessageDate *string                                                           `json:"MessageDate,omitempty"`
	Notify      *PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBodyNotify    `json:"Notify,omitempty"`
	Text        *string                                                           `json:"Text,omitempty"`
}

type PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequest struct {
	PathParams PatchSpacesSpaceIDFoldersIDMessagesMessageIDPathParams
	// Message to modify (except Author and ModificationAuthor)
	Request PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBody `request:"mediaType=application/json"`
}

type PatchSpacesSpaceIDFoldersIDMessagesMessageIDResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
