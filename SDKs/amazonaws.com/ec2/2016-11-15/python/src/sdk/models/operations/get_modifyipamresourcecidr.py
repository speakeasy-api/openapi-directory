"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETModifyIpamResourceCidrActionEnum(str, Enum):
    MODIFY_IPAM_RESOURCE_CIDR = 'ModifyIpamResourceCidr'

class GETModifyIpamResourceCidrVersionEnum(str, Enum):
    TWO_THOUSAND_AND_SIXTEEN_11_15 = '2016-11-15'


@dataclasses.dataclass
class GETModifyIpamResourceCidrRequest:
    
    action: GETModifyIpamResourceCidrActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    current_ipam_scope_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'CurrentIpamScopeId', 'style': 'form', 'explode': True }})
    r"""The ID of the current scope that the resource CIDR is in."""  
    monitored: bool = dataclasses.field(metadata={'query_param': { 'field_name': 'Monitored', 'style': 'form', 'explode': True }})
    r"""Determines if the resource is monitored by IPAM. If a resource is monitored, the resource is discovered by IPAM and you can view details about the resourceâ€™s CIDR."""  
    resource_cidr: str = dataclasses.field(metadata={'query_param': { 'field_name': 'ResourceCidr', 'style': 'form', 'explode': True }})
    r"""The CIDR of the resource you want to modify."""  
    resource_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'ResourceId', 'style': 'form', 'explode': True }})
    r"""The ID of the resource you want to modify."""  
    resource_region: str = dataclasses.field(metadata={'query_param': { 'field_name': 'ResourceRegion', 'style': 'form', 'explode': True }})
    r"""The Amazon Web Services Region of the resource you want to modify."""  
    version: GETModifyIpamResourceCidrVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    destination_ipam_scope_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DestinationIpamScopeId', 'style': 'form', 'explode': True }})
    r"""The ID of the scope you want to transfer the resource CIDR to."""  
    dry_run: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DryRun', 'style': 'form', 'explode': True }})
    r"""A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETModifyIpamResourceCidrResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    