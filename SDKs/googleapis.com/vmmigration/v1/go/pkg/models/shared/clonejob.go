// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CloneJobStateEnum - Output only. State of the clone job.
type CloneJobStateEnum string

const (
	CloneJobStateEnumStateUnspecified CloneJobStateEnum = "STATE_UNSPECIFIED"
	CloneJobStateEnumPending          CloneJobStateEnum = "PENDING"
	CloneJobStateEnumActive           CloneJobStateEnum = "ACTIVE"
	CloneJobStateEnumFailed           CloneJobStateEnum = "FAILED"
	CloneJobStateEnumSucceeded        CloneJobStateEnum = "SUCCEEDED"
	CloneJobStateEnumCancelled        CloneJobStateEnum = "CANCELLED"
	CloneJobStateEnumCancelling       CloneJobStateEnum = "CANCELLING"
	CloneJobStateEnumAdaptingOs       CloneJobStateEnum = "ADAPTING_OS"
)

func (e *CloneJobStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "PENDING":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "FAILED":
		fallthrough
	case "SUCCEEDED":
		fallthrough
	case "CANCELLED":
		fallthrough
	case "CANCELLING":
		fallthrough
	case "ADAPTING_OS":
		*e = CloneJobStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CloneJobStateEnum: %s", s)
	}
}

// CloneJob - CloneJob describes the process of creating a clone of a MigratingVM to the requested target based on the latest successful uploaded snapshots. While the migration cycles of a MigratingVm take place, it is possible to verify the uploaded VM can be started in the cloud, by creating a clone. The clone can be created without any downtime, and it is created using the latest snapshots which are already in the cloud. The cloneJob is only responsible for its work, not its products, which means once it is finished, it will never touch the instance it created. It will only delete it in case of the CloneJob being cancelled or upon failure to clone.
type CloneJob struct {
	// ComputeEngineTargetDetails is a collection of details for creating a VM in a target Compute Engine project.
	ComputeEngineTargetDetails *ComputeEngineTargetDetails `json:"computeEngineTargetDetails,omitempty"`
	// Output only. The time the clone job was created (as an API call, not when it was actually created in the target).
	CreateTime *string `json:"createTime,omitempty"`
	// Output only. The time the clone job was ended.
	EndTime *string `json:"endTime,omitempty"`
	// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	Error *Status `json:"error,omitempty"`
	// Output only. The name of the clone.
	Name *string `json:"name,omitempty"`
	// Output only. State of the clone job.
	State *CloneJobStateEnum `json:"state,omitempty"`
	// Output only. The time the state was last updated.
	StateTime *string `json:"stateTime,omitempty"`
	// Output only. The clone steps list representing its progress.
	Steps []CloneStep `json:"steps,omitempty"`
}

// CloneJobInput - CloneJob describes the process of creating a clone of a MigratingVM to the requested target based on the latest successful uploaded snapshots. While the migration cycles of a MigratingVm take place, it is possible to verify the uploaded VM can be started in the cloud, by creating a clone. The clone can be created without any downtime, and it is created using the latest snapshots which are already in the cloud. The cloneJob is only responsible for its work, not its products, which means once it is finished, it will never touch the instance it created. It will only delete it in case of the CloneJob being cancelled or upon failure to clone.
type CloneJobInput struct {
	// ComputeEngineTargetDetails is a collection of details for creating a VM in a target Compute Engine project.
	ComputeEngineTargetDetails *ComputeEngineTargetDetails `json:"computeEngineTargetDetails,omitempty"`
	// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	Error *Status `json:"error,omitempty"`
}
