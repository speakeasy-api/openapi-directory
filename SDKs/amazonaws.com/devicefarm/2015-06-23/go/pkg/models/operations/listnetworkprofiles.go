// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListNetworkProfilesXAmzTargetEnum
type ListNetworkProfilesXAmzTargetEnum string

const (
	ListNetworkProfilesXAmzTargetEnumDeviceFarm20150623ListNetworkProfiles ListNetworkProfilesXAmzTargetEnum = "DeviceFarm_20150623.ListNetworkProfiles"
)

func (e ListNetworkProfilesXAmzTargetEnum) ToPointer() *ListNetworkProfilesXAmzTargetEnum {
	return &e
}

func (e *ListNetworkProfilesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DeviceFarm_20150623.ListNetworkProfiles":
		*e = ListNetworkProfilesXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListNetworkProfilesXAmzTargetEnum: %v", v)
	}
}

type ListNetworkProfilesRequest struct {
	ListNetworkProfilesRequest shared.ListNetworkProfilesRequest `request:"mediaType=application/json"`
	XAmzAlgorithm              *string                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256          *string                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential             *string                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                   *string                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken          *string                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature              *string                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders          *string                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                 ListNetworkProfilesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListNetworkProfilesResponse struct {
	// ArgumentException
	ArgumentException interface{}
	ContentType       string
	// LimitExceededException
	LimitExceededException interface{}
	// Success
	ListNetworkProfilesResult *shared.ListNetworkProfilesResult
	// NotFoundException
	NotFoundException interface{}
	// ServiceAccountException
	ServiceAccountException interface{}
	StatusCode              int
	RawResponse             *http.Response
}
