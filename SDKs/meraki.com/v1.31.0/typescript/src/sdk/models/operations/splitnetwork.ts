/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class SplitNetworkRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;
}

export class SplitNetwork200ApplicationJSONResultingNetworks extends SpeakeasyBase {
  /**
   * Enrollment string for the network
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enrollmentString" })
  enrollmentString?: string;

  /**
   * Network ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * If the network is bound to a config template
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isBoundToConfigTemplate" })
  isBoundToConfigTemplate?: boolean;

  /**
   * Network name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Notes for the network
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notes" })
  notes?: string;

  /**
   * Organization ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "organizationId" })
  organizationId?: string;

  /**
   * List of the product types that the network supports
   */
  @SpeakeasyMetadata()
  @Expose({ name: "productTypes" })
  productTypes?: string[];

  /**
   * Network tags
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: string[];

  /**
   * Timezone of the network
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timeZone" })
  timeZone?: string;

  /**
   * URL to the network Dashboard UI
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

/**
 * Successful operation
 */
export class SplitNetwork200ApplicationJSON extends SpeakeasyBase {
  /**
   * Networks after the split
   */
  @SpeakeasyMetadata({
    elemType: SplitNetwork200ApplicationJSONResultingNetworks,
  })
  @Expose({ name: "resultingNetworks" })
  @Type(() => SplitNetwork200ApplicationJSONResultingNetworks)
  resultingNetworks?: SplitNetwork200ApplicationJSONResultingNetworks[];
}

export class SplitNetworkResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  splitNetwork200ApplicationJSONObject?: SplitNetwork200ApplicationJSON;
}
