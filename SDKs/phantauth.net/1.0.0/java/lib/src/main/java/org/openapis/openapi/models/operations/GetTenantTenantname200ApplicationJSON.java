/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GetTenantTenantname200ApplicationJSON - OK
 */
public class GetTenantTenantname200ApplicationJSON {
    /**
     * The URL of the tenant's JSON representation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("@id")
    public String atId;
    public GetTenantTenantname200ApplicationJSON withAtId(String atId) {
        this.atId = atId;
        return this;
    }
    
    /**
     * A detailed description of the tenant. If it takes the value of an URL, the description is downloaded from the given URL, otherwise the value it takes is the description itself. Markdown formatting can be used in the description.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("about")
    public String about;
    public GetTenantTenantname200ApplicationJSON withAbout(String about) {
        this.about = about;
        return this;
    }
    
    /**
     * The attribution of the external data source or random user generator. Its value can have markdown formatting, that is, the external source can contain highlights and links.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attribution")
    public String attribution;
    public GetTenantTenantname200ApplicationJSON withAttribution(String attribution) {
        this.attribution = attribution;
        return this;
    }
    
    /**
     * It defines the place of the CSV file containing the resource data in [RFC 6570 - URI temaplate](https://tools.ietf.org/html/rfc6570) format.
     * The URI template receives the type of the object to be generated (user, team) in the `kind` parameter.
     * 
     * The first line of the CSV file contains the resource property names, the following lines, on the other hand, contain the relevant data.
     * In the case of nested properties, a '.' character separates the elements of the property name (e.g. address.formatted).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("depot")
    public String depot;
    public GetTenantTenantname200ApplicationJSON withDepot(String depot) {
        this.depot = depot;
        return this;
    }
    
    /**
     * A list of resource types supported by the external CSV set in `depot`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("depots")
    public Object[] depots;
    public GetTenantTenantname200ApplicationJSON withDepots(Object[] depots) {
        this.depots = depots;
        return this;
    }
    
    /**
     * True in the case of a domain tenant collecting several tenants, otherwise false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domain")
    public Boolean domain;
    public GetTenantTenantname200ApplicationJSON withDomain(Boolean domain) {
        this.domain = domain;
        return this;
    }
    
    /**
     * A list of resource types supported by the external generator set in `factory`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("factories")
    public Object[] factories;
    public GetTenantTenantname200ApplicationJSON withFactories(Object[] factories) {
        this.factories = factories;
        return this;
    }
    
    /**
     * The address of the custom random resource generator (user, team) in [RFC 6570 - URI temaplate](https://tools.ietf.org/html/rfc6570) format.
     * The URI template receives the type of the object to be generated (user, team) in the `kind` parameter, and the identifier of the object to be generated in the `name` parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("factory")
    public String factory;
    public GetTenantTenantname200ApplicationJSON withFactory(String factory) {
        this.factory = factory;
        return this;
    }
    
    /**
     * The URL of the tenant favicon. The image from this address appears as a shortcut icon in the browser when a user visits the tenant's webpages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("favicon")
    public String favicon;
    public GetTenantTenantname200ApplicationJSON withFavicon(String favicon) {
        this.favicon = favicon;
        return this;
    }
    
    /**
     * The URL of the tenant OpenID Connect issuer. This value allows you to get, for example, the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
     * As a webpage, it contains information on the use if the given tenant.
     */
    @JsonProperty("issuer")
    public String issuer;
    public GetTenantTenantname200ApplicationJSON withIssuer(String issuer) {
        this.issuer = issuer;
        return this;
    }
    
    /**
     * The URL of the tenant logo. The image from this address appears in the address bar of the tenant's webpages and the pages that contain the list of available tenants.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logo")
    public String logo;
    public GetTenantTenantname200ApplicationJSON withLogo(String logo) {
        this.logo = logo;
        return this;
    }
    
    /**
     * The displayed tenant name. In lack of such name, the DNS name of the tenant is displayed in the address bar of the tenant's webpages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public GetTenantTenantname200ApplicationJSON withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The URL of a custom JavaScript file can be automatically inserted in the login.html, consent.html, \u00e9s test.html pages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("script")
    public String script;
    public GetTenantTenantname200ApplicationJSON withScript(String script) {
        this.script = script;
        return this;
    }
    
    /**
     * It is used to give the identifyer of a public Google Sheet document. The first line of the table contains the user property names, the following lines, on the other hand, contain the relevant data.
     * In the case of nested properties, a '.' character separates the elements of the property name (e.g. address.formatted).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sheet")
    public String sheet;
    public GetTenantTenantname200ApplicationJSON withSheet(String sheet) {
        this.sheet = sheet;
        return this;
    }
    
    /**
     * The fully qualified DNS domain name of the tenant. In the case of official and shared tenants (phantauth.net and phantauth.cf DNS domain), the DNS domain can be omitted (e.g. *default* or *faker*).
     */
    @JsonProperty("sub")
    public String sub;
    public GetTenantTenantname200ApplicationJSON withSub(String sub) {
        this.sub = sub;
        return this;
    }
    
    /**
     * True in the case of a tenant referred to in a domain tenant, otherwise false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subtenant")
    public Boolean subtenant;
    public GetTenantTenantname200ApplicationJSON withSubtenant(Boolean subtenant) {
        this.subtenant = subtenant;
        return this;
    }
    
    /**
     * A one-line description, the watchword of the tenant. It appears on the tenant's startup page and the pages that contain the list of available tenants. It takes the valua of an unformatted text.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("summary")
    public String summary;
    public GetTenantTenantname200ApplicationJSON withSummary(String summary) {
        this.summary = summary;
        return this;
    }
    
    /**
     * It defines the place of the templates of the HTML pages of the tenant in [RFC 6570 - URI temaplate](https://tools.ietf.org/html/rfc6570) format.
     * The URI template receives the page name in a `resource` parameter. By default, it takes the following value: `https://default.phantauth.net{/resource}`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template")
    public String template;
    public GetTenantTenantname200ApplicationJSON withTemplate(String template) {
        this.template = template;
        return this;
    }
    
    /**
     * The URL of the CSS style sheet used for the tenant's webpages.
     * The default webpage templates were created by the use of the Bootstrap library, therefore, the Bootstrap CSS URL has to be provided when such a webpage is used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("theme")
    public String theme;
    public GetTenantTenantname200ApplicationJSON withTheme(String theme) {
        this.theme = theme;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userinfo")
    public String userinfo;
    public GetTenantTenantname200ApplicationJSON withUserinfo(String userinfo) {
        this.userinfo = userinfo;
        return this;
    }
    
    /**
     * The website address associated with the tenant. If a tenant doesn't have a website, its value is identical with that of the `issuer` property.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("website")
    public String website;
    public GetTenantTenantname200ApplicationJSON withWebsite(String website) {
        this.website = website;
        return this;
    }
    
}
