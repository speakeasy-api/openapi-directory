// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type BranchConfigurationsGetSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type BranchConfigurationsGetRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The branch name
	Branch string `pathParam:"style=simple,explode=false,name=branch"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

// BranchConfigurationsGetDefaultApplicationJSON - Bad Request
type BranchConfigurationsGetDefaultApplicationJSON struct {
	Code    string `json:"code"`
	ID      string `json:"id"`
	Message string `json:"message"`
}

type BranchConfigurationsGet200ApplicationJSONArtifactVersioningBuildNumberFormatEnum string

const (
	BranchConfigurationsGet200ApplicationJSONArtifactVersioningBuildNumberFormatEnumBuildID   BranchConfigurationsGet200ApplicationJSONArtifactVersioningBuildNumberFormatEnum = "buildId"
	BranchConfigurationsGet200ApplicationJSONArtifactVersioningBuildNumberFormatEnumTimestamp BranchConfigurationsGet200ApplicationJSONArtifactVersioningBuildNumberFormatEnum = "timestamp"
)

func (e BranchConfigurationsGet200ApplicationJSONArtifactVersioningBuildNumberFormatEnum) ToPointer() *BranchConfigurationsGet200ApplicationJSONArtifactVersioningBuildNumberFormatEnum {
	return &e
}

func (e *BranchConfigurationsGet200ApplicationJSONArtifactVersioningBuildNumberFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "buildId":
		fallthrough
	case "timestamp":
		*e = BranchConfigurationsGet200ApplicationJSONArtifactVersioningBuildNumberFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BranchConfigurationsGet200ApplicationJSONArtifactVersioningBuildNumberFormatEnum: %v", v)
	}
}

// BranchConfigurationsGet200ApplicationJSONArtifactVersioning - The versioning configuration for artifacts built for this branch
type BranchConfigurationsGet200ApplicationJSONArtifactVersioning struct {
	BuildNumberFormat *BranchConfigurationsGet200ApplicationJSONArtifactVersioningBuildNumberFormatEnum `json:"buildNumberFormat,omitempty"`
}

// BranchConfigurationsGet200ApplicationJSONToolsetsAndroid - Build configuration for Android projects
type BranchConfigurationsGet200ApplicationJSONToolsetsAndroid struct {
	// Whether to apply automatic signing or not
	AutomaticSigning *bool `json:"automaticSigning,omitempty"`
	// The Android build variant to build
	BuildVariant *string `json:"buildVariant,omitempty"`
	// Path to the Gradle wrapper script
	GradleWrapperPath *string `json:"gradleWrapperPath,omitempty"`
	// Whether it is the root module or not
	IsRoot *bool `json:"isRoot,omitempty"`
	// The key alias
	KeyAlias *string `json:"keyAlias,omitempty"`
	// The key password
	KeyPassword *string `json:"keyPassword,omitempty"`
	// The keystore encoded value
	KeystoreEncoded *string `json:"keystoreEncoded,omitempty"`
	// The name of the keystore file
	KeystoreFilename *string `json:"keystoreFilename,omitempty"`
	// The password of the keystore
	KeystorePassword *string `json:"keystorePassword,omitempty"`
	// The Gradle module to build
	Module *string `json:"module,omitempty"`
	// Whether to run lint checks during the build (default)
	RunLint *bool `json:"runLint,omitempty"`
	// Whether to run unit tests during the build (default)
	RunTests *bool `json:"runTests,omitempty"`
}

// BranchConfigurationsGet200ApplicationJSONToolsetsJavascript - Build configuration when React Native, or other JavaScript tech, is part of the build steps
type BranchConfigurationsGet200ApplicationJSONToolsetsJavascript struct {
	// Path to package.json file for the main project, e.g. "package.json" or "myapp/package.json"
	PackageJSONPath *string `json:"packageJsonPath,omitempty"`
	// Version of React Native from package.json files
	ReactNativeVersion *string `json:"reactNativeVersion,omitempty"`
	// Whether to run Jest unit tests, via npm test, during the build
	RunTests *bool `json:"runTests,omitempty"`
}

// BranchConfigurationsGet200ApplicationJSONToolsetsXamarin - Build configuration for Xamarin projects
type BranchConfigurationsGet200ApplicationJSONToolsetsXamarin struct {
	Args          *string `json:"args,omitempty"`
	Configuration *string `json:"configuration,omitempty"`
	IsSimBuild    *bool   `json:"isSimBuild,omitempty"`
	MonoVersion   *string `json:"monoVersion,omitempty"`
	P12File       *string `json:"p12File,omitempty"`
	P12Pwd        *string `json:"p12Pwd,omitempty"`
	ProvProfile   *string `json:"provProfile,omitempty"`
	SDKBundle     *string `json:"sdkBundle,omitempty"`
	SlnPath       *string `json:"slnPath,omitempty"`
	// Symlink of the SDK Bundle and Mono installation.
	// The build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building.
	//
	Symlink *string `json:"symlink,omitempty"`
}

// BranchConfigurationsGet200ApplicationJSONToolsetsXcodeAppExtensionProvisioningProfileFiles - Provisioning profile fetch and store information
type BranchConfigurationsGet200ApplicationJSONToolsetsXcodeAppExtensionProvisioningProfileFiles struct {
	// File id from secure file storage
	FileID *string `json:"fileId,omitempty"`
	// Name of uploaded provisioning profile
	FileName *string `json:"fileName,omitempty"`
	// Target the provisioning profile is used to sign
	TargetBundleIdentifier *string `json:"targetBundleIdentifier,omitempty"`
	// Upload id to App Center File Upload Store
	UploadID *string `json:"uploadId,omitempty"`
}

// BranchConfigurationsGet200ApplicationJSONToolsetsXcode - Build configuration when Xcode is part of the build steps
type BranchConfigurationsGet200ApplicationJSONToolsetsXcode struct {
	AppExtensionProvisioningProfileFiles []BranchConfigurationsGet200ApplicationJSONToolsetsXcodeAppExtensionProvisioningProfileFiles `json:"appExtensionProvisioningProfileFiles,omitempty"`
	// The build configuration of the target to archive
	ArchiveConfiguration *string `json:"archiveConfiguration,omitempty"`
	AutomaticSigning     *bool   `json:"automaticSigning,omitempty"`
	// Path to Carthage file, if present
	CartfilePath        *string `json:"cartfilePath,omitempty"`
	CertificateEncoded  *string `json:"certificateEncoded,omitempty"`
	CertificateFileID   *string `json:"certificateFileId,omitempty"`
	CertificateFilename *string `json:"certificateFilename,omitempty"`
	CertificatePassword *string `json:"certificatePassword,omitempty"`
	CertificateUploadID *string `json:"certificateUploadId,omitempty"`
	// Setting this to true forces the build to use Xcode legacy build system. Otherwise, the setting from workspace settings is used.
	// By default new build system is used if workspace setting is not committed to the repository. Only used for iOS React Native app, with Xcode 10.
	//
	ForceLegacyBuildSystem *bool `json:"forceLegacyBuildSystem,omitempty"`
	// Path to CococaPods file, if present
	PodfilePath *string `json:"podfilePath,omitempty"`
	// Xcode project/workspace path
	ProjectOrWorkspacePath      *string `json:"projectOrWorkspacePath,omitempty"`
	ProvisioningProfileEncoded  *string `json:"provisioningProfileEncoded,omitempty"`
	ProvisioningProfileFileID   *string `json:"provisioningProfileFileId,omitempty"`
	ProvisioningProfileFilename *string `json:"provisioningProfileFilename,omitempty"`
	ProvisioningProfileUploadID *string `json:"provisioningProfileUploadId,omitempty"`
	Scheme                      *string `json:"scheme,omitempty"`
	// The target id of the selected scheme to archive
	TargetToArchive *string `json:"targetToArchive,omitempty"`
	TeamID          *string `json:"teamId,omitempty"`
	// The selected pbxproject hash to the repositroy
	XcodeProjectSha *string `json:"xcodeProjectSha,omitempty"`
	// Xcode version used to build. Available versions can be found in "/xcode_versions" API. Default is latest stable version, at the time when the configuration is set.
	XcodeVersion *string `json:"xcodeVersion,omitempty"`
}

// BranchConfigurationsGet200ApplicationJSONToolsets - The branch build configuration for each toolset
type BranchConfigurationsGet200ApplicationJSONToolsets struct {
	// Build configuration for Android projects
	Android *BranchConfigurationsGet200ApplicationJSONToolsetsAndroid `json:"android,omitempty"`
	// Build configuration when React Native, or other JavaScript tech, is part of the build steps
	Javascript *BranchConfigurationsGet200ApplicationJSONToolsetsJavascript `json:"javascript,omitempty"`
	// Build configuration for Xamarin projects
	Xamarin *BranchConfigurationsGet200ApplicationJSONToolsetsXamarin `json:"xamarin,omitempty"`
	// Build configuration when Xcode is part of the build steps
	Xcode *BranchConfigurationsGet200ApplicationJSONToolsetsXcode `json:"xcode,omitempty"`
}

type BranchConfigurationsGet200ApplicationJSONTriggerEnum string

const (
	BranchConfigurationsGet200ApplicationJSONTriggerEnumContinous  BranchConfigurationsGet200ApplicationJSONTriggerEnum = "continous"
	BranchConfigurationsGet200ApplicationJSONTriggerEnumContinuous BranchConfigurationsGet200ApplicationJSONTriggerEnum = "continuous"
	BranchConfigurationsGet200ApplicationJSONTriggerEnumManual     BranchConfigurationsGet200ApplicationJSONTriggerEnum = "manual"
)

func (e BranchConfigurationsGet200ApplicationJSONTriggerEnum) ToPointer() *BranchConfigurationsGet200ApplicationJSONTriggerEnum {
	return &e
}

func (e *BranchConfigurationsGet200ApplicationJSONTriggerEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "continous":
		fallthrough
	case "continuous":
		fallthrough
	case "manual":
		*e = BranchConfigurationsGet200ApplicationJSONTriggerEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BranchConfigurationsGet200ApplicationJSONTriggerEnum: %v", v)
	}
}

// BranchConfigurationsGet200ApplicationJSON - The branch build configuration
type BranchConfigurationsGet200ApplicationJSON struct {
	// The versioning configuration for artifacts built for this branch
	ArtifactVersioning *BranchConfigurationsGet200ApplicationJSONArtifactVersioning `json:"artifactVersioning,omitempty"`
	BadgeIsEnabled     *bool                                                        `json:"badgeIsEnabled,omitempty"`
	// A configured branch name to clone from. If provided, all other parameters will be ignored. Only supported in POST requests.
	CloneFromBranch *string `json:"cloneFromBranch,omitempty"`
	ID              int64   `json:"id"`
	Signed          *bool   `json:"signed,omitempty"`
	TestsEnabled    *bool   `json:"testsEnabled,omitempty"`
	// The branch build configuration for each toolset
	Toolsets *BranchConfigurationsGet200ApplicationJSONToolsets    `json:"toolsets,omitempty"`
	Trigger  *BranchConfigurationsGet200ApplicationJSONTriggerEnum `json:"trigger,omitempty"`
}

type BranchConfigurationsGetResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	BranchConfigurationsGet200ApplicationJSONObject *BranchConfigurationsGet200ApplicationJSON
	// Bad Request
	BranchConfigurationsGetDefaultApplicationJSONObject *BranchConfigurationsGetDefaultApplicationJSON
}
