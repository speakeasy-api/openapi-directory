// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// CreateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'. Defaults to dual.
type CreateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnumFiveghz CreateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnumDual    CreateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfileRequestBodyApBandSettings - Settings that will be enabled if selectionType is set to 'ap'.
type CreateNetworkWirelessRfProfileRequestBodyApBandSettings struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'. Defaults to dual.
	BandOperationMode *CreateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band. Can be either true or false. Defaults to true.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
}

// CreateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum - Band selection can be set to either 'ssid' or 'ap'. This param is required on creation.
type CreateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum string

const (
	CreateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnumAp   CreateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum = "ap"
	CreateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnumSsid CreateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum = "ssid"
)

func (e *CreateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ap":
		fallthrough
	case "ssid":
		*e = CreateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfileRequestBodyFiveGhzSettings - Settings related to 5Ghz band
type CreateNetworkWirelessRfProfileRequestBodyFiveGhzSettings struct {
	// Sets channel width (MHz) for 5Ghz band. Can be one of 'auto', '20', '40' or '80'. Defaults to auto.
	ChannelWidth *string `json:"channelWidth,omitempty"`
	// Sets max power (dBm) of 5Ghz band. Can be integer between 2 and 30. Defaults to 30.
	MaxPower *int64 `json:"maxPower,omitempty"`
	// Sets min bitrate (Mbps) of 5Ghz band. Can be one of '6', '9', '12', '18', '24', '36', '48' or '54'. Defaults to 12.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Sets min power (dBm) of 5Ghz band. Can be integer between 2 and 30. Defaults to 8.
	MinPower *int64 `json:"minPower,omitempty"`
	// The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default.
	Rxsop *int64 `json:"rxsop,omitempty"`
	// Sets valid auto channels for 5Ghz band. Can be one of '36', '40', '44', '48', '52', '56', '60', '64', '100', '104', '108', '112', '116', '120', '124', '128', '132', '136', '140', '144', '149', '153', '157', '161' or '165'.Defaults to [36, 40, 44, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 149, 153, 157, 161, 165].
	ValidAutoChannels []int64 `json:"validAutoChannels,omitempty"`
}

// CreateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum - Minimum bitrate can be set to either 'band' or 'ssid'. Defaults to band.
type CreateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum string

const (
	CreateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnumBand CreateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum = "band"
	CreateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnumSsid CreateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum = "ssid"
)

func (e *CreateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "band":
		fallthrough
	case "ssid":
		*e = CreateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings0BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings0BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings0BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings0BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings0BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings0BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings0BandOperationModeEnumDual    CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings0BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings0BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings0BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings0BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings0 - Settings for SSID 0
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings0 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings0BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings1BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings1BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings1BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings1BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings1BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings1BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings1BandOperationModeEnumDual    CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings1BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings1BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings1BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings1BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings1 - Settings for SSID 1
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings1 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings1BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings10BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings10BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings10BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings10BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings10BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings10BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings10BandOperationModeEnumDual    CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings10BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings10BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings10BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings10BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings10 - Settings for SSID 10
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings10 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings10BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings11BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings11BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings11BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings11BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings11BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings11BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings11BandOperationModeEnumDual    CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings11BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings11BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings11BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings11BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings11 - Settings for SSID 11
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings11 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings11BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings12BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings12BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings12BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings12BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings12BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings12BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings12BandOperationModeEnumDual    CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings12BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings12BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings12BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings12BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings12 - Settings for SSID 12
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings12 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings12BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings13BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings13BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings13BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings13BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings13BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings13BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings13BandOperationModeEnumDual    CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings13BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings13BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings13BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings13BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings13 - Settings for SSID 13
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings13 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings13BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings14BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings14BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings14BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings14BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings14BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings14BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings14BandOperationModeEnumDual    CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings14BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings14BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings14BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings14BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings14 - Settings for SSID 14
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings14 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings14BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings2BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings2BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings2BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings2BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings2BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings2BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings2BandOperationModeEnumDual    CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings2BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings2BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings2BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings2BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings2 - Settings for SSID 2
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings2 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings2BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings3BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings3BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings3BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings3BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings3BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings3BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings3BandOperationModeEnumDual    CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings3BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings3BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings3BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings3BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings3 - Settings for SSID 3
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings3 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings3BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings4BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings4BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings4BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings4BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings4BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings4BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings4BandOperationModeEnumDual    CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings4BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings4BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings4BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings4BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings4 - Settings for SSID 4
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings4 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings4BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings5BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings5BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings5BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings5BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings5BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings5BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings5BandOperationModeEnumDual    CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings5BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings5BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings5BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings5BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings5 - Settings for SSID 5
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings5 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings5BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings6BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings6BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings6BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings6BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings6BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings6BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings6BandOperationModeEnumDual    CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings6BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings6BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings6BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings6BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings6 - Settings for SSID 6
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings6 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings6BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings7BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings7BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings7BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings7BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings7BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings7BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings7BandOperationModeEnumDual    CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings7BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings7BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings7BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings7BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings7 - Settings for SSID 7
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings7 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings7BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings8BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings8BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings8BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings8BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings8BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings8BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings8BandOperationModeEnumDual    CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings8BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings8BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings8BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings8BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings8 - Settings for SSID 8
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings8 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings8BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings9BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings9BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings9BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings9BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings9BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings9BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings9BandOperationModeEnumDual    CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings9BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings9BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings9BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings9BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings9 - Settings for SSID 9
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings9 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings9BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings - Per-SSID radio settings by number.
type CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings struct {
	// Settings for SSID 0
	Zero *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings0 `json:"0,omitempty"`
	// Settings for SSID 1
	One *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings1 `json:"1,omitempty"`
	// Settings for SSID 10
	Ten *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings10 `json:"10,omitempty"`
	// Settings for SSID 11
	Eleven *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings11 `json:"11,omitempty"`
	// Settings for SSID 12
	Twelve *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings12 `json:"12,omitempty"`
	// Settings for SSID 13
	Thirteen *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings13 `json:"13,omitempty"`
	// Settings for SSID 14
	Fourteen *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings14 `json:"14,omitempty"`
	// Settings for SSID 2
	Two *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings2 `json:"2,omitempty"`
	// Settings for SSID 3
	Three *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings3 `json:"3,omitempty"`
	// Settings for SSID 4
	Four *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings4 `json:"4,omitempty"`
	// Settings for SSID 5
	Five *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings5 `json:"5,omitempty"`
	// Settings for SSID 6
	Six *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings6 `json:"6,omitempty"`
	// Settings for SSID 7
	Seven *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings7 `json:"7,omitempty"`
	// Settings for SSID 8
	Eight *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings8 `json:"8,omitempty"`
	// Settings for SSID 9
	Nine *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings9 `json:"9,omitempty"`
}

// CreateNetworkWirelessRfProfileRequestBodyTransmission - Settings related to radio transmission.
type CreateNetworkWirelessRfProfileRequestBodyTransmission struct {
	// Toggle for radio transmission. When false, radios will not transmit at all.
	Enabled *bool `json:"enabled,omitempty"`
}

// CreateNetworkWirelessRfProfileRequestBodyTwoFourGhzSettings - Settings related to 2.4Ghz band
type CreateNetworkWirelessRfProfileRequestBodyTwoFourGhzSettings struct {
	// Determines whether ax radio on 2.4Ghz band is on or off. Can be either true or false. If false, we highly recommend disabling band steering. Defaults to true.
	AxEnabled *bool `json:"axEnabled,omitempty"`
	// Sets max power (dBm) of 2.4Ghz band. Can be integer between 2 and 30. Defaults to 30.
	MaxPower *int64 `json:"maxPower,omitempty"`
	// Sets min bitrate (Mbps) of 2.4Ghz band. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'. Defaults to 11.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
	// Sets min power (dBm) of 2.4Ghz band. Can be integer between 2 and 30. Defaults to 5.
	MinPower *int64 `json:"minPower,omitempty"`
	// The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default.
	Rxsop *int64 `json:"rxsop,omitempty"`
	// Sets valid auto channels for 2.4Ghz band. Can be one of '1', '6' or '11'. Defaults to [1, 6, 11].
	ValidAutoChannels []int64 `json:"validAutoChannels,omitempty"`
}

type CreateNetworkWirelessRfProfileRequestBody struct {
	// Settings that will be enabled if selectionType is set to 'ap'.
	ApBandSettings *CreateNetworkWirelessRfProfileRequestBodyApBandSettings `json:"apBandSettings,omitempty"`
	// Band selection can be set to either 'ssid' or 'ap'. This param is required on creation.
	BandSelectionType CreateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum `json:"bandSelectionType"`
	// Steers client to best available access point. Can be either true or false. Defaults to true.
	ClientBalancingEnabled *bool `json:"clientBalancingEnabled,omitempty"`
	// Settings related to 5Ghz band
	FiveGhzSettings *CreateNetworkWirelessRfProfileRequestBodyFiveGhzSettings `json:"fiveGhzSettings,omitempty"`
	// Minimum bitrate can be set to either 'band' or 'ssid'. Defaults to band.
	MinBitrateType *CreateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum `json:"minBitrateType,omitempty"`
	// The name of the new profile. Must be unique. This param is required on creation.
	Name string `json:"name"`
	// Per-SSID radio settings by number.
	PerSsidSettings *CreateNetworkWirelessRfProfileRequestBodyPerSsidSettings `json:"perSsidSettings,omitempty"`
	// Settings related to radio transmission.
	Transmission *CreateNetworkWirelessRfProfileRequestBodyTransmission `json:"transmission,omitempty"`
	// Settings related to 2.4Ghz band
	TwoFourGhzSettings *CreateNetworkWirelessRfProfileRequestBodyTwoFourGhzSettings `json:"twoFourGhzSettings,omitempty"`
}

type CreateNetworkWirelessRfProfileRequest struct {
	RequestBody CreateNetworkWirelessRfProfileRequestBody `request:"mediaType=application/json"`
	NetworkID   string                                    `pathParam:"style=simple,explode=false,name=networkId"`
}

// CreateNetworkWirelessRfProfile201ApplicationJSONApBandSettings - Settings that will be enabled if selectionType is set to 'ap'.
type CreateNetworkWirelessRfProfile201ApplicationJSONApBandSettings struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'. Defaults to dual.
	BandOperationMode *string `json:"bandOperationMode,omitempty"`
	// Steers client to most open band. Can be either true or false. Defaults to true.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
}

// CreateNetworkWirelessRfProfile201ApplicationJSONFiveGhzSettings - Settings related to 5Ghz band
type CreateNetworkWirelessRfProfile201ApplicationJSONFiveGhzSettings struct {
	// Sets channel width (MHz) for 5Ghz band. Can be one of 'auto', '20', '40' or '80'. Defaults to auto.
	ChannelWidth *string `json:"channelWidth,omitempty"`
	// Sets max power (dBm) of 5Ghz band. Can be integer between 2 and 30. Defaults to 30.
	MaxPower *int64 `json:"maxPower,omitempty"`
	// Sets min bitrate (Mbps) of 5Ghz band. Can be one of '6', '9', '12', '18', '24', '36', '48' or '54'. Defaults to 12.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Sets min power (dBm) of 5Ghz band. Can be integer between 2 and 30. Defaults to 8.
	MinPower *int64 `json:"minPower,omitempty"`
	// The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default.
	Rxsop *int64 `json:"rxsop,omitempty"`
	// Sets valid auto channels for 5Ghz band. Can be one of '36', '40', '44', '48', '52', '56', '60', '64', '100', '104', '108', '112', '116', '120', '124', '128', '132', '136', '140', '144', '149', '153', '157', '161' or '165'.Defaults to [36, 40, 44, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 149, 153, 157, 161, 165].
	ValidAutoChannels []int64 `json:"validAutoChannels,omitempty"`
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings0BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings0BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings0BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings0BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings0BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings0BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings0BandOperationModeEnumDual    CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings0BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings0BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings0BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings0BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings0 - Settings for SSID 0
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings0 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings0BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings1BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings1BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings1BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings1BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings1BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings1BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings1BandOperationModeEnumDual    CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings1BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings1BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings1BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings1BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings1 - Settings for SSID 1
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings1 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings1BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings10BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings10BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings10BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings10BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings10BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings10BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings10BandOperationModeEnumDual    CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings10BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings10BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings10BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings10BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings10 - Settings for SSID 10
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings10 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings10BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings11BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings11BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings11BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings11BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings11BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings11BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings11BandOperationModeEnumDual    CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings11BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings11BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings11BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings11BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings11 - Settings for SSID 11
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings11 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings11BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings12BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings12BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings12BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings12BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings12BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings12BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings12BandOperationModeEnumDual    CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings12BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings12BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings12BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings12BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings12 - Settings for SSID 12
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings12 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings12BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings13BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings13BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings13BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings13BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings13BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings13BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings13BandOperationModeEnumDual    CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings13BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings13BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings13BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings13BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings13 - Settings for SSID 13
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings13 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings13BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings14BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings14BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings14BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings14BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings14BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings14BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings14BandOperationModeEnumDual    CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings14BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings14BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings14BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings14BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings14 - Settings for SSID 14
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings14 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings14BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings2BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings2BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings2BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings2BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings2BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings2BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings2BandOperationModeEnumDual    CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings2BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings2BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings2BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings2BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings2 - Settings for SSID 2
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings2 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings2BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings3BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings3BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings3BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings3BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings3BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings3BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings3BandOperationModeEnumDual    CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings3BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings3BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings3BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings3BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings3 - Settings for SSID 3
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings3 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings3BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings4BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings4BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings4BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings4BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings4BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings4BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings4BandOperationModeEnumDual    CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings4BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings4BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings4BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings4BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings4 - Settings for SSID 4
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings4 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings4BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings5BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings5BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings5BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings5BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings5BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings5BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings5BandOperationModeEnumDual    CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings5BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings5BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings5BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings5BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings5 - Settings for SSID 5
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings5 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings5BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings6BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings6BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings6BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings6BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings6BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings6BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings6BandOperationModeEnumDual    CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings6BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings6BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings6BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings6BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings6 - Settings for SSID 6
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings6 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings6BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings7BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings7BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings7BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings7BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings7BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings7BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings7BandOperationModeEnumDual    CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings7BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings7BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings7BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings7BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings7 - Settings for SSID 7
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings7 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings7BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings8BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings8BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings8BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings8BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings8BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings8BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings8BandOperationModeEnumDual    CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings8BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings8BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings8BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings8BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings8 - Settings for SSID 8
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings8 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings8BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings9BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings9BandOperationModeEnum string

const (
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings9BandOperationModeEnumTwo4ghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings9BandOperationModeEnum = "2.4ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings9BandOperationModeEnumFiveghz CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings9BandOperationModeEnum = "5ghz"
	CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings9BandOperationModeEnumDual    CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings9BandOperationModeEnum = "dual"
)

func (e *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings9BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings9BandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings9BandOperationModeEnum: %s", s)
	}
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings9 - Settings for SSID 9
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings9 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings9BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings - Per-SSID radio settings by number.
type CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings struct {
	// Settings for SSID 0
	Zero *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings0 `json:"0,omitempty"`
	// Settings for SSID 1
	One *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings1 `json:"1,omitempty"`
	// Settings for SSID 10
	Ten *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings10 `json:"10,omitempty"`
	// Settings for SSID 11
	Eleven *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings11 `json:"11,omitempty"`
	// Settings for SSID 12
	Twelve *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings12 `json:"12,omitempty"`
	// Settings for SSID 13
	Thirteen *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings13 `json:"13,omitempty"`
	// Settings for SSID 14
	Fourteen *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings14 `json:"14,omitempty"`
	// Settings for SSID 2
	Two *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings2 `json:"2,omitempty"`
	// Settings for SSID 3
	Three *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings3 `json:"3,omitempty"`
	// Settings for SSID 4
	Four *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings4 `json:"4,omitempty"`
	// Settings for SSID 5
	Five *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings5 `json:"5,omitempty"`
	// Settings for SSID 6
	Six *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings6 `json:"6,omitempty"`
	// Settings for SSID 7
	Seven *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings7 `json:"7,omitempty"`
	// Settings for SSID 8
	Eight *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings8 `json:"8,omitempty"`
	// Settings for SSID 9
	Nine *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings9 `json:"9,omitempty"`
}

// CreateNetworkWirelessRfProfile201ApplicationJSONTransmission - Settings related to radio transmission.
type CreateNetworkWirelessRfProfile201ApplicationJSONTransmission struct {
	// Toggle for radio transmission. When false, radios will not transmit at all.
	Enabled *bool `json:"enabled,omitempty"`
}

// CreateNetworkWirelessRfProfile201ApplicationJSONTwoFourGhzSettings - Settings related to 2.4Ghz band
type CreateNetworkWirelessRfProfile201ApplicationJSONTwoFourGhzSettings struct {
	// Determines whether ax radio on 2.4Ghz band is on or off. Can be either true or false. If false, we highly recommend disabling band steering. Defaults to true.
	AxEnabled *bool `json:"axEnabled,omitempty"`
	// Sets max power (dBm) of 2.4Ghz band. Can be integer between 2 and 30. Defaults to 30.
	MaxPower *int64 `json:"maxPower,omitempty"`
	// Sets min bitrate (Mbps) of 2.4Ghz band. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'. Defaults to 11.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
	// Sets min power (dBm) of 2.4Ghz band. Can be integer between 2 and 30. Defaults to 5.
	MinPower *int64 `json:"minPower,omitempty"`
	// The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default.
	Rxsop *int64 `json:"rxsop,omitempty"`
	// Sets valid auto channels for 2.4Ghz band. Can be one of '1', '6' or '11'. Defaults to [1, 6, 11].
	ValidAutoChannels []int64 `json:"validAutoChannels,omitempty"`
}

// CreateNetworkWirelessRfProfile201ApplicationJSON - Successful operation
type CreateNetworkWirelessRfProfile201ApplicationJSON struct {
	// Settings that will be enabled if selectionType is set to 'ap'.
	ApBandSettings *CreateNetworkWirelessRfProfile201ApplicationJSONApBandSettings `json:"apBandSettings,omitempty"`
	// Band selection can be set to either 'ssid' or 'ap'. This param is required on creation.
	BandSelectionType *string `json:"bandSelectionType,omitempty"`
	// Steers client to best available access point. Can be either true or false. Defaults to true.
	ClientBalancingEnabled *bool `json:"clientBalancingEnabled,omitempty"`
	// Settings related to 5Ghz band
	FiveGhzSettings *CreateNetworkWirelessRfProfile201ApplicationJSONFiveGhzSettings `json:"fiveGhzSettings,omitempty"`
	// The name of the new profile. Must be unique.
	ID *string `json:"id,omitempty"`
	// Minimum bitrate can be set to either 'band' or 'ssid'. Defaults to band.
	MinBitrateType *string `json:"minBitrateType,omitempty"`
	// The name of the new profile. Must be unique. This param is required on creation.
	Name *string `json:"name,omitempty"`
	// The network ID of the RF Profile
	NetworkID *string `json:"networkId,omitempty"`
	// Per-SSID radio settings by number.
	PerSsidSettings *CreateNetworkWirelessRfProfile201ApplicationJSONPerSsidSettings `json:"perSsidSettings,omitempty"`
	// Settings related to radio transmission.
	Transmission *CreateNetworkWirelessRfProfile201ApplicationJSONTransmission `json:"transmission,omitempty"`
	// Settings related to 2.4Ghz band
	TwoFourGhzSettings *CreateNetworkWirelessRfProfile201ApplicationJSONTwoFourGhzSettings `json:"twoFourGhzSettings,omitempty"`
}

type CreateNetworkWirelessRfProfileResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	CreateNetworkWirelessRfProfile201ApplicationJSONObject *CreateNetworkWirelessRfProfile201ApplicationJSON
}
