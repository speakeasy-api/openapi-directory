"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComputeNode = exports.ComputeNodeStateEnum = exports.ComputeNodeSchedulingStateEnum = void 0;
var utils_1 = require("../../../internal/utils");
var certificatereference_1 = require("./certificatereference");
var computenodeerror_1 = require("./computenodeerror");
var starttask_1 = require("./starttask");
var starttaskinformation_1 = require("./starttaskinformation");
var taskinformation_1 = require("./taskinformation");
var class_transformer_1 = require("class-transformer");
/**
 * Whether the compute node should be available for task scheduling.
 */
var ComputeNodeSchedulingStateEnum;
(function (ComputeNodeSchedulingStateEnum) {
    ComputeNodeSchedulingStateEnum["Enabled"] = "enabled";
    ComputeNodeSchedulingStateEnum["Disabled"] = "disabled";
})(ComputeNodeSchedulingStateEnum = exports.ComputeNodeSchedulingStateEnum || (exports.ComputeNodeSchedulingStateEnum = {}));
/**
 * The current state of the compute node.
 */
var ComputeNodeStateEnum;
(function (ComputeNodeStateEnum) {
    ComputeNodeStateEnum["Idle"] = "idle";
    ComputeNodeStateEnum["Rebooting"] = "rebooting";
    ComputeNodeStateEnum["Reimaging"] = "reimaging";
    ComputeNodeStateEnum["Running"] = "running";
    ComputeNodeStateEnum["Unusable"] = "unusable";
    ComputeNodeStateEnum["Creating"] = "creating";
    ComputeNodeStateEnum["Starting"] = "starting";
    ComputeNodeStateEnum["Waitingforstarttask"] = "waitingforstarttask";
    ComputeNodeStateEnum["Starttaskfailed"] = "starttaskfailed";
    ComputeNodeStateEnum["Unknown"] = "unknown";
    ComputeNodeStateEnum["Leavingpool"] = "leavingpool";
    ComputeNodeStateEnum["Offline"] = "offline";
})(ComputeNodeStateEnum = exports.ComputeNodeStateEnum || (exports.ComputeNodeStateEnum = {}));
/**
 * A compute node in the Batch service.
 */
var ComputeNode = /** @class */ (function (_super) {
    __extends(ComputeNode, _super);
    function ComputeNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "affinityId" }),
        __metadata("design:type", String)
    ], ComputeNode.prototype, "affinityId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "allocationTime" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], ComputeNode.prototype, "allocationTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: certificatereference_1.CertificateReference }),
        (0, class_transformer_1.Expose)({ name: "certificateReferences" }),
        (0, class_transformer_1.Type)(function () { return certificatereference_1.CertificateReference; }),
        __metadata("design:type", Array)
    ], ComputeNode.prototype, "certificateReferences", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: computenodeerror_1.ComputeNodeError }),
        (0, class_transformer_1.Expose)({ name: "errors" }),
        (0, class_transformer_1.Type)(function () { return computenodeerror_1.ComputeNodeError; }),
        __metadata("design:type", Array)
    ], ComputeNode.prototype, "errors", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], ComputeNode.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ipAddress" }),
        __metadata("design:type", String)
    ], ComputeNode.prototype, "ipAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "lastBootTime" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], ComputeNode.prototype, "lastBootTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: taskinformation_1.TaskInformation }),
        (0, class_transformer_1.Expose)({ name: "recentTasks" }),
        (0, class_transformer_1.Type)(function () { return taskinformation_1.TaskInformation; }),
        __metadata("design:type", Array)
    ], ComputeNode.prototype, "recentTasks", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "runningTasksCount" }),
        __metadata("design:type", Number)
    ], ComputeNode.prototype, "runningTasksCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "schedulingState" }),
        __metadata("design:type", String)
    ], ComputeNode.prototype, "schedulingState", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "startTask" }),
        (0, class_transformer_1.Type)(function () { return starttask_1.StartTask; }),
        __metadata("design:type", starttask_1.StartTask)
    ], ComputeNode.prototype, "startTask", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "startTaskInfo" }),
        (0, class_transformer_1.Type)(function () { return starttaskinformation_1.StartTaskInformation; }),
        __metadata("design:type", starttaskinformation_1.StartTaskInformation)
    ], ComputeNode.prototype, "startTaskInfo", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "state" }),
        __metadata("design:type", String)
    ], ComputeNode.prototype, "state", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "stateTransitionTime" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], ComputeNode.prototype, "stateTransitionTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "totalTasksRun" }),
        __metadata("design:type", Number)
    ], ComputeNode.prototype, "totalTasksRun", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "totalTasksSucceeded" }),
        __metadata("design:type", Number)
    ], ComputeNode.prototype, "totalTasksSucceeded", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "url" }),
        __metadata("design:type", String)
    ], ComputeNode.prototype, "url", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "vmSize" }),
        __metadata("design:type", String)
    ], ComputeNode.prototype, "vmSize", void 0);
    return ComputeNode;
}(utils_1.SpeakeasyBase));
exports.ComputeNode = ComputeNode;
