// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateStreamRequestBody struct {
	// <p>The number of hours that you want to retain the data in the stream. Kinesis Video Streams retains the data in a data store that is associated with the stream.</p> <p>The default value is 0, indicating that the stream does not persist data.</p> <p>When the <code>DataRetentionInHours</code> value is 0, consumers can still consume the fragments that remain in the service host buffer, which has a retention time limit of 5 minutes and a retention memory limit of 200 MB. Fragments are removed from the buffer when either limit is reached.</p>
	DataRetentionInHours *int64 `json:"DataRetentionInHours,omitempty"`
	// <p>The name of the device that is writing to the stream. </p> <note> <p>In the current implementation, Kinesis Video Streams does not use this name.</p> </note>
	DeviceName *string `json:"DeviceName,omitempty"`
	// <p>The ID of the Key Management Service (KMS) key that you want Kinesis Video Streams to use to encrypt stream data.</p> <p>If no key ID is specified, the default, Kinesis Video-managed key (<code>aws/kinesisvideo</code>) is used.</p> <p> For more information, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters">DescribeKey</a>. </p>
	KmsKeyID *string `json:"KmsKeyId,omitempty"`
	// <p>The media type of the stream. Consumers of the stream can use this information when processing the stream. For more information about media types, see <a href="http://www.iana.org/assignments/media-types/media-types.xhtml">Media Types</a>. If you choose to specify the <code>MediaType</code>, see <a href="https://tools.ietf.org/html/rfc6838#section-4.2">Naming Requirements</a> for guidelines.</p> <p>Example valid values include "video/h264" and "video/h264,audio/aac".</p> <p>This parameter is optional; the default value is <code>null</code> (or empty in JSON).</p>
	MediaType *string `json:"MediaType,omitempty"`
	// <p>A name for the stream that you are creating.</p> <p>The stream name is an identifier for the stream, and must be unique for each account and region.</p>
	StreamName string `json:"StreamName"`
	// A list of tags to associate with the specified stream. Each tag is a key-value pair (the value is optional).
	Tags map[string]string `json:"Tags,omitempty"`
}

type CreateStreamRequest struct {
	RequestBody       CreateStreamRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type CreateStreamResponse struct {
	// AccountStreamLimitExceededException
	AccountStreamLimitExceededException interface{}
	// ClientLimitExceededException
	ClientLimitExceededException interface{}
	ContentType                  string
	// Success
	CreateStreamOutput *shared.CreateStreamOutput
	// DeviceStreamLimitExceededException
	DeviceStreamLimitExceededException interface{}
	// InvalidArgumentException
	InvalidArgumentException interface{}
	// InvalidDeviceException
	InvalidDeviceException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// ResourceInUseException
	ResourceInUseException interface{}
	// TagsPerResourceExceededLimitException
	TagsPerResourceExceededLimitException interface{}
}
