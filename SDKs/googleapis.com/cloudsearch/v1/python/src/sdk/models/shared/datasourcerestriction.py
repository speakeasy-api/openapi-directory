"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import filteroptions as shared_filteroptions
from ..shared import source as shared_source
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DataSourceRestriction:
    r"""Restriction on Datasource."""
    
    filter_options: Optional[list[shared_filteroptions.FilterOptions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filterOptions'), 'exclude': lambda f: f is None }})
    r"""Filter options restricting the results. If multiple filters are present, they are grouped by object type before joining. Filters with the same object type are joined conjunctively, then the resulting expressions are joined disjunctively. The maximum number of elements is 20. NOTE: Suggest API supports only few filters at the moment: \\"objecttype\\", \\"type\\" and \\"mimetype\\". For now, schema specific filters cannot be used to filter suggestions."""  
    source: Optional[shared_source.Source] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})
    r"""Defines sources for the suggest/search APIs."""  
    