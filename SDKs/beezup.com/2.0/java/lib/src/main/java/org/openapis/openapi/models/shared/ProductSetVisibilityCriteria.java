/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ProductSetVisibilityCriteria {
    /**
     * Search disabled products. If null the filter will not be taken in account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disabled")
    public Boolean disabled;

    public ProductSetVisibilityCriteria withDisabled(Boolean disabled) {
        this.disabled = disabled;
        return this;
    }
    
    /**
     * Search excluded products by at least an exclusion filter. If null the filter will not be taken in account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("excluded")
    public Boolean excluded;

    public ProductSetVisibilityCriteria withExcluded(Boolean excluded) {
        this.excluded = excluded;
        return this;
    }
    
    /**
     * If false, search for products absent from the current catalog. If true, search for products currently in the catalog. If null the filter will not be taken in account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exist")
    public Boolean exist;

    public ProductSetVisibilityCriteria withExist(Boolean exist) {
        this.exist = exist;
        return this;
    }
    
    /**
     * Indicate how you want to combine the filters:
     * * funnel: You will get the products which meet at least one of the product set criterion. The criteria are applied in the following order:
     *   - categorization
     *   - exclusion filters
     *   - deactivations
     * * cumulative: You will get the products which have all the product set criteria
     * 
     */
    @JsonProperty("logic")
    public ProductSetVisibilityCriteriaLogicTypeEnum logic;

    public ProductSetVisibilityCriteria withLogic(ProductSetVisibilityCriteriaLogicTypeEnum logic) {
        this.logic = logic;
        return this;
    }
    
    /**
     * Search product WITHOUT category mapped with the channel. If null the filter will not be taken in account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uncategorized")
    public Boolean uncategorized;

    public ProductSetVisibilityCriteria withUncategorized(Boolean uncategorized) {
        this.uncategorized = uncategorized;
        return this;
    }
    
    public ProductSetVisibilityCriteria(@JsonProperty("logic") ProductSetVisibilityCriteriaLogicTypeEnum logic) {
        this.logic = logic;
  }
}
