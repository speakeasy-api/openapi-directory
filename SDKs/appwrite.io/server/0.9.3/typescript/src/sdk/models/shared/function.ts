/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Function
 */
export class FunctionT extends SpeakeasyBase {
  /**
   * Function ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "$id" })
  dollarId: string;

  /**
   * Function permissions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "$permissions" })
  dollarPermissions: Record<string, any>;

  /**
   * Function creation date in Unix timestamp.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dateCreated" })
  dateCreated: number;

  /**
   * Function update date in Unix timestamp.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dateUpdated" })
  dateUpdated: number;

  /**
   * Function trigger events.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "events" })
  events: string[];

  /**
   * Function name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Function execution runtime.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "runtime" })
  runtime: string;

  /**
   * Function execution schedult in CRON format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "schedule" })
  schedule: string;

  /**
   * Function next scheduled execution date in Unix timestamp.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scheduleNext" })
  scheduleNext: number;

  /**
   * Function next scheduled execution date in Unix timestamp.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "schedulePrevious" })
  schedulePrevious: number;

  /**
   * Function status. Possible values: disabled, enabled
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: string;

  /**
   * Function active tag ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tag" })
  tag: string;

  /**
   * Function execution timeout in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timeout" })
  timeout: number;

  /**
   * Function environment variables.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vars" })
  vars: string;
}
