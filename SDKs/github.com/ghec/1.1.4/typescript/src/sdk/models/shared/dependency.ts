/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * A notation of whether a dependency is requested directly by this manifest or is a dependency of another dependency.
 */
export enum DependencyRelationshipEnum {
  Direct = "direct",
  Indirect = "indirect",
}

/**
 * A notation of whether the dependency is required for the primary build artifact (runtime) or is only used for development. Future versions of this specification may allow for more granular scopes.
 */
export enum DependencyScopeEnum {
  Runtime = "runtime",
  Development = "development",
}

export class Dependency extends SpeakeasyBase {
  /**
   * Array of package-url (PURLs) of direct child dependencies.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dependencies" })
  dependencies?: string[];

  /**
   * User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  metadata?: Record<string, any>;

  /**
   * Package-url (PURL) of dependency. See https://github.com/package-url/purl-spec for more details.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "package_url" })
  packageUrl?: string;

  /**
   * A notation of whether a dependency is requested directly by this manifest or is a dependency of another dependency.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "relationship" })
  relationship?: DependencyRelationshipEnum;

  /**
   * A notation of whether the dependency is required for the primary build artifact (runtime) or is only used for development. Future versions of this specification may allow for more granular scopes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scope" })
  scope?: DependencyScopeEnum;
}
