"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import detectedproperties as shared_detectedproperties
from ..shared import encryption as shared_encryption
from ..shared import inputcaptions as shared_inputcaptions
from ..shared import timespan as shared_timespan
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JobInput:
    r"""Information about the file that you're transcoding."""
    
    aspect_ratio: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AspectRatio'), 'exclude': lambda f: f is None }})  
    container: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Container'), 'exclude': lambda f: f is None }})  
    detected_properties: Optional[shared_detectedproperties.DetectedProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DetectedProperties'), 'exclude': lambda f: f is None }})  
    encryption: Optional[shared_encryption.Encryption] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Encryption'), 'exclude': lambda f: f is None }})  
    frame_rate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FrameRate'), 'exclude': lambda f: f is None }})  
    input_captions: Optional[shared_inputcaptions.InputCaptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputCaptions'), 'exclude': lambda f: f is None }})  
    interlaced: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Interlaced'), 'exclude': lambda f: f is None }})  
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Key'), 'exclude': lambda f: f is None }})  
    resolution: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Resolution'), 'exclude': lambda f: f is None }})  
    time_span: Optional[shared_timespan.TimeSpan] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TimeSpan'), 'exclude': lambda f: f is None }})  
    