<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Contribution 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete this contribution
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteContributionsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteContributionsIdResponse
     */
	public function deleteContributionsId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteContributionsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteContributionsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contributions/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteContributionsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteContributionsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contribution = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Contribution', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * List valid contribution refinement types
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContributionRefinementTypesResponse
     */
	public function getContributionRefinementTypes(
    ): \OpenAPI\OpenAPI\Models\Operations\GetContributionRefinementTypesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contribution-refinement-types');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContributionRefinementTypesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getContributionRefinementTypes200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List contribution refinement options
     * 
     * Given a contribution list query determine the available filter options. Can be used to generate the UI to refinement a filter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContributionRefinementsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContributionRefinementsResponse
     */
	public function getContributionRefinements(
        \OpenAPI\OpenAPI\Models\Operations\GetContributionRefinementsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContributionRefinementsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contribution-refinements');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetContributionRefinementsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContributionRefinementsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getContributionRefinements200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List contributions
     * 
     * Retrieve contributions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContributionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContributionsResponse
     */
	public function getContributions(
        \OpenAPI\OpenAPI\Models\Operations\GetContributionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContributionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contributions');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetContributionsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContributionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contributions = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Contribution>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a single contribution by id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContributionsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContributionsIdResponse
     */
	public function getContributionsId(
        \OpenAPI\OpenAPI\Models\Operations\GetContributionsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContributionsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contributions/{id}', \OpenAPI\OpenAPI\Models\Operations\GetContributionsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContributionsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contribution = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Contribution', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * List users who have liked this contributions
     * 
     * Returns a list of user ids of users who have liked this conribution
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContributionsIdLikesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContributionsIdLikesResponse
     */
	public function getContributionsIdLikes(
        \OpenAPI\OpenAPI\Models\Operations\GetContributionsIdLikesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContributionsIdLikesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contributions/{id}/likes', \OpenAPI\OpenAPI\Models\Operations\GetContributionsIdLikesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContributionsIdLikesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getContributionsIdLikes200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a single export job; poll to follow export progress.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetExportsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetExportsIdResponse
     */
	public function getExportsId(
        \OpenAPI\OpenAPI\Models\Operations\GetExportsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetExportsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/exports/{id}', \OpenAPI\OpenAPI\Models\Operations\GetExportsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetExportsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->export = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Export', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Create a new contribution
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\Contribution $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostContributionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostContributionsResponse
     */
	public function postContributions(
        \OpenAPI\OpenAPI\Models\Shared\Contribution $request,
        \OpenAPI\OpenAPI\Models\Operations\PostContributionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostContributionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contributions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostContributionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contribution = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Contribution', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Raise a flag against this contribution
     * 
     * Allows end users to bring potential issues with publicly visible content to the attention of moderators.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostContributionsIdFlagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostContributionsIdFlagResponse
     */
	public function postContributionsIdFlag(
        \OpenAPI\OpenAPI\Models\Operations\PostContributionsIdFlagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostContributionsIdFlagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contributions/{id}/flag', \OpenAPI\OpenAPI\Models\Operations\PostContributionsIdFlagRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "flag", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostContributionsIdFlagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Flag', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Allows a user to mark a contribution as liked
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostContributionsIdLikeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostContributionsIdLikeResponse
     */
	public function postContributionsIdLike(
        \OpenAPI\OpenAPI\Models\Operations\PostContributionsIdLikeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostContributionsIdLikeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contributions/{id}/like', \OpenAPI\OpenAPI\Models\Operations\PostContributionsIdLikeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostContributionsIdLikeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postContributionsIdLike200ApplicationJSONNumber = $serializer->deserialize((string)$httpResponse->getBody(), 'float', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Perform a moderation action on this contribution
     * 
     * Allows the contribution to approved of rejected.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostContributionsIdModerateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostContributionsIdModerateResponse
     */
	public function postContributionsIdModerate(
        \OpenAPI\OpenAPI\Models\Operations\PostContributionsIdModerateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostContributionsIdModerateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contributions/{id}/moderate', \OpenAPI\OpenAPI\Models\Operations\PostContributionsIdModerateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "moderationHistoryItemSubmission", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostContributionsIdModerateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->postContributionsIdModerate200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Export contributions.
     * 
     * Begin an export job. Returns a export job which can be polled to follow the progress of an export.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostExportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostExportResponse
     */
	public function postExport(
        \OpenAPI\OpenAPI\Models\Operations\PostExportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostExportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/export');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostExportRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostExportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->export = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Export', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Export contributions preflight summary.
     * 
     * Provide a preflight summary of an export request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostExportSummaryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostExportSummaryResponse
     */
	public function postExportSummary(
        \OpenAPI\OpenAPI\Models\Operations\PostExportSummaryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostExportSummaryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/export-summary');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostExportSummaryRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostExportSummaryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exportSummary = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExportSummary', 'json');
            }
        }

        return $response;
    }
}