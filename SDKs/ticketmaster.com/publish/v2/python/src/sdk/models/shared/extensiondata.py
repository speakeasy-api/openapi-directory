"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import source as shared_source
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class ExtensionDataRelatedEntityTypeEnum(str, Enum):
    r"""The type of the entity to add this extensions to"""
    EVENT = 'event'
    VENUE = 'venue'
    ATTRACTION = 'attraction'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExtensionData:
    r"""This class defines an extenstion data on the Publish API"""
    
    data: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data') }})
    r"""The actual information to add to the entity"""  
    related_entity_type: ExtensionDataRelatedEntityTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relatedEntityType') }})
    r"""The type of the entity to add this extensions to"""  
    source: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source') }})
    r"""Source of the extension, where it came from"""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of the extension. This represent the data sent"""  
    related_entity_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relatedEntityId'), 'exclude': lambda f: f is None }})
    r"""Id of the entity to add this extionsion to. If the relatedEntityId is Null, a relatedEntitySource MUST be provided"""  
    related_entity_source: Optional[shared_source.Source] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relatedEntitySource'), 'exclude': lambda f: f is None }})
    r"""Source"""  
    version_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('versionNumber'), 'exclude': lambda f: f is None }})
    r"""Version of the extensions. Version is to prevent to override an extension with an older one"""  
    