/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Card - Represents a rich preview card that is generated using OpenGraph tags from a URL.
 * https://docs.joinmastodon.org/entities/card/
 */
public class Card {
    /**
     * The author of the original resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("author_name")
    public String authorName;
    public Card withAuthorName(String authorName) {
        this.authorName = authorName;
        return this;
    }
    
    /**
     * A link to the author of the original resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("author_url")
    public String authorUrl;
    public Card withAuthorUrl(String authorUrl) {
        this.authorUrl = authorUrl;
        return this;
    }
    
    /**
     * A hash computed by the [BlurHash algorithm](https://github.com/woltapp/blurhash), for generating colorful preview thumbnails when media has not been downloaded yet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blurhash")
    public String blurhash;
    public Card withBlurhash(String blurhash) {
        this.blurhash = blurhash;
        return this;
    }
    
    /**
     * Description of preview.
     */
    @JsonProperty("description")
    public String description;
    public Card withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Height of preview, in pixels.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("height")
    public Long height;
    public Card withHeight(Long height) {
        this.height = height;
        return this;
    }
    
    /**
     * HTML to be used for generating the preview card.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("html")
    public String html;
    public Card withHtml(String html) {
        this.html = html;
        return this;
    }
    
    /**
     * Preview thumbnail (URL).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    public String image;
    public Card withImage(String image) {
        this.image = image;
        return this;
    }
    
    /**
     * The provider of the original resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provider_name")
    public String providerName;
    public Card withProviderName(String providerName) {
        this.providerName = providerName;
        return this;
    }
    
    /**
     * A link to the provider of the original resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provider_url")
    public String providerUrl;
    public Card withProviderUrl(String providerUrl) {
        this.providerUrl = providerUrl;
        return this;
    }
    
    /**
     * Title of linked resource.
     */
    @JsonProperty("title")
    public String title;
    public Card withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * The type of the preview card. String (Enumerable, oneOf).
     */
    @JsonProperty("type")
    public CardTypeEnum type;
    public Card withType(CardTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * Location of linked resource.
     */
    @JsonProperty("url")
    public String url;
    public Card withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * Width of preview, in pixels.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("width")
    public Long width;
    public Card withWidth(Long width) {
        this.width = width;
        return this;
    }
    
}
