"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AccountTransferTransferApproval:
    r"""If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval."""
    
    approved_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approved_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AccountTransferTransferCancellation:
    r"""If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation."""
    
    canceled_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canceled_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled."""  
    
class AccountTransferCurrencyEnum(str, Enum):
    r"""The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency."""
    CAD = 'CAD'
    CHF = 'CHF'
    EUR = 'EUR'
    GBP = 'GBP'
    JPY = 'JPY'
    USD = 'USD'

class AccountTransferNetworkEnum(str, Enum):
    r"""The transfer's network."""
    ACCOUNT = 'account'

class AccountTransferStatusEnum(str, Enum):
    r"""The lifecycle status of the transfer."""
    PENDING_SUBMISSION = 'pending_submission'
    PENDING_APPROVAL = 'pending_approval'
    CANCELED = 'canceled'
    REQUIRES_ATTENTION = 'requires_attention'
    FLAGGED_BY_OPERATOR = 'flagged_by_operator'
    COMPLETE = 'complete'

class AccountTransferTypeEnum(str, Enum):
    r"""A constant representing the object's type. For this resource it will always be `account_transfer`."""
    ACCOUNT_TRANSFER = 'account_transfer'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AccountTransfer:
    r"""Account transfers move funds between your own accounts at Increase."""
    
    account_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_id') }})
    r"""The Account to which the transfer belongs."""  
    amount: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""The transfer amount in the minor unit of the destination account currency. For dollars, for example, this is cents."""  
    approval: AccountTransferTransferApproval = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approval') }})
    r"""If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval."""  
    cancellation: AccountTransferTransferCancellation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cancellation') }})
    r"""If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation."""  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created."""  
    currency: AccountTransferCurrencyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency') }})
    r"""The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency."""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""The description that will show on the transactions."""  
    destination_account_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination_account_id') }})
    r"""The destination account's identifier."""  
    destination_transaction_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination_transaction_id') }})
    r"""The ID for the transaction receiving the transfer."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The account transfer's identifier."""  
    network: AccountTransferNetworkEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network') }})
    r"""The transfer's network."""  
    status: AccountTransferStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The lifecycle status of the transfer."""  
    template_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('template_id') }})
    r"""If the transfer was created from a template, this will be the template's ID."""  
    transaction_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transaction_id') }})
    r"""The ID for the transaction funding the transfer."""  
    type: AccountTransferTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""A constant representing the object's type. For this resource it will always be `account_transfer`."""  
    