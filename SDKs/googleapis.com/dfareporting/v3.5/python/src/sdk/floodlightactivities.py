"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class FloodlightActivities:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def dfareporting_floodlight_activities_delete(self, request: operations.DfareportingFloodlightActivitiesDeleteRequest, security: operations.DfareportingFloodlightActivitiesDeleteSecurity) -> operations.DfareportingFloodlightActivitiesDeleteResponse:
        r"""Deletes an existing floodlight activity."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingFloodlightActivitiesDeleteRequest, base_url, '/userprofiles/{profileId}/floodlightActivities/{id}', request)
        
        query_params = utils.get_query_params(operations.DfareportingFloodlightActivitiesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingFloodlightActivitiesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def dfareporting_floodlight_activities_generatetag(self, request: operations.DfareportingFloodlightActivitiesGeneratetagRequest, security: operations.DfareportingFloodlightActivitiesGeneratetagSecurity) -> operations.DfareportingFloodlightActivitiesGeneratetagResponse:
        r"""Generates a tag for a floodlight activity."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingFloodlightActivitiesGeneratetagRequest, base_url, '/userprofiles/{profileId}/floodlightActivities/generatetag', request)
        
        query_params = utils.get_query_params(operations.DfareportingFloodlightActivitiesGeneratetagRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingFloodlightActivitiesGeneratetagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FloodlightActivitiesGenerateTagResponse])
                res.floodlight_activities_generate_tag_response = out

        return res

    def dfareporting_floodlight_activities_get(self, request: operations.DfareportingFloodlightActivitiesGetRequest, security: operations.DfareportingFloodlightActivitiesGetSecurity) -> operations.DfareportingFloodlightActivitiesGetResponse:
        r"""Gets one floodlight activity by ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingFloodlightActivitiesGetRequest, base_url, '/userprofiles/{profileId}/floodlightActivities/{id}', request)
        
        query_params = utils.get_query_params(operations.DfareportingFloodlightActivitiesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingFloodlightActivitiesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FloodlightActivity])
                res.floodlight_activity = out

        return res

    def dfareporting_floodlight_activities_insert(self, request: operations.DfareportingFloodlightActivitiesInsertRequest, security: operations.DfareportingFloodlightActivitiesInsertSecurity) -> operations.DfareportingFloodlightActivitiesInsertResponse:
        r"""Inserts a new floodlight activity."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingFloodlightActivitiesInsertRequest, base_url, '/userprofiles/{profileId}/floodlightActivities', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "floodlight_activity", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingFloodlightActivitiesInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingFloodlightActivitiesInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FloodlightActivity])
                res.floodlight_activity = out

        return res

    def dfareporting_floodlight_activities_list(self, request: operations.DfareportingFloodlightActivitiesListRequest, security: operations.DfareportingFloodlightActivitiesListSecurity) -> operations.DfareportingFloodlightActivitiesListResponse:
        r"""Retrieves a list of floodlight activities, possibly filtered. This method supports paging."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingFloodlightActivitiesListRequest, base_url, '/userprofiles/{profileId}/floodlightActivities', request)
        
        query_params = utils.get_query_params(operations.DfareportingFloodlightActivitiesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingFloodlightActivitiesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FloodlightActivitiesListResponse])
                res.floodlight_activities_list_response = out

        return res

    def dfareporting_floodlight_activities_patch(self, request: operations.DfareportingFloodlightActivitiesPatchRequest, security: operations.DfareportingFloodlightActivitiesPatchSecurity) -> operations.DfareportingFloodlightActivitiesPatchResponse:
        r"""Updates an existing floodlight activity. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingFloodlightActivitiesPatchRequest, base_url, '/userprofiles/{profileId}/floodlightActivities', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "floodlight_activity", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingFloodlightActivitiesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingFloodlightActivitiesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FloodlightActivity])
                res.floodlight_activity = out

        return res

    def dfareporting_floodlight_activities_update(self, request: operations.DfareportingFloodlightActivitiesUpdateRequest, security: operations.DfareportingFloodlightActivitiesUpdateSecurity) -> operations.DfareportingFloodlightActivitiesUpdateResponse:
        r"""Updates an existing floodlight activity."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingFloodlightActivitiesUpdateRequest, base_url, '/userprofiles/{profileId}/floodlightActivities', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "floodlight_activity", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingFloodlightActivitiesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingFloodlightActivitiesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FloodlightActivity])
                res.floodlight_activity = out

        return res

    