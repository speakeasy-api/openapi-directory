<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * SpotUpdateInput - A JSON object containing spot information
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class SpotUpdateInput
{
    /**
     * You may configure this field to an object which couples individual antenna ports to locations.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\SpotUpdateAntennaReportLocationsInput> $antennaReportLocations
     */
	#[\JMS\Serializer\Annotation\SerializedName('antenna_report_locations')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\SpotUpdateAntennaReportLocationsInput>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $antennaReportLocations = null;
    
    /**
     * Object containing the new configuration. This will be applied automatically when the values are valid.
     * 
     * @var ?array<string, mixed> $configRequest
     */
	#[\JMS\Serializer\Annotation\SerializedName('config_request')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $configRequest = null;
    
    /**
     * Last known geolocation estimate of this object. Not guaranteed to be included in response.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\GeoCoordsInput $geoCoords
     */
	#[\JMS\Serializer\Annotation\SerializedName('geo_coords')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\GeoCoordsInput')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GeoCoordsInput $geoCoords = null;
    
    /**
     * Unique identifier for resource.
     * 
     * @var ?string $reportLocation
     */
	#[\JMS\Serializer\Annotation\SerializedName('report_location')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $reportLocation = null;
    
    /**
     * Object containing the new senses configuration. See [Sense & Control](https://intellifi.zendesk.com/hc/en-us/sections/360001568254) documentation for more information.
     * 
     * @var ?array<string, mixed> $sensesRequest
     */
	#[\JMS\Serializer\Annotation\SerializedName('senses_request')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $sensesRequest = null;
    
	public function __construct()
	{
		$this->antennaReportLocations = null;
		$this->configRequest = null;
		$this->geoCoords = null;
		$this->reportLocation = null;
		$this->sensesRequest = null;
	}
}
