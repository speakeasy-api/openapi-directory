// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EventEventTypeEnum - The current event type
type EventEventTypeEnum string

const (
	EventEventTypeEnumAppSubmitted                    EventEventTypeEnum = "app.submitted"
	EventEventTypeEnumAppApproved                     EventEventTypeEnum = "app.approved"
	EventEventTypeEnumAppSuspended                    EventEventTypeEnum = "app.suspended"
	EventEventTypeEnumAppUnsuspended                  EventEventTypeEnum = "app.unsuspended"
	EventEventTypeEnumAppRejected                     EventEventTypeEnum = "app.rejected"
	EventEventTypeEnumAppInReview                     EventEventTypeEnum = "app.inReview"
	EventEventTypeEnumAppInstalled                    EventEventTypeEnum = "app.installed"
	EventEventTypeEnumAppUninstalled                  EventEventTypeEnum = "app.uninstalled"
	EventEventTypeEnumReviewCreated                   EventEventTypeEnum = "review.created"
	EventEventTypeEnumReviewUpdated                   EventEventTypeEnum = "review.updated"
	EventEventTypeEnumReviewApproved                  EventEventTypeEnum = "review.approved"
	EventEventTypeEnumReviewSpam                      EventEventTypeEnum = "review.spam"
	EventEventTypeEnumReviewRemoved                   EventEventTypeEnum = "review.removed"
	EventEventTypeEnumUserCreated                     EventEventTypeEnum = "user.created"
	EventEventTypeEnumUserUpdated                     EventEventTypeEnum = "user.updated"
	EventEventTypeEnumUserRemoved                     EventEventTypeEnum = "user.removed"
	EventEventTypeEnumUserInvalidPaymentDetails       EventEventTypeEnum = "user.invalidPaymentDetails"
	EventEventTypeEnumUserPaymentDetailsRequired      EventEventTypeEnum = "user.paymentDetailsRequired"
	EventEventTypeEnumDeveloperCreated                EventEventTypeEnum = "developer.created"
	EventEventTypeEnumDeveloperUpdated                EventEventTypeEnum = "developer.updated"
	EventEventTypeEnumDeveloperRemoved                EventEventTypeEnum = "developer.removed"
	EventEventTypeEnumDeveloperPaymentDetailsRequired EventEventTypeEnum = "developer.paymentDetailsRequired"
	EventEventTypeEnumPermissionAdded                 EventEventTypeEnum = "permission.added"
	EventEventTypeEnumPermissionRemoved               EventEventTypeEnum = "permission.removed"
	EventEventTypeEnumPaymentComplete                 EventEventTypeEnum = "payment.complete"
	EventEventTypeEnumPaymentRefunded                 EventEventTypeEnum = "payment.refunded"
	EventEventTypeEnumPaymentRequired                 EventEventTypeEnum = "payment.required"
	EventEventTypeEnumOwnershipExpired                EventEventTypeEnum = "ownership.expired"
)

func (e EventEventTypeEnum) ToPointer() *EventEventTypeEnum {
	return &e
}

func (e *EventEventTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "app.submitted":
		fallthrough
	case "app.approved":
		fallthrough
	case "app.suspended":
		fallthrough
	case "app.unsuspended":
		fallthrough
	case "app.rejected":
		fallthrough
	case "app.inReview":
		fallthrough
	case "app.installed":
		fallthrough
	case "app.uninstalled":
		fallthrough
	case "review.created":
		fallthrough
	case "review.updated":
		fallthrough
	case "review.approved":
		fallthrough
	case "review.spam":
		fallthrough
	case "review.removed":
		fallthrough
	case "user.created":
		fallthrough
	case "user.updated":
		fallthrough
	case "user.removed":
		fallthrough
	case "user.invalidPaymentDetails":
		fallthrough
	case "user.paymentDetailsRequired":
		fallthrough
	case "developer.created":
		fallthrough
	case "developer.updated":
		fallthrough
	case "developer.removed":
		fallthrough
	case "developer.paymentDetailsRequired":
		fallthrough
	case "permission.added":
		fallthrough
	case "permission.removed":
		fallthrough
	case "payment.complete":
		fallthrough
	case "payment.refunded":
		fallthrough
	case "payment.required":
		fallthrough
	case "ownership.expired":
		*e = EventEventTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventEventTypeEnum: %v", v)
	}
}

// Event - OK
type Event struct {
	// An app
	App *App
	// The date (in millis) of when this event occurred
	CreatedDate int64
	// A description of the event
	Description *string
	// A Developer
	Developer *Developer
	// The id of the event
	EventID string
	// The current event type
	EventType EventEventTypeEnum
	// The id of the marketplace that owns this event
	MarketplaceID string
	Ownership     *Ownership
	// A Review
	Review *Review
	// A transaction for an app initiated by a user
	Transaction *Transaction
	// A User
	User *User
}
