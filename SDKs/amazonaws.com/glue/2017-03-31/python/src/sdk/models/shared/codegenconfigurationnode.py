"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import aggregate as shared_aggregate
from ..shared import applymapping as shared_applymapping
from ..shared import athenaconnectorsource as shared_athenaconnectorsource
from ..shared import basiccatalogtarget as shared_basiccatalogtarget
from ..shared import catalogdeltasource as shared_catalogdeltasource
from ..shared import cataloghudisource as shared_cataloghudisource
from ..shared import catalogkafkasource as shared_catalogkafkasource
from ..shared import catalogkinesissource as shared_catalogkinesissource
from ..shared import catalogsource as shared_catalogsource
from ..shared import customcode as shared_customcode
from ..shared import directjdbcsource as shared_directjdbcsource
from ..shared import directkafkasource as shared_directkafkasource
from ..shared import directkinesissource as shared_directkinesissource
from ..shared import dropduplicates as shared_dropduplicates
from ..shared import dropfields as shared_dropfields
from ..shared import dropnullfields as shared_dropnullfields
from ..shared import dynamictransform as shared_dynamictransform
from ..shared import dynamodbcatalogsource as shared_dynamodbcatalogsource
from ..shared import evaluatedataquality as shared_evaluatedataquality
from ..shared import fillmissingvalues as shared_fillmissingvalues
from ..shared import filter as shared_filter
from ..shared import governedcatalogsource as shared_governedcatalogsource
from ..shared import governedcatalogtarget as shared_governedcatalogtarget
from ..shared import jdbcconnectorsource as shared_jdbcconnectorsource
from ..shared import jdbcconnectortarget as shared_jdbcconnectortarget
from ..shared import join as shared_join
from ..shared import merge as shared_merge
from ..shared import microsoftsqlservercatalogsource as shared_microsoftsqlservercatalogsource
from ..shared import microsoftsqlservercatalogtarget as shared_microsoftsqlservercatalogtarget
from ..shared import mysqlcatalogsource as shared_mysqlcatalogsource
from ..shared import mysqlcatalogtarget as shared_mysqlcatalogtarget
from ..shared import oraclesqlcatalogsource as shared_oraclesqlcatalogsource
from ..shared import oraclesqlcatalogtarget as shared_oraclesqlcatalogtarget
from ..shared import piidetection as shared_piidetection
from ..shared import postgresqlcatalogsource as shared_postgresqlcatalogsource
from ..shared import postgresqlcatalogtarget as shared_postgresqlcatalogtarget
from ..shared import redshiftsource as shared_redshiftsource
from ..shared import redshifttarget as shared_redshifttarget
from ..shared import relationalcatalogsource as shared_relationalcatalogsource
from ..shared import renamefield as shared_renamefield
from ..shared import s3catalogdeltasource as shared_s3catalogdeltasource
from ..shared import s3cataloghudisource as shared_s3cataloghudisource
from ..shared import s3catalogsource as shared_s3catalogsource
from ..shared import s3catalogtarget as shared_s3catalogtarget
from ..shared import s3csvsource as shared_s3csvsource
from ..shared import s3deltacatalogtarget as shared_s3deltacatalogtarget
from ..shared import s3deltadirecttarget as shared_s3deltadirecttarget
from ..shared import s3deltasource as shared_s3deltasource
from ..shared import s3directtarget as shared_s3directtarget
from ..shared import s3glueparquettarget as shared_s3glueparquettarget
from ..shared import s3hudicatalogtarget as shared_s3hudicatalogtarget
from ..shared import s3hudidirecttarget as shared_s3hudidirecttarget
from ..shared import s3hudisource as shared_s3hudisource
from ..shared import s3jsonsource as shared_s3jsonsource
from ..shared import s3parquetsource as shared_s3parquetsource
from ..shared import selectfields as shared_selectfields
from ..shared import selectfromcollection as shared_selectfromcollection
from ..shared import sparkconnectorsource as shared_sparkconnectorsource
from ..shared import sparkconnectortarget as shared_sparkconnectortarget
from ..shared import sparksql as shared_sparksql
from ..shared import spigot as shared_spigot
from ..shared import splitfields as shared_splitfields
from ..shared import union as shared_union
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodeGenConfigurationNode:
    r"""<code>CodeGenConfigurationNode</code> enumerates all valid Node types. One and only one of its member variables can be populated."""
    
    aggregate: Optional[shared_aggregate.Aggregate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Aggregate'), 'exclude': lambda f: f is None }})  
    apply_mapping: Optional[shared_applymapping.ApplyMapping] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApplyMapping'), 'exclude': lambda f: f is None }})  
    athena_connector_source: Optional[shared_athenaconnectorsource.AthenaConnectorSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AthenaConnectorSource'), 'exclude': lambda f: f is None }})  
    catalog_delta_source: Optional[shared_catalogdeltasource.CatalogDeltaSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CatalogDeltaSource'), 'exclude': lambda f: f is None }})  
    catalog_hudi_source: Optional[shared_cataloghudisource.CatalogHudiSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CatalogHudiSource'), 'exclude': lambda f: f is None }})  
    catalog_kafka_source: Optional[shared_catalogkafkasource.CatalogKafkaSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CatalogKafkaSource'), 'exclude': lambda f: f is None }})  
    catalog_kinesis_source: Optional[shared_catalogkinesissource.CatalogKinesisSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CatalogKinesisSource'), 'exclude': lambda f: f is None }})  
    catalog_source: Optional[shared_catalogsource.CatalogSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CatalogSource'), 'exclude': lambda f: f is None }})  
    catalog_target: Optional[shared_basiccatalogtarget.BasicCatalogTarget] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CatalogTarget'), 'exclude': lambda f: f is None }})  
    custom_code: Optional[shared_customcode.CustomCode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomCode'), 'exclude': lambda f: f is None }})  
    direct_jdbc_source: Optional[shared_directjdbcsource.DirectJDBCSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DirectJDBCSource'), 'exclude': lambda f: f is None }})
    r"""Specifies the direct JDBC source connection."""  
    direct_kafka_source: Optional[shared_directkafkasource.DirectKafkaSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DirectKafkaSource'), 'exclude': lambda f: f is None }})  
    direct_kinesis_source: Optional[shared_directkinesissource.DirectKinesisSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DirectKinesisSource'), 'exclude': lambda f: f is None }})  
    drop_duplicates: Optional[shared_dropduplicates.DropDuplicates] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DropDuplicates'), 'exclude': lambda f: f is None }})  
    drop_fields: Optional[shared_dropfields.DropFields] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DropFields'), 'exclude': lambda f: f is None }})  
    drop_null_fields: Optional[shared_dropnullfields.DropNullFields] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DropNullFields'), 'exclude': lambda f: f is None }})  
    dynamic_transform: Optional[shared_dynamictransform.DynamicTransform] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DynamicTransform'), 'exclude': lambda f: f is None }})  
    dynamo_db_catalog_source: Optional[shared_dynamodbcatalogsource.DynamoDBCatalogSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DynamoDBCatalogSource'), 'exclude': lambda f: f is None }})  
    evaluate_data_quality: Optional[shared_evaluatedataquality.EvaluateDataQuality] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EvaluateDataQuality'), 'exclude': lambda f: f is None }})  
    fill_missing_values: Optional[shared_fillmissingvalues.FillMissingValues] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FillMissingValues'), 'exclude': lambda f: f is None }})  
    filter: Optional[shared_filter.Filter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Filter'), 'exclude': lambda f: f is None }})  
    governed_catalog_source: Optional[shared_governedcatalogsource.GovernedCatalogSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GovernedCatalogSource'), 'exclude': lambda f: f is None }})  
    governed_catalog_target: Optional[shared_governedcatalogtarget.GovernedCatalogTarget] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GovernedCatalogTarget'), 'exclude': lambda f: f is None }})  
    jdbc_connector_source: Optional[shared_jdbcconnectorsource.JDBCConnectorSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JDBCConnectorSource'), 'exclude': lambda f: f is None }})  
    jdbc_connector_target: Optional[shared_jdbcconnectortarget.JDBCConnectorTarget] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JDBCConnectorTarget'), 'exclude': lambda f: f is None }})  
    join: Optional[shared_join.Join] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Join'), 'exclude': lambda f: f is None }})  
    merge: Optional[shared_merge.Merge] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Merge'), 'exclude': lambda f: f is None }})  
    microsoft_sql_server_catalog_source: Optional[shared_microsoftsqlservercatalogsource.MicrosoftSQLServerCatalogSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MicrosoftSQLServerCatalogSource'), 'exclude': lambda f: f is None }})  
    microsoft_sql_server_catalog_target: Optional[shared_microsoftsqlservercatalogtarget.MicrosoftSQLServerCatalogTarget] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MicrosoftSQLServerCatalogTarget'), 'exclude': lambda f: f is None }})  
    my_sql_catalog_source: Optional[shared_mysqlcatalogsource.MySQLCatalogSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MySQLCatalogSource'), 'exclude': lambda f: f is None }})  
    my_sql_catalog_target: Optional[shared_mysqlcatalogtarget.MySQLCatalogTarget] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MySQLCatalogTarget'), 'exclude': lambda f: f is None }})  
    oracle_sql_catalog_source: Optional[shared_oraclesqlcatalogsource.OracleSQLCatalogSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OracleSQLCatalogSource'), 'exclude': lambda f: f is None }})  
    oracle_sql_catalog_target: Optional[shared_oraclesqlcatalogtarget.OracleSQLCatalogTarget] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OracleSQLCatalogTarget'), 'exclude': lambda f: f is None }})  
    pii_detection: Optional[shared_piidetection.PIIDetection] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PIIDetection'), 'exclude': lambda f: f is None }})  
    postgre_sql_catalog_source: Optional[shared_postgresqlcatalogsource.PostgreSQLCatalogSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PostgreSQLCatalogSource'), 'exclude': lambda f: f is None }})  
    postgre_sql_catalog_target: Optional[shared_postgresqlcatalogtarget.PostgreSQLCatalogTarget] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PostgreSQLCatalogTarget'), 'exclude': lambda f: f is None }})  
    redshift_source: Optional[shared_redshiftsource.RedshiftSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RedshiftSource'), 'exclude': lambda f: f is None }})  
    redshift_target: Optional[shared_redshifttarget.RedshiftTarget] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RedshiftTarget'), 'exclude': lambda f: f is None }})  
    relational_catalog_source: Optional[shared_relationalcatalogsource.RelationalCatalogSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RelationalCatalogSource'), 'exclude': lambda f: f is None }})  
    rename_field: Optional[shared_renamefield.RenameField] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RenameField'), 'exclude': lambda f: f is None }})  
    s3_catalog_delta_source: Optional[shared_s3catalogdeltasource.S3CatalogDeltaSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3CatalogDeltaSource'), 'exclude': lambda f: f is None }})  
    s3_catalog_hudi_source: Optional[shared_s3cataloghudisource.S3CatalogHudiSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3CatalogHudiSource'), 'exclude': lambda f: f is None }})  
    s3_catalog_source: Optional[shared_s3catalogsource.S3CatalogSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3CatalogSource'), 'exclude': lambda f: f is None }})  
    s3_catalog_target: Optional[shared_s3catalogtarget.S3CatalogTarget] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3CatalogTarget'), 'exclude': lambda f: f is None }})  
    s3_csv_source: Optional[shared_s3csvsource.S3CsvSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3CsvSource'), 'exclude': lambda f: f is None }})  
    s3_delta_catalog_target: Optional[shared_s3deltacatalogtarget.S3DeltaCatalogTarget] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3DeltaCatalogTarget'), 'exclude': lambda f: f is None }})  
    s3_delta_direct_target: Optional[shared_s3deltadirecttarget.S3DeltaDirectTarget] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3DeltaDirectTarget'), 'exclude': lambda f: f is None }})  
    s3_delta_source: Optional[shared_s3deltasource.S3DeltaSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3DeltaSource'), 'exclude': lambda f: f is None }})  
    s3_direct_target: Optional[shared_s3directtarget.S3DirectTarget] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3DirectTarget'), 'exclude': lambda f: f is None }})  
    s3_glue_parquet_target: Optional[shared_s3glueparquettarget.S3GlueParquetTarget] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3GlueParquetTarget'), 'exclude': lambda f: f is None }})  
    s3_hudi_catalog_target: Optional[shared_s3hudicatalogtarget.S3HudiCatalogTarget] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3HudiCatalogTarget'), 'exclude': lambda f: f is None }})  
    s3_hudi_direct_target: Optional[shared_s3hudidirecttarget.S3HudiDirectTarget] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3HudiDirectTarget'), 'exclude': lambda f: f is None }})  
    s3_hudi_source: Optional[shared_s3hudisource.S3HudiSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3HudiSource'), 'exclude': lambda f: f is None }})  
    s3_json_source: Optional[shared_s3jsonsource.S3JSONSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3JsonSource'), 'exclude': lambda f: f is None }})  
    s3_parquet_source: Optional[shared_s3parquetsource.S3ParquetSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3ParquetSource'), 'exclude': lambda f: f is None }})  
    select_fields: Optional[shared_selectfields.SelectFields] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SelectFields'), 'exclude': lambda f: f is None }})  
    select_from_collection: Optional[shared_selectfromcollection.SelectFromCollection] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SelectFromCollection'), 'exclude': lambda f: f is None }})  
    spark_connector_source: Optional[shared_sparkconnectorsource.SparkConnectorSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SparkConnectorSource'), 'exclude': lambda f: f is None }})  
    spark_connector_target: Optional[shared_sparkconnectortarget.SparkConnectorTarget] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SparkConnectorTarget'), 'exclude': lambda f: f is None }})  
    spark_sql: Optional[shared_sparksql.SparkSQL] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SparkSQL'), 'exclude': lambda f: f is None }})  
    spigot: Optional[shared_spigot.Spigot] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Spigot'), 'exclude': lambda f: f is None }})  
    split_fields: Optional[shared_splitfields.SplitFields] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SplitFields'), 'exclude': lambda f: f is None }})  
    union: Optional[shared_union.Union] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Union'), 'exclude': lambda f: f is None }})  
    