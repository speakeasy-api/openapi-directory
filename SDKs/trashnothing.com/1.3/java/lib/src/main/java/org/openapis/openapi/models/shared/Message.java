/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Message - A message between two users.
 */
public class Message {
    /**
     * The content of the message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content")
    public String content;
    public Message withContent(String content) {
        this.content = content;
        return this;
    }
    
    /**
     * The UTC date and time when the message was sent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date")
    public OffsetDateTime date;
    public Message withDate(OffsetDateTime date) {
        this.date = date;
        return this;
    }
    
    /**
     * Every message a user receives is made available via the API and is sent to the user by email.  Some messages may contain unsupported attachments that are not available by the API but are emailed to the user (eg. documents, videos, zip files). The email_attachments field provides the names of all the unsupported attachments that were emailed to the user (will be null if there are no unsupported attachments).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email_attachments")
    public String[] emailAttachments;
    public Message withEmailAttachments(String[] emailAttachments) {
        this.emailAttachments = emailAttachments;
        return this;
    }
    
    /**
     * The ID of the user that sent the message (the sender).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from_user_id")
    public String fromUserId;
    public Message withFromUserId(String fromUserId) {
        this.fromUserId = fromUserId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message_id")
    public String messageId;
    public Message withMessageId(String messageId) {
        this.messageId = messageId;
        return this;
    }
    
    /**
     * Details about the photos associated with this message (may be null if there are no photos).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("photos")
    public Photo[] photos;
    public Message withPhotos(Photo[] photos) {
        this.photos = photos;
        return this;
    }
    
    /**
     * An offer, wanted, admin, taken or received post.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("post")
    public Post post;
    public Message withPost(Post post) {
        this.post = post;
        return this;
    }
    
    /**
     * Because many messages are received by email, all messages have a subject. The subject is often useful to allow the recipient to determine which post a message may be referring to.  In rare cases, some senders send emails with a subject and but no email body which causes the message content to be an empty string.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject")
    public String subject;
    public Message withSubject(String subject) {
        this.subject = subject;
        return this;
    }
    
    /**
     * The ID of the user that received the message (the recipient).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("to_user_id")
    public String toUserId;
    public Message withToUserId(String toUserId) {
        this.toUserId = toUserId;
        return this;
    }
    
}
