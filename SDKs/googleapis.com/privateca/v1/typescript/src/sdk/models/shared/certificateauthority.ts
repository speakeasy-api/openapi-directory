/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AccessUrls } from "./accessurls";
import { CertificateConfig } from "./certificateconfig";
import { CertificateDescription } from "./certificatedescription";
import { KeyVersionSpec } from "./keyversionspec";
import { SubordinateConfig } from "./subordinateconfig";
import { Expose, Type } from "class-transformer";

/**
 * Output only. The State for this CertificateAuthority.
 */
export enum CertificateAuthorityStateEnum {
  StateUnspecified = "STATE_UNSPECIFIED",
  Enabled = "ENABLED",
  Disabled = "DISABLED",
  Staged = "STAGED",
  AwaitingUserActivation = "AWAITING_USER_ACTIVATION",
  Deleted = "DELETED",
}

/**
 * Output only. The CaPool.Tier of the CaPool that includes this CertificateAuthority.
 */
export enum CertificateAuthorityTierEnum {
  TierUnspecified = "TIER_UNSPECIFIED",
  Enterprise = "ENTERPRISE",
  Devops = "DEVOPS",
}

/**
 * Required. Immutable. The Type of this CertificateAuthority.
 */
export enum CertificateAuthorityTypeEnum {
  TypeUnspecified = "TYPE_UNSPECIFIED",
  SelfSigned = "SELF_SIGNED",
  Subordinate = "SUBORDINATE",
}

/**
 * A CertificateAuthority represents an individual Certificate Authority. A CertificateAuthority can be used to create Certificates.
 */
export class CertificateAuthority extends SpeakeasyBase {
  /**
   * URLs where a CertificateAuthority will publish content.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accessUrls" })
  @Type(() => AccessUrls)
  accessUrls?: AccessUrls;

  /**
   * Output only. A structured description of this CertificateAuthority's CA certificate and its issuers. Ordered as self-to-root.
   */
  @SpeakeasyMetadata({ elemType: CertificateDescription })
  @Expose({ name: "caCertificateDescriptions" })
  @Type(() => CertificateDescription)
  caCertificateDescriptions?: CertificateDescription[];

  /**
   * A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "config" })
  @Type(() => CertificateConfig)
  config?: CertificateConfig;

  /**
   * Output only. The time at which this CertificateAuthority was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createTime" })
  createTime?: string;

  /**
   * Output only. The time at which this CertificateAuthority was soft deleted, if it is in the DELETED state.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deleteTime" })
  deleteTime?: string;

  /**
   * Output only. The time at which this CertificateAuthority will be permanently purged, if it is in the DELETED state.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expireTime" })
  expireTime?: string;

  /**
   * Immutable. The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and CRLs. This must be a bucket name, without any prefixes (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named `my-bucket`, you would simply specify `my-bucket`. If not specified, a managed bucket will be created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gcsBucket" })
  gcsBucket?: string;

  /**
   * A Cloud KMS key configuration that a CertificateAuthority will use.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "keySpec" })
  @Type(() => KeyVersionSpec)
  keySpec?: KeyVersionSpec;

  /**
   * Optional. Labels with user-defined metadata.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, string>;

  /**
   * Required. Immutable. The desired lifetime of the CA certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lifetime" })
  lifetime?: string;

  /**
   * Output only. The resource name for this CertificateAuthority in the format `projects/* /locations/* /caPools/* /certificateAuthorities/*`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Output only. This CertificateAuthority's certificate chain, including the current CertificateAuthority's certificate. Ordered such that the root issuer is the final element (consistent with RFC 5246). For a self-signed CA, this will only list the current CertificateAuthority's certificate.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pemCaCertificates" })
  pemCaCertificates?: string[];

  /**
   * Output only. The State for this CertificateAuthority.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: CertificateAuthorityStateEnum;

  /**
   * Describes a subordinate CA's issuers. This is either a resource name to a known issuing CertificateAuthority, or a PEM issuer certificate chain.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subordinateConfig" })
  @Type(() => SubordinateConfig)
  subordinateConfig?: SubordinateConfig;

  /**
   * Output only. The CaPool.Tier of the CaPool that includes this CertificateAuthority.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tier" })
  tier?: CertificateAuthorityTierEnum;

  /**
   * Required. Immutable. The Type of this CertificateAuthority.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: CertificateAuthorityTypeEnum;

  /**
   * Output only. The time at which this CertificateAuthority was last updated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updateTime" })
  updateTime?: string;
}

/**
 * A CertificateAuthority represents an individual Certificate Authority. A CertificateAuthority can be used to create Certificates.
 */
export class CertificateAuthorityInput extends SpeakeasyBase {
  /**
   * URLs where a CertificateAuthority will publish content.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accessUrls" })
  @Type(() => AccessUrls)
  accessUrls?: AccessUrls;

  /**
   * A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "config" })
  @Type(() => CertificateConfig)
  config?: CertificateConfig;

  /**
   * Immutable. The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and CRLs. This must be a bucket name, without any prefixes (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named `my-bucket`, you would simply specify `my-bucket`. If not specified, a managed bucket will be created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gcsBucket" })
  gcsBucket?: string;

  /**
   * A Cloud KMS key configuration that a CertificateAuthority will use.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "keySpec" })
  @Type(() => KeyVersionSpec)
  keySpec?: KeyVersionSpec;

  /**
   * Optional. Labels with user-defined metadata.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, string>;

  /**
   * Required. Immutable. The desired lifetime of the CA certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lifetime" })
  lifetime?: string;

  /**
   * Describes a subordinate CA's issuers. This is either a resource name to a known issuing CertificateAuthority, or a PEM issuer certificate chain.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subordinateConfig" })
  @Type(() => SubordinateConfig)
  subordinateConfig?: SubordinateConfig;

  /**
   * Required. Immutable. The Type of this CertificateAuthority.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: CertificateAuthorityTypeEnum;
}
