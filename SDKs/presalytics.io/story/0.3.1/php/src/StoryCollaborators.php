<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class StoryCollaborators 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Story Collaborators: List
     * 
     * Gets a list users that can read or edit this story
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsGetResponse
     */
	public function storyIdCollaboratorsGet(
        \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{id}/collaborators', \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storyCollaborators = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\StoryCollaborator>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Story Collaborators: Edit Inactive User Permission
     * 
     * Edit story permissions for inactive users.  Requires admin rights.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsInactivePostRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsInactivePostResponse
     */
	public function storyIdCollaboratorsInactivePost(
        \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsInactivePostRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsInactivePostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{id}/collaborators/inactive', \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsInactivePostRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "modifyInactiveCollaborator", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsInactivePostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storyCollaborator = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StoryCollaborator', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Story Collaborators: Add New User
     * 
     * Add a colloborator to this story
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsPostRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsPostResponse
     */
	public function storyIdCollaboratorsPost(
        \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsPostRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsPostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{id}/collaborators', \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsPostRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "addNewCollaboratorRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storyCollaborator = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StoryCollaborator', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Story Collaborators: Remove User
     * 
     * Remove a collaborator from this story
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsUseridDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsUseridDeleteResponse
     */
	public function storyIdCollaboratorsUseridDelete(
        \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsUseridDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsUseridDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{id}/collaborators/{story_collaborator_userid}', \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsUseridDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsUseridDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Story Collaborators: Access Permissions
     * 
     * Data to help you understand the access rights of a particular collaborator on this story
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsUseridGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsUseridGetResponse
     */
	public function storyIdCollaboratorsUseridGet(
        \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsUseridGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsUseridGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{id}/collaborators/{story_collaborator_userid}', \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsUseridGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsUseridGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storyCollaborator = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StoryCollaborator', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Story Collaborators: Edit Access Rights
     * 
     * Modify a user's access right to this story (e.g., grant edit permissions)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsUseridPutRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsUseridPutResponse
     */
	public function storyIdCollaboratorsUseridPut(
        \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsUseridPutRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsUseridPutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{id}/collaborators/{story_collaborator_userid}', \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsUseridPutRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "storyCollaborator", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoryIdCollaboratorsUseridPutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storyCollaborator = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StoryCollaborator', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetail', 'json');
            }
        }

        return $response;
    }
}