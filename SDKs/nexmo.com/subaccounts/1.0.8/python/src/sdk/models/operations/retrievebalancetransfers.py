"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import listbalancetransfersresponse as shared_listbalancetransfersresponse
from ..shared import unprovisionederrorresponse as shared_unprovisionederrorresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class RetrieveBalanceTransfersSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class RetrieveBalanceTransfersRequest:
    
    api_key: str = dataclasses.field(metadata={'path_param': { 'field_name': 'api_key', 'style': 'simple', 'explode': False }})
    r"""ID of the primary account."""  
    start_date: str = dataclasses.field(metadata={'query_param': { 'field_name': 'start_date', 'style': 'form', 'explode': True }})
    r"""Start of the retrieval period."""  
    end_date: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'end_date', 'style': 'form', 'explode': True }})
    r"""End of the retrieval period. If absent then all transfers until now is returned."""  
    subaccount: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'subaccount', 'style': 'form', 'explode': True }})
    r"""Subaccount to filter by. You may send this multiple times to filter on multiple subaccounts"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RetrieveBalanceTransfers404ApplicationJSON:
    r"""Invalid API Key"""
    
    detail: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail') }})  
    instance: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instance') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RetrieveBalanceTransfers401ApplicationJSON:
    r"""Credential is missing or invalid"""
    
    detail: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail') }})  
    instance: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instance') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    

@dataclasses.dataclass
class RetrieveBalanceTransfersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    list_balance_transfers_response: Optional[shared_listbalancetransfersresponse.ListBalanceTransfersResponse] = dataclasses.field(default=None)
    r"""List balance transfers response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    retrieve_balance_transfers_401_application_json_object: Optional[RetrieveBalanceTransfers401ApplicationJSON] = dataclasses.field(default=None)
    r"""Credential is missing or invalid"""  
    retrieve_balance_transfers_404_application_json_object: Optional[RetrieveBalanceTransfers404ApplicationJSON] = dataclasses.field(default=None)
    r"""The account ID provided does not exist in our system or you do not have access"""  
    unprovisioned_error_response: Optional[shared_unprovisionederrorresponse.UnprovisionedErrorResponse] = dataclasses.field(default=None)
    r"""Action is forbidden"""  
    