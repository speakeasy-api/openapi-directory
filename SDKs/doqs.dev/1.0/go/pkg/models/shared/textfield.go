// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TextFieldFontEnum - An enumeration.
type TextFieldFontEnum string

const (
	TextFieldFontEnumCourier    TextFieldFontEnum = "courier"
	TextFieldFontEnumHelvetica  TextFieldFontEnum = "helvetica"
	TextFieldFontEnumTimesRoman TextFieldFontEnum = "times_roman"
)

func (e TextFieldFontEnum) ToPointer() *TextFieldFontEnum {
	return &e
}

func (e *TextFieldFontEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "courier":
		fallthrough
	case "helvetica":
		fallthrough
	case "times_roman":
		*e = TextFieldFontEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TextFieldFontEnum: %v", v)
	}
}

// TextFieldHorizontalAlignEnum - An enumeration.
type TextFieldHorizontalAlignEnum string

const (
	TextFieldHorizontalAlignEnumL TextFieldHorizontalAlignEnum = "L"
	TextFieldHorizontalAlignEnumC TextFieldHorizontalAlignEnum = "C"
	TextFieldHorizontalAlignEnumR TextFieldHorizontalAlignEnum = "R"
)

func (e TextFieldHorizontalAlignEnum) ToPointer() *TextFieldHorizontalAlignEnum {
	return &e
}

func (e *TextFieldHorizontalAlignEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "L":
		fallthrough
	case "C":
		fallthrough
	case "R":
		*e = TextFieldHorizontalAlignEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TextFieldHorizontalAlignEnum: %v", v)
	}
}

type TextFieldTypeEnum string

const (
	TextFieldTypeEnumText TextFieldTypeEnum = "text"
)

func (e TextFieldTypeEnum) ToPointer() *TextFieldTypeEnum {
	return &e
}

func (e *TextFieldTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = TextFieldTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TextFieldTypeEnum: %v", v)
	}
}

// TextFieldVerticalAlignEnum - An enumeration.
type TextFieldVerticalAlignEnum string

const (
	TextFieldVerticalAlignEnumT TextFieldVerticalAlignEnum = "T"
	TextFieldVerticalAlignEnumC TextFieldVerticalAlignEnum = "C"
	TextFieldVerticalAlignEnumB TextFieldVerticalAlignEnum = "B"
)

func (e TextFieldVerticalAlignEnum) ToPointer() *TextFieldVerticalAlignEnum {
	return &e
}

func (e *TextFieldVerticalAlignEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "T":
		fallthrough
	case "C":
		fallthrough
	case "B":
		*e = TextFieldVerticalAlignEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TextFieldVerticalAlignEnum: %v", v)
	}
}

type TextField struct {
	Bbox       BoundingBox                   `json:"bbox"`
	CellCount  *int64                        `json:"cell_count,omitempty"`
	CellOffset *int64                        `json:"cell_offset,omitempty"`
	Cells      *bool                         `json:"cells,omitempty"`
	Color      *string                       `json:"color,omitempty"`
	Font       *TextFieldFontEnum            `json:"font,omitempty"`
	FontSize   *int64                        `json:"font_size,omitempty"`
	HAlign     *TextFieldHorizontalAlignEnum `json:"h_align,omitempty"`
	Name       string                        `json:"name"`
	Page       int64                         `json:"page"`
	Required   *bool                         `json:"required,omitempty"`
	Type       TextFieldTypeEnum             `json:"type"`
	VAlign     *TextFieldVerticalAlignEnum   `json:"v_align,omitempty"`
}
