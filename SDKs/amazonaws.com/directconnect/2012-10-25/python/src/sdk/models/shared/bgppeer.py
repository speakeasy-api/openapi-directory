"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import addressfamily_enum as shared_addressfamily_enum
from ..shared import bgppeerstate_enum as shared_bgppeerstate_enum
from ..shared import bgpstatus_enum as shared_bgpstatus_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BGPPeer:
    r"""Information about a BGP peer."""
    
    address_family: Optional[shared_addressfamily_enum.AddressFamilyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressFamily'), 'exclude': lambda f: f is None }})  
    amazon_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amazonAddress'), 'exclude': lambda f: f is None }})  
    asn: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('asn'), 'exclude': lambda f: f is None }})  
    auth_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authKey'), 'exclude': lambda f: f is None }})  
    aws_device_v2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('awsDeviceV2'), 'exclude': lambda f: f is None }})  
    aws_logical_device_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('awsLogicalDeviceId'), 'exclude': lambda f: f is None }})  
    bgp_peer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bgpPeerId'), 'exclude': lambda f: f is None }})  
    bgp_peer_state: Optional[shared_bgppeerstate_enum.BGPPeerStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bgpPeerState'), 'exclude': lambda f: f is None }})  
    bgp_status: Optional[shared_bgpstatus_enum.BGPStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bgpStatus'), 'exclude': lambda f: f is None }})  
    customer_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerAddress'), 'exclude': lambda f: f is None }})  
    