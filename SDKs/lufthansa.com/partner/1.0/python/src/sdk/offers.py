"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Offers:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def all_fares(self, request: operations.AllFaresRequest, security: operations.AllFaresSecurity) -> operations.AllFaresResponse:
        r"""All Fares
        Retrieves all available fares for a specific Origin & Destination pair on a given date. Available fares are: One-way and Return for 4U. Return only for OS
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/offers/fares/allfares'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.AllFaresRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AllFaresResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.all_fares_200_application_json_string = http_res.content

        return res

    def best_fares(self, request: operations.BestFaresRequest, security: operations.BestFaresSecurity) -> operations.BestFaresResponse:
        r"""Best Fares
        Retrieve best fares for the requested journey across multiple days or multiple months.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/offers/fares/bestfares'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.BestFaresRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BestFaresResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.best_fares_200_application_json_string = http_res.content

        return res

    def deep_links(self, request: operations.DeepLinksRequest, security: operations.DeepLinksSecurity) -> operations.DeepLinksResponse:
        r"""Deep Links
        Returns valid deep links for the provided input parameters
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/offers/fares/deeplink'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.DeepLinksRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeepLinksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.deep_links_200_application_json_string = http_res.content

        return res

    def fares(self, request: operations.FaresRequest, security: operations.FaresSecurity) -> operations.FaresResponse:
        r"""Fares
        Retrieve all available fares per fare family for a specific Origin & Destination on a given date
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/offers/fares/fares'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.FaresRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FaresResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.fares_200_application_json_string = http_res.content

        return res

    def fares_subscriptions(self, request: operations.FaresSubscriptionsRequest, security: operations.FaresSubscriptionsSecurity) -> operations.FaresSubscriptionsResponse:
        r"""Fares Subscriptions
        Create a subscription for best price O&D. Receive regular updates on lowest fares
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/offers/fares/subscriptions'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.FaresSubscriptionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FaresSubscriptionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.fares_subscriptions_200_application_json_string = http_res.content

        return res

    def lh_deep_links_ffp(self, request: operations.LHDeepLinksFFPRequest, security: operations.LHDeepLinksFFPSecurity) -> operations.LHDeepLinksFFPResponse:
        r"""LH Deep Links - FFP
        Returns valid LH deep links (FFP - links to flight selection screen on LH.COM)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/offers/fares/deeplink/ffp'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.LHDeepLinksFFPRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LHDeepLinksFFPResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.lh_deep_links_ffp_200_application_json_string = http_res.content

        return res

    def lh_deep_links_itco(self, request: operations.LHDeepLinksITCORequest, security: operations.LHDeepLinksITCOSecurity) -> operations.LHDeepLinksITCOResponse:
        r"""LH Deep Links - ITCO
        Returns valid LH deep links (ITCO - links to shopping cart on LH.COM)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/offers/fares/deeplink/itco'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.LHDeepLinksITCORequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LHDeepLinksITCOResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.lh_deep_links_itco_200_application_json_string = http_res.content

        return res

    def lowest_fares(self, request: operations.LowestFaresRequest, security: operations.LowestFaresSecurity) -> operations.LowestFaresResponse:
        r"""Lowest Fares
        Retrieve lowest fare for a specific Origin & Destination pair on a given date. Available fares are: One-way and Return for 4U. Return only for OS & LH
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/offers/fares/lowestfares'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.LowestFaresRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LowestFaresResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.lowest_fares_200_application_json_string = http_res.content

        return res

    def ond_route(self, request: operations.ONDRouteRequest, security: operations.ONDRouteSecurity) -> operations.ONDRouteResponse:
        r"""OND Route
        Returns LH route origin & destination information
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ONDRouteRequest, base_url, '/offers/ond/route/{origin}/{destination}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ONDRouteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ONDRouteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.ond_route_200_application_json_string = http_res.content

        return res

    def ond_status(self, request: operations.ONDStatusRequest, security: operations.ONDStatusSecurity) -> operations.ONDStatusResponse:
        r"""OND Status
        Returns LH network route status information. Search for recently added or retired routes
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/offers/ond/status'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ONDStatusRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ONDStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.ond_status_200_application_json_string = http_res.content

        return res

    def top_ond(self, request: operations.TopONDRequest, security: operations.TopONDSecurity) -> operations.TopONDResponse:
        r"""Top OND
        Returns LH Top routes per country or across all countries
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/offers/ond/top'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.TopONDRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TopONDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.top_ond_200_application_json_string = http_res.content

        return res

    