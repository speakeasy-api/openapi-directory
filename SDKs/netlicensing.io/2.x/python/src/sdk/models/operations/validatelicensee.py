"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import netlicensing as shared_netlicensing
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class ValidateLicenseeSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    
class ValidateLicenseeRequestBodyActionEnum(str, Enum):
    r"""'Floating' licensing model: check-out or check-in session action, to allocate or return it from/to the pool of available sessions"""
    CHECK_OUT = 'checkOut'
    CHECK_IN = 'checkIn'


@dataclasses.dataclass
class ValidateLicenseeRequestBody:
    
    action: Optional[ValidateLicenseeRequestBodyActionEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'action' }})
    r"""'Floating' licensing model: check-out or check-in session action, to allocate or return it from/to the pool of available sessions"""  
    licensee_name: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'licenseeName' }})
    r"""Human-readable name for the auto-created Licensee (will be set as custom Licensee property)"""  
    node_secret: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'nodeSecret' }})
    r"""'Node-Locked' licensing model: specifies unique secret"""  
    product_module_number: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'productModuleNumber' }})
    r"""'Node-Locked' licensing model: product module number"""  
    product_number: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'productNumber' }})
    r"""Product number, must be provided when 'Licensee auto-create' is enabled (see also Product JavaDoc). Identifies the Product to which new Licensee should be added"""  
    session_id: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'sessionId' }})
    r"""'Floating' licensing model: specifies unique session identifier"""  
    

@dataclasses.dataclass
class ValidateLicenseeRequest:
    
    licensee_number: str = dataclasses.field(metadata={'path_param': { 'field_name': 'licenseeNumber', 'style': 'simple', 'explode': False }})
    r"""Licensee number with a maximum length of 1000 characters"""  
    request_body: Optional[ValidateLicenseeRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class ValidateLicenseeResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    netlicensing: Optional[shared_netlicensing.Netlicensing] = dataclasses.field(default=None)
    r"""Successful request"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    