<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * CertificateSummary - Summary of the certificate.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class CertificateSummary
{
    /**
     * ID of the certificate.
     * 
     * @var string $certId
     */
	#[\JMS\Serializer\Annotation\SerializedName('certId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $certId;
    
    /**
     * User-friendly description for the certificate.
     * 
     * @var ?string $description
     */
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $description = null;
    
    /**
     * The expiration date for the certificate.
     * 
     * @var \DateTime $expiration
     */
	#[\JMS\Serializer\Annotation\SerializedName('expiration')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $expiration;
    
    /**
     * A Boolean value that specifies whether or not the certificate is associated with a stored private key. When this value is 'true,' the private key for the certificate is stored. When this value is 'false,' the private key for the certificate is not stored.
     * 
     * @var bool $hasKey
     */
	#[\JMS\Serializer\Annotation\SerializedName('hasKey')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $hasKey;
    
    /**
     * Display name for the certificate.
     * 
     * @var string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
    /**
     * The certificates, in PEM format.
     * 
     * @var string $pemFile
     */
	#[\JMS\Serializer\Annotation\SerializedName('pemFile')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $pemFile;
    
    /**
     * A list of components using the certificate.
     * 
     * @var string $usedBy
     */
	#[\JMS\Serializer\Annotation\SerializedName('usedBy')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $usedBy;
    
	public function __construct()
	{
		$this->certId = "";
		$this->description = null;
		$this->expiration = new \DateTime();
		$this->hasKey = false;
		$this->name = "";
		$this->pemFile = "";
		$this->usedBy = "";
	}
}
