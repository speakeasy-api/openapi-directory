"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class InternationalScheduledPayments:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_international_scheduled_payment_consents_json(self, request: operations.CreateInternationalScheduledPaymentConsentsJSONRequest, security: operations.CreateInternationalScheduledPaymentConsentsJSONSecurity) -> operations.CreateInternationalScheduledPaymentConsentsJSONResponse:
        r"""Create International Scheduled Payment Consents"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/international-scheduled-payment-consents'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "ob_write_international_scheduled_consent5", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateInternationalScheduledPaymentConsentsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteInternationalScheduledConsentResponse6])
                res.ob_write_international_scheduled_consent_response6 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteInternationalScheduledConsentResponse6])
                res.ob_write_international_scheduled_consent_response6 = out
        elif http_res.status_code in [400, 403, 500]:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
        elif http_res.status_code in [401, 404, 405, 406, 415]:
            pass
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            

        return res

    def create_international_scheduled_payment_consents_raw(self, request: operations.CreateInternationalScheduledPaymentConsentsRawRequest, security: operations.CreateInternationalScheduledPaymentConsentsRawSecurity) -> operations.CreateInternationalScheduledPaymentConsentsRawResponse:
        r"""Create International Scheduled Payment Consents"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/international-scheduled-payment-consents'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateInternationalScheduledPaymentConsentsRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteInternationalScheduledConsentResponse6])
                res.ob_write_international_scheduled_consent_response6 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteInternationalScheduledConsentResponse6])
                res.ob_write_international_scheduled_consent_response6 = out
        elif http_res.status_code in [400, 403, 500]:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
        elif http_res.status_code in [401, 404, 405, 406, 415]:
            pass
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            

        return res

    def create_international_scheduled_payments_json(self, request: operations.CreateInternationalScheduledPaymentsJSONRequest, security: operations.CreateInternationalScheduledPaymentsJSONSecurity) -> operations.CreateInternationalScheduledPaymentsJSONResponse:
        r"""Create International Scheduled Payments"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/international-scheduled-payments'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "ob_write_international_scheduled3", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateInternationalScheduledPaymentsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteInternationalScheduledResponse6])
                res.ob_write_international_scheduled_response6 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteInternationalScheduledResponse6])
                res.ob_write_international_scheduled_response6 = out
        elif http_res.status_code in [400, 403, 500]:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
        elif http_res.status_code in [401, 404, 405, 406, 415]:
            pass
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            

        return res

    def create_international_scheduled_payments_raw(self, request: operations.CreateInternationalScheduledPaymentsRawRequest, security: operations.CreateInternationalScheduledPaymentsRawSecurity) -> operations.CreateInternationalScheduledPaymentsRawResponse:
        r"""Create International Scheduled Payments"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/international-scheduled-payments'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateInternationalScheduledPaymentsRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteInternationalScheduledResponse6])
                res.ob_write_international_scheduled_response6 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteInternationalScheduledResponse6])
                res.ob_write_international_scheduled_response6 = out
        elif http_res.status_code in [400, 403, 500]:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
        elif http_res.status_code in [401, 404, 405, 406, 415]:
            pass
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            

        return res

    def get_international_scheduled_payment_consents_consent_id(self, request: operations.GetInternationalScheduledPaymentConsentsConsentIDRequest, security: operations.GetInternationalScheduledPaymentConsentsConsentIDSecurity) -> operations.GetInternationalScheduledPaymentConsentsConsentIDResponse:
        r"""Get International Scheduled Payment Consents"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetInternationalScheduledPaymentConsentsConsentIDRequest, base_url, '/international-scheduled-payment-consents/{ConsentId}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetInternationalScheduledPaymentConsentsConsentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteInternationalScheduledConsentResponse6])
                res.ob_write_international_scheduled_consent_response6 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteInternationalScheduledConsentResponse6])
                res.ob_write_international_scheduled_consent_response6 = out
        elif http_res.status_code in [400, 403, 500]:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
        elif http_res.status_code in [401, 404, 405, 406]:
            pass
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            

        return res

    def get_international_scheduled_payment_consents_consent_id_funds_confirmation(self, request: operations.GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationRequest, security: operations.GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationSecurity) -> operations.GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationResponse:
        r"""Get International Scheduled Payment Consents Funds Confirmation"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationRequest, base_url, '/international-scheduled-payment-consents/{ConsentId}/funds-confirmation', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteFundsConfirmationResponse1])
                res.ob_write_funds_confirmation_response1 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteFundsConfirmationResponse1])
                res.ob_write_funds_confirmation_response1 = out
        elif http_res.status_code in [400, 403, 500]:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
        elif http_res.status_code in [401, 404, 405, 406]:
            pass
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            

        return res

    def get_international_scheduled_payments_international_scheduled_payment_id(self, request: operations.GetInternationalScheduledPaymentsInternationalScheduledPaymentIDRequest, security: operations.GetInternationalScheduledPaymentsInternationalScheduledPaymentIDSecurity) -> operations.GetInternationalScheduledPaymentsInternationalScheduledPaymentIDResponse:
        r"""Get International Scheduled Payments"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetInternationalScheduledPaymentsInternationalScheduledPaymentIDRequest, base_url, '/international-scheduled-payments/{InternationalScheduledPaymentId}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetInternationalScheduledPaymentsInternationalScheduledPaymentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteInternationalScheduledResponse6])
                res.ob_write_international_scheduled_response6 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBWriteInternationalScheduledResponse6])
                res.ob_write_international_scheduled_response6 = out
        elif http_res.status_code in [400, 403, 500]:
            if utils.match_content_type(content_type, 'application/jose+jwe'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OBErrorResponse1])
                res.ob_error_response1 = out
        elif http_res.status_code in [401, 404, 405, 406]:
            pass
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            

        return res

    