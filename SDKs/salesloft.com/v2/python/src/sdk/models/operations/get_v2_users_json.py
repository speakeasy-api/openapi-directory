"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Optional


@dataclasses.dataclass
class GetV2UsersJSONRequest:
    
    active: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'active', 'style': 'form', 'explode': True }})
    r"""Filters users based on active attribute. Defaults to not applied"""  
    group_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'group_id', 'style': 'form', 'explode': False }})
    r"""Filters users by group_id.  An additional value of \\"_is_null\\" can be passed to filter users that are not in a group"""  
    guid: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'guid', 'style': 'form', 'explode': False }})
    r"""Filters list to only include guids"""  
    has_crm_user: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'has_crm_user', 'style': 'form', 'explode': True }})
    r"""Filters users based on if they have a crm user mapped or not."""  
    ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ids', 'style': 'form', 'explode': False }})
    r"""IDs of users to fetch. If a record can't be found, that record won't be returned and your request will be successful"""  
    include_paging_counts: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_paging_counts', 'style': 'form', 'explode': True }})
    r"""Whether to include total_pages and total_count in the metadata. Defaults to false"""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""The current page to fetch users from. Defaults to returning all users"""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""How many users to show per page in the range [1, 100]. Defaults to 25.  Results are only paginated if the page parameter is defined"""  
    role_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'role_id', 'style': 'form', 'explode': False }})
    r"""Filters users by role_id"""  
    search: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search', 'style': 'form', 'explode': True }})
    r"""Space-separated list of keywords used to find case-insensitive substring matches against First Name, Last Name, or Email"""  
    sort_by: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_by', 'style': 'form', 'explode': True }})
    r"""Key to sort on, must be one of: id, email, name, group, role. Defaults to id"""  
    sort_direction: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_direction', 'style': 'form', 'explode': True }})
    r"""Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"""  
    visible_only: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'visible_only', 'style': 'form', 'explode': True }})
    r"""Defaults to true.
    
    When true, only shows users that are actionable based on the team's privacy settings.
    When false, shows all users on the team, even if you can't take action on that user. Deactivated users are also included when false.
    """  
    work_country: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'work_country', 'style': 'form', 'explode': False }})
    r"""Filters users based on assigned work_country."""  
    

@dataclasses.dataclass
class GetV2UsersJSONResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    