// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateInventoryForAnItemApplicationXMLQuantityUnitEnum - The unit of measurement. Example: 'EACH'
type UpdateInventoryForAnItemApplicationXMLQuantityUnitEnum string

const (
	UpdateInventoryForAnItemApplicationXMLQuantityUnitEnumEach UpdateInventoryForAnItemApplicationXMLQuantityUnitEnum = "EACH"
)

func (e UpdateInventoryForAnItemApplicationXMLQuantityUnitEnum) ToPointer() *UpdateInventoryForAnItemApplicationXMLQuantityUnitEnum {
	return &e
}

func (e *UpdateInventoryForAnItemApplicationXMLQuantityUnitEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EACH":
		*e = UpdateInventoryForAnItemApplicationXMLQuantityUnitEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInventoryForAnItemApplicationXMLQuantityUnitEnum: %v", v)
	}
}

// UpdateInventoryForAnItemApplicationXMLQuantity - Quantity that has been ordered by the customers but not yet shipped
type UpdateInventoryForAnItemApplicationXMLQuantity struct {
	// Inventory Count
	Amount float64
	// The unit of measurement. Example: 'EACH'
	Unit UpdateInventoryForAnItemApplicationXMLQuantityUnitEnum
}

type UpdateInventoryForAnItemApplicationXML struct {
	// Quantity that has been ordered by the customers but not yet shipped
	Quantity UpdateInventoryForAnItemApplicationXMLQuantity
	// A seller-provided Product ID. Response will have decoded value.
	Sku string
}

type UpdateInventoryForAnItemRawRequest struct {
	// File fields
	RequestBody []byte `request:"mediaType=application/xml"`
	// A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
	WmConsumerChannelType *string `header:"style=simple,explode=false,name=WM_CONSUMER.CHANNEL.TYPE"`
	// A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
	WmQosCorrelationID string `header:"style=simple,explode=false,name=WM_QOS.CORRELATION_ID"`
	// The access token retrieved in the Token API call
	WmSecAccessToken string `header:"style=simple,explode=false,name=WM_SEC.ACCESS_TOKEN"`
	// Walmart Service Name
	WmSvcName string `header:"style=simple,explode=false,name=WM_SVC.NAME"`
	// The shipNode for which the inventory is to be updated.
	ShipNode *string `queryParam:"style=form,explode=true,name=shipNode"`
	// An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: ':', '/', '?', '#', '[', ']', '@', '!', '$', '&', "'", '(', ')', '*', '+', ',', ';', '=', ‘ ’, '{', '}' as well as '%' itself if it's a part of sku. Make sure to encode space with %20. Other characters don't need to be encoded.
	Sku string `queryParam:"style=form,explode=true,name=sku"`
}

// UpdateInventoryForAnItemRaw200ApplicationXMLQuantityUnitEnum - The unit of measurement. Example: 'EACH'
type UpdateInventoryForAnItemRaw200ApplicationXMLQuantityUnitEnum string

const (
	UpdateInventoryForAnItemRaw200ApplicationXMLQuantityUnitEnumEach UpdateInventoryForAnItemRaw200ApplicationXMLQuantityUnitEnum = "EACH"
)

func (e UpdateInventoryForAnItemRaw200ApplicationXMLQuantityUnitEnum) ToPointer() *UpdateInventoryForAnItemRaw200ApplicationXMLQuantityUnitEnum {
	return &e
}

func (e *UpdateInventoryForAnItemRaw200ApplicationXMLQuantityUnitEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EACH":
		*e = UpdateInventoryForAnItemRaw200ApplicationXMLQuantityUnitEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInventoryForAnItemRaw200ApplicationXMLQuantityUnitEnum: %v", v)
	}
}

// UpdateInventoryForAnItemRaw200ApplicationXMLQuantity - Quantity that has been ordered by the customers but not yet shipped
type UpdateInventoryForAnItemRaw200ApplicationXMLQuantity struct {
	// Inventory Count
	Amount float64
	// The unit of measurement. Example: 'EACH'
	Unit UpdateInventoryForAnItemRaw200ApplicationXMLQuantityUnitEnum
}

// UpdateInventoryForAnItemRaw200ApplicationXML - Successful Operation
type UpdateInventoryForAnItemRaw200ApplicationXML struct {
	// Quantity that has been ordered by the customers but not yet shipped
	Quantity UpdateInventoryForAnItemRaw200ApplicationXMLQuantity
	// A seller-provided Product ID. Response will have decoded value.
	Sku string
}

// UpdateInventoryForAnItemRaw200ApplicationJSONQuantityUnitEnum - The unit of measurement. Example: 'EACH'
type UpdateInventoryForAnItemRaw200ApplicationJSONQuantityUnitEnum string

const (
	UpdateInventoryForAnItemRaw200ApplicationJSONQuantityUnitEnumEach UpdateInventoryForAnItemRaw200ApplicationJSONQuantityUnitEnum = "EACH"
)

func (e UpdateInventoryForAnItemRaw200ApplicationJSONQuantityUnitEnum) ToPointer() *UpdateInventoryForAnItemRaw200ApplicationJSONQuantityUnitEnum {
	return &e
}

func (e *UpdateInventoryForAnItemRaw200ApplicationJSONQuantityUnitEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EACH":
		*e = UpdateInventoryForAnItemRaw200ApplicationJSONQuantityUnitEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInventoryForAnItemRaw200ApplicationJSONQuantityUnitEnum: %v", v)
	}
}

// UpdateInventoryForAnItemRaw200ApplicationJSONQuantity - Quantity that has been ordered by the customers but not yet shipped
type UpdateInventoryForAnItemRaw200ApplicationJSONQuantity struct {
	// Inventory Count
	Amount float64 `json:"amount"`
	// The unit of measurement. Example: 'EACH'
	Unit UpdateInventoryForAnItemRaw200ApplicationJSONQuantityUnitEnum `json:"unit"`
}

// UpdateInventoryForAnItemRaw200ApplicationJSON - Successful Operation
type UpdateInventoryForAnItemRaw200ApplicationJSON struct {
	// Quantity that has been ordered by the customers but not yet shipped
	Quantity UpdateInventoryForAnItemRaw200ApplicationJSONQuantity `json:"quantity"`
	// A seller-provided Product ID. Response will have decoded value.
	Sku string `json:"sku"`
}

type UpdateInventoryForAnItemRawResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful Operation
	UpdateInventoryForAnItemRaw200ApplicationJSONObject *UpdateInventoryForAnItemRaw200ApplicationJSON
}
