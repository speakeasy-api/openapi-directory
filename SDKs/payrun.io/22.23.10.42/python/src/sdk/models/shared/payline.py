"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class PayLinePayLinePayCodeTypeEnum(str, Enum):
    r"""The pay lines' pay code type"""
    NOT_SET = 'NotSet'
    PAYMENT = 'Payment'
    DEDUCTION = 'Deduction'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PayLinePayLine:
    
    calculator: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Calculator'), 'exclude': lambda f: f is None }})
    r"""The pay lines' calculator"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})
    r"""The pay lines' description"""  
    generated: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Generated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The pay lines' generated"""  
    pay_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayCode'), 'exclude': lambda f: f is None }})
    r"""The pay lines' pay code"""  
    pay_code_type: Optional[PayLinePayLinePayCodeTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayCodeType'), 'exclude': lambda f: f is None }})
    r"""The pay lines' pay code type"""  
    payment_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The pay lines' payment date"""  
    pay_run_sequence: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayRunSequence'), 'exclude': lambda f: f is None }})
    r"""The pay lines' pay run sequence"""  
    tax_period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxPeriod'), 'exclude': lambda f: f is None }})
    r"""The pay lines' tax period"""  
    tax_year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxYear'), 'exclude': lambda f: f is None }})
    r"""The pay lines' tax year"""  
    value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Value'), 'exclude': lambda f: f is None }})
    r"""The pay lines' value"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PayLine:
    r"""The pay line object."""
    
    pay_line: Optional[PayLinePayLine] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayLine'), 'exclude': lambda f: f is None }})  
    