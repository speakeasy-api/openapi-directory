/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class UpdateNetworkWirelessSsidSplashSettingsRequestBody {
    /**
     * Whether or not to allow simultaneous logins from different devices.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowSimultaneousLogins")
    public Boolean allowSimultaneousLogins;

    public UpdateNetworkWirelessSsidSplashSettingsRequestBody withAllowSimultaneousLogins(Boolean allowSimultaneousLogins) {
        this.allowSimultaneousLogins = allowSimultaneousLogins;
        return this;
    }
    
    /**
     * Details associated with billing splash.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing")
    public UpdateNetworkWirelessSsidSplashSettingsRequestBodyBilling billing;

    public UpdateNetworkWirelessSsidSplashSettingsRequestBody withBilling(UpdateNetworkWirelessSsidSplashSettingsRequestBodyBilling billing) {
        this.billing = billing;
        return this;
    }
    
    /**
     * How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blockAllTrafficBeforeSignOn")
    public Boolean blockAllTrafficBeforeSignOn;

    public UpdateNetworkWirelessSsidSplashSettingsRequestBody withBlockAllTrafficBeforeSignOn(Boolean blockAllTrafficBeforeSignOn) {
        this.blockAllTrafficBeforeSignOn = blockAllTrafficBeforeSignOn;
        return this;
    }
    
    /**
     * How login attempts should be handled when the controller is unreachable. Can be either 'open', 'restricted', or 'default'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("controllerDisconnectionBehavior")
    public UpdateNetworkWirelessSsidSplashSettingsRequestBodyControllerDisconnectionBehaviorEnum controllerDisconnectionBehavior;

    public UpdateNetworkWirelessSsidSplashSettingsRequestBody withControllerDisconnectionBehavior(UpdateNetworkWirelessSsidSplashSettingsRequestBodyControllerDisconnectionBehaviorEnum controllerDisconnectionBehavior) {
        this.controllerDisconnectionBehavior = controllerDisconnectionBehavior;
        return this;
    }
    
    /**
     * Details associated with guest sponsored splash.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("guestSponsorship")
    public UpdateNetworkWirelessSsidSplashSettingsRequestBodyGuestSponsorship guestSponsorship;

    public UpdateNetworkWirelessSsidSplashSettingsRequestBody withGuestSponsorship(UpdateNetworkWirelessSsidSplashSettingsRequestBodyGuestSponsorship guestSponsorship) {
        this.guestSponsorship = guestSponsorship;
        return this;
    }
    
    /**
     * The custom redirect URL where the users will go after the splash page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirectUrl")
    public String redirectUrl;

    public UpdateNetworkWirelessSsidSplashSettingsRequestBody withRedirectUrl(String redirectUrl) {
        this.redirectUrl = redirectUrl;
        return this;
    }
    
    /**
     * Systems Manager sentry enrollment splash settings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sentryEnrollment")
    public UpdateNetworkWirelessSsidSplashSettingsRequestBodySentryEnrollment sentryEnrollment;

    public UpdateNetworkWirelessSsidSplashSettingsRequestBody withSentryEnrollment(UpdateNetworkWirelessSsidSplashSettingsRequestBodySentryEnrollment sentryEnrollment) {
        this.sentryEnrollment = sentryEnrollment;
        return this;
    }
    
    /**
     * The image used in the splash page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("splashImage")
    public UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashImage splashImage;

    public UpdateNetworkWirelessSsidSplashSettingsRequestBody withSplashImage(UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashImage splashImage) {
        this.splashImage = splashImage;
        return this;
    }
    
    /**
     * The logo used in the splash page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("splashLogo")
    public UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashLogo splashLogo;

    public UpdateNetworkWirelessSsidSplashSettingsRequestBody withSplashLogo(UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashLogo splashLogo) {
        this.splashLogo = splashLogo;
        return this;
    }
    
    /**
     * The prepaid front image used in the splash page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("splashPrepaidFront")
    public UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashPrepaidFront splashPrepaidFront;

    public UpdateNetworkWirelessSsidSplashSettingsRequestBody withSplashPrepaidFront(UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashPrepaidFront splashPrepaidFront) {
        this.splashPrepaidFront = splashPrepaidFront;
        return this;
    }
    
    /**
     * Splash timeout in minutes. This will determine how often users will see the splash page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("splashTimeout")
    public Long splashTimeout;

    public UpdateNetworkWirelessSsidSplashSettingsRequestBody withSplashTimeout(Long splashTimeout) {
        this.splashTimeout = splashTimeout;
        return this;
    }
    
    /**
     * [optional] The custom splash URL of the click-through splash page. Note that the URL can be configured without necessarily being used. In order to enable the custom URL, see 'useSplashUrl'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("splashUrl")
    public String splashUrl;

    public UpdateNetworkWirelessSsidSplashSettingsRequestBody withSplashUrl(String splashUrl) {
        this.splashUrl = splashUrl;
        return this;
    }
    
    /**
     * The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page. A custom redirect URL must be set if this is true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("useRedirectUrl")
    public Boolean useRedirectUrl;

    public UpdateNetworkWirelessSsidSplashSettingsRequestBody withUseRedirectUrl(Boolean useRedirectUrl) {
        this.useRedirectUrl = useRedirectUrl;
        return this;
    }
    
    /**
     * [optional] Boolean indicating whether the users will be redirected to the custom splash url. A custom splash URL must be set if this is true. Note that depending on your SSID's access control settings, it may not be possible to use the custom splash URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("useSplashUrl")
    public Boolean useSplashUrl;

    public UpdateNetworkWirelessSsidSplashSettingsRequestBody withUseSplashUrl(Boolean useSplashUrl) {
        this.useSplashUrl = useSplashUrl;
        return this;
    }
    
    /**
     * The welcome message for the users on the splash page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("welcomeMessage")
    public String welcomeMessage;

    public UpdateNetworkWirelessSsidSplashSettingsRequestBody withWelcomeMessage(String welcomeMessage) {
        this.welcomeMessage = welcomeMessage;
        return this;
    }
    
    public UpdateNetworkWirelessSsidSplashSettingsRequestBody(){}
}
