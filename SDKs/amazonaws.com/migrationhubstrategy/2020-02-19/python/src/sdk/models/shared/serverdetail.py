"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import antipatternreportstatus_enum as shared_antipatternreportstatus_enum
from ..shared import antipatternseveritysummary as shared_antipatternseveritysummary
from ..shared import recommendationset as shared_recommendationset
from ..shared import runtimeassessmentstatus_enum as shared_runtimeassessmentstatus_enum
from ..shared import s3object as shared_s3object
from ..shared import servererror as shared_servererror
from ..shared import strategysummary as shared_strategysummary
from ..shared import systeminfo as shared_systeminfo
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ServerDetail:
    r"""Detailed information about a server."""
    
    antipattern_report_s3_object: Optional[shared_s3object.S3Object] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('antipatternReportS3Object'), 'exclude': lambda f: f is None }})  
    antipattern_report_status: Optional[shared_antipatternreportstatus_enum.AntipatternReportStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('antipatternReportStatus'), 'exclude': lambda f: f is None }})  
    antipattern_report_status_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('antipatternReportStatusMessage'), 'exclude': lambda f: f is None }})  
    application_component_strategy_summary: Optional[list[shared_strategysummary.StrategySummary]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applicationComponentStrategySummary'), 'exclude': lambda f: f is None }})  
    data_collection_status: Optional[shared_runtimeassessmentstatus_enum.RunTimeAssessmentStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataCollectionStatus'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    last_analyzed_timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastAnalyzedTimestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    list_antipattern_severity_summary: Optional[list[shared_antipatternseveritysummary.AntipatternSeveritySummary]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listAntipatternSeveritySummary'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    recommendation_set: Optional[shared_recommendationset.RecommendationSet] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recommendationSet'), 'exclude': lambda f: f is None }})  
    server_error: Optional[shared_servererror.ServerError] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serverError'), 'exclude': lambda f: f is None }})  
    server_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serverType'), 'exclude': lambda f: f is None }})  
    status_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusMessage'), 'exclude': lambda f: f is None }})  
    system_info: Optional[shared_systeminfo.SystemInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('systemInfo'), 'exclude': lambda f: f is None }})  
    