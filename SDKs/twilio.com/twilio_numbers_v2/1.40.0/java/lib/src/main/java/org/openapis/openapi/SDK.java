/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://numbers.twilio.com",
	};
    /**
	 * CREATE_BUNDLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_BUNDLE_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * CREATE_BUNDLE_COPY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_BUNDLE_COPY_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * CREATE_END_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_END_USER_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * CREATE_EVALUATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_EVALUATION_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * CREATE_ITEM_ASSIGNMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_ITEM_ASSIGNMENT_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * CREATE_REPLACE_ITEMS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_REPLACE_ITEMS_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * CREATE_SUPPORTING_DOCUMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SUPPORTING_DOCUMENT_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * DELETE_BUNDLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_BUNDLE_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * DELETE_END_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_END_USER_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * DELETE_ITEM_ASSIGNMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_ITEM_ASSIGNMENT_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * DELETE_SUPPORTING_DOCUMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SUPPORTING_DOCUMENT_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * FETCH_BUNDLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_BUNDLE_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * FETCH_END_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_END_USER_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * FETCH_END_USER_TYPE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_END_USER_TYPE_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * FETCH_EVALUATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_EVALUATION_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * FETCH_ITEM_ASSIGNMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ITEM_ASSIGNMENT_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * FETCH_REGULATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_REGULATION_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * FETCH_SUPPORTING_DOCUMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SUPPORTING_DOCUMENT_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * FETCH_SUPPORTING_DOCUMENT_TYPE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SUPPORTING_DOCUMENT_TYPE_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * LIST_BUNDLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_BUNDLE_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * LIST_BUNDLE_COPY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_BUNDLE_COPY_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * LIST_END_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_END_USER_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * LIST_END_USER_TYPE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_END_USER_TYPE_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * LIST_EVALUATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_EVALUATION_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * LIST_ITEM_ASSIGNMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_ITEM_ASSIGNMENT_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * LIST_REGULATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_REGULATION_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * LIST_SUPPORTING_DOCUMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SUPPORTING_DOCUMENT_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * LIST_SUPPORTING_DOCUMENT_TYPE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SUPPORTING_DOCUMENT_TYPE_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * UPDATE_BUNDLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_BUNDLE_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * UPDATE_END_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_END_USER_SERVERS = {
        "https://numbers.twilio.com",
    };
	
    /**
	 * UPDATE_SUPPORTING_DOCUMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SUPPORTING_DOCUMENT_SERVERS = {
        "https://numbers.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
	}

    /**
     * Create a new Bundle.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateBundleResponse createBundle(org.openapis.openapi.models.operations.CreateBundleCreateBundleRequest request, org.openapis.openapi.models.operations.CreateBundleSecurity security) throws Exception {
        return this.createBundle(request, security, null);
    }

    /**
     * Create a new Bundle.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateBundleResponse createBundle(org.openapis.openapi.models.operations.CreateBundleCreateBundleRequest request, org.openapis.openapi.models.operations.CreateBundleSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_BUNDLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/RegulatoryCompliance/Bundles");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateBundleResponse res = new org.openapis.openapi.models.operations.CreateBundleResponse() {{
            numbersV2RegulatoryComplianceBundle = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceBundle out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceBundle.class);
                res.numbersV2RegulatoryComplianceBundle = out;
            }
        }

        return res;
    }

    /**
     * Creates a new copy of a Bundle. It will internally create copies of all the bundle items (identities and documents) of the original bundle
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateBundleCopyResponse createBundleCopy(org.openapis.openapi.models.operations.CreateBundleCopyRequest request, org.openapis.openapi.models.operations.CreateBundleCopySecurity security) throws Exception {
        return this.createBundleCopy(request, security, null);
    }

    /**
     * Creates a new copy of a Bundle. It will internally create copies of all the bundle items (identities and documents) of the original bundle
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateBundleCopyResponse createBundleCopy(org.openapis.openapi.models.operations.CreateBundleCopyRequest request, org.openapis.openapi.models.operations.CreateBundleCopySecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_BUNDLE_COPY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateBundleCopyRequest.class, baseUrl, "/v2/RegulatoryCompliance/Bundles/{BundleSid}/Copies", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateBundleCopyResponse res = new org.openapis.openapi.models.operations.CreateBundleCopyResponse() {{
            numbersV2RegulatoryComplianceBundleBundleCopy = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceBundleBundleCopy out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceBundleBundleCopy.class);
                res.numbersV2RegulatoryComplianceBundleBundleCopy = out;
            }
        }

        return res;
    }

    /**
     * Create a new End User.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateEndUserResponse createEndUser(org.openapis.openapi.models.operations.CreateEndUserCreateEndUserRequest request, org.openapis.openapi.models.operations.CreateEndUserSecurity security) throws Exception {
        return this.createEndUser(request, security, null);
    }

    /**
     * Create a new End User.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateEndUserResponse createEndUser(org.openapis.openapi.models.operations.CreateEndUserCreateEndUserRequest request, org.openapis.openapi.models.operations.CreateEndUserSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_END_USER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/RegulatoryCompliance/EndUsers");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateEndUserResponse res = new org.openapis.openapi.models.operations.CreateEndUserResponse() {{
            numbersV2RegulatoryComplianceEndUser = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceEndUser out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceEndUser.class);
                res.numbersV2RegulatoryComplianceEndUser = out;
            }
        }

        return res;
    }

    /**
     * Creates an evaluation for a bundle
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateEvaluationResponse createEvaluation(org.openapis.openapi.models.operations.CreateEvaluationRequest request, org.openapis.openapi.models.operations.CreateEvaluationSecurity security) throws Exception {
        return this.createEvaluation(request, security, null);
    }

    /**
     * Creates an evaluation for a bundle
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateEvaluationResponse createEvaluation(org.openapis.openapi.models.operations.CreateEvaluationRequest request, org.openapis.openapi.models.operations.CreateEvaluationSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_EVALUATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateEvaluationRequest.class, baseUrl, "/v2/RegulatoryCompliance/Bundles/{BundleSid}/Evaluations", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateEvaluationResponse res = new org.openapis.openapi.models.operations.CreateEvaluationResponse() {{
            numbersV2RegulatoryComplianceBundleEvaluation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceBundleEvaluation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceBundleEvaluation.class);
                res.numbersV2RegulatoryComplianceBundleEvaluation = out;
            }
        }

        return res;
    }

    /**
     * Create a new Assigned Item.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateItemAssignmentResponse createItemAssignment(org.openapis.openapi.models.operations.CreateItemAssignmentRequest request, org.openapis.openapi.models.operations.CreateItemAssignmentSecurity security) throws Exception {
        return this.createItemAssignment(request, security, null);
    }

    /**
     * Create a new Assigned Item.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateItemAssignmentResponse createItemAssignment(org.openapis.openapi.models.operations.CreateItemAssignmentRequest request, org.openapis.openapi.models.operations.CreateItemAssignmentSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_ITEM_ASSIGNMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateItemAssignmentRequest.class, baseUrl, "/v2/RegulatoryCompliance/Bundles/{BundleSid}/ItemAssignments", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateItemAssignmentResponse res = new org.openapis.openapi.models.operations.CreateItemAssignmentResponse() {{
            numbersV2RegulatoryComplianceBundleItemAssignment = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceBundleItemAssignment out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceBundleItemAssignment.class);
                res.numbersV2RegulatoryComplianceBundleItemAssignment = out;
            }
        }

        return res;
    }

    /**
     * Replaces all bundle items in the target bundle (specified in the path) with all the bundle items of the source bundle (specified by the from_bundle_sid body param)
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateReplaceItemsResponse createReplaceItems(org.openapis.openapi.models.operations.CreateReplaceItemsRequest request, org.openapis.openapi.models.operations.CreateReplaceItemsSecurity security) throws Exception {
        return this.createReplaceItems(request, security, null);
    }

    /**
     * Replaces all bundle items in the target bundle (specified in the path) with all the bundle items of the source bundle (specified by the from_bundle_sid body param)
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateReplaceItemsResponse createReplaceItems(org.openapis.openapi.models.operations.CreateReplaceItemsRequest request, org.openapis.openapi.models.operations.CreateReplaceItemsSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_REPLACE_ITEMS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateReplaceItemsRequest.class, baseUrl, "/v2/RegulatoryCompliance/Bundles/{BundleSid}/ReplaceItems", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateReplaceItemsResponse res = new org.openapis.openapi.models.operations.CreateReplaceItemsResponse() {{
            numbersV2RegulatoryComplianceBundleReplaceItems = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceBundleReplaceItems out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceBundleReplaceItems.class);
                res.numbersV2RegulatoryComplianceBundleReplaceItems = out;
            }
        }

        return res;
    }

    /**
     * Create a new Supporting Document.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateSupportingDocumentResponse createSupportingDocument(org.openapis.openapi.models.operations.CreateSupportingDocumentCreateSupportingDocumentRequest request, org.openapis.openapi.models.operations.CreateSupportingDocumentSecurity security) throws Exception {
        return this.createSupportingDocument(request, security, null);
    }

    /**
     * Create a new Supporting Document.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateSupportingDocumentResponse createSupportingDocument(org.openapis.openapi.models.operations.CreateSupportingDocumentCreateSupportingDocumentRequest request, org.openapis.openapi.models.operations.CreateSupportingDocumentSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_SUPPORTING_DOCUMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/RegulatoryCompliance/SupportingDocuments");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSupportingDocumentResponse res = new org.openapis.openapi.models.operations.CreateSupportingDocumentResponse() {{
            numbersV2RegulatoryComplianceSupportingDocument = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceSupportingDocument out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceSupportingDocument.class);
                res.numbersV2RegulatoryComplianceSupportingDocument = out;
            }
        }

        return res;
    }

    /**
     * Delete a specific Bundle.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteBundleResponse deleteBundle(org.openapis.openapi.models.operations.DeleteBundleRequest request, org.openapis.openapi.models.operations.DeleteBundleSecurity security) throws Exception {
        return this.deleteBundle(request, security, null);
    }

    /**
     * Delete a specific Bundle.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteBundleResponse deleteBundle(org.openapis.openapi.models.operations.DeleteBundleRequest request, org.openapis.openapi.models.operations.DeleteBundleSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_BUNDLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteBundleRequest.class, baseUrl, "/v2/RegulatoryCompliance/Bundles/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteBundleResponse res = new org.openapis.openapi.models.operations.DeleteBundleResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific End User.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteEndUserResponse deleteEndUser(org.openapis.openapi.models.operations.DeleteEndUserRequest request, org.openapis.openapi.models.operations.DeleteEndUserSecurity security) throws Exception {
        return this.deleteEndUser(request, security, null);
    }

    /**
     * Delete a specific End User.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteEndUserResponse deleteEndUser(org.openapis.openapi.models.operations.DeleteEndUserRequest request, org.openapis.openapi.models.operations.DeleteEndUserSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_END_USER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteEndUserRequest.class, baseUrl, "/v2/RegulatoryCompliance/EndUsers/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteEndUserResponse res = new org.openapis.openapi.models.operations.DeleteEndUserResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove an Assignment Item Instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteItemAssignmentResponse deleteItemAssignment(org.openapis.openapi.models.operations.DeleteItemAssignmentRequest request, org.openapis.openapi.models.operations.DeleteItemAssignmentSecurity security) throws Exception {
        return this.deleteItemAssignment(request, security, null);
    }

    /**
     * Remove an Assignment Item Instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteItemAssignmentResponse deleteItemAssignment(org.openapis.openapi.models.operations.DeleteItemAssignmentRequest request, org.openapis.openapi.models.operations.DeleteItemAssignmentSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_ITEM_ASSIGNMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteItemAssignmentRequest.class, baseUrl, "/v2/RegulatoryCompliance/Bundles/{BundleSid}/ItemAssignments/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteItemAssignmentResponse res = new org.openapis.openapi.models.operations.DeleteItemAssignmentResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific Supporting Document.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSupportingDocumentResponse deleteSupportingDocument(org.openapis.openapi.models.operations.DeleteSupportingDocumentRequest request, org.openapis.openapi.models.operations.DeleteSupportingDocumentSecurity security) throws Exception {
        return this.deleteSupportingDocument(request, security, null);
    }

    /**
     * Delete a specific Supporting Document.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSupportingDocumentResponse deleteSupportingDocument(org.openapis.openapi.models.operations.DeleteSupportingDocumentRequest request, org.openapis.openapi.models.operations.DeleteSupportingDocumentSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SUPPORTING_DOCUMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSupportingDocumentRequest.class, baseUrl, "/v2/RegulatoryCompliance/SupportingDocuments/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSupportingDocumentResponse res = new org.openapis.openapi.models.operations.DeleteSupportingDocumentResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Fetch a specific Bundle instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchBundleResponse fetchBundle(org.openapis.openapi.models.operations.FetchBundleRequest request, org.openapis.openapi.models.operations.FetchBundleSecurity security) throws Exception {
        return this.fetchBundle(request, security, null);
    }

    /**
     * Fetch a specific Bundle instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchBundleResponse fetchBundle(org.openapis.openapi.models.operations.FetchBundleRequest request, org.openapis.openapi.models.operations.FetchBundleSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_BUNDLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchBundleRequest.class, baseUrl, "/v2/RegulatoryCompliance/Bundles/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchBundleResponse res = new org.openapis.openapi.models.operations.FetchBundleResponse() {{
            numbersV2RegulatoryComplianceBundle = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceBundle out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceBundle.class);
                res.numbersV2RegulatoryComplianceBundle = out;
            }
        }

        return res;
    }

    /**
     * Fetch specific End User Instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchEndUserResponse fetchEndUser(org.openapis.openapi.models.operations.FetchEndUserRequest request, org.openapis.openapi.models.operations.FetchEndUserSecurity security) throws Exception {
        return this.fetchEndUser(request, security, null);
    }

    /**
     * Fetch specific End User Instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchEndUserResponse fetchEndUser(org.openapis.openapi.models.operations.FetchEndUserRequest request, org.openapis.openapi.models.operations.FetchEndUserSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_END_USER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchEndUserRequest.class, baseUrl, "/v2/RegulatoryCompliance/EndUsers/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchEndUserResponse res = new org.openapis.openapi.models.operations.FetchEndUserResponse() {{
            numbersV2RegulatoryComplianceEndUser = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceEndUser out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceEndUser.class);
                res.numbersV2RegulatoryComplianceEndUser = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific End-User Type Instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchEndUserTypeResponse fetchEndUserType(org.openapis.openapi.models.operations.FetchEndUserTypeRequest request, org.openapis.openapi.models.operations.FetchEndUserTypeSecurity security) throws Exception {
        return this.fetchEndUserType(request, security, null);
    }

    /**
     * Fetch a specific End-User Type Instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchEndUserTypeResponse fetchEndUserType(org.openapis.openapi.models.operations.FetchEndUserTypeRequest request, org.openapis.openapi.models.operations.FetchEndUserTypeSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_END_USER_TYPE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchEndUserTypeRequest.class, baseUrl, "/v2/RegulatoryCompliance/EndUserTypes/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchEndUserTypeResponse res = new org.openapis.openapi.models.operations.FetchEndUserTypeResponse() {{
            numbersV2RegulatoryComplianceEndUserType = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceEndUserType out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceEndUserType.class);
                res.numbersV2RegulatoryComplianceEndUserType = out;
            }
        }

        return res;
    }

    /**
     * Fetch specific Evaluation Instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchEvaluationResponse fetchEvaluation(org.openapis.openapi.models.operations.FetchEvaluationRequest request, org.openapis.openapi.models.operations.FetchEvaluationSecurity security) throws Exception {
        return this.fetchEvaluation(request, security, null);
    }

    /**
     * Fetch specific Evaluation Instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchEvaluationResponse fetchEvaluation(org.openapis.openapi.models.operations.FetchEvaluationRequest request, org.openapis.openapi.models.operations.FetchEvaluationSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_EVALUATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchEvaluationRequest.class, baseUrl, "/v2/RegulatoryCompliance/Bundles/{BundleSid}/Evaluations/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchEvaluationResponse res = new org.openapis.openapi.models.operations.FetchEvaluationResponse() {{
            numbersV2RegulatoryComplianceBundleEvaluation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceBundleEvaluation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceBundleEvaluation.class);
                res.numbersV2RegulatoryComplianceBundleEvaluation = out;
            }
        }

        return res;
    }

    /**
     * Fetch specific Assigned Item Instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchItemAssignmentResponse fetchItemAssignment(org.openapis.openapi.models.operations.FetchItemAssignmentRequest request, org.openapis.openapi.models.operations.FetchItemAssignmentSecurity security) throws Exception {
        return this.fetchItemAssignment(request, security, null);
    }

    /**
     * Fetch specific Assigned Item Instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchItemAssignmentResponse fetchItemAssignment(org.openapis.openapi.models.operations.FetchItemAssignmentRequest request, org.openapis.openapi.models.operations.FetchItemAssignmentSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_ITEM_ASSIGNMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchItemAssignmentRequest.class, baseUrl, "/v2/RegulatoryCompliance/Bundles/{BundleSid}/ItemAssignments/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchItemAssignmentResponse res = new org.openapis.openapi.models.operations.FetchItemAssignmentResponse() {{
            numbersV2RegulatoryComplianceBundleItemAssignment = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceBundleItemAssignment out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceBundleItemAssignment.class);
                res.numbersV2RegulatoryComplianceBundleItemAssignment = out;
            }
        }

        return res;
    }

    /**
     * Fetch specific Regulation Instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchRegulationResponse fetchRegulation(org.openapis.openapi.models.operations.FetchRegulationRequest request, org.openapis.openapi.models.operations.FetchRegulationSecurity security) throws Exception {
        return this.fetchRegulation(request, security, null);
    }

    /**
     * Fetch specific Regulation Instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchRegulationResponse fetchRegulation(org.openapis.openapi.models.operations.FetchRegulationRequest request, org.openapis.openapi.models.operations.FetchRegulationSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_REGULATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchRegulationRequest.class, baseUrl, "/v2/RegulatoryCompliance/Regulations/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchRegulationResponse res = new org.openapis.openapi.models.operations.FetchRegulationResponse() {{
            numbersV2RegulatoryComplianceRegulation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceRegulation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceRegulation.class);
                res.numbersV2RegulatoryComplianceRegulation = out;
            }
        }

        return res;
    }

    /**
     * Fetch specific Supporting Document Instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSupportingDocumentResponse fetchSupportingDocument(org.openapis.openapi.models.operations.FetchSupportingDocumentRequest request, org.openapis.openapi.models.operations.FetchSupportingDocumentSecurity security) throws Exception {
        return this.fetchSupportingDocument(request, security, null);
    }

    /**
     * Fetch specific Supporting Document Instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSupportingDocumentResponse fetchSupportingDocument(org.openapis.openapi.models.operations.FetchSupportingDocumentRequest request, org.openapis.openapi.models.operations.FetchSupportingDocumentSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SUPPORTING_DOCUMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSupportingDocumentRequest.class, baseUrl, "/v2/RegulatoryCompliance/SupportingDocuments/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSupportingDocumentResponse res = new org.openapis.openapi.models.operations.FetchSupportingDocumentResponse() {{
            numbersV2RegulatoryComplianceSupportingDocument = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceSupportingDocument out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceSupportingDocument.class);
                res.numbersV2RegulatoryComplianceSupportingDocument = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific Supporting Document Type Instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSupportingDocumentTypeResponse fetchSupportingDocumentType(org.openapis.openapi.models.operations.FetchSupportingDocumentTypeRequest request, org.openapis.openapi.models.operations.FetchSupportingDocumentTypeSecurity security) throws Exception {
        return this.fetchSupportingDocumentType(request, security, null);
    }

    /**
     * Fetch a specific Supporting Document Type Instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSupportingDocumentTypeResponse fetchSupportingDocumentType(org.openapis.openapi.models.operations.FetchSupportingDocumentTypeRequest request, org.openapis.openapi.models.operations.FetchSupportingDocumentTypeSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SUPPORTING_DOCUMENT_TYPE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSupportingDocumentTypeRequest.class, baseUrl, "/v2/RegulatoryCompliance/SupportingDocumentTypes/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSupportingDocumentTypeResponse res = new org.openapis.openapi.models.operations.FetchSupportingDocumentTypeResponse() {{
            numbersV2RegulatoryComplianceSupportingDocumentType = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceSupportingDocumentType out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceSupportingDocumentType.class);
                res.numbersV2RegulatoryComplianceSupportingDocumentType = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Bundles for an account.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListBundleResponse listBundle(org.openapis.openapi.models.operations.ListBundleRequest request, org.openapis.openapi.models.operations.ListBundleSecurity security) throws Exception {
        return this.listBundle(request, security, null);
    }

    /**
     * Retrieve a list of all Bundles for an account.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListBundleResponse listBundle(org.openapis.openapi.models.operations.ListBundleRequest request, org.openapis.openapi.models.operations.ListBundleSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_BUNDLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/RegulatoryCompliance/Bundles");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListBundleRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListBundleResponse res = new org.openapis.openapi.models.operations.ListBundleResponse() {{
            listBundleResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListBundleListBundleResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListBundleListBundleResponse.class);
                res.listBundleResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Bundles Copies for a Bundle.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListBundleCopyResponse listBundleCopy(org.openapis.openapi.models.operations.ListBundleCopyRequest request, org.openapis.openapi.models.operations.ListBundleCopySecurity security) throws Exception {
        return this.listBundleCopy(request, security, null);
    }

    /**
     * Retrieve a list of all Bundles Copies for a Bundle.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListBundleCopyResponse listBundleCopy(org.openapis.openapi.models.operations.ListBundleCopyRequest request, org.openapis.openapi.models.operations.ListBundleCopySecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_BUNDLE_COPY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListBundleCopyRequest.class, baseUrl, "/v2/RegulatoryCompliance/Bundles/{BundleSid}/Copies", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListBundleCopyRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListBundleCopyResponse res = new org.openapis.openapi.models.operations.ListBundleCopyResponse() {{
            listBundleCopyResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListBundleCopyListBundleCopyResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListBundleCopyListBundleCopyResponse.class);
                res.listBundleCopyResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all End User for an account.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListEndUserResponse listEndUser(org.openapis.openapi.models.operations.ListEndUserRequest request, org.openapis.openapi.models.operations.ListEndUserSecurity security) throws Exception {
        return this.listEndUser(request, security, null);
    }

    /**
     * Retrieve a list of all End User for an account.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListEndUserResponse listEndUser(org.openapis.openapi.models.operations.ListEndUserRequest request, org.openapis.openapi.models.operations.ListEndUserSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_END_USER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/RegulatoryCompliance/EndUsers");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListEndUserRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListEndUserResponse res = new org.openapis.openapi.models.operations.ListEndUserResponse() {{
            listEndUserResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListEndUserListEndUserResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListEndUserListEndUserResponse.class);
                res.listEndUserResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all End-User Types.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListEndUserTypeResponse listEndUserType(org.openapis.openapi.models.operations.ListEndUserTypeRequest request, org.openapis.openapi.models.operations.ListEndUserTypeSecurity security) throws Exception {
        return this.listEndUserType(request, security, null);
    }

    /**
     * Retrieve a list of all End-User Types.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListEndUserTypeResponse listEndUserType(org.openapis.openapi.models.operations.ListEndUserTypeRequest request, org.openapis.openapi.models.operations.ListEndUserTypeSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_END_USER_TYPE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/RegulatoryCompliance/EndUserTypes");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListEndUserTypeRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListEndUserTypeResponse res = new org.openapis.openapi.models.operations.ListEndUserTypeResponse() {{
            listEndUserTypeResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListEndUserTypeListEndUserTypeResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListEndUserTypeListEndUserTypeResponse.class);
                res.listEndUserTypeResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of Evaluations associated to the Bundle resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListEvaluationResponse listEvaluation(org.openapis.openapi.models.operations.ListEvaluationRequest request, org.openapis.openapi.models.operations.ListEvaluationSecurity security) throws Exception {
        return this.listEvaluation(request, security, null);
    }

    /**
     * Retrieve a list of Evaluations associated to the Bundle resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListEvaluationResponse listEvaluation(org.openapis.openapi.models.operations.ListEvaluationRequest request, org.openapis.openapi.models.operations.ListEvaluationSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_EVALUATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListEvaluationRequest.class, baseUrl, "/v2/RegulatoryCompliance/Bundles/{BundleSid}/Evaluations", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListEvaluationRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListEvaluationResponse res = new org.openapis.openapi.models.operations.ListEvaluationResponse() {{
            listEvaluationResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListEvaluationListEvaluationResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListEvaluationListEvaluationResponse.class);
                res.listEvaluationResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Assigned Items for an account.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListItemAssignmentResponse listItemAssignment(org.openapis.openapi.models.operations.ListItemAssignmentRequest request, org.openapis.openapi.models.operations.ListItemAssignmentSecurity security) throws Exception {
        return this.listItemAssignment(request, security, null);
    }

    /**
     * Retrieve a list of all Assigned Items for an account.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListItemAssignmentResponse listItemAssignment(org.openapis.openapi.models.operations.ListItemAssignmentRequest request, org.openapis.openapi.models.operations.ListItemAssignmentSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_ITEM_ASSIGNMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListItemAssignmentRequest.class, baseUrl, "/v2/RegulatoryCompliance/Bundles/{BundleSid}/ItemAssignments", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListItemAssignmentRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListItemAssignmentResponse res = new org.openapis.openapi.models.operations.ListItemAssignmentResponse() {{
            listItemAssignmentResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListItemAssignmentListItemAssignmentResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListItemAssignmentListItemAssignmentResponse.class);
                res.listItemAssignmentResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Regulations.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListRegulationResponse listRegulation(org.openapis.openapi.models.operations.ListRegulationRequest request, org.openapis.openapi.models.operations.ListRegulationSecurity security) throws Exception {
        return this.listRegulation(request, security, null);
    }

    /**
     * Retrieve a list of all Regulations.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListRegulationResponse listRegulation(org.openapis.openapi.models.operations.ListRegulationRequest request, org.openapis.openapi.models.operations.ListRegulationSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_REGULATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/RegulatoryCompliance/Regulations");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListRegulationRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListRegulationResponse res = new org.openapis.openapi.models.operations.ListRegulationResponse() {{
            listRegulationResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListRegulationListRegulationResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListRegulationListRegulationResponse.class);
                res.listRegulationResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Supporting Document for an account.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSupportingDocumentResponse listSupportingDocument(org.openapis.openapi.models.operations.ListSupportingDocumentRequest request, org.openapis.openapi.models.operations.ListSupportingDocumentSecurity security) throws Exception {
        return this.listSupportingDocument(request, security, null);
    }

    /**
     * Retrieve a list of all Supporting Document for an account.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSupportingDocumentResponse listSupportingDocument(org.openapis.openapi.models.operations.ListSupportingDocumentRequest request, org.openapis.openapi.models.operations.ListSupportingDocumentSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SUPPORTING_DOCUMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/RegulatoryCompliance/SupportingDocuments");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSupportingDocumentRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSupportingDocumentResponse res = new org.openapis.openapi.models.operations.ListSupportingDocumentResponse() {{
            listSupportingDocumentResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSupportingDocumentListSupportingDocumentResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSupportingDocumentListSupportingDocumentResponse.class);
                res.listSupportingDocumentResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Supporting Document Types.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSupportingDocumentTypeResponse listSupportingDocumentType(org.openapis.openapi.models.operations.ListSupportingDocumentTypeRequest request, org.openapis.openapi.models.operations.ListSupportingDocumentTypeSecurity security) throws Exception {
        return this.listSupportingDocumentType(request, security, null);
    }

    /**
     * Retrieve a list of all Supporting Document Types.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSupportingDocumentTypeResponse listSupportingDocumentType(org.openapis.openapi.models.operations.ListSupportingDocumentTypeRequest request, org.openapis.openapi.models.operations.ListSupportingDocumentTypeSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SUPPORTING_DOCUMENT_TYPE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/RegulatoryCompliance/SupportingDocumentTypes");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSupportingDocumentTypeRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSupportingDocumentTypeResponse res = new org.openapis.openapi.models.operations.ListSupportingDocumentTypeResponse() {{
            listSupportingDocumentTypeResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSupportingDocumentTypeListSupportingDocumentTypeResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSupportingDocumentTypeListSupportingDocumentTypeResponse.class);
                res.listSupportingDocumentTypeResponse = out;
            }
        }

        return res;
    }

    /**
     * Updates a Bundle in an account.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateBundleResponse updateBundle(org.openapis.openapi.models.operations.UpdateBundleRequest request, org.openapis.openapi.models.operations.UpdateBundleSecurity security) throws Exception {
        return this.updateBundle(request, security, null);
    }

    /**
     * Updates a Bundle in an account.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateBundleResponse updateBundle(org.openapis.openapi.models.operations.UpdateBundleRequest request, org.openapis.openapi.models.operations.UpdateBundleSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_BUNDLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateBundleRequest.class, baseUrl, "/v2/RegulatoryCompliance/Bundles/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateBundleResponse res = new org.openapis.openapi.models.operations.UpdateBundleResponse() {{
            numbersV2RegulatoryComplianceBundle = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceBundle out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceBundle.class);
                res.numbersV2RegulatoryComplianceBundle = out;
            }
        }

        return res;
    }

    /**
     * Update an existing End User.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateEndUserResponse updateEndUser(org.openapis.openapi.models.operations.UpdateEndUserRequest request, org.openapis.openapi.models.operations.UpdateEndUserSecurity security) throws Exception {
        return this.updateEndUser(request, security, null);
    }

    /**
     * Update an existing End User.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateEndUserResponse updateEndUser(org.openapis.openapi.models.operations.UpdateEndUserRequest request, org.openapis.openapi.models.operations.UpdateEndUserSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_END_USER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateEndUserRequest.class, baseUrl, "/v2/RegulatoryCompliance/EndUsers/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateEndUserResponse res = new org.openapis.openapi.models.operations.UpdateEndUserResponse() {{
            numbersV2RegulatoryComplianceEndUser = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceEndUser out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceEndUser.class);
                res.numbersV2RegulatoryComplianceEndUser = out;
            }
        }

        return res;
    }

    /**
     * Update an existing Supporting Document.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSupportingDocumentResponse updateSupportingDocument(org.openapis.openapi.models.operations.UpdateSupportingDocumentRequest request, org.openapis.openapi.models.operations.UpdateSupportingDocumentSecurity security) throws Exception {
        return this.updateSupportingDocument(request, security, null);
    }

    /**
     * Update an existing Supporting Document.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSupportingDocumentResponse updateSupportingDocument(org.openapis.openapi.models.operations.UpdateSupportingDocumentRequest request, org.openapis.openapi.models.operations.UpdateSupportingDocumentSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SUPPORTING_DOCUMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSupportingDocumentRequest.class, baseUrl, "/v2/RegulatoryCompliance/SupportingDocuments/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSupportingDocumentResponse res = new org.openapis.openapi.models.operations.UpdateSupportingDocumentResponse() {{
            numbersV2RegulatoryComplianceSupportingDocument = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceSupportingDocument out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.NumbersV2RegulatoryComplianceSupportingDocument.class);
                res.numbersV2RegulatoryComplianceSupportingDocument = out;
            }
        }

        return res;
    }
}