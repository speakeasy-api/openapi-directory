"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EventWorkingLocationPropertiesCustomLocation:
    r"""If present, specifies that the user is working from a custom location."""
    
    label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label'), 'exclude': lambda f: f is None }})
    r"""An optional extra label for additional information."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EventWorkingLocationPropertiesOfficeLocation:
    r"""If present, specifies that the user is working from an office."""
    
    building_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buildingId'), 'exclude': lambda f: f is None }})
    r"""An optional building identifier. This should reference a building ID in the organization's Resources database."""  
    desk_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deskId'), 'exclude': lambda f: f is None }})
    r"""An optional arbitrary desk identifier."""  
    floor_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floorId'), 'exclude': lambda f: f is None }})
    r"""An optional arbitrary floor identifier."""  
    floor_section_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floorSectionId'), 'exclude': lambda f: f is None }})
    r"""An optional arbitrary floor section identifier."""  
    label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label'), 'exclude': lambda f: f is None }})
    r"""An optional extra label for additional information."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EventWorkingLocationProperties:
    
    custom_location: Optional[EventWorkingLocationPropertiesCustomLocation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customLocation'), 'exclude': lambda f: f is None }})
    r"""If present, specifies that the user is working from a custom location."""  
    home_office: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('homeOffice'), 'exclude': lambda f: f is None }})
    r"""If present, specifies that the user is working at home."""  
    office_location: Optional[EventWorkingLocationPropertiesOfficeLocation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('officeLocation'), 'exclude': lambda f: f is None }})
    r"""If present, specifies that the user is working from an office."""  
    