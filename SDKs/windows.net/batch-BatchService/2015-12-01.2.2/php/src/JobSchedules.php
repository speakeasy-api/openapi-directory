<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class JobSchedules 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Adds a job schedule to the specified account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobScheduleAddRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\JobScheduleAddResponse
     */
	public function jobScheduleAdd(
        \OpenAPI\OpenAPI\Models\Operations\JobScheduleAddRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\JobScheduleAddResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobschedules');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "jobScheduleAddParameter", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobScheduleAddRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobScheduleAddResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a job schedule from the specified account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobScheduleDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\JobScheduleDeleteResponse
     */
	public function jobScheduleDelete(
        \OpenAPI\OpenAPI\Models\Operations\JobScheduleDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\JobScheduleDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobschedules/{jobScheduleId}', \OpenAPI\OpenAPI\Models\Operations\JobScheduleDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobScheduleDeleteRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobScheduleDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Disables a job schedule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobScheduleDisableRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\JobScheduleDisableResponse
     */
	public function jobScheduleDisable(
        \OpenAPI\OpenAPI\Models\Operations\JobScheduleDisableRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\JobScheduleDisableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobschedules/{jobScheduleId}/disable', \OpenAPI\OpenAPI\Models\Operations\JobScheduleDisableRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobScheduleDisableRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobScheduleDisableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enables a job schedule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobScheduleEnableRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\JobScheduleEnableResponse
     */
	public function jobScheduleEnable(
        \OpenAPI\OpenAPI\Models\Operations\JobScheduleEnableRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\JobScheduleEnableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobschedules/{jobScheduleId}/enable', \OpenAPI\OpenAPI\Models\Operations\JobScheduleEnableRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobScheduleEnableRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobScheduleEnableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Checks the specified job schedule exists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobScheduleExistsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\JobScheduleExistsResponse
     */
	public function jobScheduleExists(
        \OpenAPI\OpenAPI\Models\Operations\JobScheduleExistsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\JobScheduleExistsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobschedules/{jobScheduleId}', \OpenAPI\OpenAPI\Models\Operations\JobScheduleExistsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobScheduleExistsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('HEAD', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobScheduleExistsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets information about the specified job schedule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobScheduleGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\JobScheduleGetResponse
     */
	public function jobScheduleGet(
        \OpenAPI\OpenAPI\Models\Operations\JobScheduleGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\JobScheduleGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobschedules/{jobScheduleId}', \OpenAPI\OpenAPI\Models\Operations\JobScheduleGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobScheduleGetRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobScheduleGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cloudJobSchedule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CloudJobSchedule', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all of the job schedules in the specified account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobScheduleListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\JobScheduleListResponse
     */
	public function jobScheduleList(
        \OpenAPI\OpenAPI\Models\Operations\JobScheduleListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\JobScheduleListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobschedules');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobScheduleListRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobScheduleListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cloudJobScheduleListResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CloudJobScheduleListResult', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the properties of the specified job schedule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobSchedulePatchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\JobSchedulePatchResponse
     */
	public function jobSchedulePatch(
        \OpenAPI\OpenAPI\Models\Operations\JobSchedulePatchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\JobSchedulePatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobschedules/{jobScheduleId}', \OpenAPI\OpenAPI\Models\Operations\JobSchedulePatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "jobSchedulePatchParameter", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobSchedulePatchRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobSchedulePatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Terminates a job schedule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobScheduleTerminateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\JobScheduleTerminateResponse
     */
	public function jobScheduleTerminate(
        \OpenAPI\OpenAPI\Models\Operations\JobScheduleTerminateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\JobScheduleTerminateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobschedules/{jobScheduleId}/terminate', \OpenAPI\OpenAPI\Models\Operations\JobScheduleTerminateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobScheduleTerminateRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobScheduleTerminateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the properties of the specified job schedule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JobScheduleUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\JobScheduleUpdateResponse
     */
	public function jobScheduleUpdate(
        \OpenAPI\OpenAPI\Models\Operations\JobScheduleUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\JobScheduleUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobschedules/{jobScheduleId}', \OpenAPI\OpenAPI\Models\Operations\JobScheduleUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "jobScheduleUpdateParameter", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JobScheduleUpdateRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JobScheduleUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
}