// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ComputeSchedulingOnHostMaintenanceEnum - How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.
type ComputeSchedulingOnHostMaintenanceEnum string

const (
	ComputeSchedulingOnHostMaintenanceEnumOnHostMaintenanceUnspecified ComputeSchedulingOnHostMaintenanceEnum = "ON_HOST_MAINTENANCE_UNSPECIFIED"
	ComputeSchedulingOnHostMaintenanceEnumTerminate                    ComputeSchedulingOnHostMaintenanceEnum = "TERMINATE"
	ComputeSchedulingOnHostMaintenanceEnumMigrate                      ComputeSchedulingOnHostMaintenanceEnum = "MIGRATE"
)

func (e ComputeSchedulingOnHostMaintenanceEnum) ToPointer() *ComputeSchedulingOnHostMaintenanceEnum {
	return &e
}

func (e *ComputeSchedulingOnHostMaintenanceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ON_HOST_MAINTENANCE_UNSPECIFIED":
		fallthrough
	case "TERMINATE":
		fallthrough
	case "MIGRATE":
		*e = ComputeSchedulingOnHostMaintenanceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ComputeSchedulingOnHostMaintenanceEnum: %v", v)
	}
}

// ComputeSchedulingRestartTypeEnum - Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.
type ComputeSchedulingRestartTypeEnum string

const (
	ComputeSchedulingRestartTypeEnumRestartTypeUnspecified ComputeSchedulingRestartTypeEnum = "RESTART_TYPE_UNSPECIFIED"
	ComputeSchedulingRestartTypeEnumAutomaticRestart       ComputeSchedulingRestartTypeEnum = "AUTOMATIC_RESTART"
	ComputeSchedulingRestartTypeEnumNoAutomaticRestart     ComputeSchedulingRestartTypeEnum = "NO_AUTOMATIC_RESTART"
)

func (e ComputeSchedulingRestartTypeEnum) ToPointer() *ComputeSchedulingRestartTypeEnum {
	return &e
}

func (e *ComputeSchedulingRestartTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RESTART_TYPE_UNSPECIFIED":
		fallthrough
	case "AUTOMATIC_RESTART":
		fallthrough
	case "NO_AUTOMATIC_RESTART":
		*e = ComputeSchedulingRestartTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ComputeSchedulingRestartTypeEnum: %v", v)
	}
}

// ComputeScheduling - Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes.
type ComputeScheduling struct {
	// The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node. Ignored if no node_affinites are configured.
	MinNodeCpus *int `json:"minNodeCpus,omitempty"`
	// A set of node affinity and anti-affinity configurations for sole tenant nodes.
	NodeAffinities []SchedulingNodeAffinity `json:"nodeAffinities,omitempty"`
	// How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.
	OnHostMaintenance *ComputeSchedulingOnHostMaintenanceEnum `json:"onHostMaintenance,omitempty"`
	// Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.
	RestartType *ComputeSchedulingRestartTypeEnum `json:"restartType,omitempty"`
}
