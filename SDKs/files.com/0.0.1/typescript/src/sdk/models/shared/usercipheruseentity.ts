/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * The interface accessed
 */
export enum UserCipherUseEntityInterfaceEnum {
  Web = "web",
  Ftp = "ftp",
  Sftp = "sftp",
  Dav = "dav",
  Desktop = "desktop",
  Restapi = "restapi",
  Robot = "robot",
  Jsapi = "jsapi",
}

/**
 * List User Cipher Uses
 */
export class UserCipherUseEntity extends SpeakeasyBase {
  /**
   * The earliest recorded use of this combination of interface and protocol and cipher (for this user)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  /**
   * UserCipherUse ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * The interface accessed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "interface" })
  interface?: UserCipherUseEntityInterfaceEnum;

  /**
   * The protocol and cipher employed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protocol_cipher" })
  protocolCipher?: string;

  /**
   * The most recent use of this combination of interface and protocol and cipher (for this user)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;

  /**
   * ID of the user who performed this access
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_id" })
  userId?: number;
}
