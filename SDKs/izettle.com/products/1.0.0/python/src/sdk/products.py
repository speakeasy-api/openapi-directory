"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Products:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def count_all_products(self, request: operations.CountAllProductsRequest, security: operations.CountAllProductsSecurity) -> operations.CountAllProductsResponse:
        r"""Retrieve the count of existing products"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CountAllProductsRequest, base_url, '/organizations/{organizationUuid}/products/v2/count', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CountAllProductsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ProductCountResponse]])
                res.product_count_responses = out

        return res

    def create_product(self, request: operations.CreateProductRequest, security: operations.CreateProductSecurity) -> operations.CreateProductResponse:
        r"""Create a new product"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateProductRequest, base_url, '/organizations/{organizationUuid}/products', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "product_create_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.CreateProductRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateProductResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProductResponse])
                res.product_response = out

        return res

    def delete_product(self, request: operations.DeleteProductRequest, security: operations.DeleteProductSecurity) -> operations.DeleteProductResponse:
        r"""Delete a single product"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteProductRequest, base_url, '/organizations/{organizationUuid}/products/{productUuid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteProductResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_products(self, request: operations.DeleteProductsRequest, security: operations.DeleteProductsSecurity) -> operations.DeleteProductsResponse:
        r"""Delete a list of products"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteProductsRequest, base_url, '/organizations/{organizationUuid}/products', request)
        
        query_params = utils.get_query_params(operations.DeleteProductsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteProductsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_all_options(self, request: operations.GetAllOptionsRequest, security: operations.GetAllOptionsSecurity) -> operations.GetAllOptionsResponse:
        r"""Retrieve an aggregate of active Options in the library"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllOptionsRequest, base_url, '/organizations/{organizationUuid}/products/options', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllOptionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.VariantOptionsResponse]])
                res.variant_options_responses = out

        return res

    def get_all_products_in_pos(self, request: operations.GetAllProductsInPosRequest, security: operations.GetAllProductsInPosSecurity) -> operations.GetAllProductsInPosResponse:
        r"""Retrieve all products visible in POS"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllProductsInPosRequest, base_url, '/organizations/{organizationUuid}/products', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllProductsInPosResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ProductResponse]])
                res.product_responses = out

        return res

    def get_all_products_v2(self, request: operations.GetAllProductsV2Request, security: operations.GetAllProductsV2Security) -> operations.GetAllProductsV2Response:
        r"""Retrieve all products visible in POS â€“ v2"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllProductsV2Request, base_url, '/organizations/{organizationUuid}/products/v2', request)
        
        query_params = utils.get_query_params(operations.GetAllProductsV2Request, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllProductsV2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ProductResponse]])
                res.product_responses = out

        return res

    def get_product(self, request: operations.GetProductRequest, security: operations.GetProductSecurity) -> operations.GetProductResponse:
        r"""Retrieve a single product
        Get the full product with the provided UUID. The method supports conditional GET through providing a HttpHeaders.IF_NONE_MATCH header. If the conditional prerequisite is fullfilled, the full product is returned, otherwise a 304 not modified will be returned with an empty body.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProductRequest, base_url, '/organizations/{organizationUuid}/products/{productUuid}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProductResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProductResponse])
                res.product_response = out
        elif http_res.status_code in [304, 400, 404]:
            pass

        return res

    def update_product(self, request: operations.UpdateProductRequest, security: operations.UpdateProductSecurity) -> operations.UpdateProductResponse:
        r"""Update a single product
        Updates a product entity using JSON merge patch (https://tools.ietf.org/html/rfc7386). This means that only included fields will be changed: null values removes the field on the target entity, and other values updates the field. Conditional updates are supported through the HttpHeaders.IF_MATCH header. If the conditional prerequisite is fullfilled, the product is updated: otherwise a 412 (precondition failed) will be returned with an empty body.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateProductRequest, base_url, '/organizations/{organizationUuid}/products/v2/{productUuid}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "full_product_update_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateProductResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            res.headers = http_res.headers
            
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
        elif http_res.status_code == 412:
            pass

        return res

    