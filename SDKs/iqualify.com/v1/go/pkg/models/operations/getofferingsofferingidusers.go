// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetOfferingsOfferingIDUsersFacilitatorsEnum - If true, facilitators are included in the results.
type GetOfferingsOfferingIDUsersFacilitatorsEnum string

const (
	GetOfferingsOfferingIDUsersFacilitatorsEnumTrue  GetOfferingsOfferingIDUsersFacilitatorsEnum = "true"
	GetOfferingsOfferingIDUsersFacilitatorsEnumFalse GetOfferingsOfferingIDUsersFacilitatorsEnum = "false"
)

func (e GetOfferingsOfferingIDUsersFacilitatorsEnum) ToPointer() *GetOfferingsOfferingIDUsersFacilitatorsEnum {
	return &e
}

func (e *GetOfferingsOfferingIDUsersFacilitatorsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "true":
		fallthrough
	case "false":
		*e = GetOfferingsOfferingIDUsersFacilitatorsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOfferingsOfferingIDUsersFacilitatorsEnum: %v", v)
	}
}

// GetOfferingsOfferingIDUsersLearnersEnum - If true, learners are included in the results.
type GetOfferingsOfferingIDUsersLearnersEnum string

const (
	GetOfferingsOfferingIDUsersLearnersEnumTrue  GetOfferingsOfferingIDUsersLearnersEnum = "true"
	GetOfferingsOfferingIDUsersLearnersEnumFalse GetOfferingsOfferingIDUsersLearnersEnum = "false"
)

func (e GetOfferingsOfferingIDUsersLearnersEnum) ToPointer() *GetOfferingsOfferingIDUsersLearnersEnum {
	return &e
}

func (e *GetOfferingsOfferingIDUsersLearnersEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "true":
		fallthrough
	case "false":
		*e = GetOfferingsOfferingIDUsersLearnersEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOfferingsOfferingIDUsersLearnersEnum: %v", v)
	}
}

// GetOfferingsOfferingIDUsersMarkersEnum - If true, markers are included in the results.
type GetOfferingsOfferingIDUsersMarkersEnum string

const (
	GetOfferingsOfferingIDUsersMarkersEnumTrue  GetOfferingsOfferingIDUsersMarkersEnum = "true"
	GetOfferingsOfferingIDUsersMarkersEnumFalse GetOfferingsOfferingIDUsersMarkersEnum = "false"
)

func (e GetOfferingsOfferingIDUsersMarkersEnum) ToPointer() *GetOfferingsOfferingIDUsersMarkersEnum {
	return &e
}

func (e *GetOfferingsOfferingIDUsersMarkersEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "true":
		fallthrough
	case "false":
		*e = GetOfferingsOfferingIDUsersMarkersEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOfferingsOfferingIDUsersMarkersEnum: %v", v)
	}
}

type GetOfferingsOfferingIDUsersRequest struct {
	// If true, facilitators are included in the results.
	Facilitators *GetOfferingsOfferingIDUsersFacilitatorsEnum `queryParam:"style=form,explode=true,name=facilitators"`
	// If true, learners are included in the results.
	Learners *GetOfferingsOfferingIDUsersLearnersEnum `queryParam:"style=form,explode=true,name=learners"`
	// If true, markers are included in the results.
	Markers *GetOfferingsOfferingIDUsersMarkersEnum `queryParam:"style=form,explode=true,name=markers"`
	// offering's id
	OfferingID string `pathParam:"style=simple,explode=false,name=offeringId"`
}

type GetOfferingsOfferingIDUsersResponse struct {
	ContentType string
	// Bad Request
	Error *shared.Error
	// offering's users
	OfferingUserResponses []shared.OfferingUserResponse
	StatusCode            int
	RawResponse           *http.Response
}
