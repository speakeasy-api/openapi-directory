"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class IssueJobStatusStatusEnum(str, Enum):
    r"""The status of the import/export job"""
    ACCEPTED = 'ACCEPTED'
    STARTED = 'STARTED'
    RUNNING = 'RUNNING'
    FAILURE = 'FAILURE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IssueJobStatus:
    r"""The status of an import or export job"""
    
    count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count'), 'exclude': lambda f: f is None }})
    r"""The total number of issues already imported/exported"""  
    pct: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pct'), 'exclude': lambda f: f is None }})
    r"""The percentage of issues already imported/exported"""  
    phase: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phase'), 'exclude': lambda f: f is None }})
    r"""The phase of the import/export job"""  
    status: Optional[IssueJobStatusStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the import/export job"""  
    total: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})
    r"""The total number of issues being imported/exported"""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    