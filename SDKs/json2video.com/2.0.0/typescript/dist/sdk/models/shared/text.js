"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Text = exports.TextTypeEnum = exports.TextScale = exports.TextRotate = exports.TextPositionEnum = exports.TextPanEnum = exports.TextCrop = exports.TextChromaKey = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * Allows to define a color (or a range of colors) that will be converted to transparent
 */
var TextChromaKey = /** @class */ (function (_super) {
    __extends(TextChromaKey, _super);
    function TextChromaKey() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "color" }),
        __metadata("design:type", String)
    ], TextChromaKey.prototype, "color", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "tolerance" }),
        __metadata("design:type", Number)
    ], TextChromaKey.prototype, "tolerance", void 0);
    return TextChromaKey;
}(utils_1.SpeakeasyBase));
exports.TextChromaKey = TextChromaKey;
/**
 * Crops the element
 */
var TextCrop = /** @class */ (function (_super) {
    __extends(TextCrop, _super);
    function TextCrop() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "height" }),
        __metadata("design:type", Number)
    ], TextCrop.prototype, "height", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "width" }),
        __metadata("design:type", Number)
    ], TextCrop.prototype, "width", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "x" }),
        __metadata("design:type", Number)
    ], TextCrop.prototype, "x", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "y" }),
        __metadata("design:type", Number)
    ], TextCrop.prototype, "y", void 0);
    return TextCrop;
}(utils_1.SpeakeasyBase));
exports.TextCrop = TextCrop;
/**
 * Pans the element to the specified direction. If <code>zoom</code> property is not specified, the effect is a non-zooming pan
 */
var TextPanEnum;
(function (TextPanEnum) {
    TextPanEnum["Left"] = "left";
    TextPanEnum["Top"] = "top";
    TextPanEnum["Right"] = "right";
    TextPanEnum["Bottom"] = "bottom";
    TextPanEnum["TopLeft"] = "top-left";
    TextPanEnum["TopRight"] = "top-right";
    TextPanEnum["BottomLeft"] = "bottom-left";
    TextPanEnum["BottomRight"] = "bottom-right";
})(TextPanEnum = exports.TextPanEnum || (exports.TextPanEnum = {}));
/**
 * Sets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' properties
 */
var TextPositionEnum;
(function (TextPositionEnum) {
    TextPositionEnum["TopLeft"] = "top-left";
    TextPositionEnum["TopRight"] = "top-right";
    TextPositionEnum["BottomRight"] = "bottom-right";
    TextPositionEnum["BottomLeft"] = "bottom-left";
    TextPositionEnum["CenterCenter"] = "center-center";
    TextPositionEnum["Custom"] = "custom";
})(TextPositionEnum = exports.TextPositionEnum || (exports.TextPositionEnum = {}));
var TextRotate = /** @class */ (function (_super) {
    __extends(TextRotate, _super);
    function TextRotate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "angle" }),
        __metadata("design:type", Number)
    ], TextRotate.prototype, "angle", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "speed" }),
        __metadata("design:type", Number)
    ], TextRotate.prototype, "speed", void 0);
    return TextRotate;
}(utils_1.SpeakeasyBase));
exports.TextRotate = TextRotate;
var TextScale = /** @class */ (function (_super) {
    __extends(TextScale, _super);
    function TextScale() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "height" }),
        __metadata("design:type", Number)
    ], TextScale.prototype, "height", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "width" }),
        __metadata("design:type", Number)
    ], TextScale.prototype, "width", void 0);
    return TextScale;
}(utils_1.SpeakeasyBase));
exports.TextScale = TextScale;
var TextTypeEnum;
(function (TextTypeEnum) {
    TextTypeEnum["Text"] = "text";
})(TextTypeEnum = exports.TextTypeEnum || (exports.TextTypeEnum = {}));
/**
 * Creates a text element of a given style
 */
var Text = /** @class */ (function (_super) {
    __extends(Text, _super);
    function Text() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "cache" }),
        __metadata("design:type", Boolean)
    ], Text.prototype, "cache", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "chroma-key" }),
        (0, class_transformer_1.Type)(function () { return TextChromaKey; }),
        __metadata("design:type", TextChromaKey)
    ], Text.prototype, "chromaKey", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "comment" }),
        __metadata("design:type", String)
    ], Text.prototype, "comment", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "crop" }),
        (0, class_transformer_1.Type)(function () { return TextCrop; }),
        __metadata("design:type", TextCrop)
    ], Text.prototype, "crop", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "duration" }),
        __metadata("design:type", Number)
    ], Text.prototype, "duration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "extra-time" }),
        __metadata("design:type", Number)
    ], Text.prototype, "extraTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fade-in" }),
        __metadata("design:type", Number)
    ], Text.prototype, "fadeIn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fade-out" }),
        __metadata("design:type", Number)
    ], Text.prototype, "fadeOut", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "height" }),
        __metadata("design:type", Number)
    ], Text.prototype, "height", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "pan" }),
        __metadata("design:type", String)
    ], Text.prototype, "pan", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "position" }),
        __metadata("design:type", String)
    ], Text.prototype, "position", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "rotate" }),
        (0, class_transformer_1.Type)(function () { return TextRotate; }),
        __metadata("design:type", TextRotate)
    ], Text.prototype, "rotate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "scale" }),
        (0, class_transformer_1.Type)(function () { return TextScale; }),
        __metadata("design:type", TextScale)
    ], Text.prototype, "scale", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "settings" }),
        __metadata("design:type", Object)
    ], Text.prototype, "settings", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "start" }),
        __metadata("design:type", Number)
    ], Text.prototype, "start", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "style" }),
        __metadata("design:type", String)
    ], Text.prototype, "style", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "text" }),
        __metadata("design:type", String)
    ], Text.prototype, "text", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], Text.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "width" }),
        __metadata("design:type", Number)
    ], Text.prototype, "width", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "x" }),
        __metadata("design:type", Number)
    ], Text.prototype, "x", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "y" }),
        __metadata("design:type", Number)
    ], Text.prototype, "y", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "z-index" }),
        __metadata("design:type", Number)
    ], Text.prototype, "zIndex", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "zoom" }),
        __metadata("design:type", Number)
    ], Text.prototype, "zoom", void 0);
    return Text;
}(utils_1.SpeakeasyBase));
exports.Text = Text;
