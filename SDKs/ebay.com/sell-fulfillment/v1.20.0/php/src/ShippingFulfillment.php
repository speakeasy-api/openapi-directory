<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ShippingFulfillment 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * When you group an order's line items into one or more packages, each package requires a corresponding plan for handling, addressing, and shipping; this is a <i>shipping fulfillment</i>. For each package, execute this call once to generate a shipping fulfillment associated with that package. <br><br> <span class="tablenote"><strong>Note:</strong> A single line item in an order can consist of multiple units of a purchased item, and one unit can consist of multiple parts or components. Although these components might be provided by the manufacturer in separate packaging, the seller must include all components of a given line item in the same package.</span> <br><br>Before using this call for a given package, you must determine which line items are in the package. If the package has been shipped, you should provide the date of shipment in the request. If not provided, it will default to the current date and time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateShippingFulfillmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateShippingFulfillmentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateShippingFulfillmentResponse
     */
	public function createShippingFulfillment(
        \OpenAPI\OpenAPI\Models\Operations\CreateShippingFulfillmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateShippingFulfillmentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateShippingFulfillmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/order/{orderId}/shipping_fulfillment', \OpenAPI\OpenAPI\Models\Operations\CreateShippingFulfillmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "shippingFulfillmentDetails", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateShippingFulfillmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createShippingFulfillment201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Use this call to retrieve the contents of a fulfillment based on its unique identifier, <b>fulfillmentId</b> (combined with the associated order's <b>orderId</b>). The <b>fulfillmentId</b> value was originally generated by the <b>createShippingFulfillment</b> call, and is returned by the <b>getShippingFulfillments</b> call in the <b>members.fulfillmentId</b> field.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetShippingFulfillmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetShippingFulfillmentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetShippingFulfillmentResponse
     */
	public function getShippingFulfillment(
        \OpenAPI\OpenAPI\Models\Operations\GetShippingFulfillmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetShippingFulfillmentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetShippingFulfillmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/order/{orderId}/shipping_fulfillment/{fulfillmentId}', \OpenAPI\OpenAPI\Models\Operations\GetShippingFulfillmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetShippingFulfillmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->shippingFulfillment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ShippingFulfillment', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Use this call to retrieve the contents of all fulfillments currently defined for a specified order based on the order's unique identifier, <b>orderId</b>. This value is returned in the <b>getOrders</b> call's <b>members.orderId</b> field when you search for orders by creation date or shipment status.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetShippingFulfillmentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetShippingFulfillmentsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetShippingFulfillmentsResponse
     */
	public function getShippingFulfillments(
        \OpenAPI\OpenAPI\Models\Operations\GetShippingFulfillmentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetShippingFulfillmentsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetShippingFulfillmentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/order/{orderId}/shipping_fulfillment', \OpenAPI\OpenAPI\Models\Operations\GetShippingFulfillmentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetShippingFulfillmentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->shippingFulfillmentPagedCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ShippingFulfillmentPagedCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
}