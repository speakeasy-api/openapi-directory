// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type OrgInvitationsAcceptSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type OrgInvitationsAcceptRequest struct {
	// allow empty body for custom http-client lib
	RequestBody map[string]interface{} `request:"mediaType=application/json"`
	// The app invitation token that was sent to the user
	InvitationToken string `pathParam:"style=simple,explode=false,name=invitation_token"`
}

type OrgInvitationsAcceptDefaultApplicationJSONErrorCodeEnum string

const (
	OrgInvitationsAcceptDefaultApplicationJSONErrorCodeEnumBadRequest          OrgInvitationsAcceptDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	OrgInvitationsAcceptDefaultApplicationJSONErrorCodeEnumConflict            OrgInvitationsAcceptDefaultApplicationJSONErrorCodeEnum = "Conflict"
	OrgInvitationsAcceptDefaultApplicationJSONErrorCodeEnumNotAcceptable       OrgInvitationsAcceptDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	OrgInvitationsAcceptDefaultApplicationJSONErrorCodeEnumNotFound            OrgInvitationsAcceptDefaultApplicationJSONErrorCodeEnum = "NotFound"
	OrgInvitationsAcceptDefaultApplicationJSONErrorCodeEnumInternalServerError OrgInvitationsAcceptDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	OrgInvitationsAcceptDefaultApplicationJSONErrorCodeEnumUnauthorized        OrgInvitationsAcceptDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	OrgInvitationsAcceptDefaultApplicationJSONErrorCodeEnumTooManyRequests     OrgInvitationsAcceptDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *OrgInvitationsAcceptDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = OrgInvitationsAcceptDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OrgInvitationsAcceptDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type OrgInvitationsAcceptDefaultApplicationJSONError struct {
	Code    OrgInvitationsAcceptDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                  `json:"message"`
}

// OrgInvitationsAcceptDefaultApplicationJSON - Error
type OrgInvitationsAcceptDefaultApplicationJSON struct {
	Error OrgInvitationsAcceptDefaultApplicationJSONError `json:"error"`
}

type OrgInvitationsAcceptResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Error
	OrgInvitationsAcceptDefaultApplicationJSONObject *OrgInvitationsAcceptDefaultApplicationJSON
}
