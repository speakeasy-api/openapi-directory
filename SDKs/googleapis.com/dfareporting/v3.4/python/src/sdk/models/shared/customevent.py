"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import customeventclickannotation as shared_customeventclickannotation
from ..shared import customeventimpressionannotation as shared_customeventimpressionannotation
from ..shared import customeventinsert as shared_customeventinsert
from ..shared import customvariable as shared_customvariable
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CustomEventEventTypeEnum(str, Enum):
    r"""The type of event. If INSERT, the fields in insertEvent need to be populated. If ANNOTATE, the fields in either annotateClickEvent or annotateImpressionEvent need to be populated."""
    UNKNOWN = 'UNKNOWN'
    INSERT = 'INSERT'
    ANNOTATE = 'ANNOTATE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CustomEvent:
    r"""Experimental feature (no support provided) A custom event represents a third party impression, a third party click, an annotation on a first party impression, or an annotation on a first party click."""
    
    annotate_click_event: Optional[shared_customeventclickannotation.CustomEventClickAnnotation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('annotateClickEvent'), 'exclude': lambda f: f is None }})
    r"""Annotate a click event."""  
    annotate_impression_event: Optional[shared_customeventimpressionannotation.CustomEventImpressionAnnotation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('annotateImpressionEvent'), 'exclude': lambda f: f is None }})
    r"""Annotate an impression."""  
    custom_variables: Optional[list[shared_customvariable.CustomVariable]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customVariables'), 'exclude': lambda f: f is None }})
    r"""Custom variables associated with the event."""  
    event_type: Optional[CustomEventEventTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventType'), 'exclude': lambda f: f is None }})
    r"""The type of event. If INSERT, the fields in insertEvent need to be populated. If ANNOTATE, the fields in either annotateClickEvent or annotateImpressionEvent need to be populated."""  
    floodlight_configuration_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floodlightConfigurationId'), 'exclude': lambda f: f is None }})
    r"""Floodlight configuration ID of the advertiser the event is linked to. This is a required field."""  
    insert_event: Optional[shared_customeventinsert.CustomEventInsert] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insertEvent'), 'exclude': lambda f: f is None }})
    r"""Custom event to be inserted."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"dfareporting#customEvent\\"."""  
    ordinal: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ordinal'), 'exclude': lambda f: f is None }})
    r"""The ordinal of this custom event. This is a required field."""  
    timestamp_micros: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestampMicros'), 'exclude': lambda f: f is None }})
    r"""The timestamp of this custom event, in Unix epoch micros. This is a required field."""  
    