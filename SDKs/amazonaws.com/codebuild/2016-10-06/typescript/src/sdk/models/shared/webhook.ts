/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { WebhookBuildTypeEnum } from "./webhookbuildtypeenum";
import { WebhookFilter } from "./webhookfilter";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Information about a webhook that connects repository events to a build project in CodeBuild.
 */
export class Webhook extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "branchFilter" })
  branchFilter?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "buildType" })
  buildType?: WebhookBuildTypeEnum;

  @SpeakeasyMetadata({ elemType: WebhookFilter, elemDepth: 2 })
  @Expose({ name: "filterGroups" })
  @Type(() => WebhookFilter)
  filterGroups?: WebhookFilter[][];

  @SpeakeasyMetadata()
  @Expose({ name: "lastModifiedSecret" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastModifiedSecret?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "payloadUrl" })
  payloadUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "secret" })
  secret?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}
