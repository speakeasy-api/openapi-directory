"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class DashboardClientFeedbackDetailSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class DashboardClientFeedbackDetailRequest:
    
    feedback_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'feedbackId', 'style': 'simple', 'explode': False }})
    r"""Feedback Detail Id"""  
    from_: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'from', 'style': 'form', 'explode': True }})  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})  
    to: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'to', 'style': 'form', 'explode': True }})  
    

@dataclasses.dataclass
class DashboardClientFeedbackDetail200ApplicationXMLClientFeedbackDetails:
    
    email: Optional[str] = dataclasses.field(default=None)
    r"""Email address of the participant."""  
    meeting_id: Optional[str] = dataclasses.field(default=None)
    r"""Meeting ID"""  
    participant_name: Optional[str] = dataclasses.field(default=None)
    r"""Participant Name"""  
    time: Optional[datetime] = dataclasses.field(default=None)
    r"""Time at which the feedback was submitted by the participant."""  
    

@dataclasses.dataclass
class DashboardClientFeedbackDetail200ApplicationXML:
    r"""Pagination object."""
    
    client_feedback_details: Optional[list[DashboardClientFeedbackDetail200ApplicationXMLClientFeedbackDetails]] = dataclasses.field(default=None)  
    from_: Optional[date] = dataclasses.field(default=None)
    r"""Start date for this report"""  
    next_page_token: Optional[str] = dataclasses.field(default=None)
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None)
    r"""The amount of records returns within a single API call."""  
    to: Optional[date] = dataclasses.field(default=None)
    r"""End date for this report"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DashboardClientFeedbackDetail200ApplicationJSONClientFeedbackDetails:
    
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Email address of the participant."""  
    meeting_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meeting_id'), 'exclude': lambda f: f is None }})
    r"""Meeting ID"""  
    participant_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participant_name'), 'exclude': lambda f: f is None }})
    r"""Participant Name"""  
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Time at which the feedback was submitted by the participant."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DashboardClientFeedbackDetail200ApplicationJSON:
    r"""Pagination object."""
    
    client_feedback_details: Optional[list[DashboardClientFeedbackDetail200ApplicationJSONClientFeedbackDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_feedback_details'), 'exclude': lambda f: f is None }})  
    from_: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Start date for this report"""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token'), 'exclude': lambda f: f is None }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The amount of records returns within a single API call."""  
    to: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date for this report"""  
    

@dataclasses.dataclass
class DashboardClientFeedbackDetailResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    dashboard_client_feedback_detail_200_application_json_object: Optional[DashboardClientFeedbackDetail200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    Client Feedback details returned
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    