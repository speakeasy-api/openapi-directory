"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetADeviceSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class GetADeviceRequest:
    
    device_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'deviceId', 'style': 'simple', 'explode': False }})
    r"""Unique Identifier of the device."""  
    

@dataclasses.dataclass
class GetADevice200ApplicationXMLAssignee:
    r"""User to whom the device has been assigned."""
    
    extension_number: Optional[int] = dataclasses.field(default=None)
    r"""Extension number of the Zoom Phone used by the user."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""User ID of the user to whom the device has been assigned."""  
    name: Optional[str] = dataclasses.field(default=None)
    r"""Name of the user."""  
    

@dataclasses.dataclass
class GetADevice200ApplicationXMLProvisionSipAccountsSharedLineLineSubscription:
    r"""Line subscription."""
    
    display_name: Optional[str] = dataclasses.field(default=None)
    r"""Display name."""  
    extension_number: Optional[int] = dataclasses.field(default=None)
    r"""Extension number."""  
    phone_number: Optional[str] = dataclasses.field(default=None)
    r"""Phone number."""  
    

@dataclasses.dataclass
class GetADevice200ApplicationXMLProvisionSipAccountsSharedLine:
    r"""Return additional provisioning information with generic device SIP credentials."""
    
    alias: Optional[str] = dataclasses.field(default=None)
    r"""Alias."""  
    line_subscription: Optional[GetADevice200ApplicationXMLProvisionSipAccountsSharedLineLineSubscription] = dataclasses.field(default=None)
    r"""Line subscription."""  
    outbound_caller_id: Optional[str] = dataclasses.field(default=None)
    r"""Outbound caller ID."""  
    

@dataclasses.dataclass
class GetADevice200ApplicationXMLProvisionSipAccounts:
    
    authorization_id: Optional[str] = dataclasses.field(default=None)
    r"""Authorization ID of the SIP account provided in the provisioning process."""  
    outbound_proxy: Optional[str] = dataclasses.field(default=None)
    r"""Outbound proxy provided in the provisioning process."""  
    password: Optional[str] = dataclasses.field(default=None)
    r"""Password entered during the  provisioning process."""  
    shared_line: Optional[GetADevice200ApplicationXMLProvisionSipAccountsSharedLine] = dataclasses.field(default=None)
    r"""Return additional provisioning information with generic device SIP credentials."""  
    sip_domain: Optional[str] = dataclasses.field(default=None)
    r"""SIP Domain provided in the provisioning process.<br>"""  
    user_name: Optional[str] = dataclasses.field(default=None)
    r"""User name of the SIP account provided in the provisioning process."""  
    
class GetADevice200ApplicationXMLProvisionTypeEnum(str, Enum):
    r"""[Provisioning type](https://support.zoom.us/hc/en-us/articles/360033223411). The value can be one of the following:
    
    * `ztp` : Zero touch provisioning.
    * `assisted`: Assisted provisioning.
    * `manual`: Manual provisioning.
    """
    ASSISTED = 'assisted'
    ZTP = 'ztp'
    MANUAL = 'manual'


@dataclasses.dataclass
class GetADevice200ApplicationXMLProvision:
    r"""Provisioning information of a device."""
    
    sip_accounts: Optional[list[GetADevice200ApplicationXMLProvisionSipAccounts]] = dataclasses.field(default=None)
    r"""SIP Account details registered during the device provisioning process. This object will only be returned if manual provisioning was used for the device."""  
    type: Optional[GetADevice200ApplicationXMLProvisionTypeEnum] = dataclasses.field(default=None)
    r"""[Provisioning type](https://support.zoom.us/hc/en-us/articles/360033223411). The value can be one of the following:
    
    * `ztp` : Zero touch provisioning.
    * `assisted`: Assisted provisioning.
    * `manual`: Manual provisioning.
    """  
    url: Optional[str] = dataclasses.field(default=None)
    r"""Provisioning URL. This field will only be returned for devices that were provisioned via `assisted` provisioning type."""  
    

@dataclasses.dataclass
class GetADevice200ApplicationXMLSite:
    
    id: Optional[str] = dataclasses.field(default=None)
    r"""The [site](https://support.zoom.us/hc/en-us/articles/360020809672) of the phone user."""  
    name: Optional[str] = dataclasses.field(default=None)
    r"""Name of the [site](https://support.zoom.us/hc/en-us/articles/360020809672)."""  
    
class GetADevice200ApplicationXMLStatusEnum(str, Enum):
    r"""Status of the device. The value is either `online` or `offline`."""
    ONLINE = 'online'
    OFFLINE = 'offline'


@dataclasses.dataclass
class GetADevice200ApplicationXML:
    r"""**HTTP Status Code:** `200` **OK**<br>
    Device information retrieved successfully.
    """
    
    assignee: Optional[GetADevice200ApplicationXMLAssignee] = dataclasses.field(default=None)
    r"""User to whom the device has been assigned."""  
    device_type: Optional[str] = dataclasses.field(default=None)
    r"""Includes manufacturer name and the model name."""  
    display_name: Optional[str] = dataclasses.field(default=None)
    r"""Display name of the device."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""Device ID - Unique Identifier of the Device."""  
    mac_address: Optional[str] = dataclasses.field(default=None)
    r"""MAC address or serial number of the device."""  
    provision: Optional[GetADevice200ApplicationXMLProvision] = dataclasses.field(default=None)
    r"""Provisioning information of a device."""  
    site: Optional[GetADevice200ApplicationXMLSite] = dataclasses.field(default=None)  
    status: Optional[GetADevice200ApplicationXMLStatusEnum] = dataclasses.field(default=None)
    r"""Status of the device. The value is either `online` or `offline`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetADevice200ApplicationJSONAssignee:
    r"""User to whom the device has been assigned."""
    
    extension_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension_number'), 'exclude': lambda f: f is None }})
    r"""Extension number of the Zoom Phone used by the user."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""User ID of the user to whom the device has been assigned."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the user."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetADevice200ApplicationJSONProvisionSipAccountsSharedLineLineSubscription:
    r"""Line subscription."""
    
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_name'), 'exclude': lambda f: f is None }})
    r"""Display name."""  
    extension_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension_number'), 'exclude': lambda f: f is None }})
    r"""Extension number."""  
    phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone_number'), 'exclude': lambda f: f is None }})
    r"""Phone number."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetADevice200ApplicationJSONProvisionSipAccountsSharedLine:
    r"""Return additional provisioning information with generic device SIP credentials."""
    
    alias: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alias'), 'exclude': lambda f: f is None }})
    r"""Alias."""  
    line_subscription: Optional[GetADevice200ApplicationJSONProvisionSipAccountsSharedLineLineSubscription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line_subscription'), 'exclude': lambda f: f is None }})
    r"""Line subscription."""  
    outbound_caller_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outbound_caller_id'), 'exclude': lambda f: f is None }})
    r"""Outbound caller ID."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetADevice200ApplicationJSONProvisionSipAccounts:
    
    authorization_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorization_id'), 'exclude': lambda f: f is None }})
    r"""Authorization ID of the SIP account provided in the provisioning process."""  
    outbound_proxy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outbound_proxy'), 'exclude': lambda f: f is None }})
    r"""Outbound proxy provided in the provisioning process."""  
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password'), 'exclude': lambda f: f is None }})
    r"""Password entered during the  provisioning process."""  
    shared_line: Optional[GetADevice200ApplicationJSONProvisionSipAccountsSharedLine] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shared_line'), 'exclude': lambda f: f is None }})
    r"""Return additional provisioning information with generic device SIP credentials."""  
    sip_domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sip_domain'), 'exclude': lambda f: f is None }})
    r"""SIP Domain provided in the provisioning process.<br>"""  
    user_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_name'), 'exclude': lambda f: f is None }})
    r"""User name of the SIP account provided in the provisioning process."""  
    
class GetADevice200ApplicationJSONProvisionTypeEnum(str, Enum):
    r"""[Provisioning type](https://support.zoom.us/hc/en-us/articles/360033223411). The value can be one of the following:
    
    * `ztp` : Zero touch provisioning.
    * `assisted`: Assisted provisioning.
    * `manual`: Manual provisioning.
    """
    ASSISTED = 'assisted'
    ZTP = 'ztp'
    MANUAL = 'manual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetADevice200ApplicationJSONProvision:
    r"""Provisioning information of a device."""
    
    sip_accounts: Optional[list[GetADevice200ApplicationJSONProvisionSipAccounts]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sip_accounts'), 'exclude': lambda f: f is None }})
    r"""SIP Account details registered during the device provisioning process. This object will only be returned if manual provisioning was used for the device."""  
    type: Optional[GetADevice200ApplicationJSONProvisionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""[Provisioning type](https://support.zoom.us/hc/en-us/articles/360033223411). The value can be one of the following:
    
    * `ztp` : Zero touch provisioning.
    * `assisted`: Assisted provisioning.
    * `manual`: Manual provisioning.
    """  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Provisioning URL. This field will only be returned for devices that were provisioned via `assisted` provisioning type."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetADevice200ApplicationJSONSite:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The [site](https://support.zoom.us/hc/en-us/articles/360020809672) of the phone user."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the [site](https://support.zoom.us/hc/en-us/articles/360020809672)."""  
    
class GetADevice200ApplicationJSONStatusEnum(str, Enum):
    r"""Status of the device. The value is either `online` or `offline`."""
    ONLINE = 'online'
    OFFLINE = 'offline'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetADevice200ApplicationJSON:
    r"""**HTTP Status Code:** `200` **OK**<br>
    Device information retrieved successfully.
    """
    
    assignee: Optional[GetADevice200ApplicationJSONAssignee] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignee'), 'exclude': lambda f: f is None }})
    r"""User to whom the device has been assigned."""  
    device_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_type'), 'exclude': lambda f: f is None }})
    r"""Includes manufacturer name and the model name."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_name'), 'exclude': lambda f: f is None }})
    r"""Display name of the device."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Device ID - Unique Identifier of the Device."""  
    mac_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mac_address'), 'exclude': lambda f: f is None }})
    r"""MAC address or serial number of the device."""  
    provision: Optional[GetADevice200ApplicationJSONProvision] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provision'), 'exclude': lambda f: f is None }})
    r"""Provisioning information of a device."""  
    site: Optional[GetADevice200ApplicationJSONSite] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('site'), 'exclude': lambda f: f is None }})  
    status: Optional[GetADevice200ApplicationJSONStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of the device. The value is either `online` or `offline`."""  
    

@dataclasses.dataclass
class GetADeviceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    get_a_device_200_application_json_object: Optional[GetADevice200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200` **OK**<br>
    Device information retrieved successfully.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    