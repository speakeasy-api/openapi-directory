/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * OrderActionForEvergreen - Represents the processed order action.
 */
public class OrderActionForEvergreen {
    /**
     * Rate plan associated with a subscription.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addProduct")
    public RatePlanOverrideForEvergreen addProduct;
    public OrderActionForEvergreen withAddProduct(RatePlanOverrideForEvergreen addProduct) {
        this.addProduct = addProduct;
        return this;
    }
    
    /**
     * Information about an order action of type `CancelSubscription`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cancelSubscription")
    public CancelSubscription cancelSubscription;
    public OrderActionForEvergreen withCancelSubscription(CancelSubscription cancelSubscription) {
        this.cancelSubscription = cancelSubscription;
        return this;
    }
    
    /**
     * Information about an order action of type `CreateSubscription`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createSubscription")
    public CreateSubscriptionForEvergreen createSubscription;
    public OrderActionForEvergreen withCreateSubscription(CreateSubscriptionForEvergreen createSubscription) {
        this.createSubscription = createSubscription;
        return this;
    }
    
    /**
     * Container for custom fields of an Order Action object.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customFields")
    public java.util.Map<String, Object> customFields;
    public OrderActionForEvergreen withCustomFields(java.util.Map<String, Object> customFields) {
        this.customFields = customFields;
        return this;
    }
    
    /**
     * The Id of the order action processed in the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public OrderActionForEvergreen withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Shows the delta metrics caused by a specific order action on a specific charge.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orderMetrics")
    public OrderMetricsForEvergreen[] orderMetrics;
    public OrderActionForEvergreen withOrderMetrics(OrderMetricsForEvergreen[] orderMetrics) {
        this.orderMetrics = orderMetrics;
        return this;
    }
    
    /**
     * Information about an order action of type `OwnerTransfer`.
     * 
     * **Note:** The Owner Transfer feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ownerTransfer")
    public OwnerTransfer ownerTransfer;
    public OrderActionForEvergreen withOwnerTransfer(OwnerTransfer ownerTransfer) {
        this.ownerTransfer = ownerTransfer;
        return this;
    }
    
    /**
     * Information about an order action of type `RemoveProduct`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("removeProduct")
    public RemoveProduct removeProduct;
    public OrderActionForEvergreen withRemoveProduct(RemoveProduct removeProduct) {
        this.removeProduct = removeProduct;
        return this;
    }
    
    /**
     * Information about an order action of type `Resume`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resume")
    public GetOrderResume resume;
    public OrderActionForEvergreen withResume(GetOrderResume resume) {
        this.resume = resume;
        return this;
    }
    
    /**
     * The sequence of the order actions processed in the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sequence")
    public Long sequence;
    public OrderActionForEvergreen withSequence(Long sequence) {
        this.sequence = sequence;
        return this;
    }
    
    /**
     * Information about an order action of type `Suspend`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suspend")
    public GetOrderSuspend suspend;
    public OrderActionForEvergreen withSuspend(GetOrderSuspend suspend) {
        this.suspend = suspend;
        return this;
    }
    
    /**
     * Information about an order action of type `TermsAndConditions`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("termsAndConditions")
    public TermsAndConditions termsAndConditions;
    public OrderActionForEvergreen withTermsAndConditions(TermsAndConditions termsAndConditions) {
        this.termsAndConditions = termsAndConditions;
        return this;
    }
    
    /**
     * Container for the contract effective, service activation, and customer acceptance dates of the order action. 
     * 
     * If [Zuora is configured to require service activation](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) and the `ServiceActivation` field is not set for a `CreateSubscription` order action, a `Pending` order and a `Pending Activation` subscription are created.
     * 
     * If [Zuora is configured to require customer acceptance](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Customer_Acceptance_of_Orders.3F) and the `CustomerAcceptance` field is not set for a `CreateSubscription` order action, a `Pending` order and a `Pending Acceptance` subscription are created. At the same time, if the service activation date field is also required and not set, a `Pending` order and a `Pending Activation` subscription are created instead.
     * 
     * If [Zuora is configured to require service activation](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) and the `ServiceActivation` field is not set for either of the following order actions, a `Pending` order is created. The subscription status is not impacted. **Note:** This feature is in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
     *  * AddProduct
     *  * UpdateProduct
     *  * RemoveProduct
     *  * RenewSubscription
     *  * TermsAndConditions
     * 
     * If [Zuora is configured to require customer acceptance](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Customer_Acceptance_of_Orders.3F) and the `CustomerAcceptance` field is not set for either of the following order actions, a `Pending` order is created. The subscription status is not impacted. **Note:** This feature is in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
     *  * AddProduct
     *  * UpdateProduct
     *  * RemoveProduct
     *  * RenewSubscription
     *  * TermsAndConditions
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("triggerDates")
    public TriggerDate[] triggerDates;
    public OrderActionForEvergreen withTriggerDates(TriggerDate[] triggerDates) {
        this.triggerDates = triggerDates;
        return this;
    }
    
    /**
     * Type of the order action.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public OrderActionForEvergreenTypeEnum type;
    public OrderActionForEvergreen withType(OrderActionForEvergreenTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * Information about an order action of type `UpdateProduct`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateProduct")
    public RatePlanUpdateForEvergreen updateProduct;
    public OrderActionForEvergreen withUpdateProduct(RatePlanUpdateForEvergreen updateProduct) {
        this.updateProduct = updateProduct;
        return this;
    }
    
}
