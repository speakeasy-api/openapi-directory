"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBodyLevelEnum(str, Enum):
    CONFIDENTIAL = 'confidential'
    REGULAR = 'regular'

class PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBodyNotifyHowEnum(str, Enum):
    STD = 'std'
    MAIL = 'mail'
    SMS = 'sms'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBodyNotify:
    
    how: Optional[PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBodyNotifyHowEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('How'), 'exclude': lambda f: f is None }})  
    member_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MemberIds'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBody:
    r"""Message to modify (except Author and ModificationAuthor)"""
    
    level: Optional[PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBodyLevelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Level'), 'exclude': lambda f: f is None }})  
    message_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MessageDate'), 'exclude': lambda f: f is None }})  
    notify: Optional[PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBodyNotify] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Notify'), 'exclude': lambda f: f is None }})  
    text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Text'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""Id of the folder"""  
    message_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'messageId', 'style': 'simple', 'explode': False }})
    r"""Id of the message"""  
    request_body: PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Message to modify (except Author and ModificationAuthor)"""  
    space_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'spaceId', 'style': 'simple', 'explode': False }})
    r"""Id of the space"""  
    

@dataclasses.dataclass
class PatchSpacesSpaceIDFoldersIDMessagesMessageIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    