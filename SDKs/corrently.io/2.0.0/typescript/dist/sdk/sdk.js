"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var dispatchgreenenergydistributionapi_1 = require("./dispatchgreenenergydistributionapi");
var easee_1 = require("./easee");
var greenpowerindexgrunstromindex_1 = require("./greenpowerindexgrunstromindex");
var meteringdecorator_1 = require("./meteringdecorator");
var ocpp_1 = require("./ocpp");
var openmeter_1 = require("./openmeter");
var smarthome_1 = require("./smarthome");
var stromkontoledger_1 = require("./stromkontoledger");
var stromquittung_1 = require("./stromquittung");
var tariffpriceapi_1 = require("./tariffpriceapi");
var tse_1 = require("./tse");
var wimwechselprozesseimmesswesenstromstatusapi_1 = require("./wimwechselprozesseimmesswesenstromstatusapi");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = ["https://api.corrently.io/v2.0"];
/**
 * *Corrently - from italian corrente, which is energy*
 *
 * @remarks
 * # Introduction
 * The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management.
 * As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding.
 * [Released SKDs for Download](https://github.com/energychain/corrently-api/releases)
 *
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        this._securityClient = this._defaultClient;
        this.dispatchGreenEnergyDistributionAPI =
            new dispatchgreenenergydistributionapi_1.DispatchGreenEnergyDistributionAPI(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.greenPowerIndexGrunstromIndex = new greenpowerindexgrunstromindex_1.GreenPowerIndexGrunstromIndex(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.meteringDecorator = new meteringdecorator_1.MeteringDecorator(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.ocpp = new ocpp_1.Ocpp(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.openMETER = new openmeter_1.OpenMETER(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.smartHome = new smarthome_1.SmartHome(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.stromQuittung = new stromquittung_1.StromQuittung(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.stromkontoLedger = new stromkontoledger_1.StromkontoLedger(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.tse = new tse_1.Tse(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.tariffPriceAPI = new tariffpriceapi_1.TariffPriceAPI(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.wiMWechselprozesseImMesswesenStromStatusAPI =
            new wimwechselprozesseimmesswesenstromstatusapi_1.WiMWechselprozesseImMesswesenStromStatusAPI(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.easee = new easee_1.Easee(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
