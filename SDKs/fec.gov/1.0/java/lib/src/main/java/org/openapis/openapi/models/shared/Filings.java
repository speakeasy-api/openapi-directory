/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

public class Filings {
    /**
     * Additional banks or depositories in which the committee deposits funds, holds accounts, rents safety deposit boxes or maintains funds.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additional_bank_names")
    public String[] additionalBankNames;
    public Filings withAdditionalBankNames(String[] additionalBankNames) {
        this.additionalBankNames = additionalBankNames;
        return this;
    }
    
    /**
     * The first value in the chain is the original filing.  The ordering in the chain reflects the order the
     * amendments were filed up to the amendment being inspected.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amendment_chain")
    public Double[] amendmentChain;
    public Filings withAmendmentChain(Double[] amendmentChain) {
        this.amendmentChain = amendmentChain;
        return this;
    }
    
    /**
     * The first value in the chain is the original filing.  The ordering in the chain reflects the order the
     * amendments were filed up to the amendment being inspected.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amendment_indicator")
    public String amendmentIndicator;
    public Filings withAmendmentIndicator(String amendmentIndicator) {
        this.amendmentIndicator = amendmentIndicator;
        return this;
    }
    
    /**
     * Amendment version
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amendment_version")
    public Integer amendmentVersion;
    public Filings withAmendmentVersion(Integer amendmentVersion) {
        this.amendmentVersion = amendmentVersion;
        return this;
    }
    
    /**
     * City of bank or depository as reported on the Form 1
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_depository_city")
    public String bankDepositoryCity;
    public Filings withBankDepositoryCity(String bankDepositoryCity) {
        this.bankDepositoryCity = bankDepositoryCity;
        return this;
    }
    
    /**
     * Primary bank or depository in which the committee deposits funds, holds accounts, rents safety deposit boxes or maintains funds.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_depository_name")
    public String bankDepositoryName;
    public Filings withBankDepositoryName(String bankDepositoryName) {
        this.bankDepositoryName = bankDepositoryName;
        return this;
    }
    
    /**
     * State of bank or depository as reported on the Form 1
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_depository_state")
    public String bankDepositoryState;
    public Filings withBankDepositoryState(String bankDepositoryState) {
        this.bankDepositoryState = bankDepositoryState;
        return this;
    }
    
    /**
     * Street of bank or depository as reported on their Form 1.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_depository_street_1")
    public String bankDepositoryStreet1;
    public Filings withBankDepositoryStreet1(String bankDepositoryStreet1) {
        this.bankDepositoryStreet1 = bankDepositoryStreet1;
        return this;
    }
    
    /**
     * Second line of the street of bank or depository as reported on the Form 1
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_depository_street_2")
    public String bankDepositoryStreet2;
    public Filings withBankDepositoryStreet2(String bankDepositoryStreet2) {
        this.bankDepositoryStreet2 = bankDepositoryStreet2;
        return this;
    }
    
    /**
     * Zip code of bank or depository as reported on the Form 1
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_depository_zip")
    public String bankDepositoryZip;
    public Filings withBankDepositoryZip(String bankDepositoryZip) {
        this.bankDepositoryZip = bankDepositoryZip;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("beginning_image_number")
    public String beginningImageNumber;
    public Filings withBeginningImageNumber(String beginningImageNumber) {
        this.beginningImageNumber = beginningImageNumber;
        return this;
    }
    
    /**
     * A unique identifier assigned to each candidate registered with the FEC.
     * If a person runs for several offices, that person will have separate candidate IDs for each office.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("candidate_id")
    public String candidateId;
    public Filings withCandidateId(String candidateId) {
        this.candidateId = candidateId;
        return this;
    }
    
    /**
     * Name of candidate running for office
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("candidate_name")
    public String candidateName;
    public Filings withCandidateName(String candidateName) {
        this.candidateName = candidateName;
        return this;
    }
    
    /**
     * Balance for the committee at the start of the two-year period
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cash_on_hand_beginning_period")
    public Double cashOnHandBeginningPeriod;
    public Filings withCashOnHandBeginningPeriod(Double cashOnHandBeginningPeriod) {
        this.cashOnHandBeginningPeriod = cashOnHandBeginningPeriod;
        return this;
    }
    
    /**
     * Ending cash balance on the most recent filing
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cash_on_hand_end_period")
    public Double cashOnHandEndPeriod;
    public Filings withCashOnHandEndPeriod(Double cashOnHandEndPeriod) {
        this.cashOnHandEndPeriod = cashOnHandEndPeriod;
        return this;
    }
    
    /**
     * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("committee_id")
    public String committeeId;
    public Filings withCommitteeId(String committeeId) {
        this.committeeId = committeeId;
        return this;
    }
    
    /**
     * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("committee_name")
    public String committeeName;
    public Filings withCommitteeName(String committeeName) {
        this.committeeName = committeeName;
        return this;
    }
    
    /**
     * The one-letter type code of the organization:
     *         - C communication cost
     *         - D delegate
     *         - E electioneering communication
     *         - H House
     *         - I independent expenditure filer (not a committee)
     *         - N PAC - nonqualified
     *         - O independent expenditure-only (super PACs)
     *         - P presidential
     *         - Q PAC - qualified
     *         - S Senate
     *         - U single candidate independent expenditure
     *         - V PAC with non-contribution account, nonqualified
     *         - W PAC with non-contribution account, qualified
     *         - X party, nonqualified
     *         - Y party, qualified
     *         - Z national party non-federal account
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("committee_type")
    public String committeeType;
    public Filings withCommitteeType(String committeeType) {
        this.committeeType = committeeType;
        return this;
    }
    
    /**
     * Ending date of the reporting period
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("coverage_end_date")
    public LocalDate coverageEndDate;
    public Filings withCoverageEndDate(LocalDate coverageEndDate) {
        this.coverageEndDate = coverageEndDate;
        return this;
    }
    
    /**
     * Beginning date of the reporting period
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("coverage_start_date")
    public LocalDate coverageStartDate;
    public Filings withCoverageStartDate(LocalDate coverageStartDate) {
        this.coverageStartDate = coverageStartDate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("csv_url")
    public String csvUrl;
    public Filings withCsvUrl(String csvUrl) {
        this.csvUrl = csvUrl;
        return this;
    }
    
    /**
     * Filter records to only those that were applicable to a given
     * two-year period.The cycle begins with an odd year and is named
     * for its ending, even year.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cycle")
    public Integer cycle;
    public Filings withCycle(Integer cycle) {
        this.cycle = cycle;
        return this;
    }
    
    /**
     * Debts owed by the committee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("debts_owed_by_committee")
    public Double debtsOwedByCommittee;
    public Filings withDebtsOwedByCommittee(Double debtsOwedByCommittee) {
        this.debtsOwedByCommittee = debtsOwedByCommittee;
        return this;
    }
    
    /**
     * Debts owed to the committee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("debts_owed_to_committee")
    public Double debtsOwedToCommittee;
    public Filings withDebtsOwedToCommittee(Double debtsOwedToCommittee) {
        this.debtsOwedToCommittee = debtsOwedToCommittee;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("document_description")
    public String documentDescription;
    public Filings withDocumentDescription(String documentDescription) {
        this.documentDescription = documentDescription;
        return this;
    }
    
    /**
     * The type of document for documents other than reports:
     *     - 2 24 Hour Contribution Notice
     *     - 4 48 Hour Contribution Notice
     *     - A Debt Settlement Statement
     *     - B Acknowledgment of Receipt of Debt Settlement Statement
     *     - C RFAI: Debt Settlement First Notice
     *     - D Commission Debt Settlement Review
     *     - E Commission Response TO Debt Settlement Request
     *     - F Administrative Termination
     *     - G Debt Settlement Plan Amendment
     *     - H Disavowal Notice
     *     - I Disavowal Response
     *     - J Conduit Report
     *     - K Termination Approval
     *     - L Repeat Non-Filer Notice
     *     - M Filing Frequency Change Notice
     *     - N Paper Amendment to Electronic Report
     *     - O Acknowledgment of Filing Frequency Change
     *     - S RFAI: Debt Settlement Second
     *     - T Miscellaneous Report TO FEC
     *     - V Repeat Violation Notice (441A OR 441B)
     *     - P Notice of Paper Filing
     *     - R F3L Filing Frequency Change Notice
     *     - Q Acknowledgment of F3L Filing Frequency Change
     *     - U Unregistered Committee Notice
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("document_type")
    public String documentType;
    public Filings withDocumentType(String documentType) {
        this.documentType = documentType;
        return this;
    }
    
    /**
     * The type of document for documents other than reports:
     *     - 2 24 Hour Contribution Notice
     *     - 4 48 Hour Contribution Notice
     *     - A Debt Settlement Statement
     *     - B Acknowledgment of Receipt of Debt Settlement Statement
     *     - C RFAI: Debt Settlement First Notice
     *     - D Commission Debt Settlement Review
     *     - E Commission Response TO Debt Settlement Request
     *     - F Administrative Termination
     *     - G Debt Settlement Plan Amendment
     *     - H Disavowal Notice
     *     - I Disavowal Response
     *     - J Conduit Report
     *     - K Termination Approval
     *     - L Repeat Non-Filer Notice
     *     - M Filing Frequency Change Notice
     *     - N Paper Amendment to Electronic Report
     *     - O Acknowledgment of Filing Frequency Change
     *     - S RFAI: Debt Settlement Second
     *     - T Miscellaneous Report TO FEC
     *     - V Repeat Violation Notice (441A OR 441B)
     *     - P Notice of Paper Filing
     *     - R F3L Filing Frequency Change Notice
     *     - Q Acknowledgment of F3L Filing Frequency Change
     *     - U Unregistered Committee Notice
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("document_type_full")
    public String documentTypeFull;
    public Filings withDocumentTypeFull(String documentTypeFull) {
        this.documentTypeFull = documentTypeFull;
        return this;
    }
    
    /**
     * Year of election
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("election_year")
    public Integer electionYear;
    public Filings withElectionYear(Integer electionYear) {
        this.electionYear = electionYear;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ending_image_number")
    public String endingImageNumber;
    public Filings withEndingImageNumber(String endingImageNumber) {
        this.endingImageNumber = endingImageNumber;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fec_file_id")
    public String fecFileId;
    public Filings withFecFileId(String fecFileId) {
        this.fecFileId = fecFileId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fec_url")
    public String fecUrl;
    public Filings withFecUrl(String fecUrl) {
        this.fecUrl = fecUrl;
        return this;
    }
    
    /**
     * Filing ID number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file_number")
    public Integer fileNumber;
    public Filings withFileNumber(Integer fileNumber) {
        this.fileNumber = fileNumber;
        return this;
    }
    
    /**
     * The forms filed are categorized based on the nature of the filing:
     *     - REPORT F3, F3X, F3P, F3L, F4, F5, F7, F13
     *     - NOTICE F5, F24, F6, F9, F10, F11
     *     - STATEMENT F1, F2
     *     - OTHER F1M, F8, F99, F12, FRQ
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("form_category")
    public String formCategory;
    public Filings withFormCategory(String formCategory) {
        this.formCategory = formCategory;
        return this;
    }
    
    /**
     * The form where the underlying data comes from, for example, Form 1 would appear as F1:
     *     - F1   Statement of Organization
     *     - F1M  Notification of Multicandidate Status
     *     - F2   Statement of Candidacy
     *     - F3   Report of Receipts and Disbursements for an Authorized Committee
     *     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
     *     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
     *     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
     *     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
     *     - F5   Report of Independent Expenditures Made and Contributions Received
     *     - F6   48 Hour Notice of Contributions/Loans Received
     *     - F7   Report of Communication Costs by Corporations and Membership Organizations
     *     - F8   Debt Settlement Plan
     *     - F9   24 Hour Notice of Disbursements for Electioneering Communications
     *     - F13  Report of Donations Accepted for Inaugural Committee
     *     - F99  Miscellaneous Text
     *     - FRQ  Request for Additional Information
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("form_type")
    public String formType;
    public Filings withFormType(String formType) {
        this.formType = formType;
        return this;
    }
    
    /**
     * House personal funds
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("house_personal_funds")
    public Double housePersonalFunds;
    public Filings withHousePersonalFunds(Double housePersonalFunds) {
        this.housePersonalFunds = housePersonalFunds;
        return this;
    }
    
    /**
     * HTML link to the filing.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("html_url")
    public String htmlUrl;
    public Filings withHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
        return this;
    }
    
    /**
     * False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_amended")
    public Boolean isAmended;
    public Filings withIsAmended(Boolean isAmended) {
        this.isAmended = isAmended;
        return this;
    }
    
    /**
     * The method used to file with the FEC, either electronic or on paper.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("means_filed")
    public String meansFiled;
    public Filings withMeansFiled(String meansFiled) {
        this.meansFiled = meansFiled;
        return this;
    }
    
    /**
     * Report is either new or is the most-recently filed amendment
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("most_recent")
    public Boolean mostRecent;
    public Filings withMostRecent(Boolean mostRecent) {
        this.mostRecent = mostRecent;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("most_recent_file_number")
    public Integer mostRecentFileNumber;
    public Filings withMostRecentFileNumber(Integer mostRecentFileNumber) {
        this.mostRecentFileNumber = mostRecentFileNumber;
        return this;
    }
    
    /**
     * Net donations
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("net_donations")
    public Double netDonations;
    public Filings withNetDonations(Double netDonations) {
        this.netDonations = netDonations;
        return this;
    }
    
    /**
     * Federal office candidate runs for: H, S or P
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("office")
    public String office;
    public Filings withOffice(String office) {
        this.office = office;
        return this;
    }
    
    /**
     * Opposition personal funds
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("opposition_personal_funds")
    public Double oppositionPersonalFunds;
    public Filings withOppositionPersonalFunds(Double oppositionPersonalFunds) {
        this.oppositionPersonalFunds = oppositionPersonalFunds;
        return this;
    }
    
    /**
     * Number of pages in the document
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pages")
    public Integer pages;
    public Filings withPages(Integer pages) {
        this.pages = pages;
        return this;
    }
    
    /**
     * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("party")
    public String party;
    public Filings withParty(String party) {
        this.party = party;
        return this;
    }
    
    /**
     * pdf link to the filing
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pdf_url")
    public String pdfUrl;
    public Filings withPdfUrl(String pdfUrl) {
        this.pdfUrl = pdfUrl;
        return this;
    }
    
    /**
     * Previous filing ID number
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("previous_file_number")
    public Integer previousFileNumber;
    public Filings withPreviousFileNumber(Integer previousFileNumber) {
        this.previousFileNumber = previousFileNumber;
        return this;
    }
    
    /**
     * Primary general indicator
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primary_general_indicator")
    public String primaryGeneralIndicator;
    public Filings withPrimaryGeneralIndicator(String primaryGeneralIndicator) {
        this.primaryGeneralIndicator = primaryGeneralIndicator;
        return this;
    }
    
    /**
     * Date the FEC received the electronic or paper record
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("receipt_date")
    public LocalDate receiptDate;
    public Filings withReceiptDate(LocalDate receiptDate) {
        this.receiptDate = receiptDate;
        return this;
    }
    
    /**
     * Name of report where the underlying data comes from:
     *     - 10D Pre-Election
     *     - 10G Pre-General
     *     - 10P Pre-Primary
     *     - 10R Pre-Run-Off
     *     - 10S Pre-Special
     *     - 12C Pre-Convention
     *     - 12G Pre-General
     *     - 12P Pre-Primary
     *     - 12R Pre-Run-Off
     *     - 12S Pre-Special
     *     - 30D Post-Election
     *     - 30G Post-General
     *     - 30P Post-Primary
     *     - 30R Post-Run-Off
     *     - 30S Post-Special
     *     - 60D Post-Convention
     *     - M1  January Monthly
     *     - M10 October Monthly
     *     - M11 November Monthly
     *     - M12 December Monthly
     *     - M2  February Monthly
     *     - M3  March Monthly
     *     - M4  April Monthly
     *     - M5  May Monthly
     *     - M6  June Monthly
     *     - M7  July Monthly
     *     - M8  August Monthly
     *     - M9  September Monthly
     *     - MY  Mid-Year Report
     *     - Q1  April Quarterly
     *     - Q2  July Quarterly
     *     - Q3  October Quarterly
     *     - TER Termination Report
     *     - YE  Year-End
     *     - ADJ COMP ADJUST AMEND
     *     - CA  COMPREHENSIVE AMEND
     *     - 90S Post Inaugural Supplement
     *     - 90D Post Inaugural
     *     - 48  48 Hour Notification
     *     - 24  24 Hour Notification
     *     - M7S July Monthly/Semi-Annual
     *     - MSA Monthly Semi-Annual (MY)
     *     - MYS Monthly Year End/Semi-Annual
     *     - Q2S July Quarterly/Semi-Annual
     *     - QSA Quarterly Semi-Annual (MY)
     *     - QYS Quarterly Year End/Semi-Annual
     *     - QYE Quarterly Semi-Annual (YE)
     *     - QMS Quarterly Mid-Year/ Semi-Annual
     *     - MSY Monthly Semi-Annual (YE)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("report_type")
    public String reportType;
    public Filings withReportType(String reportType) {
        this.reportType = reportType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("report_type_full")
    public String reportTypeFull;
    public Filings withReportTypeFull(String reportTypeFull) {
        this.reportTypeFull = reportTypeFull;
        return this;
    }
    
    /**
     * Forms with coverage date - 
     *     year from the coverage ending date.
     * Forms without coverage date - 
     *     year from the receipt date.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("report_year")
    public Integer reportYear;
    public Filings withReportYear(Integer reportYear) {
        this.reportYear = reportYear;
        return this;
    }
    
    /**
     * Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:
     *     - 1 Statement of Organization
     *     - 2 Report of Receipts and Expenditures (Form 3 and 3X)
     *     - 3 Second Notice - Reports
     *     - 4 Request for Additional Information
     *     - 5 Informational - Reports
     *     - 6 Second Notice - Statement of Organization
     *     - 7 Failure to File
     *     - 8 From Public Disclosure
     *     - 9 From Multi Candidate Status
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request_type")
    public String requestType;
    public Filings withRequestType(String requestType) {
        this.requestType = requestType;
        return this;
    }
    
    /**
     * Senate personal funds
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("senate_personal_funds")
    public Double senatePersonalFunds;
    public Filings withSenatePersonalFunds(Double senatePersonalFunds) {
        this.senatePersonalFunds = senatePersonalFunds;
        return this;
    }
    
    /**
     * US state or territory where a candidate runs for office
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public String state;
    public Filings withState(String state) {
        this.state = state;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub_id")
    public String subId;
    public Filings withSubId(String subId) {
        this.subId = subId;
        return this;
    }
    
    /**
     * Total communications cost
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_communication_cost")
    public Double totalCommunicationCost;
    public Filings withTotalCommunicationCost(Double totalCommunicationCost) {
        this.totalCommunicationCost = totalCommunicationCost;
        return this;
    }
    
    /**
     * Total disbursements
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_disbursements")
    public Double totalDisbursements;
    public Filings withTotalDisbursements(Double totalDisbursements) {
        this.totalDisbursements = totalDisbursements;
        return this;
    }
    
    /**
     * Total independent expenditures
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_independent_expenditures")
    public Double totalIndependentExpenditures;
    public Filings withTotalIndependentExpenditures(Double totalIndependentExpenditures) {
        this.totalIndependentExpenditures = totalIndependentExpenditures;
        return this;
    }
    
    /**
     * Total individual contributions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_individual_contributions")
    public Double totalIndividualContributions;
    public Filings withTotalIndividualContributions(Double totalIndividualContributions) {
        this.totalIndividualContributions = totalIndividualContributions;
        return this;
    }
    
    /**
     * Total receipts
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_receipts")
    public Double totalReceipts;
    public Filings withTotalReceipts(Double totalReceipts) {
        this.totalReceipts = totalReceipts;
        return this;
    }
    
    /**
     * Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("treasurer_name")
    public String treasurerName;
    public Filings withTreasurerName(String treasurerName) {
        this.treasurerName = treasurerName;
        return this;
    }
    
    /**
     * Date the record was updated
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("update_date")
    public LocalDate updateDate;
    public Filings withUpdateDate(LocalDate updateDate) {
        this.updateDate = updateDate;
        return this;
    }
    
}
