// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UsersListSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type UsersListRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type UsersListDefaultApplicationJSONErrorCodeEnum string

const (
	UsersListDefaultApplicationJSONErrorCodeEnumBadRequest          UsersListDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	UsersListDefaultApplicationJSONErrorCodeEnumConflict            UsersListDefaultApplicationJSONErrorCodeEnum = "Conflict"
	UsersListDefaultApplicationJSONErrorCodeEnumNotAcceptable       UsersListDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	UsersListDefaultApplicationJSONErrorCodeEnumNotFound            UsersListDefaultApplicationJSONErrorCodeEnum = "NotFound"
	UsersListDefaultApplicationJSONErrorCodeEnumInternalServerError UsersListDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	UsersListDefaultApplicationJSONErrorCodeEnumUnauthorized        UsersListDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	UsersListDefaultApplicationJSONErrorCodeEnumTooManyRequests     UsersListDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *UsersListDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = UsersListDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsersListDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type UsersListDefaultApplicationJSONError struct {
	Code    UsersListDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                       `json:"message"`
}

// UsersListDefaultApplicationJSON - Error
type UsersListDefaultApplicationJSON struct {
	Error UsersListDefaultApplicationJSONError `json:"error"`
}

// UsersList200ApplicationJSONOriginEnum - The creation origin of this user
type UsersList200ApplicationJSONOriginEnum string

const (
	UsersList200ApplicationJSONOriginEnumAppcenter UsersList200ApplicationJSONOriginEnum = "appcenter"
	UsersList200ApplicationJSONOriginEnumHockeyapp UsersList200ApplicationJSONOriginEnum = "hockeyapp"
	UsersList200ApplicationJSONOriginEnumCodepush  UsersList200ApplicationJSONOriginEnum = "codepush"
)

func (e *UsersList200ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "appcenter":
		fallthrough
	case "hockeyapp":
		fallthrough
	case "codepush":
		*e = UsersList200ApplicationJSONOriginEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsersList200ApplicationJSONOriginEnum: %s", s)
	}
}

type UsersList200ApplicationJSONPermissionsEnum string

const (
	UsersList200ApplicationJSONPermissionsEnumManager   UsersList200ApplicationJSONPermissionsEnum = "manager"
	UsersList200ApplicationJSONPermissionsEnumDeveloper UsersList200ApplicationJSONPermissionsEnum = "developer"
	UsersList200ApplicationJSONPermissionsEnumViewer    UsersList200ApplicationJSONPermissionsEnum = "viewer"
	UsersList200ApplicationJSONPermissionsEnumTester    UsersList200ApplicationJSONPermissionsEnum = "tester"
)

func (e *UsersList200ApplicationJSONPermissionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "manager":
		fallthrough
	case "developer":
		fallthrough
	case "viewer":
		fallthrough
	case "tester":
		*e = UsersList200ApplicationJSONPermissionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsersList200ApplicationJSONPermissionsEnum: %s", s)
	}
}

type UsersList200ApplicationJSON struct {
	// The avatar URL of the user
	AvatarURL *string `json:"avatar_url,omitempty"`
	// User is required to send an old password in order to change the password.
	CanChangePassword *bool `json:"can_change_password,omitempty"`
	// The full name of the user. Might for example be first and last name
	DisplayName string `json:"display_name"`
	// The email address of the user
	Email string `json:"email"`
	// The unique id (UUID) of the user
	ID string `json:"id"`
	// The unique name that is used to identify the user.
	Name string `json:"name"`
	// The creation origin of this user
	Origin UsersList200ApplicationJSONOriginEnum `json:"origin"`
	// The permissions the user has for the app
	Permissions []UsersList200ApplicationJSONPermissionsEnum `json:"permissions,omitempty"`
}

type UsersListResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	UsersList200ApplicationJSONObjects []UsersList200ApplicationJSON
	// Error
	UsersListDefaultApplicationJSONObject *UsersListDefaultApplicationJSON
}
