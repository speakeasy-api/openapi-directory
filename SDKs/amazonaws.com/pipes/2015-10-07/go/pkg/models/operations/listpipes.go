// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListPipesCurrentStateEnum - The state the pipe is in.
type ListPipesCurrentStateEnum string

const (
	ListPipesCurrentStateEnumRunning      ListPipesCurrentStateEnum = "RUNNING"
	ListPipesCurrentStateEnumStopped      ListPipesCurrentStateEnum = "STOPPED"
	ListPipesCurrentStateEnumCreating     ListPipesCurrentStateEnum = "CREATING"
	ListPipesCurrentStateEnumUpdating     ListPipesCurrentStateEnum = "UPDATING"
	ListPipesCurrentStateEnumDeleting     ListPipesCurrentStateEnum = "DELETING"
	ListPipesCurrentStateEnumStarting     ListPipesCurrentStateEnum = "STARTING"
	ListPipesCurrentStateEnumStopping     ListPipesCurrentStateEnum = "STOPPING"
	ListPipesCurrentStateEnumCreateFailed ListPipesCurrentStateEnum = "CREATE_FAILED"
	ListPipesCurrentStateEnumUpdateFailed ListPipesCurrentStateEnum = "UPDATE_FAILED"
	ListPipesCurrentStateEnumStartFailed  ListPipesCurrentStateEnum = "START_FAILED"
	ListPipesCurrentStateEnumStopFailed   ListPipesCurrentStateEnum = "STOP_FAILED"
)

func (e ListPipesCurrentStateEnum) ToPointer() *ListPipesCurrentStateEnum {
	return &e
}

func (e *ListPipesCurrentStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RUNNING":
		fallthrough
	case "STOPPED":
		fallthrough
	case "CREATING":
		fallthrough
	case "UPDATING":
		fallthrough
	case "DELETING":
		fallthrough
	case "STARTING":
		fallthrough
	case "STOPPING":
		fallthrough
	case "CREATE_FAILED":
		fallthrough
	case "UPDATE_FAILED":
		fallthrough
	case "START_FAILED":
		fallthrough
	case "STOP_FAILED":
		*e = ListPipesCurrentStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPipesCurrentStateEnum: %v", v)
	}
}

// ListPipesDesiredStateEnum - The state the pipe should be in.
type ListPipesDesiredStateEnum string

const (
	ListPipesDesiredStateEnumRunning ListPipesDesiredStateEnum = "RUNNING"
	ListPipesDesiredStateEnumStopped ListPipesDesiredStateEnum = "STOPPED"
)

func (e ListPipesDesiredStateEnum) ToPointer() *ListPipesDesiredStateEnum {
	return &e
}

func (e *ListPipesDesiredStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RUNNING":
		fallthrough
	case "STOPPED":
		*e = ListPipesDesiredStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPipesDesiredStateEnum: %v", v)
	}
}

type ListPipesRequest struct {
	// The state the pipe is in.
	CurrentState *ListPipesCurrentStateEnum `queryParam:"style=form,explode=true,name=CurrentState"`
	// The state the pipe should be in.
	DesiredState *ListPipesDesiredStateEnum `queryParam:"style=form,explode=true,name=DesiredState"`
	// The maximum number of pipes to include in the response.
	Limit *int64 `queryParam:"style=form,explode=true,name=Limit"`
	// A value that will return a subset of the pipes associated with this account. For example, <code>"NamePrefix": "ABC"</code> will return all endpoints with "ABC" in the name.
	NamePrefix *string `queryParam:"style=form,explode=true,name=NamePrefix"`
	// If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
	// The prefix matching the pipe source.
	SourcePrefix *string `queryParam:"style=form,explode=true,name=SourcePrefix"`
	// The prefix matching the pipe target.
	TargetPrefix      *string `queryParam:"style=form,explode=true,name=TargetPrefix"`
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type ListPipesResponse struct {
	ContentType string
	// InternalException
	InternalException interface{}
	// Success
	ListPipesResponse *shared.ListPipesResponse
	StatusCode        int
	RawResponse       *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
