// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

type JobBlocks struct {
	Content *string `json:"content,omitempty"`
	Title   *string `json:"title,omitempty"`
}

// JobBranch - Details of the branch for which the job is created.
type JobBranch struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// Name of the branch.
	Name *string `json:"name,omitempty"`
}

type JobEmploymentTermsEnum string

const (
	JobEmploymentTermsEnumFullTime   JobEmploymentTermsEnum = "full-time"
	JobEmploymentTermsEnumPartTime   JobEmploymentTermsEnum = "part-time"
	JobEmploymentTermsEnumInternship JobEmploymentTermsEnum = "internship"
	JobEmploymentTermsEnumContractor JobEmploymentTermsEnum = "contractor"
	JobEmploymentTermsEnumEmployee   JobEmploymentTermsEnum = "employee"
	JobEmploymentTermsEnumFreelance  JobEmploymentTermsEnum = "freelance"
	JobEmploymentTermsEnumTemp       JobEmploymentTermsEnum = "temp"
	JobEmploymentTermsEnumSeasonal   JobEmploymentTermsEnum = "seasonal"
	JobEmploymentTermsEnumVolunteer  JobEmploymentTermsEnum = "volunteer"
	JobEmploymentTermsEnumOther      JobEmploymentTermsEnum = "other"
)

func (e *JobEmploymentTermsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "full-time":
		fallthrough
	case "part-time":
		fallthrough
	case "internship":
		fallthrough
	case "contractor":
		fallthrough
	case "employee":
		fallthrough
	case "freelance":
		fallthrough
	case "temp":
		fallthrough
	case "seasonal":
		fallthrough
	case "volunteer":
		fallthrough
	case "other":
		*e = JobEmploymentTermsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for JobEmploymentTermsEnum: %s", s)
	}
}

type JobHiringManagers struct {
	ID *string `json:"id,omitempty"`
}

type JobSalary struct {
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *CurrencyEnum `json:"currency,omitempty"`
	// Maximum salary payable for the job role.
	Max *int64 `json:"max,omitempty"`
	// Minimum salary payable for the job role.
	Min *int64 `json:"min,omitempty"`
}

// JobVisibilityEnum - The visibility of the job
type JobVisibilityEnum string

const (
	JobVisibilityEnumPublic   JobVisibilityEnum = "public"
	JobVisibilityEnumInternal JobVisibilityEnum = "internal"
)

func (e *JobVisibilityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "public":
		fallthrough
	case "internal":
		*e = JobVisibilityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for JobVisibilityEnum: %s", s)
	}
}

type Job struct {
	Addresses []Address `json:"addresses,omitempty"`
	// Specifies whether an employee of the organization can apply for the job.
	AvailableToEmployees *bool       `json:"available_to_employees,omitempty"`
	Blocks               []JobBlocks `json:"blocks,omitempty"`
	// Details of the branch for which the job is created.
	Branch      *JobBranch  `json:"branch,omitempty"`
	Closing     *string     `json:"closing,omitempty"`
	ClosingDate *types.Date `json:"closing_date,omitempty"`
	// The closing section of the job description in HTML format
	ClosingHTML *string `json:"closing_html,omitempty"`
	// The code of the job.
	Code         *string `json:"code,omitempty"`
	Confidential *bool   `json:"confidential,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The user who created the object.
	CreatedBy  *string     `json:"created_by,omitempty"`
	Deleted    *bool       `json:"deleted,omitempty"`
	Department *Department `json:"department,omitempty"`
	// A description of the object.
	Description *string `json:"description,omitempty"`
	// The job description in HTML format
	DescriptionHTML *string                 `json:"description_html,omitempty"`
	EmploymentTerms *JobEmploymentTermsEnum `json:"employment_terms,omitempty"`
	// Level of experience required for the job role.
	Experience     *string             `json:"experience,omitempty"`
	Followers      []string            `json:"followers,omitempty"`
	HiringManagers []JobHiringManagers `json:"hiring_managers,omitempty"`
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// URL of the job portal
	JobPortalURL *string `json:"job_portal_url,omitempty"`
	// language code according to ISO 639-1. For the United States - EN
	Language    *string    `json:"language,omitempty"`
	OwnerID     *string    `json:"owner_id,omitempty"`
	PublishedAt *time.Time `json:"published_at,omitempty"`
	RecordURL   *string    `json:"record_url,omitempty"`
	// The recruiter is generally someone who is tasked to help the hiring manager find and screen qualified applicant
	Recruiters []string `json:"recruiters,omitempty"`
	// Specifies whether the posting is for a remote job.
	Remote *bool `json:"remote,omitempty"`
	// A job's Requisition ID (Req ID) allows your organization to identify and track a job based on alphanumeric naming conventions unique to your company's internal processes.
	RequisitionID *string    `json:"requisition_id,omitempty"`
	Salary        *JobSalary `json:"salary,omitempty"`
	// Sequence in relation to other jobs.
	Sequence *int64  `json:"sequence,omitempty"`
	Slug     *string `json:"slug,omitempty"`
	// The status of the job.
	Status *JobStatusEnum `json:"status,omitempty"`
	Tags   []string       `json:"tags,omitempty"`
	// The job title of the person.
	Title *string `json:"title,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// URL of the job description
	URL *string `json:"url,omitempty"`
	// The visibility of the job
	Visibility *JobVisibilityEnum `json:"visibility,omitempty"`
}
