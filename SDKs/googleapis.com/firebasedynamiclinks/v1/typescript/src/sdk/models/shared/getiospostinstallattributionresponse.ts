/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * The confidence of the returned attribution.
 */
export enum GetIosPostInstallAttributionResponseAttributionConfidenceEnum {
  UnknownAttributionConfidence = "UNKNOWN_ATTRIBUTION_CONFIDENCE",
  Weak = "WEAK",
  Default = "DEFAULT",
  Unique = "UNIQUE",
}

/**
 * Which IP version the request was made from.
 */
export enum GetIosPostInstallAttributionResponseRequestIpVersionEnum {
  UnknownIpVersion = "UNKNOWN_IP_VERSION",
  IpV4 = "IP_V4",
  IpV6 = "IP_V6",
}

/**
 * Response for iSDK to execute strong match flow for post-install attribution.
 */
export class GetIosPostInstallAttributionResponse extends SpeakeasyBase {
  /**
   * The minimum version for app, specified by dev through ?imv= parameter. Return to iSDK to allow app to evaluate if current version meets this.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "appMinimumVersion" })
  appMinimumVersion?: string;

  /**
   * The confidence of the returned attribution.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "attributionConfidence" })
  attributionConfidence?: GetIosPostInstallAttributionResponseAttributionConfidenceEnum;

  /**
   * The deep-link attributed post-install via one of several techniques (fingerprint, copy unique).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deepLink" })
  deepLink?: string;

  /**
   * User-agent specific custom-scheme URIs for iSDK to open. This will be set according to the user-agent tha the click was originally made in. There is no Safari-equivalent custom-scheme open URLs. ie: googlechrome://www.example.com ie: firefox://open-url?url=http://www.example.com ie: opera-http://example.com
   */
  @SpeakeasyMetadata()
  @Expose({ name: "externalBrowserDestinationLink" })
  externalBrowserDestinationLink?: string;

  /**
   * The link to navigate to update the app if min version is not met. This is either (in order): 1) fallback link (from ?ifl= parameter, if specified by developer) or 2) AppStore URL (from ?isi= parameter, if specified), or 3) the payload link (from required link= parameter).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fallbackLink" })
  fallbackLink?: string;

  /**
   * Invitation ID attributed post-install via one of several techniques (fingerprint, copy unique).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "invitationId" })
  invitationId?: string;

  /**
   * Instruction for iSDK to attemmpt to perform strong match. For instance, if browser does not support/allow cookie or outside of support browsers, this will be false.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isStrongMatchExecutable" })
  isStrongMatchExecutable?: boolean;

  /**
   * Describes why match failed, ie: "discarded due to low confidence". This message will be publicly visible.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "matchMessage" })
  matchMessage?: string;

  /**
   * Which IP version the request was made from.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestIpVersion" })
  requestIpVersion?: GetIosPostInstallAttributionResponseRequestIpVersionEnum;

  /**
   * Entire FDL (short or long) attributed post-install via one of several techniques (fingerprint, copy unique).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestedLink" })
  requestedLink?: string;

  /**
   * The entire FDL, expanded from a short link. It is the same as the requested_link, if it is long. Parameters from this should not be used directly (ie: server can default utm_[campaign|medium|source] to a value when requested_link lack them, server determine the best fallback_link when requested_link specifies >1 fallback links).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resolvedLink" })
  resolvedLink?: string;

  /**
   * Scion campaign value to be propagated by iSDK to Scion at post-install.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "utmCampaign" })
  utmCampaign?: string;

  /**
   * Scion content value to be propagated by iSDK to Scion at app-reopen.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "utmContent" })
  utmContent?: string;

  /**
   * Scion medium value to be propagated by iSDK to Scion at post-install.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "utmMedium" })
  utmMedium?: string;

  /**
   * Scion source value to be propagated by iSDK to Scion at post-install.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "utmSource" })
  utmSource?: string;

  /**
   * Scion term value to be propagated by iSDK to Scion at app-reopen.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "utmTerm" })
  utmTerm?: string;
}
