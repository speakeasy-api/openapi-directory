"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import filteroperation_enum as shared_filteroperation_enum
from ..shared import filtervalue as shared_filtervalue
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FilterExpression:
    r"""Specifies a filter expression."""
    
    operation: shared_filteroperation_enum.FilterOperationEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Operation') }})  
    values: list[shared_filtervalue.FilterValue] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Values') }})  
    negated: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Negated'), 'exclude': lambda f: f is None }})  
    