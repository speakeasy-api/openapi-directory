// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"net/http"
	"openapi/pkg/utils"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	"http://discourse.local",
	"https://{defaultHost}",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// SDK - This page contains the documentation on how to use Discourse through API calls.
//
// > Note: For any endpoints not listed you can follow the
// [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576)
// guide to figure out how to use an API endpoint.
//
// ### Request Content-Type
//
// The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`,
// `multipart/form-data`, or `application/json`.
//
// ### Endpoint Names and Response Content-Type
//
// Most API endpoints provide the same content as their HTML counterparts. For example
// the URL `/categories` serves a list of categories, the `/categories.json` API provides the
// same information in JSON format.
//
// Instead of sending API requests to `/categories.json` you may also send them to `/categories`
// and add an `Accept: application/json` header to the request to get the JSON response.
// Sending requests with the `Accept` header is necessary if you want to use URLs
// for related endpoints returned by the API, such as pagination URLs.
// These URLs are returned without the `.json` prefix so you need to add the header in
// order to get the correct response format.
//
// ### Authentication
//
// Some endpoints do not require any authentication, pretty much anything else will
// require you to be authenticated.
//
// To become authenticated you will need to create an API Key from the admin panel.
//
// Once you have your API Key you can pass it in along with your API Username
// as an HTTP header like this:
//
// ```
// curl -X GET "http://127.0.0.1:3000/admin/users/list/active.json" \
// -H "Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19" \
// -H "Api-Username: system"
// ```
//
// and this is how POST requests will look:
//
// ```
// curl -X POST "http://127.0.0.1:3000/categories" \
// -H "Content-Type: multipart/form-data;" \
// -H "Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19" \
// -H "Api-Username: system" \
// -F "name=89853c20-4409-e91a-a8ea-f6cdff96aaaa" \
// -F "color=49d9e9" \
// -F "text_color=f0fcfd"
// ```
//
// ### Boolean values
//
// If an endpoint accepts a boolean be sure to specify it as a lowercase
// `true` or `false` value unless noted otherwise.
type SDK struct {
	Admin           *admin
	Backups         *backups
	Badges          *badges
	Categories      *categories
	Groups          *groups
	Invites         *invites
	Notifications   *notifications
	Posts           *posts
	PrivateMessages *privateMessages
	Search          *search
	Site            *site
	Tags            *tags
	Topics          *topics
	Uploads         *uploads
	Users           *users

	// Non-idiomatic field names below are to namespace fields from the fields names above to avoid name conflicts
	_defaultClient  HTTPClient
	_securityClient HTTPClient

	_serverURL  string
	_language   string
	_sdkVersion string
	_genVersion string
}

type SDKOption func(*SDK)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *SDK) {
		sdk._serverURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *SDK) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk._serverURL = serverURL
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *SDK) {
		sdk._defaultClient = client
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *SDK {
	sdk := &SDK{
		_language:   "go",
		_sdkVersion: "0.0.1",
		_genVersion: "internal",
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk._defaultClient == nil {
		sdk._defaultClient = &http.Client{Timeout: 60 * time.Second}
	}
	if sdk._securityClient == nil {
		sdk._securityClient = sdk._defaultClient
	}

	if sdk._serverURL == "" {
		sdk._serverURL = ServerList[0]
	}

	sdk.Admin = newAdmin(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Backups = newBackups(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Badges = newBadges(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Categories = newCategories(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Groups = newGroups(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Invites = newInvites(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Notifications = newNotifications(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Posts = newPosts(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.PrivateMessages = newPrivateMessages(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Search = newSearch(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Site = newSite(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Tags = newTags(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Topics = newTopics(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Uploads = newUploads(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Users = newUsers(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	return sdk
}
