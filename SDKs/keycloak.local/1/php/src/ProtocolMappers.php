<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ProtocolMappers 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete the mapper
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientScopesId1ProtocolMappersModelsId2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientScopesId1ProtocolMappersModelsId2Response
     */
	public function deleteRealmClientScopesId1ProtocolMappersModelsId2(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientScopesId1ProtocolMappersModelsId2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientScopesId1ProtocolMappersModelsId2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientScopesId1ProtocolMappersModelsId2Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientScopesId1ProtocolMappersModelsId2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Delete the mapper
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsId1ProtocolMappersModelsId2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsId1ProtocolMappersModelsId2Response
     */
	public function deleteRealmClientsId1ProtocolMappersModelsId2(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsId1ProtocolMappersModelsId2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsId1ProtocolMappersModelsId2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id1}/protocol-mappers/models/{id2}', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsId1ProtocolMappersModelsId2Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsId1ProtocolMappersModelsId2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Get mapper by id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesId1ProtocolMappersModelsId2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesId1ProtocolMappersModelsId2Response
     */
	public function getRealmClientScopesId1ProtocolMappersModelsId2(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesId1ProtocolMappersModelsId2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesId1ProtocolMappersModelsId2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesId1ProtocolMappersModelsId2Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesId1ProtocolMappersModelsId2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMapperRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProtocolMapperRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get mappers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdProtocolMappersModelsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdProtocolMappersModelsResponse
     */
	public function getRealmClientScopesIdProtocolMappersModels(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdProtocolMappersModelsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdProtocolMappersModelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/client-scopes/{id}/protocol-mappers/models', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdProtocolMappersModelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdProtocolMappersModelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMapperRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ProtocolMapperRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get mappers by name for a specific protocol
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdProtocolMappersProtocolProtocolRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdProtocolMappersProtocolProtocolResponse
     */
	public function getRealmClientScopesIdProtocolMappersProtocolProtocol(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdProtocolMappersProtocolProtocolRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdProtocolMappersProtocolProtocolResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/client-scopes/{id}/protocol-mappers/protocol/{protocol}', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdProtocolMappersProtocolProtocolRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientScopesIdProtocolMappersProtocolProtocolResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMapperRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ProtocolMapperRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get mapper by id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsId1ProtocolMappersModelsId2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsId1ProtocolMappersModelsId2Response
     */
	public function getRealmClientsId1ProtocolMappersModelsId2(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsId1ProtocolMappersModelsId2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsId1ProtocolMappersModelsId2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id1}/protocol-mappers/models/{id2}', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsId1ProtocolMappersModelsId2Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsId1ProtocolMappersModelsId2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMapperRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProtocolMapperRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get mappers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdProtocolMappersModelsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdProtocolMappersModelsResponse
     */
	public function getRealmClientsIdProtocolMappersModels(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdProtocolMappersModelsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdProtocolMappersModelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/protocol-mappers/models', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdProtocolMappersModelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdProtocolMappersModelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMapperRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ProtocolMapperRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get mappers by name for a specific protocol
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdProtocolMappersProtocolProtocolRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdProtocolMappersProtocolProtocolResponse
     */
	public function getRealmClientsIdProtocolMappersProtocolProtocol(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdProtocolMappersProtocolProtocolRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdProtocolMappersProtocolProtocolResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/protocol-mappers/protocol/{protocol}', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdProtocolMappersProtocolProtocolRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdProtocolMappersProtocolProtocolResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMapperRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ProtocolMapperRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create multiple mappers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmClientScopesIdProtocolMappersAddModelsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmClientScopesIdProtocolMappersAddModelsResponse
     */
	public function postRealmClientScopesIdProtocolMappersAddModels(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmClientScopesIdProtocolMappersAddModelsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmClientScopesIdProtocolMappersAddModelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/client-scopes/{id}/protocol-mappers/add-models', \OpenAPI\OpenAPI\Models\Operations\PostRealmClientScopesIdProtocolMappersAddModelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmClientScopesIdProtocolMappersAddModelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Create a mapper
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmClientScopesIdProtocolMappersModelsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmClientScopesIdProtocolMappersModelsResponse
     */
	public function postRealmClientScopesIdProtocolMappersModels(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmClientScopesIdProtocolMappersModelsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmClientScopesIdProtocolMappersModelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/client-scopes/{id}/protocol-mappers/models', \OpenAPI\OpenAPI\Models\Operations\PostRealmClientScopesIdProtocolMappersModelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "protocolMapperRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmClientScopesIdProtocolMappersModelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Create multiple mappers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdProtocolMappersAddModelsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdProtocolMappersAddModelsResponse
     */
	public function postRealmClientsIdProtocolMappersAddModels(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdProtocolMappersAddModelsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdProtocolMappersAddModelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/protocol-mappers/add-models', \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdProtocolMappersAddModelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdProtocolMappersAddModelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Create a mapper
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdProtocolMappersModelsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdProtocolMappersModelsResponse
     */
	public function postRealmClientsIdProtocolMappersModels(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdProtocolMappersModelsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdProtocolMappersModelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/protocol-mappers/models', \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdProtocolMappersModelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "protocolMapperRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdProtocolMappersModelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Update the mapper
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRealmClientScopesId1ProtocolMappersModelsId2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRealmClientScopesId1ProtocolMappersModelsId2Response
     */
	public function putRealmClientScopesId1ProtocolMappersModelsId2(
        \OpenAPI\OpenAPI\Models\Operations\PutRealmClientScopesId1ProtocolMappersModelsId2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRealmClientScopesId1ProtocolMappersModelsId2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}', \OpenAPI\OpenAPI\Models\Operations\PutRealmClientScopesId1ProtocolMappersModelsId2Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "protocolMapperRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRealmClientScopesId1ProtocolMappersModelsId2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Update the mapper
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsId1ProtocolMappersModelsId2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsId1ProtocolMappersModelsId2Response
     */
	public function putRealmClientsId1ProtocolMappersModelsId2(
        \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsId1ProtocolMappersModelsId2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsId1ProtocolMappersModelsId2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id1}/protocol-mappers/models/{id2}', \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsId1ProtocolMappersModelsId2Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "protocolMapperRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsId1ProtocolMappersModelsId2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
}