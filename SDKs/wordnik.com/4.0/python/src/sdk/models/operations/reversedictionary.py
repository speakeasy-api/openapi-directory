"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class ReverseDictionaryExcludeSourceDictionariesEnum(str, Enum):
    r"""Exclude these comma-delimited source dictionaries"""
    AHD_5 = 'ahd-5'
    CENTURY = 'century'
    CMU = 'cmu'
    MACMILLAN = 'macmillan'
    WIKTIONARY = 'wiktionary'
    WEBSTER = 'webster'
    WORDNET = 'wordnet'

class ReverseDictionaryIncludeSourceDictionariesEnum(str, Enum):
    r"""Only include these comma-delimited source dictionaries"""
    AHD_5 = 'ahd-5'
    CENTURY = 'century'
    CMU = 'cmu'
    MACMILLAN = 'macmillan'
    WIKTIONARY = 'wiktionary'
    WEBSTER = 'webster'
    WORDNET = 'wordnet'

class ReverseDictionaryIncludeTagsEnum(str, Enum):
    r"""Return a closed set of XML tags in response"""
    FALSE = 'false'
    TRUE = 'true'

class ReverseDictionarySortByEnum(str, Enum):
    r"""Attribute to sort by"""
    ALPHA = 'alpha'
    COUNT = 'count'

class ReverseDictionarySortOrderEnum(str, Enum):
    r"""Sort direction"""
    ASC = 'asc'
    DESC = 'desc'


@dataclasses.dataclass
class ReverseDictionaryRequest:
    
    query: str = dataclasses.field(metadata={'query_param': { 'field_name': 'query', 'style': 'form', 'explode': True }})
    r"""Search term"""  
    exclude_part_of_speech: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'excludePartOfSpeech', 'style': 'form', 'explode': True }})
    r"""Exclude these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)"""  
    exclude_source_dictionaries: Optional[ReverseDictionaryExcludeSourceDictionariesEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'excludeSourceDictionaries', 'style': 'form', 'explode': True }})
    r"""Exclude these comma-delimited source dictionaries"""  
    expand_terms: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'expandTerms', 'style': 'form', 'explode': True }})
    r"""Expand terms"""  
    find_sense_for_word: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'findSenseForWord', 'style': 'form', 'explode': True }})
    r"""Restricts words and finds closest sense"""  
    include_part_of_speech: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includePartOfSpeech', 'style': 'form', 'explode': True }})
    r"""Only include these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)"""  
    include_source_dictionaries: Optional[ReverseDictionaryIncludeSourceDictionariesEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includeSourceDictionaries', 'style': 'form', 'explode': True }})
    r"""Only include these comma-delimited source dictionaries"""  
    include_tags: Optional[ReverseDictionaryIncludeTagsEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includeTags', 'style': 'form', 'explode': True }})
    r"""Return a closed set of XML tags in response"""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Maximum number of results to return"""  
    max_corpus_count: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxCorpusCount', 'style': 'form', 'explode': True }})
    r"""Maximum corpus frequency for terms"""  
    max_length: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxLength', 'style': 'form', 'explode': True }})
    r"""Maximum word length"""  
    min_corpus_count: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'minCorpusCount', 'style': 'form', 'explode': True }})
    r"""Minimum corpus frequency for terms"""  
    min_length: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'minLength', 'style': 'form', 'explode': True }})
    r"""Minimum word length"""  
    skip: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'skip', 'style': 'form', 'explode': True }})
    r"""Results to skip"""  
    sort_by: Optional[ReverseDictionarySortByEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sortBy', 'style': 'form', 'explode': True }})
    r"""Attribute to sort by"""  
    sort_order: Optional[ReverseDictionarySortOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sortOrder', 'style': 'form', 'explode': True }})
    r"""Sort direction"""  
    

@dataclasses.dataclass
class ReverseDictionaryResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    