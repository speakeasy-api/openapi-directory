"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import changesattachment as shared_changesattachment
from ..shared import clientprofiledata as shared_clientprofiledata
from ..shared import marketplace as shared_marketplace
from ..shared import paymentdata as shared_paymentdata
from ..shared import ratesandbenefitsdata as shared_ratesandbenefitsdata
from ..shared import seller as shared_seller
from ..shared import shippingdata as shared_shippingdata
from ..shared import storepreferencesdata as shared_storepreferencesdata
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class GetOrder2Request:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Type of the content being sent."""  
    order_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'orderId', 'style': 'simple', 'explode': False }})
    r"""ID of the order."""  
    reason: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'reason', 'style': 'form', 'explode': True }})
    r"""Reason for requesting unmasked data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrder2200ApplicationJSONItemsAdditionalInfo:
    r"""Additional information."""
    
    brand_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brandId'), 'exclude': lambda f: f is None }})
    r"""Brand ID."""  
    brand_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brandName'), 'exclude': lambda f: f is None }})
    r"""Brand name."""  
    dimension: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dimension'), 'exclude': lambda f: f is None }})
    r"""Dimension."""  
    offering_info: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offeringInfo'), 'exclude': lambda f: f is None }})
    r"""Offering information."""  
    offering_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offeringType'), 'exclude': lambda f: f is None }})
    r"""Offering type."""  
    offering_type_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offeringTypeId'), 'exclude': lambda f: f is None }})
    r"""Offering type ID."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrder2200ApplicationJSONItemsBundleItems:
    
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Service identifier."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name."""  
    price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""Price in cents."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrder2200ApplicationJSONItemsPriceDefinitionSellingPrices:
    
    quantity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""Quantity."""  
    value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Value in cents."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrder2200ApplicationJSONItemsPriceDefinition:
    r"""Price information."""
    
    calculated_selling_price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calculatedSellingPrice'), 'exclude': lambda f: f is None }})
    r"""Calculated selling price in cents."""  
    selling_prices: Optional[list[GetOrder2200ApplicationJSONItemsPriceDefinitionSellingPrices]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellingPrices'), 'exclude': lambda f: f is None }})
    r"""Selling prices."""  
    total: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})
    r"""Total in cents."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrder2200ApplicationJSONItemsPriceTags:
    
    identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identifier'), 'exclude': lambda f: f is None }})
    r"""Price tag identifier."""  
    is_percentual: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPercentual'), 'exclude': lambda f: f is None }})
    r"""Indicates whether price tag value is applied through a percentage."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name."""  
    raw_value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rawValue'), 'exclude': lambda f: f is None }})
    r"""Raw value."""  
    value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Value."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrder2200ApplicationJSONItemsProductCategories:
    r"""Object, where each field is an ID from `productCategoryIds."""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('{ID}'), 'exclude': lambda f: f is None }})
    r"""Product category corresponding to the ID in the field key."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrder2200ApplicationJSONItems:
    
    additional_info: Optional[GetOrder2200ApplicationJSONItemsAdditionalInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalInfo'), 'exclude': lambda f: f is None }})
    r"""Additional information."""  
    attachments: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attachments'), 'exclude': lambda f: f is None }})
    r"""Array containing information on attachments."""  
    availability: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availability'), 'exclude': lambda f: f is None }})
    r"""Availability"""  
    bundle_items: Optional[list[GetOrder2200ApplicationJSONItemsBundleItems]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bundleItems'), 'exclude': lambda f: f is None }})
    r"""Information on services sold along with the SKU. Example: a gift package."""  
    detail_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detailUrl'), 'exclude': lambda f: f is None }})
    r"""Detail URL."""  
    ean: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ean'), 'exclude': lambda f: f is None }})
    r"""European Article Number."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID."""  
    image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageUrl'), 'exclude': lambda f: f is None }})
    r"""Image URL."""  
    is_gift: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isGift'), 'exclude': lambda f: f is None }})
    r"""Indicates whether item is a gift."""  
    list_price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listPrice'), 'exclude': lambda f: f is None }})
    r"""List price in cents."""  
    manual_price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manualPrice'), 'exclude': lambda f: f is None }})
    r"""Manual price in cents."""  
    manual_price_applied_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manualPriceAppliedBy'), 'exclude': lambda f: f is None }})
    r"""User that applied the manual price, if that is the case."""  
    manufacturer_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manufacturerCode'), 'exclude': lambda f: f is None }})
    r"""Manufacturer code."""  
    measurement_unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('measurementUnit'), 'exclude': lambda f: f is None }})
    r"""Measurement unit"""  
    modal_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modalType'), 'exclude': lambda f: f is None }})
    r"""Modal type."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name."""  
    parent_assembly_binding: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentAssemblyBinding'), 'exclude': lambda f: f is None }})
    r"""Parent assembly binding."""  
    parent_item_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentItemIndex'), 'exclude': lambda f: f is None }})
    r"""Parent item index."""  
    pre_sale_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preSaleDate'), 'exclude': lambda f: f is None }})
    r"""Presale date."""  
    price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""Price in cents."""  
    price_definition: Optional[GetOrder2200ApplicationJSONItemsPriceDefinition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceDefinition'), 'exclude': lambda f: f is None }})
    r"""Price information."""  
    price_tags: Optional[list[GetOrder2200ApplicationJSONItemsPriceTags]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceTags'), 'exclude': lambda f: f is None }})
    r"""Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order."""  
    price_valid_until: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceValidUntil'), 'exclude': lambda f: f is None }})
    r"""Price expiration date and time."""  
    product_categories: Optional[GetOrder2200ApplicationJSONItemsProductCategories] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productCategories'), 'exclude': lambda f: f is None }})
    r"""Object, where each field is an ID from `productCategoryIds."""  
    product_category_ids: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productCategoryIds'), 'exclude': lambda f: f is None }})
    r"""Product category IDs."""  
    product_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productId'), 'exclude': lambda f: f is None }})
    r"""Product ID."""  
    product_ref_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productRefId'), 'exclude': lambda f: f is None }})
    r"""Product Ref ID."""  
    quantity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""Quantity."""  
    ref_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refId'), 'exclude': lambda f: f is None }})
    r"""Ref ID."""  
    reward_value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rewardValue'), 'exclude': lambda f: f is None }})
    r"""Reward value in cents."""  
    seller: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seller'), 'exclude': lambda f: f is None }})
    r"""Seller."""  
    seller_chain: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellerChain'), 'exclude': lambda f: f is None }})
    r"""Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/pt/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order."""  
    selling_price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellingPrice'), 'exclude': lambda f: f is None }})
    r"""Selling price in cents. Note that this field may be subject to rounding discrepancies. We recommend retrieving data from the `priceDefinition` data structure instead."""  
    sku_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skuName'), 'exclude': lambda f: f is None }})
    r"""SKU name."""  
    tax: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax'), 'exclude': lambda f: f is None }})
    r"""Tax value in cents."""  
    unique_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uniqueId'), 'exclude': lambda f: f is None }})
    r"""Order's item unique ID."""  
    unit_multiplier: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unitMultiplier'), 'exclude': lambda f: f is None }})
    r"""Unit multiplier"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrder2200ApplicationJSONPackageAttachmentPackagesItems:
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Item description."""  
    item_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemIndex'), 'exclude': lambda f: f is None }})
    r"""Item index in reference to the position of the item in the `items` array."""  
    price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""Item price in cents."""  
    quantity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""Item quantity."""  
    unit_multiplier: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unitMultiplier'), 'exclude': lambda f: f is None }})
    r"""Item unit multiplier."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrder2200ApplicationJSONPackageAttachmentPackagesRestitutionsRefundItems:
    
    item_index: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemIndex'), 'exclude': lambda f: f is None }})
    r"""Item index corresponding to the position of the item in the main `items` array."""  
    quantity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""Quantity."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrder2200ApplicationJSONPackageAttachmentPackagesRestitutionsRefund:
    r"""Information on refunds."""
    
    items: Optional[list[GetOrder2200ApplicationJSONPackageAttachmentPackagesRestitutionsRefundItems]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('items'), 'exclude': lambda f: f is None }})
    r"""Information on items."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrder2200ApplicationJSONPackageAttachmentPackagesRestitutions:
    r"""Information on how restitutions are to be made to the customer, in case of a return (invoice `type` is `input`)."""
    
    refund: Optional[GetOrder2200ApplicationJSONPackageAttachmentPackagesRestitutionsRefund] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refund'), 'exclude': lambda f: f is None }})
    r"""Information on refunds."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrder2200ApplicationJSONPackageAttachmentPackages:
    
    cfop: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cfop'), 'exclude': lambda f: f is None }})
    r"""Fiscal operation code."""  
    courier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('courier'), 'exclude': lambda f: f is None }})
    r"""Courier."""  
    courier_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('courierStatus'), 'exclude': lambda f: f is None }})
    r"""Courier status."""  
    embedded_invoice: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embeddedInvoice'), 'exclude': lambda f: f is None }})
    r"""Embedded voice in XML."""  
    invoice_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invoiceKey'), 'exclude': lambda f: f is None }})
    r"""Invoice key."""  
    invoice_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invoiceNumber'), 'exclude': lambda f: f is None }})
    r"""Invoice number."""  
    invoice_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invoiceUrl'), 'exclude': lambda f: f is None }})
    r"""Invoice URL."""  
    invoice_value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invoiceValue'), 'exclude': lambda f: f is None }})
    r"""Invoice value in cents."""  
    issuance_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issuanceDate'), 'exclude': lambda f: f is None }})
    r"""Issuance date."""  
    items: Optional[list[GetOrder2200ApplicationJSONPackageAttachmentPackagesItems]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('items'), 'exclude': lambda f: f is None }})
    r"""Information on each item in the package."""  
    restitutions: Optional[GetOrder2200ApplicationJSONPackageAttachmentPackagesRestitutions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('restitutions'), 'exclude': lambda f: f is None }})
    r"""Information on how restitutions are to be made to the customer, in case of a return (invoice `type` is `input`)."""  
    tracking_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trackingNumber'), 'exclude': lambda f: f is None }})
    r"""Tracking number."""  
    tracking_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trackingUrl'), 'exclude': lambda f: f is None }})
    r"""Tracking URL."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Invoice type `Output` for sales and `Input` for returns."""  
    volumes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('volumes'), 'exclude': lambda f: f is None }})
    r"""Quantity of packages involved in the order."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrder2200ApplicationJSONPackageAttachment:
    r"""Package attachment."""
    
    packages: Optional[list[GetOrder2200ApplicationJSONPackageAttachmentPackages]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packages'), 'exclude': lambda f: f is None }})
    r"""Information on each package."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrder2200ApplicationJSONTotals:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Order's total ID."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Order's total name."""  
    value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Order's total value."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrder2200ApplicationJSON:
    r"""OK"""
    
    affiliate_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('affiliateId'), 'exclude': lambda f: f is None }})
    r"""Three letter code identifying the marketplace where the order was placed."""  
    allow_cancellation: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowCancellation'), 'exclude': lambda f: f is None }})
    r"""Indicates whether cancelation is allowed for the order."""  
    allow_edition: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowEdition'), 'exclude': lambda f: f is None }})
    r"""Indicates whether edition is allowed for the order."""  
    approved_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approvedBy'), 'exclude': lambda f: f is None }})
    r"""User that approved the order, in case of manual approval."""  
    authorized_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorizedDate'), 'exclude': lambda f: f is None }})
    r"""Date in which the order was authorized in UTC."""  
    call_center_operator_data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callCenterOperatorData'), 'exclude': lambda f: f is None }})
    r"""Call center operator data."""  
    cancelled_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cancelledBy'), 'exclude': lambda f: f is None }})
    r"""User that canceled the order."""  
    cancel_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cancelReason'), 'exclude': lambda f: f is None }})
    r"""Reason for cancelation."""  
    changes_attachment: Optional[shared_changesattachment.ChangesAttachment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('changesAttachment'), 'exclude': lambda f: f is None }})  
    client_profile_data: Optional[shared_clientprofiledata.ClientProfileData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientProfileData'), 'exclude': lambda f: f is None }})  
    commercial_condition_data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commercialConditionData'), 'exclude': lambda f: f is None }})
    r"""Commercial condition data."""  
    creation_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationDate'), 'exclude': lambda f: f is None }})
    r"""Creation date."""  
    custom_data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customData'), 'exclude': lambda f: f is None }})
    r"""Custom data."""  
    email_tracked: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emailTracked'), 'exclude': lambda f: f is None }})
    r"""Email tracked."""  
    follow_up_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('followUpEmail'), 'exclude': lambda f: f is None }})
    r"""Follow up email."""  
    gift_registry_data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('giftRegistryData'), 'exclude': lambda f: f is None }})
    r"""Gift registry data."""  
    hostname: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hostname'), 'exclude': lambda f: f is None }})
    r"""Host name."""  
    invoice_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invoiceData'), 'exclude': lambda f: f is None }})
    r"""Information pertinent to the order's invoice."""  
    invoiced_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invoicedDate'), 'exclude': lambda f: f is None }})
    r"""Date in which the order was invoiced in UTC."""  
    is_checked_in: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isCheckedIn'), 'exclude': lambda f: f is None }})
    r"""Indicates whether client is checked in."""  
    is_completed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isCompleted'), 'exclude': lambda f: f is None }})
    r"""Indicates whether order is completed."""  
    items: Optional[list[GetOrder2200ApplicationJSONItems]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('items'), 'exclude': lambda f: f is None }})
    r"""Information on each item in the order."""  
    last_change: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastChange'), 'exclude': lambda f: f is None }})
    r"""Date of last change."""  
    last_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastMessage'), 'exclude': lambda f: f is None }})
    r"""Last message."""  
    marketing_data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketingData'), 'exclude': lambda f: f is None }})
    r"""Marketing data."""  
    marketplace: Optional[shared_marketplace.Marketplace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketplace'), 'exclude': lambda f: f is None }})  
    marketplace_items: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketplaceItems'), 'exclude': lambda f: f is None }})
    r"""Marketplace items."""  
    marketplace_order_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketplaceOrderId'), 'exclude': lambda f: f is None }})
    r"""ID of the order in the marketplace."""  
    marketplace_services_endpoint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketplaceServicesEndpoint'), 'exclude': lambda f: f is None }})
    r"""Marketplace endpoint for post purchase communication."""  
    merchant_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantName'), 'exclude': lambda f: f is None }})
    r"""Merchant name."""  
    open_text_field: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('openTextField'), 'exclude': lambda f: f is None }})
    r"""Open text field."""  
    order_form_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderFormId'), 'exclude': lambda f: f is None }})
    r"""ID of the shopping cart from which the order was created."""  
    order_group: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderGroup'), 'exclude': lambda f: f is None }})
    r"""Order group."""  
    order_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderId'), 'exclude': lambda f: f is None }})
    r"""Order ID."""  
    origin: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('origin'), 'exclude': lambda f: f is None }})
    r"""Origin."""  
    package_attachment: Optional[GetOrder2200ApplicationJSONPackageAttachment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packageAttachment'), 'exclude': lambda f: f is None }})
    r"""Package attachment."""  
    payment_data: Optional[shared_paymentdata.PaymentData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentData'), 'exclude': lambda f: f is None }})  
    rates_and_benefits_data: Optional[shared_ratesandbenefitsdata.RatesAndBenefitsData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ratesAndBenefitsData'), 'exclude': lambda f: f is None }})  
    rounding_error: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roundingError'), 'exclude': lambda f: f is None }})
    r"""Rounding error in cents."""  
    sales_channel: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('salesChannel'), 'exclude': lambda f: f is None }})
    r"""Sales channel."""  
    seller_order_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellerOrderId'), 'exclude': lambda f: f is None }})
    r"""Seller order ID."""  
    sellers: Optional[list[shared_seller.Seller]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellers'), 'exclude': lambda f: f is None }})
    r"""Array with sellers information."""  
    sequence: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sequence'), 'exclude': lambda f: f is None }})
    r"""Sequence number."""  
    shipping_data: Optional[shared_shippingdata.ShippingData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shippingData'), 'exclude': lambda f: f is None }})  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status in the order workflow."""  
    status_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusDescription'), 'exclude': lambda f: f is None }})
    r"""Status description which is displayed on the Admin panel."""  
    store_preferences_data: Optional[shared_storepreferencesdata.StorePreferencesData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storePreferencesData'), 'exclude': lambda f: f is None }})  
    totals: Optional[list[GetOrder2200ApplicationJSONTotals]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totals'), 'exclude': lambda f: f is None }})
    r"""Information on each of the order's totals."""  
    value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Value in cents."""  
    

@dataclasses.dataclass
class GetOrder2Response:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_order2_200_application_json_object: Optional[GetOrder2200ApplicationJSON] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    