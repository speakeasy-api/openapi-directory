"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ListChannelMembersSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class ListChannelMembersRequest:
    
    channel_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'channelId', 'style': 'simple', 'explode': False }})
    r"""Channel Id."""  
    user_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'userId', 'style': 'simple', 'explode': False }})
    r"""Unique identifier of the user who is the owner of this channel."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of records returned with a single API call."""  
    
class ListChannelMembers200ApplicationXMLMembersRoleEnum(str, Enum):
    r"""The role of the member. The value can be one of these: `owner`, `admin`, `member`."""
    ADMIN = 'admin'
    OWNER = 'owner'
    MEMBER = 'member'


@dataclasses.dataclass
class ListChannelMembers200ApplicationXMLMembers:
    
    email: Optional[str] = dataclasses.field(default=None)
    r"""Email address of the member."""  
    first_name: Optional[str] = dataclasses.field(default=None)
    r"""Member's first name."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""Member ID: Unique Identifier of the member."""  
    last_name: Optional[str] = dataclasses.field(default=None)
    r"""Member's last name."""  
    role: Optional[ListChannelMembers200ApplicationXMLMembersRoleEnum] = dataclasses.field(default=None)
    r"""The role of the member. The value can be one of these: `owner`, `admin`, `member`."""  
    

@dataclasses.dataclass
class ListChannelMembers200ApplicationXML:
    r"""**HTTP Status Code:** `200`<br>
    List of channel members returned.
    """
    
    members: Optional[list[ListChannelMembers200ApplicationXMLMembers]] = dataclasses.field(default=None)
    r"""Members in a channel."""  
    next_page_token: Optional[str] = dataclasses.field(default=None)
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None)
    r"""The number of records returned with a single API call."""  
    total_records: Optional[int] = dataclasses.field(default=None)
    r"""The total number of records returned."""  
    
class ListChannelMembers200ApplicationJSONMembersRoleEnum(str, Enum):
    r"""The role of the member. The value can be one of these: `owner`, `admin`, `member`."""
    ADMIN = 'admin'
    OWNER = 'owner'
    MEMBER = 'member'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListChannelMembers200ApplicationJSONMembers:
    
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Email address of the member."""  
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_name'), 'exclude': lambda f: f is None }})
    r"""Member's first name."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Member ID: Unique Identifier of the member."""  
    last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_name'), 'exclude': lambda f: f is None }})
    r"""Member's last name."""  
    role: Optional[ListChannelMembers200ApplicationJSONMembersRoleEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role'), 'exclude': lambda f: f is None }})
    r"""The role of the member. The value can be one of these: `owner`, `admin`, `member`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListChannelMembers200ApplicationJSON:
    r"""**HTTP Status Code:** `200`<br>
    List of channel members returned.
    """
    
    members: Optional[list[ListChannelMembers200ApplicationJSONMembers]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('members'), 'exclude': lambda f: f is None }})
    r"""Members in a channel."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token'), 'exclude': lambda f: f is None }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The number of records returned with a single API call."""  
    total_records: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_records'), 'exclude': lambda f: f is None }})
    r"""The total number of records returned."""  
    

@dataclasses.dataclass
class ListChannelMembersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    list_channel_members_200_application_json_object: Optional[ListChannelMembers200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    List of channel members returned.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    