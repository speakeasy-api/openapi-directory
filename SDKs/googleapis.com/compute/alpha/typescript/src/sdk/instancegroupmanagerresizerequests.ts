/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class InstanceGroupManagerResizeRequests {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Cancels the specified resize request and removes it from the queue. Cancelled resize request does no longer wait for the resources to be provisioned. Cancel is only possible for requests that are accepted in the queue.
   */
  computeInstanceGroupManagerResizeRequestsCancel(
    req: operations.ComputeInstanceGroupManagerResizeRequestsCancelRequest,
    security: operations.ComputeInstanceGroupManagerResizeRequestsCancelSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeInstanceGroupManagerResizeRequestsCancelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ComputeInstanceGroupManagerResizeRequestsCancelRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests/{resizeRequest}/cancel",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeInstanceGroupManagerResizeRequestsCancelSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeInstanceGroupManagerResizeRequestsCancelResponse =
        new operations.ComputeInstanceGroupManagerResizeRequestsCancelResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes the specified, inactive resize request. Requests that are still active cannot be deleted. Deleting request does not delete instances that were provisioned previously.
   */
  computeInstanceGroupManagerResizeRequestsDelete(
    req: operations.ComputeInstanceGroupManagerResizeRequestsDeleteRequest,
    security: operations.ComputeInstanceGroupManagerResizeRequestsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeInstanceGroupManagerResizeRequestsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ComputeInstanceGroupManagerResizeRequestsDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests/{resizeRequest}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeInstanceGroupManagerResizeRequestsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeInstanceGroupManagerResizeRequestsDeleteResponse =
        new operations.ComputeInstanceGroupManagerResizeRequestsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns all of the details about the specified resize request.
   */
  computeInstanceGroupManagerResizeRequestsGet(
    req: operations.ComputeInstanceGroupManagerResizeRequestsGetRequest,
    security: operations.ComputeInstanceGroupManagerResizeRequestsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeInstanceGroupManagerResizeRequestsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeInstanceGroupManagerResizeRequestsGetRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests/{resizeRequest}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeInstanceGroupManagerResizeRequestsGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeInstanceGroupManagerResizeRequestsGetResponse =
        new operations.ComputeInstanceGroupManagerResizeRequestsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.instanceGroupManagerResizeRequest = utils.objectToClass(
              httpRes?.data,
              shared.InstanceGroupManagerResizeRequest
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new resize request that starts provisioning VMs immediately or queues VM creation.
   */
  computeInstanceGroupManagerResizeRequestsInsert(
    req: operations.ComputeInstanceGroupManagerResizeRequestsInsertRequest,
    security: operations.ComputeInstanceGroupManagerResizeRequestsInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeInstanceGroupManagerResizeRequestsInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ComputeInstanceGroupManagerResizeRequestsInsertRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "instanceGroupManagerResizeRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeInstanceGroupManagerResizeRequestsInsertSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeInstanceGroupManagerResizeRequestsInsertResponse =
        new operations.ComputeInstanceGroupManagerResizeRequestsInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a list of resize requests that are contained in the managed instance group.
   */
  computeInstanceGroupManagerResizeRequestsList(
    req: operations.ComputeInstanceGroupManagerResizeRequestsListRequest,
    security: operations.ComputeInstanceGroupManagerResizeRequestsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeInstanceGroupManagerResizeRequestsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeInstanceGroupManagerResizeRequestsListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeInstanceGroupManagerResizeRequestsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeInstanceGroupManagerResizeRequestsListResponse =
        new operations.ComputeInstanceGroupManagerResizeRequestsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.instanceGroupManagerResizeRequestsListResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.InstanceGroupManagerResizeRequestsListResponse
              );
          }
          break;
      }

      return res;
    });
  }
}
