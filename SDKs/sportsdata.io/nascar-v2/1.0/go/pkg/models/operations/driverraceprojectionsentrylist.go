// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DriverRaceProjectionsEntryListFormatEnum - Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
type DriverRaceProjectionsEntryListFormatEnum string

const (
	DriverRaceProjectionsEntryListFormatEnumXML  DriverRaceProjectionsEntryListFormatEnum = "xml"
	DriverRaceProjectionsEntryListFormatEnumJSON DriverRaceProjectionsEntryListFormatEnum = "json"
)

func (e DriverRaceProjectionsEntryListFormatEnum) ToPointer() *DriverRaceProjectionsEntryListFormatEnum {
	return &e
}

func (e *DriverRaceProjectionsEntryListFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "xml":
		fallthrough
	case "json":
		*e = DriverRaceProjectionsEntryListFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DriverRaceProjectionsEntryListFormatEnum: %v", v)
	}
}

type DriverRaceProjectionsEntryListRequest struct {
	// Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
	Format DriverRaceProjectionsEntryListFormatEnum `pathParam:"style=simple,explode=false,name=format"`
	// Unique FantasyData Race ID.
	// Example:<code>1</code>, <code>2</code>, etc.
	Raceid string `pathParam:"style=simple,explode=false,name=raceid"`
}

type DriverRaceProjectionsEntryListResponse struct {
	ContentType           string
	DriverRaceProjections []shared.DriverRaceProjection
	StatusCode            int
	RawResponse           *http.Response
}
