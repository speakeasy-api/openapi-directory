/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class WebinarPollsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth: string;
}

export class WebinarPollsRequest extends SpeakeasyBase {
  /**
   * The webinar ID in "**long**" format(represented as int64 data type in JSON).
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=webinarId",
  })
  webinarId: number;
}

/**
 * Poll Question & Answer type:<br>`single` - Single choice<br>`mutliple` - Multiple choice
 */
export enum WebinarPollsPollListPollQuestionsTypeEnum {
  Single = "single",
  Multiple = "multiple",
}

export class WebinarPollsPollListPollQuestions extends SpeakeasyBase {
  /**
   * Answers to the questions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "answers" })
  answers?: string[];

  /**
   * Question to be asked to the attendees.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Poll Question & Answer type:<br>`single` - Single choice<br>`mutliple` - Multiple choice
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: WebinarPollsPollListPollQuestionsTypeEnum;
}

/**
 * Status of Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results
 */
export enum WebinarPollsPollListPollStatusEnum {
  Notstart = "notstart",
  Started = "started",
  Ended = "ended",
  Sharing = "sharing",
}

/**
 * Poll
 */
export class WebinarPollsPollListPoll extends SpeakeasyBase {
  /**
   * ID of Poll
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Array of Polls
   */
  @SpeakeasyMetadata({ elemType: WebinarPollsPollListPollQuestions })
  @Expose({ name: "questions" })
  @Type(() => WebinarPollsPollListPollQuestions)
  questions?: WebinarPollsPollListPollQuestions[];

  /**
   * Status of Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: WebinarPollsPollListPollStatusEnum;

  /**
   * Title for the poll.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;
}

/**
 * Poll List
 */
export class WebinarPollsPollList extends SpeakeasyBase {
  /**
   * Array of Polls
   */
  @SpeakeasyMetadata({ elemType: WebinarPollsPollListPoll })
  @Expose({ name: "polls" })
  @Type(() => WebinarPollsPollListPoll)
  polls?: WebinarPollsPollListPoll[];

  /**
   * The number of all records available across pages
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_records" })
  totalRecords?: number;
}

export class WebinarPollsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * **HTTP Status Code:** `200`<br>
   *
   * @remarks
   * List polls of a Webinar  returned
   */
  @SpeakeasyMetadata()
  pollList?: WebinarPollsPollList;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
