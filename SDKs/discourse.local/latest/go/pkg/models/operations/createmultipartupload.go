// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type CreateMultipartUploadRequestBodyMetadata struct {
	// The SHA1 checksum of the upload binary blob. Optionally
	// be provided and serves as an additional security check when
	// later processing the file in complete-external-upload endpoint.
	Sha1Checksum *string `json:"sha1-checksum,omitempty"`
}

type CreateMultipartUploadRequestBodyUploadTypeEnum string

const (
	CreateMultipartUploadRequestBodyUploadTypeEnumAvatar            CreateMultipartUploadRequestBodyUploadTypeEnum = "avatar"
	CreateMultipartUploadRequestBodyUploadTypeEnumProfileBackground CreateMultipartUploadRequestBodyUploadTypeEnum = "profile_background"
	CreateMultipartUploadRequestBodyUploadTypeEnumCardBackground    CreateMultipartUploadRequestBodyUploadTypeEnum = "card_background"
	CreateMultipartUploadRequestBodyUploadTypeEnumCustomEmoji       CreateMultipartUploadRequestBodyUploadTypeEnum = "custom_emoji"
	CreateMultipartUploadRequestBodyUploadTypeEnumComposer          CreateMultipartUploadRequestBodyUploadTypeEnum = "composer"
)

func (e *CreateMultipartUploadRequestBodyUploadTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "avatar":
		fallthrough
	case "profile_background":
		fallthrough
	case "card_background":
		fallthrough
	case "custom_emoji":
		fallthrough
	case "composer":
		*e = CreateMultipartUploadRequestBodyUploadTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateMultipartUploadRequestBodyUploadTypeEnum: %s", s)
	}
}

type CreateMultipartUploadRequestBody struct {
	FileName string `json:"file_name"`
	// File size should be represented in bytes.
	FileSize   int64                                          `json:"file_size"`
	Metadata   *CreateMultipartUploadRequestBodyMetadata      `json:"metadata,omitempty"`
	UploadType CreateMultipartUploadRequestBodyUploadTypeEnum `json:"upload_type"`
}

type CreateMultipartUploadRequest struct {
	Request *CreateMultipartUploadRequestBody `request:"mediaType=application/json"`
}

// CreateMultipartUpload200ApplicationJSON - external upload initialized
type CreateMultipartUpload200ApplicationJSON struct {
	// The identifier of the multipart upload in the external
	// storage provider. This is the multipart upload_id in AWS S3.
	ExternalUploadIdentifier string `json:"external_upload_identifier"`
	// The path of the temporary file on the external storage
	// service.
	Key string `json:"key"`
	// A unique string that identifies the external upload.
	// This must be stored and then sent in the /complete-multipart
	// and /batch-presign-multipart-parts endpoints.
	UniqueIdentifier string `json:"unique_identifier"`
}

type CreateMultipartUploadResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// external upload initialized
	CreateMultipartUpload200ApplicationJSONObject *CreateMultipartUpload200ApplicationJSON
}
