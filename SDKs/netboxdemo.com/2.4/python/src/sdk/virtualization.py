"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Virtualization:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def virtualization_choices_list(self) -> operations.VirtualizationChoicesListResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/virtualization/_choices/'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationChoicesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def virtualization_choices_read(self, request: operations.VirtualizationChoicesReadRequest) -> operations.VirtualizationChoicesReadResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.VirtualizationChoicesReadRequest, base_url, '/virtualization/_choices/{id}/', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationChoicesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def virtualization_cluster_groups_create(self, request: shared.ClusterGroupInput) -> operations.VirtualizationClusterGroupsCreateResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/virtualization/cluster-groups/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationClusterGroupsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClusterGroup])
                res.cluster_group = out

        return res

    def virtualization_cluster_groups_delete(self, request: operations.VirtualizationClusterGroupsDeleteRequest) -> operations.VirtualizationClusterGroupsDeleteResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.VirtualizationClusterGroupsDeleteRequest, base_url, '/virtualization/cluster-groups/{id}/', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationClusterGroupsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def virtualization_cluster_groups_list(self, request: operations.VirtualizationClusterGroupsListRequest) -> operations.VirtualizationClusterGroupsListResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/virtualization/cluster-groups/'
        
        query_params = utils.get_query_params(operations.VirtualizationClusterGroupsListRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationClusterGroupsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.VirtualizationClusterGroupsList200ApplicationJSON])
                res.virtualization_cluster_groups_list_200_application_json_object = out

        return res

    def virtualization_cluster_groups_partial_update(self, request: operations.VirtualizationClusterGroupsPartialUpdateRequest) -> operations.VirtualizationClusterGroupsPartialUpdateResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.VirtualizationClusterGroupsPartialUpdateRequest, base_url, '/virtualization/cluster-groups/{id}/', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "cluster_group_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationClusterGroupsPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClusterGroup])
                res.cluster_group = out

        return res

    def virtualization_cluster_groups_read(self, request: operations.VirtualizationClusterGroupsReadRequest) -> operations.VirtualizationClusterGroupsReadResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.VirtualizationClusterGroupsReadRequest, base_url, '/virtualization/cluster-groups/{id}/', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationClusterGroupsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClusterGroup])
                res.cluster_group = out

        return res

    def virtualization_cluster_groups_update(self, request: operations.VirtualizationClusterGroupsUpdateRequest) -> operations.VirtualizationClusterGroupsUpdateResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.VirtualizationClusterGroupsUpdateRequest, base_url, '/virtualization/cluster-groups/{id}/', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "cluster_group_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationClusterGroupsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClusterGroup])
                res.cluster_group = out

        return res

    def virtualization_cluster_types_create(self, request: shared.ClusterTypeInput) -> operations.VirtualizationClusterTypesCreateResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/virtualization/cluster-types/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationClusterTypesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClusterType])
                res.cluster_type = out

        return res

    def virtualization_cluster_types_delete(self, request: operations.VirtualizationClusterTypesDeleteRequest) -> operations.VirtualizationClusterTypesDeleteResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.VirtualizationClusterTypesDeleteRequest, base_url, '/virtualization/cluster-types/{id}/', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationClusterTypesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def virtualization_cluster_types_list(self, request: operations.VirtualizationClusterTypesListRequest) -> operations.VirtualizationClusterTypesListResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/virtualization/cluster-types/'
        
        query_params = utils.get_query_params(operations.VirtualizationClusterTypesListRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationClusterTypesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.VirtualizationClusterTypesList200ApplicationJSON])
                res.virtualization_cluster_types_list_200_application_json_object = out

        return res

    def virtualization_cluster_types_partial_update(self, request: operations.VirtualizationClusterTypesPartialUpdateRequest) -> operations.VirtualizationClusterTypesPartialUpdateResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.VirtualizationClusterTypesPartialUpdateRequest, base_url, '/virtualization/cluster-types/{id}/', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "cluster_type_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationClusterTypesPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClusterType])
                res.cluster_type = out

        return res

    def virtualization_cluster_types_read(self, request: operations.VirtualizationClusterTypesReadRequest) -> operations.VirtualizationClusterTypesReadResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.VirtualizationClusterTypesReadRequest, base_url, '/virtualization/cluster-types/{id}/', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationClusterTypesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClusterType])
                res.cluster_type = out

        return res

    def virtualization_cluster_types_update(self, request: operations.VirtualizationClusterTypesUpdateRequest) -> operations.VirtualizationClusterTypesUpdateResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.VirtualizationClusterTypesUpdateRequest, base_url, '/virtualization/cluster-types/{id}/', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "cluster_type_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationClusterTypesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClusterType])
                res.cluster_type = out

        return res

    def virtualization_clusters_create(self, request: shared.WritableClusterInput) -> operations.VirtualizationClustersCreateResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/virtualization/clusters/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationClustersCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Cluster])
                res.cluster = out

        return res

    def virtualization_clusters_delete(self, request: operations.VirtualizationClustersDeleteRequest) -> operations.VirtualizationClustersDeleteResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.VirtualizationClustersDeleteRequest, base_url, '/virtualization/clusters/{id}/', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationClustersDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def virtualization_clusters_list(self, request: operations.VirtualizationClustersListRequest) -> operations.VirtualizationClustersListResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/virtualization/clusters/'
        
        query_params = utils.get_query_params(operations.VirtualizationClustersListRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationClustersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.VirtualizationClustersList200ApplicationJSON])
                res.virtualization_clusters_list_200_application_json_object = out

        return res

    def virtualization_clusters_partial_update(self, request: operations.VirtualizationClustersPartialUpdateRequest) -> operations.VirtualizationClustersPartialUpdateResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.VirtualizationClustersPartialUpdateRequest, base_url, '/virtualization/clusters/{id}/', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "writable_cluster_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationClustersPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Cluster])
                res.cluster = out

        return res

    def virtualization_clusters_read(self, request: operations.VirtualizationClustersReadRequest) -> operations.VirtualizationClustersReadResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.VirtualizationClustersReadRequest, base_url, '/virtualization/clusters/{id}/', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationClustersReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Cluster])
                res.cluster = out

        return res

    def virtualization_clusters_update(self, request: operations.VirtualizationClustersUpdateRequest) -> operations.VirtualizationClustersUpdateResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.VirtualizationClustersUpdateRequest, base_url, '/virtualization/clusters/{id}/', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "writable_cluster_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationClustersUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Cluster])
                res.cluster = out

        return res

    def virtualization_interfaces_create(self, request: shared.WritableInterfaceInput) -> operations.VirtualizationInterfacesCreateResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/virtualization/interfaces/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationInterfacesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Interface])
                res.interface = out

        return res

    def virtualization_interfaces_delete(self, request: operations.VirtualizationInterfacesDeleteRequest) -> operations.VirtualizationInterfacesDeleteResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.VirtualizationInterfacesDeleteRequest, base_url, '/virtualization/interfaces/{id}/', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationInterfacesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def virtualization_interfaces_list(self, request: operations.VirtualizationInterfacesListRequest) -> operations.VirtualizationInterfacesListResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/virtualization/interfaces/'
        
        query_params = utils.get_query_params(operations.VirtualizationInterfacesListRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationInterfacesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.VirtualizationInterfacesList200ApplicationJSON])
                res.virtualization_interfaces_list_200_application_json_object = out

        return res

    def virtualization_interfaces_partial_update(self, request: operations.VirtualizationInterfacesPartialUpdateRequest) -> operations.VirtualizationInterfacesPartialUpdateResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.VirtualizationInterfacesPartialUpdateRequest, base_url, '/virtualization/interfaces/{id}/', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "writable_interface_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationInterfacesPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Interface])
                res.interface = out

        return res

    def virtualization_interfaces_read(self, request: operations.VirtualizationInterfacesReadRequest) -> operations.VirtualizationInterfacesReadResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.VirtualizationInterfacesReadRequest, base_url, '/virtualization/interfaces/{id}/', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationInterfacesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Interface])
                res.interface = out

        return res

    def virtualization_interfaces_update(self, request: operations.VirtualizationInterfacesUpdateRequest) -> operations.VirtualizationInterfacesUpdateResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.VirtualizationInterfacesUpdateRequest, base_url, '/virtualization/interfaces/{id}/', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "writable_interface_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationInterfacesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Interface])
                res.interface = out

        return res

    def virtualization_virtual_machines_create(self, request: shared.WritableVirtualMachineInput) -> operations.VirtualizationVirtualMachinesCreateResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/virtualization/virtual-machines/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationVirtualMachinesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.VirtualMachine])
                res.virtual_machine = out

        return res

    def virtualization_virtual_machines_delete(self, request: operations.VirtualizationVirtualMachinesDeleteRequest) -> operations.VirtualizationVirtualMachinesDeleteResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.VirtualizationVirtualMachinesDeleteRequest, base_url, '/virtualization/virtual-machines/{id}/', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationVirtualMachinesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def virtualization_virtual_machines_list(self, request: operations.VirtualizationVirtualMachinesListRequest) -> operations.VirtualizationVirtualMachinesListResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/virtualization/virtual-machines/'
        
        query_params = utils.get_query_params(operations.VirtualizationVirtualMachinesListRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationVirtualMachinesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.VirtualizationVirtualMachinesList200ApplicationJSON])
                res.virtualization_virtual_machines_list_200_application_json_object = out

        return res

    def virtualization_virtual_machines_partial_update(self, request: operations.VirtualizationVirtualMachinesPartialUpdateRequest) -> operations.VirtualizationVirtualMachinesPartialUpdateResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.VirtualizationVirtualMachinesPartialUpdateRequest, base_url, '/virtualization/virtual-machines/{id}/', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "writable_virtual_machine_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationVirtualMachinesPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.VirtualMachine])
                res.virtual_machine = out

        return res

    def virtualization_virtual_machines_read(self, request: operations.VirtualizationVirtualMachinesReadRequest) -> operations.VirtualizationVirtualMachinesReadResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.VirtualizationVirtualMachinesReadRequest, base_url, '/virtualization/virtual-machines/{id}/', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationVirtualMachinesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.VirtualMachineWithConfigContext])
                res.virtual_machine_with_config_context = out

        return res

    def virtualization_virtual_machines_update(self, request: operations.VirtualizationVirtualMachinesUpdateRequest) -> operations.VirtualizationVirtualMachinesUpdateResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.VirtualizationVirtualMachinesUpdateRequest, base_url, '/virtualization/virtual-machines/{id}/', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "writable_virtual_machine_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VirtualizationVirtualMachinesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.VirtualMachine])
                res.virtual_machine = out

        return res

    