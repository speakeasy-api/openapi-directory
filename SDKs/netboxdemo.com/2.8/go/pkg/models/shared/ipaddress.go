// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

type IPAddressFamilyLabelEnum string

const (
	IPAddressFamilyLabelEnumIPv4 IPAddressFamilyLabelEnum = "IPv4"
	IPAddressFamilyLabelEnumIPv6 IPAddressFamilyLabelEnum = "IPv6"
)

func (e *IPAddressFamilyLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "IPv4":
		fallthrough
	case "IPv6":
		*e = IPAddressFamilyLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for IPAddressFamilyLabelEnum: %s", s)
	}
}

type IPAddressFamilyValueEnum string

const (
	IPAddressFamilyValueEnumFour IPAddressFamilyValueEnum = "4"
	IPAddressFamilyValueEnumSix  IPAddressFamilyValueEnum = "6"
)

func (e *IPAddressFamilyValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "4":
		fallthrough
	case "6":
		*e = IPAddressFamilyValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for IPAddressFamilyValueEnum: %s", s)
	}
}

type IPAddressFamily struct {
	Label IPAddressFamilyLabelEnum `json:"label"`
	Value IPAddressFamilyValueEnum `json:"value"`
}

type IPAddressRoleLabelEnum string

const (
	IPAddressRoleLabelEnumLoopback  IPAddressRoleLabelEnum = "Loopback"
	IPAddressRoleLabelEnumSecondary IPAddressRoleLabelEnum = "Secondary"
	IPAddressRoleLabelEnumAnycast   IPAddressRoleLabelEnum = "Anycast"
	IPAddressRoleLabelEnumVip       IPAddressRoleLabelEnum = "VIP"
	IPAddressRoleLabelEnumVrrp      IPAddressRoleLabelEnum = "VRRP"
	IPAddressRoleLabelEnumHsrp      IPAddressRoleLabelEnum = "HSRP"
	IPAddressRoleLabelEnumGlbp      IPAddressRoleLabelEnum = "GLBP"
	IPAddressRoleLabelEnumCarp      IPAddressRoleLabelEnum = "CARP"
)

func (e *IPAddressRoleLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Loopback":
		fallthrough
	case "Secondary":
		fallthrough
	case "Anycast":
		fallthrough
	case "VIP":
		fallthrough
	case "VRRP":
		fallthrough
	case "HSRP":
		fallthrough
	case "GLBP":
		fallthrough
	case "CARP":
		*e = IPAddressRoleLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for IPAddressRoleLabelEnum: %s", s)
	}
}

type IPAddressRoleValueEnum string

const (
	IPAddressRoleValueEnumLoopback  IPAddressRoleValueEnum = "loopback"
	IPAddressRoleValueEnumSecondary IPAddressRoleValueEnum = "secondary"
	IPAddressRoleValueEnumAnycast   IPAddressRoleValueEnum = "anycast"
	IPAddressRoleValueEnumVip       IPAddressRoleValueEnum = "vip"
	IPAddressRoleValueEnumVrrp      IPAddressRoleValueEnum = "vrrp"
	IPAddressRoleValueEnumHsrp      IPAddressRoleValueEnum = "hsrp"
	IPAddressRoleValueEnumGlbp      IPAddressRoleValueEnum = "glbp"
	IPAddressRoleValueEnumCarp      IPAddressRoleValueEnum = "carp"
)

func (e *IPAddressRoleValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "loopback":
		fallthrough
	case "secondary":
		fallthrough
	case "anycast":
		fallthrough
	case "vip":
		fallthrough
	case "vrrp":
		fallthrough
	case "hsrp":
		fallthrough
	case "glbp":
		fallthrough
	case "carp":
		*e = IPAddressRoleValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for IPAddressRoleValueEnum: %s", s)
	}
}

type IPAddressRole struct {
	Label IPAddressRoleLabelEnum `json:"label"`
	Value IPAddressRoleValueEnum `json:"value"`
}

type IPAddressStatusLabelEnum string

const (
	IPAddressStatusLabelEnumActive     IPAddressStatusLabelEnum = "Active"
	IPAddressStatusLabelEnumReserved   IPAddressStatusLabelEnum = "Reserved"
	IPAddressStatusLabelEnumDeprecated IPAddressStatusLabelEnum = "Deprecated"
	IPAddressStatusLabelEnumDhcp       IPAddressStatusLabelEnum = "DHCP"
)

func (e *IPAddressStatusLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Active":
		fallthrough
	case "Reserved":
		fallthrough
	case "Deprecated":
		fallthrough
	case "DHCP":
		*e = IPAddressStatusLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for IPAddressStatusLabelEnum: %s", s)
	}
}

type IPAddressStatusValueEnum string

const (
	IPAddressStatusValueEnumActive     IPAddressStatusValueEnum = "active"
	IPAddressStatusValueEnumReserved   IPAddressStatusValueEnum = "reserved"
	IPAddressStatusValueEnumDeprecated IPAddressStatusValueEnum = "deprecated"
	IPAddressStatusValueEnumDhcp       IPAddressStatusValueEnum = "dhcp"
)

func (e *IPAddressStatusValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "reserved":
		fallthrough
	case "deprecated":
		fallthrough
	case "dhcp":
		*e = IPAddressStatusValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for IPAddressStatusValueEnum: %s", s)
	}
}

type IPAddressStatus struct {
	Label IPAddressStatusLabelEnum `json:"label"`
	Value IPAddressStatusValueEnum `json:"value"`
}

type IPAddress struct {
	// IPv4 or IPv6 address (with mask)
	Address      string                 `json:"address"`
	Created      *types.Date            `json:"created,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                `json:"description,omitempty"`
	// Hostname or FQDN (not case-sensitive)
	DNSName     *string             `json:"dns_name,omitempty"`
	Family      *IPAddressFamily    `json:"family,omitempty"`
	ID          *int64              `json:"id,omitempty"`
	Interface   *IPAddressInterface `json:"interface,omitempty"`
	LastUpdated *time.Time          `json:"last_updated,omitempty"`
	NatInside   *NestedIPAddress    `json:"nat_inside,omitempty"`
	NatOutside  *NestedIPAddress    `json:"nat_outside,omitempty"`
	Role        *IPAddressRole      `json:"role,omitempty"`
	Status      *IPAddressStatus    `json:"status,omitempty"`
	Tags        []string            `json:"tags,omitempty"`
	Tenant      *NestedTenant       `json:"tenant,omitempty"`
	Vrf         *NestedVRF          `json:"vrf,omitempty"`
}
