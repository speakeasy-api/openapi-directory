/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Output only. Different password hash algorithms used in Identity Toolkit.
 */
export enum GoogleCloudIdentitytoolkitAdminV2HashConfigAlgorithmEnum {
  HashAlgorithmUnspecified = "HASH_ALGORITHM_UNSPECIFIED",
  HmacSha256 = "HMAC_SHA256",
  HmacSha1 = "HMAC_SHA1",
  HmacMd5 = "HMAC_MD5",
  Scrypt = "SCRYPT",
  PbkdfSha1 = "PBKDF_SHA1",
  Md5 = "MD5",
  HmacSha512 = "HMAC_SHA512",
  Sha1 = "SHA1",
  Bcrypt = "BCRYPT",
  Pbkdf2Sha256 = "PBKDF2_SHA256",
  Sha256 = "SHA256",
  Sha512 = "SHA512",
  StandardScrypt = "STANDARD_SCRYPT",
}

/**
 * History information of the hash algorithm and key. Different accounts' passwords may be generated by different version.
 */
export class GoogleCloudIdentitytoolkitAdminV2HashConfig extends SpeakeasyBase {
  /**
   * Output only. Different password hash algorithms used in Identity Toolkit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "algorithm" })
  algorithm?: GoogleCloudIdentitytoolkitAdminV2HashConfigAlgorithmEnum;

  /**
   * Output only. Memory cost for hash calculation. Used by scrypt and other similar password derivation algorithms. See https://tools.ietf.org/html/rfc7914 for explanation of field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "memoryCost" })
  memoryCost?: number;

  /**
   * Output only. How many rounds for hash calculation. Used by scrypt and other similar password derivation algorithms.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rounds" })
  rounds?: number;

  /**
   * Output only. Non-printable character to be inserted between the salt and plain text password in base64.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "saltSeparator" })
  saltSeparator?: string;

  /**
   * Output only. Signer key in base64.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "signerKey" })
  signerKey?: string;
}
