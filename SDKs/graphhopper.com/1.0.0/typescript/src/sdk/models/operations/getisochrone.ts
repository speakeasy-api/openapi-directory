/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Use `"shortest"` to get an isodistance line instead of an isochrone.
 */
export enum GetIsochroneWeightingEnum {
  Fastest = "fastest",
  Shortest = "shortest",
}

export class GetIsochroneRequest extends SpeakeasyBase {
  /**
   * Number by which to divide the given `time_limit` to create `buckets` nested isochrones of time intervals `time_limit-n*time_limit/buckets`. Applies analogously to `distance_limit`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=buckets",
  })
  buckets?: number;

  /**
   * Specify which distance the vehicle should travel. In meters.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=distance_limit",
  })
  distanceLimit?: number;

  /**
   * Specify the start coordinate
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=point" })
  point: string;

  /**
   * If `false` the flow goes from point to the polygon, if `true` the flow goes from the polygon "inside" to the point.
   *
   * @remarks
   * Example use case for `false`&#58; *How many potential customer can be reached within 30min travel time from your store* vs. `true`&#58; *How many customers can reach your store within 30min travel time.*
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=reverse_flow",
  })
  reverseFlow?: boolean;

  /**
   * Specify which time the vehicle should travel. In seconds.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=time_limit",
  })
  timeLimit?: number;

  /**
   * The vehicle profile for which the route should be calculated.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=vehicle",
  })
  vehicle?: shared.VehicleProfileIdEnum;

  /**
   * Use `"shortest"` to get an isodistance line instead of an isochrone.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=weighting",
  })
  weighting?: GetIsochroneWeightingEnum;
}

export class GetIsochroneResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Unexpected Error
   */
  @SpeakeasyMetadata()
  ghError?: shared.GHError;

  /**
   * Isochrone Result
   */
  @SpeakeasyMetadata()
  isochroneResponse?: shared.IsochroneResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
