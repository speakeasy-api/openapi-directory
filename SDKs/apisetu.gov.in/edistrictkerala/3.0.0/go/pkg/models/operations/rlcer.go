// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type RlcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type RlcerRequestBodyCertificateParameters struct {
	// Application Number
	Aplno string `json:"aplno"`
	// Certificate Number
	Certno string `json:"certno"`
	// Security Code
	Sccd string `json:"sccd"`
}

// RlcerRequestBodyFormatEnum - The format of the certificate in response.
type RlcerRequestBodyFormatEnum string

const (
	RlcerRequestBodyFormatEnumPdf RlcerRequestBodyFormatEnum = "pdf"
)

func (e RlcerRequestBodyFormatEnum) ToPointer() *RlcerRequestBodyFormatEnum {
	return &e
}

func (e *RlcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = RlcerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RlcerRequestBodyFormatEnum: %v", v)
	}
}

// RlcerRequestBody - Request format
type RlcerRequestBody struct {
	CertificateParameters *RlcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format RlcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Rlcer504ApplicationJSONErrorEnum string

const (
	Rlcer504ApplicationJSONErrorEnumGatewayTimeout Rlcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Rlcer504ApplicationJSONErrorEnum) ToPointer() *Rlcer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Rlcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Rlcer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rlcer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Rlcer504ApplicationJSONErrorDescriptionEnum string

const (
	Rlcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Rlcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Rlcer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Rlcer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Rlcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Rlcer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rlcer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Rlcer504ApplicationJSON - Gateway timeout
type Rlcer504ApplicationJSON struct {
	Error            *Rlcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rlcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rlcer503ApplicationJSONErrorEnum string

const (
	Rlcer503ApplicationJSONErrorEnumServiceUnavailable Rlcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Rlcer503ApplicationJSONErrorEnum) ToPointer() *Rlcer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Rlcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Rlcer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rlcer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Rlcer503ApplicationJSONErrorDescriptionEnum string

const (
	Rlcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Rlcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Rlcer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Rlcer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Rlcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Rlcer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rlcer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Rlcer503ApplicationJSON - Service unavailable
type Rlcer503ApplicationJSON struct {
	Error            *Rlcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rlcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rlcer502ApplicationJSONErrorEnum string

const (
	Rlcer502ApplicationJSONErrorEnumBadGatewy Rlcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Rlcer502ApplicationJSONErrorEnum) ToPointer() *Rlcer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Rlcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Rlcer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rlcer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Rlcer502ApplicationJSONErrorDescriptionEnum string

const (
	Rlcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Rlcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Rlcer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Rlcer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Rlcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Rlcer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rlcer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Rlcer502ApplicationJSON - Bad gateway
type Rlcer502ApplicationJSON struct {
	Error            *Rlcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rlcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rlcer500ApplicationJSONErrorEnum string

const (
	Rlcer500ApplicationJSONErrorEnumInternalServerError Rlcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Rlcer500ApplicationJSONErrorEnum) ToPointer() *Rlcer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Rlcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Rlcer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rlcer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Rlcer500ApplicationJSONErrorDescriptionEnum string

const (
	Rlcer500ApplicationJSONErrorDescriptionEnumInternalServerError Rlcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Rlcer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Rlcer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Rlcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Rlcer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rlcer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Rlcer500ApplicationJSON - Internal server error
type Rlcer500ApplicationJSON struct {
	Error            *Rlcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rlcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rlcer404ApplicationJSONErrorEnum string

const (
	Rlcer404ApplicationJSONErrorEnumRecordNotFound Rlcer404ApplicationJSONErrorEnum = "record_not_found"
	Rlcer404ApplicationJSONErrorEnumURLNotFound    Rlcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Rlcer404ApplicationJSONErrorEnum) ToPointer() *Rlcer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Rlcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Rlcer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rlcer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Rlcer404ApplicationJSONErrorDescriptionEnum string

const (
	Rlcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Rlcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Rlcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Rlcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Rlcer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Rlcer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Rlcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Rlcer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rlcer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Rlcer404ApplicationJSON - No record found
type Rlcer404ApplicationJSON struct {
	Error            *Rlcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rlcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rlcer401ApplicationJSONErrorEnum string

const (
	Rlcer401ApplicationJSONErrorEnumInvalidAuthentication Rlcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Rlcer401ApplicationJSONErrorEnumInvalidAuthorization  Rlcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Rlcer401ApplicationJSONErrorEnum) ToPointer() *Rlcer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Rlcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Rlcer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rlcer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Rlcer401ApplicationJSONErrorDescriptionEnum string

const (
	Rlcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Rlcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Rlcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Rlcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Rlcer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Rlcer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Rlcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Rlcer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rlcer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Rlcer401ApplicationJSON - Unauthorized access
type Rlcer401ApplicationJSON struct {
	Error            *Rlcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rlcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rlcer400ApplicationJSONErrorEnum string

const (
	Rlcer400ApplicationJSONErrorEnumMissingParameter Rlcer400ApplicationJSONErrorEnum = "missing_parameter"
	Rlcer400ApplicationJSONErrorEnumInvalidParameter Rlcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Rlcer400ApplicationJSONErrorEnumInvalidFormat    Rlcer400ApplicationJSONErrorEnum = "invalid_format"
	Rlcer400ApplicationJSONErrorEnumInvalidTxnid     Rlcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Rlcer400ApplicationJSONErrorEnumInvalidConsentid Rlcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Rlcer400ApplicationJSONErrorEnum) ToPointer() *Rlcer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Rlcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Rlcer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rlcer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Rlcer400ApplicationJSONErrorDescriptionEnum string

const (
	Rlcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Rlcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Rlcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Rlcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Rlcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Rlcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Rlcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Rlcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Rlcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Rlcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Rlcer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Rlcer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Rlcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Rlcer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rlcer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Rlcer400ApplicationJSON - Bad request
type Rlcer400ApplicationJSON struct {
	Error            *Rlcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rlcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type RlcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Rlcer400ApplicationJSONObject *Rlcer400ApplicationJSON
	// Unauthorized access
	Rlcer401ApplicationJSONObject *Rlcer401ApplicationJSON
	// No record found
	Rlcer404ApplicationJSONObject *Rlcer404ApplicationJSON
	// Internal server error
	Rlcer500ApplicationJSONObject *Rlcer500ApplicationJSON
	// Bad gateway
	Rlcer502ApplicationJSONObject *Rlcer502ApplicationJSON
	// Service unavailable
	Rlcer503ApplicationJSONObject *Rlcer503ApplicationJSON
	// Gateway timeout
	Rlcer504ApplicationJSONObject *Rlcer504ApplicationJSON
}
