/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class AuthorizeRequest {
    /**
     * A client ID obtained from the [Dashboard](https://dashboard.authentiq.com/).
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=client_id")
    public String clientId;

    public AuthorizeRequest withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }
    
    /**
     * The authentication display mode, which can be one of `page`, `popup` or `modal`. Defaults to `page`.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=display")
    public String display;

    public AuthorizeRequest withDisplay(String display) {
        this.display = display;
        return this;
    }
    
    /**
     * Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=max_age")
    public Long maxAge;

    public AuthorizeRequest withMaxAge(Long maxAge) {
        this.maxAge = maxAge;
        return this;
    }
    
    /**
     * An nonce provided by the client (and opaque to Authentiq Connect) that will be included in any ID Token generated for this session. Clients should use the nonce to mitigate replay attacks.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=nonce")
    public String nonce;

    public AuthorizeRequest withNonce(String nonce) {
        this.nonce = nonce;
        return this;
    }
    
    /**
     * Space-delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent. The supported values are: `none`, `login`, `consent`. If `consent` the end-user is asked to (re)confirm what claims they share. Use `none` to check for an active session.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=prompt")
    public String prompt;

    public AuthorizeRequest withPrompt(String prompt) {
        this.prompt = prompt;
        return this;
    }
    
    /**
     * The location to redirect to after (un)successful authentication. See OIDC for the parameters passed in the query string (`response_mode=query`) or as fragments (`response_mode=fragment`). Unless the client is in test-mode this must be one of the registered redirect URLs.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=redirect_uri")
    public String redirectUri;

    public AuthorizeRequest withRedirectUri(String redirectUri) {
        this.redirectUri = redirectUri;
        return this;
    }
    
    /**
     * Whether to append parameters to the redirect URL in the query string (`query`) or as fragments (`fragment`). This option usually has a sensible default for each of the response types.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=response_mode")
    public String responseMode;

    public AuthorizeRequest withResponseMode(String responseMode) {
        this.responseMode = responseMode;
        return this;
    }
    
    /**
     * The OIDC response type to use for this authentication flow. Valid choices are `code`, `id_token`, `token`, `token id_token`, `code id_token` `code token` and `code token id_token`, but a client can be configured with a more restricted set.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=response_type")
    public String responseType;

    public AuthorizeRequest withResponseType(String responseType) {
        this.responseType = responseType;
        return this;
    }
    
    /**
     * The space-separated identity claims to request from the end-user. Always include `openid` as a scope for compatibility with OIDC.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=scope")
    public String scope;

    public AuthorizeRequest withScope(String scope) {
        this.scope = scope;
        return this;
    }
    
    /**
     * An opaque string that will be passed back to the redirect URL and therefore can be used to communicate client side state and prevent CSRF attacks.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=state")
    public String state;

    public AuthorizeRequest withState(String state) {
        this.state = state;
        return this;
    }
    
    /**
     * Specifies the preferred language to use on the authorization page, as a space-separated list of BCP47 language tags. Ignored at the moment.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ui_locales")
    public String uiLocales;

    public AuthorizeRequest withUiLocales(String uiLocales) {
        this.uiLocales = uiLocales;
        return this;
    }
    
    public AuthorizeRequest(@JsonProperty("client_id") String clientId, @JsonProperty("redirect_uri") String redirectUri, @JsonProperty("response_type") String responseType, @JsonProperty("scope") String scope, @JsonProperty("state") String state) {
        this.clientId = clientId;
        this.redirectUri = redirectUri;
        this.responseType = responseType;
        this.scope = scope;
        this.state = state;
  }
}
