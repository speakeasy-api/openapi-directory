/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class DrivePermissionsCreateRequest {
    @SpeakeasyMetadata("request:mediaType=application/json")
    public org.openapis.openapi.models.shared.PermissionInput permissionInput;

    public DrivePermissionsCreateRequest withPermissionInput(org.openapis.openapi.models.shared.PermissionInput permissionInput) {
        this.permissionInput = permissionInput;
        return this;
    }
    
    /**
     * Data format for the response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=alt")
    public org.openapis.openapi.models.shared.AltEnum alt;

    public DrivePermissionsCreateRequest withAlt(org.openapis.openapi.models.shared.AltEnum alt) {
        this.alt = alt;
        return this;
    }
    
    /**
     * A plain text custom message to include in the notification email.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=emailMessage")
    public String emailMessage;

    public DrivePermissionsCreateRequest withEmailMessage(String emailMessage) {
        this.emailMessage = emailMessage;
        return this;
    }
    
    /**
     * Deprecated. See moveToNewOwnersRoot for details.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=enforceSingleParent")
    public Boolean enforceSingleParent;

    public DrivePermissionsCreateRequest withEnforceSingleParent(Boolean enforceSingleParent) {
        this.enforceSingleParent = enforceSingleParent;
        return this;
    }
    
    /**
     * Selector specifying which fields to include in a partial response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    public String fields;

    public DrivePermissionsCreateRequest withFields(String fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * The ID of the file or shared drive.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=fileId")
    public String fileId;

    public DrivePermissionsCreateRequest withFileId(String fileId) {
        this.fileId = fileId;
        return this;
    }
    
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=key")
    public String key;

    public DrivePermissionsCreateRequest withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     * This parameter will only take effect if the item is not in a shared drive and the request is attempting to transfer the ownership of the item. If set to true, the item will be moved to the new owner's My Drive root folder and all prior parents removed. If set to false, parents are not changed.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=moveToNewOwnersRoot")
    public Boolean moveToNewOwnersRoot;

    public DrivePermissionsCreateRequest withMoveToNewOwnersRoot(Boolean moveToNewOwnersRoot) {
        this.moveToNewOwnersRoot = moveToNewOwnersRoot;
        return this;
    }
    
    /**
     * OAuth 2.0 token for the current user.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=oauth_token")
    public String oauthToken;

    public DrivePermissionsCreateRequest withOauthToken(String oauthToken) {
        this.oauthToken = oauthToken;
        return this;
    }
    
    /**
     * Returns response with indentations and line breaks.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=prettyPrint")
    public Boolean prettyPrint;

    public DrivePermissionsCreateRequest withPrettyPrint(Boolean prettyPrint) {
        this.prettyPrint = prettyPrint;
        return this;
    }
    
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=quotaUser")
    public String quotaUser;

    public DrivePermissionsCreateRequest withQuotaUser(String quotaUser) {
        this.quotaUser = quotaUser;
        return this;
    }
    
    /**
     * Whether to send a notification email when sharing to users or groups. This defaults to true for users and groups, and is not allowed for other requests. It must not be disabled for ownership transfers.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sendNotificationEmail")
    public Boolean sendNotificationEmail;

    public DrivePermissionsCreateRequest withSendNotificationEmail(Boolean sendNotificationEmail) {
        this.sendNotificationEmail = sendNotificationEmail;
        return this;
    }
    
    /**
     * Whether the requesting application supports both My Drives and shared drives.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=supportsAllDrives")
    public Boolean supportsAllDrives;

    public DrivePermissionsCreateRequest withSupportsAllDrives(Boolean supportsAllDrives) {
        this.supportsAllDrives = supportsAllDrives;
        return this;
    }
    
    /**
     * Deprecated use supportsAllDrives instead.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=supportsTeamDrives")
    public Boolean supportsTeamDrives;

    public DrivePermissionsCreateRequest withSupportsTeamDrives(Boolean supportsTeamDrives) {
        this.supportsTeamDrives = supportsTeamDrives;
        return this;
    }
    
    /**
     * Whether to transfer ownership to the specified user and downgrade the current owner to a writer. This parameter is required as an acknowledgement of the side effect. File owners can only transfer ownership of files existing on My Drive. Files existing in a shared drive are owned by the organization that owns that shared drive. Ownership transfers are not supported for files and folders in shared drives. Organizers of a shared drive can move items from that shared drive into their My Drive which transfers the ownership to them.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=transferOwnership")
    public Boolean transferOwnership;

    public DrivePermissionsCreateRequest withTransferOwnership(Boolean transferOwnership) {
        this.transferOwnership = transferOwnership;
        return this;
    }
    
    /**
     * Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=useDomainAdminAccess")
    public Boolean useDomainAdminAccess;

    public DrivePermissionsCreateRequest withUseDomainAdminAccess(Boolean useDomainAdminAccess) {
        this.useDomainAdminAccess = useDomainAdminAccess;
        return this;
    }
    
    /**
     * Deprecated. Please use quotaUser instead.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=userIp")
    public String userIp;

    public DrivePermissionsCreateRequest withUserIp(String userIp) {
        this.userIp = userIp;
        return this;
    }
    
    public DrivePermissionsCreateRequest(@JsonProperty("fileId") String fileId) {
        this.fileId = fileId;
  }
}
