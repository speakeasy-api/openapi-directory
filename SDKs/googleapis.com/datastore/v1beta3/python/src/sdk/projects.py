"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def datastore_projects_allocate_ids(self, request: operations.DatastoreProjectsAllocateIdsRequest, security: operations.DatastoreProjectsAllocateIdsSecurity) -> operations.DatastoreProjectsAllocateIdsResponse:
        r"""Allocates IDs for the given keys, which is useful for referencing an entity before it is inserted."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatastoreProjectsAllocateIdsRequest, base_url, '/v1beta3/projects/{projectId}:allocateIds', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "allocate_ids_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatastoreProjectsAllocateIdsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatastoreProjectsAllocateIdsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AllocateIdsResponse])
                res.allocate_ids_response = out

        return res

    def datastore_projects_begin_transaction(self, request: operations.DatastoreProjectsBeginTransactionRequest, security: operations.DatastoreProjectsBeginTransactionSecurity) -> operations.DatastoreProjectsBeginTransactionResponse:
        r"""Begins a new transaction."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatastoreProjectsBeginTransactionRequest, base_url, '/v1beta3/projects/{projectId}:beginTransaction', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "begin_transaction_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatastoreProjectsBeginTransactionRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatastoreProjectsBeginTransactionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeginTransactionResponse])
                res.begin_transaction_response = out

        return res

    def datastore_projects_commit(self, request: operations.DatastoreProjectsCommitRequest, security: operations.DatastoreProjectsCommitSecurity) -> operations.DatastoreProjectsCommitResponse:
        r"""Commits a transaction, optionally creating, deleting or modifying some entities."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatastoreProjectsCommitRequest, base_url, '/v1beta3/projects/{projectId}:commit', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "commit_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatastoreProjectsCommitRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatastoreProjectsCommitResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CommitResponse])
                res.commit_response = out

        return res

    def datastore_projects_lookup(self, request: operations.DatastoreProjectsLookupRequest, security: operations.DatastoreProjectsLookupSecurity) -> operations.DatastoreProjectsLookupResponse:
        r"""Looks up entities by key."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatastoreProjectsLookupRequest, base_url, '/v1beta3/projects/{projectId}:lookup', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "lookup_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatastoreProjectsLookupRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatastoreProjectsLookupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LookupResponse])
                res.lookup_response = out

        return res

    def datastore_projects_reserve_ids(self, request: operations.DatastoreProjectsReserveIdsRequest, security: operations.DatastoreProjectsReserveIdsSecurity) -> operations.DatastoreProjectsReserveIdsResponse:
        r"""Prevents the supplied keys' IDs from being auto-allocated by Cloud Datastore."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatastoreProjectsReserveIdsRequest, base_url, '/v1beta3/projects/{projectId}:reserveIds', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "reserve_ids_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatastoreProjectsReserveIdsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatastoreProjectsReserveIdsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.reserve_ids_response = out

        return res

    def datastore_projects_rollback(self, request: operations.DatastoreProjectsRollbackRequest, security: operations.DatastoreProjectsRollbackSecurity) -> operations.DatastoreProjectsRollbackResponse:
        r"""Rolls back a transaction."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatastoreProjectsRollbackRequest, base_url, '/v1beta3/projects/{projectId}:rollback', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "rollback_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatastoreProjectsRollbackRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatastoreProjectsRollbackResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.rollback_response = out

        return res

    def datastore_projects_run_aggregation_query(self, request: operations.DatastoreProjectsRunAggregationQueryRequest, security: operations.DatastoreProjectsRunAggregationQuerySecurity) -> operations.DatastoreProjectsRunAggregationQueryResponse:
        r"""Runs an aggregation query."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatastoreProjectsRunAggregationQueryRequest, base_url, '/v1beta3/projects/{projectId}:runAggregationQuery', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "run_aggregation_query_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatastoreProjectsRunAggregationQueryRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatastoreProjectsRunAggregationQueryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RunAggregationQueryResponse])
                res.run_aggregation_query_response = out

        return res

    def datastore_projects_run_query(self, request: operations.DatastoreProjectsRunQueryRequest, security: operations.DatastoreProjectsRunQuerySecurity) -> operations.DatastoreProjectsRunQueryResponse:
        r"""Queries for entities."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatastoreProjectsRunQueryRequest, base_url, '/v1beta3/projects/{projectId}:runQuery', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "run_query_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatastoreProjectsRunQueryRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatastoreProjectsRunQueryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RunQueryResponse])
                res.run_query_response = out

        return res

    