/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class BookingAvailabilityTourgrades200ApplicationJSONData {
    /**
     * **array** of age band objects describing the age bands and respective passenger counts allowed to book *this* tour grade; `null` if `ageBandsRequired` is filled and `available` is `false`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ageBands")
    public Object[] ageBands;
    public BookingAvailabilityTourgrades200ApplicationJSONData withAgeBands(Object[] ageBands) {
        this.ageBands = ageBands;
        return this;
    }
    
    /**
     * **array of arrays** of age band objects describing the traveler mixes eligible to book *this* tour grade; `null` if `ageBands` is filled and `available` is `true`
     * - **note**: multiple objects; structure will depend on available tour grades \u2013 see response sample for an example, but the exact result you receive will differ
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ageBandsRequired")
    public BookingAvailabilityTourgrades200ApplicationJSONDataAgeBandsRequired[][] ageBandsRequired;
    public BookingAvailabilityTourgrades200ApplicationJSONData withAgeBandsRequired(BookingAvailabilityTourgrades200ApplicationJSONDataAgeBandsRequired[][] ageBandsRequired) {
        this.ageBandsRequired = ageBandsRequired;
        return this;
    }
    
    /**
     * **indicator** - `true` if this tour grade is available to be booked according to the traveler mix specified
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available")
    public Boolean available;
    public BookingAvailabilityTourgrades200ApplicationJSONData withAvailable(Boolean available) {
        this.available = available;
        return this;
    }
    
    /**
     * **date** on which *this* tour grade operates
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bookingDate")
    public String bookingDate;
    public BookingAvailabilityTourgrades200ApplicationJSONData withBookingDate(String bookingDate) {
        this.bookingDate = bookingDate;
        return this;
    }
    
    /**
     * **currency code for the specified currency** (will be `'ERROR'` if `available` is `false`)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currencyCode")
    public String currencyCode;
    public BookingAvailabilityTourgrades200ApplicationJSONData withCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }
    
    /**
     * **language code for standard langauge** for *this* product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultLanguageCode")
    public String defaultLanguageCode;
    public BookingAvailabilityTourgrades200ApplicationJSONData withDefaultLanguageCode(String defaultLanguageCode) {
        this.defaultLanguageCode = defaultLanguageCode;
        return this;
    }
    
    /**
     * **alphanumeric identifier** of *this* tour grade
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gradeCode")
    public String gradeCode;
    public BookingAvailabilityTourgrades200ApplicationJSONData withGradeCode(String gradeCode) {
        this.gradeCode = gradeCode;
        return this;
    }
    
    /**
     * **time** of *this* product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gradeDepartureTime")
    public String gradeDepartureTime;
    public BookingAvailabilityTourgrades200ApplicationJSONData withGradeDepartureTime(String gradeDepartureTime) {
        this.gradeDepartureTime = gradeDepartureTime;
        return this;
    }
    
    /**
     * **natural-language description** of the tour grade
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gradeDescription")
    public String gradeDescription;
    public BookingAvailabilityTourgrades200ApplicationJSONData withGradeDescription(String gradeDescription) {
        this.gradeDescription = gradeDescription;
        return this;
    }
    
    /**
     * **natural-language title** of the tour grade
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gradeTitle")
    public String gradeTitle;
    public BookingAvailabilityTourgrades200ApplicationJSONData withGradeTitle(String gradeTitle) {
        this.gradeTitle = gradeTitle;
        return this;
    }
    
    /**
     * **object** detailing language services available for *this* product** (will be `null` if `available` is `false`)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("langServices")
    public java.util.Map<String, Object> langServices;
    public BookingAvailabilityTourgrades200ApplicationJSONData withLangServices(java.util.Map<String, Object> langServices) {
        this.langServices = langServices;
        return this;
    }
    
    /**
     * **numeric merchant net rate** for *this* tour grade
     * **Note**: will be `0` if `available` is `false`
     * - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchantNetPrice")
    public Double merchantNetPrice;
    public BookingAvailabilityTourgrades200ApplicationJSONData withMerchantNetPrice(Double merchantNetPrice) {
        this.merchantNetPrice = merchantNetPrice;
        return this;
    }
    
    /**
     * **currency-formatted merchant net rate** for *this* tour grade
     * **Note**: will be empty if `available` is `false`
     * - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchantNetPriceFormatted")
    public String merchantNetPriceFormatted;
    public BookingAvailabilityTourgrades200ApplicationJSONData withMerchantNetPriceFormatted(String merchantNetPriceFormatted) {
        this.merchantNetPriceFormatted = merchantNetPriceFormatted;
        return this;
    }
    
    /**
     * **numeric suggested retail price** for *this* tour grade
     * **Note**: will be `0` if `available` is `false`
     * - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("retailPrice")
    public Double retailPrice;
    public BookingAvailabilityTourgrades200ApplicationJSONData withRetailPrice(Double retailPrice) {
        this.retailPrice = retailPrice;
        return this;
    }
    
    /**
     * **currency-formatted suggested retail price** for *this* tour grade
     * **Note**: (will be '' if `available` is `false`)
     * - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("retailPriceFormatted")
    public String retailPriceFormatted;
    public BookingAvailabilityTourgrades200ApplicationJSONData withRetailPriceFormatted(String retailPriceFormatted) {
        this.retailPriceFormatted = retailPriceFormatted;
        return this;
    }
    
    /**
     * **sort order** for *this* tour grade availability object
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sortOrder")
    public Long sortOrder;
    public BookingAvailabilityTourgrades200ApplicationJSONData withSortOrder(Long sortOrder) {
        this.sortOrder = sortOrder;
        return this;
    }
    
    /**
     * **enum specifier of reason for product unavailability** (will be `null` if `available` is `true`)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unavailableReason")
    public String unavailableReason;
    public BookingAvailabilityTourgrades200ApplicationJSONData withUnavailableReason(String unavailableReason) {
        this.unavailableReason = unavailableReason;
        return this;
    }
    
}
