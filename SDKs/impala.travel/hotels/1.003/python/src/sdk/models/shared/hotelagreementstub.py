"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HotelAgreementStubDealsSellable:
    r"""There is a limit to the number of deals that can be sold."""
    
    remaining: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remaining'), 'exclude': lambda f: f is None }})
    r"""The amount of deals remaining that can sold."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HotelAgreementStubDiscount:
    r"""Rather than selling the hotel's generally available public rates, if a discount is agreed on, bookings made with this deal will have a reduced rate."""
    
    count: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count'), 'exclude': lambda f: f is None }})
    r"""This is the amount of discount received."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""This is the type of discount which can be: PERCENTAGE or FLAT_FEE."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HotelAgreementStub:
    r"""Essential information on an agreement with a hotel."""
    
    deal_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dealId') }})
    r"""The unique identifier for this deal request."""  
    hotel_agreement_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hotelAgreementId') }})
    r"""Unique identifier for the hotel agreement."""  
    special_instructions: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('specialInstructions') }})
    r"""These are conditions set by you the seller or the hotel for which the deal can be sold. For example: this deal can only be sold on mobile. Any specialInstructions will override other variables, for example, if an instruction includes: All bookings are non refundable, this will override any pre-existing cancellationPolicy."""  
    conditions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conditions'), 'exclude': lambda f: f is None }})
    r"""A deal may have conditions set to it. For example, the deal may only apply for a closed user group (PRIVATE_RATE) or sold along with another component e.g flights (PACKAGED)"""  
    deals_sellable: Optional[HotelAgreementStubDealsSellable] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dealsSellable'), 'exclude': lambda f: f is None }})
    r"""There is a limit to the number of deals that can be sold."""  
    discount: Optional[HotelAgreementStubDiscount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('discount'), 'exclude': lambda f: f is None }})
    r"""Rather than selling the hotel's generally available public rates, if a discount is agreed on, bookings made with this deal will have a reduced rate."""  
    href: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('href'), 'exclude': lambda f: f is None }})
    r"""URI that allows access to the full deal information."""  
    