// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListJobsStatusEnum - An optional filter that lets you search for jobs that have the specified status.
type ListJobsStatusEnum string

const (
	ListJobsStatusEnumInProgress         ListJobsStatusEnum = "IN_PROGRESS"
	ListJobsStatusEnumCanceled           ListJobsStatusEnum = "CANCELED"
	ListJobsStatusEnumCompleted          ListJobsStatusEnum = "COMPLETED"
	ListJobsStatusEnumDeletionInProgress ListJobsStatusEnum = "DELETION_IN_PROGRESS"
	ListJobsStatusEnumScheduled          ListJobsStatusEnum = "SCHEDULED"
)

func (e *ListJobsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "IN_PROGRESS":
		fallthrough
	case "CANCELED":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "DELETION_IN_PROGRESS":
		fallthrough
	case "SCHEDULED":
		*e = ListJobsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListJobsStatusEnum: %s", s)
	}
}

// ListJobsTargetSelectionEnum - <p>Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing when a change is detected in a target. For example, a job will run on a thing when the thing is added to a target group, even after the job was completed by all things originally in the group. </p> <note> <p>We recommend that you use continuous jobs instead of snapshot jobs for dynamic thing group targets. By using continuous jobs, devices that join the group receive the job execution even after the job has been created.</p> </note>
type ListJobsTargetSelectionEnum string

const (
	ListJobsTargetSelectionEnumContinuous ListJobsTargetSelectionEnum = "CONTINUOUS"
	ListJobsTargetSelectionEnumSnapshot   ListJobsTargetSelectionEnum = "SNAPSHOT"
)

func (e *ListJobsTargetSelectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CONTINUOUS":
		fallthrough
	case "SNAPSHOT":
		*e = ListJobsTargetSelectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListJobsTargetSelectionEnum: %s", s)
	}
}

type ListJobsQueryParams struct {
	// The maximum number of results to return per request.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// <p>The namespace used to indicate that a job is a customer-managed job.</p> <p>When you specify a value for this parameter, Amazon Web Services IoT Core sends jobs notifications to MQTT topics that contain the value in the following format.</p> <p> <code>$aws/things/<i>THING_NAME</i>/jobs/<i>JOB_ID</i>/notify-namespace-<i>NAMESPACE_ID</i>/</code> </p> <note> <p>The <code>namespaceId</code> feature is in public preview.</p> </note>
	NamespaceID *string `queryParam:"style=form,explode=true,name=namespaceId"`
	// The token to retrieve the next set of results.
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
	// An optional filter that lets you search for jobs that have the specified status.
	Status *ListJobsStatusEnum `queryParam:"style=form,explode=true,name=status"`
	// <p>Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing when a change is detected in a target. For example, a job will run on a thing when the thing is added to a target group, even after the job was completed by all things originally in the group. </p> <note> <p>We recommend that you use continuous jobs instead of snapshot jobs for dynamic thing group targets. By using continuous jobs, devices that join the group receive the job execution even after the job has been created.</p> </note>
	TargetSelection *ListJobsTargetSelectionEnum `queryParam:"style=form,explode=true,name=targetSelection"`
	// A filter that limits the returned jobs to those for the specified group.
	ThingGroupID *string `queryParam:"style=form,explode=true,name=thingGroupId"`
	// A filter that limits the returned jobs to those for the specified group.
	ThingGroupName *string `queryParam:"style=form,explode=true,name=thingGroupName"`
}

type ListJobsHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type ListJobsRequest struct {
	QueryParams ListJobsQueryParams
	Headers     ListJobsHeaders
}

type ListJobsResponse struct {
	ContentType string
	// InvalidRequestException
	InvalidRequestException interface{}
	// Success
	ListJobsResponse *shared.ListJobsResponse
	// ServiceUnavailableException
	ServiceUnavailableException interface{}
	StatusCode                  int
	RawResponse                 *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ThrottlingException
	ThrottlingException interface{}
}
