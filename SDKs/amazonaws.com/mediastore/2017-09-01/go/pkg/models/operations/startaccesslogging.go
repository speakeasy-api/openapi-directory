// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// StartAccessLoggingXAmzTargetEnum
type StartAccessLoggingXAmzTargetEnum string

const (
	StartAccessLoggingXAmzTargetEnumMediaStore20170901StartAccessLogging StartAccessLoggingXAmzTargetEnum = "MediaStore_20170901.StartAccessLogging"
)

func (e StartAccessLoggingXAmzTargetEnum) ToPointer() *StartAccessLoggingXAmzTargetEnum {
	return &e
}

func (e *StartAccessLoggingXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MediaStore_20170901.StartAccessLogging":
		*e = StartAccessLoggingXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StartAccessLoggingXAmzTargetEnum: %v", v)
	}
}

type StartAccessLoggingRequest struct {
	StartAccessLoggingInput shared.StartAccessLoggingInput   `request:"mediaType=application/json"`
	XAmzAlgorithm           *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256       *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential          *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken       *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature           *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders       *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget              StartAccessLoggingXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type StartAccessLoggingResponse struct {
	// ContainerInUseException
	ContainerInUseException interface{}
	// ContainerNotFoundException
	ContainerNotFoundException interface{}
	ContentType                string
	// InternalServerError
	InternalServerError interface{}
	// Success
	StartAccessLoggingOutput map[string]interface{}
	StatusCode               int
	RawResponse              *http.Response
}
