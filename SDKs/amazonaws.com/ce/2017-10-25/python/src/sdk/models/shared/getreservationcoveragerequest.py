"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dateinterval as shared_dateinterval
from ..shared import expression as shared_expression
from ..shared import granularity_enum as shared_granularity_enum
from ..shared import groupdefinition as shared_groupdefinition
from ..shared import sortdefinition as shared_sortdefinition
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetReservationCoverageRequest:
    r"""You can use the following request parameters to query for how much of your instance usage a reservation covered."""
    
    time_period: shared_dateinterval.DateInterval = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TimePeriod') }})  
    filter: Optional[shared_expression.Expression] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Filter'), 'exclude': lambda f: f is None }})  
    granularity: Optional[shared_granularity_enum.GranularityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Granularity'), 'exclude': lambda f: f is None }})  
    group_by: Optional[list[shared_groupdefinition.GroupDefinition]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GroupBy'), 'exclude': lambda f: f is None }})  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxResults'), 'exclude': lambda f: f is None }})  
    metrics: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Metrics'), 'exclude': lambda f: f is None }})  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NextPageToken'), 'exclude': lambda f: f is None }})  
    sort_by: Optional[shared_sortdefinition.SortDefinition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SortBy'), 'exclude': lambda f: f is None }})  
    