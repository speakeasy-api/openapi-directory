// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type StorageObjectsPatchSecurityOption1 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type StorageObjectsPatchSecurityOption2 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type StorageObjectsPatchSecurity struct {
	Option1 *StorageObjectsPatchSecurityOption1 `security:"option"`
	Option2 *StorageObjectsPatchSecurityOption2 `security:"option"`
}

type StorageObjectsPatchPathParams struct {
	// Name of the bucket in which the object resides.
	Bucket string `pathParam:"style=simple,explode=false,name=bucket"`
	// Name of the object. For information about how to URL encode object names to be path safe, see Encoding URI Path Parts.
	Object string `pathParam:"style=simple,explode=false,name=object"`
}

// StorageObjectsPatchPredefinedACLEnum - Apply a predefined set of access controls to this object.
type StorageObjectsPatchPredefinedACLEnum string

const (
	StorageObjectsPatchPredefinedACLEnumAuthenticatedRead      StorageObjectsPatchPredefinedACLEnum = "authenticatedRead"
	StorageObjectsPatchPredefinedACLEnumBucketOwnerFullControl StorageObjectsPatchPredefinedACLEnum = "bucketOwnerFullControl"
	StorageObjectsPatchPredefinedACLEnumBucketOwnerRead        StorageObjectsPatchPredefinedACLEnum = "bucketOwnerRead"
	StorageObjectsPatchPredefinedACLEnumPrivate                StorageObjectsPatchPredefinedACLEnum = "private"
	StorageObjectsPatchPredefinedACLEnumProjectPrivate         StorageObjectsPatchPredefinedACLEnum = "projectPrivate"
	StorageObjectsPatchPredefinedACLEnumPublicRead             StorageObjectsPatchPredefinedACLEnum = "publicRead"
)

func (e *StorageObjectsPatchPredefinedACLEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "authenticatedRead":
		fallthrough
	case "bucketOwnerFullControl":
		fallthrough
	case "bucketOwnerRead":
		fallthrough
	case "private":
		fallthrough
	case "projectPrivate":
		fallthrough
	case "publicRead":
		*e = StorageObjectsPatchPredefinedACLEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StorageObjectsPatchPredefinedACLEnum: %s", s)
	}
}

// StorageObjectsPatchProjectionEnum - Set of properties to return. Defaults to full.
type StorageObjectsPatchProjectionEnum string

const (
	StorageObjectsPatchProjectionEnumFull  StorageObjectsPatchProjectionEnum = "full"
	StorageObjectsPatchProjectionEnumNoACL StorageObjectsPatchProjectionEnum = "noAcl"
)

func (e *StorageObjectsPatchProjectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "full":
		fallthrough
	case "noAcl":
		*e = StorageObjectsPatchProjectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StorageObjectsPatchProjectionEnum: %s", s)
	}
}

type StorageObjectsPatchQueryParams struct {
	// Data format for the response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// If present, selects a specific revision of this object (as opposed to the latest version, the default).
	Generation *string `queryParam:"style=form,explode=true,name=generation"`
	// Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object.
	IfGenerationMatch *string `queryParam:"style=form,explode=true,name=ifGenerationMatch"`
	// Makes the operation conditional on whether the object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object.
	IfGenerationNotMatch *string `queryParam:"style=form,explode=true,name=ifGenerationNotMatch"`
	// Makes the operation conditional on whether the object's current metageneration matches the given value.
	IfMetagenerationMatch *string `queryParam:"style=form,explode=true,name=ifMetagenerationMatch"`
	// Makes the operation conditional on whether the object's current metageneration does not match the given value.
	IfMetagenerationNotMatch *string `queryParam:"style=form,explode=true,name=ifMetagenerationNotMatch"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Apply a predefined set of access controls to this object.
	PredefinedACL *StorageObjectsPatchPredefinedACLEnum `queryParam:"style=form,explode=true,name=predefinedAcl"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Set of properties to return. Defaults to full.
	Projection *StorageObjectsPatchProjectionEnum `queryParam:"style=form,explode=true,name=projection"`
	// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Upload protocol for media (e.g. "media", "multipart", "resumable").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Deprecated. Please use quotaUser instead.
	UserIP *string `queryParam:"style=form,explode=true,name=userIp"`
	// The project to be billed for this request, for Requester Pays buckets.
	UserProject *string `queryParam:"style=form,explode=true,name=userProject"`
}

type StorageObjectsPatchRequest struct {
	PathParams  StorageObjectsPatchPathParams
	QueryParams StorageObjectsPatchQueryParams
	Request     *shared.Object `request:"mediaType=application/json"`
	Security    StorageObjectsPatchSecurity
}

type StorageObjectsPatchResponse struct {
	ContentType string
	// Successful response
	Object      *shared.Object
	StatusCode  int
	RawResponse *http.Response
}
