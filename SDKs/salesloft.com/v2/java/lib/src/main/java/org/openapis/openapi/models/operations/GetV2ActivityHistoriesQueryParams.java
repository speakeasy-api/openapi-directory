/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetV2ActivityHistoriesQueryParams {
    /**
     * For internal use only. This field does not comply with our backwards compatibility policies. This filter is for authenticated users of Salesloft only and will not work for OAuth Applications. Filter by the {resource_type, resource_id} of activity. Provide this in the format resource[]=person,1234
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=_resource")
    public String resource;
    public GetV2ActivityHistoriesQueryParams withResource(String resource) {
        this.resource = resource;
        return this;
    }
    
    /**
     * Whether to include total_pages and total_count in the metadata. Defaults to false
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include_paging_counts")
    public Boolean includePagingCounts;
    public GetV2ActivityHistoriesQueryParams withIncludePagingCounts(Boolean includePagingCounts) {
        this.includePagingCounts = includePagingCounts;
        return this;
    }
    
    /**
     * Equality filters that are applied to the occurred_at field. A single filter can be used by itself or combined with other filters to create a range.
     * ---CUSTOM---
     * {"keys":[{"description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.","name":"gt","type":"iso8601 string"},{"description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.","name":"gte","type":"iso8601 string"},{"description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.","name":"lt","type":"iso8601 string"},{"description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.","name":"lte","type":"iso8601 string"}],"type":"object"}
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=occurred_at")
    public java.util.Map<String, Object> occurredAt;
    public GetV2ActivityHistoriesQueryParams withOccurredAt(java.util.Map<String, Object> occurredAt) {
        this.occurredAt = occurredAt;
        return this;
    }
    
    /**
     * The current page to fetch results from. Defaults to 1
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    public Long page;
    public GetV2ActivityHistoriesQueryParams withPage(Long page) {
        this.page = page;
        return this;
    }
    
    /**
     * How many records to show per page in the range [1, 100]. Defaults to 25
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=per_page")
    public Long perPage;
    public GetV2ActivityHistoriesQueryParams withPerPage(Long perPage) {
        this.perPage = perPage;
        return this;
    }
    
    /**
     * Filter by the pinned status of activity. Must be 'true' or 'false'
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pinned")
    public Boolean pinned;
    public GetV2ActivityHistoriesQueryParams withPinned(Boolean pinned) {
        this.pinned = pinned;
        return this;
    }
    
    /**
     * Filter by the resource id. "resource_type" filter is required to use this filter.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=resource_id")
    public String[] resourceId;
    public GetV2ActivityHistoriesQueryParams withResourceId(String[] resourceId) {
        this.resourceId = resourceId;
        return this;
    }
    
    /**
     * Filter by the resource type. A resource is a Salesloft object that the activity is attributed to. A valid resource types must be one of person, account, crm_opportunity. Can be provided as an array
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=resource_type")
    public String resourceType;
    public GetV2ActivityHistoriesQueryParams withResourceType(String resourceType) {
        this.resourceType = resourceType;
        return this;
    }
    
    /**
     * Key to sort on, must be one of: occurred_at, updated_at. Defaults to occurred_at
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_by")
    public String sortBy;
    public GetV2ActivityHistoriesQueryParams withSortBy(String sortBy) {
        this.sortBy = sortBy;
        return this;
    }
    
    /**
     * Direction to sort in, must be one of: ASC, DESC. Defaults to DESC
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_direction")
    public String sortDirection;
    public GetV2ActivityHistoriesQueryParams withSortDirection(String sortDirection) {
        this.sortDirection = sortDirection;
        return this;
    }
    
    /**
     * Filter by the type of activity. Must be one of: added_to_cadence, completed_action, call, requested_email, sent_email, received_email, email_reply, note, success, dnc_event, residency_change, meeting, meeting_held, message_conversation, task, voicemail, opportunity_stage_change, opportunity_amount_change, opportunity_close_date_change. Can be provided as an array, or as an object of type[resource_type][]=type
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=type")
    public String type;
    public GetV2ActivityHistoriesQueryParams withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.
     * ---CUSTOM---
     * {"keys":[{"description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.","name":"gt","type":"iso8601 string"},{"description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.","name":"gte","type":"iso8601 string"},{"description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.","name":"lt","type":"iso8601 string"},{"description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.","name":"lte","type":"iso8601 string"}],"type":"object"}
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=updated_at")
    public java.util.Map<String, Object> updatedAt;
    public GetV2ActivityHistoriesQueryParams withUpdatedAt(java.util.Map<String, Object> updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * Filter activities by a user's guid.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=user_guid")
    public String userGuid;
    public GetV2ActivityHistoriesQueryParams withUserGuid(String userGuid) {
        this.userGuid = userGuid;
        return this;
    }
    
}
