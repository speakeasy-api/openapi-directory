// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// FailoverPropertyConditionStatusEnum - Set the status the message must reach in the expiry_time before failing over. Options are delivered or read.
type FailoverPropertyConditionStatusEnum string

const (
	FailoverPropertyConditionStatusEnumDelivered FailoverPropertyConditionStatusEnum = "delivered"
	FailoverPropertyConditionStatusEnumRead      FailoverPropertyConditionStatusEnum = "read"
)

func (e *FailoverPropertyConditionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "delivered":
		fallthrough
	case "read":
		*e = FailoverPropertyConditionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FailoverPropertyConditionStatusEnum: %s", s)
	}
}

// FailoverProperty - Please note that last message does not have failover attribute inside it. All other messages must contain a failover attribute.
type FailoverProperty struct {
	// Set the status the message must reach in the expiry_time before failing over. Options are delivered or read.
	ConditionStatus *FailoverPropertyConditionStatusEnum `json:"condition_status,omitempty"`
	// In seconds. Minimum value is 15 and maximum value is 86,400 seconds (1 day).
	ExpiryTime *int64 `json:"expiry_time,omitempty"`
}
