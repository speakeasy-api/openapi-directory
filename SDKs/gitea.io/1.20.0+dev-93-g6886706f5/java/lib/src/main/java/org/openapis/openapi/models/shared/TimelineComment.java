/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * TimelineComment - TimelineComment represents a timeline comment (comment of any type) on a commit or issue
 */
public class TimelineComment {
    /**
     * User represents a user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assignee")
    public User assignee;
    public TimelineComment withAssignee(User assignee) {
        this.assignee = assignee;
        return this;
    }
    
    /**
     * Team represents a team in an organization
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assignee_team")
    public Team assigneeTeam;
    public TimelineComment withAssigneeTeam(Team assigneeTeam) {
        this.assigneeTeam = assigneeTeam;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body")
    public String body;
    public TimelineComment withBody(String body) {
        this.body = body;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public TimelineComment withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Issue represents an issue in a repository
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dependent_issue")
    public Issue dependentIssue;
    public TimelineComment withDependentIssue(Issue dependentIssue) {
        this.dependentIssue = dependentIssue;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("html_url")
    public String htmlUrl;
    public TimelineComment withHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;
    public TimelineComment withId(Long id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issue_url")
    public String issueUrl;
    public TimelineComment withIssueUrl(String issueUrl) {
        this.issueUrl = issueUrl;
        return this;
    }
    
    /**
     * Label a label to an issue or a pr
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("label")
    public Label label;
    public TimelineComment withLabel(Label label) {
        this.label = label;
        return this;
    }
    
    /**
     * Milestone milestone is a collection of issues on one repository
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("milestone")
    public Milestone milestone;
    public TimelineComment withMilestone(Milestone milestone) {
        this.milestone = milestone;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("new_ref")
    public String newRef;
    public TimelineComment withNewRef(String newRef) {
        this.newRef = newRef;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("new_title")
    public String newTitle;
    public TimelineComment withNewTitle(String newTitle) {
        this.newTitle = newTitle;
        return this;
    }
    
    /**
     * Milestone milestone is a collection of issues on one repository
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("old_milestone")
    public Milestone oldMilestone;
    public TimelineComment withOldMilestone(Milestone oldMilestone) {
        this.oldMilestone = oldMilestone;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("old_project_id")
    public Long oldProjectId;
    public TimelineComment withOldProjectId(Long oldProjectId) {
        this.oldProjectId = oldProjectId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("old_ref")
    public String oldRef;
    public TimelineComment withOldRef(String oldRef) {
        this.oldRef = oldRef;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("old_title")
    public String oldTitle;
    public TimelineComment withOldTitle(String oldTitle) {
        this.oldTitle = oldTitle;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("project_id")
    public Long projectId;
    public TimelineComment withProjectId(Long projectId) {
        this.projectId = projectId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pull_request_url")
    public String pullRequestUrl;
    public TimelineComment withPullRequestUrl(String pullRequestUrl) {
        this.pullRequestUrl = pullRequestUrl;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ref_action")
    public String refAction;
    public TimelineComment withRefAction(String refAction) {
        this.refAction = refAction;
        return this;
    }
    
    /**
     * Comment represents a comment on a commit or issue
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ref_comment")
    public Comment refComment;
    public TimelineComment withRefComment(Comment refComment) {
        this.refComment = refComment;
        return this;
    }
    
    /**
     * commit SHA where issue/PR was referenced
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ref_commit_sha")
    public String refCommitSha;
    public TimelineComment withRefCommitSha(String refCommitSha) {
        this.refCommitSha = refCommitSha;
        return this;
    }
    
    /**
     * Issue represents an issue in a repository
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ref_issue")
    public Issue refIssue;
    public TimelineComment withRefIssue(Issue refIssue) {
        this.refIssue = refIssue;
        return this;
    }
    
    /**
     * whether the assignees were removed or added
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("removed_assignee")
    public Boolean removedAssignee;
    public TimelineComment withRemovedAssignee(Boolean removedAssignee) {
        this.removedAssignee = removedAssignee;
        return this;
    }
    
    /**
     * User represents a user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resolve_doer")
    public User resolveDoer;
    public TimelineComment withResolveDoer(User resolveDoer) {
        this.resolveDoer = resolveDoer;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("review_id")
    public Long reviewId;
    public TimelineComment withReviewId(Long reviewId) {
        this.reviewId = reviewId;
        return this;
    }
    
    /**
     * TrackedTime worked time for an issue / pr
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracked_time")
    public TrackedTime trackedTime;
    public TimelineComment withTrackedTime(TrackedTime trackedTime) {
        this.trackedTime = trackedTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;
    public TimelineComment withType(String type) {
        this.type = type;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;
    public TimelineComment withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * User represents a user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    public User user;
    public TimelineComment withUser(User user) {
        this.user = user;
        return this;
    }
    
}
