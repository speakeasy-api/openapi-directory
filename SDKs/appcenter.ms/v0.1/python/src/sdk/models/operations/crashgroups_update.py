"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class CrashGroupsUpdateSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    
class CrashGroupsUpdateRequestBodyStatusEnum(str, Enum):
    OPEN = 'open'
    CLOSED = 'closed'
    IGNORED = 'ignored'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CrashGroupsUpdateRequestBody:
    r"""Group change object. All fields are optional and only provided fields will get updated."""
    
    annotation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('annotation'), 'exclude': lambda f: f is None }})  
    status: Optional[CrashGroupsUpdateRequestBodyStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class CrashGroupsUpdateRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    crash_group_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'crash_group_id', 'style': 'simple', 'explode': False }})
    r"""id of a specific group"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    request_body: CrashGroupsUpdateRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Group change object. All fields are optional and only provided fields will get updated."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CrashGroupsUpdateDefaultApplicationJSON:
    r"""Error"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    
class CrashGroupsUpdate200ApplicationJSONReasonFrameLanguageEnum(str, Enum):
    r"""programming language of the frame"""
    JAVA_SCRIPT = 'JavaScript'
    C_SHARP = 'CSharp'
    OBJECTIVE_C = 'Objective-C'
    OBJECTIVE_CPP = 'Objective-Cpp'
    CPP = 'Cpp'
    C = 'C'
    SWIFT = 'Swift'
    JAVA = 'Java'
    UNKNOWN = 'Unknown'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CrashGroupsUpdate200ApplicationJSONReasonFrame:
    r"""frame belonging to the reason of the crash"""
    
    app_code: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_code'), 'exclude': lambda f: f is None }})
    r"""this line isn't from any framework"""  
    class_method: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('class_method'), 'exclude': lambda f: f is None }})
    r"""is a class method"""  
    class_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('class_name'), 'exclude': lambda f: f is None }})
    r"""name of the class"""  
    code_formatted: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code_formatted'), 'exclude': lambda f: f is None }})
    r"""Formatted frame string"""  
    code_raw: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code_raw'), 'exclude': lambda f: f is None }})
    r"""Unformatted Frame string"""  
    exception_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exception_type'), 'exclude': lambda f: f is None }})
    r"""Exception type."""  
    file: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file'), 'exclude': lambda f: f is None }})
    r"""name of the file"""  
    framework_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('framework_name'), 'exclude': lambda f: f is None }})
    r"""Name of the framework"""  
    language: Optional[CrashGroupsUpdate200ApplicationJSONReasonFrameLanguageEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language'), 'exclude': lambda f: f is None }})
    r"""programming language of the frame"""  
    line: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line'), 'exclude': lambda f: f is None }})
    r"""line number"""  
    method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method'), 'exclude': lambda f: f is None }})
    r"""name of the method"""  
    method_params: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method_params'), 'exclude': lambda f: f is None }})
    r"""parameters of the frames method"""  
    os_exception_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('os_exception_type'), 'exclude': lambda f: f is None }})
    r"""OS exception type. (aka. SIGNAL)"""  
    
class CrashGroupsUpdate200ApplicationJSONStatusEnum(str, Enum):
    OPEN = 'open'
    CLOSED = 'closed'
    IGNORED = 'ignored'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CrashGroupsUpdate200ApplicationJSON:
    r"""Success"""
    
    annotation: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('annotation') }})  
    app_version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_version') }})  
    build: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('build') }})  
    count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count') }})  
    crash_group_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crash_group_id') }})  
    crash_reason: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crash_reason') }})  
    display_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_id') }})  
    fatal: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fatal') }})
    r"""Crash or handled exception"""  
    first_occurrence: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_occurrence'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    last_occurrence: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_occurrence'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    new_crash_group_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('new_crash_group_id') }})  
    status: CrashGroupsUpdate200ApplicationJSONStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    exception: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exception'), 'exclude': lambda f: f is None }})  
    impacted_users: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('impacted_users'), 'exclude': lambda f: f is None }})  
    reason_frame: Optional[CrashGroupsUpdate200ApplicationJSONReasonFrame] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason_frame'), 'exclude': lambda f: f is None }})
    r"""frame belonging to the reason of the crash"""  
    

@dataclasses.dataclass
class CrashGroupsUpdateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    crash_groups_update_200_application_json_object: Optional[CrashGroupsUpdate200ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    crash_groups_update_default_application_json_object: Optional[CrashGroupsUpdateDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    