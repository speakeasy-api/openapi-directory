<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Comments 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Marks a comment as not spam by blog id, post id and comment id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsApproveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsApproveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsApproveResponse
     */
	public function bloggerCommentsApprove(
        \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsApproveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsApproveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsApproveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/approve', \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsApproveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BloggerCommentsApproveRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsApproveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->comment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Comment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a comment by blog id, post id and comment id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsDeleteResponse
     */
	public function bloggerCommentsDelete(
        \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}', \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BloggerCommentsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Gets a comment by id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsGetResponse
     */
	public function bloggerCommentsGet(
        \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}', \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BloggerCommentsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->comment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Comment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists comments.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsListResponse
     */
	public function bloggerCommentsList(
        \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/blogs/{blogId}/posts/{postId}/comments', \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BloggerCommentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->commentList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommentList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists comments by blog.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsListByBlogRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsListByBlogSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsListByBlogResponse
     */
	public function bloggerCommentsListByBlog(
        \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsListByBlogRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsListByBlogSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsListByBlogResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/blogs/{blogId}/comments', \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsListByBlogRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BloggerCommentsListByBlogRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsListByBlogResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->commentList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommentList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Marks a comment as spam by blog id, post id and comment id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsMarkAsSpamRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsMarkAsSpamSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsMarkAsSpamResponse
     */
	public function bloggerCommentsMarkAsSpam(
        \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsMarkAsSpamRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsMarkAsSpamSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsMarkAsSpamResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/spam', \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsMarkAsSpamRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BloggerCommentsMarkAsSpamRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsMarkAsSpamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->comment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Comment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes the content of a comment by blog id, post id and comment id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsRemoveContentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsRemoveContentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsRemoveContentResponse
     */
	public function bloggerCommentsRemoveContent(
        \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsRemoveContentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsRemoveContentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsRemoveContentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/removecontent', \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsRemoveContentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BloggerCommentsRemoveContentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BloggerCommentsRemoveContentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->comment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Comment', 'json');
            }
        }

        return $response;
    }
}