/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import axios from "axios";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://bulkexports.twilio.com"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * This is the public Twilio REST API.
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;
  }

  createExportCustomJob(
    req: operations.CreateExportCustomJobRequest,
    security: operations.CreateExportCustomJobSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateExportCustomJobResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateExportCustomJobRequest(req);
    }

    let baseURL: string = operations.CreateExportCustomJobServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Exports/{ResourceType}/Jobs",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateExportCustomJobSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateExportCustomJobResponse =
        new operations.CreateExportCustomJobResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bulkexportsV1ExportExportCustomJob = utils.objectToClass(
              httpRes?.data,
              shared.BulkexportsV1ExportExportCustomJob
            );
          }
          break;
      }

      return res;
    });
  }

  deleteJob(
    req: operations.DeleteJobRequest,
    security: operations.DeleteJobSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteJobResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteJobRequest(req);
    }

    let baseURL: string = operations.DeleteJobServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Exports/Jobs/{JobSid}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteJobSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteJobResponse =
        new operations.DeleteJobResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Fetch a specific Day.
   */
  fetchDay(
    req: operations.FetchDayRequest,
    security: operations.FetchDaySecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchDayResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FetchDayRequest(req);
    }

    let baseURL: string = operations.FetchDayServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Exports/{ResourceType}/Days/{Day}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FetchDaySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchDayResponse = new operations.FetchDayResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 307:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bulkexportsV1ExportDayInstance = utils.objectToClass(
              httpRes?.data,
              shared.BulkexportsV1ExportDayInstance
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Fetch a specific Export.
   */
  fetchExport(
    req: operations.FetchExportRequest,
    security: operations.FetchExportSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchExportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FetchExportRequest(req);
    }

    let baseURL: string = operations.FetchExportServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Exports/{ResourceType}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FetchExportSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchExportResponse =
        new operations.FetchExportResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bulkexportsV1Export = utils.objectToClass(
              httpRes?.data,
              shared.BulkexportsV1Export
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Fetch a specific Export Configuration.
   */
  fetchExportConfiguration(
    req: operations.FetchExportConfigurationRequest,
    security: operations.FetchExportConfigurationSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchExportConfigurationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FetchExportConfigurationRequest(req);
    }

    let baseURL: string = operations.FetchExportConfigurationServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Exports/{ResourceType}/Configuration",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FetchExportConfigurationSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchExportConfigurationResponse =
        new operations.FetchExportConfigurationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bulkexportsV1ExportConfiguration = utils.objectToClass(
              httpRes?.data,
              shared.BulkexportsV1ExportConfiguration
            );
          }
          break;
      }

      return res;
    });
  }

  fetchJob(
    req: operations.FetchJobRequest,
    security: operations.FetchJobSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchJobResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FetchJobRequest(req);
    }

    let baseURL: string = operations.FetchJobServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Exports/Jobs/{JobSid}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FetchJobSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchJobResponse = new operations.FetchJobResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bulkexportsV1ExportJob = utils.objectToClass(
              httpRes?.data,
              shared.BulkexportsV1ExportJob
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve a list of all Days for a resource.
   */
  listDay(
    req: operations.ListDayRequest,
    security: operations.ListDaySecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.ListDayResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListDayRequest(req);
    }

    let baseURL: string = operations.ListDayServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Exports/{ResourceType}/Days",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListDaySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListDayResponse = new operations.ListDayResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listDayResponse = utils.objectToClass(
              httpRes?.data,
              operations.ListDayListDayResponse
            );
          }
          break;
      }

      return res;
    });
  }

  listExportCustomJob(
    req: operations.ListExportCustomJobRequest,
    security: operations.ListExportCustomJobSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.ListExportCustomJobResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListExportCustomJobRequest(req);
    }

    let baseURL: string = operations.ListExportCustomJobServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Exports/{ResourceType}/Jobs",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListExportCustomJobSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListExportCustomJobResponse =
        new operations.ListExportCustomJobResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listExportCustomJobResponse = utils.objectToClass(
              httpRes?.data,
              operations.ListExportCustomJobListExportCustomJobResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a specific Export Configuration.
   */
  updateExportConfiguration(
    req: operations.UpdateExportConfigurationRequest,
    security: operations.UpdateExportConfigurationSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateExportConfigurationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateExportConfigurationRequest(req);
    }

    let baseURL: string = operations.UpdateExportConfigurationServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Exports/{ResourceType}/Configuration",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateExportConfigurationSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateExportConfigurationResponse =
        new operations.UpdateExportConfigurationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bulkexportsV1ExportConfiguration = utils.objectToClass(
              httpRes?.data,
              shared.BulkexportsV1ExportConfiguration
            );
          }
          break;
      }

      return res;
    });
  }
}
