// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type NctscSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type NctscRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Roll No
	Rollno string `json:"rollno"`
	// Year
	Year string `json:"year"`
}

// NctscRequestBodyFormatEnum - The format of the certificate in response.
type NctscRequestBodyFormatEnum string

const (
	NctscRequestBodyFormatEnumPdf NctscRequestBodyFormatEnum = "pdf"
)

func (e *NctscRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = NctscRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NctscRequestBodyFormatEnum: %s", s)
	}
}

// NctscRequestBody - Request format
type NctscRequestBody struct {
	CertificateParameters *NctscRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format NctscRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type NctscRequest struct {
	// Request format
	Request  *NctscRequestBody `request:"mediaType=application/json"`
	Security NctscSecurity
}

type Nctsc504ApplicationJSONErrorEnum string

const (
	Nctsc504ApplicationJSONErrorEnumGatewayTimeout Nctsc504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Nctsc504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Nctsc504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nctsc504ApplicationJSONErrorEnum: %s", s)
	}
}

type Nctsc504ApplicationJSONErrorDescriptionEnum string

const (
	Nctsc504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Nctsc504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Nctsc504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Nctsc504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nctsc504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Nctsc504ApplicationJSON - Gateway timeout
type Nctsc504ApplicationJSON struct {
	Error            *Nctsc504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nctsc504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nctsc503ApplicationJSONErrorEnum string

const (
	Nctsc503ApplicationJSONErrorEnumServiceUnavailable Nctsc503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Nctsc503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Nctsc503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nctsc503ApplicationJSONErrorEnum: %s", s)
	}
}

type Nctsc503ApplicationJSONErrorDescriptionEnum string

const (
	Nctsc503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Nctsc503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Nctsc503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Nctsc503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nctsc503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Nctsc503ApplicationJSON - Service unavailable
type Nctsc503ApplicationJSON struct {
	Error            *Nctsc503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nctsc503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nctsc502ApplicationJSONErrorEnum string

const (
	Nctsc502ApplicationJSONErrorEnumBadGatewy Nctsc502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Nctsc502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Nctsc502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nctsc502ApplicationJSONErrorEnum: %s", s)
	}
}

type Nctsc502ApplicationJSONErrorDescriptionEnum string

const (
	Nctsc502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Nctsc502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Nctsc502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Nctsc502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nctsc502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Nctsc502ApplicationJSON - Bad gateway
type Nctsc502ApplicationJSON struct {
	Error            *Nctsc502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nctsc502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nctsc500ApplicationJSONErrorEnum string

const (
	Nctsc500ApplicationJSONErrorEnumInternalServerError Nctsc500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Nctsc500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Nctsc500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nctsc500ApplicationJSONErrorEnum: %s", s)
	}
}

type Nctsc500ApplicationJSONErrorDescriptionEnum string

const (
	Nctsc500ApplicationJSONErrorDescriptionEnumInternalServerError Nctsc500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Nctsc500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Nctsc500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nctsc500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Nctsc500ApplicationJSON - Internal server error
type Nctsc500ApplicationJSON struct {
	Error            *Nctsc500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nctsc500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nctsc404ApplicationJSONErrorEnum string

const (
	Nctsc404ApplicationJSONErrorEnumRecordNotFound Nctsc404ApplicationJSONErrorEnum = "record_not_found"
	Nctsc404ApplicationJSONErrorEnumURLNotFound    Nctsc404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Nctsc404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Nctsc404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nctsc404ApplicationJSONErrorEnum: %s", s)
	}
}

type Nctsc404ApplicationJSONErrorDescriptionEnum string

const (
	Nctsc404ApplicationJSONErrorDescriptionEnumNoRecordFound               Nctsc404ApplicationJSONErrorDescriptionEnum = "No record found"
	Nctsc404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Nctsc404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Nctsc404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Nctsc404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nctsc404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Nctsc404ApplicationJSON - No record found
type Nctsc404ApplicationJSON struct {
	Error            *Nctsc404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nctsc404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nctsc401ApplicationJSONErrorEnum string

const (
	Nctsc401ApplicationJSONErrorEnumInvalidAuthentication Nctsc401ApplicationJSONErrorEnum = "invalid_authentication"
	Nctsc401ApplicationJSONErrorEnumInvalidAuthorization  Nctsc401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Nctsc401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Nctsc401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nctsc401ApplicationJSONErrorEnum: %s", s)
	}
}

type Nctsc401ApplicationJSONErrorDescriptionEnum string

const (
	Nctsc401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Nctsc401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Nctsc401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Nctsc401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Nctsc401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Nctsc401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nctsc401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Nctsc401ApplicationJSON - Unauthorized access
type Nctsc401ApplicationJSON struct {
	Error            *Nctsc401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nctsc401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nctsc400ApplicationJSONErrorEnum string

const (
	Nctsc400ApplicationJSONErrorEnumMissingParameter Nctsc400ApplicationJSONErrorEnum = "missing_parameter"
	Nctsc400ApplicationJSONErrorEnumInvalidParameter Nctsc400ApplicationJSONErrorEnum = "invalid_parameter"
	Nctsc400ApplicationJSONErrorEnumInvalidFormat    Nctsc400ApplicationJSONErrorEnum = "invalid_format"
	Nctsc400ApplicationJSONErrorEnumInvalidTxnid     Nctsc400ApplicationJSONErrorEnum = "invalid_txnid"
	Nctsc400ApplicationJSONErrorEnumInvalidConsentid Nctsc400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Nctsc400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Nctsc400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nctsc400ApplicationJSONErrorEnum: %s", s)
	}
}

type Nctsc400ApplicationJSONErrorDescriptionEnum string

const (
	Nctsc400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Nctsc400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Nctsc400ApplicationJSONErrorDescriptionEnumBadRequest                              Nctsc400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Nctsc400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Nctsc400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Nctsc400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Nctsc400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Nctsc400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Nctsc400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Nctsc400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Nctsc400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nctsc400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Nctsc400ApplicationJSON - Bad request
type Nctsc400ApplicationJSON struct {
	Error            *Nctsc400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nctsc400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type NctscResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Nctsc400ApplicationJSONObject *Nctsc400ApplicationJSON
	// Unauthorized access
	Nctsc401ApplicationJSONObject *Nctsc401ApplicationJSON
	// No record found
	Nctsc404ApplicationJSONObject *Nctsc404ApplicationJSON
	// Internal server error
	Nctsc500ApplicationJSONObject *Nctsc500ApplicationJSON
	// Bad gateway
	Nctsc502ApplicationJSONObject *Nctsc502ApplicationJSON
	// Service unavailable
	Nctsc503ApplicationJSONObject *Nctsc503ApplicationJSON
	// Gateway timeout
	Nctsc504ApplicationJSONObject *Nctsc504ApplicationJSON
}
