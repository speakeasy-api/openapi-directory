"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RateEstimateMonetaryValue:
    r"""A monetary value, such as the price of a shipping label, the insured value of a package, or an account balance."""
    
    amount: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""The monetary amount, in the specified currency."""  
    currency: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency') }})  
    
class RateEstimateRateTypeEnum(str, Enum):
    r"""The possible rate type values"""
    CHECK = 'check'
    SHIPMENT = 'shipment'

class RateEstimateValidationStatusEnum(str, Enum):
    r"""The possible validation status values"""
    VALID = 'valid'
    INVALID = 'invalid'
    HAS_WARNINGS = 'has_warnings'
    UNKNOWN = 'unknown'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RateEstimate:
    r"""A rate estimate"""
    
    carrier_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carrier_code') }})
    r"""carrier code"""  
    carrier_friendly_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carrier_friendly_name') }})
    r"""carrier friendly name"""  
    carrier_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carrier_id') }})
    r"""A string that uniquely identifies the carrier"""  
    carrier_nickname: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carrier_nickname') }})
    r"""carrier nickname"""  
    confirmation_amount: RateEstimateMonetaryValue = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confirmation_amount') }})
    r"""The confirmation amount"""  
    error_messages: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_messages') }})
    r"""The error messages"""  
    guaranteed_service: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('guaranteed_service') }})
    r"""Indicates if the rate is guaranteed."""  
    insurance_amount: RateEstimateMonetaryValue = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_amount') }})
    r"""The insurance amount"""  
    negotiated_rate: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('negotiated_rate') }})
    r"""Indicates if the rates been negotiated"""  
    other_amount: RateEstimateMonetaryValue = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other_amount') }})
    r"""Any other charges associated with this rate"""  
    package_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('package_type') }})
    r"""package type that this rate was estimated for"""  
    rate_type: RateEstimateRateTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rate_type') }})  
    service_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service_code') }})
    r"""service code for the rate"""  
    service_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service_type') }})
    r"""service type"""  
    shipping_amount: RateEstimateMonetaryValue = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipping_amount') }})
    r"""The shipping amount"""  
    trackable: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trackable') }})
    r"""Indicates if rate is trackable"""  
    validation_status: RateEstimateValidationStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validation_status') }})  
    warning_messages: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warning_messages') }})
    r"""The warning messages"""  
    zone: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zone') }})
    r"""Certain carriers base [their rates](https://blog.stamps.com/2017/09/08/usps-postal-zones/) off of
    custom zones that vary depending upon the ship_to and ship_from location
    """  
    carrier_delivery_days: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carrier_delivery_days'), 'exclude': lambda f: f is None }})
    r"""The carrier delivery days"""  
    delivery_days: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delivery_days'), 'exclude': lambda f: f is None }})
    r"""The number of days estimated for delivery, this will show the _actual_ delivery
    time if for example, the package gets shipped on a Friday
    """  
    estimated_delivery_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimated_delivery_date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    ship_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ship_date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""ship date"""  
    tax_amount: Optional[RateEstimateMonetaryValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax_amount'), 'exclude': lambda f: f is None }})
    r"""Tariff and additional taxes associated with an international shipment."""  
    