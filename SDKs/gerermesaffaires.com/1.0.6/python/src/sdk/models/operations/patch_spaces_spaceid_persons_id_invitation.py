"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class PatchSpacesSpaceIDPersonsIDInvitationSecurity:
    
    gma_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class PatchSpacesSpaceIDPersonsIDInvitationRequestBodyClientManagementEnum(str, Enum):
    NO = 'no'
    MANAGER = 'manager'
    ADN = 'adn'

class PatchSpacesSpaceIDPersonsIDInvitationRequestBodyFoldersRightEnum(str, Enum):
    READ = 'read'
    WRITE = 'write'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatchSpacesSpaceIDPersonsIDInvitationRequestBodyFolders:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})  
    right: Optional[PatchSpacesSpaceIDPersonsIDInvitationRequestBodyFoldersRightEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Right'), 'exclude': lambda f: f is None }})  
    
class PatchSpacesSpaceIDPersonsIDInvitationRequestBodyPlayerEnum(str, Enum):
    GUEST = 'guest'
    OWNER = 'owner'
    MANAGER = 'manager'
    ASSISTANT = 'assistant'
    COLLABORATOR = 'collaborator'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatchSpacesSpaceIDPersonsIDInvitationRequestBody:
    r"""Invitation to create"""
    
    client_management: Optional[PatchSpacesSpaceIDPersonsIDInvitationRequestBodyClientManagementEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClientManagement'), 'exclude': lambda f: f is None }})  
    employee_access: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmployeeAccess'), 'exclude': lambda f: f is None }})  
    folders: Optional[list[PatchSpacesSpaceIDPersonsIDInvitationRequestBodyFolders]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Folders'), 'exclude': lambda f: f is None }})  
    group_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GroupIds'), 'exclude': lambda f: f is None }})  
    is_admin: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsAdmin'), 'exclude': lambda f: f is None }})  
    player: Optional[PatchSpacesSpaceIDPersonsIDInvitationRequestBodyPlayerEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Player'), 'exclude': lambda f: f is None }})  
    player_end: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlayerEnd'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PatchSpacesSpaceIDPersonsIDInvitationRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""Id of the person"""  
    request_body: PatchSpacesSpaceIDPersonsIDInvitationRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Invitation to create"""  
    space_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'spaceId', 'style': 'simple', 'explode': False }})
    r"""Id of the space"""  
    

@dataclasses.dataclass
class PatchSpacesSpaceIDPersonsIDInvitationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    