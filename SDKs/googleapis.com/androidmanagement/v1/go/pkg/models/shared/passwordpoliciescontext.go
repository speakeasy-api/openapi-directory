// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PasswordPoliciesContextPasswordPolicyScopeEnum - The scope of non-compliant password.
type PasswordPoliciesContextPasswordPolicyScopeEnum string

const (
	PasswordPoliciesContextPasswordPolicyScopeEnumScopeUnspecified PasswordPoliciesContextPasswordPolicyScopeEnum = "SCOPE_UNSPECIFIED"
	PasswordPoliciesContextPasswordPolicyScopeEnumScopeDevice      PasswordPoliciesContextPasswordPolicyScopeEnum = "SCOPE_DEVICE"
	PasswordPoliciesContextPasswordPolicyScopeEnumScopeProfile     PasswordPoliciesContextPasswordPolicyScopeEnum = "SCOPE_PROFILE"
)

func (e *PasswordPoliciesContextPasswordPolicyScopeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SCOPE_UNSPECIFIED":
		fallthrough
	case "SCOPE_DEVICE":
		fallthrough
	case "SCOPE_PROFILE":
		*e = PasswordPoliciesContextPasswordPolicyScopeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PasswordPoliciesContextPasswordPolicyScopeEnum: %s", s)
	}
}

// PasswordPoliciesContext - Additional context for non-compliance related to password policies.
type PasswordPoliciesContext struct {
	// The scope of non-compliant password.
	PasswordPolicyScope *PasswordPoliciesContextPasswordPolicyScopeEnum `json:"passwordPolicyScope,omitempty"`
}
