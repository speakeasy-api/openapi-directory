<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class User 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * approveVendorApplication
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApproveVendorApplicationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApproveVendorApplicationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApproveVendorApplicationResponse
     */
	public function approveVendorApplication(
        \OpenAPI\OpenAPI\Models\Operations\ApproveVendorApplicationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApproveVendorApplicationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApproveVendorApplicationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{userId}/approve', \OpenAPI\OpenAPI\Models\Operations\ApproveVendorApplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApproveVendorApplicationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new user
     * 
     * Create a new platform user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateUserResponse
     */
	public function createUser(
        \OpenAPI\OpenAPI\Models\Operations\CreateUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "user", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CreateUserRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete your account
     * 
     * Delete your MotaWord account. Be careful; once deleted, you will not have access to MotaWord via API or your dashboards.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAccountResponse
     */
	public function deleteAccount(
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAccountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/delete-account');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete requester account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUserAccountRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUserAccountResponse
     */
	public function deleteUserAccount(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUserAccountRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUserAccountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{userId}/delete-account', \OpenAPI\OpenAPI\Models\Operations\DeleteUserAccountRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUserAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * downgradeProofreader
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\DowngradeProofreaderResponse
     */
	public function downgradeProofreader(
    ): \OpenAPI\OpenAPI\Models\Operations\DowngradeProofreaderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/downgrade-proofreader');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DowngradeProofreaderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * downgradeUserProofreader
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DowngradeUserProofreaderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DowngradeUserProofreaderSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DowngradeUserProofreaderResponse
     */
	public function downgradeUserProofreader(
        \OpenAPI\OpenAPI\Models\Operations\DowngradeUserProofreaderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DowngradeUserProofreaderSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DowngradeUserProofreaderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{userId}/downgrade-proofreader', \OpenAPI\OpenAPI\Models\Operations\DowngradeUserProofreaderRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DowngradeUserProofreaderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Freeze account
     * 
     * Freeze your account temporarily, especially to stop receiving project notifications.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\FreezeAccountResponse
     */
	public function freezeAccount(
    ): \OpenAPI\OpenAPI\Models\Operations\FreezeAccountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/freeze-account');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FreezeAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Freeze requester account for project notifications
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FreezeUserAccountRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FreezeUserAccountResponse
     */
	public function freezeUserAccount(
        \OpenAPI\OpenAPI\Models\Operations\FreezeUserAccountRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FreezeUserAccountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{userId}/freeze-account', \OpenAPI\OpenAPI\Models\Operations\FreezeUserAccountRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FreezeUserAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all vendor tags for vendors filter
     * 
     * Returns all vendor tags for vendors filter
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllVendorTagsResponse
     */
	public function getAllVendorTags(
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllVendorTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/tags');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllVendorTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vendorTags = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\VendorTag>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View your vendor earnings
     * 
     * View your vendor earnings from your translation activites. Includes real-time earnings from ongoing projects, and fixed earnings from completed projects, as well as total earnings and string edits.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEarningsResponse
     */
	public function getEarnings(
    ): \OpenAPI\OpenAPI\Models\Operations\GetEarningsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/earnings');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEarningsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->earnings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Earnings', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Filter vendors based on provided parameters
     * 
     * Get a list of vendors available for the criteria given
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFilteredVendorsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFilteredVendorsResponse
     */
	public function getFilteredVendors(
        \OpenAPI\OpenAPI\Models\Operations\GetFilteredVendorsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFilteredVendorsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/filter');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "filterVendorRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFilteredVendorsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFilteredVendorsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View your account info
     * 
     * Get your user information, including client, corporate account and vendor account information.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMeResponse
     */
	public function getMe(
    ): \OpenAPI\OpenAPI\Models\Operations\GetMeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View your payment and billing info
     * 
     * Returns billing and saved credit card information for user, and their corporate account if present & allowed.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPaymentInfoResponse
     */
	public function getPaymentInfo(
    ): \OpenAPI\OpenAPI\Models\Operations\GetPaymentInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/payment');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPaymentInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paymentInfo = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaymentInfo', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View your permissions
     * 
     * View a list of permissions that your user account is authorized for, configured either by default, or by your account administator.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPermissionsResponse
     */
	public function getPermissions(
    ): \OpenAPI\OpenAPI\Models\Operations\GetPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/permissions');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->permissionList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PermissionList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View your vendor responsiveness
     * 
     * View your statistical analysis of responsiveness to our translation projects, invitations, notifications and such.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetResponsivityRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetResponsivityResponse
     */
	public function getResponsivity(
        \OpenAPI\OpenAPI\Models\Operations\GetResponsivityRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetResponsivityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/responsivity');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetResponsivityRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetResponsivityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responsivityList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponsivityList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View your account statistics
     * 
     * View your client and vendor statistics.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetStatsResponse
     */
	public function getStats(
    ): \OpenAPI\OpenAPI\Models\Operations\GetStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/stats');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->stats = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Stats', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of user groups that this user belongs to.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetThisUserGroupsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetThisUserGroupsResponse
     */
	public function getThisUserGroups(
        \OpenAPI\OpenAPI\Models\Operations\GetThisUserGroupsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetThisUserGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{userId}/user-groups', \OpenAPI\OpenAPI\Models\Operations\GetThisUserGroupsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetThisUserGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userGroupList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserGroupList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get user information, including client or vendor specific info.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserResponse
     */
	public function getUser(
        \OpenAPI\OpenAPI\Models\Operations\GetUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{userId}', \OpenAPI\OpenAPI\Models\Operations\GetUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns your vendor earnings. Includes real-time earnings from ongoing projects, and fixed earnings from completed projects. Also includes total earnings and string edits.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserEarningsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserEarningsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserEarningsResponse
     */
	public function getUserEarnings(
        \OpenAPI\OpenAPI\Models\Operations\GetUserEarningsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetUserEarningsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserEarningsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{userId}/earnings', \OpenAPI\OpenAPI\Models\Operations\GetUserEarningsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserEarningsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->earnings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Earnings', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View your user groups
     * 
     * View the user groups that your user account belongs to. This is typically configured by your account administator's dashboard.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserGroupsResponse
     */
	public function getUserGroups(
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user-groups');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userGroupList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserGroupList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View user's payment and billing info
     * 
     * Returns billing and saved credit card information for user, and their corporate account if present & allowed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserPaymentInfoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserPaymentInfoResponse
     */
	public function getUserPaymentInfo(
        \OpenAPI\OpenAPI\Models\Operations\GetUserPaymentInfoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserPaymentInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{userId}/payment', \OpenAPI\OpenAPI\Models\Operations\GetUserPaymentInfoRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserPaymentInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paymentInfo = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaymentInfo', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of permissions that this user is authorized for.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserPermissionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserPermissionsResponse
     */
	public function getUserPermissions(
        \OpenAPI\OpenAPI\Models\Operations\GetUserPermissionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{userId}/permissions', \OpenAPI\OpenAPI\Models\Operations\GetUserPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->permissionList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PermissionList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the language pairs that the user has ordered most.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserPopularPairsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserPopularPairsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserPopularPairsResponse
     */
	public function getUserPopularPairs(
        \OpenAPI\OpenAPI\Models\Operations\GetUserPopularPairsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetUserPopularPairsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserPopularPairsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{userId}/stats/popular-pairs', \OpenAPI\OpenAPI\Models\Operations\GetUserPopularPairsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserPopularPairsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->popularLanguagePairs = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PopularLanguagePairs', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a user's project statistics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserProjectStatsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserProjectStatsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserProjectStatsResponse
     */
	public function getUserProjectStats(
        \OpenAPI\OpenAPI\Models\Operations\GetUserProjectStatsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetUserProjectStatsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserProjectStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{userId}/stats/projects', \OpenAPI\OpenAPI\Models\Operations\GetUserProjectStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserProjectStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clientProjectStats = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClientProjectStats', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a user's vendor responsivity stats
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserResponsivityRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserResponsivitySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserResponsivityResponse
     */
	public function getUserResponsivity(
        \OpenAPI\OpenAPI\Models\Operations\GetUserResponsivityRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetUserResponsivitySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserResponsivityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{userId}/responsivity', \OpenAPI\OpenAPI\Models\Operations\GetUserResponsivityRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUserResponsivityRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserResponsivityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responsivityList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponsivityList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a user's client and vendor statistics. This used to be called "summary" (\@deprecated).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserStatsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserStatsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserStatsResponse
     */
	public function getUserStats(
        \OpenAPI\OpenAPI\Models\Operations\GetUserStatsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetUserStatsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{userId}/stats', \OpenAPI\OpenAPI\Models\Operations\GetUserStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->stats = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Stats', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of platform users
     * 
     * Get a list of platform users
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersResponse
     */
	public function getUsers(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUsersRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Log user's current location. This data is used in our Intelligent Project Manager for various data analysis, including project prioritization for vendors and account validation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\LocationUpdateContent $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LogLocationResponse
     */
	public function logLocation(
        \OpenAPI\OpenAPI\Models\Shared\LocationUpdateContent $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LogLocationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/location');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LogLocationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * makeProofreader
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\MakeProofreaderResponse
     */
	public function makeProofreader(
    ): \OpenAPI\OpenAPI\Models\Operations\MakeProofreaderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/make-proofreader');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MakeProofreaderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * makeUserProofreader
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MakeUserProofreaderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MakeUserProofreaderSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MakeUserProofreaderResponse
     */
	public function makeUserProofreader(
        \OpenAPI\OpenAPI\Models\Operations\MakeUserProofreaderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MakeUserProofreaderSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MakeUserProofreaderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{userId}/make-proofreader', \OpenAPI\OpenAPI\Models\Operations\MakeUserProofreaderRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MakeUserProofreaderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * rejectVendorApplication
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RejectVendorApplicationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RejectVendorApplicationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RejectVendorApplicationResponse
     */
	public function rejectVendorApplication(
        \OpenAPI\OpenAPI\Models\Operations\RejectVendorApplicationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RejectVendorApplicationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RejectVendorApplicationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{userId}/reject', \OpenAPI\OpenAPI\Models\Operations\RejectVendorApplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RejectVendorApplicationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sends email confirmation email for current user
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\SendEmailConfirmationResponse
     */
	public function sendEmailConfirmation(
    ): \OpenAPI\OpenAPI\Models\Operations\SendEmailConfirmationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resend-email-confirmation');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SendEmailConfirmationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sendEmailConfirmation200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SendEmailConfirmation200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sends password reset email to the user's registered email address
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\Email $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SendPasswordReminderResponse
     */
	public function sendPasswordReminder(
        \OpenAPI\OpenAPI\Models\Shared\Email $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SendPasswordReminderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/send-password-reminder');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SendPasswordReminderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sends email confirmation email for a user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SendUserEmailConfirmationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SendUserEmailConfirmationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SendUserEmailConfirmationResponse
     */
	public function sendUserEmailConfirmation(
        \OpenAPI\OpenAPI\Models\Operations\SendUserEmailConfirmationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SendUserEmailConfirmationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SendUserEmailConfirmationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{userId}/resend-email-confirmation', \OpenAPI\OpenAPI\Models\Operations\SendUserEmailConfirmationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SendUserEmailConfirmationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sendUserEmailConfirmation200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SendUserEmailConfirmation200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sendUserEmailConfirmation202ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SendUserEmailConfirmation202ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Subscribe to push notifications
     * 
     * Subscribe to push notifications to receive project and platform notifications.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\NotificationSubscription $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SubscribeNotificationResponse
     */
	public function subscribeNotification(
        \OpenAPI\OpenAPI\Models\Shared\NotificationSubscription $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SubscribeNotificationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/notifications/subscribe');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubscribeNotificationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * subscribeUserNotification
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SubscribeUserNotificationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SubscribeUserNotificationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SubscribeUserNotificationResponse
     */
	public function subscribeUserNotification(
        \OpenAPI\OpenAPI\Models\Operations\SubscribeUserNotificationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SubscribeUserNotificationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SubscribeUserNotificationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{userId}/notifications/subscribe', \OpenAPI\OpenAPI\Models\Operations\SubscribeUserNotificationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "notificationSubscription", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubscribeUserNotificationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * suspendUser
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SuspendUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SuspendUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SuspendUserResponse
     */
	public function suspendUser(
        \OpenAPI\OpenAPI\Models\Operations\SuspendUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SuspendUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SuspendUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{userId}/suspend', \OpenAPI\OpenAPI\Models\Operations\SuspendUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "suspendUserRequest", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SuspendUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Defreeze your account
     * 
     * Reactive your account to start receiving notifications.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\UnfreezeAccountResponse
     */
	public function unfreezeAccount(
    ): \OpenAPI\OpenAPI\Models\Operations\UnfreezeAccountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/unfreeze-account');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnfreezeAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unfreeze requester account for project notifications
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnfreezeUserAccountRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UnfreezeUserAccountResponse
     */
	public function unfreezeUserAccount(
        \OpenAPI\OpenAPI\Models\Operations\UnfreezeUserAccountRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UnfreezeUserAccountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{userId}/unfreeze-account', \OpenAPI\OpenAPI\Models\Operations\UnfreezeUserAccountRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnfreezeUserAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * unsubscribeNotification
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\NotificationSubscription $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UnsubscribeNotificationResponse
     */
	public function unsubscribeNotification(
        \OpenAPI\OpenAPI\Models\Shared\NotificationSubscription $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UnsubscribeNotificationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/notifications/unsubscribe');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnsubscribeNotificationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * unsubscribeUserNotification
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnsubscribeUserNotificationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UnsubscribeUserNotificationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UnsubscribeUserNotificationResponse
     */
	public function unsubscribeUserNotification(
        \OpenAPI\OpenAPI\Models\Operations\UnsubscribeUserNotificationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UnsubscribeUserNotificationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UnsubscribeUserNotificationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{userId}/notifications/unsubscribe', \OpenAPI\OpenAPI\Models\Operations\UnsubscribeUserNotificationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "notificationSubscription", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnsubscribeUserNotificationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update your account info
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\UserUpdateContent $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateMeResponse
     */
	public function updateMe(
        \OpenAPI\OpenAPI\Models\Shared\UserUpdateContent $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateMeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateMeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update your account password
     * 
     * Password should contain at least one uppercase, lowercase character and one number
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\PasswordUpdateContent $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePasswordResponse
     */
	public function updatePassword(
        \OpenAPI\OpenAPI\Models\Shared\PasswordUpdateContent $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePasswordResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/password');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePasswordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update payment info
     * 
     * Update your billing and saved credit card information
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\UpdatePaymentInfo $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentInfoResponse
     */
	public function updatePaymentInfo(
        \OpenAPI\OpenAPI\Models\Shared\UpdatePaymentInfo $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/payment');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paymentInfo = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaymentInfo', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateUser
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateUserResponse
     */
	public function updateUser(
        \OpenAPI\OpenAPI\Models\Operations\UpdateUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{userId}', \OpenAPI\OpenAPI\Models\Operations\UpdateUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "userUpdateContent", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateUserGroup
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUserGroupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUserGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateUserGroupResponse
     */
	public function updateUserGroup(
        \OpenAPI\OpenAPI\Models\Operations\UpdateUserGroupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateUserGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateUserGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{userId}/user-groups', \OpenAPI\OpenAPI\Models\Operations\UpdateUserGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "activeWidget", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateUserGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userGroupList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserGroupList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update user payment info
     * 
     * Update user's billing and saved credit card information
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUserPaymentInfoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateUserPaymentInfoResponse
     */
	public function updateUserPaymentInfo(
        \OpenAPI\OpenAPI\Models\Operations\UpdateUserPaymentInfoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateUserPaymentInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{userId}/payment', \OpenAPI\OpenAPI\Models\Operations\UpdateUserPaymentInfoRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "paymentInfo", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateUserPaymentInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Upload profile picture
     * 
     * Upload a profile picture on your account. This is used where your profile is mentioned throughout the platform. Your picture is not used publicly.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ProfilePictureUpload $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UploadProfilePictureJsonResponse
     */
	public function uploadProfilePictureJson(
        \OpenAPI\OpenAPI\Models\Shared\ProfilePictureUpload $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UploadProfilePictureJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/profile-picture');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UploadProfilePictureJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Upload profile picture
     * 
     * Upload a profile picture on your account. This is used where your profile is mentioned throughout the platform. Your picture is not used publicly.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ProfilePictureUpload1 $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UploadProfilePictureMultipartResponse
     */
	public function uploadProfilePictureMultipart(
        \OpenAPI\OpenAPI\Models\Shared\ProfilePictureUpload1 $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UploadProfilePictureMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/profile-picture');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UploadProfilePictureMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * uploadUserProfilePictureJson
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UploadUserProfilePictureJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UploadUserProfilePictureJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UploadUserProfilePictureJsonResponse
     */
	public function uploadUserProfilePictureJson(
        \OpenAPI\OpenAPI\Models\Operations\UploadUserProfilePictureJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UploadUserProfilePictureJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UploadUserProfilePictureJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{userId}/profile-picture', \OpenAPI\OpenAPI\Models\Operations\UploadUserProfilePictureJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "profilePictureUpload", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UploadUserProfilePictureJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * uploadUserProfilePictureMultipart
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UploadUserProfilePictureMultipartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UploadUserProfilePictureMultipartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UploadUserProfilePictureMultipartResponse
     */
	public function uploadUserProfilePictureMultipart(
        \OpenAPI\OpenAPI\Models\Operations\UploadUserProfilePictureMultipartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UploadUserProfilePictureMultipartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UploadUserProfilePictureMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{userId}/profile-picture', \OpenAPI\OpenAPI\Models\Operations\UploadUserProfilePictureMultipartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "profilePictureUpload1", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UploadUserProfilePictureMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}