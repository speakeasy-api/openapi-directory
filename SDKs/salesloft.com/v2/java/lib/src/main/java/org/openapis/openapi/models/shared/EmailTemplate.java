/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import java.time.OffsetDateTime;

/**
 * EmailTemplate - Success
 */
public class EmailTemplate {
    /**
     * Links to attachments and tags resources for this email template.
     */
    
    public java.util.Map<String, Object> links;
    public EmailTemplate withLinks(java.util.Map<String, Object> links) {
        this.links = links;
        return this;
    }
    
    /**
     * Datetime of when the email template was archived, if archived
     */
    
    public OffsetDateTime archivedAt;
    public EmailTemplate withArchivedAt(OffsetDateTime archivedAt) {
        this.archivedAt = archivedAt;
        return this;
    }
    
    /**
     * Sanitized body of the email template without email signature
     */
    
    public String body;
    public EmailTemplate withBody(String body) {
        this.body = body;
        return this;
    }
    
    /**
     * A plain text version of the first 100 characters of the body of the email template
     */
    
    public String bodyPreview;
    public EmailTemplate withBodyPreview(String bodyPreview) {
        this.bodyPreview = bodyPreview;
        return this;
    }
    
    /**
     * Whether this email template is only used on a cadence step. These templates are not visible in the SalesLoft application template list. If false, this email template is visible in the SalesLoft application, and may be used when composing an email or creating a cadence step.
     */
    
    public Boolean cadenceTemplate;
    public EmailTemplate withCadenceTemplate(Boolean cadenceTemplate) {
        this.cadenceTemplate = cadenceTemplate;
        return this;
    }
    
    /**
     * Whether click tracking is enabled for this email template
     */
    
    public Boolean clickTrackingEnabled;
    public EmailTemplate withClickTrackingEnabled(Boolean clickTrackingEnabled) {
        this.clickTrackingEnabled = clickTrackingEnabled;
        return this;
    }
    
    
    public EmailTemplateCounts counts;
    public EmailTemplate withCounts(EmailTemplateCounts counts) {
        this.counts = counts;
        return this;
    }
    
    /**
     * Datetime of when the email template was created
     */
    
    public OffsetDateTime createdAt;
    public EmailTemplate withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Groups to which this template is assigned, if any
     */
    
    public EmbeddedResource[] groups;
    public EmailTemplate withGroups(EmbeddedResource[] groups) {
        this.groups = groups;
        return this;
    }
    
    /**
     * ID of email template
     */
    
    public Long id;
    public EmailTemplate withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Datetime of when the email template was last used
     */
    
    public OffsetDateTime lastUsedAt;
    public EmailTemplate withLastUsedAt(OffsetDateTime lastUsedAt) {
        this.lastUsedAt = lastUsedAt;
        return this;
    }
    
    /**
     * Whether open tracking is enabled for this email template
     */
    
    public Boolean openTrackingEnabled;
    public EmailTemplate withOpenTrackingEnabled(Boolean openTrackingEnabled) {
        this.openTrackingEnabled = openTrackingEnabled;
        return this;
    }
    
    /**
     * Whether this email template is visible to team members (shared)
     */
    
    public Boolean shared;
    public EmailTemplate withShared(Boolean shared) {
        this.shared = shared;
        return this;
    }
    
    /**
     * Subject of the email template
     */
    
    public String subject;
    public EmailTemplate withSubject(String subject) {
        this.subject = subject;
        return this;
    }
    
    /**
     * All tags applied to this email template
     */
    
    public String[] tags;
    public EmailTemplate withTags(String[] tags) {
        this.tags = tags;
        return this;
    }
    
    
    public EmbeddedResource teamTemplate;
    public EmailTemplate withTeamTemplate(EmbeddedResource teamTemplate) {
        this.teamTemplate = teamTemplate;
        return this;
    }
    
    
    public EmbeddedResource templateOwner;
    public EmailTemplate withTemplateOwner(EmbeddedResource templateOwner) {
        this.templateOwner = templateOwner;
        return this;
    }
    
    /**
     * Title of the email template
     */
    
    public String title;
    public EmailTemplate withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * Datetime of when the email template was last updated
     */
    
    public OffsetDateTime updatedAt;
    public EmailTemplate withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
}
