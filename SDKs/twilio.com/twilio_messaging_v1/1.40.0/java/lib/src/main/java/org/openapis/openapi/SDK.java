/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://messaging.twilio.com",
	};
    /**
	 * CREATE_ALPHA_SENDER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_ALPHA_SENDER_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * CREATE_BRAND_REGISTRATIONS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_BRAND_REGISTRATIONS_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * CREATE_BRAND_VETTING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_BRAND_VETTING_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * CREATE_EXTERNAL_CAMPAIGN_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_EXTERNAL_CAMPAIGN_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * CREATE_LINKSHORTENING_MESSAGING_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_LINKSHORTENING_MESSAGING_SERVICE_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * CREATE_PHONE_NUMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_PHONE_NUMBER_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * CREATE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SERVICE_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * CREATE_SHORT_CODE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SHORT_CODE_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * CREATE_TOLLFREE_VERIFICATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_TOLLFREE_VERIFICATION_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * CREATE_US_APP_TO_PERSON_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_US_APP_TO_PERSON_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * DELETE_ALPHA_SENDER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_ALPHA_SENDER_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * DELETE_DOMAIN_CERT_V4_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_DOMAIN_CERT_V4_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * DELETE_LINKSHORTENING_MESSAGING_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_LINKSHORTENING_MESSAGING_SERVICE_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * DELETE_PHONE_NUMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_PHONE_NUMBER_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * DELETE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SERVICE_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * DELETE_SHORT_CODE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SHORT_CODE_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * DELETE_US_APP_TO_PERSON_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_US_APP_TO_PERSON_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * FETCH_ALPHA_SENDER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ALPHA_SENDER_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * FETCH_BRAND_REGISTRATIONS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_BRAND_REGISTRATIONS_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * FETCH_BRAND_VETTING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_BRAND_VETTING_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * FETCH_DEACTIVATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_DEACTIVATION_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * FETCH_DOMAIN_CERT_V4_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_DOMAIN_CERT_V4_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * FETCH_DOMAIN_CONFIG_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_DOMAIN_CONFIG_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * FETCH_DOMAIN_CONFIG_MESSAGING_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_DOMAIN_CONFIG_MESSAGING_SERVICE_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * FETCH_PHONE_NUMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_PHONE_NUMBER_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * FETCH_SHORT_CODE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SHORT_CODE_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * FETCH_TOLLFREE_VERIFICATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_TOLLFREE_VERIFICATION_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * FETCH_US_APP_TO_PERSON_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_US_APP_TO_PERSON_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * FETCH_US_APP_TO_PERSON_USECASE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_US_APP_TO_PERSON_USECASE_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * FETCH_USECASE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_USECASE_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * LIST_ALPHA_SENDER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_ALPHA_SENDER_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * LIST_BRAND_REGISTRATIONS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_BRAND_REGISTRATIONS_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * LIST_BRAND_VETTING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_BRAND_VETTING_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * LIST_PHONE_NUMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_PHONE_NUMBER_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * LIST_SHORT_CODE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SHORT_CODE_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * LIST_TOLLFREE_VERIFICATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_TOLLFREE_VERIFICATION_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * LIST_US_APP_TO_PERSON_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_US_APP_TO_PERSON_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * UPDATE_BRAND_REGISTRATIONS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_BRAND_REGISTRATIONS_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * UPDATE_DOMAIN_CERT_V4_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_DOMAIN_CERT_V4_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * UPDATE_DOMAIN_CONFIG_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_DOMAIN_CONFIG_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * UPDATE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SERVICE_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * UPDATE_TOLLFREE_VERIFICATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_TOLLFREE_VERIFICATION_SERVERS = {
        "https://messaging.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
	}

    public org.openapis.openapi.models.operations.CreateAlphaSenderResponse createAlphaSender(org.openapis.openapi.models.operations.CreateAlphaSenderRequest request) throws Exception {
        String baseUrl = CREATE_ALPHA_SENDER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateAlphaSenderPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/AlphaSenders", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateAlphaSenderResponse res = new org.openapis.openapi.models.operations.CreateAlphaSenderResponse() {{
            messagingV1ServiceAlphaSender = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MessagingV1ServiceAlphaSender out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MessagingV1ServiceAlphaSender.class);
                res.messagingV1ServiceAlphaSender = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateBrandRegistrationsResponse createBrandRegistrations(org.openapis.openapi.models.operations.CreateBrandRegistrationsRequest request) throws Exception {
        String baseUrl = CREATE_BRAND_REGISTRATIONS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/a2p/BrandRegistrations");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateBrandRegistrationsResponse res = new org.openapis.openapi.models.operations.CreateBrandRegistrationsResponse() {{
            messagingV1BrandRegistrations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MessagingV1BrandRegistrations out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MessagingV1BrandRegistrations.class);
                res.messagingV1BrandRegistrations = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateBrandVettingResponse createBrandVetting(org.openapis.openapi.models.operations.CreateBrandVettingRequest request) throws Exception {
        String baseUrl = CREATE_BRAND_VETTING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateBrandVettingPathParams.class, baseUrl, "/v1/a2p/BrandRegistrations/{BrandSid}/Vettings", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateBrandVettingResponse res = new org.openapis.openapi.models.operations.CreateBrandVettingResponse() {{
            messagingV1BrandRegistrationsBrandVetting = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MessagingV1BrandRegistrationsBrandVetting out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MessagingV1BrandRegistrationsBrandVetting.class);
                res.messagingV1BrandRegistrationsBrandVetting = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateExternalCampaignResponse createExternalCampaign(org.openapis.openapi.models.operations.CreateExternalCampaignRequest request) throws Exception {
        String baseUrl = CREATE_EXTERNAL_CAMPAIGN_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Services/PreregisteredUsa2p");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateExternalCampaignResponse res = new org.openapis.openapi.models.operations.CreateExternalCampaignResponse() {{
            messagingV1ExternalCampaign = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MessagingV1ExternalCampaign out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MessagingV1ExternalCampaign.class);
                res.messagingV1ExternalCampaign = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateLinkshorteningMessagingServiceResponse createLinkshorteningMessagingService(org.openapis.openapi.models.operations.CreateLinkshorteningMessagingServiceRequest request) throws Exception {
        String baseUrl = CREATE_LINKSHORTENING_MESSAGING_SERVICE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateLinkshorteningMessagingServicePathParams.class, baseUrl, "/v1/LinkShortening/Domains/{DomainSid}/MessagingServices/{MessagingServiceSid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateLinkshorteningMessagingServiceResponse res = new org.openapis.openapi.models.operations.CreateLinkshorteningMessagingServiceResponse() {{
            messagingV1LinkshorteningMessagingService = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MessagingV1LinkshorteningMessagingService out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MessagingV1LinkshorteningMessagingService.class);
                res.messagingV1LinkshorteningMessagingService = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreatePhoneNumberResponse createPhoneNumber(org.openapis.openapi.models.operations.CreatePhoneNumberRequest request) throws Exception {
        String baseUrl = CREATE_PHONE_NUMBER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreatePhoneNumberPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/PhoneNumbers", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreatePhoneNumberResponse res = new org.openapis.openapi.models.operations.CreatePhoneNumberResponse() {{
            messagingV1ServicePhoneNumber = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MessagingV1ServicePhoneNumber out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MessagingV1ServicePhoneNumber.class);
                res.messagingV1ServicePhoneNumber = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateServiceResponse createService(org.openapis.openapi.models.operations.CreateServiceRequest request) throws Exception {
        String baseUrl = CREATE_SERVICE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Services");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateServiceResponse res = new org.openapis.openapi.models.operations.CreateServiceResponse() {{
            messagingV1Service = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MessagingV1Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MessagingV1Service.class);
                res.messagingV1Service = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateShortCodeResponse createShortCode(org.openapis.openapi.models.operations.CreateShortCodeRequest request) throws Exception {
        String baseUrl = CREATE_SHORT_CODE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateShortCodePathParams.class, baseUrl, "/v1/Services/{ServiceSid}/ShortCodes", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateShortCodeResponse res = new org.openapis.openapi.models.operations.CreateShortCodeResponse() {{
            messagingV1ServiceShortCode = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MessagingV1ServiceShortCode out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MessagingV1ServiceShortCode.class);
                res.messagingV1ServiceShortCode = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateTollfreeVerificationResponse createTollfreeVerification(org.openapis.openapi.models.operations.CreateTollfreeVerificationRequest request) throws Exception {
        String baseUrl = CREATE_TOLLFREE_VERIFICATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Tollfree/Verifications");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateTollfreeVerificationResponse res = new org.openapis.openapi.models.operations.CreateTollfreeVerificationResponse() {{
            messagingV1TollfreeVerification = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MessagingV1TollfreeVerification out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MessagingV1TollfreeVerification.class);
                res.messagingV1TollfreeVerification = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateUsAppToPersonResponse createUsAppToPerson(org.openapis.openapi.models.operations.CreateUsAppToPersonRequest request) throws Exception {
        String baseUrl = CREATE_US_APP_TO_PERSON_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateUsAppToPersonPathParams.class, baseUrl, "/v1/Services/{MessagingServiceSid}/Compliance/Usa2p", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateUsAppToPersonResponse res = new org.openapis.openapi.models.operations.CreateUsAppToPersonResponse() {{
            messagingV1ServiceUsAppToPerson = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MessagingV1ServiceUsAppToPerson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MessagingV1ServiceUsAppToPerson.class);
                res.messagingV1ServiceUsAppToPerson = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteAlphaSenderResponse deleteAlphaSender(org.openapis.openapi.models.operations.DeleteAlphaSenderRequest request) throws Exception {
        String baseUrl = DELETE_ALPHA_SENDER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteAlphaSenderPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/AlphaSenders/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteAlphaSenderResponse res = new org.openapis.openapi.models.operations.DeleteAlphaSenderResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteDomainCertV4Response deleteDomainCertV4(org.openapis.openapi.models.operations.DeleteDomainCertV4Request request) throws Exception {
        String baseUrl = DELETE_DOMAIN_CERT_V4_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteDomainCertV4PathParams.class, baseUrl, "/v1/LinkShortening/Domains/{DomainSid}/Certificate", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteDomainCertV4Response res = new org.openapis.openapi.models.operations.DeleteDomainCertV4Response() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteLinkshorteningMessagingServiceResponse deleteLinkshorteningMessagingService(org.openapis.openapi.models.operations.DeleteLinkshorteningMessagingServiceRequest request) throws Exception {
        String baseUrl = DELETE_LINKSHORTENING_MESSAGING_SERVICE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteLinkshorteningMessagingServicePathParams.class, baseUrl, "/v1/LinkShortening/Domains/{DomainSid}/MessagingServices/{MessagingServiceSid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteLinkshorteningMessagingServiceResponse res = new org.openapis.openapi.models.operations.DeleteLinkshorteningMessagingServiceResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeletePhoneNumberResponse deletePhoneNumber(org.openapis.openapi.models.operations.DeletePhoneNumberRequest request) throws Exception {
        String baseUrl = DELETE_PHONE_NUMBER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeletePhoneNumberPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/PhoneNumbers/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeletePhoneNumberResponse res = new org.openapis.openapi.models.operations.DeletePhoneNumberResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteServiceResponse deleteService(org.openapis.openapi.models.operations.DeleteServiceRequest request) throws Exception {
        String baseUrl = DELETE_SERVICE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteServicePathParams.class, baseUrl, "/v1/Services/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteServiceResponse res = new org.openapis.openapi.models.operations.DeleteServiceResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteShortCodeResponse deleteShortCode(org.openapis.openapi.models.operations.DeleteShortCodeRequest request) throws Exception {
        String baseUrl = DELETE_SHORT_CODE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteShortCodePathParams.class, baseUrl, "/v1/Services/{ServiceSid}/ShortCodes/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteShortCodeResponse res = new org.openapis.openapi.models.operations.DeleteShortCodeResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteUsAppToPersonResponse deleteUsAppToPerson(org.openapis.openapi.models.operations.DeleteUsAppToPersonRequest request) throws Exception {
        String baseUrl = DELETE_US_APP_TO_PERSON_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteUsAppToPersonPathParams.class, baseUrl, "/v1/Services/{MessagingServiceSid}/Compliance/Usa2p/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteUsAppToPersonResponse res = new org.openapis.openapi.models.operations.DeleteUsAppToPersonResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchAlphaSenderResponse fetchAlphaSender(org.openapis.openapi.models.operations.FetchAlphaSenderRequest request) throws Exception {
        String baseUrl = FETCH_ALPHA_SENDER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchAlphaSenderPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/AlphaSenders/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchAlphaSenderResponse res = new org.openapis.openapi.models.operations.FetchAlphaSenderResponse() {{
            messagingV1ServiceAlphaSender = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MessagingV1ServiceAlphaSender out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MessagingV1ServiceAlphaSender.class);
                res.messagingV1ServiceAlphaSender = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchBrandRegistrationsResponse fetchBrandRegistrations(org.openapis.openapi.models.operations.FetchBrandRegistrationsRequest request) throws Exception {
        String baseUrl = FETCH_BRAND_REGISTRATIONS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchBrandRegistrationsPathParams.class, baseUrl, "/v1/a2p/BrandRegistrations/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchBrandRegistrationsResponse res = new org.openapis.openapi.models.operations.FetchBrandRegistrationsResponse() {{
            messagingV1BrandRegistrations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MessagingV1BrandRegistrations out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MessagingV1BrandRegistrations.class);
                res.messagingV1BrandRegistrations = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchBrandVettingResponse fetchBrandVetting(org.openapis.openapi.models.operations.FetchBrandVettingRequest request) throws Exception {
        String baseUrl = FETCH_BRAND_VETTING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchBrandVettingPathParams.class, baseUrl, "/v1/a2p/BrandRegistrations/{BrandSid}/Vettings/{BrandVettingSid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchBrandVettingResponse res = new org.openapis.openapi.models.operations.FetchBrandVettingResponse() {{
            messagingV1BrandRegistrationsBrandVetting = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MessagingV1BrandRegistrationsBrandVetting out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MessagingV1BrandRegistrationsBrandVetting.class);
                res.messagingV1BrandRegistrationsBrandVetting = out;
            }
        }

        return res;
    }

    /**
     * Fetch a list of all United States numbers that have been deactivated on a specific date.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchDeactivationResponse fetchDeactivation(org.openapis.openapi.models.operations.FetchDeactivationRequest request) throws Exception {
        String baseUrl = FETCH_DEACTIVATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Deactivations");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchDeactivationQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchDeactivationResponse res = new org.openapis.openapi.models.operations.FetchDeactivationResponse() {{
            messagingV1Deactivation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 307) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MessagingV1Deactivation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MessagingV1Deactivation.class);
                res.messagingV1Deactivation = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchDomainCertV4Response fetchDomainCertV4(org.openapis.openapi.models.operations.FetchDomainCertV4Request request) throws Exception {
        String baseUrl = FETCH_DOMAIN_CERT_V4_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchDomainCertV4PathParams.class, baseUrl, "/v1/LinkShortening/Domains/{DomainSid}/Certificate", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchDomainCertV4Response res = new org.openapis.openapi.models.operations.FetchDomainCertV4Response() {{
            messagingV1DomainCertV4 = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MessagingV1DomainCertV4 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MessagingV1DomainCertV4.class);
                res.messagingV1DomainCertV4 = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchDomainConfigResponse fetchDomainConfig(org.openapis.openapi.models.operations.FetchDomainConfigRequest request) throws Exception {
        String baseUrl = FETCH_DOMAIN_CONFIG_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchDomainConfigPathParams.class, baseUrl, "/v1/LinkShortening/Domains/{DomainSid}/Config", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchDomainConfigResponse res = new org.openapis.openapi.models.operations.FetchDomainConfigResponse() {{
            messagingV1DomainConfig = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MessagingV1DomainConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MessagingV1DomainConfig.class);
                res.messagingV1DomainConfig = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchDomainConfigMessagingServiceResponse fetchDomainConfigMessagingService(org.openapis.openapi.models.operations.FetchDomainConfigMessagingServiceRequest request) throws Exception {
        String baseUrl = FETCH_DOMAIN_CONFIG_MESSAGING_SERVICE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchDomainConfigMessagingServicePathParams.class, baseUrl, "/v1/LinkShortening/MessagingService/{MessagingServiceSid}/DomainConfig", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchDomainConfigMessagingServiceResponse res = new org.openapis.openapi.models.operations.FetchDomainConfigMessagingServiceResponse() {{
            messagingV1DomainConfigMessagingService = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MessagingV1DomainConfigMessagingService out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MessagingV1DomainConfigMessagingService.class);
                res.messagingV1DomainConfigMessagingService = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchPhoneNumberResponse fetchPhoneNumber(org.openapis.openapi.models.operations.FetchPhoneNumberRequest request) throws Exception {
        String baseUrl = FETCH_PHONE_NUMBER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchPhoneNumberPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/PhoneNumbers/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchPhoneNumberResponse res = new org.openapis.openapi.models.operations.FetchPhoneNumberResponse() {{
            messagingV1ServicePhoneNumber = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MessagingV1ServicePhoneNumber out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MessagingV1ServicePhoneNumber.class);
                res.messagingV1ServicePhoneNumber = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchServiceResponse fetchService(org.openapis.openapi.models.operations.FetchServiceRequest request) throws Exception {
        String baseUrl = FETCH_SERVICE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServicePathParams.class, baseUrl, "/v1/Services/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceResponse res = new org.openapis.openapi.models.operations.FetchServiceResponse() {{
            messagingV1Service = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MessagingV1Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MessagingV1Service.class);
                res.messagingV1Service = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchShortCodeResponse fetchShortCode(org.openapis.openapi.models.operations.FetchShortCodeRequest request) throws Exception {
        String baseUrl = FETCH_SHORT_CODE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchShortCodePathParams.class, baseUrl, "/v1/Services/{ServiceSid}/ShortCodes/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchShortCodeResponse res = new org.openapis.openapi.models.operations.FetchShortCodeResponse() {{
            messagingV1ServiceShortCode = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MessagingV1ServiceShortCode out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MessagingV1ServiceShortCode.class);
                res.messagingV1ServiceShortCode = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchTollfreeVerificationResponse fetchTollfreeVerification(org.openapis.openapi.models.operations.FetchTollfreeVerificationRequest request) throws Exception {
        String baseUrl = FETCH_TOLLFREE_VERIFICATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchTollfreeVerificationPathParams.class, baseUrl, "/v1/Tollfree/Verifications/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchTollfreeVerificationResponse res = new org.openapis.openapi.models.operations.FetchTollfreeVerificationResponse() {{
            messagingV1TollfreeVerification = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MessagingV1TollfreeVerification out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MessagingV1TollfreeVerification.class);
                res.messagingV1TollfreeVerification = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchUsAppToPersonResponse fetchUsAppToPerson(org.openapis.openapi.models.operations.FetchUsAppToPersonRequest request) throws Exception {
        String baseUrl = FETCH_US_APP_TO_PERSON_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchUsAppToPersonPathParams.class, baseUrl, "/v1/Services/{MessagingServiceSid}/Compliance/Usa2p/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchUsAppToPersonResponse res = new org.openapis.openapi.models.operations.FetchUsAppToPersonResponse() {{
            messagingV1ServiceUsAppToPerson = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MessagingV1ServiceUsAppToPerson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MessagingV1ServiceUsAppToPerson.class);
                res.messagingV1ServiceUsAppToPerson = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchUsAppToPersonUsecaseResponse fetchUsAppToPersonUsecase(org.openapis.openapi.models.operations.FetchUsAppToPersonUsecaseRequest request) throws Exception {
        String baseUrl = FETCH_US_APP_TO_PERSON_USECASE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchUsAppToPersonUsecasePathParams.class, baseUrl, "/v1/Services/{MessagingServiceSid}/Compliance/Usa2p/Usecases", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchUsAppToPersonUsecaseQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchUsAppToPersonUsecaseResponse res = new org.openapis.openapi.models.operations.FetchUsAppToPersonUsecaseResponse() {{
            messagingV1ServiceUsAppToPersonUsecase = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MessagingV1ServiceUsAppToPersonUsecase out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MessagingV1ServiceUsAppToPersonUsecase.class);
                res.messagingV1ServiceUsAppToPersonUsecase = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchUsecaseResponse fetchUsecase(org.openapis.openapi.models.operations.FetchUsecaseRequest request) throws Exception {
        String baseUrl = FETCH_USECASE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Services/Usecases");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchUsecaseResponse res = new org.openapis.openapi.models.operations.FetchUsecaseResponse() {{
            messagingV1Usecase = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MessagingV1Usecase out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MessagingV1Usecase.class);
                res.messagingV1Usecase = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListAlphaSenderResponse listAlphaSender(org.openapis.openapi.models.operations.ListAlphaSenderRequest request) throws Exception {
        String baseUrl = LIST_ALPHA_SENDER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListAlphaSenderPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/AlphaSenders", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListAlphaSenderQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListAlphaSenderResponse res = new org.openapis.openapi.models.operations.ListAlphaSenderResponse() {{
            listAlphaSenderResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListAlphaSenderListAlphaSenderResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListAlphaSenderListAlphaSenderResponse.class);
                res.listAlphaSenderResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListBrandRegistrationsResponse listBrandRegistrations(org.openapis.openapi.models.operations.ListBrandRegistrationsRequest request) throws Exception {
        String baseUrl = LIST_BRAND_REGISTRATIONS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/a2p/BrandRegistrations");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListBrandRegistrationsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListBrandRegistrationsResponse res = new org.openapis.openapi.models.operations.ListBrandRegistrationsResponse() {{
            listBrandRegistrationsResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListBrandRegistrationsListBrandRegistrationsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListBrandRegistrationsListBrandRegistrationsResponse.class);
                res.listBrandRegistrationsResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListBrandVettingResponse listBrandVetting(org.openapis.openapi.models.operations.ListBrandVettingRequest request) throws Exception {
        String baseUrl = LIST_BRAND_VETTING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListBrandVettingPathParams.class, baseUrl, "/v1/a2p/BrandRegistrations/{BrandSid}/Vettings", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListBrandVettingQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListBrandVettingResponse res = new org.openapis.openapi.models.operations.ListBrandVettingResponse() {{
            listBrandVettingResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListBrandVettingListBrandVettingResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListBrandVettingListBrandVettingResponse.class);
                res.listBrandVettingResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListPhoneNumberResponse listPhoneNumber(org.openapis.openapi.models.operations.ListPhoneNumberRequest request) throws Exception {
        String baseUrl = LIST_PHONE_NUMBER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListPhoneNumberPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/PhoneNumbers", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListPhoneNumberQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListPhoneNumberResponse res = new org.openapis.openapi.models.operations.ListPhoneNumberResponse() {{
            listPhoneNumberResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListPhoneNumberListPhoneNumberResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListPhoneNumberListPhoneNumberResponse.class);
                res.listPhoneNumberResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListServiceResponse listService(org.openapis.openapi.models.operations.ListServiceRequest request) throws Exception {
        String baseUrl = LIST_SERVICE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Services");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceResponse res = new org.openapis.openapi.models.operations.ListServiceResponse() {{
            listServiceResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceListServiceResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceListServiceResponse.class);
                res.listServiceResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListShortCodeResponse listShortCode(org.openapis.openapi.models.operations.ListShortCodeRequest request) throws Exception {
        String baseUrl = LIST_SHORT_CODE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListShortCodePathParams.class, baseUrl, "/v1/Services/{ServiceSid}/ShortCodes", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListShortCodeQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListShortCodeResponse res = new org.openapis.openapi.models.operations.ListShortCodeResponse() {{
            listShortCodeResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListShortCodeListShortCodeResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListShortCodeListShortCodeResponse.class);
                res.listShortCodeResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListTollfreeVerificationResponse listTollfreeVerification(org.openapis.openapi.models.operations.ListTollfreeVerificationRequest request) throws Exception {
        String baseUrl = LIST_TOLLFREE_VERIFICATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Tollfree/Verifications");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListTollfreeVerificationQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListTollfreeVerificationResponse res = new org.openapis.openapi.models.operations.ListTollfreeVerificationResponse() {{
            listTollfreeVerificationResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListTollfreeVerificationListTollfreeVerificationResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListTollfreeVerificationListTollfreeVerificationResponse.class);
                res.listTollfreeVerificationResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListUsAppToPersonResponse listUsAppToPerson(org.openapis.openapi.models.operations.ListUsAppToPersonRequest request) throws Exception {
        String baseUrl = LIST_US_APP_TO_PERSON_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListUsAppToPersonPathParams.class, baseUrl, "/v1/Services/{MessagingServiceSid}/Compliance/Usa2p", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListUsAppToPersonQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListUsAppToPersonResponse res = new org.openapis.openapi.models.operations.ListUsAppToPersonResponse() {{
            listUsAppToPersonResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListUsAppToPersonListUsAppToPersonResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListUsAppToPersonListUsAppToPersonResponse.class);
                res.listUsAppToPersonResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateBrandRegistrationsResponse updateBrandRegistrations(org.openapis.openapi.models.operations.UpdateBrandRegistrationsRequest request) throws Exception {
        String baseUrl = UPDATE_BRAND_REGISTRATIONS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateBrandRegistrationsPathParams.class, baseUrl, "/v1/a2p/BrandRegistrations/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateBrandRegistrationsResponse res = new org.openapis.openapi.models.operations.UpdateBrandRegistrationsResponse() {{
            messagingV1BrandRegistrations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 202) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MessagingV1BrandRegistrations out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MessagingV1BrandRegistrations.class);
                res.messagingV1BrandRegistrations = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateDomainCertV4Response updateDomainCertV4(org.openapis.openapi.models.operations.UpdateDomainCertV4Request request) throws Exception {
        String baseUrl = UPDATE_DOMAIN_CERT_V4_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateDomainCertV4PathParams.class, baseUrl, "/v1/LinkShortening/Domains/{DomainSid}/Certificate", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateDomainCertV4Response res = new org.openapis.openapi.models.operations.UpdateDomainCertV4Response() {{
            messagingV1DomainCertV4 = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MessagingV1DomainCertV4 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MessagingV1DomainCertV4.class);
                res.messagingV1DomainCertV4 = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateDomainConfigResponse updateDomainConfig(org.openapis.openapi.models.operations.UpdateDomainConfigRequest request) throws Exception {
        String baseUrl = UPDATE_DOMAIN_CONFIG_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateDomainConfigPathParams.class, baseUrl, "/v1/LinkShortening/Domains/{DomainSid}/Config", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateDomainConfigResponse res = new org.openapis.openapi.models.operations.UpdateDomainConfigResponse() {{
            messagingV1DomainConfig = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MessagingV1DomainConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MessagingV1DomainConfig.class);
                res.messagingV1DomainConfig = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateServiceResponse updateService(org.openapis.openapi.models.operations.UpdateServiceRequest request) throws Exception {
        String baseUrl = UPDATE_SERVICE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateServicePathParams.class, baseUrl, "/v1/Services/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateServiceResponse res = new org.openapis.openapi.models.operations.UpdateServiceResponse() {{
            messagingV1Service = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MessagingV1Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MessagingV1Service.class);
                res.messagingV1Service = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateTollfreeVerificationResponse updateTollfreeVerification(org.openapis.openapi.models.operations.UpdateTollfreeVerificationRequest request) throws Exception {
        String baseUrl = UPDATE_TOLLFREE_VERIFICATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateTollfreeVerificationPathParams.class, baseUrl, "/v1/Tollfree/Verifications/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateTollfreeVerificationResponse res = new org.openapis.openapi.models.operations.UpdateTollfreeVerificationResponse() {{
            messagingV1TollfreeVerification = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 202) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MessagingV1TollfreeVerification out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MessagingV1TollfreeVerification.class);
                res.messagingV1TollfreeVerification = out;
            }
        }

        return res;
    }
}