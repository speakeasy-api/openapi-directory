// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateDirectoryConfigXAmzTargetEnum
type CreateDirectoryConfigXAmzTargetEnum string

const (
	CreateDirectoryConfigXAmzTargetEnumPhotonAdminProxyServiceCreateDirectoryConfig CreateDirectoryConfigXAmzTargetEnum = "PhotonAdminProxyService.CreateDirectoryConfig"
)

func (e *CreateDirectoryConfigXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PhotonAdminProxyService.CreateDirectoryConfig":
		*e = CreateDirectoryConfigXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDirectoryConfigXAmzTargetEnum: %s", s)
	}
}

type CreateDirectoryConfigRequest struct {
	CreateDirectoryConfigRequest shared.CreateDirectoryConfigRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                *string                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256            *string                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential               *string                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                     *string                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken            *string                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                *string                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders            *string                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                   CreateDirectoryConfigXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateDirectoryConfigResponse struct {
	ContentType string
	// Success
	CreateDirectoryConfigResult *shared.CreateDirectoryConfigResult
	// InvalidAccountStatusException
	InvalidAccountStatusException interface{}
	// InvalidRoleException
	InvalidRoleException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// OperationNotPermittedException
	OperationNotPermittedException interface{}
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
