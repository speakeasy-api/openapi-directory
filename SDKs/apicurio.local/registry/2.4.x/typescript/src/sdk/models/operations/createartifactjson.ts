/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * The algorithm to use when checking the content validity. (available: SHA256, MD5; default: SHA256)
 */
export enum CreateArtifactJsonXRegistryHashAlgorithmEnum {
  Sha256 = "SHA256",
  Md5 = "MD5",
}

export class CreateArtifactJsonRequest extends SpeakeasyBase {
  /**
   * The content of the artifact being created. This is often, but not always, JSON data
   *
   * @remarks
   * representing one of the supported artifact types:
   *
   * * Avro (`AVRO`)
   * * Protobuf (`PROTOBUF`)
   * * JSON Schema (`JSON`)
   * * Kafka Connect (`KCONNECT`)
   * * OpenAPI (`OPENAPI`)
   * * AsyncAPI (`ASYNCAPI`)
   * * GraphQL (`GRAPHQL`)
   * * Web Services Description Language (`WSDL`)
   * * XML Schema (`XSD`)
   *
   */
  @SpeakeasyMetadata({
    data: "request, media_type=application/vnd.create.extended+json",
  })
  contentCreateRequest: shared.ContentCreateRequest;

  /**
   * A client-provided, globally unique identifier for the new artifact.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Registry-ArtifactId",
  })
  xRegistryArtifactId?: string;

  /**
   * Specifies the type of the artifact being added. Possible values include:
   *
   * @remarks
   *
   * * Avro (`AVRO`)
   * * Protobuf (`PROTOBUF`)
   * * JSON Schema (`JSON`)
   * * Kafka Connect (`KCONNECT`)
   * * OpenAPI (`OPENAPI`)
   * * AsyncAPI (`ASYNCAPI`)
   * * GraphQL (`GRAPHQL`)
   * * Web Services Description Language (`WSDL`)
   * * XML Schema (`XSD`)
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Registry-ArtifactType",
  })
  xRegistryArtifactType?: string;

  /**
   * Specifies the (optional) hash of the artifact to be verified.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Registry-Content-Hash",
  })
  xRegistryContentHash?: string;

  /**
   * Specifies the description of artifact being added. Description must be ASCII-only string. If this is not provided, the server will extract the description from the artifact content.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Registry-Description",
  })
  xRegistryDescription?: string;

  /**
   * Specifies the description of artifact being added. Value of this must be Base64 encoded string. If this is not provided, the server will extract the description from the artifact content.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Registry-Description-Encoded",
  })
  xRegistryDescriptionEncoded?: string;

  /**
   * The algorithm to use when checking the content validity. (available: SHA256, MD5; default: SHA256)
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Registry-Hash-Algorithm",
  })
  xRegistryHashAlgorithm?: CreateArtifactJsonXRegistryHashAlgorithmEnum;

  /**
   * Specifies the name of artifact being added. Name must be ASCII-only string. If this is not provided, the server will extract the name from the artifact content.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Registry-Name",
  })
  xRegistryName?: string;

  /**
   * Specifies the name of artifact being added. Value of this must be Base64 encoded string. If this is not provided, the server will extract the name from the artifact content.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Registry-Name-Encoded",
  })
  xRegistryNameEncoded?: string;

  /**
   * Specifies the version number of this initial version of the artifact content.  This would typically
   *
   * @remarks
   * be a simple integer or a SemVer value.  If not provided, the server will assign a version number
   * automatically (starting with version `1`).
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Registry-Version",
  })
  xRegistryVersion?: string;

  /**
   * Used only when the `ifExists` query parameter is set to `RETURN_OR_UPDATE`, this parameter can be set to `true` to indicate that the server should "canonicalize" the content when searching for a matching version.  The canonicalization algorithm is unique to each artifact type, but typically involves removing extra whitespace and formatting the content in a consistent manner.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=canonical",
  })
  canonical?: boolean;

  /**
   * The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=groupId",
  })
  groupId: string;

  /**
   * Set this option to instruct the server on what to do if the artifact already exists.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ifExists",
  })
  ifExists?: shared.IfExistsEnum;
}

export class CreateArtifactJsonResponse extends SpeakeasyBase {
  /**
   * Artifact was successfully created.
   */
  @SpeakeasyMetadata()
  artifactMetaData?: shared.ArtifactMetaData;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Common response for all operations that can return a `400` error.
   */
  @SpeakeasyMetadata()
  error?: shared.ErrorT;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Common response used when an input conflicts with existing data.
   */
  @SpeakeasyMetadata()
  ruleViolationError?: shared.RuleViolationError;
}
