/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class Betslippart {
    /**
     * Indicates whether each way is available
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eachWayAvailable")
    public Boolean eachWayAvailable;

    public Betslippart withEachWayAvailable(Boolean eachWayAvailable) {
        this.eachWayAvailable = eachWayAvailable;
        return this;
    }
    
    /**
     * Indicates if the bet can be used in a multiple bet
     */
    @JsonProperty("includeInMultiple")
    public Boolean includeInMultiple;

    public Betslippart withIncludeInMultiple(Boolean includeInMultiple) {
        this.includeInMultiple = includeInMultiple;
        return this;
    }
    
    /**
     * To organise a number of outcome selections into one or more bet groups, such as a Single bet, a Double bet, a Trixie, etc
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("legGroup")
    public Long legGroup;

    public Betslippart withLegGroup(Long legGroup) {
        this.legGroup = legGroup;
        return this;
    }
    
    /**
     * Indicates if there has been a change in the price
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priceChanged")
    public Boolean priceChanged;

    public Betslippart withPriceChanged(Boolean priceChanged) {
        this.priceChanged = priceChanged;
        return this;
    }
    
    /**
     * Price denominator - will be ignored for types other than L (Fixed Price)
     */
    @JsonProperty("priceDen")
    public Long priceDen;

    public Betslippart withPriceDen(Long priceDen) {
        this.priceDen = priceDen;
        return this;
    }
    
    /**
     * Price numerator - will be ignored for types other than L (Fixed Price)
     */
    @JsonProperty("priceNum")
    public Long priceNum;

    public Betslippart withPriceNum(Long priceNum) {
        this.priceNum = priceNum;
        return this;
    }
    
    /**
     * The type of price selected. For example - ‘L’ (Fixed)
     */
    @JsonProperty("priceType")
    public Long priceType;

    public Betslippart withPriceType(Long priceType) {
        this.priceType = priceType;
        return this;
    }
    
    /**
     * The selection identifier
     */
    @JsonProperty("selectionId")
    public Long selectionId;

    public Betslippart withSelectionId(Long selectionId) {
        this.selectionId = selectionId;
        return this;
    }
    
    /**
     * Indicates whether the bet can be used in a single bet
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("singleAvailable")
    public Boolean singleAvailable;

    public Betslippart withSingleAvailable(Boolean singleAvailable) {
        this.singleAvailable = singleAvailable;
        return this;
    }
    
    /**
     * Indicates whether starting prices are available
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startingPriceAvailable")
    public Boolean startingPriceAvailable;

    public Betslippart withStartingPriceAvailable(Boolean startingPriceAvailable) {
        this.startingPriceAvailable = startingPriceAvailable;
        return this;
    }
    
    /**
     * Indicates the current status of the bet
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;

    public Betslippart withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * Indicates whether the status of the bet has changed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statusChanged")
    public Boolean statusChanged;

    public Betslippart withStatusChanged(Boolean statusChanged) {
        this.statusChanged = statusChanged;
        return this;
    }
    
    public Betslippart(@JsonProperty("includeInMultiple") Boolean includeInMultiple, @JsonProperty("priceDen") Long priceDen, @JsonProperty("priceNum") Long priceNum, @JsonProperty("priceType") Long priceType, @JsonProperty("selectionId") Long selectionId) {
        this.includeInMultiple = includeInMultiple;
        this.priceDen = priceDen;
        this.priceNum = priceNum;
        this.priceType = priceType;
        this.selectionId = selectionId;
  }
}
