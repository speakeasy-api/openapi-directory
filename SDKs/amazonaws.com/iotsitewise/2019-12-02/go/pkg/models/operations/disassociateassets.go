// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type DisassociateAssetsPathParams struct {
	// The ID of the parent asset from which to disassociate the child asset.
	AssetID string `pathParam:"style=simple,explode=false,name=assetId"`
}

type DisassociateAssetsHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type DisassociateAssetsRequestBody struct {
	// The ID of the child asset to disassociate.
	ChildAssetID string `json:"childAssetId"`
	// A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
	ClientToken *string `json:"clientToken,omitempty"`
	// The ID of a hierarchy in the parent asset's model. Hierarchies allow different groupings of assets to be formed that all come from the same asset model. You can use the hierarchy ID to identify the correct asset to disassociate. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html">Asset hierarchies</a> in the <i>IoT SiteWise User Guide</i>.
	HierarchyID string `json:"hierarchyId"`
}

type DisassociateAssetsRequest struct {
	PathParams DisassociateAssetsPathParams
	Headers    DisassociateAssetsHeaders
	Request    DisassociateAssetsRequestBody `request:"mediaType=application/json"`
}

type DisassociateAssetsResponse struct {
	// ConflictingOperationException
	ConflictingOperationException interface{}
	ContentType                   string
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ThrottlingException
	ThrottlingException interface{}
}
