// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetpublicdataSecurity struct {
	CodeOauth     *string `security:"scheme,type=oauth2,name=Authorization"`
	PasswordOauth *string `security:"scheme,type=oauth2,name=Authorization"`
}

type GetpublicdataRequiredDataEnum string

const (
	GetpublicdataRequiredDataEnumTemperature GetpublicdataRequiredDataEnum = "temperature"
	GetpublicdataRequiredDataEnumHumidity    GetpublicdataRequiredDataEnum = "humidity"
	GetpublicdataRequiredDataEnumPressure    GetpublicdataRequiredDataEnum = "pressure"
	GetpublicdataRequiredDataEnumWind        GetpublicdataRequiredDataEnum = "wind"
	GetpublicdataRequiredDataEnumRain        GetpublicdataRequiredDataEnum = "rain"
)

func (e GetpublicdataRequiredDataEnum) ToPointer() *GetpublicdataRequiredDataEnum {
	return &e
}

func (e *GetpublicdataRequiredDataEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "temperature":
		fallthrough
	case "humidity":
		fallthrough
	case "pressure":
		fallthrough
	case "wind":
		fallthrough
	case "rain":
		*e = GetpublicdataRequiredDataEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetpublicdataRequiredDataEnum: %v", v)
	}
}

type GetpublicdataRequest struct {
	// True to exclude stations with abnormal temperature measures. Default is false.
	Filter *bool `queryParam:"style=form,explode=true,name=filter"`
	// Latitude of the north east corner of the requested area. -85 <= lat_ne <= 85 and lat_ne>lat_sw
	LatNe int `queryParam:"style=form,explode=true,name=lat_ne"`
	// Latitude of the south west corner of the requested area. -85 <= lat_sw <= 85
	LatSw int `queryParam:"style=form,explode=true,name=lat_sw"`
	// Longitude of the north east corner of the requested area. -180 <= lon_ne <= 180 and lon_ne>lon_sw
	LonNe int `queryParam:"style=form,explode=true,name=lon_ne"`
	// Longitude of the south west corner of the requested area. -180 <= lon_sw <= 180
	LonSw int `queryParam:"style=form,explode=true,name=lon_sw"`
	// To filter stations based on relevant measurements you want (e.g. rain will only return stations with rain gauges). Default is no filter. You can find all measurements available on the Thermostat page.
	RequiredData []GetpublicdataRequiredDataEnum `queryParam:"style=form,explode=false,name=required_data"`
}

type GetpublicdataResponse struct {
	ContentType string
	// Successful response
	NAPublicDataResponse *shared.NAPublicDataResponse
	StatusCode           int
	RawResponse          *http.Response
}
