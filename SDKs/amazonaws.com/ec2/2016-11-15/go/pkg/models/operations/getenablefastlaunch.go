// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETEnableFastLaunchActionEnum
type GETEnableFastLaunchActionEnum string

const (
	GETEnableFastLaunchActionEnumEnableFastLaunch GETEnableFastLaunchActionEnum = "EnableFastLaunch"
)

func (e GETEnableFastLaunchActionEnum) ToPointer() *GETEnableFastLaunchActionEnum {
	return &e
}

func (e *GETEnableFastLaunchActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EnableFastLaunch":
		*e = GETEnableFastLaunchActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETEnableFastLaunchActionEnum: %v", v)
	}
}

// GETEnableFastLaunchLaunchTemplate - <p>Request to create a launch template for a fast-launch enabled Windows AMI.</p> <note> <p>Note - You can specify either the <code>LaunchTemplateName</code> or the <code>LaunchTemplateId</code>, but not both.</p> </note>
type GETEnableFastLaunchLaunchTemplate struct {
	LaunchTemplateID   *string `queryParam:"name=LaunchTemplateId"`
	LaunchTemplateName *string `queryParam:"name=LaunchTemplateName"`
	Version            string  `queryParam:"name=Version"`
}

// GETEnableFastLaunchSnapshotConfiguration - Configuration settings for creating and managing pre-provisioned snapshots for a fast-launch enabled Windows AMI.
type GETEnableFastLaunchSnapshotConfiguration struct {
	TargetResourceCount *int64 `queryParam:"name=TargetResourceCount"`
}

// GETEnableFastLaunchVersionEnum
type GETEnableFastLaunchVersionEnum string

const (
	GETEnableFastLaunchVersionEnumTwoThousandAndSixteen1115 GETEnableFastLaunchVersionEnum = "2016-11-15"
)

func (e GETEnableFastLaunchVersionEnum) ToPointer() *GETEnableFastLaunchVersionEnum {
	return &e
}

func (e *GETEnableFastLaunchVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETEnableFastLaunchVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETEnableFastLaunchVersionEnum: %v", v)
	}
}

type GETEnableFastLaunchRequest struct {
	Action GETEnableFastLaunchActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The ID of the image for which youâ€™re enabling faster launching.
	ImageID string `queryParam:"style=form,explode=true,name=ImageId"`
	// The launch template to use when launching Windows instances from pre-provisioned snapshots. Launch template parameters can include either the name or ID of the launch template, but not both.
	LaunchTemplate *GETEnableFastLaunchLaunchTemplate `queryParam:"style=form,explode=true,name=LaunchTemplate"`
	// The maximum number of instances that Amazon EC2 can launch at the same time to create pre-provisioned snapshots for Windows faster launching. Value must be <code>6</code> or greater.
	MaxParallelLaunches *int64 `queryParam:"style=form,explode=true,name=MaxParallelLaunches"`
	// The type of resource to use for pre-provisioning the Windows AMI for faster launching. Supported values include: <code>snapshot</code>, which is the default value.
	ResourceType *string `queryParam:"style=form,explode=true,name=ResourceType"`
	// Configuration settings for creating and managing the snapshots that are used for pre-provisioning the Windows AMI for faster launching. The associated <code>ResourceType</code> must be <code>snapshot</code>.
	SnapshotConfiguration *GETEnableFastLaunchSnapshotConfiguration `queryParam:"style=form,explode=true,name=SnapshotConfiguration"`
	Version               GETEnableFastLaunchVersionEnum            `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm         *string                                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256     *string                                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential        *string                                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate              *string                                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken     *string                                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature         *string                                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders     *string                                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETEnableFastLaunchResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
