/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Organisation - The Organisation resource.
 */
public class Organisation {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    public OrganisationAddress[] addresses;
    public Organisation withAddresses(OrganisationAddress[] addresses) {
        this.addresses = addresses;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("electronicAddresses")
    public ElectronicAddress[] electronicAddresses;
    public Organisation withElectronicAddresses(ElectronicAddress[] electronicAddresses) {
        this.electronicAddresses = electronicAddresses;
        return this;
    }
    
    /**
     * The organisation's establishment date, for example, `1928-03-03` (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format).
     */
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("establishmentDate")
    public LocalDate establishmentDate;
    public Organisation withEstablishmentDate(LocalDate establishmentDate) {
        this.establishmentDate = establishmentDate;
        return this;
    }
    
    /**
     * The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("fromDate")
    public OffsetDateTime fromDate;
    public Organisation withFromDate(OffsetDateTime fromDate) {
        this.fromDate = fromDate;
        return this;
    }
    
    /**
     * The party's unique identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Organisation withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The organisation's legal entity type.
     */
    @JsonProperty("legalEntityType")
    public OrganisationLegalEntityTypeEnum legalEntityType;
    public Organisation withLegalEntityType(OrganisationLegalEntityTypeEnum legalEntityType) {
        this.legalEntityType = legalEntityType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("names")
    public OrganisationName[] names;
    public Organisation withNames(OrganisationName[] names) {
        this.names = names;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registeredIdentifiers")
    public RegisteredIdentifier[] registeredIdentifiers;
    public Organisation withRegisteredIdentifiers(RegisteredIdentifier[] registeredIdentifiers) {
        this.registeredIdentifiers = registeredIdentifiers;
        return this;
    }
    
    /**
     * The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("toDate")
    public OffsetDateTime toDate;
    public Organisation withToDate(OffsetDateTime toDate) {
        this.toDate = toDate;
        return this;
    }
    
}
