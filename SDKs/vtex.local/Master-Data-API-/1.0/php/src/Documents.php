<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Documents 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create new document
     * 
     * This request allows you to create a new document corresponding to a given data entity. For example, you can create a new customer profile or address.
     * 
     * > You can use this request to create documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to create.
     * 
     * ## Example use cases
     * 
     * ### Client profile
     * 
     * In order to create a new customer profile, choose the `CL` data entity and send a request similar to this:
     * 
     * POST
     * ```
     * https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents
     * ```
     * 
     * Request body
     * ```json
     * {
     *     "email": "clark.kent@examplemail.com",
     *     "firstName": "Clark",
     *     "lastName": "Kent",
     *     "phone": "+12025550195",
     *     "documentType": "CPF",
     *     "document": "12345678900"
     *     "isCorporate": false,
     *     "isNewsletterOptIn": false,
     *     "localeDefault": "en-US"
     *  }
     * ```
     * 
     * ### Client address
     * 
     * For a new address, the data entity is `AD` and the request would look like this:
     * 
     * POST
     * ```
     * https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents
     * ```
     * 
     * Request body
     * ```json
     * {
     *     "addressName": "My House",
     *     "addressType": "residential",
     *     "city": "Metropolis",
     *     "complement": "",
     *     "country": "USA",
     *     "postalCode": "11375",
     *     "receiverName": "Clark Kent",
     *     "reference": null,
     *     "state": "MP",
     *     "street": "Baker Street",
     *     "neighborhood": "Upper east side",
     *     "number": "21",
     *     "userId": "7e03m794-a33a-11e9-84rt6-0adfa64s5a8e"
     * }
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatenewdocumentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatenewdocumentResponse
     */
	public function createnewdocument(
        \OpenAPI\OpenAPI\Models\Operations\CreatenewdocumentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatenewdocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/dataentities/{dataEntityName}/documents', \OpenAPI\OpenAPI\Models\Operations\CreatenewdocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CreatenewdocumentRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatenewdocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->documentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DocumentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create partial document
     * 
     * This request allows you to partially update a document corresponding to a given data entity.
     * 
     * > You can use this request to create documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.
     * 
     * ## Example use cases
     * 
     * ### Client profile
     * 
     * In order to create a customer profile's `phone` and `isNewsletterOptIn` fields, choose the `CL` data entity and send a request similar to this:
     * 
     * PATCH
     * ```
     * https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents
     * ```
     * 
     * Request body
     * ```json
     * {
     *     "phone": "+12025550195",
     *     "isNewsletterOptIn": false
     *  }
     * ```
     * 
     * ### Client address
     * 
     * In order to update the `receiverName` of an existing address, the data entity is `AD` and the request would look like this:
     * 
     * PATCH
     * ```
     * https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents
     * ```
     * 
     * Request body
     * ```json
     * {
     *     "receiverName": "Lois Lane"
     * }
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateorupdatepartialdocumentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateorupdatepartialdocumentResponse
     */
	public function createorupdatepartialdocument(
        \OpenAPI\OpenAPI\Models\Operations\CreateorupdatepartialdocumentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateorupdatepartialdocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/dataentities/{dataEntityName}/documents', \OpenAPI\OpenAPI\Models\Operations\CreateorupdatepartialdocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CreateorupdatepartialdocumentRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateorupdatepartialdocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->documentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DocumentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete document
     * 
     * It allows to delete a document.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletedocumentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletedocumentResponse
     */
	public function deletedocument(
        \OpenAPI\OpenAPI\Models\Operations\DeletedocumentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletedocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/dataentities/{dataEntityName}/documents/{id}', \OpenAPI\OpenAPI\Models\Operations\DeletedocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletedocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get document
     * 
     * Gets document by ID.
     * 
     * 
     * > Assign the `_fields` parameter in the query string to retrieve the desired fields. If you want to return all the fields use `_fields=_all`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetdocumentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetdocumentResponse
     */
	public function getdocument(
        \OpenAPI\OpenAPI\Models\Operations\GetdocumentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetdocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/dataentities/{dataEntityName}/documents/{id}', \OpenAPI\OpenAPI\Models\Operations\GetdocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetdocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usingFieldsAll = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UsingFieldsAll', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update entire document
     * 
     * Update an existing document corresponding to a given data entity. For example, you can update a customer profile or address.
     * 
     * > You can use this request to update documents in any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.
     * 
     * ## Example use cases
     * 
     * ### Client profile
     * 
     * In order to update an existing customer profile, choose the `CL` data entity and send a request similar to this:
     * 
     * PUT
     * ```
     * https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents/123456789abc
     * ```
     * 
     * Request body
     * ```json
     * {
     *     "email": "clark.kent@examplemail.com",
     *     "firstName": "Clark",
     *     "lastName": "Kent",
     *     "phone": "+12025550195",
     *     "documentType": "CPF",
     *     "document": "12345678900"
     *     "isCorporate": false,
     *     "isNewsletterOptIn": false,
     *     "localeDefault": "en-US"
     *  }
     * ```
     * 
     * ### Client address
     * 
     * To update an address, the data entity is `AD` and the request would look like this:
     * 
     * PUT
     * ```
     * https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents/123456789abc
     * ```
     * 
     * Request body
     * ```json
     * {
     *     "addressName": "My House",
     *     "addressType": "residential",
     *     "city": "Metropolis",
     *     "complement": "",
     *     "country": "USA",
     *     "postalCode": "11375",
     *     "receiverName": "Clark Kent",
     *     "reference": null,
     *     "state": "MP",
     *     "street": "Baker Street",
     *     "neighborhood": "Upper east side",
     *     "number": "21",
     *     "userId": "7e03m794-a33a-11e9-84rt6-0adfa64s5a8e"
     * }
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateentiredocumentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateentiredocumentResponse
     */
	public function updateentiredocument(
        \OpenAPI\OpenAPI\Models\Operations\UpdateentiredocumentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateentiredocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/dataentities/{dataEntityName}/documents/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateentiredocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UpdateentiredocumentRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateentiredocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->documentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DocumentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update partial document
     * 
     * This request allows you to partially update a document corresponding to a given data entity. For example, you can update some fields of a customer profile or address.
     * 
     * > You can use this request to update documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.
     * 
     * ## Example use cases
     * 
     * ### Client profile
     * 
     * In order to update a customer profile's `phone` and `isNewsletterOptIn` fields, choose the `CL` data entity and send a request similar to this:
     * 
     * PATCH
     * ```
     * https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents/123456789abc
     * ```
     * 
     * Request body
     * ```json
     * {
     *     "phone": "+12025550195",
     *     "isNewsletterOptIn": false
     *  }
     * ```
     * 
     * ### Client address
     * 
     * In order to update the `receiverName` of an existing address, the data entity is `AD` and the request would look like this:
     * 
     * PATCH
     * ```
     * https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents/123456789abc
     * ```
     * 
     * Request body
     * ```json
     * {
     *     "receiverName": "Lois Lane"
     * }
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatepartialdocumentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatepartialdocumentResponse
     */
	public function updatepartialdocument(
        \OpenAPI\OpenAPI\Models\Operations\UpdatepartialdocumentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatepartialdocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/dataentities/{dataEntityName}/documents/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdatepartialdocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UpdatepartialdocumentRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatepartialdocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->documentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DocumentResponse', 'json');
            }
        }

        return $response;
    }
}