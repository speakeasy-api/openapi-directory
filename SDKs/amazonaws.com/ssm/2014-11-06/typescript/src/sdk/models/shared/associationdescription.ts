/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AlarmConfiguration } from "./alarmconfiguration";
import { AlarmStateInformation } from "./alarmstateinformation";
import { AssociationComplianceSeverityEnum } from "./associationcomplianceseverityenum";
import { AssociationOverview } from "./associationoverview";
import { AssociationStatus } from "./associationstatus";
import { AssociationSyncComplianceEnum } from "./associationsynccomplianceenum";
import { InstanceAssociationOutputLocation } from "./instanceassociationoutputlocation";
import { Target } from "./target";
import { TargetLocation } from "./targetlocation";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Describes the parameters for a document.
 */
export class AssociationDescription extends SpeakeasyBase {
  /**
   * The details for the CloudWatch alarm you want to apply to an automation or command.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AlarmConfiguration" })
  @Type(() => AlarmConfiguration)
  alarmConfiguration?: AlarmConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "ApplyOnlyAtCronInterval" })
  applyOnlyAtCronInterval?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "AssociationId" })
  associationId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "AssociationName" })
  associationName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "AssociationVersion" })
  associationVersion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "AutomationTargetParameterName" })
  automationTargetParameterName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "CalendarNames" })
  calendarNames?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "ComplianceSeverity" })
  complianceSeverity?: AssociationComplianceSeverityEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "Date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  date?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "DocumentVersion" })
  documentVersion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "InstanceId" })
  instanceId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "LastExecutionDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastExecutionDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "LastSuccessfulExecutionDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastSuccessfulExecutionDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "LastUpdateAssociationDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUpdateAssociationDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "MaxConcurrency" })
  maxConcurrency?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "MaxErrors" })
  maxErrors?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "OutputLocation" })
  @Type(() => InstanceAssociationOutputLocation)
  outputLocation?: InstanceAssociationOutputLocation;

  @SpeakeasyMetadata()
  @Expose({ name: "Overview" })
  @Type(() => AssociationOverview)
  overview?: AssociationOverview;

  @SpeakeasyMetadata()
  @Expose({ name: "Parameters" })
  parameters?: Record<string, string[]>;

  @SpeakeasyMetadata()
  @Expose({ name: "ScheduleExpression" })
  scheduleExpression?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ScheduleOffset" })
  scheduleOffset?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  @Type(() => AssociationStatus)
  status?: AssociationStatus;

  @SpeakeasyMetadata()
  @Expose({ name: "SyncCompliance" })
  syncCompliance?: AssociationSyncComplianceEnum;

  @SpeakeasyMetadata({ elemType: TargetLocation })
  @Expose({ name: "TargetLocations" })
  @Type(() => TargetLocation)
  targetLocations?: TargetLocation[];

  @SpeakeasyMetadata()
  @Expose({ name: "TargetMaps" })
  targetMaps?: Record<string, string[]>[];

  @SpeakeasyMetadata({ elemType: Target })
  @Expose({ name: "Targets" })
  @Type(() => Target)
  targets?: Target[];

  @SpeakeasyMetadata({ elemType: AlarmStateInformation })
  @Expose({ name: "TriggeredAlarms" })
  @Type(() => AlarmStateInformation)
  triggeredAlarms?: AlarmStateInformation[];
}
