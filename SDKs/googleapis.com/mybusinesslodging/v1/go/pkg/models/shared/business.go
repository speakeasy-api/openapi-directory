// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// BusinessBusinessCenterExceptionEnum - Business center exception.
type BusinessBusinessCenterExceptionEnum string

const (
	BusinessBusinessCenterExceptionEnumExceptionUnspecified BusinessBusinessCenterExceptionEnum = "EXCEPTION_UNSPECIFIED"
	BusinessBusinessCenterExceptionEnumUnderConstruction    BusinessBusinessCenterExceptionEnum = "UNDER_CONSTRUCTION"
	BusinessBusinessCenterExceptionEnumDependentOnSeason    BusinessBusinessCenterExceptionEnum = "DEPENDENT_ON_SEASON"
	BusinessBusinessCenterExceptionEnumDependentOnDayOfWeek BusinessBusinessCenterExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *BusinessBusinessCenterExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = BusinessBusinessCenterExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BusinessBusinessCenterExceptionEnum: %s", s)
	}
}

// BusinessMeetingRoomsCountExceptionEnum - Meeting rooms count exception.
type BusinessMeetingRoomsCountExceptionEnum string

const (
	BusinessMeetingRoomsCountExceptionEnumExceptionUnspecified BusinessMeetingRoomsCountExceptionEnum = "EXCEPTION_UNSPECIFIED"
	BusinessMeetingRoomsCountExceptionEnumUnderConstruction    BusinessMeetingRoomsCountExceptionEnum = "UNDER_CONSTRUCTION"
	BusinessMeetingRoomsCountExceptionEnumDependentOnSeason    BusinessMeetingRoomsCountExceptionEnum = "DEPENDENT_ON_SEASON"
	BusinessMeetingRoomsCountExceptionEnumDependentOnDayOfWeek BusinessMeetingRoomsCountExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *BusinessMeetingRoomsCountExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = BusinessMeetingRoomsCountExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BusinessMeetingRoomsCountExceptionEnum: %s", s)
	}
}

// BusinessMeetingRoomsExceptionEnum - Meeting rooms exception.
type BusinessMeetingRoomsExceptionEnum string

const (
	BusinessMeetingRoomsExceptionEnumExceptionUnspecified BusinessMeetingRoomsExceptionEnum = "EXCEPTION_UNSPECIFIED"
	BusinessMeetingRoomsExceptionEnumUnderConstruction    BusinessMeetingRoomsExceptionEnum = "UNDER_CONSTRUCTION"
	BusinessMeetingRoomsExceptionEnumDependentOnSeason    BusinessMeetingRoomsExceptionEnum = "DEPENDENT_ON_SEASON"
	BusinessMeetingRoomsExceptionEnumDependentOnDayOfWeek BusinessMeetingRoomsExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *BusinessMeetingRoomsExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = BusinessMeetingRoomsExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BusinessMeetingRoomsExceptionEnum: %s", s)
	}
}

// Business - Features of the property of specific interest to the business traveler.
type Business struct {
	// Business center. A designated room at the hotel with one or more desks and equipped with guest-use computers, printers, fax machines and/or photocopiers. May or may not be open 24/7. May or may not require a key to access. Not a meeting room or conference room.
	BusinessCenter *bool `json:"businessCenter,omitempty"`
	// Business center exception.
	BusinessCenterException *BusinessBusinessCenterExceptionEnum `json:"businessCenterException,omitempty"`
	// Meeting rooms. Rooms at the hotel designated for business-related gatherings. Rooms are usually equipped with tables or desks, office chairs and audio/visual facilities to allow for presentations and conference calls. Also known as conference rooms.
	MeetingRooms *bool `json:"meetingRooms,omitempty"`
	// Meeting rooms count. The number of meeting rooms at the property.
	MeetingRoomsCount *int `json:"meetingRoomsCount,omitempty"`
	// Meeting rooms count exception.
	MeetingRoomsCountException *BusinessMeetingRoomsCountExceptionEnum `json:"meetingRoomsCountException,omitempty"`
	// Meeting rooms exception.
	MeetingRoomsException *BusinessMeetingRoomsExceptionEnum `json:"meetingRoomsException,omitempty"`
}
