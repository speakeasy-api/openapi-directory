/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Information about the Chatbot topics or Chatbot clients associated with a notification rule.
 */
export class SubscribeRequestBodyTarget extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "TargetAddress" })
  targetAddress?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "TargetType" })
  targetType?: string;
}

export class SubscribeRequestBody extends SpeakeasyBase {
  /**
   * The Amazon Resource Name (ARN) of the notification rule for which you want to create the association.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Arn" })
  arn: string;

  /**
   * An enumeration token that, when provided in a request, returns the next batch of the results.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ClientRequestToken" })
  clientRequestToken?: string;

  /**
   * Information about the Chatbot topics or Chatbot clients associated with a notification rule.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Target" })
  @Type(() => SubscribeRequestBodyTarget)
  target: SubscribeRequestBodyTarget;
}

export class SubscribeRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: SubscribeRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class SubscribeResponse extends SpeakeasyBase {
  /**
   * ConfigurationException
   */
  @SpeakeasyMetadata()
  configurationException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  subscribeResult?: shared.SubscribeResult;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
