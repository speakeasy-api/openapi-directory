/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class StatusRequestBody extends SpeakeasyBase {
  /**
   * the endpoint to get the status for, to expressed as either IP address or URL
   */
  @SpeakeasyMetadata()
  @Expose({ name: "endpoint" })
  endpoint: string;
}

/**
 * Structure holding detailed information about the connection
 */
export class Status200ApplicationJSONLastHandshake extends SpeakeasyBase {
  /**
   * Agent name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "agent" })
  agent?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "chain_id" })
  chainId?: string;

  /**
   * Generation number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "generation" })
  generation?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "head_id" })
  headId?: string;

  /**
   * Head number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "head_num" })
  headNum?: number;

  /**
   * Base58 encoded EOSIO public key
   */
  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "last_irreversible_block_id" })
  lastIrreversibleBlockId?: string;

  /**
   * Last irreversible block number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_irreversible_block_num" })
  lastIrreversibleBlockNum?: number;

  /**
   * Incremental value above a computed base
   */
  @SpeakeasyMetadata()
  @Expose({ name: "network_version" })
  networkVersion?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "node_id" })
  nodeId?: string;

  /**
   * Operating system name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "os" })
  os?: string;

  /**
   * IP address or URL of the peer
   */
  @SpeakeasyMetadata()
  @Expose({ name: "p2p_address" })
  p2pAddress?: string;

  /**
   * Base58 encoded EOSIO cryptographic signature
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sig" })
  sig?: string;

  /**
   * Date/time string in the format YYYY-MM-DDTHH:MM:SS.sss
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  time?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "token" })
  token?: string;
}

/**
 * OK
 */
export class Status200ApplicationJSON extends SpeakeasyBase {
  /**
   * True if the peer is connecting, otherwise false
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connecting" })
  connecting?: boolean;

  /**
   * Structure holding detailed information about the connection
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_handshake" })
  @Type(() => Status200ApplicationJSONLastHandshake)
  lastHandshake?: Status200ApplicationJSONLastHandshake;

  /**
   * The IP address or URL of the peer
   */
  @SpeakeasyMetadata()
  @Expose({ name: "peer" })
  peer?: string;

  /**
   * True if the peer is syncing, otherwise false
   */
  @SpeakeasyMetadata()
  @Expose({ name: "syncing" })
  syncing?: boolean;
}

export class StatusResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  status200ApplicationJSONObject?: Status200ApplicationJSON;
}
