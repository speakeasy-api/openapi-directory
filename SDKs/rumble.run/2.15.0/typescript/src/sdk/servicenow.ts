/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class ServiceNow {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Export an asset inventory as CSV for ServiceNow integration
   */
  snowExportAssetsCSV(
    config?: AxiosRequestConfig
  ): Promise<operations.SnowExportAssetsCSVResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/export/org/assets.servicenow.csv";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SnowExportAssetsCSVResponse =
        new operations.SnowExportAssetsCSVResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `text/csv`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.snowExportAssetsCSV200TextCSVBinaryString = out;
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Exports the asset inventory as JSON
   */
  snowExportAssetsJSON(
    config?: AxiosRequestConfig
  ): Promise<operations.SnowExportAssetsJSONResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/export/org/assets.servicenow.json";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SnowExportAssetsJSONResponse =
        new operations.SnowExportAssetsJSONResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.assetServiceNows = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.assetServiceNows = utils.objectToClass(
              httpRes?.data,
              shared.AssetServiceNow,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Export a service inventory as CSV for ServiceNow integration
   */
  snowExportServicesCSV(
    config?: AxiosRequestConfig
  ): Promise<operations.SnowExportServicesCSVResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/export/org/services.servicenow.csv";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SnowExportServicesCSVResponse =
        new operations.SnowExportServicesCSVResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `text/csv`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.snowExportServicesCSV200TextCSVBinaryString = out;
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }
}
