// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type TaskStateEnum string

const (
	TaskStateEnumPending   TaskStateEnum = "pending"
	TaskStateEnumQueued    TaskStateEnum = "queued"
	TaskStateEnumRunning   TaskStateEnum = "running"
	TaskStateEnumTimedout  TaskStateEnum = "timedout"
	TaskStateEnumCompleted TaskStateEnum = "completed"
)

func (e TaskStateEnum) ToPointer() *TaskStateEnum {
	return &e
}

func (e *TaskStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "queued":
		fallthrough
	case "running":
		fallthrough
	case "timedout":
		fallthrough
	case "completed":
		*e = TaskStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TaskStateEnum: %v", v)
	}
}

type TaskStatusEnum string

const (
	TaskStatusEnumOk        TaskStatusEnum = "ok"
	TaskStatusEnumWarn      TaskStatusEnum = "warn"
	TaskStatusEnumUnchanged TaskStatusEnum = "unchanged"
	TaskStatusEnumError     TaskStatusEnum = "error"
)

func (e TaskStatusEnum) ToPointer() *TaskStatusEnum {
	return &e
}

func (e *TaskStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ok":
		fallthrough
	case "warn":
		fallthrough
	case "unchanged":
		fallthrough
	case "error":
		*e = TaskStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TaskStatusEnum: %v", v)
	}
}

// TaskInput - Task attributes to update
type TaskInput struct {
	CompletedAt     *time.Time             `json:"completed_at,omitempty"`
	Message         *string                `json:"message,omitempty"`
	Name            *string                `json:"name,omitempty"`
	Output          map[string]interface{} `json:"output,omitempty"`
	State           *TaskStateEnum         `json:"state,omitempty"`
	Status          *TaskStatusEnum        `json:"status,omitempty"`
	TargetSourceRef *string                `json:"target_source_ref,omitempty"`
	TargetType      *string                `json:"target_type,omitempty"`
	Type            *string                `json:"type,omitempty"`
}

// Task - Task info
type Task struct {
	ArchivedAt          *time.Time `json:"archived_at,omitempty"`
	ChildTaskID         *string    `json:"child_task_id,omitempty"`
	CompletedAt         *time.Time `json:"completed_at,omitempty"`
	ControllerMessageID *string    `json:"controller_message_id,omitempty"`
	CreatedAt           *time.Time `json:"created_at,omitempty"`
	// UUID of task
	ID      *string                `json:"id,omitempty"`
	Input   map[string]interface{} `json:"input,omitempty"`
	Message *string                `json:"message,omitempty"`
	Name    *string                `json:"name,omitempty"`
	Output  map[string]interface{} `json:"output,omitempty"`
	Owner   *string                `json:"owner,omitempty"`
	// ID of the resource
	SourceID        *string         `json:"source_id,omitempty"`
	State           *TaskStateEnum  `json:"state,omitempty"`
	Status          *TaskStatusEnum `json:"status,omitempty"`
	TargetSourceRef *string         `json:"target_source_ref,omitempty"`
	TargetType      *string         `json:"target_type,omitempty"`
	Type            *string         `json:"type,omitempty"`
	UpdatedAt       *time.Time      `json:"updated_at,omitempty"`
}
