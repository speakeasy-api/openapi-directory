// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type StoresPatchSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

// StoresPatchRequestBody - Store update request
type StoresPatchRequestBody struct {
	// Service connection id to updated.
	ServiceConnectionID string `json:"service_connection_id"`
}

type StoresPatchRequest struct {
	// Store update request
	RequestBody StoresPatchRequestBody `request:"mediaType=application/json"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// The name of the store
	StoreName string `pathParam:"style=simple,explode=false,name=store_name"`
}

type StoresPatchDefaultApplicationJSONCodeEnum string

const (
	StoresPatchDefaultApplicationJSONCodeEnumBadRequest          StoresPatchDefaultApplicationJSONCodeEnum = "BadRequest"
	StoresPatchDefaultApplicationJSONCodeEnumConflict            StoresPatchDefaultApplicationJSONCodeEnum = "Conflict"
	StoresPatchDefaultApplicationJSONCodeEnumNotAcceptable       StoresPatchDefaultApplicationJSONCodeEnum = "NotAcceptable"
	StoresPatchDefaultApplicationJSONCodeEnumNotFound            StoresPatchDefaultApplicationJSONCodeEnum = "NotFound"
	StoresPatchDefaultApplicationJSONCodeEnumInternalServerError StoresPatchDefaultApplicationJSONCodeEnum = "InternalServerError"
	StoresPatchDefaultApplicationJSONCodeEnumUnauthorized        StoresPatchDefaultApplicationJSONCodeEnum = "Unauthorized"
	StoresPatchDefaultApplicationJSONCodeEnumTooManyRequests     StoresPatchDefaultApplicationJSONCodeEnum = "TooManyRequests"
)

func (e StoresPatchDefaultApplicationJSONCodeEnum) ToPointer() *StoresPatchDefaultApplicationJSONCodeEnum {
	return &e
}

func (e *StoresPatchDefaultApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = StoresPatchDefaultApplicationJSONCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StoresPatchDefaultApplicationJSONCodeEnum: %v", v)
	}
}

// StoresPatchDefaultApplicationJSON - Error
type StoresPatchDefaultApplicationJSON struct {
	Code    StoresPatchDefaultApplicationJSONCodeEnum `json:"code"`
	Message string                                    `json:"message"`
}

type StoresPatchResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Error
	StoresPatchDefaultApplicationJSONObject *StoresPatchDefaultApplicationJSON
}
