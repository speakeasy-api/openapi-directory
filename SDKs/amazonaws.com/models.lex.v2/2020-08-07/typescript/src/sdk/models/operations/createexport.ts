/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The file format of the bot or bot locale definition files.
 */
export enum CreateExportRequestBodyFileFormatEnum {
  LexJson = "LexJson",
  Tsv = "TSV",
}

/**
 * Provides information about the bot or bot locale that you want to export. You can specify the <code>botExportSpecification</code> or the <code>botLocaleExportSpecification</code>, but not both.
 */
export class CreateExportRequestBodyResourceSpecification extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "botExportSpecification" })
  @Type(() => shared.BotExportSpecification)
  botExportSpecification?: shared.BotExportSpecification;

  @SpeakeasyMetadata()
  @Expose({ name: "botLocaleExportSpecification" })
  @Type(() => shared.BotLocaleExportSpecification)
  botLocaleExportSpecification?: shared.BotLocaleExportSpecification;

  @SpeakeasyMetadata()
  @Expose({ name: "customVocabularyExportSpecification" })
  @Type(() => shared.CustomVocabularyExportSpecification)
  customVocabularyExportSpecification?: shared.CustomVocabularyExportSpecification;
}

export class CreateExportRequestBody extends SpeakeasyBase {
  /**
   * The file format of the bot or bot locale definition files.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fileFormat" })
  fileFormat: CreateExportRequestBodyFileFormatEnum;

  /**
   * An password to use to encrypt the exported archive. Using a password is optional, but you should encrypt the archive to protect the data in transit between Amazon Lex and your local computer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "filePassword" })
  filePassword?: string;

  /**
   * Provides information about the bot or bot locale that you want to export. You can specify the <code>botExportSpecification</code> or the <code>botLocaleExportSpecification</code>, but not both.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resourceSpecification" })
  @Type(() => CreateExportRequestBodyResourceSpecification)
  resourceSpecification: CreateExportRequestBodyResourceSpecification;
}

export class CreateExportRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateExportRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateExportResponse extends SpeakeasyBase {
  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createExportResponse?: shared.CreateExportResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
