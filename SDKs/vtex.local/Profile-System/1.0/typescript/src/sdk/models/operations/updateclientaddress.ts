/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class UpdateClientAddressRequestBody extends SpeakeasyBase {
  /**
   * Name of administrative area, such as the state or province.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "administrativeAreaLevel1" })
  administrativeAreaLevel1?: string;

  /**
   * Two letter country code.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "countryCode" })
  countryCode?: string;

  /**
   * Name of the address country.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "countryName" })
  countryName?: string;

  /**
   * Name of address locality, such as the city.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "locality" })
  locality?: string;

  /**
   * Name of the address locality area, such as the neighborhood or district.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "localityAreaLevel1" })
  localityAreaLevel1?: string;

  /**
   * Address postal code.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "postalCode" })
  postalCode?: string;

  /**
   * Name of the address country.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "route" })
  route?: string;

  /**
   * Name of the address country.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "streetNumber" })
  streetNumber?: string;
}

export class UpdateClientAddressRequest extends SpeakeasyBase {
  /**
   * HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
   */
  @SpeakeasyMetadata({ data: "header, style=simple;explode=false;name=Accept" })
  accept: string;

  /**
   * Type of the content being sent.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=Content-Type",
  })
  contentType: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: UpdateClientAddressRequestBody;

  /**
   * ID of a client's specific address as returned in the Create client address endpoint's response, in the `id` field.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=addressId",
  })
  addressId: string;

  /**
   * The `profileId` path parameter may be substituted by other profile fields in this request. When making this request, send the `alternativeKey` parameter with a value equal to the key of the field you wish to use as `profileId`.
   * 
   * @remarks
   * 
   * 
> Currently, there are two possible values for this parameter: `email` and `document`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=alternativeKey",
  })
  alternativeKey?: string;

  /**
   * ID of the client's profile as returned by the Create profile endpoint's response, in the `id` field. It can also be an `alternativeKey` according to your custom profile schema. In this case, this request should also send the `alternativeKey` parameter.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=profileId",
  })
  profileId: string;
}

export class UpdateClientAddressResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  updateClientAddress200ApplicationJSONObject?: Record<string, any>;
}
