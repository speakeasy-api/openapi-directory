// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ContextKeyTypeEnumEnum string

const (
	ContextKeyTypeEnumEnumString      ContextKeyTypeEnumEnum = "string"
	ContextKeyTypeEnumEnumStringList  ContextKeyTypeEnumEnum = "stringList"
	ContextKeyTypeEnumEnumNumeric     ContextKeyTypeEnumEnum = "numeric"
	ContextKeyTypeEnumEnumNumericList ContextKeyTypeEnumEnum = "numericList"
	ContextKeyTypeEnumEnumBoolean     ContextKeyTypeEnumEnum = "boolean"
	ContextKeyTypeEnumEnumBooleanList ContextKeyTypeEnumEnum = "booleanList"
	ContextKeyTypeEnumEnumIP          ContextKeyTypeEnumEnum = "ip"
	ContextKeyTypeEnumEnumIPList      ContextKeyTypeEnumEnum = "ipList"
	ContextKeyTypeEnumEnumBinary      ContextKeyTypeEnumEnum = "binary"
	ContextKeyTypeEnumEnumBinaryList  ContextKeyTypeEnumEnum = "binaryList"
	ContextKeyTypeEnumEnumDate        ContextKeyTypeEnumEnum = "date"
	ContextKeyTypeEnumEnumDateList    ContextKeyTypeEnumEnum = "dateList"
)

func (e ContextKeyTypeEnumEnum) ToPointer() *ContextKeyTypeEnumEnum {
	return &e
}

func (e *ContextKeyTypeEnumEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "string":
		fallthrough
	case "stringList":
		fallthrough
	case "numeric":
		fallthrough
	case "numericList":
		fallthrough
	case "boolean":
		fallthrough
	case "booleanList":
		fallthrough
	case "ip":
		fallthrough
	case "ipList":
		fallthrough
	case "binary":
		fallthrough
	case "binaryList":
		fallthrough
	case "date":
		fallthrough
	case "dateList":
		*e = ContextKeyTypeEnumEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ContextKeyTypeEnumEnum: %v", v)
	}
}
